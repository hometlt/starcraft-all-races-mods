include "TriggerLibs/NativeLib"
include "LibARRA"
include "LibVSAI"

include "LibUTES_h"

//--------------------------------------------------------------------------------------------------
// Library: LIBRARY - UNIT TESTER
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUTES_InitLibraries () {
    libNtve_InitVariables();
    libARRA_InitVariables();
    libVSAI_InitVariables();
}

// Variable Initialization
bool libUTES_InitVariables_completed = false;

void libUTES_InitVariables () {
    int init_i;
    int init_j;

    if (libUTES_InitVariables_completed) {
        return;
    }

    libUTES_InitVariables_completed = true;

    libUTES_gv_tester_menu = c_invalidDialogControlId;
    libUTES_gv_tester_panel = c_invalidDialogControlId;
    libUTES_gv_creator_panel = c_invalidDialogControlId;
    libUTES_gv_unitMorphs = "^Morphs";
    libUTES_gv_levelUpgrades = "^LevelUpgrades";
    libUTES_gv_levelUpgradesList = "LevelUpgradesList";
    libUTES_gv_menu_mode_settings = c_invalidDialogControlId;
    libUTES_gv_menu_mode_creator = c_invalidDialogControlId;
    libUTES_gv_menu_creator_panel = c_invalidDialogControlId;
    libUTES_gv_menu_creator_mirror = c_invalidDialogControlId;
    libUTES_gv_menu_creator_clear = c_invalidDialogControlId;
    libUTES_gv_menu_attack_panel = c_invalidDialogControlId;
    libUTES_gv_menu_attack_pause = c_invalidDialogControlId;
    libUTES_gv_menu_attack_reset = c_invalidDialogControlId;
    libUTES_gv_menu_start_attack = c_invalidDialogControlId;
    libUTES_gv_menu_stop_attack = c_invalidDialogControlId;
    libUTES_gv_menu_attack_attack = c_invalidDialogControlId;
    libUTES_gv_menu_side = c_invalidDialogControlId;
    libUTES_gv_vision = true;
    libUTES_gv_test_timer = TimerCreate();
    libUTES_gv_test_timer_window = c_timerWindowNone;
    libUTES_gv_settings_panel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libUTES_gv_settings_upgradebutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libUTES_gv_settings_researchbutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libUTES_gv_settings_visionbutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUTES_gv_const_terrains; init_i += 1) {
        libUTES_gv_settings_terrainbutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUTES_gv_const_players; init_i += 1) {
        libUTES_gv_settings_allianceplayerlabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUTES_gv_const_players; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libUTES_gv_settings_alliancebuttons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libUTES_gv_factions = "^Factions";
    for (init_i = 0; init_i <= libUTES_gv_mAX_FIGHTER_PLAYERS; init_i += 1) {
        libUTES_gv_creator_selectedRace[init_i] = "Neutral";
    }
    for (init_i = 0; init_i <= libUTES_gv_tMAXFACTIONS; init_i += 1) {
        libUTES_gv_creator_racebutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUTES_gv_tMAXFACTIONS; init_i += 1) {
        libUTES_gv_creator_raceface[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libUTES_gv_creator_bottomButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libUTES_gv_creator_upButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= libUTES_gv_const_card_length; init_j += 1) {
            libUTES_gv_creator_itembutton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= libUTES_gv_const_card_length; init_j += 1) {
            libUTES_gv_creator_itemunit[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= libUTES_gv_const_card_length; init_j += 1) {
            libUTES_gv_creator_itemface[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libUTES_gv_leaderboard = c_boardNone;
    libUTES_gv_map_structure_storage = "";
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libUTES_gv_unit_storage[init_i] = "";
    }
}

// Functions
void libUTES_gf_PrepareUnitTesterFactions () {
    // Variable Declarations
    string lv_catalogRace;

    // Automatic Variable Declarations
    int autoC1F14CE7_ae;
    int autoC1F14CE7_var;

    // Variable Initialization

    // Implementation
    autoC1F14CE7_ae = CatalogEntryCount(c_gameCatalogRace);
    autoC1F14CE7_var = 1;
    for ( ; autoC1F14CE7_var <= autoC1F14CE7_ae; autoC1F14CE7_var += 1 ) {
        lv_catalogRace = CatalogEntryGet(c_gameCatalogRace, autoC1F14CE7_var);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogRace, lv_catalogRace, "Flags[" + IntToString(0) + "]", c_playerAny) == 1) && (CatalogFieldValueCount(c_gameCatalogRace, lv_catalogRace, "StartingUnitArray", c_playerAny) > 0)) {
            libARRA_gf_ListStringInclude(libUTES_gv_factions, (lv_catalogRace));
            libUTES_gf_SetupUnitTesterFaction(((lv_catalogRace)), 0);
        }

    }
}

void libUTES_gf_SetupUnitTesterFaction (string lp_race, int lp_player) {
    // Variable Declarations
    string lv_race;
    int lv_startingUnitCount;
    int lv_index;
    int lv_cardlayout;
    int lv_layoutbutton;
    string lv_unitName1;
    string lv_unitName2;
    string lv_unitName3;
    string lv_unitType;
    string lv_unitType2;
    string lv_abilCmdName;
    abilcmd lv_abilCmd;
    int lv_abilCmdIndex;
    string lv_ability;
    string lv_ability2;
    string lv_behavior;
    string lv_aiunits;
    string lv_aiupgrades;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuredropoff;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aimorph;
    string lv_aiprojectiles;
    string lv_airequirements;
    bool lv_unitfood;
    bool lv_unitstructure;
    bool lv_unittech;
    bool lv_unitproduction;
    bool lv_unitdetection;
    bool lv_unitworker;
    bool lv_unitcombat;
    bool lv_unittransport;
    bool lv_unitdropoff;
    bool lv_unitdropoffmorph;
    bool lv_unitvespene;
    bool lv_isPhaseMorphAbility;
    string lv_airesultunits;
    string lv_airesultstructures;
    string lv_airesultupgrades;
    string lv_airesultlevelupgrades;
    string lv_unfininshedReq;
    int lv_glossaryPriority;
    int lv_upgradeLevel;
    string lv_upgradeLevelString;
    string lv_upgradeBase;
    bool lv_ignoreGlossaryPriority;

    // Automatic Variable Declarations
    int autoFE544A26_ae;
    int autoFE544A26_var;
    int auto2AEDD65D_ae;
    int auto2AEDD65D_var;
    int autoFE93245B_ae;
    int autoFE93245B_var;
    int auto019371FD_ae;
    int auto019371FD_var;
    int auto19FAB7A2_ae;
    int auto19FAB7A2_var;
    int autoE0866C37_ae;
    int autoE0866C37_var;
    int auto3E5B0BB8_ae;
    int auto3E5B0BB8_var;
    int auto1C4167D5_ae;
    int auto1C4167D5_var;
    int auto28956FBB_ae;
    int auto28956FBB_var;
    int autoF48552E4_ae;
    int autoF48552E4_var;
    int autoA9F9D4D1_ae;
    int autoA9F9D4D1_var;
    int auto35457303_ae;
    const int auto35457303_ai = 1;
    int auto682F7B72_ae;
    const int auto682F7B72_ai = 1;
    int auto39B43415_val;
    int autoAF107A36_ae;
    int autoAF107A36_var;
    int autoF8AAEC46_ae;
    int autoF8AAEC46_var;
    int auto6C96C5E8_ae;
    int auto6C96C5E8_var;
    int autoCAA7906C_ae;
    int autoCAA7906C_var;
    int autoCEB8E97F_ae;
    int autoCEB8E97F_var;
    int auto9A771B03_ae;
    int auto9A771B03_var;

    // Variable Initialization
    lv_race = (lp_race);
    lv_index = 1;
    lv_unitName1 = "";
    lv_unitName2 = "";
    lv_unitName3 = "";
    lv_aiunits = ("^AI" + lv_race + "Units");
    lv_aiupgrades = ("^AI" + lv_race + "Upgrades");
    lv_aiunitfood = ("^AI" + lv_race + "StructureFood");
    lv_aiunitsupport = ("^AI" + lv_race + "UnitSupport");
    lv_aiunitcombat = ("^AI" + lv_race + "UnitCombat");
    lv_aiunitworker = ("^AI" + lv_race + "UnitWorker");
    lv_aiunittransport = ("^AI" + lv_race + "UnitTransport");
    lv_aistructuretech = ("^AI" + lv_race + "StructureTech");
    lv_aistructureproduction = ("^AI" + lv_race + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + lv_race + "StructureDefense");
    lv_aistructurepower = ("^AI" + lv_race + "StructurePower");
    lv_aistructuredropoff = ("^AI" + lv_race + "StructureDropOff");
    lv_aistructuremain = ("^AI" + lv_race + "StructureMain");
    lv_aistructurerefinery = ("^AI" + lv_race + "StructureRefinery");
    lv_aimorph = ("^AI" + lv_race + "Morphs");
    lv_aiprojectiles = ("^AI" + lv_race + "Projectiles");
    lv_airequirements = ("^AI" + lv_race + "Requirements");
    lv_airesultunits = ("^AI" + lv_race + "TableUnits");
    lv_airesultstructures = ("^AI" + lv_race + "TableStructures");
    lv_airesultupgrades = ("^AI" + lv_race + "TableUpgrades");
    lv_airesultlevelupgrades = ("^AI" + lv_race + "TableLabelUpgrades");
    lv_upgradeLevelString = "";
    lv_upgradeBase = "";

    // Implementation
    autoFE544A26_ae = (CatalogFieldValueCount(c_gameCatalogRace, lp_race, "StartingUnitArray", c_playerAny) - 1);
    autoFE544A26_var = 0;
    for ( ; autoFE544A26_var <= autoFE544A26_ae; autoFE544A26_var += 1 ) {
        lv_startingUnitCount = CatalogFieldValueGetAsInt(c_gameCatalogRace, lp_race, "StartingUnitArray[" + IntToString(autoFE544A26_var) + "].Count", c_playerAny);
        lv_unitType = (CatalogFieldValueGet(c_gameCatalogRace, lp_race, "StartingUnitArray[" + IntToString(autoFE544A26_var) + "].Unit", c_playerAny));
        lv_unitstructure = UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure);
        if ((lv_unitType != null) && (lv_startingUnitCount > 0)) {
            if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == true)) {
                libARRA_gf_ListStringInclude(lv_aiunits, (lv_unitType));
                if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "GlossaryPriority", lp_player) == 0)) {
                    lv_ignoreGlossaryPriority = true;
                }
            }
            else {
                libARRA_gf_LOGString(("Wrong Unit ID: " + (lv_unitType)));
            }
        }
    }
    while ((libARRA_gf_ListStringGet(lv_aiunits, lv_index) != null)) {
        lv_unitName1 = libARRA_gf_ListStringGet(lv_aiunits, lv_index);
        lv_unitType = (lv_unitName1);
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == false)) {
            libARRA_gf_ListStringExclude(lv_aiunits, lv_unitName1);
            continue;
        }

        if (((UnitTypeTestFlag(lv_unitType, c_unitFlagUnselectable) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagUncommandable) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagMissile) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagNoDraw) == true))) {
            lv_index += 1;
            libARRA_gf_ListStringInclude(lv_aiprojectiles, lv_unitName1);
            libARRA_gf_ListStringExclude(lv_aiunits, lv_unitName1);
            continue;
        }

        lv_unitproduction = false;
        lv_unittech = false;
        lv_unittransport = false;
        lv_unitstructure = UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure);
        lv_unitworker = UnitTypeTestFlag(lv_unitType, c_unitFlagWorker);
        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "WeaponArray", lp_player) > 0)) {
            lv_unitcombat = true;
        }
        else {
            lv_unitcombat = false;
        }
        lv_unitdetection = libARRA_gf_UnitisDetector(lp_player, lv_unitType);
        libARRA_gf_ListStringExclude(lv_aimorph, lv_unitName1);
        auto2AEDD65D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "AbilArray", lp_player) - 1);
        auto2AEDD65D_var = 0;
        for ( ; auto2AEDD65D_var <= auto2AEDD65D_ae; auto2AEDD65D_var += 1 ) {
            lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "AbilArray[" + IntToString(auto2AEDD65D_var) + "].Link", lp_player));
            if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
                autoFE93245B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lp_player) - 1);
                autoFE93245B_var = 0;
                for ( ; autoFE93245B_var <= autoFE93245B_ae; autoFE93245B_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(autoFE93245B_var) + "].Unit", lp_player);
                    if ((lv_unitName2 == "")) {
                        continue;
                    }
                    if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "CmdButtonArray[" + IntToString(0) + "].State", lp_player) == "Restricted")) {
                        continue;
                    }
                    if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitName2) == false)) {
                        continue;
                    }
                    lv_unitType2 = (lv_unitName2);
                    lv_isPhaseMorphAbility = false;
                    auto019371FD_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName2, "AbilArray", lp_player) - 1);
                    auto019371FD_var = 0;
                    for ( ; auto019371FD_var <= auto019371FD_ae; auto019371FD_var += 1 ) {
                        lv_ability2 = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName2, "AbilArray[" + IntToString(auto019371FD_var) + "].Link", lp_player));
                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorph)) {
                            auto19FAB7A2_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            auto19FAB7A2_var = 0;
                            for ( ; auto19FAB7A2_var <= auto19FAB7A2_ae; auto19FAB7A2_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(auto19FAB7A2_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorphPlacement)) {
                            autoE0866C37_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            autoE0866C37_var = 0;
                            for ( ; autoE0866C37_var <= autoE0866C37_ae; autoE0866C37_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(autoE0866C37_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                    }
                    if ((lv_isPhaseMorphAbility == false)) {
                        libARRA_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        if ((lv_unitdropoff == true)) {
                            libARRA_gf_ListStringExclude(lv_aistructuremain, lv_unitName2);
                        }

                    }
                    else {
                        libARRA_gf_ListStringInclude(lv_aimorph, lv_unitName2);
                        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType2, "WeaponArray", lp_player) > 0)) {
                            lv_unitcombat = true;
                        }
                        if ((libARRA_gf_UnitisDetector(lp_player, lv_unitType2) == true)) {
                            lv_unitdetection = true;
                        }
                    }
                }
            }

            if ((AbilityClass(lv_ability) == c_classIdCAbilMorphPlacement)) {
                auto3E5B0BB8_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lp_player) - 1);
                auto3E5B0BB8_var = 0;
                for ( ; auto3E5B0BB8_var <= auto3E5B0BB8_ae; auto3E5B0BB8_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(auto3E5B0BB8_var) + "].Unit", lp_player);
                    if ((lv_unitName2 == "")) {
                        continue;
                    }
                    if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "CmdButtonArray[" + IntToString(0) + "].State", lp_player) == "Restricted")) {
                        continue;
                    }
                    if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitName2) == false)) {
                        continue;
                    }
                    lv_unitType2 = (lv_unitName2);
                    lv_isPhaseMorphAbility = false;
                    auto1C4167D5_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName2, "AbilArray", lp_player) - 1);
                    auto1C4167D5_var = 0;
                    for ( ; auto1C4167D5_var <= auto1C4167D5_ae; auto1C4167D5_var += 1 ) {
                        lv_ability2 = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName2, "AbilArray[" + IntToString(auto1C4167D5_var) + "].Link", lp_player));
                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorph)) {
                            auto28956FBB_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            auto28956FBB_var = 0;
                            for ( ; auto28956FBB_var <= auto28956FBB_ae; auto28956FBB_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(auto28956FBB_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorphPlacement)) {
                            autoF48552E4_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            autoF48552E4_var = 0;
                            for ( ; autoF48552E4_var <= autoF48552E4_ae; autoF48552E4_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(autoF48552E4_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                    }
                    if ((lv_isPhaseMorphAbility == false)) {
                        libARRA_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        if ((lv_unitdropoff == true)) {
                            libARRA_gf_ListStringExclude(lv_aistructuremain, lv_unitName2);
                        }

                    }
                    else {
                        libARRA_gf_ListStringInclude(lv_aimorph, lv_unitName2);
                        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType2, "WeaponArray", lp_player) > 0)) {
                            lv_unitcombat = true;
                        }
                        if ((libARRA_gf_UnitisDetector(lp_player, lv_unitType2) == true)) {
                            lv_unitdetection = true;
                        }
                    }
                }
            }

        }
        lv_unitdropoff = libVSAI_gf_UnitIsDropOff(lp_player, lv_unitType);
        if ((lv_unitdropoff == true)) {
            libARRA_gf_ListStringInclude(lv_aistructuredropoff, lv_unitName1);
        }

        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_unitType, "Food", lp_player) > 0)) {
            lv_unitfood = true;
        }
        else {
            lv_unitfood = false;
        }
        lv_unitvespene = false;
        autoA9F9D4D1_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BuiltOn", c_playerAny) - 1);
        autoA9F9D4D1_var = 0;
        for ( ; autoA9F9D4D1_var <= autoA9F9D4D1_ae; autoA9F9D4D1_var += 1 ) {
            if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BuiltOn[" + IntToString(autoA9F9D4D1_var) + "]", lp_player) == "VespeneGeyser")) {
                lv_unitvespene = true;
            }

        }
        auto35457303_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "CardLayouts", lp_player) - 1);
        lv_cardlayout = 0;
        for ( ; ( (auto35457303_ai >= 0 && lv_cardlayout <= auto35457303_ae) || (auto35457303_ai < 0 && lv_cardlayout >= auto35457303_ae) ) ; lv_cardlayout += auto35457303_ai ) {
            auto682F7B72_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "CardLayouts[" + IntToString(lv_cardlayout) + "].LayoutButtons", lp_player) - 1);
            lv_layoutbutton = 0;
            for ( ; ( (auto682F7B72_ai >= 0 && lv_layoutbutton <= auto682F7B72_ae) || (auto682F7B72_ai < 0 && lv_layoutbutton >= auto682F7B72_ae) ) ; lv_layoutbutton += auto682F7B72_ai ) {
                lv_abilCmdName = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "CardLayouts[" + IntToString(lv_cardlayout) + "].LayoutButtons[" + IntToString(lv_layoutbutton) + "].AbilCmd", c_playerAny);
                if ((lv_abilCmdName != null)) {
                    lv_abilCmd = StringToAbilCmd(lv_abilCmdName);
                    lv_ability = AbilityCommandGetAbility(lv_abilCmd);
                    lv_abilCmdIndex = AbilityCommandGetCommand(lv_abilCmd);
                    if ((TechTreeAbilityIsAllowed(lp_player, lv_abilCmd) == false)) {
                        continue;
                    }

                    auto39B43415_val = AbilityClass(lv_ability);
                    if (auto39B43415_val == c_classIdCAbilMerge) {
                        lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "Info.Unit", lp_player);
                        if ((lv_unitName2 != null)) {
                            if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "CmdButtonArray[" + IntToString(0) + "].State", lp_player) == "Restricted")) {
                                continue;
                            }
                            libARRA_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        }

                    }
                    else if (auto39B43415_val == c_classIdCAbilTransport) {
                        if ((lv_unitstructure == false)) {
                            lv_unittransport = true;
                        }

                    }
                    else if (auto39B43415_val == c_classIdCAbilBuild) {
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", c_playerAny);
                            if ((lv_unitName2 != null)) {
                                if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                    continue;
                                }
                                libARRA_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                            }

                        }

                    }
                    else if (auto39B43415_val == c_classIdCAbilTrain) {
                        lv_unitproduction = true;
                        if ((lv_abilCmdIndex < 30)) {
                            autoF8AAEC46_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", lp_player) - 1);
                            autoF8AAEC46_var = 0;
                            for ( ; autoF8AAEC46_var <= autoF8AAEC46_ae; autoF8AAEC46_var += 1 ) {
                                lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit[" + IntToString(autoF8AAEC46_var) + "]", lp_player);
                                if ((lv_unitName2 != null)) {
                                    if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                        continue;
                                    }
                                    libARRA_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                                }

                            }
                        }

                    }
                    else if (auto39B43415_val == c_classIdCAbilWarpTrain) {
                        lv_unitproduction = true;
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", lp_player);
                            if ((lv_unitName2 != null)) {
                                if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                    continue;
                                }
                                libARRA_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                            }

                        }

                    }
                    else if (auto39B43415_val == c_classIdCAbilResearch) {
                        lv_unittech = true;
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Upgrade", lp_player);
                            if ((lv_unitName2 != null)) {
                                if ((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                    continue;
                                }
                                libARRA_gf_ListStringInclude(lv_aiupgrades, lv_unitName2);
                            }

                        }

                    }
                    else {
                        libARRA_gf_ClearCache();
                        libARRA_gv_sEARCHMODE = libARRA_ge_SearchMode_Units;
                        if ((libARRA_gf_ByPassAbility(lp_player, lv_ability) == true)) {
                            autoAF107A36_ae = libARRA_gf_ListSize(libARRA_gv_byPassUnits);
                            autoAF107A36_var = 1;
                            for ( ; autoAF107A36_var <= autoAF107A36_ae; autoAF107A36_var += 1 ) {
                                libARRA_gf_ListStringInclude(lv_aiunits, libARRA_gf_ListStringGet(libARRA_gv_byPassUnits, autoAF107A36_var));
                            }
                        }

                    }
                }

            }
        }
        auto6C96C5E8_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "BehaviorArray", lp_player) - 1);
        auto6C96C5E8_var = 0;
        for ( ; auto6C96C5E8_var <= auto6C96C5E8_ae; auto6C96C5E8_var += 1 ) {
            lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "BehaviorArray[" + IntToString(auto6C96C5E8_var) + "].Link", lp_player));
            if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_behavior) == true) && (CatalogEntryClass(c_gameCatalogBehavior, lv_behavior) == libARRA_gv_cBehaviorSpawn)) {
                lv_unitproduction = true;
                autoCAA7906C_ae = (CatalogFieldValueCount(c_gameCatalogBehavior, lv_behavior, "InfoArray", lp_player) - 1);
                autoCAA7906C_var = 0;
                for ( ; autoCAA7906C_var <= autoCAA7906C_ae; autoCAA7906C_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "InfoArray[" + IntToString(autoCAA7906C_var) + "].Unit", lp_player);
                    if ((lv_unitName2 != null)) {
                        libARRA_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                    }

                }
            }

        }
        if ((lv_unitvespene == true)) {
            libARRA_gf_ListStringInclude(lv_aistructurerefinery, lv_unitName1);
        }
        else if ((lv_unitworker == true)) {
            libARRA_gf_ListStringInclude(lv_aiunitworker, lv_unitName1);
        }
        else if ((lv_unitdropoff == true)) {
            if ((lv_unitdropoffmorph == false)) {
                libARRA_gf_ListStringInclude(lv_aistructuremain, lv_unitName1);
            }
            else {
                if ((lv_unitcombat == false)) {
                    libARRA_gf_ListStringInclude(lv_aistructuredefenses, lv_unitName1);
                }
                else {
                    libARRA_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
                }
            }
        }
        else if ((lv_unitcombat == false) && (lv_unitproduction == true)) {
            libARRA_gf_ListStringInclude(lv_aistructureproduction, lv_unitName1);
        }
        else if ((lv_unitstructure == true) && ((lv_unitcombat == true) || (lv_unitdetection == true))) {
            libARRA_gf_ListStringInclude(lv_aistructuredefenses, lv_unitName1);
        }
        else if ((lv_unitstructure == true) && (lv_unittech == true)) {
            libARRA_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
        }
        else if ((lv_unitfood == true)) {
            libARRA_gf_ListStringInclude(lv_aiunitfood, lv_unitName1);
        }
        else if ((lv_unitstructure == true)) {
            libARRA_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
        }
        else if (true) {
            if ((lv_unitcombat == true)) {
                libARRA_gf_ListStringInclude(lv_aiunitcombat, lv_unitName1);
            }
            if ((lv_unittransport == true)) {
                libARRA_gf_ListStringInclude(lv_aiunittransport, lv_unitName1);
            }
            if ((lv_unitdetection == true)) {
                libARRA_gf_ListStringInclude(lv_aiunitsupport, lv_unitName1);
            }
            if ((lv_unitdetection == false) && (lv_unittransport == false) && (lv_unitcombat == false)) {
                libARRA_gf_ListStringInclude(lv_aiunitsupport, lv_unitName1);
            }
        }
        lv_index += 1;
    }
    libARRA_gf_ListCreate("SetupFactionPriorityListUnits");
    libARRA_gf_ListCreate("SetupFactionPriorityListStructures");
    autoCEB8E97F_ae = libARRA_gf_ListSize(lv_aiunits);
    autoCEB8E97F_var = 1;
    for ( ; autoCEB8E97F_var <= autoCEB8E97F_ae; autoCEB8E97F_var += 1 ) {
        lv_unitName1 = libARRA_gf_ListStringGet(lv_aiunits, autoCEB8E97F_var);
        lv_unitType = (lv_unitName1);
        lv_unitstructure = UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure);
        lv_unitworker = UnitTypeTestFlag(lv_unitType, c_unitFlagWorker);
        lv_glossaryPriority = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "GlossaryPriority", lp_player);
        if (((lv_glossaryPriority > 0) || (lv_ignoreGlossaryPriority == true))) {
            if ((lv_unitstructure == true)) {
                libARRA_gf_ListStringPush(lv_airesultstructures, (lv_unitType));
                libARRA_gf_ListIntPush("SetupFactionPriorityListStructures", lv_glossaryPriority);
            }
            else {
                libARRA_gf_ListStringPush(lv_airesultunits, (lv_unitType));
                libARRA_gf_ListIntPush("SetupFactionPriorityListUnits", lv_glossaryPriority);
            }
        }
    }
    libARRA_gf_ListSort(lv_airesultunits, "SetupFactionPriorityListUnits");
    libARRA_gf_ListSort(lv_airesultstructures, "SetupFactionPriorityListStructures");
    libARRA_gf_ListDestroy("SetupFactionPriorityListUnits");
    libARRA_gf_ListDestroy("SetupFactionPriorityListStructures");
    auto9A771B03_ae = libARRA_gf_ListSize(lv_aiupgrades);
    auto9A771B03_var = 1;
    for ( ; auto9A771B03_var <= auto9A771B03_ae; auto9A771B03_var += 1 ) {
        lv_unitName1 = libARRA_gf_ListStringGet(lv_aiupgrades, auto9A771B03_var);
        lv_upgradeLevelString = StringSub(lv_unitName1, StringLength(lv_unitName1), (StringLength(lv_unitName1) + 1));
        if (((lv_upgradeLevelString == "1") || (lv_upgradeLevelString == "2") || (lv_upgradeLevelString == "3") || (lv_upgradeLevelString == "4") || (lv_upgradeLevelString == "5") || (lv_upgradeLevelString == "6") || (lv_upgradeLevelString == "7"))) {
            lv_upgradeLevel = StringToInt(StringSub(lv_unitName1, StringLength(lv_unitName1), (StringLength(lv_unitName1) + 1)));
            lv_upgradeBase = StringSub(lv_unitName1, 1, (StringLength(lv_unitName1) - 1));
        }
        else {
            lv_upgradeLevel = 0;
        }
        if ((lv_upgradeLevel > 0)) {
            libARRA_gf_ListStringInclude(lv_airesultlevelupgrades, lv_upgradeBase);
        }
        else {
            libARRA_gf_ListStringInclude(lv_airesultupgrades, lv_unitName1);
        }
    }
}

void libUTES_gf_SetActors () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    string lv_term;
    string lv_termEvent;
    string lv_termUnit;
    string lv_unitIcon;
    string lv_send;
    string lv_actor;
    int lv_eventsTotal;
    int lv_actorsTotal;

    // Automatic Variable Declarations
    int autoEBEDE8B4_ae;
    const int autoEBEDE8B4_ai = 1;
    int autoA4522792_ae;
    const int autoA4522792_ai = 1;

    // Variable Initialization
    lv_term = "";
    lv_termEvent = "";
    lv_termUnit = "";
    lv_unitIcon = "";
    lv_send = "";
    lv_actorsTotal = CatalogEntryCount(c_gameCatalogActor);

    // Implementation
    autoEBEDE8B4_ae = lv_actorsTotal;
    lv_i = 1;
    for ( ; ( (autoEBEDE8B4_ai >= 0 && lv_i <= autoEBEDE8B4_ae) || (autoEBEDE8B4_ai < 0 && lv_i >= autoEBEDE8B4_ae) ) ; lv_i += autoEBEDE8B4_ai ) {
        lv_actor = CatalogEntryGet(c_gameCatalogActor, lv_i);
        if (((CatalogEntryClass(c_gameCatalogActor, lv_actor) == 122) || (CatalogEntryClass(c_gameCatalogActor, lv_actor) == 124))) {
            lv_unitIcon = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", c_playerAny);
            if ((lv_unitIcon == "")) {
                continue;
            }
            lv_eventsTotal = (CatalogFieldValueCount(c_gameCatalogActor, lv_actor, "On", c_playerAny) - 1);
            autoA4522792_ae = lv_eventsTotal;
            lv_j = 0;
            for ( ; ( (autoA4522792_ai >= 0 && lv_j <= autoA4522792_ae) || (autoA4522792_ai < 0 && lv_j >= autoA4522792_ae) ) ; lv_j += autoA4522792_ai ) {
                lv_send = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "On[" + IntToString(lv_j) + "].Send", c_playerAny);
                lv_term = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "On[" + IntToString(lv_j) + "].Terms", c_playerAny);
                if ((lv_send == "Create") && (StringFind(lv_term, "UnitBirth", c_stringCase) == 1)) {
                    lv_termUnit = StringSub(lv_term, 11, StringLength(lv_term));
                    if ((StringFind(lv_termUnit, "#", c_stringCase) != 0)) {
                        libARRA_gf_MapStringSet("^UnitActors", lv_termUnit, (lv_actor));
                    }
                }
            }
        }
    }
}

string libUTES_gf_GetFactionImage (string lp_faction) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogRace, lp_faction, "Icon", c_playerAny));
}

text libUTES_gf_GetFactionTooltip (string lp_faction) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UTES_E1CC6A25", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogRace, lp_faction, "Name", c_playerAny)));
    return TextExpressionAssemble("Param/Expression/lib_UTES_E1CC6A25");
}

void libUTES_gf_ShowUnitTesterTips () {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_UTES_658E1BD4"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_UTES_4894E696"), StringExternal("Param/Value/lib_UTES_5467C758"), "Assets\\Textures\\btn-tips-laserdrillantiair.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_UTES_038EABAA"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_UTES_DD703A7F"), StringExternal("Param/Value/lib_UTES_DAA77A49"), "Assets\\Textures\\btn-tips-hacking.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_UTES_921B3ED5"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_UTES_33DA1E45"), StringExternal("Param/Value/lib_UTES_2DEE567E"), "Assets\\Textures\\btn-tips-starmap.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_UTES_101B5689"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_UTES_1C94AC8C"), StringExternal("Param/Value/lib_UTES_07D4D50B"), "Assets\\Textures\\btn-building-terran-bunker.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_UTES_E7CF7E3F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_UTES_69CF76D7"), StringExternal("Param/Value/lib_UTES_5395B634"), "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel1.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_UTES_4AF5713F"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_UTES_5C38B5CF"), StringExternal("Param/Value/lib_UTES_73A4267C"), "Assets\\Textures\\btn-unit-terran-marine.dds");
}

void libUTES_gf_MakeUnitTesterFactionsList () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_j;
    int lv_bottom_panel;
    int lv_buttons_panel;
    string lv_factionString;

    // Automatic Variable Declarations
    int auto10508638_ae;
    const int auto10508638_ai = 1;

    // Variable Initialization
    lv_bottom_panel = c_invalidDialogControlId;
    lv_buttons_panel = c_invalidDialogControlId;
    lv_factionString = "";

    // Implementation
    lv_x = 0;
    lv_y = 0;
    lv_buttons_panel = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TesterPanel/RaceList"));
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 99, PlayerGroupAll());
    auto10508638_ae = libARRA_gf_ListSize(libUTES_gv_factions);
    lv_j = 1;
    for ( ; ( (auto10508638_ai >= 0 && lv_j <= auto10508638_ae) || (auto10508638_ai < 0 && lv_j >= auto10508638_ae) ) ; lv_j += auto10508638_ai ) {
        lv_factionString = libARRA_gf_ListStringGet(libUTES_gv_factions, lv_j);
        DialogControlCreateInPanelFromTemplate(lv_buttons_panel, c_triggerControlTypeButton, "Tester/TesterRaceButton");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (68 + (lv_x * 54)), (22 + (lv_y * 54)));
        libUTES_gv_creator_racebutton[lv_j] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "FaceImage");
        libUTES_gv_creator_raceface[lv_j] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(libUTES_gv_creator_raceface[lv_j], libUTES_gf_GetFactionImage(lv_factionString), PlayerGroupAll());
        DialogControlSetVisible(libUTES_gv_creator_raceface[lv_j], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemTooltip(libUTES_gv_creator_racebutton[lv_j], libUTES_gf_GetFactionTooltip(lv_factionString), PlayerGroupAll());
        lv_x += 1;
        if ((lv_x == 30)) {
            lv_x = 0;
            lv_y += 1;
        }

    }
}

void libUTES_gf_ActivateBuildAbility () {
    // Automatic Variable Declarations
}

void libUTES_gf_MakeUnitTesterPlacementCard () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_j;
    int lv_buttons_panel;
    string lv_factionString;

    // Automatic Variable Declarations
    const int auto38515A40_ae = 2;
    const int auto38515A40_ai = 1;
    int auto958B84D1_ae;
    const int auto958B84D1_ai = 1;

    // Variable Initialization
    lv_buttons_panel = c_invalidDialogControlId;
    lv_factionString = "";

    // Implementation
    lv_i = 0;
    for ( ; ( (auto38515A40_ai >= 0 && lv_i <= auto38515A40_ae) || (auto38515A40_ai < 0 && lv_i >= auto38515A40_ae) ) ; lv_i += auto38515A40_ai ) {
        lv_x = 0;
        lv_y = 0;
        lv_buttons_panel = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TesterPanel/CreatorPanel/ItemCard" + IntToString(lv_i)));
        DialogControlSetVisible(lv_buttons_panel, PlayerGroupAll(), true);
        DialogControlHookup(lv_buttons_panel, c_triggerControlTypeButton, "Bottom");
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 99, PlayerGroupAll());
        libUTES_gv_creator_bottomButton[lv_i] = DialogControlLastCreated();
        DialogControlHookup(lv_buttons_panel, c_triggerControlTypeButton, "Top");
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 99, PlayerGroupAll());
        libUTES_gv_creator_upButton[lv_i] = DialogControlLastCreated();
        auto958B84D1_ae = ((libUTES_gv_placementCardRows * libUTES_gv_placementCardColumns) - 1);
        lv_j = 0;
        for ( ; ( (auto958B84D1_ai >= 0 && lv_j <= auto958B84D1_ae) || (auto958B84D1_ai < 0 && lv_j >= auto958B84D1_ae) ) ; lv_j += auto958B84D1_ai ) {
            DialogControlCreateInPanelFromTemplate(lv_buttons_panel, c_triggerControlTypeButton, "Tester/TesterItemButton");
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_x * 77), (lv_y * 77));
            libUTES_gv_creator_itembutton[lv_i][lv_j] = DialogControlLastCreated();
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "FaceImage");
            libUTES_gv_creator_itemface[lv_i][lv_j] = DialogControlLastCreated();
            lv_x += 1;
            if ((lv_x == libUTES_gv_placementCardColumns)) {
                lv_x = 0;
                lv_y += 1;
            }

        }
    }
}

void libUTES_gf_RenderUnitTesterPlacementCard (int lp_player) {
    // Variable Declarations
    int lv_min;
    int lv_max;
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_j;
    int lv_b;
    string lv_unit;
    string lv_actor;
    string lv_upgrade;
    abilcmd lv_command;
    string lv_button;
    string lv_faction;
    string lv_airesultunits;
    string lv_airesultstructures;
    string lv_airesultupgrades;
    playergroup lv_players;

    // Automatic Variable Declarations
    const int auto2E3A685C_ae = 2;
    const int auto2E3A685C_ai = 1;
    int auto4C8FD35F_ae;
    const int auto4C8FD35F_ai = 1;
    int autoDB195015_ae;
    const int autoDB195015_ai = 1;
    int auto188B375E_ae;
    const int auto188B375E_ai = 1;
    int auto037A2BAA_ae;
    const int auto037A2BAA_ai = 1;

    // Variable Initialization
    lv_actor = "";
    lv_faction = libUTES_gv_creator_selectedRace[lp_player];
    lv_airesultunits = ("^AI" + lv_faction + "TableUnits");
    lv_airesultstructures = ("^AI" + lv_faction + "TableStructures");
    lv_airesultupgrades = ("^AI" + lv_faction + "TableUpgrades");
    lv_players = PlayerGroupSingle(lp_player);

    // Implementation
    lv_i = 0;
    for ( ; ( (auto2E3A685C_ai >= 0 && lv_i <= auto2E3A685C_ae) || (auto2E3A685C_ai < 0 && lv_i >= auto2E3A685C_ae) ) ; lv_i += auto2E3A685C_ai ) {
        auto4C8FD35F_ae = ((libUTES_gv_placementCardRows * libUTES_gv_placementCardColumns) - 1);
        lv_j = 0;
        for ( ; ( (auto4C8FD35F_ai >= 0 && lv_j <= auto4C8FD35F_ae) || (auto4C8FD35F_ai < 0 && lv_j >= auto4C8FD35F_ae) ) ; lv_j += auto4C8FD35F_ai ) {
            DialogControlSetEnabled(libUTES_gv_creator_itembutton[lv_i][lv_j], lv_players, false);
            libNtve_gf_SetDialogItemTooltip(libUTES_gv_creator_itembutton[lv_i][lv_j], StringToText(""), lv_players);
            DialogControlSetVisible(libUTES_gv_creator_itemface[lv_i][lv_j], lv_players, false);
        }
    }
    lv_i = 0;
    lv_min = (1 + (libUTES_gv_placementCardOffset[0] * libUTES_gv_placementCardColumns));
    lv_max = MinI(libARRA_gf_ListSize(lv_airesultunits), ((lv_min - 1) + (libUTES_gv_placementCardColumns * libUTES_gv_placementCardRows)));
    autoDB195015_ae = lv_max;
    lv_j = lv_min;
    for ( ; ( (autoDB195015_ai >= 0 && lv_j <= autoDB195015_ae) || (autoDB195015_ai < 0 && lv_j >= autoDB195015_ae) ) ; lv_j += autoDB195015_ai ) {
        lv_b = (lv_j - lv_min);
        lv_unit = (libARRA_gf_ListStringGet(lv_airesultunits, lv_j));
        lv_actor = libARRA_gf_MapStringGet("^UnitActors", (lv_unit));
        libUTES_gv_creator_itemunit[lv_i][lv_b] = (lv_unit);
        DialogControlSetEnabled(libUTES_gv_creator_itembutton[lv_i][lv_b], lv_players, true);
        DialogControlSetEnabled(libUTES_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "min_icon", StringExternal("UI/Icon22_Minerals_Terr"));
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "min_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostMinerals)));
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "gas_icon", StringExternal("UI/Icon22_Vespene_Terr"));
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "gas_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostVespene)));
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "food_icon", StringExternal("UI/Icon22_Supply_Terr"));
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "food_val", FixedToTextAdvanced(UnitTypeGetProperty(lv_unit, c_unitPropSuppliesUsed), c_formatNumberStyleNormal, true, 0, 1));
        TextExpressionSetToken("Param/Expression/lib_UTES_1C6CE802", "desc", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Description", c_playerAny)));
        libNtve_gf_SetDialogItemTooltip(libUTES_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_UTES_1C6CE802"), lv_players);
        libNtve_gf_SetDialogItemImage(libUTES_gv_creator_itemface[lv_i][lv_b], (CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", lp_player)), lv_players);
        DialogControlSetVisible(libUTES_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        if ((lv_min > 1)) {
            DialogControlSetVisible(libUTES_gv_creator_upButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(libUTES_gv_creator_upButton[lv_i], lv_players, false);
        }
        if ((lv_max < libARRA_gf_ListSize(lv_airesultunits))) {
            DialogControlSetVisible(libUTES_gv_creator_bottomButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(libUTES_gv_creator_bottomButton[lv_i], lv_players, false);
        }
    }
    lv_i = 1;
    lv_min = (1 + (libUTES_gv_placementCardOffset[1] * libUTES_gv_placementCardColumns));
    lv_max = MinI(libARRA_gf_ListSize(lv_airesultstructures), ((lv_min - 1) + (libUTES_gv_placementCardColumns * libUTES_gv_placementCardRows)));
    auto188B375E_ae = lv_max;
    lv_j = lv_min;
    for ( ; ( (auto188B375E_ai >= 0 && lv_j <= auto188B375E_ae) || (auto188B375E_ai < 0 && lv_j >= auto188B375E_ae) ) ; lv_j += auto188B375E_ai ) {
        lv_b = (lv_j - lv_min);
        lv_unit = (libARRA_gf_ListStringGet(lv_airesultstructures, lv_j));
        lv_actor = libARRA_gf_MapStringGet("^UnitActors", (lv_unit));
        libUTES_gv_creator_itemunit[lv_i][lv_b] = (lv_unit);
        DialogControlSetEnabled(libUTES_gv_creator_itembutton[lv_i][lv_b], lv_players, true);
        DialogControlSetEnabled(libUTES_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "min_icon", StringExternal("UI/Icon22_Minerals_Terr"));
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "min_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostMinerals)));
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "gas_icon", StringExternal("UI/Icon22_Vespene_Terr"));
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "gas_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostVespene)));
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "food_icon", StringExternal("UI/Icon22_Supply_Terr"));
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "food_val", FixedToTextAdvanced(UnitTypeGetProperty(lv_unit, c_unitPropSuppliesUsed), c_formatNumberStyleNormal, true, 0, 1));
        TextExpressionSetToken("Param/Expression/lib_UTES_6FEEED46", "desc", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Description", c_playerAny)));
        libNtve_gf_SetDialogItemTooltip(libUTES_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_UTES_6FEEED46"), lv_players);
        libNtve_gf_SetDialogItemImage(libUTES_gv_creator_itemface[lv_i][lv_b], (CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", lp_player)), lv_players);
        DialogControlSetVisible(libUTES_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        if ((lv_min > 1)) {
            DialogControlSetVisible(libUTES_gv_creator_upButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(libUTES_gv_creator_upButton[lv_i], lv_players, false);
        }
        if ((lv_max < libARRA_gf_ListSize(lv_airesultstructures))) {
            DialogControlSetVisible(libUTES_gv_creator_bottomButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(libUTES_gv_creator_bottomButton[lv_i], lv_players, false);
        }
    }
    lv_i = 2;
    lv_min = (1 + (libUTES_gv_placementCardOffset[2] * libUTES_gv_placementCardColumns));
    lv_max = MinI(libARRA_gf_ListSize(lv_airesultupgrades), ((lv_min - 1) + (libUTES_gv_placementCardColumns * libUTES_gv_placementCardRows)));
    if ((lv_min > 1)) {
        DialogControlSetVisible(libUTES_gv_creator_upButton[lv_i], lv_players, true);
    }
    else {
        DialogControlSetVisible(libUTES_gv_creator_upButton[lv_i], lv_players, false);
    }
    if ((lv_max < libARRA_gf_ListSize(lv_airesultupgrades))) {
        DialogControlSetVisible(libUTES_gv_creator_bottomButton[lv_i], lv_players, true);
    }
    else {
        DialogControlSetVisible(libUTES_gv_creator_bottomButton[lv_i], lv_players, false);
    }
    auto037A2BAA_ae = lv_max;
    lv_j = lv_min;
    for ( ; ( (auto037A2BAA_ai >= 0 && lv_j <= auto037A2BAA_ae) || (auto037A2BAA_ai < 0 && lv_j >= auto037A2BAA_ae) ) ; lv_j += auto037A2BAA_ai ) {
        lv_b = (lv_j - lv_min);
        lv_upgrade = (libARRA_gf_ListStringGet(lv_airesultupgrades, lv_j));
        lv_command = TechTreeUpgradeProducedAbilCmd(lv_upgrade, 0);
        libUTES_gv_creator_itemunit[lv_i][lv_b] = (lv_upgrade);
        if ((lv_command != null)) {
            lv_button = (CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Button.DefaultButtonFace", lp_player));
            TextExpressionSetToken("Param/Expression/lib_UTES_184EC65F", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_UTES_184EC65F", "min_icon", StringExternal("UI/Icon22_Minerals_Terr"));
            TextExpressionSetToken("Param/Expression/lib_UTES_184EC65F", "min_val", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Resource[" + IntToString(0) + "]", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_UTES_184EC65F", "gas_icon", StringExternal("UI/Icon22_Vespene_Terr"));
            TextExpressionSetToken("Param/Expression/lib_UTES_184EC65F", "gas_val", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Resource[" + IntToString(1) + "]", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_UTES_184EC65F", "desc", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Tooltip", c_playerAny)));
            libNtve_gf_SetDialogItemTooltip(libUTES_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_UTES_184EC65F"), lv_players);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UTES_2F4AB64B", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "Name", c_playerAny)));
            libNtve_gf_SetDialogItemTooltip(libUTES_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_UTES_2F4AB64B"), lv_players);
        }
        DialogControlSetEnabled(libUTES_gv_creator_itembutton[lv_i][lv_b], lv_players, true);
        libNtve_gf_SetDialogItemImage(libUTES_gv_creator_itemface[lv_i][lv_b], (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "Icon", c_playerAny)), lv_players);
        if ((TechTreeUpgradeCount(libUTES_gv_side_player[libUTES_gv_chosenSide[lp_player]], lv_upgrade, c_techCountCompleteOnly) > 0)) {
            DialogControlSetEnabled(libUTES_gv_creator_itemface[lv_i][lv_b], PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(libUTES_gv_creator_itemface[lv_i][lv_b], PlayerGroupSingle(lp_player), false);
        }
        DialogControlSetVisible(libUTES_gv_creator_itemface[lv_i][lv_b], lv_players, true);
    }
}

bool libUTES_gf_TesterLeaderboardValidUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitTypeTestFlag(lp_unitType, c_unitFlagInvulnerable) == true) || (UnitTypeTestFlag(lp_unitType, c_unitFlagMissile) == true))) {
        return false;
    }
    else {
        return true;
    }
}

void libUTES_gf_TesterLeaderboardSpecialUnitCost (unit lp_unit, string lp_unitType, int lp_column, bool lp_deleteMode) {
    // Variable Declarations
    int lv_minerals_mod;
    string lv_ability;
    int lv_gas_mod;

    // Automatic Variable Declarations
    unit auto5921932D_unit;
    int auto5921932D_i;

    // Variable Initialization

    // Implementation
    auto5921932D_unit = lp_unit;
    auto5921932D_i = 1;
    for ( ; auto5921932D_i <= UnitAbilityCount(auto5921932D_unit) ; auto5921932D_i += 1 ) {
        lv_ability = UnitAbilityGet(auto5921932D_unit, auto5921932D_i);
        if ((AbilityClass(lv_ability) == c_classIdCAbilArmMagazine)) {
            lv_minerals_mod = ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "MaxCount", c_playerAny)-CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].CountStart", c_playerAny))*UnitTypeGetCost((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].Unit", c_playerAny)), c_unitCostMinerals));
            lv_gas_mod = ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "MaxCount", c_playerAny)-CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].CountStart", c_playerAny))*UnitTypeGetCost((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].Unit", c_playerAny)), c_unitCostVespene));
            break;
        }
    }
    if ((lp_deleteMode == true)) {
        lv_minerals_mod *= -1;
        lv_gas_mod *= -1;
    }

    libUTES_gv_leaderboard_minerals[lp_column] += lv_minerals_mod;
    libUTES_gv_leaderboard_gas[lp_column] += lv_gas_mod;
}

void libUTES_gf_TesterLeaderboardCreate () {
    // Variable Declarations
    int lv_main_background_image;
    int lv_header_background_image;
    int lv_col;
    int lv_row;

    // Automatic Variable Declarations
    const int autoA326D51D_ae = 2;
    const int autoA326D51D_ai = 1;
    const int auto64888C09_ae = 21;
    const int auto64888C09_ai = 1;

    // Variable Initialization
    lv_main_background_image = c_invalidDialogControlId;
    lv_header_background_image = c_invalidDialogControlId;

    // Implementation
    BoardDestroy(libUTES_gv_leaderboard);
    libUTES_gv_leaderboard_rows = 4;
    libUTES_gv_leaderboard_minerals[1] = 0;
    libUTES_gv_leaderboard_minerals[2] = 0;
    libUTES_gv_leaderboard_gas[1] = 0;
    libUTES_gv_leaderboard_gas[2] = 0;
    lv_col = 1;
    for ( ; ( (autoA326D51D_ai >= 0 && lv_col <= autoA326D51D_ae) || (autoA326D51D_ai < 0 && lv_col >= autoA326D51D_ae) ) ; lv_col += autoA326D51D_ai ) {
        lv_row = 5;
        for ( ; ( (auto64888C09_ai >= 0 && lv_row <= auto64888C09_ae) || (auto64888C09_ai < 0 && lv_row >= auto64888C09_ae) ) ; lv_row += auto64888C09_ai ) {
            libUTES_gv_leaderboard_icon_flag[lv_col][lv_row] = false;
        }
    }
    BoardCreate(2, libUTES_gv_leaderboard_rows, StringExternal("Param/Value/lib_UTES_9469DCCF"), Color(100.00, 100.00, 100.00));
    libUTES_gv_leaderboard = BoardLastCreated();
    BoardItemSetAlignment(BoardLastCreated(), c_boardItemAll, c_boardItemAll, c_alignCenter);
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/lib_UTES_75DED011"));
    BoardItemSetText(BoardLastCreated(), 2, c_boardRowHeader, StringExternal("Param/Value/lib_UTES_25397E08"));
    BoardSetColumnWidth(BoardLastCreated(), 1, c_boardWidthAuto);
    BoardSetColumnWidth(BoardLastCreated(), 2, c_boardWidthAuto);
    BoardItemSetText(BoardLastCreated(), 1, 1, StringToText("0"));
    BoardItemSetText(BoardLastCreated(), 2, 1, StringToText("0"));
    BoardItemSetTextColor(BoardLastCreated(), 1, 1, Color(0.00, 100.00, 100.00));
    BoardItemSetTextColor(BoardLastCreated(), 2, 1, Color(0.00, 100.00, 100.00));
    BoardItemSetText(BoardLastCreated(), 1, 2, StringToText("0"));
    BoardItemSetText(BoardLastCreated(), 2, 2, StringToText("0"));
    BoardItemSetTextColor(BoardLastCreated(), 1, 2, Color(0.00, 100.00, 25.10));
    BoardItemSetTextColor(BoardLastCreated(), 2, 2, Color(0.00, 100.00, 25.10));
    BoardItemSetText(BoardLastCreated(), 1, 3, StringToText("0"));
    BoardItemSetText(BoardLastCreated(), 2, 3, StringToText("0"));
    BoardItemSetTextColor(BoardLastCreated(), 1, 3, Color(100.00, 50.20, 0.00));
    BoardItemSetTextColor(BoardLastCreated(), 2, 3, Color(100.00, 50.20, 0.00));
}

int libUTES_gf_TesterLeaderboardAddRow (string lp_unitName) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUTES_gv_leaderboard_rows < 21)) {
        libUTES_gv_leaderboard_rows += 1;
        BoardSetRowCount(libUTES_gv_leaderboard, libUTES_gv_leaderboard_rows);
    }

    DataTableSetInt(true, lp_unitName, libUTES_gv_leaderboard_rows);
    return libUTES_gv_leaderboard_rows;
}

string libUTES_gf_TesterLeaderboardStructureUnitTypeToIcon (string lp_unitType) {
    // Variable Declarations
    string lv_unit_type_string_words;
    string lv_unit_type_string_word;
    string lv_unit_type_stringword;
    string lv_race_string;

    // Automatic Variable Declarations
    string auto2DAB4DCF_val;

    // Variable Initialization
    lv_unit_type_string_words = "";
    lv_unit_type_string_word = "";
    lv_unit_type_stringword = "";
    lv_race_string = "";

    // Implementation
    lv_unit_type_string_words = (lp_unitType);
    lv_unit_type_string_word = StringReplaceWord(lv_unit_type_string_words, " ", "", c_stringReplaceAll, c_stringCase);
    lv_unit_type_stringword = StringCase(lv_unit_type_string_word, false);
    lv_race_string = CatalogFieldValueGet(c_gameCatalogUnit, lv_unit_type_string_words, "Race", c_playerAny);
    auto2DAB4DCF_val = lv_race_string;
    if (auto2DAB4DCF_val == "Prot") {
        lv_race_string = "protoss";
    }
    else if (auto2DAB4DCF_val == "Terr") {
        lv_race_string = "terran";
    }
    else if (auto2DAB4DCF_val == "Zerg") {
        lv_race_string = "zerg";
    }
    else if (auto2DAB4DCF_val == "Keir") {
        lv_race_string = "keiron";
    }
    else if (auto2DAB4DCF_val == "Gen") {
        lv_race_string = "genetron";
    }
    else if (auto2DAB4DCF_val == "Xayi") {
        lv_race_string = "xayid";
    }
    else {
    }
    return "Assets\\Textures\\btn-building-" + lv_race_string + "-" + lv_unit_type_stringword + ".dds";
}

trigger auto_libUTES_gf_TesterLeaderboardAddIcon_Trigger = null;
string auto_libUTES_gf_TesterLeaderboardAddIcon_lp_unitType;
int auto_libUTES_gf_TesterLeaderboardAddIcon_lp_column;
int auto_libUTES_gf_TesterLeaderboardAddIcon_lp_row;

void libUTES_gf_TesterLeaderboardAddIcon (string lp_unitType, int lp_column, int lp_row) {
    auto_libUTES_gf_TesterLeaderboardAddIcon_lp_unitType = lp_unitType;
    auto_libUTES_gf_TesterLeaderboardAddIcon_lp_column = lp_column;
    auto_libUTES_gf_TesterLeaderboardAddIcon_lp_row = lp_row;

    if (auto_libUTES_gf_TesterLeaderboardAddIcon_Trigger == null) {
        auto_libUTES_gf_TesterLeaderboardAddIcon_Trigger = TriggerCreate("auto_libUTES_gf_TesterLeaderboardAddIcon_TriggerFunc");
    }

    TriggerExecute(auto_libUTES_gf_TesterLeaderboardAddIcon_Trigger, false, false);
}

bool auto_libUTES_gf_TesterLeaderboardAddIcon_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_libUTES_gf_TesterLeaderboardAddIcon_lp_unitType;
    int lp_column = auto_libUTES_gf_TesterLeaderboardAddIcon_lp_column;
    int lp_row = auto_libUTES_gf_TesterLeaderboardAddIcon_lp_row;

    // Variable Declarations
    int lv_ii;
    int lv_jj;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitTypeTestAttribute(lp_unitType, c_unitAttributeStructure) == false)) {
        BoardItemSetIcon(libUTES_gv_leaderboard, lp_column, lp_row, (CatalogFieldValueGet(c_gameCatalogActor, ((lp_unitType)), "UnitIcon", c_playerAny)), true);
        libUTES_gv_leaderboard_icon_flag[lp_column][lp_row] = true;
    }
    else {
        BoardItemSetIcon(libUTES_gv_leaderboard, lp_column, lp_row, libUTES_gf_TesterLeaderboardStructureUnitTypeToIcon(lp_unitType), true);
        libUTES_gv_leaderboard_icon_flag[lp_column][lp_row] = true;
    }
    return true;
}

void libUTES_gf_AddTerrainData (string lp_regionString) {
    // Variable Declarations
    int lv_item_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libUTES_gv_data_terrain[lv_item_index].lv_region != null)) {
        lv_item_index += 1;
    }
    libUTES_gv_data_terrain[lv_item_index].lv_region = RegionFromName(lp_regionString);
    libUTES_gv_data_terrain[lv_item_index].lv_spawnPoints[0] = PointFromName((lp_regionString + "spawn0"));
    libUTES_gv_data_terrain[lv_item_index].lv_spawnPoints[1] = PointFromName((lp_regionString + "spawn1"));
    libUTES_gv_data_terrain[lv_item_index].lv_spawnPoints[2] = PointFromName((lp_regionString + "spawn2"));
}

void libUTES_gf_LoadTerrainData (structref<libUTES_gs_DATA_TERRAIN> lp_dataTerrain) {
    // Variable Declarations
    int lv_ii;
    int lv_jj;

    // Automatic Variable Declarations
    unitgroup auto417B0C28_g;
    int auto417B0C28_u;
    unit auto417B0C28_var;
    unitgroup autoB8A36F33_g;
    int autoB8A36F33_u;
    unit autoB8A36F33_var;

    // Variable Initialization

    // Implementation
    libUTES_gv_terrain.lv_region = lp_dataTerrain.lv_region;
    libUTES_gv_terrain.lv_spawnPoints[0] = lp_dataTerrain.lv_spawnPoints[0];
    libUTES_gv_terrain.lv_spawnPoints[1] = lp_dataTerrain.lv_spawnPoints[1];
    libUTES_gv_terrain.lv_spawnPoints[2] = lp_dataTerrain.lv_spawnPoints[2];
    CameraSetBounds(PlayerGroupActive(), libUTES_gv_terrain.lv_region, true);
    libUTES_gf_MovePlayerCameras();
    libUTES_gf_RestoreMapStructures();
    auto417B0C28_g = UnitGroup(null, libUTES_gv_side_player[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto417B0C28_u = UnitGroupCount(auto417B0C28_g, c_unitCountAll);
    for (;; auto417B0C28_u -= 1) {
        auto417B0C28_var = UnitGroupUnitFromEnd(auto417B0C28_g, auto417B0C28_u);
        if (auto417B0C28_var == null) { break; }
        UnitSetPosition(auto417B0C28_var, libUTES_gv_terrain.lv_spawnPoints[0], false);
    }
    autoB8A36F33_g = UnitGroup(null, libUTES_gv_side_player[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoB8A36F33_u = UnitGroupCount(autoB8A36F33_g, c_unitCountAll);
    for (;; autoB8A36F33_u -= 1) {
        autoB8A36F33_var = UnitGroupUnitFromEnd(autoB8A36F33_g, autoB8A36F33_u);
        if (autoB8A36F33_var == null) { break; }
        UnitSetPosition(autoB8A36F33_var, libUTES_gv_terrain.lv_spawnPoints[1], false);
    }
}

void libUTES_gf_PrepareUnitTesterTerrains () {
    // Automatic Variable Declarations
    int auto5864FEA3_ae;
    int auto5864FEA3_var;

    // Implementation
    libUTES_gf_AddTerrainData("terr0");
    libUTES_gf_AddTerrainData("terr1");
    libUTES_gf_AddTerrainData("terr2");
    libUTES_gf_AddTerrainData("terr3");
    libUTES_gf_AddTerrainData("terr4");
    libUTES_gf_AddTerrainData("terr5");
    libUTES_gf_AddTerrainData("terr6");
    libUTES_gf_AddTerrainData("terr8");
    libUTES_gf_AddTerrainData("terr9");
    auto5864FEA3_ae = (libUTES_gv_const_terrains - 1);
    auto5864FEA3_var = 0;
    for ( ; auto5864FEA3_var <= auto5864FEA3_ae; auto5864FEA3_var += 1 ) {
        libUTES_gv_settings_terrainbutton[auto5864FEA3_var] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Terrain/Buttons/Terrain" + IntToString(auto5864FEA3_var)));
    }
}

void libUTES_gf_SetLevelledUpgradesValue (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_ii;
    int lv_jj;

    // Automatic Variable Declarations
    const int auto5EBD1383_ae = libUTES_gv_const_races;
    const int auto5EBD1383_ai = 1;
    const int autoC81DF1B7_ae = libUTES_gv_const_card_length;
    const int autoC81DF1B7_ai = 1;

    // Variable Initialization

    // Implementation
    lv_ii = 0;
    for ( ; ( (auto5EBD1383_ai >= 0 && lv_ii <= auto5EBD1383_ae) || (auto5EBD1383_ai < 0 && lv_ii >= auto5EBD1383_ae) ) ; lv_ii += auto5EBD1383_ai ) {
        lv_jj = 0;
        for ( ; ( (autoC81DF1B7_ai >= 0 && lv_jj <= autoC81DF1B7_ae) || (autoC81DF1B7_ai < 0 && lv_jj >= autoC81DF1B7_ae) ) ; lv_jj += autoC81DF1B7_ai ) {
            if ((libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_levels > 0) && (libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0] != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0], lp_level);
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[1], lp_level);
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[2], lp_level);
            }
        }
    }
}

bool libUTES_gf_NoUnitsForSide (int lp_side) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, libUTES_gv_side_player[lp_side], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        return true;
    }
    else {
        return false;
    }
}

int libUTES_gf_DialogItemFromLayoutHookup (int lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(lp_type, lp_name);
    return DialogControlLastCreated();
}

void libUTES_gf_CreatorAddUnits (int lp_player, int lp_side, string lp_unit) {
    // Automatic Variable Declarations
    const int auto0E7E5075_ae = libUTES_gv_const_players;
    int auto0E7E5075_var;
    unitgroup auto7A71D17A_g;
    int auto7A71D17A_u;
    unit auto7A71D17A_var;

    // Implementation
    if ((libUTES_gv_data_player[lp_player].lv_shift == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(5, lp_unit, 0, libUTES_gv_side_player[lp_side], libUTES_gv_terrain.lv_spawnPoints[lp_side]);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unit, 0, libUTES_gv_side_player[lp_side], libUTES_gv_terrain.lv_spawnPoints[lp_side]);
    }
    auto0E7E5075_var = 1;
    for ( ; auto0E7E5075_var <= auto0E7E5075_ae; auto0E7E5075_var += 1 ) {
        UnitControlGroupAddUnits(auto0E7E5075_var, (lp_side+1), UnitLastCreatedGroup());
    }
    auto7A71D17A_g = UnitLastCreatedGroup();
    auto7A71D17A_u = UnitGroupCount(auto7A71D17A_g, c_unitCountAll);
    for (;; auto7A71D17A_u -= 1) {
        auto7A71D17A_var = UnitGroupUnitFromEnd(auto7A71D17A_g, auto7A71D17A_u);
        if (auto7A71D17A_var == null) { break; }
        libNtve_gf_MakeUnitUncommandable(auto7A71D17A_var, true);
    }
}

void libUTES_gf_CreatorAddUpgrade2 (int lp_side, string lp_dataUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(libUTES_gv_side_player[lp_side], lp_dataUpgrade, c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(libUTES_gv_side_player[lp_side], lp_dataUpgrade, 0);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(libUTES_gv_side_player[lp_side], lp_dataUpgrade, 1);
    }
    libUTES_gf_RenderTesterUIForAllPlayers();
}

void libUTES_gf_DeleteAllTesterUnits () {
    // Variable Declarations
    int lv_index;
    bool lv_isBuilder;

    // Automatic Variable Declarations
    unitgroup auto25CF22A8_g;
    int auto25CF22A8_u;
    unit auto25CF22A8_var;
    const int auto0AF1C289_ae = 1;
    const int auto0AF1C289_ai = 1;
    const int auto99D79FBB_ae = libUTES_gv_tMAXFACTIONS;
    int auto99D79FBB_var;

    // Variable Initialization

    // Implementation
    libUTES_gf_RemoveNeutralStructures();
    auto25CF22A8_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto25CF22A8_u = UnitGroupCount(auto25CF22A8_g, c_unitCountAll);
    for (;; auto25CF22A8_u -= 1) {
        auto25CF22A8_var = UnitGroupUnitFromEnd(auto25CF22A8_g, auto25CF22A8_u);
        if (auto25CF22A8_var == null) { break; }
        lv_isBuilder = false;
        lv_index = 0;
        for ( ; ( (auto0AF1C289_ai >= 0 && lv_index <= auto0AF1C289_ae) || (auto0AF1C289_ai < 0 && lv_index >= auto0AF1C289_ae) ) ; lv_index += auto0AF1C289_ai ) {
            auto99D79FBB_var = 0;
            for ( ; auto99D79FBB_var <= auto99D79FBB_ae; auto99D79FBB_var += 1 ) {
                if (true) {
                    break;
                }

                if (true) {
                    lv_isBuilder = true;
                    break;
                }

            }
        }
        if ((lv_isBuilder == false)) {
            UnitRemove(auto25CF22A8_var);
        }

    }
}

trigger auto_libUTES_gf_LoadTesterUnits_Trigger = null;
string auto_libUTES_gf_LoadTesterUnits_lp_storageString;
int auto_libUTES_gf_LoadTesterUnits_lp_owner;

void libUTES_gf_LoadTesterUnits (string lp_storageString, int lp_owner) {
    auto_libUTES_gf_LoadTesterUnits_lp_storageString = lp_storageString;
    auto_libUTES_gf_LoadTesterUnits_lp_owner = lp_owner;

    if (auto_libUTES_gf_LoadTesterUnits_Trigger == null) {
        auto_libUTES_gf_LoadTesterUnits_Trigger = TriggerCreate("auto_libUTES_gf_LoadTesterUnits_TriggerFunc");
    }

    TriggerExecute(auto_libUTES_gf_LoadTesterUnits_Trigger, false, false);
}

bool auto_libUTES_gf_LoadTesterUnits_TriggerFunc (bool testConds, bool runActions) {
    string lp_storageString = auto_libUTES_gf_LoadTesterUnits_lp_storageString;
    int lp_owner = auto_libUTES_gf_LoadTesterUnits_lp_owner;

    // Variable Declarations
    string lv_unit_type;
    fixed lv_x;
    fixed lv_y;
    int lv_ii;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ii = 1;

    // Implementation
    while ((StringWord(lp_storageString, lv_ii) != null)) {
        lv_unit_type = UnitTypeFromString(StringWord(lp_storageString, lv_ii));
        lv_ii += 1;
        lv_x = StringToFixed(StringWord(lp_storageString, lv_ii));
        lv_ii += 1;
        lv_y = StringToFixed(StringWord(lp_storageString, lv_ii));
        lv_ii += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unit_type, 0, lp_owner, Point(lv_x, lv_y));
    }
    return true;
}

trigger auto_libUTES_gf_SaveTesterUnits_Trigger = null;

void libUTES_gf_SaveTesterUnits () {
    if (auto_libUTES_gf_SaveTesterUnits_Trigger == null) {
        auto_libUTES_gf_SaveTesterUnits_Trigger = TriggerCreate("auto_libUTES_gf_SaveTesterUnits_TriggerFunc");
    }

    TriggerExecute(auto_libUTES_gf_SaveTesterUnits_Trigger, false, false);
}

bool auto_libUTES_gf_SaveTesterUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;
    string lv_unit_type;
    string lv_x;
    string lv_y;

    // Automatic Variable Declarations
    unitgroup auto4F7D64BF_g;
    int auto4F7D64BF_u;
    unit auto4F7D64BF_var;
    unitgroup auto22AB04CF_g;
    int auto22AB04CF_u;
    unit auto22AB04CF_var;
    unitgroup auto83C291B2_g;
    int auto83C291B2_u;
    unit auto83C291B2_var;

    // Variable Initialization
    lv_string = "";
    lv_unit_type = "";
    lv_x = "";
    lv_y = "";

    // Implementation
    auto4F7D64BF_g = UnitGroup(null, libUTES_gv_side_player[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto4F7D64BF_u = UnitGroupCount(auto4F7D64BF_g, c_unitCountAll);
    for (;; auto4F7D64BF_u -= 1) {
        auto4F7D64BF_var = UnitGroupUnitFromEnd(auto4F7D64BF_g, auto4F7D64BF_u);
        if (auto4F7D64BF_var == null) { break; }
        lv_unit_type = (UnitGetType(auto4F7D64BF_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(auto4F7D64BF_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(auto4F7D64BF_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unit_type + " " + lv_x + " " + lv_y + " ");
    }
    libUTES_gv_unit_storage[0] = lv_string;
    lv_string = "";
    auto22AB04CF_g = UnitGroup(null, libUTES_gv_side_player[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto22AB04CF_u = UnitGroupCount(auto22AB04CF_g, c_unitCountAll);
    for (;; auto22AB04CF_u -= 1) {
        auto22AB04CF_var = UnitGroupUnitFromEnd(auto22AB04CF_g, auto22AB04CF_u);
        if (auto22AB04CF_var == null) { break; }
        lv_unit_type = (UnitGetType(auto22AB04CF_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(auto22AB04CF_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(auto22AB04CF_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unit_type + " " + lv_x + " " + lv_y + " ");
    }
    libUTES_gv_unit_storage[1] = lv_string;
    lv_string = "";
    auto83C291B2_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto83C291B2_u = UnitGroupCount(auto83C291B2_g, c_unitCountAll);
    for (;; auto83C291B2_u -= 1) {
        auto83C291B2_var = UnitGroupUnitFromEnd(auto83C291B2_g, auto83C291B2_u);
        if (auto83C291B2_var == null) { break; }
        lv_unit_type = (UnitGetType(auto83C291B2_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(auto83C291B2_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(auto83C291B2_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unit_type + " " + lv_x + " " + lv_y + " ");
    }
    libUTES_gv_unit_storage[2] = lv_string;
    return true;
}

void libUTES_gf_ResetTesterUnits () {
    // Automatic Variable Declarations
    const int autoC2055AED_ae = libUTES_gv_const_players;
    int autoC2055AED_var;
    unitgroup auto32A1E4BF_g;
    int auto32A1E4BF_u;
    unit auto32A1E4BF_var;
    unitgroup auto4AFA7A6F_g;
    int auto4AFA7A6F_u;
    unit auto4AFA7A6F_var;
    int autoA34EBE8D_ae;
    int autoA34EBE8D_var;

    // Implementation
    libUTES_gf_DeleteAllTesterUnits();
    libUTES_gf_LoadTesterUnits(libUTES_gv_unit_storage[0], libUTES_gv_side_player[0]);
    libUTES_gf_LoadTesterUnits(libUTES_gv_unit_storage[1], libUTES_gv_side_player[1]);
    libUTES_gf_LoadTesterUnits(libUTES_gv_unit_storage[2], 0);
    autoC2055AED_var = 1;
    for ( ; autoC2055AED_var <= autoC2055AED_ae; autoC2055AED_var += 1 ) {
        UnitControlGroupAddUnits(autoC2055AED_var, 1, UnitGroup(null, libUTES_gv_side_player[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        UnitControlGroupAddUnits(autoC2055AED_var, 2, UnitGroup(null, libUTES_gv_side_player[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    }
    if ((libUTES_gv_attack_mode == false)) {
        auto32A1E4BF_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto32A1E4BF_u = UnitGroupCount(auto32A1E4BF_g, c_unitCountAll);
        for (;; auto32A1E4BF_u -= 1) {
            auto32A1E4BF_var = UnitGroupUnitFromEnd(auto32A1E4BF_g, auto32A1E4BF_u);
            if (auto32A1E4BF_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(auto32A1E4BF_var, true);
        }
    }

    auto4AFA7A6F_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto4AFA7A6F_u = UnitGroupCount(auto4AFA7A6F_g, c_unitCountAll);
    for (;; auto4AFA7A6F_u -= 1) {
        auto4AFA7A6F_var = UnitGroupUnitFromEnd(auto4AFA7A6F_g, auto4AFA7A6F_u);
        if (auto4AFA7A6F_var == null) { break; }
        UnitSetPropertyFixed(auto4AFA7A6F_var, c_unitPropEnergyPercent, 100.0);
        autoA34EBE8D_ae = UnitAbilityCount(auto4AFA7A6F_var);
        autoA34EBE8D_var = 0;
        for ( ; autoA34EBE8D_var <= autoA34EBE8D_ae; autoA34EBE8D_var += 1 ) {
            if ((libNtve_gf_AbilityMatchesFilters(UnitAbilityGet(auto4AFA7A6F_var, autoA34EBE8D_var), UnitGetOwner(auto4AFA7A6F_var), c_classIdCAbilArmMagazine, "") == true)) {
                UnitSetProgressStage(auto4AFA7A6F_var, 1, c_unitProgressStageCancel);
                UnitMagazineArm(auto4AFA7A6F_var, AbilityCommand(UnitAbilityGet(auto4AFA7A6F_var, autoA34EBE8D_var), 0), (CatalogFieldValueGetAsInt(c_gameCatalogAbil, UnitAbilityGet(auto4AFA7A6F_var, autoA34EBE8D_var), "MaxCount", UnitGetOwner(auto4AFA7A6F_var))-CatalogFieldValueGetAsInt(c_gameCatalogAbil, UnitAbilityGet(auto4AFA7A6F_var, autoA34EBE8D_var), "InfoArray[" + IntToString(0) + "].CountStart", UnitGetOwner(auto4AFA7A6F_var))));
            }

        }
    }
    libUTES_gf_MovePlayerCameras();
    TimerRestart(libUTES_gv_test_timer);
}

void libUTES_gf_MirrorTesterUnitsByPlayer (int lp_player) {
    // Variable Declarations
    int lv_this_side;
    int lv_other_side;

    // Automatic Variable Declarations
    unitgroup auto14362BDB_g;
    int auto14362BDB_u;
    unit auto14362BDB_var;
    unitgroup autoBFC0B212_g;
    int autoBFC0B212_u;
    unit autoBFC0B212_var;
    const int auto5218D111_ae = libUTES_gv_const_players;
    int auto5218D111_var;

    // Variable Initialization
    lv_this_side = libUTES_gv_data_player[lp_player].lv_creator_side;

    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_C5E29F8C"));
    if ((lv_this_side == 0)) {
        lv_other_side = 1;
    }
    else {
        lv_other_side = 0;
    }
    auto14362BDB_g = UnitGroup(null, libUTES_gv_side_player[lv_other_side], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto14362BDB_u = UnitGroupCount(auto14362BDB_g, c_unitCountAll);
    for (;; auto14362BDB_u -= 1) {
        auto14362BDB_var = UnitGroupUnitFromEnd(auto14362BDB_g, auto14362BDB_u);
        if (auto14362BDB_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto14362BDB_var, false);
        UnitKill(auto14362BDB_var);
    }
    Wait(0.0625, c_timeGame);
    autoBFC0B212_g = UnitGroup(null, libUTES_gv_side_player[lv_this_side], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoBFC0B212_u = UnitGroupCount(autoBFC0B212_g, c_unitCountAll);
    for (;; autoBFC0B212_u -= 1) {
        autoBFC0B212_var = UnitGroupUnitFromEnd(autoBFC0B212_g, autoBFC0B212_u);
        if (autoBFC0B212_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(autoBFC0B212_var), 0, libUTES_gv_side_player[lv_other_side], libUTES_gv_terrain.lv_spawnPoints[lv_other_side]);
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        auto5218D111_var = 1;
        for ( ; auto5218D111_var <= auto5218D111_ae; auto5218D111_var += 1 ) {
            UnitControlGroupAddUnit(auto5218D111_var, (lv_other_side+1), UnitLastCreated());
        }
    }
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
}

trigger auto_libUTES_gf_RemoveNeutralStructures_Trigger = null;

void libUTES_gf_RemoveNeutralStructures () {
    if (auto_libUTES_gf_RemoveNeutralStructures_Trigger == null) {
        auto_libUTES_gf_RemoveNeutralStructures_Trigger = TriggerCreate("auto_libUTES_gf_RemoveNeutralStructures_TriggerFunc");
    }

    TriggerExecute(auto_libUTES_gf_RemoveNeutralStructures_Trigger, false, false);
}

bool auto_libUTES_gf_RemoveNeutralStructures_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto998265AF_g;
    int auto998265AF_u;
    unit auto998265AF_var;

    // Implementation
    auto998265AF_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto998265AF_u = UnitGroupCount(auto998265AF_g, c_unitCountAll);
    for (;; auto998265AF_u -= 1) {
        auto998265AF_var = UnitGroupUnitFromEnd(auto998265AF_g, auto998265AF_u);
        if (auto998265AF_var == null) { break; }
        UnitRemove(auto998265AF_var);
    }
    return true;
}

trigger auto_libUTES_gf_SaveMapStructures_Trigger = null;

void libUTES_gf_SaveMapStructures () {
    if (auto_libUTES_gf_SaveMapStructures_Trigger == null) {
        auto_libUTES_gf_SaveMapStructures_Trigger = TriggerCreate("auto_libUTES_gf_SaveMapStructures_TriggerFunc");
    }

    TriggerExecute(auto_libUTES_gf_SaveMapStructures_Trigger, false, false);
}

bool auto_libUTES_gf_SaveMapStructures_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;
    string lv_unittype;
    string lv_x;
    string lv_y;

    // Automatic Variable Declarations
    unitgroup auto82D3A2D5_g;
    int auto82D3A2D5_u;
    unit auto82D3A2D5_var;

    // Variable Initialization
    lv_string = "";
    lv_unittype = "";
    lv_x = "";
    lv_y = "";

    // Implementation
    auto82D3A2D5_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto82D3A2D5_u = UnitGroupCount(auto82D3A2D5_g, c_unitCountAll);
    for (;; auto82D3A2D5_u -= 1) {
        auto82D3A2D5_var = UnitGroupUnitFromEnd(auto82D3A2D5_g, auto82D3A2D5_u);
        if (auto82D3A2D5_var == null) { break; }
        lv_unittype = (UnitGetType(auto82D3A2D5_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(auto82D3A2D5_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(auto82D3A2D5_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unittype + " " + lv_x + " " + lv_y + " ");
    }
    libUTES_gv_map_structure_storage = lv_string;
    return true;
}

void libUTES_gf_RestoreMapStructures () {
    // Automatic Variable Declarations
    // Implementation
    libUTES_gf_RemoveNeutralStructures();
    libUTES_gf_LoadTesterUnits(libUTES_gv_map_structure_storage, 0);
}

void libUTES_gf_MovePlayerCameras () {
    // Automatic Variable Declarations
    playergroup auto62364E34_g;
    int auto62364E34_var;

    // Implementation
    auto62364E34_g = PlayerGroupActive();
    auto62364E34_var = -1;
    while (true) {
        auto62364E34_var = PlayerGroupNextPlayer(auto62364E34_g, auto62364E34_var);
        if (auto62364E34_var < 0) { break; }
        CameraPan(auto62364E34_var, MidPoint(libUTES_gv_terrain.lv_spawnPoints[0], libUTES_gv_terrain.lv_spawnPoints[1]), 1.0, -1, 10, false);
    }
}

void libUTES_gf_ShowGameInterface () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, true);
}

void libUTES_gf_HideGameInterface () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, false);
}

void libUTES_gf_ShowUnitTesterCommonInterface () {
    // Automatic Variable Declarations
    const int autoC05CF7B9_ae = libUTES_gv_const_players;
    int autoC05CF7B9_var;

    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    libUTES_gv_tester_menu = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterMenu");
    libUTES_gv_tester_panel = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterPanel");
    libUTES_gv_menu_mode_settings = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/Modes/Settings");
    libNtve_gf_SetDialogItemRenderPriority(libUTES_gv_menu_mode_settings, 99, PlayerGroupAll());
    libUTES_gv_menu_mode_creator = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/Modes/Creator");
    libNtve_gf_SetDialogItemRenderPriority(libUTES_gv_menu_mode_creator, 99, PlayerGroupAll());
    libUTES_gv_menu_creator_panel = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterMenu/CreatorMenu");
    libUTES_gv_menu_creator_mirror = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/CreatorMenu/Mirror");
    libUTES_gv_menu_creator_clear = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/CreatorMenu/Clear");
    libUTES_gv_menu_attack_panel = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackMenu");
    libUTES_gv_menu_attack_pause = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackMenu/Pause");
    libUTES_gv_menu_attack_reset = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackMenu/Reset");
    libUTES_gv_menu_start_attack = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/StartButton");
    libUTES_gv_menu_stop_attack = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/StopButton");
    libUTES_gv_menu_attack_attack = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackButton");
    libUTES_gv_menu_side = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/SideButton");
    libUTES_gv_settings_panel = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel");
    libUTES_gv_settings_upgradebutton[0] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level0");
    libUTES_gv_settings_upgradebutton[1] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level1");
    libUTES_gv_settings_upgradebutton[2] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level2");
    libUTES_gv_settings_upgradebutton[3] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level3");
    libUTES_gv_settings_researchbutton[0] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Research/Off");
    libUTES_gv_settings_researchbutton[1] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Research/On");
    libUTES_gv_settings_visionbutton[0] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Vision/Off");
    libUTES_gv_settings_visionbutton[1] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Vision/On");
    libUTES_gv_creator_panel = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterPanel/CreatorPanel");
    libNtve_gf_SetDialogItemRenderPriority(libUTES_gv_creator_panel, 99, PlayerGroupAll());
    autoC05CF7B9_var = 1;
    for ( ; autoC05CF7B9_var <= autoC05CF7B9_ae; autoC05CF7B9_var += 1 ) {
        libUTES_gv_settings_allianceplayerlabel[autoC05CF7B9_var] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC05CF7B9_var) + "/Label"));
        libUTES_gv_settings_alliancebuttons[autoC05CF7B9_var][0] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC05CF7B9_var) + "/Red"));
        libUTES_gv_settings_alliancebuttons[autoC05CF7B9_var][1] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC05CF7B9_var) + "/Blue"));
        libUTES_gv_settings_alliancebuttons[autoC05CF7B9_var][2] = libUTES_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC05CF7B9_var) + "/Creator"));
    }
}

void libUTES_gf_PrepareUnitTesterPlacementMode () {
    // Automatic Variable Declarations
    // Implementation
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    CreepSetSpeed(c_creepSpeedDecay, 1000.0);
    CreepSetSpeed(c_creepSpeedBlend, 1000.0);
}

void libUTES_gf_PrepareUnitTesterPlayers () {
    // Automatic Variable Declarations
    const int autoE9EA7ABC_ae = libUTES_gv_const_players;
    int autoE9EA7ABC_var;
    playergroup auto9E654153_g;
    int auto9E654153_var;

    // Implementation
    autoE9EA7ABC_var = 1;
    for ( ; autoE9EA7ABC_var <= autoE9EA7ABC_ae; autoE9EA7ABC_var += 1 ) {
        VisRevealerCreate(autoE9EA7ABC_var, RegionEntireMap());
        libUTES_gv_data_player[autoE9EA7ABC_var].lv_revealer = VisRevealerLastCreated();
    }
    libNtve_gf_SetAlliance(9, 10, libNtve_ge_AllianceSetting_Neutral);
    auto9E654153_g = PlayerGroupAll();
    auto9E654153_var = -1;
    while (true) {
        auto9E654153_var = PlayerGroupNextPlayer(auto9E654153_g, auto9E654153_var);
        if (auto9E654153_var < 0) { break; }
        PlayerModifyPropertyInt(auto9E654153_var, c_playerPropMinerals, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto9E654153_var, c_playerPropVespene, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto9E654153_var, c_playerPropTerrazine, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto9E654153_var, c_playerPropCustom, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto9E654153_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
    }
    if ((PlayerType(2) == c_playerTypeUser)) {
        libUTES_gv_data_player[1].lv_creator_access = true;
        libUTES_gv_data_player[1].lv_player_access[0] = true;
        libUTES_gv_data_player[1].lv_menu_mode = 2;
        libUTES_gv_data_player[2].lv_creator_access = true;
        libUTES_gv_data_player[2].lv_player_access[1] = true;
        libUTES_gv_data_player[2].lv_menu_mode = 2;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_18ADA5AB"));
        TextExpressionSetToken("Param/Expression/lib_UTES_DBA7EE2D", "A", TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_UTES_DBA7EE2D"));
        TextExpressionSetToken("Param/Expression/lib_UTES_18E1D0F3", "A", TextWithColor(PlayerName(2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false))));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_UTES_18E1D0F3"));
    }
    else {
        libUTES_gv_data_player[1].lv_creator_access = true;
        libUTES_gv_data_player[1].lv_player_access[0] = true;
        libUTES_gv_data_player[1].lv_player_access[1] = true;
        libUTES_gv_data_player[1].lv_menu_mode = 2;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_C836995F"));
        TextExpressionSetToken("Param/Expression/lib_UTES_8E0A5477", "A", TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_UTES_8E0A5477"));
    }
}

void libUTES_gf_RenderTesterUIForPlayer (int lp_player) {
    // Variable Declarations
    int lv_side_ii;
    int lv_card_ii;
    int lv_level_ii;
    string lv_unit;
    string lv_commander;
    string lv_tFaction;

    // Automatic Variable Declarations
    const int autoD42DC03D_ae = libUTES_gv_const_terrains;
    int autoD42DC03D_var;
    const int auto973E0E1E_ae = libUTES_gv_const_players;
    int auto973E0E1E_var;
    const int auto96E2DABE_ae = 1;
    int auto96E2DABE_var;
    int auto91E824A1_ae;
    int auto91E824A1_var;

    // Variable Initialization

    // Implementation
    if ((libUTES_gv_attack_mode == true)) {
        DialogControlSetEnabled(libUTES_gv_menu_mode_settings, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(libUTES_gv_menu_mode_settings, PlayerGroupSingle(lp_player), true);
        if ((libUTES_gv_data_player[lp_player].lv_menu_mode == 1)) {
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_settings, true, PlayerGroupSingle(lp_player));
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_settings, false, PlayerGroupSingle(lp_player));
        }
    }
    if (((libUTES_gv_data_player[lp_player].lv_creator_access == false) || (libUTES_gv_attack_mode == true))) {
        DialogControlSetEnabled(libUTES_gv_menu_mode_creator, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(libUTES_gv_menu_mode_creator, PlayerGroupSingle(lp_player), true);
        if ((libUTES_gv_data_player[lp_player].lv_menu_mode == 2)) {
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_creator, true, PlayerGroupSingle(lp_player));
        }
        else {
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_creator, false, PlayerGroupSingle(lp_player));
        }
    }
    if ((libUTES_gv_attack_mode != false)) {
        DialogControlSetVisible(libUTES_gv_menu_creator_panel, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(libUTES_gv_menu_creator_panel, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(libUTES_gv_menu_side, PlayerGroupSingle(lp_player), true);
        if ((libUTES_gv_data_player[lp_player].lv_creator_access == false)) {
            DialogControlSetEnabled(libUTES_gv_menu_creator_mirror, PlayerGroupSingle(lp_player), false);
            DialogControlSetEnabled(libUTES_gv_menu_creator_clear, PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(libUTES_gv_menu_start_attack, PlayerGroupSingle(lp_player), false);
        }
        else {
            DialogControlSetEnabled(libUTES_gv_menu_creator_mirror, PlayerGroupSingle(lp_player), true);
            DialogControlSetEnabled(libUTES_gv_menu_creator_clear, PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(libUTES_gv_menu_start_attack, PlayerGroupSingle(lp_player), true);
        }
    }
    if ((libUTES_gv_attack_mode != true)) {
        DialogControlSetVisible(libUTES_gv_menu_attack_panel, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(libUTES_gv_menu_stop_attack, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(libUTES_gv_menu_attack_attack, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(libUTES_gv_menu_attack_panel, PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_attack_pause, libUTES_gv_pause, PlayerGroupSingle(lp_player));
        if ((libUTES_gv_data_player[lp_player].lv_creator_access == false)) {
            DialogControlSetEnabled(libUTES_gv_menu_attack_reset, PlayerGroupSingle(lp_player), false);
            DialogControlSetEnabled(libUTES_gv_menu_attack_pause, PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(libUTES_gv_menu_stop_attack, PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(libUTES_gv_menu_attack_attack, PlayerGroupSingle(lp_player), false);
        }
        else {
            DialogControlSetEnabled(libUTES_gv_menu_attack_reset, PlayerGroupSingle(lp_player), true);
            DialogControlSetEnabled(libUTES_gv_menu_attack_pause, PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(libUTES_gv_menu_stop_attack, PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(libUTES_gv_menu_attack_attack, PlayerGroupSingle(lp_player), true);
        }
    }
    if (((libUTES_gv_attack_mode == true) || (libUTES_gv_data_player[lp_player].lv_menu_mode == 0))) {
        DialogControlSetVisible(libUTES_gv_tester_panel, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(libUTES_gv_tester_panel, PlayerGroupSingle(lp_player), true);
        if ((libUTES_gv_data_player[lp_player].lv_menu_mode != 1)) {
            DialogControlSetVisible(libUTES_gv_settings_panel, PlayerGroupSingle(lp_player), false);
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_settings, false, PlayerGroupSingle(lp_player));
        }
        else {
            DialogControlSetVisible(libUTES_gv_settings_panel, PlayerGroupSingle(lp_player), true);
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_settings, true, PlayerGroupSingle(lp_player));
            if ((libUTES_gv_vision == true)) {
                libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_visionbutton[0], false, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_visionbutton[1], true, PlayerGroupSingle(lp_player));
            }
            else {
                libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_visionbutton[0], true, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_visionbutton[1], false, PlayerGroupSingle(lp_player));
            }
            autoD42DC03D_var = 0;
            for ( ; autoD42DC03D_var <= autoD42DC03D_ae; autoD42DC03D_var += 1 ) {
                if ((libUTES_gv_terrain_index == autoD42DC03D_var)) {
                    libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_terrainbutton[autoD42DC03D_var], true, PlayerGroupSingle(lp_player));
                }
                else {
                    libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_terrainbutton[autoD42DC03D_var], false, PlayerGroupSingle(lp_player));
                }
            }
            auto973E0E1E_var = 1;
            for ( ; auto973E0E1E_var <= auto973E0E1E_ae; auto973E0E1E_var += 1 ) {
                libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][0], libUTES_gv_data_player[auto973E0E1E_var].lv_player_access[0], PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][1], libUTES_gv_data_player[auto973E0E1E_var].lv_player_access[1], PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][2], libUTES_gv_data_player[auto973E0E1E_var].lv_creator_access, PlayerGroupSingle(lp_player));
                if ((PlayerType(auto973E0E1E_var) == c_playerTypeUser)) {
                    libNtve_gf_SetDialogItemText(libUTES_gv_settings_allianceplayerlabel[auto973E0E1E_var], PlayerName(auto973E0E1E_var), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemColor(libUTES_gv_settings_allianceplayerlabel[auto973E0E1E_var], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto973E0E1E_var, false)), PlayerGroupSingle(lp_player));
                    DialogControlSetEnabled(libUTES_gv_settings_allianceplayerlabel[auto973E0E1E_var], PlayerGroupSingle(lp_player), true);
                    DialogControlSetEnabled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][0], PlayerGroupSingle(lp_player), true);
                    DialogControlSetEnabled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][1], PlayerGroupSingle(lp_player), true);
                    DialogControlSetEnabled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][2], PlayerGroupSingle(lp_player), true);
                }
                else {
                    libNtve_gf_SetDialogItemText(libUTES_gv_settings_allianceplayerlabel[auto973E0E1E_var], StringExternal("UI/BattleLobbyPlayerFrame/Empty"), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemColor(libUTES_gv_settings_allianceplayerlabel[auto973E0E1E_var], ColorWithAlpha(0,0,0,0), PlayerGroupSingle(lp_player));
                    DialogControlSetEnabled(libUTES_gv_settings_allianceplayerlabel[auto973E0E1E_var], PlayerGroupSingle(lp_player), false);
                    DialogControlSetEnabled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][0], PlayerGroupSingle(lp_player), false);
                    DialogControlSetEnabled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][1], PlayerGroupSingle(lp_player), false);
                    DialogControlSetEnabled(libUTES_gv_settings_alliancebuttons[auto973E0E1E_var][2], PlayerGroupSingle(lp_player), false);
                }
            }
        }
        if ((libUTES_gv_data_player[lp_player].lv_menu_mode != 2)) {
            DialogControlSetVisible(libUTES_gv_creator_panel, PlayerGroupSingle(lp_player), false);
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_creator, false, PlayerGroupSingle(lp_player));
        }
        else {
            DialogControlSetVisible(libUTES_gv_creator_panel, PlayerGroupSingle(lp_player), true);
            libNtve_gf_SetDialogItemToggled(libUTES_gv_menu_mode_creator, true, PlayerGroupSingle(lp_player));
            libUTES_gf_RenderUnitTesterPlacementCard(lp_player);
        }
    }
    auto96E2DABE_var = 0;
    for ( ; auto96E2DABE_var <= auto96E2DABE_ae; auto96E2DABE_var += 1 ) {
        if ((libUTES_gv_data_player[lp_player].lv_player_access[auto96E2DABE_var] == false)) {
            if ((libUTES_gv_data_player[lp_player].lv_creator_access == true) && (libUTES_gv_attack_mode == false)) {
                libNtve_gf_SetAlliance(libUTES_gv_side_player[auto96E2DABE_var], lp_player, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            else {
                libNtve_gf_SetAlliance(libUTES_gv_side_player[auto96E2DABE_var], lp_player, libNtve_ge_AllianceSetting_Ally);
            }
        }
        else {
            libNtve_gf_SetAlliance(libUTES_gv_side_player[auto96E2DABE_var], lp_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
        }
    }
    auto91E824A1_ae = libARRA_gf_ListSize(libUTES_gv_factions);
    auto91E824A1_var = 1;
    for ( ; auto91E824A1_var <= auto91E824A1_ae; auto91E824A1_var += 1 ) {
        DialogControlHookup(libUTES_gv_creator_racebutton[auto91E824A1_var], c_triggerControlTypeImage, "HoverImage");
        libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    }
}

void libUTES_gf_RenderTesterUIForAllPlayers () {
    // Automatic Variable Declarations
    const int auto1C89AC1E_ae = libUTES_gv_const_players;
    int auto1C89AC1E_var;

    // Implementation
    auto1C89AC1E_var = 1;
    for ( ; auto1C89AC1E_var <= auto1C89AC1E_ae; auto1C89AC1E_var += 1 ) {
        if ((PlayerType(auto1C89AC1E_var) == c_playerTypeUser)) {
            libUTES_gf_RenderTesterUIForPlayer(auto1C89AC1E_var);
        }

    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Unit Tester Interface
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_InitializeUnitTesterInterface_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFEC78FAC_g;
    int autoFEC78FAC_var;
    unitgroup auto272FD0CC_g;
    int auto272FD0CC_u;
    unit auto272FD0CC_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoFEC78FAC_g = PlayerGroupAll();
    autoFEC78FAC_var = -1;
    while (true) {
        autoFEC78FAC_var = PlayerGroupNextPlayer(autoFEC78FAC_g, autoFEC78FAC_var);
        if (autoFEC78FAC_var < 0) { break; }
        PlayerOptionOverride(autoFEC78FAC_var, "simplecommandcard", "0");
        TechTreeRestrictionsEnable(autoFEC78FAC_var, true);
        TechTreeRequirementsEnable(autoFEC78FAC_var, true);
    }
    libUTES_gf_PrepareUnitTesterFactions();
    libUTES_gf_PrepareUnitTesterTerrains();
    libUTES_gf_ShowUnitTesterCommonInterface();
    libUTES_gf_MakeUnitTesterPlacementCard();
    libUTES_gf_MakeUnitTesterFactionsList();
    DialogControlSetPosition(libUTES_gv_tester_panel, PlayerGroupAll(), c_anchorBottomLeft, 190, -112);
    libUTES_gv_side_player[0] = (libUTES_gv_const_players+1);
    libUTES_gv_side_player[1] = (libUTES_gv_const_players+2);
    libUTES_gf_LoadTerrainData(libUTES_gv_data_terrain[0]);
    libUTES_gf_TesterLeaderboardCreate();
    libUTES_gf_SaveMapStructures();
    auto272FD0CC_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
    auto272FD0CC_u = UnitGroupCount(auto272FD0CC_g, c_unitCountAll);
    for (;; auto272FD0CC_u -= 1) {
        auto272FD0CC_var = UnitGroupUnitFromEnd(auto272FD0CC_g, auto272FD0CC_u);
        if (auto272FD0CC_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto272FD0CC_var, true);
    }
    libUTES_gf_SetActors();
    libUTES_gf_PrepareUnitTesterPlayers();
    libUTES_gf_HideGameInterface();
    libUTES_gf_ShowUnitTesterTips();
    TimerStart(libUTES_gv_test_timer, c_timerDurationInfinite, false, c_timeReal);
    libUTES_gf_RenderTesterUIForAllPlayers();
    TriggerSendEvent(libUTES_gv_uNITTESTERINITIALIZED);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_InitializeUnitTesterInterface_Init () {
    libUTES_gt_InitializeUnitTesterInterface = TriggerCreate("libUTES_gt_InitializeUnitTesterInterface_Func");
    TriggerAddEventGeneric(libUTES_gt_InitializeUnitTesterInterface, "UNIT TESTER ENVIRONMENT PREPARED");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Start Button
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterStartButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoED67B265_g;
    int autoED67B265_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libUTES_gv_attack_mode = true;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_7CF58325"));
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    CreepSetSpeed(c_creepSpeedBlend, 100.0);
    libUTES_gf_SaveTesterUnits();
    TriggerEnable(libUTES_gt_LeaderboardUnitCreated, false);
    TriggerEnable(libUTES_gt_LeaderboardUnitRemoved, false);
    BoardMinimizeSetState(libUTES_gv_leaderboard, PlayerGroupActive(), true);
    libNtve_gf_SetAlliance(9, 10, libNtve_ge_AllianceSetting_Enemy);
    autoED67B265_g = PlayerGroupActive();
    autoED67B265_var = -1;
    while (true) {
        autoED67B265_var = PlayerGroupNextPlayer(autoED67B265_g, autoED67B265_var);
        if (autoED67B265_var < 0) { break; }
        UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), autoED67B265_var, false);
    }
    libUTES_gf_ResetTesterUnits();
    TimerRestart(libUTES_gv_test_timer);
    TimerWindowCreate(libUTES_gv_test_timer, StringExternal("UI/VictoryMissionTime_Colon"), true, true);
    libUTES_gv_test_timer_window = TimerWindowLastCreated();
    if ((libUTES_gf_NoUnitsForSide(0) == false) && (libUTES_gf_NoUnitsForSide(1) == false)) {
        TriggerEnable(libUTES_gt_TesterResult, true);
    }

    libUTES_gf_ShowGameInterface();
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterStartButton_Init () {
    libUTES_gt_TesterStartButton = TriggerCreate("libUTES_gt_TesterStartButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Stop Button
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterStopButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto89291528_g;
    int auto89291528_var;

    // Actions
    if (!runActions) {
        return true;
    }

    libUTES_gv_attack_mode = false;
    libUTES_gv_pause = false;
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_9297BD25"));
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    CreepSetSpeed(c_creepSpeedDecay, 1000.0);
    CreepSetSpeed(c_creepSpeedBlend, 1000.0);
    TimerWindowDestroy(libUTES_gv_test_timer_window);
    libUTES_gf_ResetTesterUnits();
    libNtve_gf_SetAlliance(9, 10, libNtve_ge_AllianceSetting_Neutral);
    auto89291528_g = PlayerGroupActive();
    auto89291528_var = -1;
    while (true) {
        auto89291528_var = PlayerGroupNextPlayer(auto89291528_g, auto89291528_var);
        if (auto89291528_var < 0) { break; }
        UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), auto89291528_var, false);
    }
    libUTES_gf_MovePlayerCameras();
    BoardMinimizeSetState(libUTES_gv_leaderboard, PlayerGroupActive(), false);
    libUTES_gf_HideGameInterface();
    TriggerEnable(libUTES_gt_TesterResult, false);
    Wait(0.0625, c_timeGame);
    TriggerEnable(libUTES_gt_LeaderboardUnitCreated, true);
    TriggerEnable(libUTES_gt_LeaderboardUnitRemoved, true);
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterStopButton_Init () {
    libUTES_gt_TesterStopButton = TriggerCreate("libUTES_gt_TesterStopButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Attack Button
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterAttackButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libUTES_gv_attack_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUTES_gv_data_player[EventPlayer()].lv_ctrl == false) && (libUTES_gv_data_player[EventPlayer()].lv_shift == true)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_D371E110"));
        PlayerSetDifficulty(9, 7);
        AISetAPM(9, 900);
        AIMeleeStart(9);
    }
    else if ((libUTES_gv_data_player[EventPlayer()].lv_ctrl == true) && (libUTES_gv_data_player[EventPlayer()].lv_shift == false)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_A061D0E7"));
        PlayerSetDifficulty(10, 7);
        AISetAPM(10, 900);
        AIMeleeStart(10);
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_C1E9B1B4"));
        PlayerSetDifficulty(9, 7);
        AISetAPM(9, 900);
        AIMeleeStart(9);
        PlayerSetDifficulty(10, 7);
        AISetAPM(10, 900);
        AIMeleeStart(10);
    }
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterAttackButton_Init () {
    libUTES_gt_TesterAttackButton = TriggerCreate("libUTES_gt_TesterAttackButton_Func");
    TriggerAddEventKeyPressed(libUTES_gt_TesterAttackButton, c_playerAny, c_keyPeriod, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Side Button
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterSideButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUTES_gv_chosenSide[EventPlayer()] == 0)) {
        libUTES_gv_chosenSide[EventPlayer()] = 1;
    }
    else {
        libUTES_gv_chosenSide[EventPlayer()] = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterSideButton_Init () {
    libUTES_gt_TesterSideButton = TriggerCreate("libUTES_gt_TesterSideButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Clear Units
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterClearUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_811083A4"));
    libUTES_gf_DeleteAllTesterUnits();
    libUTES_gf_TesterLeaderboardCreate();
    Wait(1.0, c_timeGame);
    libUTES_gf_RestoreMapStructures();
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterClearUnits_Init () {
    libUTES_gt_TesterClearUnits = TriggerCreate("libUTES_gt_TesterClearUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Delete Units
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterDeleteUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6608B2CF_g;
    int auto6608B2CF_u;
    unit auto6608B2CF_var;

    // Conditions
    if (testConds) {
        if (!((libUTES_gv_attack_mode == false))) {
            return false;
        }

        if (!((libUTES_gv_data_player[EventPlayer()].lv_creator_access == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_NavButtonSelect", -1), PlayerGroupActive(), 100.0, 0.0);
    auto6608B2CF_g = UnitGroupSelected(EventPlayer());
    auto6608B2CF_u = UnitGroupCount(auto6608B2CF_g, c_unitCountAll);
    for (;; auto6608B2CF_u -= 1) {
        auto6608B2CF_var = UnitGroupUnitFromEnd(auto6608B2CF_g, auto6608B2CF_u);
        if (auto6608B2CF_var == null) { break; }
        if ((libNtve_gf_UnitIsInvulnerable(auto6608B2CF_var) == false)) {
            UnitKill(auto6608B2CF_var);
            if ((UnitGetOwner(auto6608B2CF_var) == libUTES_gv_side_player[0])) {
                libUTES_gv_data_player[EventPlayer()].lv_creator_side = 0;
            }
            else if ((UnitGetOwner(auto6608B2CF_var) == libUTES_gv_side_player[1])) {
                libUTES_gv_data_player[EventPlayer()].lv_creator_side = 1;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterDeleteUnits_Init () {
    libUTES_gt_TesterDeleteUnits = TriggerCreate("libUTES_gt_TesterDeleteUnits_Func");
    TriggerAddEventKeyPressed(libUTES_gt_TesterDeleteUnits, c_playerAny, c_keyBackSpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Pause Units
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterPauseUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libUTES_gv_attack_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUTES_gv_pause == false)) {
        TimerPause(libUTES_gv_test_timer, true);
        UnitPauseAll(true);
        libUTES_gv_pause = true;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/lib_UTES_FE1D6778"));
        TriggerStop(libUTES_gt_TesterPauseUnits);
    }
    else {
        TimerPause(libUTES_gv_test_timer, false);
        UnitPauseAll(false);
        libUTES_gv_pause = false;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/lib_UTES_47EB8B3F"));
        Wait(2.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    libUTES_gf_RenderTesterUIForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterPauseUnits_Init () {
    libUTES_gt_TesterPauseUnits = TriggerCreate("libUTES_gt_TesterPauseUnits_Func");
    TriggerAddEventKeyPressed(libUTES_gt_TesterPauseUnits, c_playerAny, c_keyMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libUTES_gt_TesterPauseUnits, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Reset Units
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterResetUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libUTES_gv_attack_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUTES_gv_pause = false;
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_D71D1374"));
    libUTES_gf_ResetTesterUnits();
    if ((libUTES_gf_NoUnitsForSide(0) == false) && (libUTES_gf_NoUnitsForSide(1) == false)) {
        TriggerEnable(libUTES_gt_TesterResult, true);
    }

    libUTES_gf_RenderTesterUIForAllPlayers();
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterResetUnits_Init () {
    libUTES_gt_TesterResetUnits = TriggerCreate("libUTES_gt_TesterResetUnits_Func");
    TriggerAddEventKeyPressed(libUTES_gt_TesterResetUnits, c_playerAny, c_keyEquals, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(libUTES_gt_TesterResetUnits, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_RaceButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDB0A73E3_ae = libUTES_gv_tMAXFACTIONS;
    int autoDB0A73E3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB0A73E3_var = 1;
    for ( ; autoDB0A73E3_var <= autoDB0A73E3_ae; autoDB0A73E3_var += 1 ) {
        if ((EventDialogControl() == libUTES_gv_creator_racebutton[autoDB0A73E3_var])) {
            libUTES_gv_creator_selectedRace[EventPlayer()] = libARRA_gf_ListStringGet(libUTES_gv_factions, autoDB0A73E3_var);
            libUTES_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_RaceButtonClicked_Init () {
    libUTES_gt_RaceButtonClicked = TriggerCreate("libUTES_gt_RaceButtonClicked_Func");
    TriggerAddEventDialogControl(libUTES_gt_RaceButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arrow Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_ArrowButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto53CFD725_ae = 2;
    int auto53CFD725_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto53CFD725_var = 0;
    for ( ; auto53CFD725_var <= auto53CFD725_ae; auto53CFD725_var += 1 ) {
        if ((EventDialogControl() == libUTES_gv_creator_bottomButton[auto53CFD725_var])) {
            libUTES_gv_placementCardOffset[auto53CFD725_var] += 1;
            libUTES_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }
        if ((EventDialogControl() == libUTES_gv_creator_upButton[auto53CFD725_var])) {
            libUTES_gv_placementCardOffset[auto53CFD725_var] -= 1;
            libUTES_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_ArrowButtonClicked_Init () {
    libUTES_gt_ArrowButtonClicked = TriggerCreate("libUTES_gt_ArrowButtonClicked_Func");
    TriggerAddEventDialogControl(libUTES_gt_ArrowButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Card Button Cliked
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_CardButtonCliked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cardlayout;
    string lv_unit;
    string lv_upgrade;

    // Automatic Variable Declarations
    int autoEB058817_ae;
    int autoEB058817_var;
    int auto5B50E610_ae;
    int auto5B50E610_var;
    int auto8B5550D5_ae;
    int auto8B5550D5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cardlayout = 0;
    autoEB058817_ae = (libUTES_gv_placementCardColumns * libUTES_gv_placementCardRows);
    autoEB058817_var = 0;
    for ( ; autoEB058817_var <= autoEB058817_ae; autoEB058817_var += 1 ) {
        if ((EventDialogControl() == libUTES_gv_creator_itembutton[lv_cardlayout][autoEB058817_var])) {
            lv_unit = (libUTES_gv_creator_itemunit[lv_cardlayout][(autoEB058817_var + libUTES_gv_placementCardOffset[lv_cardlayout])]);
            break;
        }
    }
    if ((lv_unit != null)) {
        libUTES_gf_CreatorAddUnits(1, libUTES_gv_chosenSide[EventPlayer()], lv_unit);
        UnitGroupSelect(UnitLastCreatedGroup(), EventPlayer(), true);
        return true;
    }
    lv_cardlayout = 1;
    auto5B50E610_ae = (libUTES_gv_placementCardColumns * libUTES_gv_placementCardRows);
    auto5B50E610_var = 0;
    for ( ; auto5B50E610_var <= auto5B50E610_ae; auto5B50E610_var += 1 ) {
        if ((EventDialogControl() == libUTES_gv_creator_itembutton[lv_cardlayout][auto5B50E610_var])) {
            lv_unit = (libUTES_gv_creator_itemunit[lv_cardlayout][(auto5B50E610_var + libUTES_gv_placementCardOffset[lv_cardlayout])]);
            break;
        }
    }
    if ((lv_unit != null)) {
        libUTES_gf_CreatorAddUnits(1, libUTES_gv_chosenSide[EventPlayer()], lv_unit);
        UnitGroupSelect(UnitLastCreatedGroup(), EventPlayer(), true);
        return true;
    }
    lv_cardlayout = 2;
    auto8B5550D5_ae = (libUTES_gv_placementCardColumns * libUTES_gv_placementCardRows);
    auto8B5550D5_var = 0;
    for ( ; auto8B5550D5_var <= auto8B5550D5_ae; auto8B5550D5_var += 1 ) {
        if ((EventDialogControl() == libUTES_gv_creator_itembutton[lv_cardlayout][auto8B5550D5_var])) {
            lv_upgrade = (libUTES_gv_creator_itemunit[lv_cardlayout][(auto8B5550D5_var + libUTES_gv_placementCardOffset[lv_cardlayout])]);
            break;
        }
    }
    if ((lv_upgrade != null)) {
        libUTES_gf_CreatorAddUpgrade2(libUTES_gv_chosenSide[EventPlayer()], lv_upgrade);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_CardButtonCliked_Init () {
    libUTES_gt_CardButtonCliked = TriggerCreate("libUTES_gt_CardButtonCliked_Func");
    TriggerAddEventDialogControl(libUTES_gt_CardButtonCliked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Unit Created
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_LeaderboardUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit_type;
    string lv_unit_name;
    int lv_col;
    int lv_row;
    int lv_unit_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_type = UnitGetType(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((libUTES_gf_TesterLeaderboardValidUnitType(lv_unit_type) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit_name = (lv_unit_type);
    lv_unit_count = UnitGroupCount(UnitGroup(lv_unit_type, UnitGetOwner(EventUnitCreatedUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    lv_col = (UnitGetOwner(EventUnitCreatedUnit()) - libUTES_gv_const_players);
    if ((DataTableValueExists(true, lv_unit_name) == false)) {
        lv_row = libUTES_gf_TesterLeaderboardAddRow(lv_unit_name);
    }
    else {
        lv_row = DataTableGetInt(true, lv_unit_name);
    }
    libUTES_gv_leaderboard_minerals[lv_col] += UnitTypeGetCost(lv_unit_type, c_unitCostMinerals);
    libUTES_gv_leaderboard_gas[lv_col] += UnitTypeGetCost(lv_unit_type, c_unitCostVespene);
    libUTES_gf_TesterLeaderboardSpecialUnitCost(EventUnitCreatedUnit(), lv_unit_type, lv_col, false);
    BoardItemSetText(libUTES_gv_leaderboard, lv_col, 1, IntToText(libUTES_gv_leaderboard_minerals[lv_col]));
    BoardItemSetText(libUTES_gv_leaderboard, lv_col, 2, IntToText(libUTES_gv_leaderboard_gas[lv_col]));
    BoardItemSetText(libUTES_gv_leaderboard, lv_col, 3, IntToText(PlayerGetPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropSuppliesUsed)));
    BoardItemSetText(libUTES_gv_leaderboard, lv_col, lv_row, IntToText(lv_unit_count));
    if ((libUTES_gv_leaderboard_icon_flag[lv_col][lv_row] == false)) {
        libUTES_gf_TesterLeaderboardAddIcon(lv_unit_type, lv_col, lv_row);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_LeaderboardUnitCreated_Init () {
    libUTES_gt_LeaderboardUnitCreated = TriggerCreate("libUTES_gt_LeaderboardUnitCreated_Func");
    TriggerAddEventUnitCreated(libUTES_gt_LeaderboardUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Unit Removed
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_LeaderboardUnitRemoved_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit_type;
    string lv_unit_name;
    int lv_col;
    int lv_row;
    int lv_unitcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_type = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libUTES_gf_TesterLeaderboardValidUnitType(lv_unit_type) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit_name = (lv_unit_type);
    lv_col = (UnitGetOwner(EventUnit()) - 8);
    lv_row = DataTableGetInt(true, lv_unit_name);
    libUTES_gv_leaderboard_minerals[lv_col] -= UnitTypeGetCost(lv_unit_type, c_unitCostMinerals);
    libUTES_gv_leaderboard_gas[lv_col] -= UnitTypeGetCost(lv_unit_type, c_unitCostVespene);
    libUTES_gf_TesterLeaderboardSpecialUnitCost(EventUnit(), lv_unit_type, lv_col, true);
    BoardItemSetText(libUTES_gv_leaderboard, lv_col, 1, IntToText(libUTES_gv_leaderboard_minerals[lv_col]));
    BoardItemSetText(libUTES_gv_leaderboard, lv_col, 2, IntToText(libUTES_gv_leaderboard_gas[lv_col]));
    BoardItemSetText(libUTES_gv_leaderboard, lv_col, 3, IntToText(PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropSuppliesUsed)));
    lv_unitcount = UnitGroupCount(UnitGroup(lv_unit_type, UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if ((lv_unitcount == 0)) {
        BoardItemSetText(libUTES_gv_leaderboard, lv_col, lv_row, StringToText(""));
        BoardItemSetIcon(libUTES_gv_leaderboard, lv_col, lv_row, null, true);
        libUTES_gv_leaderboard_icon_flag[lv_col][lv_row] = false;
    }
    else {
        BoardItemSetText(libUTES_gv_leaderboard, lv_col, lv_row, IntToText(lv_unitcount));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_LeaderboardUnitRemoved_Init () {
    libUTES_gt_LeaderboardUnitRemoved = TriggerCreate("libUTES_gt_LeaderboardUnitRemoved_Func");
    TriggerAddEventUnitDied(libUTES_gt_LeaderboardUnitRemoved, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Result
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_TesterResult_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[2] lv_unit_count;
    int lv_mineral_count;
    int lv_gas_count;
    int lv_food_count;
    int lv_winning_player;
    text lv_winning_text;
    int lv_winning_count;

    // Automatic Variable Declarations
    unitgroup auto60D5A5E7_g;
    int auto60D5A5E7_u;
    unit auto60D5A5E7_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libUTES_gf_NoUnitsForSide(0) == true) || (libUTES_gf_NoUnitsForSide(1) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libUTES_gt_TesterResult, false);
    Wait(1.0, c_timeGame);
    lv_unit_count[0] = UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    lv_unit_count[1] = UnitGroupCount(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if ((lv_unit_count[0] == 0) && (lv_unit_count[1] == 0)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_D29299D2"));
        return true;
    }
    else if ((lv_unit_count[0] == 0)) {
        lv_winning_count = lv_unit_count[1];
        lv_winning_player = libUTES_gv_side_player[1];
        lv_winning_text = StringExternal("Param/Value/lib_UTES_2D70F97A");
    }
    else if ((lv_unit_count[1] == 0)) {
        lv_winning_count = lv_unit_count[0];
        lv_winning_player = libUTES_gv_side_player[0];
        lv_winning_text = StringExternal("Param/Value/lib_UTES_7A6C95DA");
    }
    auto60D5A5E7_g = UnitGroup(null, lv_winning_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto60D5A5E7_u = UnitGroupCount(auto60D5A5E7_g, c_unitCountAll);
    for (;; auto60D5A5E7_u -= 1) {
        auto60D5A5E7_var = UnitGroupUnitFromEnd(auto60D5A5E7_g, auto60D5A5E7_u);
        if (auto60D5A5E7_var == null) { break; }
        lv_mineral_count += UnitTypeGetCost(UnitGetType(auto60D5A5E7_var), c_unitCostMinerals);
        lv_gas_count += UnitTypeGetCost(UnitGetType(auto60D5A5E7_var), c_unitCostVespene);
    }
    lv_food_count = PlayerGetPropertyInt(lv_winning_player, c_playerPropSuppliesUsed);
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "A", lv_winning_text);
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "B", IntToText(lv_winning_count));
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "C", StringExternal("UI/Icon22_Minerals_Terr"));
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "D", IntToText(lv_mineral_count));
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "E", StringExternal("UI/Icon22_Vespene_Terr"));
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "F", IntToText(lv_gas_count));
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "G", StringExternal("UI/Icon22_Supply_Terr"));
    TextExpressionSetToken("Param/Expression/lib_UTES_25AF8D9F", "H", IntToText(lv_food_count));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_UTES_25AF8D9F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_TesterResult_Init () {
    libUTES_gt_TesterResult = TriggerCreate("libUTES_gt_TesterResult_Func");
    TriggerEnable(libUTES_gt_TesterResult, false);
    TriggerAddEventTimePeriodic(libUTES_gt_TesterResult, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Instant Build
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_InstantBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libUTES_gv_attack_mode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_InstantBuild_Init () {
    libUTES_gt_InstantBuild = TriggerCreate("libUTES_gt_InstantBuild_Func");
    TriggerEnable(libUTES_gt_InstantBuild, false);
    TriggerAddEventUnitArmMagazineProgress(libUTES_gt_InstantBuild, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(libUTES_gt_InstantBuild, null, c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(libUTES_gt_InstantBuild, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(libUTES_gt_InstantBuild, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Structures
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_DisableStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libUTES_gv_attack_mode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnitProgressUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_DisableStructures_Init () {
    libUTES_gt_DisableStructures = TriggerCreate("libUTES_gt_DisableStructures_Func");
    TriggerAddEventUnitConstructProgress(libUTES_gt_DisableStructures, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(libUTES_gt_DisableStructures, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Neutral Structure
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_CreateNeutralStructure_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_GetUnitRace(EventUnitCreatedUnit()) == "Neut"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitCreatedUnit(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_CreateNeutralStructure_Init () {
    libUTES_gt_CreateNeutralStructure = TriggerCreate("libUTES_gt_CreateNeutralStructure_Func");
    TriggerAddEventUnitCreated(libUTES_gt_CreateNeutralStructure, null, "CustomBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl Off
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_CtrlOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUTES_gv_data_player[EventPlayer()].lv_ctrl = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_CtrlOff_Init () {
    libUTES_gt_CtrlOff = TriggerCreate("libUTES_gt_CtrlOff_Func");
    TriggerAddEventKeyPressed(libUTES_gt_CtrlOff, c_playerAny, c_keyControl, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl On
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_CtrlOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUTES_gv_data_player[EventPlayer()].lv_ctrl = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_CtrlOn_Init () {
    libUTES_gt_CtrlOn = TriggerCreate("libUTES_gt_CtrlOn_Func");
    TriggerAddEventKeyPressed(libUTES_gt_CtrlOn, c_playerAny, c_keyControl, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift Off
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_ShiftOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUTES_gv_data_player[EventPlayer()].lv_shift = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_ShiftOff_Init () {
    libUTES_gt_ShiftOff = TriggerCreate("libUTES_gt_ShiftOff_Func");
    TriggerAddEventKeyPressed(libUTES_gt_ShiftOff, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift On
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_ShiftOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libUTES_gv_data_player[EventPlayer()].lv_shift = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_ShiftOn_Init () {
    libUTES_gt_ShiftOn = TriggerCreate("libUTES_gt_ShiftOn_Func");
    TriggerAddEventKeyPressed(libUTES_gt_ShiftOn, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Item Is Used
//--------------------------------------------------------------------------------------------------
bool libUTES_gt_DialogItemIsUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ii;
    int lv_jj;
    int lv_level_ii;
    string lv_unit;
    string lv_commander;

    // Automatic Variable Declarations
    const int autoE3608551_ae = libUTES_gv_const_races;
    const int autoE3608551_ai = 1;
    const int auto96923DF2_ae = libUTES_gv_const_card_length;
    const int auto96923DF2_ai = 1;
    const int autoDC74CF61_ae = libUTES_gv_const_races;
    const int autoDC74CF61_ai = 1;
    const int autoAFC7EFC6_ae = libUTES_gv_const_card_length;
    const int autoAFC7EFC6_ai = 1;
    const int auto2596D842_ae = 8;
    int auto2596D842_var;
    const int autoEA4A2D73_ae = 8;
    int autoEA4A2D73_var;
    const int autoE661890C_ae = libUTES_gv_const_terrains;
    const int autoE661890C_ai = 1;
    const int autoD989ED94_ae = libUTES_gv_const_players;
    const int autoD989ED94_ai = 1;
    const int auto4382E30E_ae = libUTES_gv_tMAXFACTIONS;
    int auto4382E30E_var;
    const int auto69F0821A_ae = 1;
    const int auto69F0821A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libUTES_gv_menu_mode_settings)) {
        if ((libUTES_gv_data_player[EventPlayer()].lv_menu_mode == 1)) {
            libUTES_gv_data_player[EventPlayer()].lv_menu_mode = 0;
        }
        else {
            libUTES_gv_data_player[EventPlayer()].lv_menu_mode = 1;
        }
        libUTES_gf_RenderTesterUIForPlayer(EventPlayer());
        return true;
    }

    if ((EventDialogControl() == libUTES_gv_menu_mode_creator)) {
        if ((libUTES_gv_data_player[EventPlayer()].lv_menu_mode == 2)) {
            libUTES_gv_data_player[EventPlayer()].lv_menu_mode = 0;
        }
        else {
            libUTES_gv_data_player[EventPlayer()].lv_menu_mode = 2;
        }
        libUTES_gf_RenderTesterUIForPlayer(EventPlayer());
        return true;
    }

    if ((libUTES_gv_attack_mode == false)) {
        if ((EventDialogControl() == libUTES_gv_menu_side)) {
            TriggerExecute(libUTES_gt_TesterSideButton, true, false);
            libUTES_gf_RenderTesterUIForPlayer(EventPlayer());
            return true;
        }

        if ((EventDialogControl() == libUTES_gv_menu_creator_mirror)) {
            libUTES_gf_MirrorTesterUnitsByPlayer(EventPlayer());
            return true;
        }

        if ((EventDialogControl() == libUTES_gv_menu_creator_clear)) {
            TriggerExecute(libUTES_gt_TesterClearUnits, true, false);
            return true;
        }

        if ((EventDialogControl() == libUTES_gv_menu_start_attack)) {
            TriggerExecute(libUTES_gt_TesterStartButton, true, false);
            libUTES_gf_RenderTesterUIForAllPlayers();
            return true;
        }

        if ((libUTES_gv_data_player[EventPlayer()].lv_menu_mode == 1)) {
            if ((EventDialogControl() == libUTES_gv_settings_upgradebutton[0])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_601FD090"));
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[0], 0);
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[1], 0);
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == libUTES_gv_settings_upgradebutton[1])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_F044DF2B"));
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[0], 1);
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[1], 1);
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == libUTES_gv_settings_upgradebutton[2])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_689F4412"));
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[0], 2);
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[1], 2);
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == libUTES_gv_settings_upgradebutton[3])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_ABE77259"));
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[0], 3);
                libUTES_gf_SetLevelledUpgradesValue(libUTES_gv_side_player[1], 3);
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == libUTES_gv_settings_researchbutton[0])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_035C840F"));
                lv_ii = 0;
                for ( ; ( (autoE3608551_ai >= 0 && lv_ii <= autoE3608551_ae) || (autoE3608551_ai < 0 && lv_ii >= autoE3608551_ae) ) ; lv_ii += autoE3608551_ai ) {
                    lv_jj = 0;
                    for ( ; ( (auto96923DF2_ai >= 0 && lv_jj <= auto96923DF2_ae) || (auto96923DF2_ai < 0 && lv_jj >= auto96923DF2_ae) ) ; lv_jj += auto96923DF2_ai ) {
                        if ((libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_levels == 0) && (libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0] != null)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(libUTES_gv_side_player[0], libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0], 0);
                            libNtve_gf_SetUpgradeLevelForPlayer(libUTES_gv_side_player[1], libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0], 0);
                        }

                    }
                }
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == libUTES_gv_settings_researchbutton[1])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_1468DB84"));
                lv_ii = 0;
                for ( ; ( (autoDC74CF61_ai >= 0 && lv_ii <= autoDC74CF61_ae) || (autoDC74CF61_ai < 0 && lv_ii >= autoDC74CF61_ae) ) ; lv_ii += autoDC74CF61_ai ) {
                    lv_jj = 0;
                    for ( ; ( (autoAFC7EFC6_ai >= 0 && lv_jj <= autoAFC7EFC6_ae) || (autoAFC7EFC6_ai < 0 && lv_jj >= autoAFC7EFC6_ae) ) ; lv_jj += autoAFC7EFC6_ai ) {
                        if ((libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_levels == 0) && (libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0] != null)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(libUTES_gv_side_player[0], libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0], 1);
                            libNtve_gf_SetUpgradeLevelForPlayer(libUTES_gv_side_player[1], libUTES_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0], 1);
                        }

                    }
                }
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == libUTES_gv_settings_visionbutton[0])) {
                auto2596D842_var = 1;
                for ( ; auto2596D842_var <= auto2596D842_ae; auto2596D842_var += 1 ) {
                    VisRevealerEnable(libUTES_gv_data_player[auto2596D842_var].lv_revealer, false);
                }
                libUTES_gv_vision = false;
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_FFD4A8DD"));
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == libUTES_gv_settings_visionbutton[1])) {
                autoEA4A2D73_var = 1;
                for ( ; autoEA4A2D73_var <= autoEA4A2D73_ae; autoEA4A2D73_var += 1 ) {
                    VisRevealerEnable(libUTES_gv_data_player[autoEA4A2D73_var].lv_revealer, true);
                }
                libUTES_gv_vision = true;
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_UTES_5173F782"));
                libUTES_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            lv_ii = 0;
            for ( ; ( (autoE661890C_ai >= 0 && lv_ii <= autoE661890C_ae) || (autoE661890C_ai < 0 && lv_ii >= autoE661890C_ae) ) ; lv_ii += autoE661890C_ai ) {
                if ((EventDialogControl() == libUTES_gv_settings_terrainbutton[lv_ii])) {
                    libUTES_gv_terrain_index = lv_ii;
                    libUTES_gf_LoadTerrainData(libUTES_gv_data_terrain[lv_ii]);
                    libUTES_gf_RenderTesterUIForAllPlayers();
                    return true;
                }

            }
            lv_ii = 0;
            for ( ; ( (autoD989ED94_ai >= 0 && lv_ii <= autoD989ED94_ae) || (autoD989ED94_ai < 0 && lv_ii >= autoD989ED94_ae) ) ; lv_ii += autoD989ED94_ai ) {
                if ((EventDialogControl() == libUTES_gv_settings_alliancebuttons[lv_ii][0])) {
                    libUTES_gv_data_player[lv_ii].lv_player_access[0] = !(libUTES_gv_data_player[lv_ii].lv_player_access[0]);
                    libUTES_gf_RenderTesterUIForPlayer(EventPlayer());
                    return true;
                }

                if ((EventDialogControl() == libUTES_gv_settings_alliancebuttons[lv_ii][1])) {
                    libUTES_gv_data_player[lv_ii].lv_player_access[1] = !(libUTES_gv_data_player[lv_ii].lv_player_access[1]);
                    libUTES_gf_RenderTesterUIForPlayer(EventPlayer());
                    return true;
                }

                if ((EventDialogControl() == libUTES_gv_settings_alliancebuttons[lv_ii][2])) {
                    libUTES_gv_data_player[lv_ii].lv_creator_access = !(libUTES_gv_data_player[lv_ii].lv_creator_access);
                    libUTES_gf_RenderTesterUIForPlayer(EventPlayer());
                    return true;
                }

            }
        }

        if ((libUTES_gv_data_player[EventPlayer()].lv_menu_mode == 2)) {
            auto4382E30E_var = 0;
            for ( ; auto4382E30E_var <= auto4382E30E_ae; auto4382E30E_var += 1 ) {
                lv_ii = 0;
                for ( ; ( (auto69F0821A_ai >= 0 && lv_ii <= auto69F0821A_ae) || (auto69F0821A_ai < 0 && lv_ii >= auto69F0821A_ae) ) ; lv_ii += auto69F0821A_ai ) {
                    if ((EventDialogControl() == libUTES_gv_creator_racebutton[lv_ii])) {
                        if ((libUTES_gv_data_player[EventPlayer()].lv_creator_race[lv_ii] == auto4382E30E_var)) {
                            if ((libUTES_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] == 0)) {
                                libUTES_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] = 1;
                            }
                            else {
                                libUTES_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] = 0;
                            }
                        }
                        else {
                            libUTES_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] = 0;
                        }
                        libUTES_gv_data_player[EventPlayer()].lv_creator_race[lv_ii] = auto4382E30E_var;
                        libUTES_gf_RenderTesterUIForPlayer(EventPlayer());
                        return true;
                    }

                }
            }
        }

    }

    if ((libUTES_gv_attack_mode == true)) {
        if ((EventDialogControl() == libUTES_gv_menu_attack_reset)) {
            TriggerExecute(libUTES_gt_TesterResetUnits, true, false);
            return true;
        }

        if ((EventDialogControl() == libUTES_gv_menu_attack_pause)) {
            TriggerExecute(libUTES_gt_TesterPauseUnits, true, false);
            return true;
        }

        if ((EventDialogControl() == libUTES_gv_menu_stop_attack)) {
            TriggerExecute(libUTES_gt_TesterStopButton, true, false);
            libUTES_gf_RenderTesterUIForAllPlayers();
            return true;
        }

        if ((EventDialogControl() == libUTES_gv_menu_attack_attack)) {
            TriggerExecute(libUTES_gt_TesterAttackButton, true, false);
            return true;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUTES_gt_DialogItemIsUsed_Init () {
    libUTES_gt_DialogItemIsUsed = TriggerCreate("libUTES_gt_DialogItemIsUsed_Func");
    TriggerAddEventDialogControl(libUTES_gt_DialogItemIsUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void libUTES_InitTriggers () {
    libUTES_gt_InitializeUnitTesterInterface_Init();
    libUTES_gt_TesterStartButton_Init();
    libUTES_gt_TesterStopButton_Init();
    libUTES_gt_TesterAttackButton_Init();
    libUTES_gt_TesterSideButton_Init();
    libUTES_gt_TesterClearUnits_Init();
    libUTES_gt_TesterDeleteUnits_Init();
    libUTES_gt_TesterPauseUnits_Init();
    libUTES_gt_TesterResetUnits_Init();
    libUTES_gt_RaceButtonClicked_Init();
    libUTES_gt_ArrowButtonClicked_Init();
    libUTES_gt_CardButtonCliked_Init();
    libUTES_gt_LeaderboardUnitCreated_Init();
    libUTES_gt_LeaderboardUnitRemoved_Init();
    libUTES_gt_TesterResult_Init();
    libUTES_gt_InstantBuild_Init();
    libUTES_gt_DisableStructures_Init();
    libUTES_gt_CreateNeutralStructure_Init();
    libUTES_gt_CtrlOff_Init();
    libUTES_gt_CtrlOn_Init();
    libUTES_gt_ShiftOff_Init();
    libUTES_gt_ShiftOn_Init();
    libUTES_gt_DialogItemIsUsed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUTES_InitLib_completed = false;

void libUTES_InitLib () {
    if (libUTES_InitLib_completed) {
        return;
    }

    libUTES_InitLib_completed = true;

    libUTES_InitLibraries();
    libUTES_InitVariables();
    libUTES_InitTriggers();
}

