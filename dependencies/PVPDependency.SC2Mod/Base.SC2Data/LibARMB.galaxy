include "TriggerLibs/NativeLib"
include "LibARRA"
include "LibDRAG"
include "LibNHbr"
include "LibUEDC"
include "LibUPLR"
include "LibPEEP_h"

include "LibARMB_h"

//--------------------------------------------------------------------------------------------------
// Library: MONOBATTLE
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libARMB_InitLibraries () {
    libNtve_InitVariables();
    libARRA_InitVariables();
    libNHbr_InitVariables();
    libUEDC_InitVariables();
    libUPLR_InitVariables();
    libPEEP_InitVariables();
}

// Variable Initialization
bool libARMB_InitVariables_completed = false;

void libARMB_InitVariables () {
    int init_i;
    int init_j;

    if (libARMB_InitVariables_completed) {
        return;
    }

    libARMB_InitVariables_completed = true;

    for (init_i = 0; init_i <= 15; init_i += 1) {
        libARMB_gv_raceChoice[init_i] = libARMB_ge_RaceChoice_Observer;
    }
    libARMB_gv_monobattleMode = libARMB_ge_MonobattleMode_None;
    libARMB_gv_monobattlesProfilesBriefDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libARMB_gv_pLAYERS; init_i += 1) {
        libARMB_gv_dIALOG[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libARMB_gv_pLAYERS; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            libARMB_gv_dIALOG_BUTTONS[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libARMB_gv_hidden = UnitGroupEmpty();
    libARMB_gv_cAbilityArmMagazine = CatalogEntryClass(c_gameCatalogAbil, "CarrierHangar");
    libARMB_gv_cAbilityAugment = CatalogEntryClass(c_gameCatalogBehavior, "SpawnLarva");
    libARMB_gv_cAbilityBehavior = CatalogEntryClass(c_gameCatalogAbil, "BansheeCloak");
    libARMB_gv_cAbilityBuild = CatalogEntryClass(c_gameCatalogAbil, "ProtossBuild");
    libARMB_gv_cAbilityEffectInstant = CatalogEntryClass(c_gameCatalogAbil, "Overcharge");
    libARMB_gv_cAbilityEffectTarget = CatalogEntryClass(c_gameCatalogAbil, "BlindingCloud");
    libARMB_gv_cAbilityMorph = CatalogEntryClass(c_gameCatalogAbil, "VoidRaySwarmDamageBoost");
    libARMB_gv_cAbilityRally = CatalogEntryClass(c_gameCatalogAbil, "RallyHatchery");
    libARMB_gv_cAbilityStop = CatalogEntryClass(c_gameCatalogAbil, "stop2");
    libARMB_gv_cAbilityAttack = CatalogEntryClass(c_gameCatalogAbil, "attack");
    libARMB_gv_cAbilityMove = CatalogEntryClass(c_gameCatalogAbil, "move");
    libARMB_gv_cAbilityQueue = CatalogEntryClass(c_gameCatalogAbil, "que5");
    libARMB_gv_cAbilityMerge = CatalogEntryClass(c_gameCatalogAbil, "ArchonWarp");
    libARMB_gv_cAbilityTrain = CatalogEntryClass(c_gameCatalogAbil, "StarportTrain");
    libARMB_gv_cAbilityTransport = CatalogEntryClass(c_gameCatalogAbil, "WarpPrismTransport");
    libARMB_gv_cEffectApplyBehavior = CatalogEntryClass(c_gameCatalogEffect, "CollapsibleRockTowerDiagonalCPMakeInvulnerable");
    libARMB_gv_cEffectCreateHealer = CatalogEntryClass(c_gameCatalogEffect, "BatteryOverchargeCreateHealer");
    libARMB_gv_cEffectCreatePersistent = CatalogEntryClass(c_gameCatalogEffect, "VortexCreatePersistent");
    libARMB_gv_cEffectCreateUnit = CatalogEntryClass(c_gameCatalogEffect, "BroodlingEscortCU");
    libARMB_gv_cEffectDamage = CatalogEntryClass(c_gameCatalogEffect, "VolatileBurstFriendlyBuildingDamage");
    libARMB_gv_cEffectModifyUnit = CatalogEntryClass(c_gameCatalogEffect, "RescueModifyUnit");
    libARMB_gv_cEffectLaunchMissile = CatalogEntryClass(c_gameCatalogEffect, "CorruptionBombLaunchMissile");
    libARMB_gv_cEffectSearchArea = CatalogEntryClass(c_gameCatalogEffect, "CollapsibleRockTowerRampDiagonalConjoinedSearch");
    libARMB_gv_cEffectSet = CatalogEntryClass(c_gameCatalogEffect, "VolatileBurst");
    libARMB_gv_cEffectTeleport = CatalogEntryClass(c_gameCatalogEffect, "AdeptPhaseShiftTeleport");
    libARMB_gv_cEffectIssueOrder = CatalogEntryClass(c_gameCatalogEffect, "PurifyIssueOrder");
    libARMB_gv_cEffectSwitch = CatalogEntryClass(c_gameCatalogEffect, "BattlecruiserDamageSwitch");
    libARMB_gv_cValidatorCombine = CatalogEntryClass(c_gameCatalogValidator, "250mmCannonValidators");
    libARMB_gv_cValidatorPlayerReqirement = CatalogEntryClass(c_gameCatalogValidator, "BattlecruiserUpgraded");
    libARMB_gv_cRequirementAnd = 7;
    libARMB_gv_cRequirementEq = CatalogEntryClass(c_gameCatalogRequirementNode, "EqCountUpgradeZergMissileWeaponsLevel3QueuedOrBetter0");
    libARMB_gv_cRequirementOr = CatalogEntryClass(c_gameCatalogRequirementNode, "OrBehaviorHurricaneMissileCompleteOnlyAtUnitBehaviorYamatoCompleteOnlyAtUnit");
    libARMB_gv_cRequirementGTE = CatalogEntryClass(c_gameCatalogRequirementNode, "GTE3238024024CountBehaviorArmorpiercingModeCompleteOnlyAtUnit1");
    libARMB_gv_cRequirementGT = CatalogEntryClass(c_gameCatalogRequirementNode, "GTCountBehaviorLocustSpawnDummyCompleteOnlyAtUnit0");
    libARMB_gv_cRequirementCountUnit = 24;
    libARMB_gv_cRequirementCountUpgrade = 25;
    libARMB_gv_cBehaviorSpawn = CatalogEntryClass(c_gameCatalogBehavior, "SpawnLarva");
    libARMB_gv_cBehaviorBuff = CatalogEntryClass(c_gameCatalogBehavior, "AdeptPhaseShiftCaster");
    libARMB_gv_startactiveplayers = PlayerGroupActive();
    libARMB_gv_sEARCHMODE = libARMB_ge_SearchMode_Agressive;
    for (init_i = 0; init_i <= libARMB_gv_pLAYERS; init_i += 1) {
        libARMB_gv_cACHE_DISARMED[init_i] = " ";
    }
    for (init_i = 0; init_i <= libARMB_gv_pLAYERS; init_i += 1) {
        libARMB_gv_cACHE_ARMED[init_i] = " ";
    }
    libARMB_gv_cACHE_DANGER_UNITS = " ";
    libARMB_gv_cACHE_DANGER_ABILITIES = " ";
    libARMB_gv_cACHE_DANGER_BEHAVIOR = " ";
    libARMB_gv_cACHE_SAFE_UNITS = " ";
    libARMB_gv_cACHE_SAFE_ABILITIES = " ";
    libARMB_gv_cACHE_SAFE_BEHAVIOR = " ";
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libARMB_gv_enemyDefenseBuildingTickCount[init_i] = 2;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libARMB_gv_maximumdistancefromthebuildingstoppedsurfacetothenearestshoreline[init_i] = 24.0;
    }
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Shared
//--------------------------------------------------------------------------------------------------
playergroup[3] lv_playersRemainingtobePlaced;
playergroup[3] lv_playersonteam;
struct gs_SelectionTimer {
    int lv_timeRemaining;
    int lv_timerDialog;
    int lv_timerText;
};
gs_SelectionTimer gv_selectionTimer;
void gf_Cleanupactorsunitsandstart () ;

//--------------------------------------------------------------------------------------------------
// Custom Script: Radial Menu
//--------------------------------------------------------------------------------------------------
    int init_i1;
struct gs_RadialChat {
    int lv_radialChatDialog;
    int lv_radialChatBackground;
    int[6] lv_radialChatHotspots;
    int[6] lv_radialChatHoverImage;
    int[9] lv_targetedRadialItem;
    bool lv_isUsable;
    int[9] lv_stacks;
};
void gf_UseCharge (int lp_player);
gs_RadialChat gv_radialChat;
trigger gt_OpenRadialMenu;
trigger gt_Hoveroverradialitem;
trigger gt_CloseRadialMenu;
void gf_CreateRadialChat ();
void gf_HideAllHoverEffects (int lp_player);
trigger auto_gf_UseCharge_Trigger = null;
int auto_gf_UseCharge_lp_player;
void gf_CreateRadialChat () {
    // Automatic Variable Declarations
    const int auto77A9CF45_ae = 5;
    int auto77A9CF45_var;
    playergroup auto405C1984_g;
    int auto405C1984_var;
    playergroup auto3FA82FFC_g;
    int auto3FA82FFC_var;
    // Implementation
    DialogCreate( 2500, 2000, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_radialChat.lv_radialChatDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 500, c_anchorCenter, 0, 11, StringToText(""), "Assets\\Monobattle\\radial-menu-bg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_radialChat.lv_radialChatBackground = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 1250, 1000, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    gv_radialChat.lv_radialChatHotspots[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 1250, 1000, c_anchorTopRight, 0, 0, StringToText(""), StringToText(""), "");
    gv_radialChat.lv_radialChatHotspots[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 1250, 1000, c_anchorBottomLeft, 0, 0, StringToText(""), StringToText(""), "");
    gv_radialChat.lv_radialChatHotspots[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 1250, 1000, c_anchorBottomRight, 0, 0, StringToText(""), StringToText(""), "");
    gv_radialChat.lv_radialChatHotspots[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 115, 115, c_anchorCenter, 0, 0, StringToText(""), StringToText(""), "");
    gv_radialChat.lv_radialChatHotspots[5] = DialogControlLastCreated();
    auto77A9CF45_var = 1;
    for ( ; auto77A9CF45_var <= auto77A9CF45_ae; auto77A9CF45_var += 1 ) {
        DialogControlFadeTransparency(gv_radialChat.lv_radialChatHotspots[auto77A9CF45_var], PlayerGroupAll(), 0.0, 100.0);
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 222, 212, c_anchorCenter, -114, -109, StringToText(""), "Assets\\Monobattle\\radial-hover.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_radialChat.lv_radialChatHoverImage[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 213, 223, c_anchorCenter, 115, -108, StringToText(""), "Assets\\Monobattle\\radial-hover.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
    gv_radialChat.lv_radialChatHoverImage[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 236, 218, c_anchorCenter, -115, 120, StringToText(""), "Assets\\Monobattle\\radial-hover.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 270, PlayerGroupAll());
    gv_radialChat.lv_radialChatHoverImage[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 223, 236, c_anchorCenter, 115, 120, StringToText(""), "Assets\\Monobattle\\radial-hover.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_radialChat.lv_radialChatHoverImage[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Monobattle\\radial-close-hover.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_radialChat.lv_radialChatHoverImage[5] = DialogControlLastCreated();
    auto405C1984_g = GameAttributePlayersForTeam(1);
    auto405C1984_var = -1;
    while (true) {
        auto405C1984_var = PlayerGroupNextPlayer(auto405C1984_g, auto405C1984_var);
        if (auto405C1984_var < 0) { break; }
        gf_HideAllHoverEffects(auto405C1984_var);
    }
    auto3FA82FFC_g = GameAttributePlayersForTeam(2);
    auto3FA82FFC_var = -1;
    while (true) {
        auto3FA82FFC_var = PlayerGroupNextPlayer(auto3FA82FFC_g, auto3FA82FFC_var);
        if (auto3FA82FFC_var < 0) { break; }
        gf_HideAllHoverEffects(auto3FA82FFC_var);
    }
}
void gf_HideAllHoverEffects (int lp_player) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto714812EB_ae = 5;
    const int auto714812EB_ai = 1;
    // Variable Initialization
    // Implementation
    lv_enumint = 1;
    for ( ; ( (auto714812EB_ai >= 0 && lv_enumint <= auto714812EB_ae) || (auto714812EB_ai < 0 && lv_enumint >= auto714812EB_ae) ) ; lv_enumint += auto714812EB_ai ) {
        DialogControlSetVisible(gv_radialChat.lv_radialChatHoverImage[lv_enumint], PlayerGroupSingle(lp_player), false);
    }
}
void gf_UseCharge (int lp_player) {
    auto_gf_UseCharge_lp_player = lp_player;
    if (auto_gf_UseCharge_Trigger == null) {
        auto_gf_UseCharge_Trigger = TriggerCreate("auto_gf_UseCharge_TriggerFunc");
    }
    TriggerExecute(auto_gf_UseCharge_Trigger, false, false);
}
bool auto_gf_UseCharge_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_UseCharge_lp_player;
    // Automatic Variable Declarations
    // Implementation
    gv_radialChat.lv_stacks[lp_player] -= 1;
    Wait(10.0, c_timeGame);
    gv_radialChat.lv_stacks[lp_player] += 1;
    return true;
}
//--------------------------------------------------------------------------------------------------
// Trigger: Open Radial Menu
//--------------------------------------------------------------------------------------------------
bool gt_OpenRadialMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_radialChat.lv_isUsable == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogSetVisible(gv_radialChat.lv_radialChatDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_OpenRadialMenu_Init () {
    gt_OpenRadialMenu = TriggerCreate("gt_OpenRadialMenu_Func");
    TriggerAddEventKeyPressed(gt_OpenRadialMenu, c_playerAny, c_keyBackSlash, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Hover over radial item
//--------------------------------------------------------------------------------------------------
bool gt_Hoveroverradialitem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto0B3C71AF_ae = 5;
    const int auto0B3C71AF_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_radialChat.lv_isUsable == true))) {
            return false;
        }
        if (!(((EventDialogControl() == gv_radialChat.lv_radialChatHotspots[1]) || (EventDialogControl() == gv_radialChat.lv_radialChatHotspots[2]) || (EventDialogControl() == gv_radialChat.lv_radialChatHotspots[3]) || (EventDialogControl() == gv_radialChat.lv_radialChatHotspots[4]) || (EventDialogControl() == gv_radialChat.lv_radialChatHotspots[5])))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    gf_HideAllHoverEffects(EventPlayer());
    lv_enumint = 1;
    for ( ; ( (auto0B3C71AF_ai >= 0 && lv_enumint <= auto0B3C71AF_ae) || (auto0B3C71AF_ai < 0 && lv_enumint >= auto0B3C71AF_ae) ) ; lv_enumint += auto0B3C71AF_ai ) {
        if ((EventDialogControl() == gv_radialChat.lv_radialChatHotspots[lv_enumint])) {
            DialogControlSetVisible(gv_radialChat.lv_radialChatHoverImage[lv_enumint], PlayerGroupSingle(EventPlayer()), true);
            gv_radialChat.lv_targetedRadialItem[EventPlayer()] = lv_enumint;
            break;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Hoveroverradialitem_Init () {
    gt_Hoveroverradialitem = TriggerCreate("gt_Hoveroverradialitem_Func");
    TriggerAddEventDialogControl(gt_Hoveroverradialitem, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Close Radial Menu
//--------------------------------------------------------------------------------------------------
bool gt_CloseRadialMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((gv_radialChat.lv_isUsable == true))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogSetVisible(gv_radialChat.lv_radialChatDialog, PlayerGroupSingle(EventPlayer()), false);
    if ((gv_radialChat.lv_stacks[EventPlayer()] > 0)) {
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
            lv_team = 1;
        }
        else {
            lv_team = 2;
        }
        if ((gv_radialChat.lv_targetedRadialItem[EventPlayer()] == 1)) {
            TextExpressionSetToken("Param/Expression/5C1C8487", "B", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
            UIDisplayMessage(GameAttributePlayersForTeam(lv_team), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/5C1C8487"));
            gf_UseCharge(EventPlayer());
        }
        else {
            if ((gv_radialChat.lv_targetedRadialItem[EventPlayer()] == 2)) {
                TextExpressionSetToken("Param/Expression/6B6D8396", "B", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
                UIDisplayMessage(GameAttributePlayersForTeam(lv_team), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/6B6D8396"));
                gf_UseCharge(EventPlayer());
            }
            else {
                if ((gv_radialChat.lv_targetedRadialItem[EventPlayer()] == 3)) {
                    TextExpressionSetToken("Param/Expression/627E071A", "B", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
                    UIDisplayMessage(GameAttributePlayersForTeam(lv_team), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/627E071A"));
                    gf_UseCharge(EventPlayer());
                }
                else {
                    if ((gv_radialChat.lv_targetedRadialItem[EventPlayer()] == 4)) {
                        TextExpressionSetToken("Param/Expression/2871EFCA", "B", TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
                        UIDisplayMessage(GameAttributePlayersForTeam(lv_team), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/2871EFCA"));
                        gf_UseCharge(EventPlayer());
                    }
                }
            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/072E325D"));
    }
    gv_radialChat.lv_targetedRadialItem[EventPlayer()] = 0;
    gf_HideAllHoverEffects(EventPlayer());
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_CloseRadialMenu_Init () {
    gt_CloseRadialMenu = TriggerCreate("gt_CloseRadialMenu_Func");
    TriggerAddEventKeyPressed(gt_CloseRadialMenu, c_playerAny, c_keyBackSlash, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}
//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void RadialMenuInit () {
	
    const int auto40801A4F_ae = 8;
    int auto40801A4F_var;
	
    gv_radialChat.lv_radialChatDialog = c_invalidDialogId;
    gv_radialChat.lv_radialChatBackground = c_invalidDialogControlId;
    gv_radialChat.lv_isUsable = true;
	
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_radialChat.lv_radialChatHotspots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_radialChat.lv_radialChatHoverImage[init_i1] = c_invalidDialogControlId;
    }
    auto40801A4F_var = 1;
    for ( ; auto40801A4F_var <= auto40801A4F_ae; auto40801A4F_var += 1 ) {
        gv_radialChat.lv_stacks[auto40801A4F_var] = 3;
    }
	
	
    gt_OpenRadialMenu_Init();
    gt_Hoveroverradialitem_Init();
    gt_CloseRadialMenu_Init();
    gf_CreateRadialChat();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Slection Arena
//--------------------------------------------------------------------------------------------------
struct gs_Stufftoclean {
    unitgroup lv_basebridge;
    unitgroup lv_arenaactors;
    actor[11] lv_cavelights;
    int lv_cavelightint;
    revealer[9] lv_revealer;
    unit[21] lv_levelOutUnits;
};
struct gs_SelectionArena {
    fixed lv_zoffset;
    unit[9] lv_platformunits;
    point[5] lv_spotPoints;
    int[9] lv_playerspotpointassignment;
    int[9] lv_playerNameTags;
    unit[9] lv_readybeacons;
    bool[9] lv_playerisreadytostart;
    actor[9] lv_platforms;
    int[9] lv_yOUtexttag;
};
gs_Stufftoclean gv_stufftoclean;
gs_SelectionArena gv_selectionArena;
void gf_SingleDraftUpdatetexttags ();
void gf_WarpOutAnimation ();
void gf_CleanArena ();
void gf_CreateSelectionArena (point lp_spawnPoint);
void gf_ApplyCameraZoominonUnits (int lp_player);
void gf_Createfloorpanel (point lp_spawnPoint);
void gf_Createbottomwall (point lp_spawnPoint, int lp_direction);
void gf_Createfloorlines (point lp_spawnPoint);
void gf_Createtubewall (point lp_spawnPoint, int lp_direction);
void gf_Createbigwall (point lp_spawnPoint, int lp_direction);
void gf_Createcavelights (point lp_spawnPoint, int lp_variation);
void gf_Createredlighting (point lp_spawnPoint);
void gf_Createpinlights (point lp_spawnPoint, int lp_variation);
void gf_Createplatform (point lp_location, fixed lp_height);
void gf_Createbeacon (point lp_location, fixed lp_height);
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show);
void gf_DestroyActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_immediate);
void gf_ShowHideActorForPlayerGroup2 (playergroup lp_players, actor lp_actor, bool lp_show);
void gf_DestroyActorForPlayerGroup2 (playergroup lp_players, actor lp_actor, bool lp_immediate);
void createPreviewUnit( int  lp_player){
    
    if ((UnitIsAlive(gv_selectionArena.lv_platformunits[lp_player]) == true)){// && (gv_singleDraft.lv_unitActuallyAssigned[lp_player] == 0)) {
        UnitRemove(gv_selectionArena.lv_platformunits[lp_player]);
    }
  //  if ((gv_singleDraft.lv_issingledrafthappening == true) && (gv_singleDraft.lv_buttonCurrentlySelected[lp_player] != 0) && (gv_singleDraft.lv_unitActuallyAssigned[lp_player] == 0)) {
    
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, libARMB_gv_unitData.lv_unitType[libARMB_gv_unitData.lv_playerUnitLink[lp_player]], c_unitCreateIgnorePlacement, lp_player, gv_selectionArena.lv_spotPoints[gv_selectionArena.lv_playerspotpointassignment[lp_player]], 270.0);
    if ((UnitGetType(UnitLastCreated()) == "BroodLord")) {
        UnitAbilityRemove(UnitLastCreated(), "BroodLordHangar");
        UnitAbilityRemove(UnitLastCreated(), "BroodLordQueue2");
    }
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    if ((PlayerGroupHasPlayer(lv_playersonteam[1], lp_player) == true)) {
        gf_ShowHideActorForPlayerGroup2(GameAttributePlayersForTeam(2), libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    }
    else {
        gf_ShowHideActorForPlayerGroup2(GameAttributePlayersForTeam(1), libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    }
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateMoveSuppressed, false);
    if ((UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropHeight) > 0.0) && (UnitGetType(UnitLastCreated()) != "Reaper") && (UnitGetType(UnitLastCreated()) != "Inciter")) {
        UnitSetHeight(UnitLastCreated(), 53.0, 0.0);
    }
    gv_selectionArena.lv_platformunits[lp_player] = UnitLastCreated();
    gf_SingleDraftUpdatetexttags();
}
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();
    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}
void gf_DestroyActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_immediate) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();
    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_immediate == true)) {
        ActorSend(lv_agent, "Signal Destroy_Immediate");
    }
    else {
        ActorSend(lv_agent, "Signal Destroy_Normal");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}
void gf_ShowHideActorForPlayerGroup2 (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();
    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}
void gf_DestroyActorForPlayerGroup2 (playergroup lp_players, actor lp_actor, bool lp_immediate) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();
    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_immediate == true)) {
        ActorSend(lv_agent, "Signal Destroy_Immediate");
    }
    else {
        ActorSend(lv_agent, "Signal Destroy_Normal");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}
trigger auto_gf_Hideallresourcesonmap_Trigger = null;
void gf_Hideallresourcesonmap () {
    if (auto_gf_Hideallresourcesonmap_Trigger == null) {
        auto_gf_Hideallresourcesonmap_Trigger = TriggerCreate("auto_gf_Hideallresourcesonmap_TriggerFunc");
    }
    TriggerExecute(auto_gf_Hideallresourcesonmap_Trigger, false, false);
}
bool auto_gf_Hideallresourcesonmap_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;
    // Automatic Variable Declarations
    unitgroup autoC59FD595_g;
    int autoC59FD595_u;
    unit autoC59FD595_var;
    unitgroup auto78F435D4_g;
    int auto78F435D4_u;
    unit auto78F435D4_var;
    unitgroup auto8CE967DC_g;
    int auto8CE967DC_u;
    unit auto8CE967DC_var;
    unitgroup auto8D7C1560_g;
    int auto8D7C1560_u;
    unit auto8D7C1560_var;
    unitgroup autoF529A8EB_g;
    int autoF529A8EB_u;
    unit autoF529A8EB_var;
    unitgroup auto8962F0F5_g;
    int auto8962F0F5_u;
    unit auto8962F0F5_var;
    unitgroup auto0F1E6D47_g;
    int auto0F1E6D47_u;
    unit auto0F1E6D47_var;
    unitgroup auto0CAF5FE0_g;
    int auto0CAF5FE0_u;
    unit auto0CAF5FE0_var;
    unitgroup autoC7043BBE_g;
    int autoC7043BBE_u;
    unit autoC7043BBE_var;
    unitgroup auto98DECB42_g;
    int auto98DECB42_u;
    unit auto98DECB42_var;
    unitgroup autoE105F8AE_g;
    int autoE105F8AE_u;
    unit autoE105F8AE_var;
    unitgroup autoEC2B18C2_g;
    int autoEC2B18C2_u;
    unit autoEC2B18C2_var;
    unitgroup autoAFEFA731_g;
    int autoAFEFA731_u;
    unit autoAFEFA731_var;
    unitgroup auto8253A9A9_g;
    int auto8253A9A9_u;
    unit auto8253A9A9_var;
    unitgroup auto18C91E16_g;
    int auto18C91E16_u;
    unit auto18C91E16_var;
    unitgroup autoBA275F23_g;
    int autoBA275F23_u;
    unit autoBA275F23_var;
    unitgroup auto0CCA248E_g;
    int auto0CCA248E_u;
    unit auto0CCA248E_var;
    unitgroup auto2A161F44_g;
    int auto2A161F44_u;
    unit auto2A161F44_var;
    // Variable Initialization
    lv_units = UnitGroupEmpty();
    // Implementation
    autoC59FD595_g = UnitGroup("LabMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC59FD595_u = UnitGroupCount(autoC59FD595_g, c_unitCountAll);
    for (;; autoC59FD595_u -= 1) {
        autoC59FD595_var = UnitGroupUnitFromEnd(autoC59FD595_g, autoC59FD595_u);
        if (autoC59FD595_var == null) { break; }
        UnitGroupAdd(lv_units, autoC59FD595_var);
    }
    auto78F435D4_g = UnitGroup("LabMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78F435D4_u = UnitGroupCount(auto78F435D4_g, c_unitCountAll);
    for (;; auto78F435D4_u -= 1) {
        auto78F435D4_var = UnitGroupUnitFromEnd(auto78F435D4_g, auto78F435D4_u);
        if (auto78F435D4_var == null) { break; }
        UnitGroupAdd(lv_units, auto78F435D4_var);
    }
    auto8CE967DC_g = UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8CE967DC_u = UnitGroupCount(auto8CE967DC_g, c_unitCountAll);
    for (;; auto8CE967DC_u -= 1) {
        auto8CE967DC_var = UnitGroupUnitFromEnd(auto8CE967DC_g, auto8CE967DC_u);
        if (auto8CE967DC_var == null) { break; }
        UnitGroupAdd(lv_units, auto8CE967DC_var);
    }
    auto8D7C1560_g = UnitGroup("MineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8D7C1560_u = UnitGroupCount(auto8D7C1560_g, c_unitCountAll);
    for (;; auto8D7C1560_u -= 1) {
        auto8D7C1560_var = UnitGroupUnitFromEnd(auto8D7C1560_g, auto8D7C1560_u);
        if (auto8D7C1560_var == null) { break; }
        UnitGroupAdd(lv_units, auto8D7C1560_var);
    }
    autoF529A8EB_g = UnitGroup("PurifierMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF529A8EB_u = UnitGroupCount(autoF529A8EB_g, c_unitCountAll);
    for (;; autoF529A8EB_u -= 1) {
        autoF529A8EB_var = UnitGroupUnitFromEnd(autoF529A8EB_g, autoF529A8EB_u);
        if (autoF529A8EB_var == null) { break; }
        UnitGroupAdd(lv_units, autoF529A8EB_var);
    }
    auto8962F0F5_g = UnitGroup("PurifierMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8962F0F5_u = UnitGroupCount(auto8962F0F5_g, c_unitCountAll);
    for (;; auto8962F0F5_u -= 1) {
        auto8962F0F5_var = UnitGroupUnitFromEnd(auto8962F0F5_g, auto8962F0F5_u);
        if (auto8962F0F5_var == null) { break; }
        UnitGroupAdd(lv_units, auto8962F0F5_var);
    }
    auto0F1E6D47_g = UnitGroup("PurifierRichMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0F1E6D47_u = UnitGroupCount(auto0F1E6D47_g, c_unitCountAll);
    for (;; auto0F1E6D47_u -= 1) {
        auto0F1E6D47_var = UnitGroupUnitFromEnd(auto0F1E6D47_g, auto0F1E6D47_u);
        if (auto0F1E6D47_var == null) { break; }
        UnitGroupAdd(lv_units, auto0F1E6D47_var);
    }
    auto0CAF5FE0_g = UnitGroup("PurifierRichMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CAF5FE0_u = UnitGroupCount(auto0CAF5FE0_g, c_unitCountAll);
    for (;; auto0CAF5FE0_u -= 1) {
        auto0CAF5FE0_var = UnitGroupUnitFromEnd(auto0CAF5FE0_g, auto0CAF5FE0_u);
        if (auto0CAF5FE0_var == null) { break; }
        UnitGroupAdd(lv_units, auto0CAF5FE0_var);
    }
    autoC7043BBE_g = UnitGroup("RichMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC7043BBE_u = UnitGroupCount(autoC7043BBE_g, c_unitCountAll);
    for (;; autoC7043BBE_u -= 1) {
        autoC7043BBE_var = UnitGroupUnitFromEnd(autoC7043BBE_g, autoC7043BBE_u);
        if (autoC7043BBE_var == null) { break; }
        UnitGroupAdd(lv_units, autoC7043BBE_var);
    }
    auto98DECB42_g = UnitGroup("RichMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto98DECB42_u = UnitGroupCount(auto98DECB42_g, c_unitCountAll);
    for (;; auto98DECB42_u -= 1) {
        auto98DECB42_var = UnitGroupUnitFromEnd(auto98DECB42_g, auto98DECB42_u);
        if (auto98DECB42_var == null) { break; }
        UnitGroupAdd(lv_units, auto98DECB42_var);
    }
    autoE105F8AE_g = UnitGroup("RichVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE105F8AE_u = UnitGroupCount(autoE105F8AE_g, c_unitCountAll);
    for (;; autoE105F8AE_u -= 1) {
        autoE105F8AE_var = UnitGroupUnitFromEnd(autoE105F8AE_g, autoE105F8AE_u);
        if (autoE105F8AE_var == null) { break; }
        UnitGroupAdd(lv_units, autoE105F8AE_var);
    }
    autoEC2B18C2_g = UnitGroup("VespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEC2B18C2_u = UnitGroupCount(autoEC2B18C2_g, c_unitCountAll);
    for (;; autoEC2B18C2_u -= 1) {
        autoEC2B18C2_var = UnitGroupUnitFromEnd(autoEC2B18C2_g, autoEC2B18C2_u);
        if (autoEC2B18C2_var == null) { break; }
        UnitGroupAdd(lv_units, autoEC2B18C2_var);
    }
    autoAFEFA731_g = UnitGroup("ProtossVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAFEFA731_u = UnitGroupCount(autoAFEFA731_g, c_unitCountAll);
    for (;; autoAFEFA731_u -= 1) {
        autoAFEFA731_var = UnitGroupUnitFromEnd(autoAFEFA731_g, autoAFEFA731_u);
        if (autoAFEFA731_var == null) { break; }
        UnitGroupAdd(lv_units, autoAFEFA731_var);
    }
    auto8253A9A9_g = UnitGroup("PurifierVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8253A9A9_u = UnitGroupCount(auto8253A9A9_g, c_unitCountAll);
    for (;; auto8253A9A9_u -= 1) {
        auto8253A9A9_var = UnitGroupUnitFromEnd(auto8253A9A9_g, auto8253A9A9_u);
        if (auto8253A9A9_var == null) { break; }
        UnitGroupAdd(lv_units, auto8253A9A9_var);
    }
    auto18C91E16_g = UnitGroup("ShakurasVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto18C91E16_u = UnitGroupCount(auto18C91E16_g, c_unitCountAll);
    for (;; auto18C91E16_u -= 1) {
        auto18C91E16_var = UnitGroupUnitFromEnd(auto18C91E16_g, auto18C91E16_u);
        if (auto18C91E16_var == null) { break; }
        UnitGroupAdd(lv_units, auto18C91E16_var);
    }
    autoBA275F23_g = UnitGroup("SpacePlatformGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA275F23_u = UnitGroupCount(autoBA275F23_g, c_unitCountAll);
    for (;; autoBA275F23_u -= 1) {
        autoBA275F23_var = UnitGroupUnitFromEnd(autoBA275F23_g, autoBA275F23_u);
        if (autoBA275F23_var == null) { break; }
        UnitGroupAdd(lv_units, autoBA275F23_var);
    }
    auto0CCA248E_g = UnitGroup("XelNagaTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0CCA248E_u = UnitGroupCount(auto0CCA248E_g, c_unitCountAll);
    for (;; auto0CCA248E_u -= 1) {
        auto0CCA248E_var = UnitGroupUnitFromEnd(auto0CCA248E_g, auto0CCA248E_u);
        if (auto0CCA248E_var == null) { break; }
        UnitGroupAdd(lv_units, auto0CCA248E_var);
    }
    auto2A161F44_g = lv_units;
    auto2A161F44_u = UnitGroupCount(auto2A161F44_g, c_unitCountAll);
    for (;; auto2A161F44_u -= 1) {
        auto2A161F44_var = UnitGroupUnitFromEnd(auto2A161F44_g, auto2A161F44_u);
        if (auto2A161F44_var == null) { break; }
        gf_ShowHideActorForPlayerGroup2(PlayerGroupAll(), libNtve_gf_MainActorofUnit(auto2A161F44_var), false);
    }
    return true;
}
trigger auto_gf_Showallresourcesonmap_Trigger = null;
void gf_Showallresourcesonmap () {
    if (auto_gf_Showallresourcesonmap_Trigger == null) {
        auto_gf_Showallresourcesonmap_Trigger = TriggerCreate("auto_gf_Showallresourcesonmap_TriggerFunc");
    }
    TriggerExecute(auto_gf_Showallresourcesonmap_Trigger, false, false);
}
bool auto_gf_Showallresourcesonmap_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;
    // Automatic Variable Declarations
    unitgroup auto1830AB0D_g;
    int auto1830AB0D_u;
    unit auto1830AB0D_var;
    unitgroup autoDD6BD847_g;
    int autoDD6BD847_u;
    unit autoDD6BD847_var;
    unitgroup autoB71EFDB1_g;
    int autoB71EFDB1_u;
    unit autoB71EFDB1_var;
    unitgroup auto793AB140_g;
    int auto793AB140_u;
    unit auto793AB140_var;
    unitgroup autoE19A595E_g;
    int autoE19A595E_u;
    unit autoE19A595E_var;
    unitgroup auto9B4766EF_g;
    int auto9B4766EF_u;
    unit auto9B4766EF_var;
    unitgroup autoD6640254_g;
    int autoD6640254_u;
    unit autoD6640254_var;
    unitgroup auto0BF82057_g;
    int auto0BF82057_u;
    unit auto0BF82057_var;
    unitgroup auto9DDE0823_g;
    int auto9DDE0823_u;
    unit auto9DDE0823_var;
    unitgroup auto74EBC06B_g;
    int auto74EBC06B_u;
    unit auto74EBC06B_var;
    unitgroup auto79D7BBD7_g;
    int auto79D7BBD7_u;
    unit auto79D7BBD7_var;
    unitgroup auto44D60A89_g;
    int auto44D60A89_u;
    unit auto44D60A89_var;
    unitgroup auto22136428_g;
    int auto22136428_u;
    unit auto22136428_var;
    unitgroup auto23841B14_g;
    int auto23841B14_u;
    unit auto23841B14_var;
    unitgroup auto6B4956D0_g;
    int auto6B4956D0_u;
    unit auto6B4956D0_var;
    unitgroup autoFAC4DA21_g;
    int autoFAC4DA21_u;
    unit autoFAC4DA21_var;
    unitgroup autoEAAEFCE5_g;
    int autoEAAEFCE5_u;
    unit autoEAAEFCE5_var;
    unitgroup auto81C04241_g;
    int auto81C04241_u;
    unit auto81C04241_var;
    // Variable Initialization
    lv_units = UnitGroupEmpty();
    // Implementation
    auto1830AB0D_g = UnitGroup("LabMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1830AB0D_u = UnitGroupCount(auto1830AB0D_g, c_unitCountAll);
    for (;; auto1830AB0D_u -= 1) {
        auto1830AB0D_var = UnitGroupUnitFromEnd(auto1830AB0D_g, auto1830AB0D_u);
        if (auto1830AB0D_var == null) { break; }
        UnitGroupAdd(lv_units, auto1830AB0D_var);
    }
    autoDD6BD847_g = UnitGroup("LabMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDD6BD847_u = UnitGroupCount(autoDD6BD847_g, c_unitCountAll);
    for (;; autoDD6BD847_u -= 1) {
        autoDD6BD847_var = UnitGroupUnitFromEnd(autoDD6BD847_g, autoDD6BD847_u);
        if (autoDD6BD847_var == null) { break; }
        UnitGroupAdd(lv_units, autoDD6BD847_var);
    }
    autoB71EFDB1_g = UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB71EFDB1_u = UnitGroupCount(autoB71EFDB1_g, c_unitCountAll);
    for (;; autoB71EFDB1_u -= 1) {
        autoB71EFDB1_var = UnitGroupUnitFromEnd(autoB71EFDB1_g, autoB71EFDB1_u);
        if (autoB71EFDB1_var == null) { break; }
        UnitGroupAdd(lv_units, autoB71EFDB1_var);
    }
    auto793AB140_g = UnitGroup("MineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto793AB140_u = UnitGroupCount(auto793AB140_g, c_unitCountAll);
    for (;; auto793AB140_u -= 1) {
        auto793AB140_var = UnitGroupUnitFromEnd(auto793AB140_g, auto793AB140_u);
        if (auto793AB140_var == null) { break; }
        UnitGroupAdd(lv_units, auto793AB140_var);
    }
    autoE19A595E_g = UnitGroup("PurifierMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE19A595E_u = UnitGroupCount(autoE19A595E_g, c_unitCountAll);
    for (;; autoE19A595E_u -= 1) {
        autoE19A595E_var = UnitGroupUnitFromEnd(autoE19A595E_g, autoE19A595E_u);
        if (autoE19A595E_var == null) { break; }
        UnitGroupAdd(lv_units, autoE19A595E_var);
    }
    auto9B4766EF_g = UnitGroup("PurifierMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9B4766EF_u = UnitGroupCount(auto9B4766EF_g, c_unitCountAll);
    for (;; auto9B4766EF_u -= 1) {
        auto9B4766EF_var = UnitGroupUnitFromEnd(auto9B4766EF_g, auto9B4766EF_u);
        if (auto9B4766EF_var == null) { break; }
        UnitGroupAdd(lv_units, auto9B4766EF_var);
    }
    autoD6640254_g = UnitGroup("PurifierRichMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD6640254_u = UnitGroupCount(autoD6640254_g, c_unitCountAll);
    for (;; autoD6640254_u -= 1) {
        autoD6640254_var = UnitGroupUnitFromEnd(autoD6640254_g, autoD6640254_u);
        if (autoD6640254_var == null) { break; }
        UnitGroupAdd(lv_units, autoD6640254_var);
    }
    auto0BF82057_g = UnitGroup("PurifierRichMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0BF82057_u = UnitGroupCount(auto0BF82057_g, c_unitCountAll);
    for (;; auto0BF82057_u -= 1) {
        auto0BF82057_var = UnitGroupUnitFromEnd(auto0BF82057_g, auto0BF82057_u);
        if (auto0BF82057_var == null) { break; }
        UnitGroupAdd(lv_units, auto0BF82057_var);
    }
    auto9DDE0823_g = UnitGroup("RichMineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DDE0823_u = UnitGroupCount(auto9DDE0823_g, c_unitCountAll);
    for (;; auto9DDE0823_u -= 1) {
        auto9DDE0823_var = UnitGroupUnitFromEnd(auto9DDE0823_g, auto9DDE0823_u);
        if (auto9DDE0823_var == null) { break; }
        UnitGroupAdd(lv_units, auto9DDE0823_var);
    }
    auto74EBC06B_g = UnitGroup("RichMineralField750", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto74EBC06B_u = UnitGroupCount(auto74EBC06B_g, c_unitCountAll);
    for (;; auto74EBC06B_u -= 1) {
        auto74EBC06B_var = UnitGroupUnitFromEnd(auto74EBC06B_g, auto74EBC06B_u);
        if (auto74EBC06B_var == null) { break; }
        UnitGroupAdd(lv_units, auto74EBC06B_var);
    }
    auto79D7BBD7_g = UnitGroup("RichVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto79D7BBD7_u = UnitGroupCount(auto79D7BBD7_g, c_unitCountAll);
    for (;; auto79D7BBD7_u -= 1) {
        auto79D7BBD7_var = UnitGroupUnitFromEnd(auto79D7BBD7_g, auto79D7BBD7_u);
        if (auto79D7BBD7_var == null) { break; }
        UnitGroupAdd(lv_units, auto79D7BBD7_var);
    }
    auto44D60A89_g = UnitGroup("VespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto44D60A89_u = UnitGroupCount(auto44D60A89_g, c_unitCountAll);
    for (;; auto44D60A89_u -= 1) {
        auto44D60A89_var = UnitGroupUnitFromEnd(auto44D60A89_g, auto44D60A89_u);
        if (auto44D60A89_var == null) { break; }
        UnitGroupAdd(lv_units, auto44D60A89_var);
    }
    auto22136428_g = UnitGroup("ProtossVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto22136428_u = UnitGroupCount(auto22136428_g, c_unitCountAll);
    for (;; auto22136428_u -= 1) {
        auto22136428_var = UnitGroupUnitFromEnd(auto22136428_g, auto22136428_u);
        if (auto22136428_var == null) { break; }
        UnitGroupAdd(lv_units, auto22136428_var);
    }
    auto23841B14_g = UnitGroup("PurifierVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto23841B14_u = UnitGroupCount(auto23841B14_g, c_unitCountAll);
    for (;; auto23841B14_u -= 1) {
        auto23841B14_var = UnitGroupUnitFromEnd(auto23841B14_g, auto23841B14_u);
        if (auto23841B14_var == null) { break; }
        UnitGroupAdd(lv_units, auto23841B14_var);
    }
    auto6B4956D0_g = UnitGroup("ShakurasVespeneGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B4956D0_u = UnitGroupCount(auto6B4956D0_g, c_unitCountAll);
    for (;; auto6B4956D0_u -= 1) {
        auto6B4956D0_var = UnitGroupUnitFromEnd(auto6B4956D0_g, auto6B4956D0_u);
        if (auto6B4956D0_var == null) { break; }
        UnitGroupAdd(lv_units, auto6B4956D0_var);
    }
    autoFAC4DA21_g = UnitGroup("SpacePlatformGeyser", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFAC4DA21_u = UnitGroupCount(autoFAC4DA21_g, c_unitCountAll);
    for (;; autoFAC4DA21_u -= 1) {
        autoFAC4DA21_var = UnitGroupUnitFromEnd(autoFAC4DA21_g, autoFAC4DA21_u);
        if (autoFAC4DA21_var == null) { break; }
        UnitGroupAdd(lv_units, autoFAC4DA21_var);
    }
    autoEAAEFCE5_g = UnitGroup("XelNagaTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEAAEFCE5_u = UnitGroupCount(autoEAAEFCE5_g, c_unitCountAll);
    for (;; autoEAAEFCE5_u -= 1) {
        autoEAAEFCE5_var = UnitGroupUnitFromEnd(autoEAAEFCE5_g, autoEAAEFCE5_u);
        if (autoEAAEFCE5_var == null) { break; }
        UnitGroupAdd(lv_units, autoEAAEFCE5_var);
    }
    auto81C04241_g = lv_units;
    auto81C04241_u = UnitGroupCount(auto81C04241_g, c_unitCountAll);
    for (;; auto81C04241_u -= 1) {
        auto81C04241_var = UnitGroupUnitFromEnd(auto81C04241_g, auto81C04241_u);
        if (auto81C04241_var == null) { break; }
        gf_ShowHideActorForPlayerGroup2(PlayerGroupAll(), libNtve_gf_MainActorofUnit(auto81C04241_var), true);
    }
    return true;
}
void gf_WarpOutAnimation () {
    // Automatic Variable Declarations
    const int auto30DC928B_ae = 8;
    int auto30DC928B_var;
    const int auto9DE7EDB1_ae = 8;
    int auto9DE7EDB1_var;
    const int auto1E7EED6A_ae = 8;
    int auto1E7EED6A_var;
    const int auto224AE675_ae = 8;
    int auto224AE675_var;
    // Implementation
    auto30DC928B_var = 1;
    for ( ; auto30DC928B_var <= auto30DC928B_ae; auto30DC928B_var += 1 ) {
        if ((gv_selectionArena.lv_platforms[auto30DC928B_var] != null)) {
            ActorSend(gv_selectionArena.lv_platforms[auto30DC928B_var], "AnimPlay Stand Work");
        }
    }
    auto9DE7EDB1_var = 1;
    for ( ; auto9DE7EDB1_var <= auto9DE7EDB1_ae; auto9DE7EDB1_var += 1 ) {
        if ((UnitIsAlive(gv_selectionArena.lv_platformunits[auto9DE7EDB1_var]) == true)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_selectionArena.lv_platformunits[auto9DE7EDB1_var]), libNtve_gf_SetTintColor(Color(100.00, 64.71, 47.45), 8.0, 1.0));
        }
    }
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("Doodad_ProtossWarpInPad_WarpIn", -1), c_maxPlayers, PlayerGroupAll(), 150.0, 0.0);
    auto1E7EED6A_var = 1;
    for ( ; auto1E7EED6A_var <= auto1E7EED6A_ae; auto1E7EED6A_var += 1 ) {
        if ((UnitIsAlive(gv_selectionArena.lv_platformunits[auto1E7EED6A_var]) == true)) {
            ActorSend(libNtve_gf_MainActorofUnit(gv_selectionArena.lv_platformunits[auto1E7EED6A_var]), libNtve_gf_SetOpacity(0.0, 1.0));
        }
    }
    Wait(2.0, c_timeGame);
    auto224AE675_var = 1;
    for ( ; auto224AE675_var <= auto224AE675_ae; auto224AE675_var += 1 ) {
        if ((gv_selectionArena.lv_platforms[auto224AE675_var] != null)) {
            ActorSend(gv_selectionArena.lv_platforms[auto224AE675_var], "AnimPlay Stand");
        }
    }
    Wait(1.0, c_timeGame);
}
void gf_CleanArena () {
    // Automatic Variable Declarations
    const int autoA0D9A064_ae = 16;
    int autoA0D9A064_var;
    unitgroup auto1B69C41A_g;
    int auto1B69C41A_u;
    unit auto1B69C41A_var;
    unitgroup autoEFB9A4DE_g;
    int autoEFB9A4DE_u;
    unit autoEFB9A4DE_var;
    unitgroup auto000D679A_g;
    int auto000D679A_u;
    unit auto000D679A_var;
    const int autoCC5B5AB9_ae = 8;
    int autoCC5B5AB9_var;
    playergroup autoC94AAFF0_g;
    int autoC94AAFF0_var;
    unitgroup autoEAD6D52F_g;
    int autoEAD6D52F_u;
    unit autoEAD6D52F_var;
    unitgroup autoD154BFAD_g;
    int autoD154BFAD_u;
    unit autoD154BFAD_var;
    const int auto771E58D2_ae = 8;
    int auto771E58D2_var;
    const int auto597E1B32_ae = 8;
    int auto597E1B32_var;
    const int autoD44186E8_ae = 8;
    int autoD44186E8_var;
    const int auto9E8BA4C5_ae = 10;
    int auto9E8BA4C5_var;
    playergroup auto9A77EF59_g;
    int auto9A77EF59_var;
    playergroup auto86BFC939_g;
    int auto86BFC939_var;
    unitgroup auto5D8F1D2B_g;
    int auto5D8F1D2B_u;
    unit auto5D8F1D2B_var;
    playergroup auto66D5688B_g;
    int auto66D5688B_var;
    const int auto40801A4F_ae = 8;
    int auto40801A4F_var;
    // Implementation
    autoA0D9A064_var = 1;
    for ( ; autoA0D9A064_var <= autoA0D9A064_ae; autoA0D9A064_var += 1 ) {
        UnitRemove(gv_stufftoclean.lv_levelOutUnits[autoA0D9A064_var]);
    }
    auto1B69C41A_g = UnitGroup("XelNaga_Caverns_Floating_BridgeNW12Out", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B69C41A_u = UnitGroupCount(auto1B69C41A_g, c_unitCountAll);
    for (;; auto1B69C41A_u -= 1) {
        auto1B69C41A_var = UnitGroupUnitFromEnd(auto1B69C41A_g, auto1B69C41A_u);
        if (auto1B69C41A_var == null) { break; }
        UnitRemove(auto1B69C41A_var);
    }
    autoEFB9A4DE_g = UnitGroup("XelNaga_Caverns_Floating_BridgeV12Out", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEFB9A4DE_u = UnitGroupCount(autoEFB9A4DE_g, c_unitCountAll);
    for (;; autoEFB9A4DE_u -= 1) {
        autoEFB9A4DE_var = UnitGroupUnitFromEnd(autoEFB9A4DE_g, autoEFB9A4DE_u);
        if (autoEFB9A4DE_var == null) { break; }
        UnitRemove(autoEFB9A4DE_var);
    }
    auto000D679A_g = UnitGroup("LevelPlaneInto", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto000D679A_u = UnitGroupCount(auto000D679A_g, c_unitCountAll);
    for (;; auto000D679A_u -= 1) {
        auto000D679A_var = UnitGroupUnitFromEnd(auto000D679A_g, auto000D679A_u);
        if (auto000D679A_var == null) { break; }
        UnitRemove(auto000D679A_var);
    }
    autoCC5B5AB9_var = 0;
    for ( ; autoCC5B5AB9_var <= autoCC5B5AB9_ae; autoCC5B5AB9_var += 1 ) {
        if ((gv_stufftoclean.lv_revealer[autoCC5B5AB9_var] != null)) {
            VisRevealerDestroy(gv_stufftoclean.lv_revealer[autoCC5B5AB9_var]);
        }
    }
    autoC94AAFF0_g = PlayerGroupActive();
    autoC94AAFF0_var = -1;
    while (true) {
        autoC94AAFF0_var = PlayerGroupNextPlayer(autoC94AAFF0_g, autoC94AAFF0_var);
        if (autoC94AAFF0_var < 0) { break; }
        libARMB_gf_AssignUnitAndRace(autoC94AAFF0_var);
    }
    autoEAD6D52F_g = gv_stufftoclean.lv_basebridge;
    autoEAD6D52F_u = UnitGroupCount(autoEAD6D52F_g, c_unitCountAll);
    for (;; autoEAD6D52F_u -= 1) {
        autoEAD6D52F_var = UnitGroupUnitFromEnd(autoEAD6D52F_g, autoEAD6D52F_u);
        if (autoEAD6D52F_var == null) { break; }
        UnitRemove(autoEAD6D52F_var);
    }
    autoD154BFAD_g = gv_stufftoclean.lv_arenaactors;
    autoD154BFAD_u = UnitGroupCount(autoD154BFAD_g, c_unitCountAll);
    for (;; autoD154BFAD_u -= 1) {
        autoD154BFAD_var = UnitGroupUnitFromEnd(autoD154BFAD_g, autoD154BFAD_u);
        if (autoD154BFAD_var == null) { break; }
        UnitRemove(autoD154BFAD_var);
    }
    auto771E58D2_var = 1;
    for ( ; auto771E58D2_var <= auto771E58D2_ae; auto771E58D2_var += 1 ) {
        if ((UnitIsAlive(gv_selectionArena.lv_platformunits[auto771E58D2_var]) == true)) {
            UnitRemove(gv_selectionArena.lv_platformunits[auto771E58D2_var]);
        }
    }
    auto597E1B32_var = 1;
    for ( ; auto597E1B32_var <= auto597E1B32_ae; auto597E1B32_var += 1 ) {
        if ((UnitIsAlive(gv_selectionArena.lv_readybeacons[auto597E1B32_var]) == true)) {
            UnitRemove(gv_selectionArena.lv_readybeacons[auto597E1B32_var]);
        }
    }
    autoD44186E8_var = 1;
    for ( ; autoD44186E8_var <= autoD44186E8_ae; autoD44186E8_var += 1 ) {
        if ((gv_selectionArena.lv_platforms[autoD44186E8_var] != null)) {
            ActorSend(gv_selectionArena.lv_platforms[autoD44186E8_var], "Destroy Immediate");
        }
    }
    auto9E8BA4C5_var = 0;
    for ( ; auto9E8BA4C5_var <= auto9E8BA4C5_ae; auto9E8BA4C5_var += 1 ) {
        if ((gv_stufftoclean.lv_cavelights[auto9E8BA4C5_var] != null)) {
            ActorSend(gv_stufftoclean.lv_cavelights[auto9E8BA4C5_var], "Destroy Immediate");
        }
    }
    auto9A77EF59_g = PlayerGroupActive();
    auto9A77EF59_var = -1;
    while (true) {
        auto9A77EF59_var = PlayerGroupNextPlayer(auto9A77EF59_g, auto9A77EF59_var);
        if (auto9A77EF59_var < 0) { break; }
        CameraApplyInfo(auto9A77EF59_var, CameraInfoDefault(), 0.0, -1, 10.0, true);
        CameraLockInput(auto9A77EF59_var, false);
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetWorldVisible(PlayerGroupAll(), true);
    
}
void gf_CreateSelectionArena (point lp_spawnPoint) {
    // Variable Declarations
    unit lv_theunit;
    int lv_enumint;
    // Automatic Variable Declarations
    playergroup auto6CB6625B_g;
    playergroup auto9595B434_g;
    playergroup auto9AA4373F_g;
    int auto9AA4373F_var;
    playergroup auto57A3C8FB_g;
    int auto57A3C8FB_var;
    playergroup autoB5E1506C_g;
    int autoB5E1506C_var;
    playergroup autoF90FF693_g;
    int autoF90FF693_var;       
    
    gv_selectionArena.lv_spotPoints[1] = Point(50.0, 29.0);
    gv_selectionArena.lv_spotPoints[2] = Point(55.0, 31.0);
    gv_selectionArena.lv_spotPoints[3] = Point(60.0, 31.0);
    gv_selectionArena.lv_spotPoints[4] = Point(65.0, 29.0);
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(33.74, 6.9), 0.0);
    gv_stufftoclean.lv_levelOutUnits[1] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(45.15, 6.73), 0.0);
    gv_stufftoclean.lv_levelOutUnits[2] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(55.08, 6.62), 0.0);
    gv_stufftoclean.lv_levelOutUnits[3] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(66.49, 6.44), 0.0);
    gv_stufftoclean.lv_levelOutUnits[4] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(33.81, 18.1), 0.0);
    gv_stufftoclean.lv_levelOutUnits[5] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(45.15, 17.93), 0.0);
    gv_stufftoclean.lv_levelOutUnits[6] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(55.15, 17.81), 0.0);
    gv_stufftoclean.lv_levelOutUnits[7] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(66.49, 0.0), 0.0);
    gv_stufftoclean.lv_levelOutUnits[8] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(35.49, 29.53), 0.0);
    gv_stufftoclean.lv_levelOutUnits[9] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(46.9, 29.36), 0.0);
    gv_stufftoclean.lv_levelOutUnits[10] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(54.94, 29.63), 0.0);
    gv_stufftoclean.lv_levelOutUnits[11] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(66.35, 29.45), 0.0);
    gv_stufftoclean.lv_levelOutUnits[12] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(35.55, 40.73), 0.0);
    gv_stufftoclean.lv_levelOutUnits[13] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(46.89, 40.73), 0.0);
    gv_stufftoclean.lv_levelOutUnits[14] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(55.0, 40.82), 0.0);
    gv_stufftoclean.lv_levelOutUnits[15] = UnitLastCreated();
    UnitCreate(1, "LevelPlaneInto", c_unitCreateIgnorePlacement, 0, Point(66.34, 40.65), 0.0);
    gv_stufftoclean.lv_levelOutUnits[16] = UnitLastCreated();
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[1], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[1] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[2], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[2] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[3], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[3] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[4], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[4] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[1], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[5] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[2], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[6] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[3], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[7] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, gv_selectionArena.lv_spotPoints[4], 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), 60.4, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.75, 0.75, 0.75, 0.0));
    gv_selectionArena.lv_platforms[8] = libNtve_gf_MainActorofUnit(UnitLastCreated());
    gf_Createcavelights(Point(50.64, 28.87), 0);
    gf_Createcavelights(Point(51.48, 36.64), 0);
    gf_Createcavelights(Point(57.26, 31.35), 0);
    gf_Createcavelights(Point(57.6, 36.92), 0);
    gf_Createcavelights(Point(48.83, 18.66), 0);
    gf_Createcavelights(Point(57.87, 20.98), 0);
    gf_Createcavelights(Point(64.76, 28.57), 0);
    gf_Createcavelights(Point(45.72, 35.46), 1);
    gf_Createcavelights(Point(67.25, 35.88), 1);
    gf_Createfloorpanel(Point(53.72, 21.14));
    gf_Createfloorpanel(Point(60.72, 21.03));
    gf_Createfloorpanel(Point(46.66, 12.89));
    gf_Createfloorpanel(Point(53.66, 12.81));
    gf_Createfloorpanel(Point(60.67, 12.69));
    gf_Createfloorpanel(Point(67.67, 12.61));
    gf_Createfloorpanel(Point(46.72, 21.23));
    gf_Createfloorpanel(Point(67.73, 20.94));
    gf_Createfloorpanel(Point(46.9, 29.62));
    gf_Createfloorpanel(Point(53.9, 29.54));
    gf_Createfloorpanel(Point(60.91, 29.42));
    gf_Createfloorpanel(Point(68.02, 29.34));
    gf_Createfloorpanel(Point(46.95, 37.96));
    gf_Createfloorpanel(Point(53.96, 37.87));
    gf_Createfloorpanel(Point(60.96, 37.76));
    gf_Createfloorpanel(Point(67.96, 37.67));
    gf_Createbottomwall(Point(42.59, 24.8), 1);
    gf_Createbottomwall(Point(42.55, 13.16), 1);
    gf_Createbottomwall(Point(42.5, 36.73), 1);
    gf_Createbottomwall(Point(46.42, 43.12), 2);
    gf_Createbottomwall(Point(57.64, 43.11), 2);
    gf_Createbottomwall(Point(69.08, 43.02), 2);
    gf_Createbottomwall(Point(72.25, 36.29), 3);
    gf_Createbottomwall(Point(72.16, 24.35), 3);
    gf_Createbottomwall(Point(72.19, 12.72), 3);
    gf_Createfloorlines(Point(44.22, 12.05));
    gf_Createfloorlines(Point(44.22, 19.81));
    gf_Createfloorlines(Point(44.21, 27.69));
    gf_Createfloorlines(Point(44.18, 35.57));
    gf_Createfloorlines(Point(44.18, 39.6));
    gf_Createfloorlines(Point(70.51, 10.27));
    gf_Createfloorlines(Point(70.5, 18.03));
    gf_Createfloorlines(Point(70.49, 25.91));
    gf_Createfloorlines(Point(70.46, 33.79));
    gf_Createfloorlines(Point(70.46, 37.82));
    gf_Createtubewall(Point(41.42, 11.42), 1);
    gf_Createtubewall(Point(41.28, 18.75), 1);
    gf_Createtubewall(Point(41.4, 25.7), 1);
    gf_Createtubewall(Point(41.5, 32.37), 1);
    gf_Createtubewall(Point(41.41, 38.96), 1);
    gf_Createtubewall(Point(44.38, 43.39), 2);
    gf_Createtubewall(Point(52.93, 43.33), 2);
    gf_Createtubewall(Point(61.55, 43.23), 2);
    gf_Createtubewall(Point(70.02, 43.28), 2);
    gf_Createtubewall(Point(73.45, 39.34), 3);
    gf_Createtubewall(Point(73.33, 32.39), 3);
    gf_Createtubewall(Point(73.22, 25.71), 3);
    gf_Createtubewall(Point(73.32, 19.13), 3);
    gf_Createbigwall(Point(39.72, 13.47), 1);
    gf_Createbigwall(Point(39.71, 26.39), 1);
    gf_Createbigwall(Point(39.71, 39.15), 1);
    gf_Createbigwall(Point(43.61, 44.93), 2);
    gf_Createbigwall(Point(56.47, 44.9), 2);
    gf_Createbigwall(Point(69.26, 44.85), 2);
    gf_Createbigwall(Point(75.23, 40.12), 3);
    gf_Createbigwall(Point(75.23, 27.21), 3);
    gf_Createbigwall(Point(75.23, 14.45), 3);
    gf_Createredlighting(Point(45.37, 24.8));
    gf_Createredlighting(Point(45.01, 41.03));
    gf_Createredlighting(Point(57.36, 40.39));
    gf_Createredlighting(Point(70.17, 40.7));
    gf_Createredlighting(Point(70.15, 24.01));
    gf_Createpinlights(Point(48.15, 42.28), 0);
    gf_Createpinlights(Point(57.52, 41.58), 0);
    gf_Createpinlights(Point(66.17, 42.07), 0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHelpMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetWorldVisible(PlayerGroupAll(), false);
}
trigger auto_gf_ApplyCameraZoominonUnits_Trigger = null;
int auto_gf_ApplyCameraZoominonUnits_lp_player;
void gf_ApplyCameraZoominonUnits (int lp_player) {
    auto_gf_ApplyCameraZoominonUnits_lp_player = lp_player;
    if (auto_gf_ApplyCameraZoominonUnits_Trigger == null) {
        auto_gf_ApplyCameraZoominonUnits_Trigger = TriggerCreate("auto_gf_ApplyCameraZoominonUnits_TriggerFunc");
    }
    TriggerExecute(auto_gf_ApplyCameraZoominonUnits_Trigger, false, false);
}
bool auto_gf_ApplyCameraZoominonUnits_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ApplyCameraZoominonUnits_lp_player;
    // Automatic Variable Declarations
    // Implementation
    UISetWorldVisible(PlayerGroupSingle(lp_player), true);
    CameraSetValue(lp_player, c_cameraValueDistance, 41.0, 3.0, -1, 10.0);
    return true;
}
 
trigger auto_gf_Createfloorpanel_Trigger = null;
point auto_gf_Createfloorpanel_lp_spawnPoint;
void gf_Createfloorpanel (point lp_spawnPoint) {
    auto_gf_Createfloorpanel_lp_spawnPoint = lp_spawnPoint;
    if (auto_gf_Createfloorpanel_Trigger == null) {
        auto_gf_Createfloorpanel_Trigger = TriggerCreate("auto_gf_Createfloorpanel_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createfloorpanel_Trigger, false, false);
}
bool auto_gf_Createfloorpanel_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createfloorpanel_lp_spawnPoint;
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_spawnPoint, 90.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + 12.0), 0.0);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap("CharFloorPanel", 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(Color(20.00, 20.00, 20.00), 1.0, 0.0));
    return true;
}
trigger auto_gf_Createbottomwall_Trigger = null;
point auto_gf_Createbottomwall_lp_spawnPoint;
int auto_gf_Createbottomwall_lp_direction;
void gf_Createbottomwall (point lp_spawnPoint, int lp_direction) {
    auto_gf_Createbottomwall_lp_spawnPoint = lp_spawnPoint;
    auto_gf_Createbottomwall_lp_direction = lp_direction;
    if (auto_gf_Createbottomwall_Trigger == null) {
        auto_gf_Createbottomwall_Trigger = TriggerCreate("auto_gf_Createbottomwall_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createbottomwall_Trigger, false, false);
}
bool auto_gf_Createbottomwall_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createbottomwall_lp_spawnPoint;
    int lp_direction = auto_gf_Createbottomwall_lp_direction;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_spawnPoint, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + 12.0), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("TarsonisWall", 0));
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_SetScale(3.0, 3.0, 3.0, 0.0));
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_SetTintColor(Color(20.78, 20.78, 20.78), 1.0, 0.0));
    if ((lp_direction == 1)) {
        UnitSetFacing(lv_theunit, 0.0, 0.0);
    }
    else {
        if ((lp_direction == 2)) {
            UnitSetFacing(lv_theunit, 270.0, 0.0);
        }
        else {
            if ((lp_direction == 3)) {
                UnitSetFacing(lv_theunit, 180.0, 0.0);
            }
        }
    }
    return true;
}
trigger auto_gf_Createfloorlines_Trigger = null;
point auto_gf_Createfloorlines_lp_spawnPoint;
void gf_Createfloorlines (point lp_spawnPoint) {
    auto_gf_Createfloorlines_lp_spawnPoint = lp_spawnPoint;
    if (auto_gf_Createfloorlines_Trigger == null) {
        auto_gf_Createfloorlines_Trigger = TriggerCreate("auto_gf_Createfloorlines_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createfloorlines_Trigger, false, false);
}
bool auto_gf_Createfloorlines_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createfloorlines_lp_spawnPoint;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_spawnPoint, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + 12.0), 0.0);
    UnitSetFacing(lv_theunit, 0.0, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_SetScale(5.0, 2.0, 2.0, 0.0));
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("StoreFrontNeonTubes", 3));
    return true;
}
trigger auto_gf_Createtubewall_Trigger = null;
point auto_gf_Createtubewall_lp_spawnPoint;
int auto_gf_Createtubewall_lp_direction;
void gf_Createtubewall (point lp_spawnPoint, int lp_direction) {
    auto_gf_Createtubewall_lp_spawnPoint = lp_spawnPoint;
    auto_gf_Createtubewall_lp_direction = lp_direction;
    if (auto_gf_Createtubewall_Trigger == null) {
        auto_gf_Createtubewall_Trigger = TriggerCreate("auto_gf_Createtubewall_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createtubewall_Trigger, false, false);
}
bool auto_gf_Createtubewall_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createtubewall_lp_spawnPoint;
    int lp_direction = auto_gf_Createtubewall_lp_direction;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_spawnPoint, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + 15.0), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_SetScale(1.5, 1.5, 1.5, 0.0));
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("MoebiusLab_StasisTubeWall", 5));
    if ((lp_direction == 1)) {
        UnitSetFacing(lv_theunit, 270.0, 0.0);
    }
    else {
        if ((lp_direction == 2)) {
            UnitSetFacing(lv_theunit, 180.0, 0.0);
        }
        else {
            if ((lp_direction == 3)) {
                UnitSetFacing(lv_theunit, 90.0, 0.0);
            }
        }
    }
    return true;
}
trigger auto_gf_Createbigwall_Trigger = null;
point auto_gf_Createbigwall_lp_spawnPoint;
int auto_gf_Createbigwall_lp_direction;
void gf_Createbigwall (point lp_spawnPoint, int lp_direction) {
    auto_gf_Createbigwall_lp_spawnPoint = lp_spawnPoint;
    auto_gf_Createbigwall_lp_direction = lp_direction;
    if (auto_gf_Createbigwall_Trigger == null) {
        auto_gf_Createbigwall_Trigger = TriggerCreate("auto_gf_Createbigwall_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createbigwall_Trigger, false, false);
}
bool auto_gf_Createbigwall_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createbigwall_lp_spawnPoint;
    int lp_direction = auto_gf_Createbigwall_lp_direction;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_spawnPoint, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + 15.0), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("XelNaga_OlderWall_Red", 5));
    if ((lp_direction == 1)) {
        UnitSetFacing(lv_theunit, 0.0, 0.0);
    }
    else {
        if ((lp_direction == 2)) {
            UnitSetFacing(lv_theunit, 270.0, 0.0);
        }
        else {
            if ((lp_direction == 3)) {
                UnitSetFacing(lv_theunit, 180.0, 0.0);
            }
        }
    }
    return true;
}
trigger auto_gf_Createcavelights_Trigger = null;
point auto_gf_Createcavelights_lp_spawnPoint;
int auto_gf_Createcavelights_lp_variation;
void gf_Createcavelights (point lp_spawnPoint, int lp_variation) {
    auto_gf_Createcavelights_lp_spawnPoint = lp_spawnPoint;
    auto_gf_Createcavelights_lp_variation = lp_variation;
    if (auto_gf_Createcavelights_Trigger == null) {
        auto_gf_Createcavelights_Trigger = TriggerCreate("auto_gf_Createcavelights_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createcavelights_Trigger, false, false);
}
bool auto_gf_Createcavelights_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createcavelights_lp_spawnPoint;
    int lp_variation = auto_gf_Createcavelights_lp_variation;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    libNtve_gf_CreateActorAtPoint("XelNaga_Caverns_Cave_Light", lp_spawnPoint);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_ModelSwap("XelNaga_Caverns_Cave_Light", lp_variation));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetHeight((gv_selectionArena.lv_zoffset + 0.0)));
    gv_stufftoclean.lv_cavelights[gv_stufftoclean.lv_cavelightint] = libNtve_gf_ActorLastCreated();
    gv_stufftoclean.lv_cavelightint += 1;
    return true;
}
trigger auto_gf_Createredlighting_Trigger = null;
point auto_gf_Createredlighting_lp_spawnPoint;
void gf_Createredlighting (point lp_spawnPoint) {
    auto_gf_Createredlighting_lp_spawnPoint = lp_spawnPoint;
    if (auto_gf_Createredlighting_Trigger == null) {
        auto_gf_Createredlighting_Trigger = TriggerCreate("auto_gf_Createredlighting_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createredlighting_Trigger, false, false);
}
bool auto_gf_Createredlighting_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createredlighting_lp_spawnPoint;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_spawnPoint, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetCursor(UnitLastCreated(), "Arrow");
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + 0.3), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("LightOmniRedLarge", 0));
    return true;
}
trigger auto_gf_Createpinlights_Trigger = null;
point auto_gf_Createpinlights_lp_spawnPoint;
int auto_gf_Createpinlights_lp_variation;
void gf_Createpinlights (point lp_spawnPoint, int lp_variation) {
    auto_gf_Createpinlights_lp_spawnPoint = lp_spawnPoint;
    auto_gf_Createpinlights_lp_variation = lp_variation;
    if (auto_gf_Createpinlights_Trigger == null) {
        auto_gf_Createpinlights_Trigger = TriggerCreate("auto_gf_Createpinlights_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createpinlights_Trigger, false, false);
}
bool auto_gf_Createpinlights_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnPoint = auto_gf_Createpinlights_lp_spawnPoint;
    int lp_variation = auto_gf_Createpinlights_lp_variation;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_spawnPoint, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + 12.05), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("Korhal_Platform_LandingLights", lp_variation));
    return true;
}
trigger auto_gf_Createplatform_Trigger = null;
point auto_gf_Createplatform_lp_location;
fixed auto_gf_Createplatform_lp_height;
void gf_Createplatform (point lp_location, fixed lp_height) {
    auto_gf_Createplatform_lp_location = lp_location;
    auto_gf_Createplatform_lp_height = lp_height;
    if (auto_gf_Createplatform_Trigger == null) {
        auto_gf_Createplatform_Trigger = TriggerCreate("auto_gf_Createplatform_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createplatform_Trigger, false, false);
}
bool auto_gf_Createplatform_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_gf_Createplatform_lp_location;
    fixed lp_height = auto_gf_Createplatform_lp_height;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_location, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + (lp_height + 12.0)), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("CastanarStasisTubeRising", 0));
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_SetScale(1.6, 1.6, 1.2, 0.0));
    return true;
}
trigger auto_gf_Createbeacon_Trigger = null;
point auto_gf_Createbeacon_lp_location;
fixed auto_gf_Createbeacon_lp_height;
void gf_Createbeacon (point lp_location, fixed lp_height) {
    auto_gf_Createbeacon_lp_location = lp_location;
    auto_gf_Createbeacon_lp_height = lp_height;
    if (auto_gf_Createbeacon_Trigger == null) {
        auto_gf_Createbeacon_Trigger = TriggerCreate("auto_gf_Createbeacon_TriggerFunc");
    }
    TriggerExecute(auto_gf_Createbeacon_Trigger, false, false);
}
bool auto_gf_Createbeacon_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_gf_Createbeacon_lp_location;
    fixed lp_height = auto_gf_Createbeacon_lp_height;
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    UnitCreate(1, "ShapeApple", c_unitCreateIgnorePlacement, 0, lp_location, 270.0);
    UnitGroupAdd(gv_stufftoclean.lv_arenaactors, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetCursor(UnitLastCreated(), "Arrow");
    lv_theunit = UnitLastCreated();
    UnitSetHeight(UnitLastCreated(), (gv_selectionArena.lv_zoffset + (lp_height + 0.0)), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(lv_theunit), libNtve_gf_ModelSwap("Purifier_TeleportPad", 0));
    return true;
}
trigger auto_gf_SingleDraftUpdatetexttags_Trigger = null;
void gf_SingleDraftUpdatetexttags () {
    if (auto_gf_SingleDraftUpdatetexttags_Trigger == null) {
        auto_gf_SingleDraftUpdatetexttags_Trigger = TriggerCreate("auto_gf_SingleDraftUpdatetexttags_TriggerFunc");
    }
    TriggerExecute(auto_gf_SingleDraftUpdatetexttags_Trigger, false, false);
}
bool auto_gf_SingleDraftUpdatetexttags_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto778503FB_g;
    int auto778503FB_var;
    playergroup auto344FB61B_g;
    int auto344FB61B_var;
    // Implementation
    auto778503FB_g = lv_playersonteam[1];
    auto778503FB_var = -1;
    while (true) {
        auto778503FB_var = PlayerGroupNextPlayer(auto778503FB_g, auto778503FB_var);
        if (auto778503FB_var < 0) { break; }
        if (((PlayerStatus(auto778503FB_var) == c_playerStatusActive) || (libARMB_gv_testing == true))) {
            if ((libARMB_gv_unitData.lv_playerUnitLink[auto778503FB_var] != 0)) {
                TextTagAttachToUnit(gv_selectionArena.lv_playerNameTags[auto778503FB_var], gv_selectionArena.lv_platformunits[auto778503FB_var], 3.0);
                if ((gv_selectionArena.lv_playerisreadytostart[auto778503FB_var] == true)) {
                    TextExpressionSetToken("Param/Expression/3C584CF8", "A", PlayerName(auto778503FB_var));
                    TextExpressionSetToken("Param/Expression/3C584CF8", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[auto778503FB_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[auto778503FB_var], TextExpressionAssemble("Param/Expression/3C584CF8"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/999E8BE1", "A", PlayerName(auto778503FB_var));
                    TextExpressionSetToken("Param/Expression/999E8BE1", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[auto778503FB_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[auto778503FB_var], TextExpressionAssemble("Param/Expression/999E8BE1"));
                }
            }
            else {
                TextExpressionSetToken("Param/Expression/A9D7BA4B", "A", PlayerName(auto778503FB_var));
                TextTagSetText(gv_selectionArena.lv_playerNameTags[auto778503FB_var], TextExpressionAssemble("Param/Expression/A9D7BA4B"));
            }
        }
        else {
            TextTagSetText(gv_selectionArena.lv_playerNameTags[auto778503FB_var], StringExternal("Param/Value/3D3D873E"));
        }
    }
    auto344FB61B_g = lv_playersonteam[2];
    auto344FB61B_var = -1;
    while (true) {
        auto344FB61B_var = PlayerGroupNextPlayer(auto344FB61B_g, auto344FB61B_var);
        if (auto344FB61B_var < 0) { break; }
        if (((PlayerStatus(auto344FB61B_var) == c_playerStatusActive) || (libARMB_gv_testing == true))) {
            if ((libARMB_gv_unitData.lv_playerUnitLink[auto344FB61B_var] != 0)) {
                TextTagAttachToUnit(gv_selectionArena.lv_playerNameTags[auto344FB61B_var], gv_selectionArena.lv_platformunits[auto344FB61B_var], 3.0);
                if ((gv_selectionArena.lv_playerisreadytostart[auto344FB61B_var] == true)) {
                    TextExpressionSetToken("Param/Expression/3E780B90", "A", PlayerName(auto344FB61B_var));
                    TextExpressionSetToken("Param/Expression/3E780B90", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[auto344FB61B_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[auto344FB61B_var], TextExpressionAssemble("Param/Expression/3E780B90"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/37482F80", "A", PlayerName(auto344FB61B_var));
                    TextExpressionSetToken("Param/Expression/37482F80", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[auto344FB61B_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[auto344FB61B_var], TextExpressionAssemble("Param/Expression/37482F80"));
                }
            }
            else {
                TextExpressionSetToken("Param/Expression/E18F1BF7", "A", PlayerName(auto344FB61B_var));
                TextTagSetText(gv_selectionArena.lv_playerNameTags[auto344FB61B_var], TextExpressionAssemble("Param/Expression/E18F1BF7"));
            }
        }
        else {
            TextTagSetText(gv_selectionArena.lv_playerNameTags[auto344FB61B_var], StringExternal("Param/Value/EF93882B"));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Draft Selection
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_SelectModes_RandomDraft = 1;
const int ge_SelectModes_SingleDraft = 2;
const int ge_SelectModes_TierDraft = 3;
const int ge_SelectModes_DraftSelection = 0;
struct gs_DraftSelection {
    int lv_chatui;
    bool lv_shouldstarsbemoving;
    int lv_starsDialog;
    int lv_starsImage;
    int lv_draftSelectionTimerDialog;
    int lv_draftSelectionTimerTimeText;
    int lv_dialog;
    int[4] lv_buttons;
    int[4] lv_buttonHighlights;
    int lv_arrow;
    int lv_description;
    int[4] lv_buttonText;
    int[4] lv_buttoncounters;
    int[4] lv_buttonHotspots;
    text[4] lv_descriptionText;
    int lv_titleText;
    int[9] lv_playerVotes;
    int[4] lv_votetotals;
};
gs_DraftSelection gv_draftSelection;
trigger gt_DraftSelectionMouseOver;
trigger gt_DraftSelectionMouseOut;
trigger gt_DraftSelectionClick;
void gf_DraftSelectionCreateBackgroundDialog ();
void gf_DraftSelectionMoveBackground ();
void gf_DraftSelectionCreateDraftSelectionInterface ();
void gf_DraftSelectionStartVoteTimer ();
void gf_DraftSelectionSetinterfacefordraftmode ();
void gf_DraftSelectionUpdateTotals ();
void runDraftSelectionStep();
void gt_DraftSelectionMouseOver_Init();
void gt_DraftSelectionMouseOut_Init();
void gt_DraftSelectionClick_Init();
void gf_DraftSelectionCreateBackgroundDialog () {
    int init_i1;
    gt_DraftSelectionMouseOver_Init();
    gt_DraftSelectionMouseOut_Init();
    gt_DraftSelectionClick_Init();
    gv_draftSelection.lv_chatui = c_invalidDialogControlId;
    gv_draftSelection.lv_shouldstarsbemoving = true;
    gv_draftSelection.lv_starsDialog = c_invalidDialogId;
    gv_draftSelection.lv_starsImage = c_invalidDialogControlId;
    gv_draftSelection.lv_draftSelectionTimerDialog = c_invalidDialogId;
    gv_draftSelection.lv_draftSelectionTimerTimeText = c_invalidDialogControlId;
    gv_draftSelection.lv_dialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_draftSelection.lv_buttons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_draftSelection.lv_buttonHighlights[init_i1] = c_invalidDialogControlId;
    }
    gv_draftSelection.lv_arrow = c_invalidDialogControlId;
    gv_draftSelection.lv_description = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_draftSelection.lv_buttonText[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_draftSelection.lv_buttoncounters[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_draftSelection.lv_buttonHotspots[init_i1] = c_invalidDialogControlId;
    }
    gv_draftSelection.lv_titleText = c_invalidDialogControlId;
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(4000, 3000, c_anchorTopLeft, 0, 0, true);
    gv_draftSelection.lv_starsDialog = DialogLastCreated();
    DialogSetImageVisible(gv_draftSelection.lv_starsDialog, false);
    libNtve_gf_CreateDialogItemImage(gv_draftSelection.lv_starsDialog, 9999, 3000, c_anchorTopRight, 0, 0, StringToText(""), "Assets\\Monobattle\\starbg.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_draftSelection.lv_starsImage = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gf_DraftSelectionMoveBackground();
}
trigger auto_gf_DraftSelectionMoveBackground_Trigger = null;
void gf_DraftSelectionMoveBackground () {
    if (auto_gf_DraftSelectionMoveBackground_Trigger == null) {
        auto_gf_DraftSelectionMoveBackground_Trigger = TriggerCreate("auto_gf_DraftSelectionMoveBackground_TriggerFunc");
    }
    TriggerExecute(auto_gf_DraftSelectionMoveBackground_Trigger, false, false);
}
bool auto_gf_DraftSelectionMoveBackground_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while ((gv_draftSelection.lv_shouldstarsbemoving == true)) {
        DialogControlSetPosition(gv_draftSelection.lv_starsImage, PlayerGroupAll(), c_anchorTopRight, (DialogControlGetOffsetX(gv_draftSelection.lv_starsImage, 1) + 1), DialogControlGetOffsetY(gv_draftSelection.lv_starsImage, 1));
        Wait(0.0, c_timeGame);
    }
    return true;
}
trigger auto_gf_DraftSelectionCreateDraftSelectionInterface_Trigger = null;
void gf_DraftSelectionCreateDraftSelectionInterface () {
    if (auto_gf_DraftSelectionCreateDraftSelectionInterface_Trigger == null) {
        auto_gf_DraftSelectionCreateDraftSelectionInterface_Trigger = TriggerCreate("auto_gf_DraftSelectionCreateDraftSelectionInterface_TriggerFunc");
    }
    TriggerExecute(auto_gf_DraftSelectionCreateDraftSelectionInterface_Trigger, false, false);
}
bool auto_gf_DraftSelectionCreateDraftSelectionInterface_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_DraftSelectionCreateBackgroundDialog();
    DialogCreate(772, 800, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_draftSelection.lv_dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 772, 80, c_anchorTopLeft, 0, 30, StringExternal("Param/Value/C3B03A95"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_titleText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_draftSelection.lv_dialog, 772, 80, c_anchorTopLeft, 0, 250, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_nextinfo_bg_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    gv_draftSelection.lv_buttons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_draftSelection.lv_dialog, 772, 80, c_anchorTopLeft, 0, 250, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_nextinfo_bg_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 100.00), PlayerGroupAll());
    gv_draftSelection.lv_buttonHighlights[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 772, 80, c_anchorTopLeft, 0, 250, StringExternal("Param/Value/D7E27A49"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_buttonText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 772, 80, c_anchorTopLeft, 0, 250, StringToText(""), StringToText(""), "");
    gv_draftSelection.lv_buttonHotspots[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_draftSelection.lv_dialog, 772, 80, c_anchorTopLeft, 0, 350, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_nextinfo_bg_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_draftSelection.lv_buttons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_draftSelection.lv_dialog, 772, 80, c_anchorTopLeft, 0, 350, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_nextinfo_bg_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 100.00), PlayerGroupAll());
    gv_draftSelection.lv_buttonHighlights[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 772, 80, c_anchorTopLeft, 0, 350, StringExternal("Param/Value/BA681FF3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_buttonText[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 772, 80, c_anchorTopLeft, 0, 350, StringToText(""), StringToText(""), "");
    gv_draftSelection.lv_buttonHotspots[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_draftSelection.lv_dialog, 772, 80, c_anchorTopLeft, 0, 450, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_nextinfo_bg_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_draftSelection.lv_buttons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_draftSelection.lv_dialog, 772, 80, c_anchorTopLeft, 0, 450, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_tournament_nextinfo_bg_large.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 100.00), PlayerGroupAll());
    gv_draftSelection.lv_buttonHighlights[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 772, 80, c_anchorTopLeft, 0, 450, StringExternal("Param/Value/84A6419E"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_buttonText[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 772, 80, c_anchorTopLeft, 0, 450, StringToText(""), StringToText(""), "");
    gv_draftSelection.lv_buttonHotspots[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 80, c_anchorTopLeft, 60, 250, StringExternal("Param/Value/82155C99"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_buttoncounters[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 80, c_anchorTopLeft, 60, 350, StringExternal("Param/Value/A40E491F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_buttoncounters[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 80, c_anchorTopLeft, 60, 450, StringExternal("Param/Value/308F58EB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_buttoncounters[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    DialogControlSetVisible(gv_draftSelection.lv_buttonHighlights[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_draftSelection.lv_buttonHighlights[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_draftSelection.lv_buttonHighlights[3], PlayerGroupAll(), false);
    DialogControlFadeTransparency(gv_draftSelection.lv_buttonHotspots[1], PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(gv_draftSelection.lv_buttonHotspots[2], PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(gv_draftSelection.lv_buttonHotspots[3], PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 722, 150, c_anchorTopLeft, 50, 650, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_draftSelection.lv_description = DialogControlLastCreated();
    gv_draftSelection.lv_descriptionText[1] = StringExternal("Param/Value/C9F2C1FF");
    gv_draftSelection.lv_descriptionText[2] = StringExternal("Param/Value/5FA28FCD");
    gv_draftSelection.lv_descriptionText[3] = StringExternal("Param/Value/7F632701");
    gf_DraftSelectionStartVoteTimer();
    return true;
}
trigger auto_gf_DraftSelectionStartVoteTimer_Trigger = null;
void gf_DraftSelectionStartVoteTimer () {
    if (auto_gf_DraftSelectionStartVoteTimer_Trigger == null) {
        auto_gf_DraftSelectionStartVoteTimer_Trigger = TriggerCreate("auto_gf_DraftSelectionStartVoteTimer_TriggerFunc");
    }
    TriggerExecute(auto_gf_DraftSelectionStartVoteTimer_Trigger, false, false);
}
bool auto_gf_DraftSelectionStartVoteTimer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timeleft;
    int lv_playersrequiredtovote;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    DialogCreate(500, 400, c_anchorTop, 0, 20, true);
    gv_draftSelection.lv_draftSelectionTimerDialog = DialogLastCreated();
    DialogSetImageVisible(gv_draftSelection.lv_draftSelectionTimerDialog, false);
    DialogSetVisible(gv_draftSelection.lv_draftSelectionTimerDialog, PlayerGroupAll(), true);
   
    lv_timeleft = 15;
    TextExpressionSetToken("Param/Expression/04D710F6", "A", IntToText(lv_timeleft));
    libNtve_gf_CreateDialogItemLabel(gv_draftSelection.lv_draftSelectionTimerDialog, 200, 100, c_anchorTop, 0, 50, TextExpressionAssemble("Param/Expression/04D710F6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    gv_draftSelection.lv_draftSelectionTimerTimeText = DialogControlLastCreated();
    lv_playersrequiredtovote = PlayerGroupCount(PlayerGroupActive());
    while ((lv_timeleft > 0) && (lv_playersrequiredtovote > (gv_draftSelection.lv_votetotals[1] + (gv_draftSelection.lv_votetotals[2] + gv_draftSelection.lv_votetotals[3])))) {
        if (((lv_timeleft == 3) || (lv_timeleft == 2))) {
            TextExpressionSetToken("Param/Expression/71A336B2", "A", IntToText(lv_timeleft));
            libNtve_gf_SetDialogItemText(gv_draftSelection.lv_draftSelectionTimerTimeText, TextExpressionAssemble("Param/Expression/71A336B2"), PlayerGroupAll());
            SoundPlayForPlayer(SoundLink("UI_Bnet_MatchCountdown1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            if ((lv_timeleft == 1)) {
                TextExpressionSetToken("Param/Expression/51323F9F", "A", IntToText(lv_timeleft));
                libNtve_gf_SetDialogItemText(gv_draftSelection.lv_draftSelectionTimerTimeText, TextExpressionAssemble("Param/Expression/51323F9F"), PlayerGroupAll());
                SoundPlayForPlayer(SoundLink("UI_Bnet_MatchCountdownGo", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }
            else {
                TextExpressionSetToken("Param/Expression/2CF6F613", "A", IntToText(lv_timeleft));
                libNtve_gf_SetDialogItemText(gv_draftSelection.lv_draftSelectionTimerTimeText, TextExpressionAssemble("Param/Expression/2CF6F613"), PlayerGroupAll());
            }
        }
        lv_timeleft -= 1;
        Wait(1.0, c_timeReal);
    }
    gf_DraftSelectionSetinterfacefordraftmode();
    DialogControlFadeTransparency(gv_draftSelection.lv_draftSelectionTimerTimeText, PlayerGroupAll(), 0.5, 100.0);
    Wait(1.0, c_timeReal);
    DialogDestroy(gv_draftSelection.lv_draftSelectionTimerDialog);
    return true;
}
trigger auto_gf_DraftSelectionSetinterfacefordraftmode_Trigger = null;
void gf_DraftSelectionSetinterfacefordraftmode () {
    if (auto_gf_DraftSelectionSetinterfacefordraftmode_Trigger == null) {
        auto_gf_DraftSelectionSetinterfacefordraftmode_Trigger = TriggerCreate("auto_gf_DraftSelectionSetinterfacefordraftmode_TriggerFunc");
    }
    TriggerExecute(auto_gf_DraftSelectionSetinterfacefordraftmode_Trigger, false, false);
}
bool auto_gf_DraftSelectionSetinterfacefordraftmode_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumplayer;
    playergroup auto8516B524_g;
    int lv_selectiondialog;
    int lv_selectiontext;
    int lv_enumint;
    int lv_randomint;
    // Automatic Variable Declarations
    const int auto79434AEE_ae = 3;
    const int auto79434AEE_ai = 1;
    playergroup autoC719170D_g;
    // Variable Initialization
    lv_selectiondialog = c_invalidDialogId;
    lv_selectiontext = c_invalidDialogControlId;
    // Implementation
    lv_enumint = 1;
    for ( ; ( (auto79434AEE_ai >= 0 && lv_enumint <= auto79434AEE_ae) || (auto79434AEE_ai < 0 && lv_enumint >= auto79434AEE_ae) ) ; lv_enumint += auto79434AEE_ai ) {
        DialogControlFadeTransparency(gv_draftSelection.lv_buttoncounters[lv_enumint], PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_draftSelection.lv_buttonHighlights[lv_enumint], PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_draftSelection.lv_buttonText[lv_enumint], PlayerGroupAll(), 0.5, 100.0);
        DialogControlFadeTransparency(gv_draftSelection.lv_buttons[lv_enumint], PlayerGroupAll(), 0.5, 100.0);
    }
    DialogControlFadeTransparency(gv_draftSelection.lv_description, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_draftSelection.lv_titleText, PlayerGroupAll(), 0.5, 100.0);
    Wait(1.0, c_timeGame);
    DialogDestroy(gv_draftSelection.lv_dialog);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    lv_selectiondialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 400, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    lv_selectiontext = DialogControlLastCreated();
    DialogControlFadeTransparency(lv_selectiontext, PlayerGroupAll(), 0.0, 100.0);
    if ((gv_draftSelection.lv_votetotals[1] > gv_draftSelection.lv_votetotals[2]) && (gv_draftSelection.lv_votetotals[1] > gv_draftSelection.lv_votetotals[3])) {
        libARMB_gv_draftMode = ge_SelectModes_RandomDraft;
        libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/FE17FB14"), PlayerGroupAll());
    }
    else {
        if ((gv_draftSelection.lv_votetotals[2] > gv_draftSelection.lv_votetotals[1]) && (gv_draftSelection.lv_votetotals[2] > gv_draftSelection.lv_votetotals[3])) {
            libARMB_gv_draftMode = ge_SelectModes_SingleDraft;
            libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/C9A988CD"), PlayerGroupAll());
        }
        else {
            if ((gv_draftSelection.lv_votetotals[3] > gv_draftSelection.lv_votetotals[1]) && (gv_draftSelection.lv_votetotals[3] > gv_draftSelection.lv_votetotals[2])) {
                libARMB_gv_draftMode = ge_SelectModes_TierDraft;
                libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/687D6F8C"), PlayerGroupAll());
            }
            else {
                if ((gv_draftSelection.lv_votetotals[1] == gv_draftSelection.lv_votetotals[2]) && (gv_draftSelection.lv_votetotals[1] > gv_draftSelection.lv_votetotals[3])) {
                    lv_randomint = RandomInt(1, 2);
                    if ((lv_randomint == 1)) {
                        libARMB_gv_draftMode = ge_SelectModes_RandomDraft;
                        libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/86D71BBB"), PlayerGroupAll());
                    }
                    else {
                        libARMB_gv_draftMode = ge_SelectModes_SingleDraft;
                        libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/8B65DE57"), PlayerGroupAll());
                    }
                }
                else {
                    if ((gv_draftSelection.lv_votetotals[1] == gv_draftSelection.lv_votetotals[3]) && (gv_draftSelection.lv_votetotals[1] > gv_draftSelection.lv_votetotals[2])) {
                        lv_randomint = RandomInt(1, 2);
                        if ((lv_randomint == 1)) {
                            libARMB_gv_draftMode = ge_SelectModes_RandomDraft;
                            libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/E119704F"), PlayerGroupAll());
                        }
                        else {
                            libARMB_gv_draftMode = ge_SelectModes_TierDraft;
                            libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/4394993C"), PlayerGroupAll());
                        }
                    }
                    else {
                        if ((gv_draftSelection.lv_votetotals[2] == gv_draftSelection.lv_votetotals[3]) && (gv_draftSelection.lv_votetotals[2] > gv_draftSelection.lv_votetotals[1])) {
                            lv_randomint = RandomInt(1, 2);
                            if ((lv_randomint == 1)) {
                                libARMB_gv_draftMode = ge_SelectModes_SingleDraft;
                                libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/73D4AB42"), PlayerGroupAll());
                            }
                            else {
                                libARMB_gv_draftMode = ge_SelectModes_TierDraft;
                                libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/1CC141E7"), PlayerGroupAll());
                            }
                        }
                        else {
                            if ((gv_draftSelection.lv_votetotals[1] == gv_draftSelection.lv_votetotals[2]) && (gv_draftSelection.lv_votetotals[2] == gv_draftSelection.lv_votetotals[3])) {
                                lv_randomint = RandomInt(1, 3);
                                if ((lv_randomint == 1)) {
                                    libARMB_gv_draftMode = ge_SelectModes_RandomDraft;
                                    libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/D0F2F947"), PlayerGroupAll());
                                }
                                else {
                                    if ((lv_randomint == 2)) {
                                        libARMB_gv_draftMode = ge_SelectModes_SingleDraft;
                                        libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/1EDDF05A"), PlayerGroupAll());
                                    }
                                    else {
                                        libARMB_gv_draftMode = ge_SelectModes_TierDraft;
                                        libNtve_gf_SetDialogItemText(lv_selectiontext, StringExternal("Param/Value/92042D1F"), PlayerGroupAll());
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    DialogControlFadeTransparency(lv_selectiontext, PlayerGroupAll(), 0.5, 0.0);
    Wait(3.0, c_timeGame);
    DialogControlFadeTransparency(lv_selectiontext, PlayerGroupAll(), 0.5, 100.0);
    Wait(1.0, c_timeGame);
    DialogDestroy(lv_selectiondialog);
    gv_draftSelection.lv_shouldstarsbemoving = false;
    DialogDestroy(gv_draftSelection.lv_starsDialog);
    runDraftSelectionStep();
    
    return true;
}
void gf_DraftSelectionUpdateTotals () {
    // Variable Declarations
    int lv_enumplayer;
    int lv_enumint;
    int[4] lv_totals;
    // Automatic Variable Declarations
    playergroup auto8516B524_g;
    const int auto10D208AD_ae = 3;
    const int auto10D208AD_ai = 1;
    const int autoF0316389_ae = 3;
    const int autoF0316389_ai = 1;
    // Variable Initialization
    // Implementation
    auto8516B524_g = PlayerGroupActive();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto8516B524_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        lv_enumint = 1;
        for ( ; ( (auto10D208AD_ai >= 0 && lv_enumint <= auto10D208AD_ae) || (auto10D208AD_ai < 0 && lv_enumint >= auto10D208AD_ae) ) ; lv_enumint += auto10D208AD_ai ) {
            if ((gv_draftSelection.lv_playerVotes[lv_enumplayer] == lv_enumint)) {
                lv_totals[lv_enumint] += 1;
            }
        }
    }
    lv_enumint = 1;
    for ( ; ( (autoF0316389_ai >= 0 && lv_enumint <= autoF0316389_ae) || (autoF0316389_ai < 0 && lv_enumint >= autoF0316389_ae) ) ; lv_enumint += autoF0316389_ai ) {
        gv_draftSelection.lv_votetotals[lv_enumint] = lv_totals[lv_enumint];
        TextExpressionSetToken("Param/Expression/9F686566", "A", IntToText(gv_draftSelection.lv_votetotals[lv_enumint]));
        libNtve_gf_SetDialogItemText(gv_draftSelection.lv_buttoncounters[lv_enumint], TextExpressionAssemble("Param/Expression/9F686566"), PlayerGroupAll());
    }
}
//--------------------------------------------------------------------------------------------------
// Trigger: Draft Selection - Mouse Over
//--------------------------------------------------------------------------------------------------
bool gt_DraftSelectionMouseOver_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto5101191C_ae = 3;
    const int auto5101191C_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_draftSelection.lv_buttonHotspots[1]) || (EventDialogControl() == gv_draftSelection.lv_buttonHotspots[2]) || (EventDialogControl() == gv_draftSelection.lv_buttonHotspots[3])))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_enumint = 1;
    for ( ; ( (auto5101191C_ai >= 0 && lv_enumint <= auto5101191C_ae) || (auto5101191C_ai < 0 && lv_enumint >= auto5101191C_ae) ) ; lv_enumint += auto5101191C_ai ) {
        if ((EventDialogControl() == gv_draftSelection.lv_buttonHotspots[lv_enumint]) && (gv_draftSelection.lv_playerVotes[EventPlayer()] == 0)) {
            libNtve_gf_SetDialogItemColor(gv_draftSelection.lv_buttonText[lv_enumint], Color(100,100,100), PlayerGroupSingle(EventPlayer()));
            DialogControlSetVisible(gv_draftSelection.lv_buttonHighlights[lv_enumint], PlayerGroupSingle(EventPlayer()), true);
            libNtve_gf_SetDialogItemText(gv_draftSelection.lv_description, gv_draftSelection.lv_descriptionText[lv_enumint], PlayerGroupSingle(EventPlayer()));
            break;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DraftSelectionMouseOver_Init () {
    gt_DraftSelectionMouseOver = TriggerCreate("gt_DraftSelectionMouseOver_Func");
    TriggerAddEventDialogControl(gt_DraftSelectionMouseOver, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Draft Selection - Mouse Out
//--------------------------------------------------------------------------------------------------
bool gt_DraftSelectionMouseOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto7FB72494_ae = 3;
    const int auto7FB72494_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_draftSelection.lv_buttonHotspots[1]) || (EventDialogControl() == gv_draftSelection.lv_buttonHotspots[2]) || (EventDialogControl() == gv_draftSelection.lv_buttonHotspots[3])))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_enumint = 1;
    for ( ; ( (auto7FB72494_ai >= 0 && lv_enumint <= auto7FB72494_ae) || (auto7FB72494_ai < 0 && lv_enumint >= auto7FB72494_ae) ) ; lv_enumint += auto7FB72494_ai ) {
        if ((EventDialogControl() == gv_draftSelection.lv_buttonHotspots[lv_enumint]) && (gv_draftSelection.lv_playerVotes[EventPlayer()] == 0)) {
            libNtve_gf_SetDialogItemColor(gv_draftSelection.lv_buttonText[lv_enumint], Color(75.29, 75.29, 75.29), PlayerGroupSingle(EventPlayer()));
            DialogControlSetVisible(gv_draftSelection.lv_buttonHighlights[lv_enumint], PlayerGroupSingle(EventPlayer()), false);
            libNtve_gf_SetDialogItemText(gv_draftSelection.lv_description, StringToText(""), PlayerGroupSingle(EventPlayer()));
            break;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DraftSelectionMouseOut_Init () {
    gt_DraftSelectionMouseOut = TriggerCreate("gt_DraftSelectionMouseOut_Func");
    TriggerAddEventDialogControl(gt_DraftSelectionMouseOut, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Draft Selection - Click
//--------------------------------------------------------------------------------------------------
bool gt_DraftSelectionClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto62E98A22_ae = 3;
    const int auto62E98A22_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_draftSelection.lv_buttonHotspots[1]) || (EventDialogControl() == gv_draftSelection.lv_buttonHotspots[2]) || (EventDialogControl() == gv_draftSelection.lv_buttonHotspots[3])))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    lv_enumint = 1;
    for ( ; ( (auto62E98A22_ai >= 0 && lv_enumint <= auto62E98A22_ae) || (auto62E98A22_ai < 0 && lv_enumint >= auto62E98A22_ae) ) ; lv_enumint += auto62E98A22_ai ) {
        DialogControlSetVisible(gv_draftSelection.lv_buttonHotspots[lv_enumint], PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemText(gv_draftSelection.lv_description, StringToText(""), PlayerGroupSingle(EventPlayer()));
        if ((EventDialogControl() == gv_draftSelection.lv_buttonHotspots[lv_enumint])) {
            gv_draftSelection.lv_playerVotes[EventPlayer()] = lv_enumint;
            libNtve_gf_SetDialogItemColor(gv_draftSelection.lv_buttonText[lv_enumint], Color(50.20, 100.00, 50.20), PlayerGroupSingle(EventPlayer()));
        }
        else {
            libNtve_gf_SetDialogItemColor(gv_draftSelection.lv_buttonText[lv_enumint], Color(75.29, 75.29, 75.29), PlayerGroupSingle(EventPlayer()));
            DialogControlFadeTransparency(gv_draftSelection.lv_buttons[lv_enumint], PlayerGroupSingle(EventPlayer()), 0.5, 60.0);
            DialogControlFadeTransparency(gv_draftSelection.lv_buttonText[lv_enumint], PlayerGroupSingle(EventPlayer()), 0.5, 75.0);
        }
    }
    gf_DraftSelectionUpdateTotals();
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_DraftSelectionClick_Init () {
    gt_DraftSelectionClick = TriggerCreate("gt_DraftSelectionClick_Func");
    TriggerAddEventDialogControl(gt_DraftSelectionClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Random Draft
//--------------------------------------------------------------------------------------------------
int gv_forceUnit;
struct gs_RandomDraftUnitSelectionUI {
    int lv_selectionDialog;
    int lv_selectionPickedUnit;
    int lv_selectionRepickButton;
    int lv_selectionLockInButton;
    int lv_selectiontitletext;
};
gs_RandomDraftUnitSelectionUI gv_randomDraftUnitSelectionUI;
void gf_RandomDraftRunUnitSelectionTimer ();
void gf_RandomDraftSetrandomunitnumber (int lp_player);
void gf_RandomDraftSelectarandomunit (int lp_player);
void gf_RandomDraftCreateUnitSelectionInterface (bool lp_showbyDefault);
void gf_RandomDraftAssignAFKplayersaunit ();
void gf_RandomDraftChangeBackgroundRace (int lp_player, int lp__1random2terran3zerg4protoss);
void gf_RandomDraftMarkplayerunitasready (int lp_player);
void gf_Destroyallpregameui ();
void gt_RandomDraftSelectRepickorLockin_Init();
trigger gt_RandomDraftSelectRepickorLockin;
//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------
void gf_Destroyallpregameui () {
    // Automatic Variable Declarations
    const int auto7C8B194D_ae = 8;
    int auto7C8B194D_var;
    // Implementation
    auto7C8B194D_var = 1;
    for ( ; auto7C8B194D_var <= auto7C8B194D_ae; auto7C8B194D_var += 1 ) {
        if ((gv_selectionArena.lv_playerNameTags[auto7C8B194D_var] != c_textTagNone)) {
            TextTagDestroy(gv_selectionArena.lv_playerNameTags[auto7C8B194D_var]);
        }
        if ((gv_selectionArena.lv_yOUtexttag[auto7C8B194D_var] != c_textTagNone)) {
            TextTagDestroy(gv_selectionArena.lv_yOUtexttag[auto7C8B194D_var]);
        }
    }
    DialogDestroy(gv_selectionTimer.lv_timerDialog);
}
trigger auto_gf_RandomDraftRunUnitSelectionTimer_Trigger = null;
void gf_RandomDraftRunUnitSelectionTimer () {
    if (auto_gf_RandomDraftRunUnitSelectionTimer_Trigger == null) {
        auto_gf_RandomDraftRunUnitSelectionTimer_Trigger = TriggerCreate("auto_gf_RandomDraftRunUnitSelectionTimer_TriggerFunc");
    }
    TriggerExecute(auto_gf_RandomDraftRunUnitSelectionTimer_Trigger, false, false);
}
bool auto_gf_RandomDraftRunUnitSelectionTimer_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 400, c_anchorTop, 0, 20, true);
    gv_selectionTimer.lv_timerDialog = DialogLastCreated();
    DialogSetImageVisible(gv_selectionTimer.lv_timerDialog, false);
    DialogSetVisible(gv_selectionTimer.lv_timerDialog, PlayerGroupAll(), true);
    gv_selectionTimer.lv_timeRemaining = 30;
    TextExpressionSetToken("Param/Expression/0A829D86", "A", IntToText(gv_selectionTimer.lv_timeRemaining));
    libNtve_gf_CreateDialogItemLabel(gv_selectionTimer.lv_timerDialog, 200, 100, c_anchorTop, 0, 50, TextExpressionAssemble("Param/Expression/0A829D86"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
    gv_selectionTimer.lv_timerText = DialogControlLastCreated();
    while ((gv_selectionTimer.lv_timeRemaining > 0)) {
        if (((gv_selectionTimer.lv_timeRemaining == 3) || (gv_selectionTimer.lv_timeRemaining == 2))) {
            TextExpressionSetToken("Param/Expression/447594DF", "A", IntToText(gv_selectionTimer.lv_timeRemaining));
            libNtve_gf_SetDialogItemText(gv_selectionTimer.lv_timerText, TextExpressionAssemble("Param/Expression/447594DF"), PlayerGroupAll());
            SoundPlayForPlayer(SoundLink("UI_Bnet_MatchCountdown1", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            if ((gv_selectionTimer.lv_timeRemaining == 1)) {
                TextExpressionSetToken("Param/Expression/1AE65DC3", "A", IntToText(gv_selectionTimer.lv_timeRemaining));
                libNtve_gf_SetDialogItemText(gv_selectionTimer.lv_timerText, TextExpressionAssemble("Param/Expression/1AE65DC3"), PlayerGroupAll());
                SoundPlayForPlayer(SoundLink("UI_Bnet_MatchCountdownGo", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }
            else {
                TextExpressionSetToken("Param/Expression/31F91F5C", "A", IntToText(gv_selectionTimer.lv_timeRemaining));
                libNtve_gf_SetDialogItemText(gv_selectionTimer.lv_timerText, TextExpressionAssemble("Param/Expression/31F91F5C"), PlayerGroupAll());
            }
        }
        gv_selectionTimer.lv_timeRemaining -= 1;
        Wait(1.0, c_timeReal);
    }
    gf_Destroyallpregameui();
    gf_WarpOutAnimation();
    gf_RandomDraftAssignAFKplayersaunit();
    DialogDestroy(gv_randomDraftUnitSelectionUI.lv_selectionDialog);
    gf_Cleanupactorsunitsandstart();
    return true;
}
void gf_RandomDraftSetrandomunitnumber (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libARMB_gv_testing == true) && (gv_forceUnit != 0)) {
        libARMB_gv_unitData.lv_playerUnitLink[lp_player] = gv_forceUnit;
    }
    else {
        libARMB_gf_RandomDraftSetrandomunitnumber(lp_player);
    }
}
void gf_RandomDraftSelectarandomunit (int lp_player) {
    // Variable Declarations
    int lv_tempnumber;
    int lv_newnumber;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((libARMB_gv_unitData.lv_playerUnitLink[lp_player] == 0)) {
        gf_RandomDraftSetrandomunitnumber(lp_player);
    }
    else {
        lv_tempnumber = libARMB_gv_unitData.lv_playerUnitLink[lp_player];
        lv_newnumber = libARMB_gv_unitData.lv_playerUnitLink[lp_player];
        while ((lv_newnumber == lv_tempnumber)) {
            gf_RandomDraftSetrandomunitnumber(lp_player);
            lv_newnumber = libARMB_gv_unitData.lv_playerUnitLink[lp_player];
            Wait(0.0, c_timeGame);
        }
    }
    if ((gv_selectionTimer.lv_timeRemaining > 1)) {
        libNtve_gf_SetDialogItemText(gv_randomDraftUnitSelectionUI.lv_selectiontitletext, libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[lp_player]], PlayerGroupSingle(lp_player));
        createPreviewUnit(lp_player);
    }
}
trigger auto_gf_RandomDraftCreateUnitSelectionInterface_Trigger = null;
bool auto_gf_RandomDraftCreateUnitSelectionInterface_lp_showbyDefault;
void gf_RandomDraftCreateUnitSelectionInterface (bool lp_showbyDefault) {
    auto_gf_RandomDraftCreateUnitSelectionInterface_lp_showbyDefault = lp_showbyDefault;
    if (auto_gf_RandomDraftCreateUnitSelectionInterface_Trigger == null) {
        auto_gf_RandomDraftCreateUnitSelectionInterface_Trigger = TriggerCreate("auto_gf_RandomDraftCreateUnitSelectionInterface_TriggerFunc");
    }
    TriggerExecute(auto_gf_RandomDraftCreateUnitSelectionInterface_Trigger, false, false);
}
bool auto_gf_RandomDraftCreateUnitSelectionInterface_TriggerFunc (bool testConds, bool runActions) {
    int lv_enumplayer;
    playergroup auto8516B524_g;
    bool lp_showbyDefault = auto_gf_RandomDraftCreateUnitSelectionInterface_lp_showbyDefault;
	
	gv_randomDraftUnitSelectionUI.lv_selectionDialog = c_invalidDialogId;
    gv_randomDraftUnitSelectionUI.lv_selectionPickedUnit = c_invalidDialogControlId;
    gv_randomDraftUnitSelectionUI.lv_selectionRepickButton = c_invalidDialogControlId;
    gv_randomDraftUnitSelectionUI.lv_selectionLockInButton = c_invalidDialogControlId;
    gv_randomDraftUnitSelectionUI.lv_selectiontitletext = c_invalidDialogControlId;
    
	libARMB_gf_initUnitData();
    gt_RandomDraftSelectRepickorLockin_Init();
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(3000, 250, c_anchorBottom, 0, 0, true);
    gv_randomDraftUnitSelectionUI.lv_selectionDialog = DialogLastCreated();
    DialogSetImageVisible(gv_randomDraftUnitSelectionUI.lv_selectionDialog, false);
    if ((lp_showbyDefault == true)) {
        DialogSetVisible(gv_randomDraftUnitSelectionUI.lv_selectionDialog, PlayerGroupAll(), true);
    }
    else {
        DialogSetVisible(gv_randomDraftUnitSelectionUI.lv_selectionDialog, PlayerGroupAll(), false);
    }
    libNtve_gf_CreateDialogItemButton(gv_randomDraftUnitSelectionUI.lv_selectionDialog, 214, 58, c_anchorCenter, -120, 5, StringToText(""), StringExternal("Param/Value/838ACE3B"), "Assets\\Textures\\protoss-border-button-game.dds");
    gv_randomDraftUnitSelectionUI.lv_selectionRepickButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_randomDraftUnitSelectionUI.lv_selectionDialog, 214, 58, c_anchorCenter, 120, 5, StringToText(""), StringExternal("Param/Value/79190D90"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_randomDraftUnitSelectionUI.lv_selectionLockInButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\terran-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, 0, -70, StringExternal("Param/Value/543703FB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_randomDraftUnitSelectionUI.lv_selectiontitletext = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
   gf_RandomDraftRunUnitSelectionTimer();
   // DialogSetVisible(gv_draftSelection.lv_starsDialog, PlayerGroupActive(), false);
    UISetWorldVisible(PlayerGroupActive(), true);
    auto8516B524_g = PlayerGroupActive();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto8516B524_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
            
        CameraSetValue(lv_enumplayer, c_cameraValueDistance, 41.0, 3.0, -1, 10.0);
        gf_RandomDraftSelectarandomunit(lv_enumplayer);
        if (libARMB_gv_playerData[lv_enumplayer].lv_repick == true) {//race -random enable repick
            DialogSetVisible(gv_randomDraftUnitSelectionUI.lv_selectionDialog, PlayerGroupSingle(lv_enumplayer), true);
        }
        else {
            gf_RandomDraftMarkplayerunitasready(lv_enumplayer);
        }
    }
    return true;
}
void gf_RandomDraftAssignAFKplayersaunit () {
    // Automatic Variable Declarations
    playergroup auto086CF34D_g;
    int auto086CF34D_var;
    // Implementation
    auto086CF34D_g = PlayerGroupActive();
    auto086CF34D_var = -1;
    while (true) {
        auto086CF34D_var = PlayerGroupNextPlayer(auto086CF34D_g, auto086CF34D_var);
        if (auto086CF34D_var < 0) { break; }
        if ((libARMB_gv_unitData.lv_playerUnitLink[auto086CF34D_var] == 0)) {
            gf_RandomDraftSelectarandomunit(auto086CF34D_var);
        }
    }
}
void gf_RandomDraftMarkplayerunitasready (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_selectionArena.lv_playerisreadytostart[lp_player] = true;
    if ((PlayerGroupHasPlayer(lv_playersonteam[1], lp_player) == true)) {
        ActorSend(gv_selectionArena.lv_platforms[gv_selectionArena.lv_playerspotpointassignment[lp_player]], "AnimPlay Stand Work,Start PlayForever,NonLooping,DontResetOnUnhide");
    }
    else {
        ActorSend(gv_selectionArena.lv_platforms[(gv_selectionArena.lv_playerspotpointassignment[lp_player] + 4)], "AnimPlay Stand Work,Start PlayForever,NonLooping,DontResetOnUnhide");
    }
    gf_SingleDraftUpdatetexttags();
}
//--------------------------------------------------------------------------------------------------
// Trigger: Random Draft - Select Repick or Lockin
//--------------------------------------------------------------------------------------------------
bool gt_RandomDraftSelectRepickorLockin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_randomDraftUnitSelectionUI.lv_selectionRepickButton) || (EventDialogControl() == gv_randomDraftUnitSelectionUI.lv_selectionLockInButton)))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventDialogControl() == gv_randomDraftUnitSelectionUI.lv_selectionRepickButton)) {
        gf_RandomDraftMarkplayerunitasready(EventPlayer());
        gf_RandomDraftSelectarandomunit(EventPlayer());
        DialogSetVisible(gv_randomDraftUnitSelectionUI.lv_selectionDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gf_RandomDraftMarkplayerunitasready(EventPlayer());
        DialogSetVisible(gv_randomDraftUnitSelectionUI.lv_selectionDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_RandomDraftSelectRepickorLockin_Init () {
    gt_RandomDraftSelectRepickorLockin = TriggerCreate("gt_RandomDraftSelectRepickorLockin_Func");
    TriggerAddEventDialogControl(gt_RandomDraftSelectRepickorLockin, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Single Draft
//--------------------------------------------------------------------------------------------------
const int MAX_CHOICES = 50;
struct gs_SingleDraft {
    bool lv_issingledrafthappening;
  //  playergroup[3] lv_playersRemainingtobePlaced;
   // playergroup[3] lv_playersonteam;
    int lv_unitSelectionDialog;
    int[MAX_CHOICES + 1] lv_unitButtonDialogs;
    int[MAX_CHOICES + 1] lv_unitButtonHotspots;
    int[MAX_CHOICES + 1] lv_unitButtonImage;
    int[MAX_CHOICES + 1] lv_unitButtonBG;
    int[MAX_CHOICES + 1] lv_unitTypes;
    bool[MAX_CHOICES + 1] lv_unitslotistaken;
    int lv_pickUnitButton;
    int lv_greenGlowy;
    int[6] lv_pickUnitArrowsLeft;
    int[6] lv_pickUnitArrowsRight;
    int[3] lv_buttonPulse;
    int[9] lv_buttonCurrentlySelected;
    int[9] lv_unitActuallyAssigned;
    int[3] lv_whosTurnDialog;
    int lv_whosTurnTotalPlayersSelecting;
    int[3] lv_whosTurnTotalPlayersOnTeam;
    int[9] lv_whosTurnPlayerTurnOrder;
    color[3] lv_whosTurnTeamcolorcodes;
    color[3] lv_whosTurnTeamcolorcodesdark;
    int[9][5] lv_whosTurnFrameImages;
    int lv_whosTurnCurrentTurnSlotNumber;
    int[9] lv_whosTurnCurrentTurnIndicator;
    int[9] lv_whosTurnwhichteamselectswhichslot;
    int lv_whosTurnYourTurnText;
    int lv_whosTurnOMGTimeislow;
    int lv_whosTurnOMGTimeislowtext;
    int[9] lv_whosTurnUnitIcon;
    bool lv_testingSkip;
};
int[113] gv_unitArray;
gs_SingleDraft gv_singleDraft;
void gf_RandomizeUnitarray();
void gf_SingleDraftInitSingleDraft ();
void gf_SingleDraftAnimatePickArrows ();
void gf_SingleDraftUpdateIconforUnitChoice (int lp_dialogItem, string lp_image);
void gf_SingleDraftRandomlyassignunittoAFKplayer (int lp_player);
void gf_SingleDraftForceassignunittoAFKplayer (int lp_player, int lp_button);
void gf_SingleDraftChangePicktoNextPlayer ();
void gf_SingleDraftUpdateUnitTempSelection (int lp_player);
void gf_SingleDraftShowFinalUnit (int lp_player);
void gf_SingleDraftRemoveunitfromselection (int lp_unitSlot);
void gf_SingleDraftEndSingleDraft ();
void gf_SingleDraftMarkPlayerUnitasReady (int lp_player);
void gt_SingleDraftClickUnitButtons_Init();
void gt_SingleDraftClickPickButton_Init();
trigger gt_SingleDraftClickUnitButtons;
trigger gt_SingleDraftClickPickButton;
void gf_RandomizeUnitarray () {
    // Variable Declarations
    int lv_index;
    int lv_indexRandom;
    int lv_scoreSwap;
    // Automatic Variable Declarations
    int auto361E0FCE_ae;
    const int auto361E0FCE_ai = 1;
    // Variable Initialization
    // Implementation
    auto361E0FCE_ae = (libARMB_gv_unitDataCount - 1);
    lv_index = 1;
    for ( ; ( (auto361E0FCE_ai >= 0 && lv_index <= auto361E0FCE_ae) || (auto361E0FCE_ai < 0 && lv_index >= auto361E0FCE_ae) ) ; lv_index += auto361E0FCE_ai ) {
        lv_indexRandom = RandomInt(lv_index, libARMB_gv_unitDataCount);
        if ((lv_indexRandom != lv_index)) {
            lv_scoreSwap = gv_unitArray[lv_indexRandom];
            gv_unitArray[lv_indexRandom] = gv_unitArray[lv_index];
            gv_unitArray[lv_index] = lv_scoreSwap;
        }
    }
}
trigger auto_gf_SingleDraftInitSingleDraft_Trigger = null;
void gf_SingleDraftInitSingleDraft () {
    if (auto_gf_SingleDraftInitSingleDraft_Trigger == null) {
        auto_gf_SingleDraftInitSingleDraft_Trigger = TriggerCreate("auto_gf_SingleDraftInitSingleDraft_TriggerFunc");
    }
    TriggerExecute(auto_gf_SingleDraftInitSingleDraft_Trigger, false, false);
}
bool auto_gf_SingleDraftInitSingleDraft_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_xoffset;
    int lv_yoffset;
    int lv_arrayslot;
    int lv_whichteamisselecting;
    int lv_randomint;
    int lv_randomplayer;
    int lv_whosturnwidth;
    int lv_tempteam;
    int[3] lv_xoffsetTEAM;
    int auto5B627930_var;
    int lv_dialogwidth;
    playergroup autoA1A6BBC2_g;
    // Automatic Variable Declarations
    const int auto5B627930_ae = 8;
    const int autoB6400A9A_ai = 1;
    
    const int autoEE58217C_ae = 5;
    const int autoEE58217C_ai = 1;
    const int auto3E741BB2_ae = 8;
    const int auto3E741BB2_ai = 1;
    int auto7A1EB418_ae;
    const int auto7A1EB418_ai = 1;
    int racesCount = libARMB_gf_GetRacesVariationCount();
    int buttons = 10;
    int init_i1;
    int init_j1;
    //DialogSetVisible(gv_draftSelection.lv_starsDialog, PlayerGroupActive(), false);
    UISetWorldVisible(PlayerGroupActive(), true);
    autoA1A6BBC2_g = PlayerGroupActive();
    lv_enumint = -1;
    while (true) {
        lv_enumint = PlayerGroupNextPlayer(autoA1A6BBC2_g, lv_enumint);
        if (lv_enumint < 0) { break; }
        CameraSetValue(lv_enumint, c_cameraValueDistance, 41.0, 3.0, -1, 10.0);
    }
	libARMB_gf_initUnitData();
    buttons = MinI( libARMB_gv_unitDataCount, MinI( 5 + racesCount * 5, 24 ));
    gv_singleDraft.lv_unitSelectionDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= MAX_CHOICES; init_i1 += 1) {
        gv_singleDraft.lv_unitButtonDialogs[init_i1] = c_invalidDialogId;
        gv_singleDraft.lv_unitButtonHotspots[init_i1] = c_invalidDialogControlId;
        gv_singleDraft.lv_unitButtonImage[init_i1] = c_invalidDialogControlId;
        gv_singleDraft.lv_unitButtonBG[init_i1] = c_invalidDialogControlId;
    }
    gv_singleDraft.lv_pickUnitButton = c_invalidDialogControlId;
    gv_singleDraft.lv_greenGlowy = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_singleDraft.lv_pickUnitArrowsLeft[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_singleDraft.lv_pickUnitArrowsRight[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_buttonPulse[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_whosTurnDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_whosTurnTeamcolorcodes[init_i1] = Color(0,0,0);
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_singleDraft.lv_whosTurnTeamcolorcodesdark[init_i1] = Color(0,0,0);
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 4; init_j1 += 1) {
            gv_singleDraft.lv_whosTurnFrameImages[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_singleDraft.lv_whosTurnCurrentTurnIndicator[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_singleDraft.lv_whosTurnUnitIcon[init_i1] = c_invalidDialogControlId;
    }
    gv_singleDraft.lv_whosTurnYourTurnText = c_invalidDialogControlId;
    gv_singleDraft.lv_whosTurnOMGTimeislow = c_invalidDialogId;
    gv_singleDraft.lv_whosTurnOMGTimeislowtext = c_invalidDialogControlId;
    gt_SingleDraftClickUnitButtons_Init();
    gt_SingleDraftClickPickButton_Init();
    // Variable Initialization
    // Implementation
    
    for (auto5B627930_var = 1 ; auto5B627930_var <= auto5B627930_ae; auto5B627930_var += 1 ) {
        if ((gv_selectionArena.lv_yOUtexttag[auto5B627930_var] != c_textTagNone)) {
            TextTagDestroy(gv_selectionArena.lv_yOUtexttag[auto5B627930_var]);
        }
    }
    gv_singleDraft.lv_issingledrafthappening = true;
    gv_singleDraft.lv_whosTurnTeamcolorcodes[1] = Color(69.02, 0.00, 0.00);
    gv_singleDraft.lv_whosTurnTeamcolorcodes[2] = Color(0.00, 37.65, 74.90);
    gv_singleDraft.lv_whosTurnTeamcolorcodesdark[1] = Color(16.86, 0.00, 0.00);
    gv_singleDraft.lv_whosTurnTeamcolorcodesdark[2] = Color(0.00, 12.55, 25.10);
    lv_enumint = 1;
    for ( ; ( (autoB6400A9A_ai >= 0 && lv_enumint <= libARMB_gv_unitDataCount) || (autoB6400A9A_ai < 0 && lv_enumint >= libARMB_gv_unitDataCount) ) ; lv_enumint += autoB6400A9A_ai ) {
        gv_unitArray[lv_enumint] = lv_enumint;
    }
    gf_RandomizeUnitarray();
    
    for (lv_enumint = 1; lv_enumint <= buttons ; lv_enumint += 1 ) {
        gv_singleDraft.lv_unitTypes[lv_enumint] = gv_unitArray[lv_enumint];
    }
    if ((buttons > 12)) {
        lv_dialogwidth = 1200;
    }
    else {
        lv_dialogwidth = (buttons * 100);
    }
    DialogCreate(lv_dialogwidth, 380, c_anchorBottom, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_singleDraft.lv_unitSelectionDialog = DialogLastCreated();
    lv_enumint = 1;
    for ( ; lv_enumint <= buttons ; lv_enumint += 1 ) {
        DialogCreate(100, 100, c_anchorTopLeft, 0, 0, true);
        DialogSetPositionRelative(DialogLastCreated(), c_anchorTopLeft, gv_singleDraft.lv_unitSelectionDialog, c_anchorTopLeft, lv_xoffset, lv_yoffset);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_singleDraft.lv_unitButtonDialogs[lv_enumint] = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 200, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_singleDraft.lv_unitButtonBG[lv_enumint] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 64, 64, c_anchorTopLeft, 18, 18, StringToText(""), libARMB_gv_unitData.lv_thumbnail[gv_singleDraft.lv_unitTypes[lv_enumint]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_singleDraft.lv_unitButtonImage[lv_enumint] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 0, 0, StringToText(""), libARMB_gv_unitData.lv_unitName[lv_enumint], "");
        gv_singleDraft.lv_unitButtonHotspots[lv_enumint] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        if ((lv_enumint == 12) || (lv_enumint == 24)) {
            lv_xoffset = 0;
            lv_yoffset += 100;
        }
        else {
            lv_xoffset += 100;
        }
    }
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 1000, 700, c_anchorBottom, 0, -600, StringToText(""), "Assets\\Textures\\ui_objectives_glowblue_titletext.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_singleDraft.lv_greenGlowy = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_singleDraft.lv_unitSelectionDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/278E11AC"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_singleDraft.lv_buttonPulse[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\border-button-game.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_singleDraft.lv_unitSelectionDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/92E815E2"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_singleDraft.lv_buttonPulse[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\border-button-game.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_singleDraft.lv_unitSelectionDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/E2F3E501"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_singleDraft.lv_pickUnitButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\terran-border-button-game.dds", PlayerGroupAll());
    DialogControlSetEnabled(gv_singleDraft.lv_pickUnitButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_singleDraft.lv_pickUnitButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_singleDraft.lv_greenGlowy, PlayerGroupAll(), false);
    gf_SingleDraftUpdatetexttags();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -200, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsLeft[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 200, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsRight[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -250, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsLeft[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 250, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsRight[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -300, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsLeft[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 300, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsRight[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -350, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsLeft[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 350, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsRight[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -400, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsLeft[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 400, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_singleDraft.lv_pickUnitArrowsRight[5] = DialogControlLastCreated();
    lv_enumint = 1;
    for ( ; ( (autoEE58217C_ai >= 0 && lv_enumint <= autoEE58217C_ae) || (autoEE58217C_ai < 0 && lv_enumint >= autoEE58217C_ae) ) ; lv_enumint += autoEE58217C_ai ) {
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupAll(), 0.0, 100.0);
        DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupAll(), false);
    }
    gf_SingleDraftAnimatePickArrows();
    lv_arrayslot = 0;
    lv_whichteamisselecting = RandomInt(1, 2);
    if ((lv_whichteamisselecting == 1)) {
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[1] = 1;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[2] = 2;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[3] = 2;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[4] = 1;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[5] = 1;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[6] = 2;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[7] = 2;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[8] = 1;
    }
    else {
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[1] = 2;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[2] = 1;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[3] = 1;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[4] = 2;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[5] = 2;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[6] = 1;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[7] = 1;
        gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[8] = 2;
    }
    lv_enumint = 1;
    for ( ; ( (auto3E741BB2_ai >= 0 && lv_enumint <= auto3E741BB2_ae) || (auto3E741BB2_ai < 0 && lv_enumint >= auto3E741BB2_ae) ) ; lv_enumint += auto3E741BB2_ai ) {
        if ((gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[lv_enumint] == 1) && (PlayerGroupCount(lv_playersRemainingtobePlaced[1]) > 0)) {
            lv_arrayslot += 1;
            lv_randomint = RandomInt(1, PlayerGroupCount(lv_playersRemainingtobePlaced[1]));
            lv_randomplayer = PlayerGroupPlayer(lv_playersRemainingtobePlaced[1], lv_randomint);
            PlayerGroupRemove(lv_playersRemainingtobePlaced[1], lv_randomplayer);
            gv_singleDraft.lv_whosTurnPlayerTurnOrder[lv_arrayslot] = lv_randomplayer;
        }
        else {
            if ((gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[lv_enumint] == 2) && (PlayerGroupCount(lv_playersRemainingtobePlaced[2]) > 0)) {
                lv_arrayslot += 1;
                lv_randomint = RandomInt(1, PlayerGroupCount(lv_playersRemainingtobePlaced[2]));
                lv_randomplayer = PlayerGroupPlayer(lv_playersRemainingtobePlaced[2], lv_randomint);
                PlayerGroupRemove(lv_playersRemainingtobePlaced[2], lv_randomplayer);
                gv_singleDraft.lv_whosTurnPlayerTurnOrder[lv_arrayslot] = lv_randomplayer;
            }
        }
    }
    lv_whosturnwidth = ((gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[1] * 176) + ((gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[1] - 1) * 4));
    DialogCreate(lv_whosturnwidth, 144, c_anchorTop, 0, 30, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_singleDraft.lv_whosTurnDialog[1] = DialogLastCreated();
    lv_whosturnwidth = ((gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[2] * 176) + ((gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[2] - 1) * 4));
    DialogCreate(lv_whosturnwidth, 144, c_anchorTop, 0, 30, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_singleDraft.lv_whosTurnDialog[2] = DialogLastCreated();
    if ((gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[1] == 1)) {
        DialogSetPosition(gv_singleDraft.lv_whosTurnDialog[1], c_anchorTopLeft, 30, 30);
        DialogSetPosition(gv_singleDraft.lv_whosTurnDialog[2], c_anchorTopRight, 31, 30);
    }
    else {
        DialogSetPosition(gv_singleDraft.lv_whosTurnDialog[2], c_anchorTopLeft, 30, 30);
        DialogSetPosition(gv_singleDraft.lv_whosTurnDialog[1], c_anchorTopRight, 31, 30);
    }
    auto7A1EB418_ae = gv_singleDraft.lv_whosTurnTotalPlayersSelecting;
    lv_enumint = 1;
    for ( ; ( (auto7A1EB418_ai >= 0 && lv_enumint <= auto7A1EB418_ae) || (auto7A1EB418_ai < 0 && lv_enumint >= auto7A1EB418_ae) ) ; lv_enumint += auto7A1EB418_ai ) {
        lv_tempteam = gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[lv_enumint];
        libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 176, 100, c_anchorTopLeft, lv_xoffsetTEAM[lv_tempteam], 0, StringToText(""), "Assets\\Monobattle\\pureblack.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
        libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 176, 35, c_anchorTopLeft, lv_xoffsetTEAM[lv_tempteam], 75, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[lv_enumint]][1] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[lv_enumint]], PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 1, 100, c_anchorTopLeft, lv_xoffsetTEAM[lv_tempteam], 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[lv_enumint]][2] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[lv_enumint]], PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 1, 100, c_anchorTopLeft, (lv_xoffsetTEAM[lv_tempteam] + 175), 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[lv_enumint]][3] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[lv_enumint]], PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 176, 1, c_anchorTopLeft, lv_xoffsetTEAM[lv_tempteam], 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[lv_enumint]][4] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[lv_enumint]], PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 166, 35, c_anchorTopLeft, (lv_xoffsetTEAM[lv_tempteam] + 5), 77, PlayerName(gv_singleDraft.lv_whosTurnPlayerTurnOrder[lv_enumint]), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 176, 34, c_anchorBottomLeft, lv_xoffsetTEAM[lv_tempteam], 0, StringExternal("Param/Value/286F49E6"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
        gv_singleDraft.lv_whosTurnCurrentTurnIndicator[lv_enumint] = DialogControlLastCreated();
        DialogControlSetVisible(gv_singleDraft.lv_whosTurnCurrentTurnIndicator[lv_enumint], PlayerGroupAll(), false);
        libNtve_gf_CreateDialogItemImage(gv_singleDraft.lv_whosTurnDialog[lv_tempteam], 60, 60, c_anchorTopLeft, (lv_xoffsetTEAM[lv_tempteam] + 55), 8, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        gv_singleDraft.lv_whosTurnUnitIcon[lv_enumint] = DialogControlLastCreated();
        if ((lv_tempteam == 1)) {
            lv_xoffsetTEAM[1] += 180;
        }
        else {
            lv_xoffsetTEAM[2] += 180;
        }
    }
    DialogCreate(200, 180, c_anchorTop, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_singleDraft.lv_whosTurnOMGTimeislow = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 200, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize36Bold", PlayerGroupAll());
    gv_singleDraft.lv_whosTurnOMGTimeislowtext = DialogControlLastCreated();
    Wait(10.0, c_timeGame);
    gf_SingleDraftChangePicktoNextPlayer();
    return true;
}
trigger auto_gf_SingleDraftAnimatePickArrows_Trigger = null;
void gf_SingleDraftAnimatePickArrows () {
    if (auto_gf_SingleDraftAnimatePickArrows_Trigger == null) {
        auto_gf_SingleDraftAnimatePickArrows_Trigger = TriggerCreate("auto_gf_SingleDraftAnimatePickArrows_TriggerFunc");
    }
    TriggerExecute(auto_gf_SingleDraftAnimatePickArrows_Trigger, false, false);
}
bool auto_gf_SingleDraftAnimatePickArrows_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    while ((gv_singleDraft.lv_issingledrafthappening == true)) {
        DialogControlFadeTransparency(gv_singleDraft.lv_buttonPulse[1], PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_buttonPulse[2], PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[5], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[5], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[5], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[5], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[4], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[4], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[4], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[4], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[3], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[3], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[3], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[3], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[2], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[2], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_singleDraft.lv_buttonPulse[1], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_buttonPulse[2], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[2], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[2], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[1], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[1], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsLeft[1], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_singleDraft.lv_pickUnitArrowsRight[1], PlayerGroupAll(), 0.2, 100.0);
        Wait(1.0, c_timeGame);
    }
    return true;
}
void gf_SingleDraftUpdateIconforUnitChoice (int lp_dialogItem, string lp_image) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(lp_dialogItem, lp_image, PlayerGroupAll());
    DialogControlFadeTransparency(lp_dialogItem, PlayerGroupAll(), 0.5, 0.0);
}
void gf_SingleDraftRandomlyassignunittoAFKplayer (int lp_player) {
    // Variable Declarations
    int lv_randomint;
    int racesCount = libARMB_gf_GetRacesVariationCount();
    int maxUnitChoice = MinI( 5 + racesCount * 5,libARMB_gv_unitDataCount);
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    lv_randomint = RandomInt(1, maxUnitChoice);
    while ((gv_singleDraft.lv_unitslotistaken[lv_randomint] == true)) {
        lv_randomint = RandomInt(1, maxUnitChoice);
        Wait(0.0, c_timeGame);
    }
    DialogControlSetEnabled(gv_singleDraft.lv_pickUnitButton, PlayerGroupSingle(lp_player), false);
    gv_singleDraft.lv_unitslotistaken[lv_randomint] = true;
    gv_singleDraft.lv_unitActuallyAssigned[lp_player] = gv_singleDraft.lv_unitTypes[lv_randomint];
    libARMB_gv_unitData.lv_playerUnitLink[lp_player] = gv_singleDraft.lv_unitTypes[lv_randomint];
    gf_SingleDraftMarkPlayerUnitasReady(lp_player);
    gf_SingleDraftRemoveunitfromselection(lv_randomint);
    gf_SingleDraftShowFinalUnit(lp_player);
}
void gf_SingleDraftForceassignunittoAFKplayer (int lp_player, int lp_button) {
    // Variable Declarations
    int lv_randomint;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    lv_randomint = lp_button;
    DialogControlSetEnabled(gv_singleDraft.lv_pickUnitButton, PlayerGroupSingle(lp_player), false);
    gv_singleDraft.lv_unitslotistaken[lv_randomint] = true;
    gv_singleDraft.lv_unitActuallyAssigned[lp_player] = gv_singleDraft.lv_unitTypes[lv_randomint];
    libARMB_gv_unitData.lv_playerUnitLink[lp_player] = gv_singleDraft.lv_unitTypes[lv_randomint];
    gf_SingleDraftMarkPlayerUnitasReady(lp_player);
    gf_SingleDraftRemoveunitfromselection(lv_randomint);
    gf_SingleDraftShowFinalUnit(lp_player);
}
trigger auto_gf_SingleDraftChangePicktoNextPlayer_Trigger = null;
void gf_SingleDraftChangePicktoNextPlayer () {
    if (auto_gf_SingleDraftChangePicktoNextPlayer_Trigger == null) {
        auto_gf_SingleDraftChangePicktoNextPlayer_Trigger = TriggerCreate("auto_gf_SingleDraftChangePicktoNextPlayer_TriggerFunc");
    }
    TriggerExecute(auto_gf_SingleDraftChangePicktoNextPlayer_Trigger, false, false);
}
bool auto_gf_SingleDraftChangePicktoNextPlayer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timeremaining;
    bool[8] lv_playedaudio;
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto328618F9_ae = 5;
    const int auto328618F9_ai = 1;
    const int autoACFCA2E2_ae = 5;
    const int autoACFCA2E2_ai = 1;
    const int autoB5D9C7E4_ae = 5;
    const int autoB5D9C7E4_ai = 1;
    // Variable Initialization
    // Implementation
    gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber += 1;
    DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[2], PlayerGroupAll(), false);
    lv_enumint = 1;
    for ( ; ( (auto328618F9_ai >= 0 && lv_enumint <= auto328618F9_ae) || (auto328618F9_ai < 0 && lv_enumint >= auto328618F9_ae) ) ; lv_enumint += auto328618F9_ai ) {
        DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupAll(), false);
    }
    if ((gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber <= gv_singleDraft.lv_whosTurnTotalPlayersSelecting)) {
        SoundPlayForPlayer(SoundLink("NextTurn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        UIDisplayMessage(PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), c_messageAreaDirective, StringExternal("Param/Value/12022EC3"));
        DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[1], PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), true);
        DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[2], PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), true);
        lv_enumint = 1;
        for ( ; ( (autoACFCA2E2_ai >= 0 && lv_enumint <= autoACFCA2E2_ae) || (autoACFCA2E2_ai < 0 && lv_enumint >= autoACFCA2E2_ae) ) ; lv_enumint += autoACFCA2E2_ai ) {
            DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), true);
            DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), true);
        }
        SoundPlayForPlayer(SoundLink("YourTurn", -1), c_maxPlayers, PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), 100.0, 0.0);
        DialogControlSetEnabled(gv_singleDraft.lv_pickUnitButton, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_singleDraft.lv_greenGlowy, PlayerGroupAll(), false);
        DialogControlSetVisible(gv_singleDraft.lv_pickUnitButton, PlayerGroupAll(), false);
        DialogControlSetEnabled(gv_singleDraft.lv_pickUnitButton, PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), true);
        DialogControlSetVisible(gv_singleDraft.lv_pickUnitButton, PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), true);
        DialogControlSetVisible(gv_singleDraft.lv_greenGlowy, PlayerGroupSingle(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]), true);
        if ((gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber != 1)) {
            libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][1], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][2], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][3], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][4], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
            DialogControlSetVisible(gv_singleDraft.lv_whosTurnCurrentTurnIndicator[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)], PlayerGroupAll(), false);
        }
        DialogControlSetVisible(gv_singleDraft.lv_whosTurnCurrentTurnIndicator[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]][1], Color(0.00, 68.24, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]][2], Color(0.00, 68.24, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]][3], Color(0.00, 68.24, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]][4], Color(0.00, 68.24, 0.00), PlayerGroupAll());
    }
    else {
        gv_singleDraft.lv_issingledrafthappening = false;
    }
    if ((gv_singleDraft.lv_issingledrafthappening == true)) {
        lv_timeremaining = 480;
        while ((lv_timeremaining > 0) && (gv_singleDraft.lv_unitActuallyAssigned[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]] == 0)) {
            if ((lv_timeremaining < 16) && (lv_playedaudio[0] == false)) {
                lv_playedaudio[0] = true;
                DialogControlSetEnabled(gv_singleDraft.lv_pickUnitButton, PlayerGroupAll(), false);
                DialogControlSetVisible(gv_singleDraft.lv_pickUnitButton, PlayerGroupAll(), false);
                libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/BD9365FE"), PlayerGroupAll());
                SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                lv_enumint = 1;
                for ( ; ( (autoB5D9C7E4_ai >= 0 && lv_enumint <= autoB5D9C7E4_ae) || (autoB5D9C7E4_ai < 0 && lv_enumint >= autoB5D9C7E4_ae) ) ; lv_enumint += autoB5D9C7E4_ai ) {
                    DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupAll(), false);
                    DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupAll(), false);
                }
                DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[1], PlayerGroupAll(), false);
                DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[2], PlayerGroupAll(), false);
            }
            else {
                if ((lv_timeremaining < 32) && (lv_playedaudio[1] == false)) {
                    lv_playedaudio[1] = true;
                    libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/C5142CE9"), PlayerGroupAll());
                    SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                    if ((lv_timeremaining < 48) && (lv_playedaudio[2] == false)) {
                        lv_playedaudio[2] = true;
                        libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/B76C365C"), PlayerGroupAll());
                        SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    }
                    else {
                        if ((lv_timeremaining < 64) && (lv_playedaudio[3] == false)) {
                            lv_playedaudio[3] = true;
                            libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/5B9AA3A9"), PlayerGroupAll());
                            SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        }
                        else {
                            if ((lv_timeremaining < 80) && (lv_playedaudio[4] == false)) {
                                lv_playedaudio[4] = true;
                                libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/76F62963"), PlayerGroupAll());
                                SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                            }
                            else {
                                if ((lv_timeremaining < 96) && (lv_playedaudio[5] == false)) {
                                    lv_playedaudio[5] = true;
                                    libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/EC06DB18"), PlayerGroupAll());
                                    SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                }
                                else {
                                    if ((lv_timeremaining < 112) && (lv_playedaudio[6] == true)) {
                                        lv_playedaudio[6] = true;
                                        libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/5AC1720A"), PlayerGroupAll());
                                        SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                    }
                                    else {
                                        if ((lv_timeremaining < 128) && (lv_playedaudio[7] == true)) {
                                            lv_playedaudio[7] = true;
                                            libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringExternal("Param/Value/212923FA"), PlayerGroupAll());
                                            SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Wait(0.0625, c_timeGame);
            if ((gv_singleDraft.lv_testingSkip == true)) {
                gv_singleDraft.lv_testingSkip = false;
                lv_timeremaining = 0;
            }
            else {
                lv_timeremaining -= 1;
            }
        }
        if ((gv_singleDraft.lv_unitActuallyAssigned[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]] == 0) && (gv_singleDraft.lv_buttonCurrentlySelected[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]] != 0)) {
            gf_SingleDraftForceassignunittoAFKplayer(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber], gv_singleDraft.lv_buttonCurrentlySelected[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]]);
        }
        else {
            if ((gv_singleDraft.lv_unitActuallyAssigned[gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]] == 0)) {
                gf_SingleDraftRandomlyassignunittoAFKplayer(gv_singleDraft.lv_whosTurnPlayerTurnOrder[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber]);
            }
        }
        libNtve_gf_SetDialogItemText(gv_singleDraft.lv_whosTurnOMGTimeislowtext, StringToText(""), PlayerGroupAll());
        Wait(2.0, c_timeGame);
        gf_SingleDraftChangePicktoNextPlayer();
    }
    else {
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][1], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][2], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][3], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(gv_singleDraft.lv_whosTurnFrameImages[gv_singleDraft.lv_whosTurnPlayerTurnOrder[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]][4], gv_singleDraft.lv_whosTurnTeamcolorcodes[gv_singleDraft.lv_whosTurnwhichteamselectswhichslot[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)]], PlayerGroupAll());
        DialogControlSetVisible(gv_singleDraft.lv_whosTurnCurrentTurnIndicator[(gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber - 1)], PlayerGroupAll(), false);
        gf_SingleDraftEndSingleDraft();
    }
    return true;
}
void gf_SingleDraftUpdateUnitTempSelection (int lp_player) {
    // Variable Declarations
    int lv_tempnumber;
    int lv_newnumber;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((gv_singleDraft.lv_issingledrafthappening == true) && (gv_singleDraft.lv_buttonCurrentlySelected[lp_player] != 0) && (gv_singleDraft.lv_unitActuallyAssigned[lp_player] == 0)) {
        createPreviewUnit(lp_player);
    }
}
void gf_SingleDraftShowFinalUnit (int lp_player) {
    // Variable Declarations
    int lv_tempnumber;
    int lv_newnumber;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    createPreviewUnit(lp_player);
    gf_SingleDraftUpdateIconforUnitChoice(gv_singleDraft.lv_whosTurnUnitIcon[gv_singleDraft.lv_whosTurnCurrentTurnSlotNumber], libARMB_gv_unitData.lv_thumbnail[gv_singleDraft.lv_unitActuallyAssigned[lp_player]]);
}
void gf_SingleDraftRemoveunitfromselection (int lp_unitSlot) {
    // Variable Declarations
    int lv_enumplayer;
    // Automatic Variable Declarations
    playergroup auto15C40553_g;
    // Variable Initialization
    // Implementation
    DialogControlSetVisible(gv_singleDraft.lv_unitButtonHotspots[lp_unitSlot], PlayerGroupAll(), false);
    DialogControlFadeTransparency(gv_singleDraft.lv_unitButtonBG[lp_unitSlot], PlayerGroupAll(), 0.5, 75.0);
    DialogControlFadeTransparency(gv_singleDraft.lv_unitButtonImage[lp_unitSlot], PlayerGroupAll(), 0.5, 55.0);
    auto15C40553_g = PlayerGroupActive();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto15C40553_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((gv_singleDraft.lv_buttonCurrentlySelected[lv_enumplayer] == lp_unitSlot)) {
            DialogControlSetPosition(gv_singleDraft.lv_unitButtonBG[gv_singleDraft.lv_buttonCurrentlySelected[lv_enumplayer]], PlayerGroupSingle(lv_enumplayer), c_anchorTopLeft, 0, 0);
            if ((gv_singleDraft.lv_unitActuallyAssigned[lv_enumplayer] == 0)) {
                gv_singleDraft.lv_buttonCurrentlySelected[lv_enumplayer] = 0;
                libARMB_gv_unitData.lv_playerUnitLink[lv_enumplayer] = 0;
            }
            gf_SingleDraftUpdateUnitTempSelection(lv_enumplayer);
        }
    }
}
void gf_SingleDraftEndSingleDraft () {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto865E9DB1_ae = MAX_CHOICES;
    const int auto865E9DB1_ai = 1;
    const int auto68102BEB_ae = 8;
    int auto68102BEB_var;
    // Variable Initialization
    // Implementation
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    lv_enumint = 1;
    for ( ; ( (auto865E9DB1_ai >= 0 && lv_enumint <= auto865E9DB1_ae) || (auto865E9DB1_ai < 0 && lv_enumint >= auto865E9DB1_ae) ) ; lv_enumint += auto865E9DB1_ai ) {
        DialogDestroy(gv_singleDraft.lv_unitButtonDialogs[lv_enumint]);
    }
    DialogDestroy(gv_singleDraft.lv_unitSelectionDialog);
    DialogDestroy(gv_singleDraft.lv_whosTurnOMGTimeislow);
    Wait(5.0, c_timeGame);
    gf_WarpOutAnimation();
    auto68102BEB_var = 1;
    for ( ; auto68102BEB_var <= auto68102BEB_ae; auto68102BEB_var += 1 ) {
        if ((gv_selectionArena.lv_playerNameTags[auto68102BEB_var] != c_textTagNone)) {
            TextTagDestroy(gv_selectionArena.lv_playerNameTags[auto68102BEB_var]);
        }
        if ((gv_selectionArena.lv_yOUtexttag[auto68102BEB_var] != c_textTagNone)) {
            TextTagDestroy(gv_selectionArena.lv_yOUtexttag[auto68102BEB_var]);
        }
    }
    DialogDestroy(gv_singleDraft.lv_unitSelectionDialog);
    DialogDestroy(gv_singleDraft.lv_whosTurnDialog[1]);
    DialogDestroy(gv_singleDraft.lv_whosTurnDialog[2]);
    gf_Cleanupactorsunitsandstart();
}
void gf_SingleDraftMarkPlayerUnitasReady (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_selectionArena.lv_playerisreadytostart[lp_player] = true;
    if ((PlayerGroupHasPlayer(lv_playersonteam[1], lp_player) == true)) {
        ActorSend(gv_selectionArena.lv_platforms[gv_selectionArena.lv_playerspotpointassignment[lp_player]], "AnimPlay Stand Work,Start PlayForever,NonLooping,DontResetOnUnhide");
    }
    else {
        ActorSend(gv_selectionArena.lv_platforms[(gv_selectionArena.lv_playerspotpointassignment[lp_player] + 4)], "AnimPlay Stand Work,Start PlayForever,NonLooping,DontResetOnUnhide");
    }
    gf_SingleDraftUpdatetexttags();
}
//--------------------------------------------------------------------------------------------------
// Trigger: Single Draft - Click Unit Buttons
//--------------------------------------------------------------------------------------------------
bool gt_SingleDraftClickUnitButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    if (testConds) {
        if (!((gv_singleDraft.lv_unitActuallyAssigned[EventPlayer()] == 0))) {
            return false;
        }
    }
    if (!runActions) {
        return true;
    }
    for ( lv_enumint = 1; lv_enumint <= MAX_CHOICES ; lv_enumint += 1 ) {
        if ((EventDialogControl() == gv_singleDraft.lv_unitButtonHotspots[lv_enumint]) && (gv_singleDraft.lv_unitslotistaken[lv_enumint] == false) && (lv_enumint != gv_singleDraft.lv_buttonCurrentlySelected[EventPlayer()])) {
            if ((gv_singleDraft.lv_buttonCurrentlySelected[EventPlayer()] != 0)) {
                DialogControlSetPosition(gv_singleDraft.lv_unitButtonBG[gv_singleDraft.lv_buttonCurrentlySelected[EventPlayer()]], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, 0);
            }
            gv_singleDraft.lv_buttonCurrentlySelected[EventPlayer()] = lv_enumint;
            libARMB_gv_unitData.lv_playerUnitLink[EventPlayer()] = gv_singleDraft.lv_unitTypes[lv_enumint];
            DialogControlSetPosition(gv_singleDraft.lv_unitButtonBG[gv_singleDraft.lv_buttonCurrentlySelected[EventPlayer()]], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, -100);
            gf_SingleDraftUpdateUnitTempSelection(EventPlayer());
            break;
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SingleDraftClickUnitButtons_Init () {
    gt_SingleDraftClickUnitButtons = TriggerCreate("gt_SingleDraftClickUnitButtons_Func");
    TriggerAddEventDialogControl(gt_SingleDraftClickUnitButtons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Single Draft - Click Pick Button
//--------------------------------------------------------------------------------------------------
bool gt_SingleDraftClickPickButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buttonSlot;
    int lv_enumint;
    // Automatic Variable Declarations
    const int autoD84BF70C_ae = 5;
    const int autoD84BF70C_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_singleDraft.lv_pickUnitButton))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_singleDraft.lv_buttonCurrentlySelected[EventPlayer()] != 0)) {
        DialogControlSetEnabled(gv_singleDraft.lv_pickUnitButton, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_singleDraft.lv_pickUnitButton, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_singleDraft.lv_greenGlowy, PlayerGroupSingle(EventPlayer()), false);
        lv_buttonSlot = gv_singleDraft.lv_buttonCurrentlySelected[EventPlayer()];
        gv_singleDraft.lv_unitslotistaken[lv_buttonSlot] = true;
        gv_singleDraft.lv_unitActuallyAssigned[EventPlayer()] = gv_singleDraft.lv_unitTypes[lv_buttonSlot];
        libARMB_gv_unitData.lv_playerUnitLink[EventPlayer()] = gv_singleDraft.lv_unitTypes[lv_buttonSlot];
        gf_SingleDraftMarkPlayerUnitasReady(EventPlayer());
        gf_SingleDraftRemoveunitfromselection(lv_buttonSlot);
        gf_SingleDraftShowFinalUnit(EventPlayer());
        lv_enumint = 1;
        for ( ; ( (autoD84BF70C_ai >= 0 && lv_enumint <= autoD84BF70C_ae) || (autoD84BF70C_ai < 0 && lv_enumint >= autoD84BF70C_ae) ) ; lv_enumint += autoD84BF70C_ai ) {
            DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_singleDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupSingle(EventPlayer()), false);
        }
        DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_singleDraft.lv_buttonPulse[2], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/EFBD93B3"));
        SoundPlayForPlayer(SoundLink("ClickError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_SingleDraftClickPickButton_Init () {
    gt_SingleDraftClickPickButton = TriggerCreate("gt_SingleDraftClickPickButton_Func");
    TriggerAddEventDialogControl(gt_SingleDraftClickPickButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: CheckOnlyFlyers
//--------------------------------------------------------------------------------------------------
trigger gt_Checkforonlyfloatersafter2minutes;
void gf_Checkforonlyfloaters ();
void gf_Startcountdown (int lp_player, unit lp_unit);
void gf_Startlosinglife (unit lp_unit);
//--------------------------------------------------------------------------------------------------
// Trigger: Check for only floaters after 2 minutes
//--------------------------------------------------------------------------------------------------
bool gt_Checkforonlyfloatersafter2minutes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_checking;
    int lv_totalterran;
    // Automatic Variable Declarations
    playergroup auto3572B9B0_g;
    int auto3572B9B0_var;
    // Variable Initialization
    // Actions
    if (!runActions) {
        return true;
    }
    Wait(120.0, c_timeGame);
    auto3572B9B0_g = PlayerGroupAll();
    auto3572B9B0_var = -1;
    while (true) {
        auto3572B9B0_var = PlayerGroupNextPlayer(auto3572B9B0_g, auto3572B9B0_var);
        if (auto3572B9B0_var < 0) { break; }
        if ((PlayerRace(auto3572B9B0_var) == "Terr")) {
            lv_totalterran += 1;
        }
    }
    if ((lv_totalterran > 0)) {
        lv_checking = true;
    }
    while ((lv_checking == true)) {
        gf_Checkforonlyfloaters();
        Wait(10.0, c_timeGame);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Checkforonlyfloatersafter2minutes_Init () {
    gt_Checkforonlyfloatersafter2minutes = TriggerCreate("gt_Checkforonlyfloatersafter2minutes_Func");
    TriggerAddEventMapInit(gt_Checkforonlyfloatersafter2minutes);
}
trigger auto_gf_Checkforonlyfloaters_Trigger = null;
void gf_Checkforonlyfloaters () {
    if (auto_gf_Checkforonlyfloaters_Trigger == null) {
        auto_gf_Checkforonlyfloaters_Trigger = TriggerCreate("auto_gf_Checkforonlyfloaters_TriggerFunc");
    }
    TriggerExecute(auto_gf_Checkforonlyfloaters_Trigger, false, false);
}
bool auto_gf_Checkforonlyfloaters_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumplayer;
    int lv_totalstructures;
    int lv_totalflying;
    // Automatic Variable Declarations
    playergroup autoD92A9372_g;
    unitgroup auto3C9E17AD_g;
    int auto3C9E17AD_u;
    unit auto3C9E17AD_var;
    unitgroup autoAF422E45_g;
    int autoAF422E45_u;
    unit autoAF422E45_var;
    unitgroup autoEADE9BCD_g;
    int autoEADE9BCD_u;
    unit autoEADE9BCD_var;
    unitgroup autoC688C12C_g;
    int autoC688C12C_u;
    unit autoC688C12C_var;
    unitgroup autoB78076D9_g;
    int autoB78076D9_u;
    unit autoB78076D9_var;
    unitgroup auto14FDFB03_g;
    int auto14FDFB03_u;
    unit auto14FDFB03_var;
    unitgroup auto4870FE08_g;
    int auto4870FE08_u;
    unit auto4870FE08_var;
    unitgroup auto33BEA348_g;
    int auto33BEA348_u;
    unit auto33BEA348_var;
    unitgroup auto050E6A49_g;
    int auto050E6A49_u;
    unit auto050E6A49_var;
    unitgroup autoF2F57DA7_g;
    int autoF2F57DA7_u;
    unit autoF2F57DA7_var;
    unitgroup autoC0DD91BA_g;
    int autoC0DD91BA_u;
    unit autoC0DD91BA_var;
    // Variable Initialization
    // Implementation
    autoD92A9372_g = PlayerGroupAll();
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(autoD92A9372_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        lv_totalstructures = 0;
        lv_totalflying = 0;
        if ((PlayerRace(lv_enumplayer) == "Terr")) {
            auto3C9E17AD_g = UnitGroup(null, lv_enumplayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto3C9E17AD_u = UnitGroupCount(auto3C9E17AD_g, c_unitCountAll);
            for (;; auto3C9E17AD_u -= 1) {
                auto3C9E17AD_var = UnitGroupUnitFromEnd(auto3C9E17AD_g, auto3C9E17AD_u);
                if (auto3C9E17AD_var == null) { break; }
                lv_totalstructures += 1;
            }
            autoAF422E45_g = UnitGroup("BarracksFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoAF422E45_u = UnitGroupCount(autoAF422E45_g, c_unitCountAll);
            for (;; autoAF422E45_u -= 1) {
                autoAF422E45_var = UnitGroupUnitFromEnd(autoAF422E45_g, autoAF422E45_u);
                if (autoAF422E45_var == null) { break; }
                lv_totalflying += 1;
            }
            autoEADE9BCD_g = UnitGroup("CommandCenterFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEADE9BCD_u = UnitGroupCount(autoEADE9BCD_g, c_unitCountAll);
            for (;; autoEADE9BCD_u -= 1) {
                autoEADE9BCD_var = UnitGroupUnitFromEnd(autoEADE9BCD_g, autoEADE9BCD_u);
                if (autoEADE9BCD_var == null) { break; }
                lv_totalflying += 1;
            }
            autoC688C12C_g = UnitGroup("FactoryFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC688C12C_u = UnitGroupCount(autoC688C12C_g, c_unitCountAll);
            for (;; autoC688C12C_u -= 1) {
                autoC688C12C_var = UnitGroupUnitFromEnd(autoC688C12C_g, autoC688C12C_u);
                if (autoC688C12C_var == null) { break; }
                lv_totalflying += 1;
            }
            autoB78076D9_g = UnitGroup("OrbitalCommandFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoB78076D9_u = UnitGroupCount(autoB78076D9_g, c_unitCountAll);
            for (;; autoB78076D9_u -= 1) {
                autoB78076D9_var = UnitGroupUnitFromEnd(autoB78076D9_g, autoB78076D9_u);
                if (autoB78076D9_var == null) { break; }
                lv_totalflying += 1;
            }
            auto14FDFB03_g = UnitGroup("StarportFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto14FDFB03_u = UnitGroupCount(auto14FDFB03_g, c_unitCountAll);
            for (;; auto14FDFB03_u -= 1) {
                auto14FDFB03_var = UnitGroupUnitFromEnd(auto14FDFB03_g, auto14FDFB03_u);
                if (auto14FDFB03_var == null) { break; }
                lv_totalflying += 1;
            }
            if ((lv_totalstructures == lv_totalflying)) {
                auto4870FE08_g = UnitGroup("BarracksFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto4870FE08_u = UnitGroupCount(auto4870FE08_g, c_unitCountAll);
                for (;; auto4870FE08_u -= 1) {
                    auto4870FE08_var = UnitGroupUnitFromEnd(auto4870FE08_g, auto4870FE08_u);
                    if (auto4870FE08_var == null) { break; }
                    gf_Startcountdown(lv_enumplayer, auto4870FE08_var);
                }
                auto33BEA348_g = UnitGroup("CommandCenterFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto33BEA348_u = UnitGroupCount(auto33BEA348_g, c_unitCountAll);
                for (;; auto33BEA348_u -= 1) {
                    auto33BEA348_var = UnitGroupUnitFromEnd(auto33BEA348_g, auto33BEA348_u);
                    if (auto33BEA348_var == null) { break; }
                    gf_Startcountdown(lv_enumplayer, auto33BEA348_var);
                }
                auto050E6A49_g = UnitGroup("FactoryFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto050E6A49_u = UnitGroupCount(auto050E6A49_g, c_unitCountAll);
                for (;; auto050E6A49_u -= 1) {
                    auto050E6A49_var = UnitGroupUnitFromEnd(auto050E6A49_g, auto050E6A49_u);
                    if (auto050E6A49_var == null) { break; }
                    gf_Startcountdown(lv_enumplayer, auto050E6A49_var);
                }
                autoF2F57DA7_g = UnitGroup("OrbitalCommandFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoF2F57DA7_u = UnitGroupCount(autoF2F57DA7_g, c_unitCountAll);
                for (;; autoF2F57DA7_u -= 1) {
                    autoF2F57DA7_var = UnitGroupUnitFromEnd(autoF2F57DA7_g, autoF2F57DA7_u);
                    if (autoF2F57DA7_var == null) { break; }
                    gf_Startcountdown(lv_enumplayer, autoF2F57DA7_var);
                }
                autoC0DD91BA_g = UnitGroup("StarportFlying", lv_enumplayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoC0DD91BA_u = UnitGroupCount(autoC0DD91BA_g, c_unitCountAll);
                for (;; autoC0DD91BA_u -= 1) {
                    autoC0DD91BA_var = UnitGroupUnitFromEnd(autoC0DD91BA_g, autoC0DD91BA_u);
                    if (autoC0DD91BA_var == null) { break; }
                    gf_Startcountdown(lv_enumplayer, autoC0DD91BA_var);
                }
            }
        }
    }
    return true;
}
trigger auto_gf_Startcountdown_Trigger = null;
int auto_gf_Startcountdown_lp_player;
unit auto_gf_Startcountdown_lp_unit;
void gf_Startcountdown (int lp_player, unit lp_unit) {
    auto_gf_Startcountdown_lp_player = lp_player;
    auto_gf_Startcountdown_lp_unit = lp_unit;
    if (auto_gf_Startcountdown_Trigger == null) {
        auto_gf_Startcountdown_Trigger = TriggerCreate("auto_gf_Startcountdown_TriggerFunc");
    }
    TriggerExecute(auto_gf_Startcountdown_Trigger, false, false);
}
bool auto_gf_Startcountdown_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_Startcountdown_lp_player;
    unit lp_unit = auto_gf_Startcountdown_lp_unit;
    // Variable Declarations
    int lv_timeremaining;
    int lv_texttag;
    string lv_unittype;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeremaining = 30;
    lv_texttag = c_textTagNone;
    // Implementation
    lv_unittype = UnitGetType(lp_unit);
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/3EF7BCEB"));
    Wait(10.0, c_timeReal);
    if ((UnitGetType(lp_unit) == lv_unittype) && (UnitIsAlive(lp_unit) == true)) {
        gf_Startlosinglife(lp_unit);
    }
    return true;
}
trigger auto_gf_Startlosinglife_Trigger = null;
unit auto_gf_Startlosinglife_lp_unit;
void gf_Startlosinglife (unit lp_unit) {
    auto_gf_Startlosinglife_lp_unit = lp_unit;
    if (auto_gf_Startlosinglife_Trigger == null) {
        auto_gf_Startlosinglife_Trigger = TriggerCreate("auto_gf_Startlosinglife_TriggerFunc");
    }
    TriggerExecute(auto_gf_Startlosinglife_Trigger, false, false);
}
bool auto_gf_Startlosinglife_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_Startlosinglife_lp_unit;
    // Variable Declarations
    string lv_unittype;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    lv_unittype = UnitGetType(lp_unit);
    while ((UnitGetType(lp_unit) == lv_unittype) && (UnitIsAlive(lp_unit) == true)) {
        UnitSetPropertyFixed(lp_unit, c_unitPropLife, (UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent) - 5.0));
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Tier Draft
//--------------------------------------------------------------------------------------------------
struct gs_TierDraft {
    bool lv_istierdrafthappening;
    playergroup[3] lv_playersRemainingtobePlaced;
    playergroup[3] lv_playersonteam;
    int lv_unitSelectionDialog;
    int[21] lv_unitButtonDialogs;
    int[21] lv_unitButtonHotspots;
    int[21] lv_unitButtonImage;
    int[21] lv_unitButtonBG;
    int[21] lv_unitTypes;
    bool[21] lv_unitslotistaken;
    int lv_pickUnitButton;
    int lv_greenGlowy;
    int[6] lv_pickUnitArrowsLeft;
    int[6] lv_pickUnitArrowsRight;
    int[3] lv_buttonPulse;
    int[9] lv_buttonCurrentlySelected;
    int[9] lv_unitActuallyAssigned;
    int[3] lv_whosTurnYourTeam;
    int[3] lv_whosTurnYourTeamText;
    int[3] lv_whosTurnDialog;
    int lv_whosTurnTotalPlayersSelecting;
    int[3] lv_whosTurnTotalPlayersOnTeam;
    int[9] lv_whosTurnPlayerTurnOrder;
    color[3] lv_whosTurnTeamcolorcodes;
    color[3] lv_whosTurnTeamcolorcodesdark;
    int lv_whosTurnCurrentTurnSlotNumber;
    int[9] lv_whosTurnwhichteamselectswhichslot;
    int[3] lv_whosTurnCaptainTurnText;
    bool lv_testingSkip;
    int lv_blackOverlayDialog;
    int lv_blackOverlay;
    int[9] lv_whatteampicksinwhatorder;
    int[3] lv_xoffsetTEAM;
    int lv_optinDialog;
    int lv_optinDialogTitle;
    int lv_optinDialogTimeText;
    int[3] lv_optinDialogButtons;
    int[3] lv_tierDraftCaptain;
    playergroup[3] lv_optinsforteam;
    int[3] lv_optinDialogSelectedCaptainsText;
    int[4] lv_tierSelectionDialogPanels;
    int[4][99] lv_tierSelectionUnitButtons;
    int[4][99] lv_tierSelectionUnitButtonHotspots;
    int[4][99] lv_tierSelectionUnitButtonImage;
    int[4][99] lv_tierSelectionUnitButtonBG;
    int[4][99] lv_tierSelectionTierUnitTypes;
    int[4] lv_tierSelectionTotalUnitsinEachTier;
    int lv_tierSelectionPickTierDialog;
    int[4] lv_tierSelectionChangeTierButtonsBG;
    int[4] lv_tierSelectionChangeTierButtonsText;
    int[4] lv_tierSelectionChangeTierButtonsHotspot;
    int lv_tierSelectionInstructionText;
    int lv_tierSelectionCurrentTurnNumber;
    int lv_tierSelectionPickUnitButtonDialog;
    int lv_tierSelectionPickUnitButton;
    int[6] lv_tierSelectionReadyArrowsLeft;
    int[6] lv_tierSelectionReadyArrowsRight;
    int lv_tierSelectionPickUnitButtonGlowy;
    int[4] lv_tierSelectionButtonPulse;
    int lv_tierSelectionOMGTimeislow;
    int lv_tierSelectionOMGTimeislowtext;
    int[3][4][99] lv_tierSelectionUnitSlotisCurrentlyTaken;
    int[3][4] lv_tierSelectionWhichunitiscurrentlyselected;
    int[3] lv_tierSelectionWhichtieriscurrentlyselected;
    int[3][5] lv_tierSelectionActualPicks;
    int[3][5] lv_tierSelectionActualPicksUnitID;
    bool[3] lv_tierSelectionTier2Slot1Picked;
    bool lv_tierSelectionUnitPickedSkipTimer;
    int[3][5][5] lv_whosTurnFrameImages;
    int[3][5] lv_whosTurnUnitIcon;
    int[3][5] lv_whosTurnCurrentTurnIndicator;
    int lv_pickActualSelectionDialog;
    int lv_pickActualInstructionText;
    int[5] lv_pickActualUnitButtonDialogs;
    int[5] lv_pickActualUnitButtonBG;
    int[5] lv_pickActualUnitButtonImage;
    int[5] lv_pickActualUnitButtonHotspot;
    playergroup[3] lv_pickActualPlayersLefttoVote;
    int[9] lv_pickActualChoiceQueue;
    int[9] lv_pickActualChoiceSuccess;
    bool lv_pickActualCheckforPicks;
};
//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
gs_TierDraft gv_tierDraft;
int[113] gv_tierDraftUnitArray;
//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_TierDraftRandomizeUnitarray ();
void gf_TierDraftInitTierDraft ();
void gf_TierDraftCreateSelectionBox (int lp_team, int lp_slot, int lp_tier);
void gf_TierDraftStartSingleDraftCaptainOptin ();
void gf_TierDraftStartSingleDraftTierSelection ();
void gf_TierDraftRemoveallexistingtempimagesforteam (int lp_team);
void gf_TierDraftCreatearrowforpickunittierselection (int lp_xoffset, int lp_yoffset, int lp_index, bool lp_left);
void gf_TierDraftTierSelectionanimatepickarrows ();
void gf_TierDraftChangePicktoNextPlayer ();
void gf_TierDraftHighlightTierForTeam (int lp_tier, int lp_team);
void gf_TierDraftRemoveunitfromselectionforteam (int lp_team, int lp_tier, int lp_unitSlot);
void gf_TierDraftDisableTierforTeam (int lp_team, int lp_tier);
void gf_TierDraftAutoselectunitiftimerunsout (int lp_team);
void gf_TierDraftInitPickActualUnits ();
void gf_TierDraftCheckforpicks ();
void gf_TierDraftAssignaunitsuccessfully (int lp_player, int lp_unitID, int lp_team, int lp_slot);
void gf_TierDraftRandomlyassignunittoAFKplayer (int lp_player);
void gf_TierDraftShowFinalUnit (int lp_player);
void gf_TierDraftUpdatetexttags ();
void gf_TierDraftMarkPlayerUnitasReady (int lp_player);
void gf_TierDraftEndTierDraft ();
void gt_TierDraftClickOptin_Init();
void gt_TierDraftClickOptout_Init();
void gt_TierDraftClickTierSwitchButtons_Init();
void gt_TierDraftClickPickUnitButton_Init();
void gt_TierDraftUnitButtonT1_Init();
void gt_TierDraftUnitButtonT2_Init();
void gt_TierDraftUnitButtonT3_Init();
void gt_TierDraftClickPickButton_Init();
//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_TierDraftClickOptin;
trigger gt_TierDraftClickOptout;
trigger gt_TierDraftClickTierSwitchButtons;
trigger gt_TierDraftClickPickUnitButton;
trigger gt_TierDraftUnitButtonT1;
trigger gt_TierDraftUnitButtonT2;
trigger gt_TierDraftUnitButtonT3;
trigger gt_TierDraftClickPickButton;
//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_TierDraftRandomizeUnitarray () {
    // Variable Declarations
    int lv_index;
    int lv_indexRandom;
    int lv_scoreSwap;
    // Automatic Variable Declarations
    int auto5FCB921F_ae;
    const int auto5FCB921F_ai = 1;
    // Variable Initialization
    // Implementation
    auto5FCB921F_ae = (libARMB_gv_unitDataCount - 1);
    lv_index = 1;
    for ( ; ( (auto5FCB921F_ai >= 0 && lv_index <= auto5FCB921F_ae) || (auto5FCB921F_ai < 0 && lv_index >= auto5FCB921F_ae) ) ; lv_index += auto5FCB921F_ai ) {
        lv_indexRandom = RandomInt(lv_index, libARMB_gv_unitDataCount);
        if ((lv_indexRandom != lv_index)) {
            lv_scoreSwap = gv_tierDraftUnitArray[lv_indexRandom];
            gv_tierDraftUnitArray[lv_indexRandom] = gv_tierDraftUnitArray[lv_index];
            gv_tierDraftUnitArray[lv_index] = lv_scoreSwap;
        }
    }
}
trigger auto_gf_TierDraftInitTierDraft_Trigger = null;
void gf_TierDraftInitTierDraft () {
    if (auto_gf_TierDraftInitTierDraft_Trigger == null) {
        auto_gf_TierDraftInitTierDraft_Trigger = TriggerCreate("auto_gf_TierDraftInitTierDraft_TriggerFunc");
    }
    TriggerExecute(auto_gf_TierDraftInitTierDraft_Trigger, false, false);
}
bool auto_gf_TierDraftInitTierDraft_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_xoffset;
    int lv_yoffset;
    int lv_arrayslot;
    int lv_whichteamisselecting;
    int lv_randomint;
    int lv_randomplayer;
    int lv_whosturnwidth;
    int lv_tempteam;
    int[3] lv_xoffsetTEAM;
    int lv_whatteamgoesfirst;
    int init_i1;
    int init_j1;
    int init_k1;
    // Automatic Variable Declarations
    playergroup autoADA1B30C_g;
    playergroup auto5D282CE6_g;
    const int auto46A8B932_ae = 5;
    const int auto46A8B932_ai = 1; 
    playergroup autoC719170D_g;
   // DialogSetVisible(gv_draftSelection.lv_starsDialog, PlayerGroupActive(), false);
    UISetWorldVisible(PlayerGroupActive(), true);
    autoC719170D_g = PlayerGroupActive();
    lv_enumint = -1;
    while (true) {
        lv_enumint = PlayerGroupNextPlayer(autoC719170D_g, lv_enumint);
        if (lv_enumint < 0) { break; }
        CameraSetValue(lv_enumint, c_cameraValueDistance, 41.0, 3.0, -1, 10.0);
    }
    gt_TierDraftClickOptin_Init();
    gt_TierDraftClickOptout_Init();
    gt_TierDraftClickTierSwitchButtons_Init();
    gt_TierDraftClickPickUnitButton_Init();
    gt_TierDraftUnitButtonT1_Init();
    gt_TierDraftUnitButtonT2_Init();
    gt_TierDraftUnitButtonT3_Init();
    gt_TierDraftClickPickButton_Init();
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_playersRemainingtobePlaced[init_i1] = PlayerGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_playersonteam[init_i1] = PlayerGroupEmpty();
    }
    gv_tierDraft.lv_unitSelectionDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        gv_tierDraft.lv_unitButtonDialogs[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        gv_tierDraft.lv_unitButtonHotspots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        gv_tierDraft.lv_unitButtonImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 20; init_i1 += 1) {
        gv_tierDraft.lv_unitButtonBG[init_i1] = c_invalidDialogControlId;
    }
    gv_tierDraft.lv_pickUnitButton = c_invalidDialogControlId;
    gv_tierDraft.lv_greenGlowy = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_tierDraft.lv_pickUnitArrowsLeft[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_tierDraft.lv_pickUnitArrowsRight[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_buttonPulse[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_whosTurnYourTeam[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_whosTurnYourTeamText[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_whosTurnDialog[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_whosTurnTeamcolorcodes[init_i1] = Color(0,0,0);
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_whosTurnTeamcolorcodesdark[init_i1] = Color(0,0,0);
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_whosTurnCaptainTurnText[init_i1] = c_invalidDialogControlId;
    }
    gv_tierDraft.lv_blackOverlayDialog = c_invalidDialogId;
    gv_tierDraft.lv_blackOverlay = c_invalidDialogControlId;
    gv_tierDraft.lv_optinDialog = c_invalidDialogId;
    gv_tierDraft.lv_optinDialogTitle = c_invalidDialogControlId;
    gv_tierDraft.lv_optinDialogTimeText = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_optinDialogButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_optinsforteam[init_i1] = PlayerGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_optinDialogSelectedCaptainsText[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_tierDraft.lv_tierSelectionDialogPanels[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 98; init_j1 += 1) {
            gv_tierDraft.lv_tierSelectionUnitButtons[init_i1][init_j1] = c_invalidDialogId;
        }
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 98; init_j1 += 1) {
            gv_tierDraft.lv_tierSelectionUnitButtonHotspots[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 98; init_j1 += 1) {
            gv_tierDraft.lv_tierSelectionUnitButtonImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 98; init_j1 += 1) {
            gv_tierDraft.lv_tierSelectionUnitButtonBG[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_tierDraft.lv_tierSelectionPickTierDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_tierDraft.lv_tierSelectionChangeTierButtonsText[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[init_i1] = c_invalidDialogControlId;
    }
    gv_tierDraft.lv_tierSelectionInstructionText = c_invalidDialogControlId;
    gv_tierDraft.lv_tierSelectionPickUnitButtonDialog = c_invalidDialogId;
    gv_tierDraft.lv_tierSelectionPickUnitButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_tierDraft.lv_tierSelectionReadyArrowsLeft[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_tierDraft.lv_tierSelectionReadyArrowsRight[init_i1] = c_invalidDialogControlId;
    }
    gv_tierDraft.lv_tierSelectionPickUnitButtonGlowy = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_tierDraft.lv_tierSelectionButtonPulse[init_i1] = c_invalidDialogControlId;
    }
    gv_tierDraft.lv_tierSelectionOMGTimeislow = c_invalidDialogId;
    gv_tierDraft.lv_tierSelectionOMGTimeislowtext = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 4; init_j1 += 1) {
            for (init_k1 = 0; init_k1 <= 4; init_k1 += 1) {
                gv_tierDraft.lv_whosTurnFrameImages[init_i1][init_j1][init_k1] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 4; init_j1 += 1) {
            gv_tierDraft.lv_whosTurnUnitIcon[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 4; init_j1 += 1) {
            gv_tierDraft.lv_whosTurnCurrentTurnIndicator[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_tierDraft.lv_pickActualSelectionDialog = c_invalidDialogId;
    gv_tierDraft.lv_pickActualInstructionText = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_tierDraft.lv_pickActualUnitButtonDialogs[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_tierDraft.lv_pickActualUnitButtonBG[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_tierDraft.lv_pickActualUnitButtonImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
        gv_tierDraft.lv_pickActualUnitButtonHotspot[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_tierDraft.lv_pickActualPlayersLefttoVote[init_i1] = PlayerGroupEmpty();
    }
	libARMB_gf_initUnitData();
    // Variable Initialization
    // Implementation
    if ((libARMB_gv_testing == true)) {
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[1], 1);
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[1], 2);
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[1], 3);
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[1], 4);
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[2], 5);
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[2], 6);
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[2], 7);
        PlayerGroupAdd(gv_tierDraft.lv_playersonteam[2], 8);
    }
    else {
        autoADA1B30C_g = GameAttributePlayersForTeam(1);
        lv_enumint = -1;
        while (true) {
            lv_enumint = PlayerGroupNextPlayer(autoADA1B30C_g, lv_enumint);
            if (lv_enumint < 0) { break; }
            if ((PlayerStatus(lv_enumint) == c_playerStatusActive)) {
                PlayerGroupAdd(gv_tierDraft.lv_playersonteam[1], lv_enumint);
            }
        }
        auto5D282CE6_g = GameAttributePlayersForTeam(2);
        lv_enumint = -1;
        while (true) {
            lv_enumint = PlayerGroupNextPlayer(auto5D282CE6_g, lv_enumint);
            if (lv_enumint < 0) { break; }
            if ((PlayerStatus(lv_enumint) == c_playerStatusActive)) {
                PlayerGroupAdd(gv_tierDraft.lv_playersonteam[2], lv_enumint);
            }
        }
    }
    gv_tierDraft.lv_whosTurnTeamcolorcodes[1] = Color(69.02, 0.00, 0.00);
    gv_tierDraft.lv_whosTurnTeamcolorcodes[2] = Color(0.00, 37.65, 74.90);
    gv_tierDraft.lv_whosTurnTeamcolorcodesdark[1] = Color(16.86, 0.00, 0.00);
    gv_tierDraft.lv_whosTurnTeamcolorcodesdark[2] = Color(0.00, 12.55, 25.10);
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    gv_tierDraft.lv_blackOverlayDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 3000, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Monobattle\\pureblack.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.0, 10.0);
    gv_tierDraft.lv_blackOverlay = DialogControlLastCreated();
    gv_tierDraft.lv_istierdrafthappening = true;
    DialogCreate(1000, 380, c_anchorBottom, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_tierDraft.lv_unitSelectionDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 1000, 700, c_anchorBottom, 0, -600, StringToText(""), "Assets\\Textures\\ui_objectives_glowblue_titletext.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_greenGlowy = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_tierDraft.lv_unitSelectionDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/E523B897"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_tierDraft.lv_buttonPulse[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\border-button-game.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_tierDraft.lv_unitSelectionDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/D22F3366"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_tierDraft.lv_buttonPulse[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\border-button-game.dds", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(gv_tierDraft.lv_unitSelectionDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/4CC903BF"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_tierDraft.lv_pickUnitButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\terran-border-button-game.dds", PlayerGroupAll());
    DialogControlSetEnabled(gv_tierDraft.lv_pickUnitButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tierDraft.lv_pickUnitButton, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tierDraft.lv_greenGlowy, PlayerGroupAll(), false);
    gf_TierDraftUpdatetexttags();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -200, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsLeft[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 200, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsRight[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -250, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsLeft[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 250, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsRight[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -300, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsLeft[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 300, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsRight[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -350, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsLeft[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 350, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsRight[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, -400, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsLeft[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_unitSelectionDialog, 20, 30, c_anchorBottom, 400, 80, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    gv_tierDraft.lv_pickUnitArrowsRight[5] = DialogControlLastCreated();
    lv_enumint = 1;
    for ( ; ( (auto46A8B932_ai >= 0 && lv_enumint <= auto46A8B932_ae) || (auto46A8B932_ai < 0 && lv_enumint >= auto46A8B932_ae) ) ; lv_enumint += auto46A8B932_ai ) {
        DialogControlFadeTransparency(gv_tierDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupAll(), 0.0, 100.0);
        DialogControlSetVisible(gv_tierDraft.lv_pickUnitArrowsRight[lv_enumint], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_tierDraft.lv_pickUnitArrowsLeft[lv_enumint], PlayerGroupAll(), false);
    }
    lv_whosturnwidth = 716;
    DialogCreate(lv_whosturnwidth, 244, c_anchorTop, 0, 120, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_tierDraft.lv_whosTurnDialog[1] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_whosturnwidth, 100, c_anchorBottom, 0, 40, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_whosTurnCaptainTurnText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
    DialogControlSetVisible(gv_tierDraft.lv_whosTurnCaptainTurnText[1], PlayerGroupAll(), false);
    DialogCreate(lv_whosturnwidth, 60, c_anchorTop, 0, 30, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_tierDraft.lv_whosTurnYourTeam[1] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_whosturnwidth, 60, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_whosTurnYourTeamText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/E35841FD"), GameAttributePlayersForTeam(1));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9DB81879"), GameAttributePlayersForTeam(2));
    lv_whosturnwidth = 716;
    DialogCreate(lv_whosturnwidth, 244, c_anchorTop, 0, 120, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_tierDraft.lv_whosTurnDialog[2] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_whosturnwidth, 100, c_anchorBottom, 0, 40, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_whosTurnCaptainTurnText[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize24Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
    DialogControlSetVisible(gv_tierDraft.lv_whosTurnCaptainTurnText[2], PlayerGroupAll(), false);
    DialogCreate(lv_whosturnwidth, 60, c_anchorTop, 0, 30, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_tierDraft.lv_whosTurnYourTeam[2] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_whosturnwidth, 60, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_whosTurnYourTeamText[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize24", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/C011E0ED"), GameAttributePlayersForTeam(2));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9A702D96"), GameAttributePlayersForTeam(1));
    lv_whatteamgoesfirst = RandomInt(1, 2);
    if ((lv_whatteamgoesfirst == 1)) {
        DialogSetPosition(gv_tierDraft.lv_whosTurnDialog[1], c_anchorTopLeft, 30, 100);
        DialogSetPosition(gv_tierDraft.lv_whosTurnYourTeam[1], c_anchorTopLeft, 30, 20);
        DialogSetPosition(gv_tierDraft.lv_whosTurnDialog[2], c_anchorTopRight, 31, 100);
        DialogSetPosition(gv_tierDraft.lv_whosTurnYourTeam[2], c_anchorTopRight, 31, 20);
        gv_tierDraft.lv_whatteampicksinwhatorder[1] = 1;
        gv_tierDraft.lv_whatteampicksinwhatorder[2] = 2;
        gv_tierDraft.lv_whatteampicksinwhatorder[3] = 2;
        gv_tierDraft.lv_whatteampicksinwhatorder[4] = 1;
        gv_tierDraft.lv_whatteampicksinwhatorder[5] = 1;
        gv_tierDraft.lv_whatteampicksinwhatorder[6] = 2;
        gv_tierDraft.lv_whatteampicksinwhatorder[7] = 2;
        gv_tierDraft.lv_whatteampicksinwhatorder[8] = 1;
        gf_TierDraftCreateSelectionBox(1, 1, 1);
        gf_TierDraftCreateSelectionBox(1, 2, 2);
        gf_TierDraftCreateSelectionBox(1, 3, 2);
        gf_TierDraftCreateSelectionBox(1, 4, 3);
        gf_TierDraftCreateSelectionBox(2, 1, 1);
        gf_TierDraftCreateSelectionBox(2, 2, 2);
        gf_TierDraftCreateSelectionBox(2, 3, 2);
        gf_TierDraftCreateSelectionBox(2, 4, 3);
    }
    else {
        DialogSetPosition(gv_tierDraft.lv_whosTurnDialog[2], c_anchorTopLeft, 30, 100);
        DialogSetPosition(gv_tierDraft.lv_whosTurnYourTeam[2], c_anchorTopLeft, 30, 20);
        DialogSetPosition(gv_tierDraft.lv_whosTurnDialog[1], c_anchorTopRight, 31, 100);
        DialogSetPosition(gv_tierDraft.lv_whosTurnYourTeam[1], c_anchorTopRight, 31, 20);
        gv_tierDraft.lv_whatteampicksinwhatorder[1] = 2;
        gv_tierDraft.lv_whatteampicksinwhatorder[2] = 1;
        gv_tierDraft.lv_whatteampicksinwhatorder[3] = 1;
        gv_tierDraft.lv_whatteampicksinwhatorder[4] = 2;
        gv_tierDraft.lv_whatteampicksinwhatorder[5] = 2;
        gv_tierDraft.lv_whatteampicksinwhatorder[6] = 1;
        gv_tierDraft.lv_whatteampicksinwhatorder[7] = 1;
        gv_tierDraft.lv_whatteampicksinwhatorder[8] = 2;
        gf_TierDraftCreateSelectionBox(1, 1, 1);
        gf_TierDraftCreateSelectionBox(1, 2, 2);
        gf_TierDraftCreateSelectionBox(1, 3, 2);
        gf_TierDraftCreateSelectionBox(1, 4, 3);
        gf_TierDraftCreateSelectionBox(2, 1, 1);
        gf_TierDraftCreateSelectionBox(2, 2, 2);
        gf_TierDraftCreateSelectionBox(2, 3, 2);
        gf_TierDraftCreateSelectionBox(2, 4, 3);
    }
    Wait(2.0, c_timeGame);
    gf_TierDraftStartSingleDraftCaptainOptin();
    return true;
}
void gf_TierDraftCreateSelectionBox (int lp_team, int lp_slot, int lp_tier) {
    // Variable Declarations
    int lv_enumint;
    int lv_tempteam;
    int[3] lv_xoffsetTEAM;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    lv_tempteam = lp_team;
    lv_enumint = lp_slot;
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 176, 100, c_anchorTopLeft, gv_tierDraft.lv_xoffsetTEAM[lp_team], 0, StringToText(""), "Assets\\Monobattle\\pureblack.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 176, 35, c_anchorTopLeft, gv_tierDraft.lv_xoffsetTEAM[lp_team], 75, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_whosTurnFrameImages[lv_tempteam][lv_enumint][1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[lv_tempteam], PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 1, 100, c_anchorTopLeft, gv_tierDraft.lv_xoffsetTEAM[lp_team], 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_whosTurnFrameImages[lv_tempteam][lv_enumint][2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[lv_tempteam], PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 1, 100, c_anchorTopLeft, (gv_tierDraft.lv_xoffsetTEAM[lp_team] + 175), 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_whosTurnFrameImages[lv_tempteam][lv_enumint][3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[lv_tempteam], PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 176, 1, c_anchorTopLeft, gv_tierDraft.lv_xoffsetTEAM[lp_team], 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_whosTurnFrameImages[lv_tempteam][lv_enumint][4] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[lv_tempteam], PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/9CED6B6B", "A", IntToText(lp_tier));
    libNtve_gf_CreateDialogItemLabel(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 166, 35, c_anchorTopLeft, (gv_tierDraft.lv_xoffsetTEAM[lp_team] + 5), 77, TextExpressionAssemble("Param/Expression/9CED6B6B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 176, 34, c_anchorBottomLeft, gv_tierDraft.lv_xoffsetTEAM[lp_team], 0, StringExternal("Param/Value/8DDE51C6"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    gv_tierDraft.lv_whosTurnCurrentTurnIndicator[lv_tempteam][lv_enumint] = DialogControlLastCreated();
    DialogControlSetVisible(gv_tierDraft.lv_whosTurnCurrentTurnIndicator[lv_tempteam][lv_enumint], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_whosTurnDialog[lv_tempteam], 60, 60, c_anchorTopLeft, (gv_tierDraft.lv_xoffsetTEAM[lp_team] + 55), 8, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_tierDraft.lv_whosTurnUnitIcon[lv_tempteam][lv_enumint] = DialogControlLastCreated();
    gv_tierDraft.lv_xoffsetTEAM[lp_team] += 180;
}
void gf_TierDraftStartSingleDraftCaptainOptin () {
    // Variable Declarations
    int lv_timeremaining;
    int lv_randomint;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_timeremaining = 10;
    // Implementation
    DialogCreate(1000, 700, c_anchorCenter, 0, 0, true);
    gv_tierDraft.lv_optinDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    TextExpressionSetToken("Param/Expression/ED8B068D", "A", IntToText(lv_timeremaining));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 50, c_anchorTop, 0, 0, TextExpressionAssemble("Param/Expression/ED8B068D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_optinDialogTimeText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 50, c_anchorTop, 0, 100, StringExternal("Param/Value/3BF65DE3"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_optinDialogTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 214, 58, c_anchorTop, 0, 200, StringToText(""), StringExternal("Param/Value/E889EF23"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_tierDraft.lv_optinDialogButtons[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\terran-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 214, 58, c_anchorTop, 0, 280, StringToText(""), StringExternal("Param/Value/699CA6DC"), "Assets\\Textures\\protoss-border-button-game.dds");
    gv_tierDraft.lv_optinDialogButtons[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    if ((libARMB_gv_testing == true)) {
        lv_timeremaining = 2;
    }
    while ((lv_timeremaining > 0)) {
        TextExpressionSetToken("Param/Expression/802646BD", "A", IntToText(lv_timeremaining));
        libNtve_gf_SetDialogItemText(gv_tierDraft.lv_optinDialogTimeText, TextExpressionAssemble("Param/Expression/802646BD"), PlayerGroupAll());
        Wait(1.0, c_timeGame);
        lv_timeremaining -= 1;
    }
    if ((PlayerGroupCount(gv_tierDraft.lv_optinsforteam[1]) > 0)) {
        lv_randomint = RandomInt(1, PlayerGroupCount(gv_tierDraft.lv_optinsforteam[1]));
        gv_tierDraft.lv_tierDraftCaptain[1] = PlayerGroupPlayer(gv_tierDraft.lv_optinsforteam[1], lv_randomint);
    }
    else {
        lv_randomint = RandomInt(1, PlayerGroupCount(lv_playersonteam[1]));
        gv_tierDraft.lv_tierDraftCaptain[1] = PlayerGroupPlayer(lv_playersonteam[1], lv_randomint);
    }
    if ((PlayerGroupCount(gv_tierDraft.lv_optinsforteam[2]) > 0)) {
        lv_randomint = RandomInt(1, PlayerGroupCount(gv_tierDraft.lv_optinsforteam[2]));
        gv_tierDraft.lv_tierDraftCaptain[2] = PlayerGroupPlayer(gv_tierDraft.lv_optinsforteam[2], lv_randomint);
    }
    else {
        lv_randomint = RandomInt(1, PlayerGroupCount(lv_playersonteam[2]));
        gv_tierDraft.lv_tierDraftCaptain[2] = PlayerGroupPlayer(lv_playersonteam[2], lv_randomint);
    }
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogButtons[1], PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogButtons[2], PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogTimeText, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogTitle, PlayerGroupAll(), 0.5, 100.0);
    Wait(1.0, c_timeGame);
    TextExpressionSetToken("Param/Expression/2285EDE1", "A", PlayerName(gv_tierDraft.lv_tierDraftCaptain[1]));
    libNtve_gf_CreateDialogItemLabel(gv_tierDraft.lv_optinDialog, 300, 100, c_anchorTop, -320, 250, TextExpressionAssemble("Param/Expression/2285EDE1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_tierDraft.lv_optinDialogSelectedCaptainsText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/12C24221", "A", PlayerName(gv_tierDraft.lv_tierDraftCaptain[2]));
    libNtve_gf_CreateDialogItemLabel(gv_tierDraft.lv_optinDialog, 300, 100, c_anchorTop, 320, 250, TextExpressionAssemble("Param/Expression/12C24221"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_tierDraft.lv_optinDialogSelectedCaptainsText[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_optinDialogTitle, StringExternal("Param/Value/BE134755"), PlayerGroupAll());
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogTitle, PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogSelectedCaptainsText[1], PlayerGroupAll(), 0.5, 0.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogSelectedCaptainsText[2], PlayerGroupAll(), 0.5, 0.0);
    Wait(4.0, c_timeGame);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogTitle, PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogSelectedCaptainsText[1], PlayerGroupAll(), 0.5, 100.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_optinDialogSelectedCaptainsText[2], PlayerGroupAll(), 0.5, 100.0);
    Wait(0.5, c_timeGame);
    gf_TierDraftStartSingleDraftTierSelection();
}
void gf_TierDraftStartSingleDraftTierSelection () {
    // Variable Declarations
    int lv_enumint;
    int lv_enumint2;
    int lv_dialogwidth;
    int lv_xoffset;
    int lv_yoffset;
    int lv_enumplayer;
    // Automatic Variable Declarations
    const int autoF35395BF_ai = 1;
    const int auto5C1FC024_ae = 3;
    const int auto5C1FC024_ai = 1;
    int autoE66413BC_ae;
    const int autoE66413BC_ai = 1;
    playergroup autoB6608A71_g;
    const int auto70F18102_ae = 98;
    const int auto70F18102_ai = 1;
    // Variable Initialization
    // Implementation
    lv_enumint = 1;
    for ( ; ( (autoF35395BF_ai >= 0 && lv_enumint <= libARMB_gv_unitDataCount) || (autoF35395BF_ai < 0 && lv_enumint >= libARMB_gv_unitDataCount) ) ; lv_enumint += autoF35395BF_ai ) {
        if ((libARMB_gv_unitData.lv_tier[lv_enumint] == 1)) {
            gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[1] += 1;
            gv_tierDraft.lv_tierSelectionTierUnitTypes[1][gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[1]] = lv_enumint;
        }
        else {
            if ((libARMB_gv_unitData.lv_tier[lv_enumint] == 2)) {
                gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[2] += 1;
                gv_tierDraft.lv_tierSelectionTierUnitTypes[2][gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[2]] = lv_enumint;
            }
            else {
                if ((libARMB_gv_unitData.lv_tier[lv_enumint] == 3)) {
                    gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[3] += 1;
                    gv_tierDraft.lv_tierSelectionTierUnitTypes[3][gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[3]] = lv_enumint;
                }
            }
        }
    }
    lv_enumint = 1;
    for ( ; ( (auto5C1FC024_ai >= 0 && lv_enumint <= auto5C1FC024_ae) || (auto5C1FC024_ai < 0 && lv_enumint >= auto5C1FC024_ae) ) ; lv_enumint += auto5C1FC024_ai ) {
        lv_xoffset = 0;
        lv_yoffset = 0;
        if ((gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_enumint] > 12)) {
            lv_dialogwidth = 1200;
        }
        else {
            lv_dialogwidth = (gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_enumint] * 100);
        }
        DialogCreate(lv_dialogwidth, 400, c_anchorCenter, 0, 180, true);
        gv_tierDraft.lv_tierSelectionDialogPanels[lv_enumint] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetImageVisible(DialogLastCreated(), false);
        autoE66413BC_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_enumint];
        lv_enumint2 = 1;
        for ( ; ( (autoE66413BC_ai >= 0 && lv_enumint2 <= autoE66413BC_ae) || (autoE66413BC_ai < 0 && lv_enumint2 >= autoE66413BC_ae) ) ; lv_enumint2 += autoE66413BC_ai ) {
            DialogCreate(100, 100, c_anchorTopLeft, lv_xoffset, lv_yoffset, true);
            DialogSetPositionRelative(DialogLastCreated(), c_anchorTopLeft, gv_tierDraft.lv_tierSelectionDialogPanels[lv_enumint], c_anchorTopLeft, lv_xoffset, lv_yoffset);
            gv_tierDraft.lv_tierSelectionUnitButtons[lv_enumint][lv_enumint2] = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 200, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_enumint][lv_enumint2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 64, 64, c_anchorTopLeft, 18, 18, StringToText(""), libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_enumint][lv_enumint2]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_tierDraft.lv_tierSelectionUnitButtonImage[lv_enumint][lv_enumint2] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 0, 0, StringToText(""), libARMB_gv_unitData.lv_unitName[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_enumint][lv_enumint2]], "");
            gv_tierDraft.lv_tierSelectionUnitButtonHotspots[lv_enumint][lv_enumint2] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            autoB6608A71_g = PlayerGroupAll();
            lv_enumplayer = -1;
            while (true) {
                lv_enumplayer = PlayerGroupNextPlayer(autoB6608A71_g, lv_enumplayer);
                if (lv_enumplayer < 0) { break; }
                if ((lv_enumplayer != gv_tierDraft.lv_tierDraftCaptain[1]) && (lv_enumplayer != gv_tierDraft.lv_tierDraftCaptain[2])) {
                    DialogControlSetVisible(gv_tierDraft.lv_tierSelectionUnitButtonHotspots[lv_enumint][lv_enumint2], PlayerGroupSingle(lv_enumplayer), false);
                }
            }
            if (((lv_enumint2 == 12) || (lv_enumint2 == 24) || (lv_enumint2 == 36) || (lv_enumint2 == 48) || (lv_enumint2 == 60) || (lv_enumint2 == 72) )) {
                lv_xoffset = 0;
                lv_yoffset += 100;
            }
            else {
                lv_xoffset += 100;
            }
        }
    }
    DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[1], PlayerGroupAll(), true);
    gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[1] = 1;
    gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[2] = 1;
    lv_enumint = 1;
    for ( ; ( (auto70F18102_ai >= 0 && lv_enumint <= auto70F18102_ae) || (auto70F18102_ai < 0 && lv_enumint >= auto70F18102_ae) ) ; lv_enumint += auto70F18102_ai ) {
        if ((gv_tierDraft.lv_tierSelectionUnitButtons[1][lv_enumint] != c_invalidDialogId)) {
            DialogSetVisible(gv_tierDraft.lv_tierSelectionUnitButtons[1][lv_enumint], PlayerGroupAll(), true);
        }
    }
    gf_TierDraftHighlightTierForTeam(1, 1);
    gf_TierDraftHighlightTierForTeam(1, 2);
    DialogCreate(800, 400, c_anchorCenter, 0, -50, true);
    gv_tierDraft.lv_tierSelectionPickTierDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 80, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_tierSelectionInstructionText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 186, 47, c_anchorTop, -210, 120, StringToText(""), "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttondown.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 186, 47, c_anchorTop, -210, 120, StringExternal("Param/Value/7023DC3C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsText[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 186, 47, c_anchorTop, 0, 120, StringToText(""), "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 186, 47, c_anchorTop, 0, 120, StringExternal("Param/Value/88E14C1D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsText[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 186, 47, c_anchorTop, 210, 120, StringToText(""), "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 186, 47, c_anchorTop, 210, 120, StringExternal("Param/Value/73B0C67A"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsText[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize16", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 186, 47, c_anchorTop, -210, 120, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 186, 47, c_anchorTop, 0, 120, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 186, 47, c_anchorTop, 210, 120, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[3] = DialogControlLastCreated();
    DialogCreate(1000, 380, c_anchorBottom, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_tierDraft.lv_tierSelectionPickUnitButtonDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, 1000, 700, c_anchorBottom, 0, -600, StringToText(""), "Assets\\Textures\\ui_objectives_glowblue_titletext.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_tierDraft.lv_tierSelectionPickUnitButtonGlowy = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/76AF1EE6"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_tierDraft.lv_tierSelectionButtonPulse[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\border-button-game.dds", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/E7DCA90D"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_tierDraft.lv_tierSelectionButtonPulse[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\border-button-game.dds", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, 320, 75, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/C381AF26"), "Assets\\Textures\\terran-border-button-game.dds");
    gv_tierDraft.lv_tierSelectionPickUnitButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\terran-border-button-game.dds", PlayerGroupAll());
    DialogSetVisible(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, PlayerGroupAll(), false);
    gf_TierDraftCreatearrowforpickunittierselection(-200, 80, 1, true);
    gf_TierDraftCreatearrowforpickunittierselection(200, 80, 1, false);
    gf_TierDraftCreatearrowforpickunittierselection(-250, 80, 2, true);
    gf_TierDraftCreatearrowforpickunittierselection(250, 80, 2, false);
    gf_TierDraftCreatearrowforpickunittierselection(-300, 80, 3, true);
    gf_TierDraftCreatearrowforpickunittierselection(300, 80, 3, false);
    gf_TierDraftCreatearrowforpickunittierselection(-350, 80, 4, true);
    gf_TierDraftCreatearrowforpickunittierselection(350, 80, 4, false);
    gf_TierDraftCreatearrowforpickunittierselection(-400, 80, 5, true);
    gf_TierDraftCreatearrowforpickunittierselection(400, 80, 5, false);
    gf_TierDraftTierSelectionanimatepickarrows();
    DialogCreate(200, 180, c_anchorTop, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_tierDraft.lv_tierSelectionOMGTimeislow = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 200, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize36Bold", PlayerGroupAll());
    gv_tierDraft.lv_tierSelectionOMGTimeislowtext = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/40EA10E5", "A", PlayerName(gv_tierDraft.lv_tierDraftCaptain[1]));
    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_whosTurnCaptainTurnText[1], TextExpressionAssemble("Param/Expression/40EA10E5"), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/86E92E14", "A", PlayerName(gv_tierDraft.lv_tierDraftCaptain[2]));
    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_whosTurnCaptainTurnText[2], TextExpressionAssemble("Param/Expression/86E92E14"), PlayerGroupAll());
    gf_TierDraftChangePicktoNextPlayer();
}
void gf_TierDraftRemoveallexistingtempimagesforteam (int lp_team) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int autoEBB46927_ae = 4;
    const int autoEBB46927_ai = 1;
    // Variable Initialization
    // Implementation
    lv_enumint = 1;
    for ( ; ( (autoEBB46927_ai >= 0 && lv_enumint <= autoEBB46927_ae) || (autoEBB46927_ai < 0 && lv_enumint >= autoEBB46927_ae) ) ; lv_enumint += autoEBB46927_ai ) {
        if ((gv_tierDraft.lv_tierSelectionActualPicks[lp_team][lv_enumint] == 0)) {
            libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lp_team][lv_enumint], "Assets\\Textures\\blank.dds", PlayerGroupAll());
            DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lp_team][lv_enumint], PlayerGroupAll(), 0.0, 0.0);
        }
    }
}
void gf_TierDraftCreatearrowforpickunittierselection (int lp_xoffset, int lp_yoffset, int lp_index, bool lp_left) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemImage(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, 20, 30, c_anchorBottom, lp_xoffset, lp_yoffset, StringToText(""), "Assets\\Textures\\ui_planetpanel_zeratul_arrow.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    libNtve_gf_SetDialogItemDesaturationColor(DialogControlLastCreated(), Color(0.00, 92.55, 23.53), PlayerGroupAll());
    if ((lp_left == true)) {
        gv_tierDraft.lv_tierSelectionReadyArrowsLeft[lp_index] = DialogControlLastCreated();
    }
    else {
        gv_tierDraft.lv_tierSelectionReadyArrowsRight[lp_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
    }
}
trigger auto_gf_TierDraftTierSelectionanimatepickarrows_Trigger = null;
void gf_TierDraftTierSelectionanimatepickarrows () {
    if (auto_gf_TierDraftTierSelectionanimatepickarrows_Trigger == null) {
        auto_gf_TierDraftTierSelectionanimatepickarrows_Trigger = TriggerCreate("auto_gf_TierDraftTierSelectionanimatepickarrows_TriggerFunc");
    }
    TriggerExecute(auto_gf_TierDraftTierSelectionanimatepickarrows_Trigger, false, false);
}
bool auto_gf_TierDraftTierSelectionanimatepickarrows_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    while ((gv_tierDraft.lv_istierdrafthappening == true)) {
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionButtonPulse[1], PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionButtonPulse[2], PlayerGroupAll(), 1.0, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[5], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[5], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[5], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[5], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[4], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[4], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[4], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[4], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[3], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[3], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[3], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[3], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[2], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[2], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionButtonPulse[1], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionButtonPulse[2], PlayerGroupAll(), 1.0, 0.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[2], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[2], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[1], PlayerGroupAll(), 0.2, 0.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[1], PlayerGroupAll(), 0.2, 0.0);
        Wait(0.25, c_timeGame);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsLeft[1], PlayerGroupAll(), 0.2, 100.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionReadyArrowsRight[1], PlayerGroupAll(), 0.2, 100.0);
        Wait(1.0, c_timeGame);
    }
    return true;
}
trigger auto_gf_TierDraftChangePicktoNextPlayer_Trigger = null;
void gf_TierDraftChangePicktoNextPlayer () {
    if (auto_gf_TierDraftChangePicktoNextPlayer_Trigger == null) {
        auto_gf_TierDraftChangePicktoNextPlayer_Trigger = TriggerCreate("auto_gf_TierDraftChangePicktoNextPlayer_TriggerFunc");
    }
    TriggerExecute(auto_gf_TierDraftChangePicktoNextPlayer_Trigger, false, false);
}
bool auto_gf_TierDraftChangePicktoNextPlayer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timeremaining;
    bool[8] lv_playedaudio;
    int lv_enumint;
    int lv_captain;
    bool lv_isstillhappening;
    int lv_team;
    // Automatic Variable Declarations
    const int autoDD9C41E4_ae = 4;
    const int autoDD9C41E4_ai = 1;
    // Variable Initialization
    lv_isstillhappening = true;
    // Implementation
    gv_tierDraft.lv_tierSelectionCurrentTurnNumber += 1;
    DialogSetVisible(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tierDraft.lv_whosTurnCaptainTurnText[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_tierDraft.lv_whosTurnCaptainTurnText[2], PlayerGroupAll(), false);
    if ((gv_tierDraft.lv_tierSelectionCurrentTurnNumber <= 8)) {
        SoundPlayForPlayer(SoundLink("NextTurn", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        lv_captain = gv_tierDraft.lv_tierDraftCaptain[gv_tierDraft.lv_whatteampicksinwhatorder[gv_tierDraft.lv_tierSelectionCurrentTurnNumber]];
        SoundPlayForPlayer(SoundLink("YourTurn", -1), c_maxPlayers, PlayerGroupSingle(lv_captain), 100.0, 0.0);
        DialogSetVisible(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, PlayerGroupSingle(lv_captain), true);
        DialogControlSetVisible(gv_tierDraft.lv_whosTurnCaptainTurnText[gv_tierDraft.lv_whatteampicksinwhatorder[gv_tierDraft.lv_tierSelectionCurrentTurnNumber]], PlayerGroupAll(), true);
        if ((gv_tierDraft.lv_whatteampicksinwhatorder[gv_tierDraft.lv_tierSelectionCurrentTurnNumber] == 1)) {
            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionInstructionText, StringExternal("Param/Value/DC383001"), PlayerGroupSingle(gv_tierDraft.lv_tierDraftCaptain[2]));
            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionInstructionText, StringExternal("Param/Value/A149A359"), PlayerGroupSingle(gv_tierDraft.lv_tierDraftCaptain[1]));
            gf_TierDraftHighlightTierForTeam(gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[1], 1);
            libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_whosTurnYourTeamText[1], Color(0.00, 100.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_whosTurnYourTeamText[2], Color(100.00, 100.00, 100.00), PlayerGroupAll());
            lv_team = 1;
        }
        else {
            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionInstructionText, StringExternal("Param/Value/D9A70F22"), PlayerGroupSingle(gv_tierDraft.lv_tierDraftCaptain[1]));
            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionInstructionText, StringExternal("Param/Value/FE3DCEAD"), PlayerGroupSingle(gv_tierDraft.lv_tierDraftCaptain[2]));
            gf_TierDraftHighlightTierForTeam(gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[2], 2);
            libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_whosTurnYourTeamText[2], Color(0.00, 100.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_whosTurnYourTeamText[1], Color(100.00, 100.00, 100.00), PlayerGroupAll());
            lv_team = 2;
        }
    }
    else {
        lv_isstillhappening = false;
    }
    if ((lv_isstillhappening == true)) {
        gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = false;
        lv_timeremaining = 580;
        while ((lv_timeremaining > 0) && (gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer == false)) {
            if ((lv_timeremaining < 16) && (lv_playedaudio[0] == false)) {
                lv_playedaudio[0] = true;
                libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/6A30EBD5"), PlayerGroupAll());
                SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                DialogSetVisible(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, PlayerGroupAll(), false);
            }
            else {
                if ((lv_timeremaining < 32) && (lv_playedaudio[1] == false)) {
                    lv_playedaudio[1] = true;
                    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/1FD9C6AE"), PlayerGroupAll());
                    SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                    if ((lv_timeremaining < 48) && (lv_playedaudio[2] == false)) {
                        lv_playedaudio[2] = true;
                        libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/67BB7822"), PlayerGroupAll());
                        SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    }
                    else {
                        if ((lv_timeremaining < 64) && (lv_playedaudio[3] == false)) {
                            lv_playedaudio[3] = true;
                            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/C019ACB8"), PlayerGroupAll());
                            SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        }
                        else {
                            if ((lv_timeremaining < 80) && (lv_playedaudio[4] == false)) {
                                lv_playedaudio[4] = true;
                                libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/E1DC9A81"), PlayerGroupAll());
                                SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                            }
                            else {
                                if ((lv_timeremaining < 96) && (lv_playedaudio[5] == false)) {
                                    lv_playedaudio[5] = true;
                                    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/568BB3DC"), PlayerGroupAll());
                                    SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                }
                                else {
                                    if ((lv_timeremaining < 112) && (lv_playedaudio[6] == true)) {
                                        lv_playedaudio[6] = true;
                                        libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/D06477C5"), PlayerGroupAll());
                                        SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                    }
                                    else {
                                        if ((lv_timeremaining < 128) && (lv_playedaudio[7] == true)) {
                                            lv_playedaudio[7] = true;
                                            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/96E3E2E0"), PlayerGroupAll());
                                            SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Wait(0.0625, c_timeGame);
            if ((gv_tierDraft.lv_testingSkip == true)) {
                gv_tierDraft.lv_testingSkip = false;
                lv_timeremaining = 0;
            }
            else {
                lv_timeremaining -= 1;
            }
        }
        libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringToText(""), PlayerGroupAll());
        if ((gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer == false)) {
            gf_TierDraftAutoselectunitiftimerunsout(lv_team);
        }
        gf_TierDraftChangePicktoNextPlayer();
    }
    else {
        lv_enumint = 1;
        for ( ; ( (autoDD9C41E4_ai >= 0 && lv_enumint <= autoDD9C41E4_ae) || (autoDD9C41E4_ai < 0 && lv_enumint >= autoDD9C41E4_ae) ) ; lv_enumint += autoDD9C41E4_ai ) {
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][1], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][2], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][3], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][4], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][1], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][2], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][3], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][4], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_whosTurnYourTeamText[1], Color(100.00, 100.00, 100.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_whosTurnYourTeamText[2], Color(100.00, 100.00, 100.00), PlayerGroupAll());
        gf_TierDraftInitPickActualUnits();
    }
    return true;
}
void gf_TierDraftHighlightTierForTeam (int lp_tier, int lp_team) {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto90540617_ae = 4;
    const int auto90540617_ai = 1;
    // Variable Initialization
    // Implementation
    if ((gv_tierDraft.lv_whatteampicksinwhatorder[gv_tierDraft.lv_tierSelectionCurrentTurnNumber] == lp_team)) {
        lv_enumint = 1;
        for ( ; ( (auto90540617_ai >= 0 && lv_enumint <= auto90540617_ae) || (auto90540617_ai < 0 && lv_enumint >= auto90540617_ae) ) ; lv_enumint += auto90540617_ai ) {
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][1], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][2], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][3], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[1][lv_enumint][4], gv_tierDraft.lv_whosTurnTeamcolorcodes[1], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][1], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][2], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][3], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[2][lv_enumint][4], gv_tierDraft.lv_whosTurnTeamcolorcodes[2], PlayerGroupAll());
        }
        if ((lp_tier != 0)) {
            if ((lp_tier == 1)) {
                libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][1][1], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][1][2], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][1][3], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][1][4], Color(0.00, 68.24, 0.00), PlayerGroupAll());
            }
            else {
                if ((lp_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lp_team] == false)) {
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][2][1], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][2][2], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][2][3], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                    libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][2][4], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                }
                else {
                    if ((lp_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lp_team] == true)) {
                        libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][3][1], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                        libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][3][2], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                        libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][3][3], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                        libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][3][4], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                    }
                    else {
                        if ((lp_tier == 3)) {
                            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][4][1], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][4][2], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][4][3], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                            libNtve_gf_SetDialogItemDesaturationColor(gv_tierDraft.lv_whosTurnFrameImages[lp_team][4][4], Color(0.00, 68.24, 0.00), PlayerGroupAll());
                        }
                    }
                }
            }
        }
    }
}
void gf_TierDraftRemoveunitfromselectionforteam (int lp_team, int lp_tier, int lp_unitSlot) {
    // Variable Declarations
    int lv_enumplayer;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    DialogControlSetVisible(gv_tierDraft.lv_tierSelectionUnitButtonHotspots[lp_tier][lp_unitSlot], GameAttributePlayersForTeam(lp_team), false);
    DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionUnitButtonBG[lp_tier][lp_unitSlot], GameAttributePlayersForTeam(lp_team), 0.5, 75.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionUnitButtonImage[lp_tier][lp_unitSlot], GameAttributePlayersForTeam(lp_team), 0.5, 55.0);
    DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lp_tier][lp_unitSlot], GameAttributePlayersForTeam(lp_team), c_anchorTopLeft, 0, 0);
}
void gf_TierDraftDisableTierforTeam (int lp_team, int lp_tier) {
    // Variable Declarations
    int lv_tiertoswitchto;
    int lv_enumint;
    // Automatic Variable Declarations
    int auto0F0F237E_ae;
    const int auto0F0F237E_ai = 1;
    int auto8779BFB1_ae;
    const int auto8779BFB1_ai = 1;
    // Variable Initialization
    // Implementation
    if (((gv_tierDraft.lv_tierSelectionActualPicks[lp_team][2] == 0) || (gv_tierDraft.lv_tierSelectionActualPicks[lp_team][3] == 0))) {
        lv_tiertoswitchto = 2;
    }
    else {
        if ((gv_tierDraft.lv_tierSelectionActualPicks[lp_team][1] == 0)) {
            lv_tiertoswitchto = 1;
        }
        else {
            if ((gv_tierDraft.lv_tierSelectionActualPicks[lp_team][4] == 0)) {
                lv_tiertoswitchto = 3;
            }
            else {
                lv_tiertoswitchto = 0;
            }
        }
    }
    if ((lp_tier == 2) && (lv_tiertoswitchto == 2)) {
    }
    else {
        DialogControlSetVisible(gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[lp_tier], GameAttributePlayersForTeam(lp_team), false);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[lp_tier], GameAttributePlayersForTeam(lp_team), 0.0, 60.0);
        DialogControlFadeTransparency(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[lp_tier], GameAttributePlayersForTeam(lp_team), 0.0, 60.0);
        auto0F0F237E_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lp_tier];
        lv_enumint = 1;
        for ( ; ( (auto0F0F237E_ai >= 0 && lv_enumint <= auto0F0F237E_ae) || (auto0F0F237E_ai < 0 && lv_enumint >= auto0F0F237E_ae) ) ; lv_enumint += auto0F0F237E_ai ) {
            DialogSetVisible(gv_tierDraft.lv_tierSelectionUnitButtons[lp_tier][lv_enumint], GameAttributePlayersForTeam(lp_team), false);
        }
        DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[1], GameAttributePlayersForTeam(lp_team), false);
        DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[2], GameAttributePlayersForTeam(lp_team), false);
        DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[3], GameAttributePlayersForTeam(lp_team), false);
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[1], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", GameAttributePlayersForTeam(lp_team));
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[2], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", GameAttributePlayersForTeam(lp_team));
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[3], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", GameAttributePlayersForTeam(lp_team));
        libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[1], Color(75.29, 75.29, 75.29), GameAttributePlayersForTeam(lp_team));
        libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[2], Color(75.29, 75.29, 75.29), GameAttributePlayersForTeam(lp_team));
        libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[3], Color(75.29, 75.29, 75.29), GameAttributePlayersForTeam(lp_team));
        if ((lv_tiertoswitchto != 0)) {
            libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[lv_tiertoswitchto], Color(100.00, 100.00, 100.00), GameAttributePlayersForTeam(lp_team));
            DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[lv_tiertoswitchto], GameAttributePlayersForTeam(lp_team), true);
            libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[lv_tiertoswitchto], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttondown.dds", GameAttributePlayersForTeam(lp_team));
            gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[lp_team] = lv_tiertoswitchto;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lp_team][1] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lp_team][2] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lp_team][3] = 0;
            auto8779BFB1_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tiertoswitchto];
            lv_enumint = 1;
            for ( ; ( (auto8779BFB1_ai >= 0 && lv_enumint <= auto8779BFB1_ae) || (auto8779BFB1_ai < 0 && lv_enumint >= auto8779BFB1_ae) ) ; lv_enumint += auto8779BFB1_ai ) {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_tiertoswitchto][lv_enumint], GameAttributePlayersForTeam(lp_team), c_anchorTopLeft, 0, 0);
                DialogSetVisible(gv_tierDraft.lv_tierSelectionUnitButtons[lv_tiertoswitchto][lv_enumint], GameAttributePlayersForTeam(lp_team), true);
            }
        }
        else {
            DialogSetVisible(gv_tierDraft.lv_tierSelectionPickTierDialog, GameAttributePlayersForTeam(lp_team), false);
        }
    }
}
void gf_TierDraftAutoselectunitiftimerunsout (int lp_team) {
    // Variable Declarations
    int lv_team;
    int lv_tier;
    int lv_unitbutton;
    int lv_chosenunitbutton;
    int lv_randomint;
    bool lv_searching;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    DialogSetVisible(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, PlayerGroupAll(), false);
    lv_team = lp_team;
    lv_tier = gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[lv_team];
    lv_unitbutton = gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier];
    if (((lv_unitbutton == 0) || (gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] != 0))) {
        lv_searching = true;
        while ((lv_searching == true)) {
            lv_randomint = RandomInt(1, gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tier]);
            if ((gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_randomint] == 0)) {
                lv_searching = false;
                lv_unitbutton = lv_randomint;
            }
            Wait(0.0, c_timeGame);
        }
    }
    if ((lv_tier == 1)) {
        gv_tierDraft.lv_tierSelectionActualPicks[lv_team][1] = lv_unitbutton;
        gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][1] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
        gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][1], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
        DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][1], PlayerGroupAll(), 0.0, 0.0);
        gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
        gf_TierDraftDisableTierforTeam(lv_team, 1);
        gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
    }
    else {
        if ((lv_tier == 3)) {
            gv_tierDraft.lv_tierSelectionActualPicks[lv_team][4] = lv_unitbutton;
            gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][4] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
            gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
            libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][4], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
            DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][4], PlayerGroupAll(), 0.0, 0.0);
            gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
            gf_TierDraftDisableTierforTeam(lv_team, 3);
            gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
        }
        else {
            if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == false)) {
                gv_tierDraft.lv_tierSelectionActualPicks[lv_team][2] = lv_unitbutton;
                gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][2] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][2], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
                DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][2], PlayerGroupAll(), 0.0, 0.0);
                gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] = true;
                gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
                gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
                gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
                gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
                gf_TierDraftDisableTierforTeam(lv_team, 2);
                gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
            }
            else {
                if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == true)) {
                    gv_tierDraft.lv_tierSelectionActualPicks[lv_team][3] = lv_unitbutton;
                    gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][3] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                    gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                    gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
                    libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][3], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
                    DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][3], PlayerGroupAll(), 0.0, 0.0);
                    gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
                    gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
                    gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
                    gf_TierDraftDisableTierforTeam(lv_team, 2);
                    gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
                }
            }
        }
    }
}
void gf_TierDraftInitPickActualUnits () {
    // Variable Declarations
    int lv_dialogwidth;
    int lv_enumint;
    int lv_xoffset;
    int lv_yoffset;
    int lv_enumplayer;
    // Automatic Variable Declarations
    const int autoAC5995A8_ae = 4;
    const int autoAC5995A8_ai = 1;
    // Variable Initialization
    // Implementation
    DialogControlFadeTransparency(gv_tierDraft.lv_blackOverlay, PlayerGroupAll(), 1.0, 100.0);
    Wait(1.5, c_timeGame);
    DialogCreate(400, 350, c_anchorBottom, 0, 0, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_tierDraft.lv_pickActualSelectionDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_tierDraft.lv_pickActualSelectionDialog, 400, 100, c_anchorTop, 0, 0, StringExternal("Param/Value/E955610F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28", PlayerGroupAll());
    lv_xoffset = 0;
    lv_yoffset = 100;
    lv_enumint = 1;
    for ( ; ( (autoAC5995A8_ai >= 0 && lv_enumint <= autoAC5995A8_ae) || (autoAC5995A8_ai < 0 && lv_enumint >= autoAC5995A8_ae) ) ; lv_enumint += autoAC5995A8_ai ) {
        DialogCreate(100, 100, c_anchorTopLeft, lv_xoffset, lv_yoffset, true);
        DialogSetPositionRelative(DialogLastCreated(), c_anchorTopLeft, gv_tierDraft.lv_pickActualSelectionDialog, c_anchorTopLeft, lv_xoffset, lv_yoffset);
        gv_tierDraft.lv_pickActualUnitButtonDialogs[lv_enumint] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 200, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_research_button_protoss_normalpressed.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_tierDraft.lv_pickActualUnitButtonBG[lv_enumint] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 64, 64, c_anchorTopLeft, 18, 18, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_tierDraft.lv_pickActualUnitButtonImage[lv_enumint] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 100, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
        gv_tierDraft.lv_pickActualUnitButtonHotspot[lv_enumint] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        lv_xoffset += 100;
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_pickActualUnitButtonImage[lv_enumint], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionActualPicksUnitID[1][lv_enumint]], GameAttributePlayersForTeam(1));
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_pickActualUnitButtonImage[lv_enumint], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionActualPicksUnitID[2][lv_enumint]], GameAttributePlayersForTeam(2));
        libNtve_gf_SetDialogItemTooltip(gv_tierDraft.lv_pickActualUnitButtonHotspot[lv_enumint], libARMB_gv_unitData.lv_unitName[gv_tierDraft.lv_tierSelectionActualPicksUnitID[1][lv_enumint]], GameAttributePlayersForTeam(1));
        libNtve_gf_SetDialogItemTooltip(gv_tierDraft.lv_pickActualUnitButtonHotspot[lv_enumint], libARMB_gv_unitData.lv_unitName[gv_tierDraft.lv_tierSelectionActualPicksUnitID[2][lv_enumint]], GameAttributePlayersForTeam(2));
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_tierDraft.lv_playersonteam[1], gv_tierDraft.lv_pickActualPlayersLefttoVote[1]);
    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_tierDraft.lv_playersonteam[2], gv_tierDraft.lv_pickActualPlayersLefttoVote[2]);
    gv_tierDraft.lv_pickActualCheckforPicks = true;
    gf_TierDraftCheckforpicks();
}
trigger auto_gf_TierDraftCheckforpicks_Trigger = null;
void gf_TierDraftCheckforpicks () {
    if (auto_gf_TierDraftCheckforpicks_Trigger == null) {
        auto_gf_TierDraftCheckforpicks_Trigger = TriggerCreate("auto_gf_TierDraftCheckforpicks_TriggerFunc");
    }
    TriggerExecute(auto_gf_TierDraftCheckforpicks_Trigger, false, false);
}
bool auto_gf_TierDraftCheckforpicks_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumplayer;
    int lv_enumplayer2;
    bool lv_passed;
    int lv_timeremaining;
    bool[8] lv_playedaudio;
    // Automatic Variable Declarations
    playergroup autoBA0C7FB5_g;
    playergroup auto45C02C71_g;
    playergroup autoA2F66C3A_g;
    playergroup auto9B037E8E_g;
    playergroup auto7821582B_g;
    playergroup auto594DFA0D_g;
    // Variable Initialization
    // Implementation
    lv_timeremaining = 580;
    while ((lv_timeremaining > 0) && ((PlayerGroupCount(gv_tierDraft.lv_pickActualPlayersLefttoVote[1]) + PlayerGroupCount(gv_tierDraft.lv_pickActualPlayersLefttoVote[2])) > 0)) {
        autoBA0C7FB5_g = gv_tierDraft.lv_pickActualPlayersLefttoVote[1];
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(autoBA0C7FB5_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            lv_passed = true;
            if ((gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] > 0)) {
                auto45C02C71_g = GameAttributePlayersForTeam(1);
                lv_enumplayer2 = -1;
                while (true) {
                    lv_enumplayer2 = PlayerGroupNextPlayer(auto45C02C71_g, lv_enumplayer2);
                    if (lv_enumplayer2 < 0) { break; }
                    if ((gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] == gv_tierDraft.lv_pickActualChoiceSuccess[lv_enumplayer2])) {
                        lv_passed = false;
                    }
                }
                if ((lv_passed == true)) {
                    gf_TierDraftAssignaunitsuccessfully(lv_enumplayer, gv_tierDraft.lv_tierSelectionActualPicksUnitID[1][gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer]], 1, gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer]);
                    gv_tierDraft.lv_pickActualChoiceSuccess[lv_enumplayer] = gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer];
                    gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] = 0;
                }
                else {
                    gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] = 0;
                }
            }
        }
        autoA2F66C3A_g = gv_tierDraft.lv_pickActualPlayersLefttoVote[2];
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(autoA2F66C3A_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            lv_passed = true;
            if ((gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] > 0)) {
                auto9B037E8E_g = GameAttributePlayersForTeam(2);
                lv_enumplayer2 = -1;
                while (true) {
                    lv_enumplayer2 = PlayerGroupNextPlayer(auto9B037E8E_g, lv_enumplayer2);
                    if (lv_enumplayer2 < 0) { break; }
                    if ((gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] == gv_tierDraft.lv_pickActualChoiceSuccess[lv_enumplayer2])) {
                        lv_passed = false;
                    }
                }
                if ((lv_passed == true)) {
                    gf_TierDraftAssignaunitsuccessfully(lv_enumplayer, gv_tierDraft.lv_tierSelectionActualPicksUnitID[2][gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer]], 2, gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer]);
                    gv_tierDraft.lv_pickActualChoiceSuccess[lv_enumplayer] = gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer];
                    gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] = 0;
                }
                else {
                    gv_tierDraft.lv_pickActualChoiceQueue[lv_enumplayer] = 0;
                }
            }
        }
        if ((lv_timeremaining < 16) && (lv_playedaudio[0] == false)) {
            lv_playedaudio[0] = true;
            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/38776933"), PlayerGroupAll());
            SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            if ((lv_timeremaining < 32) && (lv_playedaudio[1] == false)) {
                lv_playedaudio[1] = true;
                libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/9FA12196"), PlayerGroupAll());
                SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            }
            else {
                if ((lv_timeremaining < 48) && (lv_playedaudio[2] == false)) {
                    lv_playedaudio[2] = true;
                    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/2971EB52"), PlayerGroupAll());
                    SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                }
                else {
                    if ((lv_timeremaining < 64) && (lv_playedaudio[3] == false)) {
                        lv_playedaudio[3] = true;
                        libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/4F13D7AB"), PlayerGroupAll());
                        SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                    }
                    else {
                        if ((lv_timeremaining < 80) && (lv_playedaudio[4] == false)) {
                            lv_playedaudio[4] = true;
                            libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/61FE7F58"), PlayerGroupAll());
                            SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        }
                        else {
                            if ((lv_timeremaining < 96) && (lv_playedaudio[5] == false)) {
                                lv_playedaudio[5] = true;
                                libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/8C12B164"), PlayerGroupAll());
                                SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                            }
                            else {
                                if ((lv_timeremaining < 112) && (lv_playedaudio[6] == true)) {
                                    lv_playedaudio[6] = true;
                                    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/2CD23F56"), PlayerGroupAll());
                                    SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                }
                                else {
                                    if ((lv_timeremaining < 128) && (lv_playedaudio[7] == true)) {
                                        lv_playedaudio[7] = true;
                                        libNtve_gf_SetDialogItemText(gv_tierDraft.lv_tierSelectionOMGTimeislowtext, StringExternal("Param/Value/434FFA84"), PlayerGroupAll());
                                        SoundPlayForPlayer(SoundLink("LimitedTime", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        Wait(0.0625, c_timeGame);
        lv_timeremaining -= 1;
    }
    auto7821582B_g = gv_tierDraft.lv_playersonteam[1];
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto7821582B_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((gv_tierDraft.lv_pickActualChoiceSuccess[lv_enumplayer] == 0)) {
            gf_TierDraftRandomlyassignunittoAFKplayer(lv_enumplayer);
        }
    }
    auto594DFA0D_g = gv_tierDraft.lv_playersonteam[2];
    lv_enumplayer = -1;
    while (true) {
        lv_enumplayer = PlayerGroupNextPlayer(auto594DFA0D_g, lv_enumplayer);
        if (lv_enumplayer < 0) { break; }
        if ((gv_tierDraft.lv_pickActualChoiceSuccess[lv_enumplayer] == 0)) {
            gf_TierDraftRandomlyassignunittoAFKplayer(lv_enumplayer);
        }
    }
    gf_TierDraftEndTierDraft();
    return true;
}
void gf_TierDraftAssignaunitsuccessfully (int lp_player, int lp_unitID, int lp_team, int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(gv_tierDraft.lv_pickActualUnitButtonHotspot[lp_slot], GameAttributePlayersForTeam(lp_team), false);
    DialogControlFadeTransparency(gv_tierDraft.lv_pickActualUnitButtonImage[lp_slot], GameAttributePlayersForTeam(lp_team), 0.5, 60.0);
    DialogControlFadeTransparency(gv_tierDraft.lv_pickActualUnitButtonBG[lp_slot], GameAttributePlayersForTeam(lp_team), 0.5, 75.0);
    DialogSetVisible(gv_tierDraft.lv_pickActualUnitButtonDialogs[1], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_tierDraft.lv_pickActualUnitButtonDialogs[2], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_tierDraft.lv_pickActualUnitButtonDialogs[3], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_tierDraft.lv_pickActualUnitButtonDialogs[4], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_tierDraft.lv_pickActualSelectionDialog, PlayerGroupSingle(lp_player), false);
    gv_tierDraft.lv_pickActualChoiceSuccess[lp_player] = lp_slot;
    libARMB_gv_unitData.lv_playerUnitLink[lp_player] = lp_unitID;
    PlayerGroupRemove(gv_tierDraft.lv_pickActualPlayersLefttoVote[lp_team], lp_player);
    gf_TierDraftMarkPlayerUnitasReady(lp_player);
    gf_TierDraftShowFinalUnit(lp_player);
}
void gf_TierDraftRandomlyassignunittoAFKplayer (int lp_player) {
    // Variable Declarations
    int lv_randomint;
    int lv_team;
    int lv_enumint;
    int lv_enumplayer;
    bool lv_success;
    int lv_chosenint;
    // Automatic Variable Declarations
    const int autoA78AD8CB_ae = 4;
    const int autoA78AD8CB_ai = 1;
    playergroup auto4A6F8D7D_g;
    // Variable Initialization
    // Implementation
    if ((PlayerGroupHasPlayer(gv_tierDraft.lv_playersonteam[1], lp_player) == true)) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    lv_enumint = 1;
    for ( ; ( (autoA78AD8CB_ai >= 0 && lv_enumint <= autoA78AD8CB_ae) || (autoA78AD8CB_ai < 0 && lv_enumint >= autoA78AD8CB_ae) ) ; lv_enumint += autoA78AD8CB_ai ) {
        lv_success = true;
        auto4A6F8D7D_g = gv_tierDraft.lv_playersonteam[lv_team];
        lv_enumplayer = -1;
        while (true) {
            lv_enumplayer = PlayerGroupNextPlayer(auto4A6F8D7D_g, lv_enumplayer);
            if (lv_enumplayer < 0) { break; }
            if ((gv_tierDraft.lv_pickActualChoiceSuccess[lv_enumplayer] == lv_enumint)) {
                lv_success = false;
            }
        }
        if ((lv_success == true)) {
            lv_chosenint = lv_enumint;
            break;
        }
    }
    gf_TierDraftAssignaunitsuccessfully(lp_player, gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][lv_chosenint], lv_team, lv_chosenint);
}
void gf_TierDraftShowFinalUnit (int lp_player) {
    // Variable Declarations
    int lv_tempnumber;
    int lv_newnumber;
    // Automatic Variable Declarations
    // Variable Initialization
    // Implementation
    if ((UnitIsAlive(gv_selectionArena.lv_platformunits[lp_player]) == true)) {
        UnitRemove(gv_selectionArena.lv_platformunits[lp_player]);
    }
    gf_TierDraftUpdatetexttags();
}
trigger auto_gf_TierDraftUpdatetexttags_Trigger = null;
void gf_TierDraftUpdatetexttags () {
    if (auto_gf_TierDraftUpdatetexttags_Trigger == null) {
        auto_gf_TierDraftUpdatetexttags_Trigger = TriggerCreate("auto_gf_TierDraftUpdatetexttags_TriggerFunc");
    }
    TriggerExecute(auto_gf_TierDraftUpdatetexttags_Trigger, false, false);
}
bool auto_gf_TierDraftUpdatetexttags_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAEF4DCE9_g;
    int autoAEF4DCE9_var;
    playergroup autoC9427702_g;
    int autoC9427702_var;
    // Implementation
    autoAEF4DCE9_g = gv_tierDraft.lv_playersonteam[1];
    autoAEF4DCE9_var = -1;
    while (true) {
        autoAEF4DCE9_var = PlayerGroupNextPlayer(autoAEF4DCE9_g, autoAEF4DCE9_var);
        if (autoAEF4DCE9_var < 0) { break; }
        if (((PlayerStatus(autoAEF4DCE9_var) == c_playerStatusActive) || (libARMB_gv_testing == true))) {
            if ((libARMB_gv_unitData.lv_playerUnitLink[autoAEF4DCE9_var] != 0)) {
                TextTagAttachToUnit(gv_selectionArena.lv_playerNameTags[autoAEF4DCE9_var], gv_selectionArena.lv_platformunits[autoAEF4DCE9_var], 3.0);
                if ((gv_selectionArena.lv_playerisreadytostart[autoAEF4DCE9_var] == true)) {
                    TextExpressionSetToken("Param/Expression/5ED3D797", "A", PlayerName(autoAEF4DCE9_var));
                    TextExpressionSetToken("Param/Expression/5ED3D797", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[autoAEF4DCE9_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[autoAEF4DCE9_var], TextExpressionAssemble("Param/Expression/5ED3D797"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/EC49B629", "A", PlayerName(autoAEF4DCE9_var));
                    TextExpressionSetToken("Param/Expression/EC49B629", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[autoAEF4DCE9_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[autoAEF4DCE9_var], TextExpressionAssemble("Param/Expression/EC49B629"));
                }
            }
            else {
                TextExpressionSetToken("Param/Expression/7F8A088C", "A", PlayerName(autoAEF4DCE9_var));
                TextTagSetText(gv_selectionArena.lv_playerNameTags[autoAEF4DCE9_var], TextExpressionAssemble("Param/Expression/7F8A088C"));
            }
        }
        else {
            TextTagSetText(gv_selectionArena.lv_playerNameTags[autoAEF4DCE9_var], StringExternal("Param/Value/A877C18D"));
        }
    }
    autoC9427702_g = gv_tierDraft.lv_playersonteam[2];
    autoC9427702_var = -1;
    while (true) {
        autoC9427702_var = PlayerGroupNextPlayer(autoC9427702_g, autoC9427702_var);
        if (autoC9427702_var < 0) { break; }
        if (((PlayerStatus(autoC9427702_var) == c_playerStatusActive) || (libARMB_gv_testing == true))) {
            if ((libARMB_gv_unitData.lv_playerUnitLink[autoC9427702_var] != 0)) {
                TextTagAttachToUnit(gv_selectionArena.lv_playerNameTags[autoC9427702_var], gv_selectionArena.lv_platformunits[autoC9427702_var], 3.0);
                if ((gv_selectionArena.lv_playerisreadytostart[autoC9427702_var] == true)) {
                    TextExpressionSetToken("Param/Expression/186635C7", "A", PlayerName(autoC9427702_var));
                    TextExpressionSetToken("Param/Expression/186635C7", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[autoC9427702_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[autoC9427702_var], TextExpressionAssemble("Param/Expression/186635C7"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/CFBB7429", "A", PlayerName(autoC9427702_var));
                    TextExpressionSetToken("Param/Expression/CFBB7429", "B", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[autoC9427702_var]]);
                    TextTagSetText(gv_selectionArena.lv_playerNameTags[autoC9427702_var], TextExpressionAssemble("Param/Expression/CFBB7429"));
                }
            }
            else {
                TextExpressionSetToken("Param/Expression/78703E02", "A", PlayerName(autoC9427702_var));
                TextTagSetText(gv_selectionArena.lv_playerNameTags[autoC9427702_var], TextExpressionAssemble("Param/Expression/78703E02"));
            }
        }
        else {
            TextTagSetText(gv_selectionArena.lv_playerNameTags[autoC9427702_var], StringExternal("Param/Value/E998F30E"));
        }
    }
    return true;
}
void gf_TierDraftMarkPlayerUnitasReady (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    gv_selectionArena.lv_playerisreadytostart[lp_player] = true;
    if ((PlayerGroupHasPlayer(gv_tierDraft.lv_playersonteam[1], lp_player) == true)) {
        ActorSend(gv_selectionArena.lv_platforms[gv_selectionArena.lv_playerspotpointassignment[lp_player]], "AnimPlay Stand Work,Start PlayForever,NonLooping,DontResetOnUnhide");
    }
    else {
        ActorSend(gv_selectionArena.lv_platforms[(gv_selectionArena.lv_playerspotpointassignment[lp_player] + 4)], "AnimPlay Stand Work,Start PlayForever,NonLooping,DontResetOnUnhide");
    }
    gf_TierDraftUpdatetexttags();
}
void gf_TierDraftEndTierDraft () {
    // Variable Declarations
    int lv_enumint;
    // Automatic Variable Declarations
    const int auto5BCCBA5C_ae = 20;
    const int auto5BCCBA5C_ai = 1;
    const int autoCD40E27A_ae = 8;
    int autoCD40E27A_var;
    // Variable Initialization
    // Implementation
    if ((libARMB_gv_testing == true)) {
        libNtve_gf_SetPlayerGroupAlliance(gv_tierDraft.lv_playersonteam[1], libNtve_ge_AllianceSetting_AllyWithSharedVision);
        libNtve_gf_SetPlayerGroupAlliance(gv_tierDraft.lv_playersonteam[2], libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    gv_tierDraft.lv_pickActualCheckforPicks = true;
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    lv_enumint = 1;
    for ( ; ( (auto5BCCBA5C_ai >= 0 && lv_enumint <= auto5BCCBA5C_ae) || (auto5BCCBA5C_ai < 0 && lv_enumint >= auto5BCCBA5C_ae) ) ; lv_enumint += auto5BCCBA5C_ai ) {
        DialogDestroy(gv_tierDraft.lv_unitButtonDialogs[lv_enumint]);
    }
    DialogDestroy(gv_tierDraft.lv_tierSelectionOMGTimeislow);
    DialogDestroy(gv_tierDraft.lv_unitSelectionDialog);
    DialogDestroy(gv_tierDraft.lv_pickActualSelectionDialog);
    DialogDestroy(gv_tierDraft.lv_pickActualUnitButtonDialogs[1]);
    DialogDestroy(gv_tierDraft.lv_pickActualUnitButtonDialogs[2]);
    DialogDestroy(gv_tierDraft.lv_pickActualUnitButtonDialogs[3]);
    DialogDestroy(gv_tierDraft.lv_pickActualUnitButtonDialogs[4]);
    Wait(5.0, c_timeGame);
    gf_WarpOutAnimation();
    gv_tierDraft.lv_istierdrafthappening = false;
    autoCD40E27A_var = 1;
    for ( ; autoCD40E27A_var <= autoCD40E27A_ae; autoCD40E27A_var += 1 ) {
        if ((gv_selectionArena.lv_playerNameTags[autoCD40E27A_var] != c_textTagNone)) {
            TextTagDestroy(gv_selectionArena.lv_playerNameTags[autoCD40E27A_var]);
        }
        if ((gv_selectionArena.lv_yOUtexttag[autoCD40E27A_var] != c_textTagNone)) {
            TextTagDestroy(gv_selectionArena.lv_yOUtexttag[autoCD40E27A_var]);
        }
    }
    DialogDestroy(gv_tierDraft.lv_unitSelectionDialog);
    DialogDestroy(gv_tierDraft.lv_whosTurnDialog[1]);
    DialogDestroy(gv_tierDraft.lv_whosTurnDialog[2]);
    DialogDestroy(gv_tierDraft.lv_blackOverlayDialog);
    DialogDestroy(gv_tierDraft.lv_optinDialog);
    DialogDestroy(gv_tierDraft.lv_tierSelectionDialogPanels[1]);
    DialogDestroy(gv_tierDraft.lv_tierSelectionDialogPanels[2]);
    DialogDestroy(gv_tierDraft.lv_tierSelectionDialogPanels[3]);
    DialogDestroy(gv_tierDraft.lv_whosTurnYourTeam[1]);
    DialogDestroy(gv_tierDraft.lv_whosTurnYourTeam[2]);
    gf_Cleanupactorsunitsandstart();
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Click Optin
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftClickOptin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_tierDraft.lv_optinDialogButtons[1]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogControlSetVisible(gv_tierDraft.lv_optinDialogButtons[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tierDraft.lv_optinDialogButtons[2], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_optinDialogTitle, StringExternal("Param/Value/A6D067FD"), PlayerGroupSingle(EventPlayer()));
    if ((PlayerGroupHasPlayer(lv_playersonteam[1], EventPlayer()) == true)) {
        PlayerGroupAdd(gv_tierDraft.lv_optinsforteam[1], EventPlayer());
    }
    else {
        PlayerGroupAdd(gv_tierDraft.lv_optinsforteam[2], EventPlayer());
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftClickOptin_Init () {
    gt_TierDraftClickOptin = TriggerCreate("gt_TierDraftClickOptin_Func");
    TriggerAddEventDialogControl(gt_TierDraftClickOptin, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Click Optout
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftClickOptout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_tierDraft.lv_optinDialogButtons[2]))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    DialogControlSetVisible(gv_tierDraft.lv_optinDialogButtons[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_tierDraft.lv_optinDialogButtons[2], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemText(gv_tierDraft.lv_optinDialogTitle, StringExternal("Param/Value/76217FD2"), PlayerGroupSingle(EventPlayer()));
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftClickOptout_Init () {
    gt_TierDraftClickOptout = TriggerCreate("gt_TierDraftClickOptout_Func");
    TriggerAddEventDialogControl(gt_TierDraftClickOptout, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Click Tier Switch Buttons
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftClickTierSwitchButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_enumtype;
    int lv_button;
    // Automatic Variable Declarations
    const int auto045A220D_ae = 98;
    const int auto045A220D_ai = 1;
    const int autoF054A584_ae = 98;
    const int autoF054A584_ai = 1;
    int autoACF87F07_ae;
    const int autoACF87F07_ai = 1;
    int autoA5E8BC20_ae;
    const int autoA5E8BC20_ai = 1;
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[1]) || (EventDialogControl() == gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[2]) || (EventDialogControl() == gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[3])))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventDialogControl() == gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[1])) {
        lv_button = 1;
    }
    else {
        if ((EventDialogControl() == gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[2])) {
            lv_button = 2;
        }
        else {
            if ((EventDialogControl() == gv_tierDraft.lv_tierSelectionChangeTierButtonsHotspot[3])) {
                lv_button = 3;
            }
        }
    }
    lv_enumint = 1;
    for ( ; ( (auto045A220D_ai >= 0 && lv_enumint <= auto045A220D_ae) || (auto045A220D_ai < 0 && lv_enumint >= auto045A220D_ae) ) ; lv_enumint += auto045A220D_ai ) {
        if ((gv_tierDraft.lv_tierSelectionUnitButtons[1][lv_enumint] != c_invalidDialogId)) {
            DialogSetVisible(gv_tierDraft.lv_tierSelectionUnitButtons[1][lv_enumint], PlayerGroupSingle(EventPlayer()), false);
        }
        if ((gv_tierDraft.lv_tierSelectionUnitButtons[2][lv_enumint] != c_invalidDialogId)) {
            DialogSetVisible(gv_tierDraft.lv_tierSelectionUnitButtons[2][lv_enumint], PlayerGroupSingle(EventPlayer()), false);
        }
        if ((gv_tierDraft.lv_tierSelectionUnitButtons[3][lv_enumint] != c_invalidDialogId)) {
            DialogSetVisible(gv_tierDraft.lv_tierSelectionUnitButtons[3][lv_enumint], PlayerGroupSingle(EventPlayer()), false);
        }
    }
    DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[1], PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[2], PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[3], PlayerGroupSingle(EventPlayer()), false);
    libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[1], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[2], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[3], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttonover.dds", PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[1], Color(75.29, 75.29, 75.29), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[2], Color(75.29, 75.29, 75.29), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[3], Color(75.29, 75.29, 75.29), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemColor(gv_tierDraft.lv_tierSelectionChangeTierButtonsText[lv_button], Color(100.00, 100.00, 100.00), PlayerGroupSingle(EventPlayer()));
    DialogSetVisible(gv_tierDraft.lv_tierSelectionDialogPanels[lv_button], PlayerGroupSingle(EventPlayer()), true);
    libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_tierSelectionChangeTierButtonsBG[lv_button], "Assets\\Textures\\sc2_ui_glues_bluebuttons_taskbarbuttondown.dds", PlayerGroupSingle(EventPlayer()));
    lv_enumint = 1;
    for ( ; ( (autoF054A584_ai >= 0 && lv_enumint <= autoF054A584_ae) || (autoF054A584_ai < 0 && lv_enumint >= autoF054A584_ae) ) ; lv_enumint += autoF054A584_ai ) {
        if ((gv_tierDraft.lv_tierSelectionUnitButtons[lv_button][lv_enumint] != c_invalidDialogId)) {
            DialogSetVisible(gv_tierDraft.lv_tierSelectionUnitButtons[lv_button][lv_enumint], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    if ((gv_tierDraft.lv_tierDraftCaptain[1] == EventPlayer())) {
        gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[1] = lv_button;
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[1][1] = 0;
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[1][2] = 0;
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[1][3] = 0;
        autoA5E8BC20_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_button];
        lv_enumint = 1;
        for ( ; ( (autoA5E8BC20_ai >= 0 && lv_enumint <= autoA5E8BC20_ae) || (autoA5E8BC20_ai < 0 && lv_enumint >= autoA5E8BC20_ae) ) ; lv_enumint += autoA5E8BC20_ai ) {
            DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_button][lv_enumint], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, 0);
        }
        gf_TierDraftHighlightTierForTeam(lv_button, 1);
        gf_TierDraftRemoveallexistingtempimagesforteam(1);
    }
    else {
        if ((gv_tierDraft.lv_tierDraftCaptain[2] == EventPlayer())) {
            gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[2] = lv_button;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[2][1] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[2][2] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[2][3] = 0;
            autoACF87F07_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_button];
            lv_enumint = 1;
            for ( ; ( (autoACF87F07_ai >= 0 && lv_enumint <= autoACF87F07_ae) || (autoACF87F07_ai < 0 && lv_enumint >= autoACF87F07_ae) ) ; lv_enumint += autoACF87F07_ai ) {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_button][lv_enumint], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, 0);
            }
            gf_TierDraftHighlightTierForTeam(lv_button, 2);
            gf_TierDraftRemoveallexistingtempimagesforteam(2);
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftClickTierSwitchButtons_Init () {
    gt_TierDraftClickTierSwitchButtons = TriggerCreate("gt_TierDraftClickTierSwitchButtons_Func");
    TriggerAddEventDialogControl(gt_TierDraftClickTierSwitchButtons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Click Pick Unit Button
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftClickPickUnitButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_tier;
    int lv_unitbutton;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_tierDraft.lv_tierSelectionPickUnitButton))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[1])) {
        lv_team = 1;
    }
    else {
        if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[2])) {
            lv_team = 2;
        }
    }
    lv_tier = gv_tierDraft.lv_tierSelectionWhichtieriscurrentlyselected[lv_team];
    lv_unitbutton = gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier];
    if (((lv_unitbutton == 0) || (gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] != 0))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FF2EA3D9"));
        SoundPlayForPlayer(SoundLink("ClickError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else {
        DialogSetVisible(gv_tierDraft.lv_tierSelectionPickUnitButtonDialog, PlayerGroupAll(), false);
        if ((lv_tier == 1)) {
            gv_tierDraft.lv_tierSelectionActualPicks[lv_team][1] = lv_unitbutton;
            gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][1] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
            gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
            libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][1], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
            DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][1], PlayerGroupAll(), 0.0, 0.0);
            gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
            gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
            gf_TierDraftDisableTierforTeam(lv_team, 1);
            gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
        }
        else {
            if ((lv_tier == 3)) {
                gv_tierDraft.lv_tierSelectionActualPicks[lv_team][4] = lv_unitbutton;
                gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][4] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][4], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
                DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][4], PlayerGroupAll(), 0.0, 0.0);
                gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
                gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
                gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
                gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
                gf_TierDraftDisableTierforTeam(lv_team, 3);
                gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
            }
            else {
                if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == false)) {
                    gv_tierDraft.lv_tierSelectionActualPicks[lv_team][2] = lv_unitbutton;
                    gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][2] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                    gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                    libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][2], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
                    DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][2], PlayerGroupAll(), 0.0, 0.0);
                    gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] = true;
                    gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
                    gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
                    gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
                    gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
                    gf_TierDraftDisableTierforTeam(lv_team, 2);
                    gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
                }
                else {
                    if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == true)) {
                        gv_tierDraft.lv_tierSelectionActualPicks[lv_team][3] = lv_unitbutton;
                        gv_tierDraft.lv_tierSelectionActualPicksUnitID[lv_team][3] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                        gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_unitbutton] = gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton];
                        gf_TierDraftRemoveunitfromselectionforteam(lv_team, lv_tier, lv_unitbutton);
                        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][3], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_unitbutton]], PlayerGroupAll());
                        DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][3], PlayerGroupAll(), 0.0, 0.0);
                        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][1] = 0;
                        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][2] = 0;
                        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][3] = 0;
                        gf_TierDraftDisableTierforTeam(lv_team, 2);
                        gv_tierDraft.lv_tierSelectionUnitPickedSkipTimer = true;
                    }
                }
            }
        }
    }
    return true;
}
bool isTierDraftButton (int tier, int x) {
    int i = 0;
    for (; i < 99 ; i+=1 ) {
        if (x == gv_tierDraft.lv_tierSelectionUnitButtonHotspots[tier][i]) {
            return true;
        }
    }
    return false;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftClickPickUnitButton_Init () {
    gt_TierDraftClickPickUnitButton = TriggerCreate("gt_TierDraftClickPickUnitButton_Func");
    TriggerAddEventDialogControl(gt_TierDraftClickPickUnitButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Unit Button T1
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftUnitButtonT1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_team;
    int lv_tier;
    int lv_button;
    int lv_slot;
    // Automatic Variable Declarations
    int auto07AB5F76_ae;
    const int auto07AB5F76_ai = 1;
    int auto4BDDB560_ae;
    const int auto4BDDB560_ai = 1;
    // Variable Initialization
    lv_tier = 1;
    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[1]) || (EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[2])))) {
            return false;
        }
        
        if(!isTierDraftButton(1,EventDialogControl())){
            return false;     
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[1])) {
        lv_team = 1;
    }
    else {
        if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[2])) {
            lv_team = 2;
        }
    }
    auto07AB5F76_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tier];
    lv_enumint = 1;
    for ( ; ( (auto07AB5F76_ai >= 0 && lv_enumint <= auto07AB5F76_ae) || (auto07AB5F76_ai < 0 && lv_enumint >= auto07AB5F76_ae) ) ; lv_enumint += auto07AB5F76_ai ) {
        if ((EventDialogControl() == gv_tierDraft.lv_tierSelectionUnitButtonHotspots[lv_tier][lv_enumint])) {
            lv_button = lv_enumint;
            break;
        }
    }
    if ((gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_button] == 0) && (gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] != lv_button)) {
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] = lv_button;
        auto4BDDB560_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tier];
        lv_enumint = 1;
        for ( ; ( (auto4BDDB560_ai >= 0 && lv_enumint <= auto4BDDB560_ae) || (auto4BDDB560_ai < 0 && lv_enumint >= auto4BDDB560_ae) ) ; lv_enumint += auto4BDDB560_ai ) {
            if ((gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] == lv_enumint)) {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_tier][lv_enumint], GameAttributePlayersForTeam(lv_team), c_anchorTopLeft, 0, -100);
            }
            else {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_tier][lv_enumint], GameAttributePlayersForTeam(lv_team), c_anchorTopLeft, 0, 0);
            }
        }
        gf_TierDraftRemoveallexistingtempimagesforteam(lv_team);
        if ((lv_tier == 1)) {
            lv_slot = 1;
        }
        else {
            if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == false)) {
                lv_slot = 2;
            }
            else {
                if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == true)) {
                    lv_slot = 3;
                }
                else {
                    if ((lv_tier == 3)) {
                        lv_slot = 4;
                    }
                }
            }
        }
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][lv_slot], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_button]], GameAttributePlayersForTeam(lv_team));
        DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][lv_slot], GameAttributePlayersForTeam(lv_team), 0.0, 50.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftUnitButtonT1_Init () {
    gt_TierDraftUnitButtonT1 = TriggerCreate("gt_TierDraftUnitButtonT1_Func");
    TriggerAddEventDialogControl(gt_TierDraftUnitButtonT1, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Unit Button T2
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftUnitButtonT2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_team;
    int lv_tier;
    int lv_button;
    int lv_slot;
    // Automatic Variable Declarations
    int auto8B2DCDA5_ae;
    const int auto8B2DCDA5_ai = 1;
    int auto2349FC65_ae;
    const int auto2349FC65_ai = 1;
    // Variable Initialization
    lv_tier = 2;
    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[1]) || (EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[2])))) {
            return false;
        }
        if(!isTierDraftButton(2,EventDialogControl())){
            return false;     
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[1])) {
        lv_team = 1;
    }
    else {
        if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[2])) {
            lv_team = 2;
        }
    }
    auto8B2DCDA5_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tier];
    lv_enumint = 1;
    for ( ; ( (auto8B2DCDA5_ai >= 0 && lv_enumint <= auto8B2DCDA5_ae) || (auto8B2DCDA5_ai < 0 && lv_enumint >= auto8B2DCDA5_ae) ) ; lv_enumint += auto8B2DCDA5_ai ) {
        if ((EventDialogControl() == gv_tierDraft.lv_tierSelectionUnitButtonHotspots[lv_tier][lv_enumint])) {
            lv_button = lv_enumint;
            break;
        }
    }
    if ((gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_button] == 0) && (gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] != lv_button)) {
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] = lv_button;
        auto2349FC65_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tier];
        lv_enumint = 1;
        for ( ; ( (auto2349FC65_ai >= 0 && lv_enumint <= auto2349FC65_ae) || (auto2349FC65_ai < 0 && lv_enumint >= auto2349FC65_ae) ) ; lv_enumint += auto2349FC65_ai ) {
            if ((gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] == lv_enumint)) {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_tier][lv_enumint], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, -100);
            }
            else {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_tier][lv_enumint], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, 0);
            }
        }
        gf_TierDraftRemoveallexistingtempimagesforteam(lv_team);
        if ((lv_tier == 1)) {
            lv_slot = 1;
        }
        else {
            if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == false)) {
                lv_slot = 2;
            }
            else {
                if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == true)) {
                    lv_slot = 3;
                }
                else {
                    if ((lv_tier == 3)) {
                        lv_slot = 4;
                    }
                }
            }
        }
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][lv_slot], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_button]], GameAttributePlayersForTeam(lv_team));
        DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][lv_slot], GameAttributePlayersForTeam(lv_team), 0.0, 50.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftUnitButtonT2_Init () {
    gt_TierDraftUnitButtonT2 = TriggerCreate("gt_TierDraftUnitButtonT2_Func");
    TriggerAddEventDialogControl(gt_TierDraftUnitButtonT2, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Unit Button T3
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftUnitButtonT3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enumint;
    int lv_team;
    int lv_tier;
    int lv_button;
    int lv_slot;
    // Automatic Variable Declarations
    int autoBE096EC0_ae;
    const int autoBE096EC0_ai = 1;
    int auto218E44DA_ae;
    const int auto218E44DA_ai = 1;
    // Variable Initialization
    lv_tier = 3;
    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[1]) || (EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[2])))) {
            return false;
        }
        if(!isTierDraftButton(3,EventDialogControl())){
            return false;     
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[1])) {
        lv_team = 1;
    }
    else {
        if ((EventPlayer() == gv_tierDraft.lv_tierDraftCaptain[2])) {
            lv_team = 2;
        }
    }
    autoBE096EC0_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tier];
    lv_enumint = 1;
    for ( ; ( (autoBE096EC0_ai >= 0 && lv_enumint <= autoBE096EC0_ae) || (autoBE096EC0_ai < 0 && lv_enumint >= autoBE096EC0_ae) ) ; lv_enumint += autoBE096EC0_ai ) {
        if ((EventDialogControl() == gv_tierDraft.lv_tierSelectionUnitButtonHotspots[lv_tier][lv_enumint])) {
            lv_button = lv_enumint;
            break;
        }
    }
    if ((gv_tierDraft.lv_tierSelectionUnitSlotisCurrentlyTaken[lv_team][lv_tier][lv_button] == 0) && (gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] != lv_button)) {
        gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] = lv_button;
        auto218E44DA_ae = gv_tierDraft.lv_tierSelectionTotalUnitsinEachTier[lv_tier];
        lv_enumint = 1;
        for ( ; ( (auto218E44DA_ai >= 0 && lv_enumint <= auto218E44DA_ae) || (auto218E44DA_ai < 0 && lv_enumint >= auto218E44DA_ae) ) ; lv_enumint += auto218E44DA_ai ) {
            if ((gv_tierDraft.lv_tierSelectionWhichunitiscurrentlyselected[lv_team][lv_tier] == lv_enumint)) {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_tier][lv_enumint], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, -100);
            }
            else {
                DialogControlSetPosition(gv_tierDraft.lv_tierSelectionUnitButtonBG[lv_tier][lv_enumint], PlayerGroupSingle(EventPlayer()), c_anchorTopLeft, 0, 0);
            }
        }
        gf_TierDraftRemoveallexistingtempimagesforteam(lv_team);
        if ((lv_tier == 1)) {
            lv_slot = 1;
        }
        else {
            if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == false)) {
                lv_slot = 2;
            }
            else {
                if ((lv_tier == 2) && (gv_tierDraft.lv_tierSelectionTier2Slot1Picked[lv_team] == true)) {
                    lv_slot = 3;
                }
                else {
                    if ((lv_tier == 3)) {
                        lv_slot = 4;
                    }
                }
            }
        }
        libNtve_gf_SetDialogItemImage(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][lv_slot], libARMB_gv_unitData.lv_thumbnail[gv_tierDraft.lv_tierSelectionTierUnitTypes[lv_tier][lv_button]], GameAttributePlayersForTeam(lv_team));
        DialogControlFadeTransparency(gv_tierDraft.lv_whosTurnUnitIcon[lv_team][lv_slot], GameAttributePlayersForTeam(lv_team), 0.0, 50.0);
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftUnitButtonT3_Init () {
    gt_TierDraftUnitButtonT3 = TriggerCreate("gt_TierDraftUnitButtonT3_Func");
    TriggerAddEventDialogControl(gt_TierDraftUnitButtonT3, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
//--------------------------------------------------------------------------------------------------
// Trigger: Tier Draft - Click Pick Button
//--------------------------------------------------------------------------------------------------
bool gt_TierDraftClickPickButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_unitID;
    // Automatic Variable Declarations
    // Variable Initialization
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[1]) || (EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[2]) || (EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[3]) || (EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[4])))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    if ((EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[1])) {
        gv_tierDraft.lv_pickActualChoiceQueue[EventPlayer()] = 1;
    }
    else {
        if ((EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[2])) {
            gv_tierDraft.lv_pickActualChoiceQueue[EventPlayer()] = 2;
        }
        else {
            if ((EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[3])) {
                gv_tierDraft.lv_pickActualChoiceQueue[EventPlayer()] = 3;
            }
            else {
                if ((EventDialogControl() == gv_tierDraft.lv_pickActualUnitButtonHotspot[4])) {
                    gv_tierDraft.lv_pickActualChoiceQueue[EventPlayer()] = 4;
                }
            }
        }
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_TierDraftClickPickButton_Init () {
    gt_TierDraftClickPickButton = TriggerCreate("gt_TierDraftClickPickButton_Func");
    TriggerAddEventDialogControl(gt_TierDraftClickPickButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Monobattle
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_TopLeftUI {
    int lv_topLeftUIDialog;
    int lv_openCloseButton;
    int[9] lv_unitPortraits;
    int[9] lv_playercolorboxes;
    bool[9] lv_unitmenuisopen;
    int[9] lv_youarrow;
};
gs_TopLeftUI gv_topLeftUI;
void gf_CreateTopLeftUI ();
void gf_Creepgrowthtempboost ();
void gf_runMonobattle();
trigger gt_Openclose;
//--------------------------------------------------------------------------------------------------
// Trigger: Open close
//--------------------------------------------------------------------------------------------------
bool gt_Openclose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB711F7BD_ae = 8;
    int autoB711F7BD_var;
    const int auto8E61F808_ae = 8;
    int auto8E61F808_var;
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_topLeftUI.lv_openCloseButton))) {
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if ((gv_topLeftUI.lv_unitmenuisopen[EventPlayer()] == true)) {
        auto8E61F808_var = 1;
        for ( ; auto8E61F808_var <= auto8E61F808_ae; auto8E61F808_var += 1 ) {
            if ((gv_topLeftUI.lv_unitPortraits[auto8E61F808_var] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_topLeftUI.lv_unitPortraits[auto8E61F808_var], PlayerGroupSingle(EventPlayer()), false);
            }
            if ((gv_topLeftUI.lv_playercolorboxes[auto8E61F808_var] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_topLeftUI.lv_playercolorboxes[auto8E61F808_var], PlayerGroupSingle(EventPlayer()), false);
            }
            if ((gv_topLeftUI.lv_youarrow[auto8E61F808_var] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_topLeftUI.lv_youarrow[auto8E61F808_var], PlayerGroupSingle(EventPlayer()), false);
            }
        }
        gv_topLeftUI.lv_unitmenuisopen[EventPlayer()] = false;
    }
    else {
        autoB711F7BD_var = 1;
        for ( ; autoB711F7BD_var <= autoB711F7BD_ae; autoB711F7BD_var += 1 ) {
            if ((gv_topLeftUI.lv_unitPortraits[autoB711F7BD_var] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_topLeftUI.lv_unitPortraits[autoB711F7BD_var], PlayerGroupSingle(EventPlayer()), true);
            }
            if ((gv_topLeftUI.lv_playercolorboxes[autoB711F7BD_var] != c_invalidDialogControlId)) {
                DialogControlSetVisible(gv_topLeftUI.lv_playercolorboxes[autoB711F7BD_var], PlayerGroupSingle(EventPlayer()), true);
            }
        }
        DialogControlSetVisible(gv_topLeftUI.lv_youarrow[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        gv_topLeftUI.lv_unitmenuisopen[EventPlayer()] = true;
    }
    return true;
}
//--------------------------------------------------------------------------------------------------
void gt_Openclose_Init () {
    gt_Openclose = TriggerCreate("gt_Openclose_Func");
    TriggerAddEventDialogControl(gt_Openclose, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}
void gf_CreateTopLeftUI () {
    // Variable Declarations
    int lv_loopint;
    int lv_int;
    int lv_player;
    int lv_xoffset;
    int lv_yoffset;
    // Automatic Variable Declarations
    const int auto0AABD567_ae = 4;
    const int auto0AABD567_ai = 1;
    const int auto410F8377_ae = 4;
    const int auto410F8377_ai = 1;
    // Variable Initialization
    lv_yoffset = 10;
    // Implementation
    DialogCreate(900, 400, c_anchorTopLeft, 0, 0, true);
    gv_topLeftUI.lv_topLeftUIDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, 7, 7, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_chatpanel_minimizehover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_topLeftUI.lv_topLeftUIDialog, 37, 37, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_topLeftUI.lv_openCloseButton = DialogControlLastCreated();
    lv_int = 1;
    for ( ; ( (auto0AABD567_ai >= 0 && lv_int <= auto0AABD567_ae) || (auto0AABD567_ai < 0 && lv_int >= auto0AABD567_ae) ) ; lv_int += auto0AABD567_ai ) {
        lv_xoffset += 55;
        lv_loopint += 1;
        if (((PlayerStatus(PlayerGroupPlayer(lv_playersonteam[1], lv_int)) == c_playerStatusActive) || (libARMB_gv_testing == true))) {
            lv_player = PlayerGroupPlayer(lv_playersonteam[1], lv_int);
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 10, 10, c_anchorTopLeft, (lv_xoffset + 20), (lv_yoffset - 9), StringToText(""), "Assets\\Monobattle\\youarrow.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_topLeftUI.lv_youarrow[lv_player] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 52, 52, c_anchorTopLeft, (lv_xoffset - 1), (lv_yoffset + 4), StringToText(""), "Assets\\Monobattle\\iconborder.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_topLeftUI.lv_playercolorboxes[lv_loopint] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemDesaturationColor(gv_topLeftUI.lv_playercolorboxes[lv_player], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), PlayerGroupAll());
            if ((libARMB_gv_unitData.lv_playerUnitLink[lv_player] != 0)) {
                libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 50, 50, c_anchorTopLeft, lv_xoffset, (lv_yoffset + 5), StringToText(""), libARMB_gv_unitData.lv_thumbnail[libARMB_gv_unitData.lv_playerUnitLink[lv_player]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                TextExpressionSetToken("Param/Expression/72C83B55", "A", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[lv_player]]);
                TextExpressionSetToken("Param/Expression/72C83B55", "B", PlayerName(lv_player));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/72C83B55"), PlayerGroupAll());
                libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            }
            else {
                libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 50, 50, c_anchorTopLeft, lv_xoffset, (lv_yoffset + 5), StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            gv_topLeftUI.lv_unitPortraits[lv_loopint] = DialogControlLastCreated();
        }
        else {
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 52, 52, c_anchorTopLeft, (lv_xoffset - 1), (lv_yoffset + 4), StringToText(""), "Assets\\Monobattle\\iconborder.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_topLeftUI.lv_playercolorboxes[lv_loopint] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 50, 50, c_anchorTopLeft, lv_xoffset, (lv_yoffset + 5), StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_topLeftUI.lv_unitPortraits[lv_loopint] = DialogControlLastCreated();
        }
    }
    lv_yoffset += 70;
    lv_xoffset = 0;
    lv_int = 1;
    for ( ; ( (auto410F8377_ai >= 0 && lv_int <= auto410F8377_ae) || (auto410F8377_ai < 0 && lv_int >= auto410F8377_ae) ) ; lv_int += auto410F8377_ai ) {
        lv_xoffset += 55;
        lv_loopint += 1;
        if (((PlayerStatus(PlayerGroupPlayer(lv_playersonteam[2], lv_int)) == c_playerStatusActive) || (libARMB_gv_testing == true))) {
            lv_player = PlayerGroupPlayer(lv_playersonteam[2], lv_int);
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 10, 10, c_anchorTopLeft, (lv_xoffset + 20), (lv_yoffset - 10), StringToText(""), "Assets\\Monobattle\\youarrow.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_topLeftUI.lv_youarrow[lv_player] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lv_player), true);
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 52, 52, c_anchorTopLeft, (lv_xoffset - 1), (lv_yoffset + 4), StringToText(""), "Assets\\Monobattle\\iconborder.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
            gv_topLeftUI.lv_playercolorboxes[lv_player] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemDesaturationColor(gv_topLeftUI.lv_playercolorboxes[lv_player], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), PlayerGroupAll());
            if ((libARMB_gv_unitData.lv_playerUnitLink[lv_player] != 0)) {
                libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 50, 50, c_anchorTopLeft, lv_xoffset, (lv_yoffset + 5), StringToText(""), libARMB_gv_unitData.lv_thumbnail[libARMB_gv_unitData.lv_playerUnitLink[lv_player]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                TextExpressionSetToken("Param/Expression/E472D511", "A", libARMB_gv_unitData.lv_unitName[libARMB_gv_unitData.lv_playerUnitLink[lv_player]]);
                TextExpressionSetToken("Param/Expression/E472D511", "B", PlayerName(lv_player));
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/E472D511"), PlayerGroupAll());
                libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            }
            else {
                libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 50, 50, c_anchorTopLeft, lv_xoffset, (lv_yoffset + 5), StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            gv_topLeftUI.lv_unitPortraits[lv_player] = DialogControlLastCreated();
        }
        else {
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 52, 52, c_anchorTopLeft, (lv_xoffset - 1), (lv_yoffset + 4), StringToText(""), "Assets\\Monobattle\\iconborder.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_topLeftUI.lv_playercolorboxes[lv_loopint] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_topLeftUI.lv_topLeftUIDialog, 50, 50, c_anchorTopLeft, lv_xoffset, (lv_yoffset + 5), StringToText(""), "Assets\\Textures\\ui_tip_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_topLeftUI.lv_unitPortraits[lv_loopint] = DialogControlLastCreated();
        }
    }
}
trigger auto_gf_Creepgrowthtempboost_Trigger = null;
void gf_Creepgrowthtempboost () {
    if (auto_gf_Creepgrowthtempboost_Trigger == null) {
        auto_gf_Creepgrowthtempboost_Trigger = TriggerCreate("auto_gf_Creepgrowthtempboost_TriggerFunc");
    }
    TriggerExecute(auto_gf_Creepgrowthtempboost_Trigger, false, false);
}
bool auto_gf_Creepgrowthtempboost_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_enumgroup;
    // Automatic Variable Declarations
    // Variable Initialization
    lv_enumgroup = PlayerGroupEmpty();
    // Implementation
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    Wait(8.0, c_timeGame);
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    return true;
}
void gf_Cleanupactorsunitsandstart () {
    int lv_blackness= c_invalidDialogId;
    int lv_blacknessimg = c_invalidDialogControlId;
    playergroup auto86BFC939_g;
    int auto86BFC939_var;
    unitgroup auto5D8F1D2B_g;
    int auto5D8F1D2B_u;
    unit auto5D8F1D2B_var;
    playergroup auto66D5688B_g;
    int auto66D5688B_var;
    playergroup auto5DB0C3ED_g;
    int auto5DB0C3ED_var;
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_blackness = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3000, 3000, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Monobattle\\pureblack.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_blacknessimg = DialogControlLastCreated();
    gf_CleanArena();
    libARMB_gf_ShowTerrainObjects();
   // libARMB_gf_ClearPreplacedBuildings();
    Wait(0.01, c_timeGame);
    auto5DB0C3ED_g = PlayerGroupActive();
    auto5DB0C3ED_var = -1;
    while (true) {
        auto5DB0C3ED_var = PlayerGroupNextPlayer(auto5DB0C3ED_g, auto5DB0C3ED_var);
        if (auto5DB0C3ED_var < 0) { break; }
        VisFillArea(auto5DB0C3ED_var, RegionEntireMap(), c_fillTypeUnexplored, false);
    }
    Wait(0.01, c_timeGame);
    libARMB_gf_MonobattleStart();
  //  MeleeInitResources();
   // MeleeInitUnits();
  // gf_Creepgrowthtempboost();
  //  auto5D8F1D2B_g = UnitGroup("Hatchery", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
 //   auto5D8F1D2B_u = UnitGroupCount(auto5D8F1D2B_g, c_unitCountAll);
 //   for (;; auto5D8F1D2B_u -= 1) {
 //       auto5D8F1D2B_var = UnitGroupUnitFromEnd(auto5D8F1D2B_g, auto5D8F1D2B_u);
 //       if (auto5D8F1D2B_var == null) { break; }
 //       UnitCreateEffectUnit(auto5D8F1D2B_var, "SpawnMutantLarvaApplySpawnBehavior", auto5D8F1D2B_var);
  //  }
    libARMB_gf_CreateMeleeStartingUnitsForTeams();
   // gf_Showallresourcesonmap();
    gf_CreateTopLeftUI();
   // Wait(1.0, c_timeGame);
    //DialogControlSetPosition(gv_draftSelection.lv_chatui, PlayerGroupAll(), c_anchorBottom, 0, 380);
     //lib669D4CA1_gf_setResources();
   // libARMB_gf_setResources();
    Wait(1.0, c_timeGame);
    DialogControlFadeTransparency(lv_blacknessimg, PlayerGroupAll(), 0.5, 100.0);
    DialogDestroy(lv_blackness);
    GameSetMissionTimePaused(false);
    gt_Checkforonlyfloatersafter2minutes_Init();
    if(libARMB_gv_meleeInitialized == false){
        MeleeInitOptions();
    }
}
void MonobattleInitGlobals () {
    int init_i1;
    int init_j1;
    int init_k1;
    gv_topLeftUI.lv_topLeftUIDialog = c_invalidDialogId;
    gv_topLeftUI.lv_openCloseButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_topLeftUI.lv_unitPortraits[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_topLeftUI.lv_playercolorboxes[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_topLeftUI.lv_unitmenuisopen[init_i1] = true;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_topLeftUI.lv_youarrow[init_i1] = c_invalidDialogControlId;
    }
 
	gv_selectionTimer.lv_timerDialog = c_invalidDialogId;
    gv_selectionTimer.lv_timerText = c_invalidDialogControlId;
   
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        lv_playersRemainingtobePlaced[init_i1] = PlayerGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        lv_playersonteam[init_i1] = PlayerGroupEmpty();
    }
    gv_stufftoclean.lv_basebridge = UnitGroupEmpty();
    gv_stufftoclean.lv_arenaactors = UnitGroupEmpty();
    gv_selectionArena.lv_zoffset = 48.0;
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_selectionArena.lv_playerNameTags[init_i1] = c_textTagNone;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_selectionArena.lv_yOUtexttag[init_i1] = c_textTagNone;
    }
    GameSetMissionTimePaused(true);
    gt_Openclose_Init();
    RadialMenuInit();
    gf_runMonobattle();
}
void gf_runMonobattle () {
    // Variable Declarations
    unit lv_theunit;
    // Automatic Variable Declarations
    playergroup auto6CB6625B_g;
    playergroup auto9595B434_g;
    playergroup auto9AA4373F_g;
    int auto9AA4373F_var;
    playergroup auto57A3C8FB_g;
    int auto57A3C8FB_var;
    playergroup autoB5E1506C_g;
    int autoB5E1506C_var;
    playergroup autoF90FF693_g;
    int autoF90FF693_var;
    // Automatic Variable Declarations
    playergroup autoCE2BEC22_g;
    int autoCE2BEC22_var;
    playergroup autoCA802547_g;
    int autoCA802547_var;
    int lv_enumint;
    playergroup autoA1A6BBC2_g;
    playergroup autoC719170D_g;
  //  gf_Hideallresourcesonmap();
    GameSetMissionTimePaused(true);
  //  autoCE2BEC22_g = PlayerGroupAll();
//    autoCE2BEC22_var = -1;
//    while (true) {
  // //     autoCE2BEC22_var = PlayerGroupNextPlayer(autoCE2BEC22_g, autoCE2BEC22_var);
      //  if (autoCE2BEC22_var < 0) { break; }
  //      MeleeSetOption(autoCE2BEC22_var, c_meleeOptionSplitResources, true);
   // }
  //  MeleeInitAI();
     // DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
     // gv_draftSelection.lv_chatui = DialogControlLastCreated();
   // GameSetSpeedValue(c_gameSpeedFaster);
    // Variable Initialization
    // Implementation
    if ((libARMB_gv_testing == true)) {
        PlayerGroupAdd(lv_playersRemainingtobePlaced[1], 1);
        PlayerGroupAdd(lv_playersRemainingtobePlaced[1], 2);
        PlayerGroupAdd(lv_playersRemainingtobePlaced[1], 3);
        PlayerGroupAdd(lv_playersRemainingtobePlaced[1], 4);
        PlayerGroupAdd(lv_playersRemainingtobePlaced[2], 5);
        PlayerGroupAdd(lv_playersRemainingtobePlaced[2], 6);
        PlayerGroupAdd(lv_playersRemainingtobePlaced[2], 7);
        PlayerGroupAdd(lv_playersRemainingtobePlaced[2], 8);
        gv_singleDraft.lv_whosTurnTotalPlayersSelecting = 8;
        gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[1] = 4;
        gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[2] = 4;
    }
    else {
        auto6CB6625B_g = GameAttributePlayersForTeam(1);
        lv_enumint = -1;
        while (true) {
            lv_enumint = PlayerGroupNextPlayer(auto6CB6625B_g, lv_enumint);
            if (lv_enumint < 0) { break; }
            if ((PlayerStatus(lv_enumint) == c_playerStatusActive)) {
                PlayerGroupAdd(lv_playersRemainingtobePlaced[1], lv_enumint);
            }
        }
        auto9595B434_g = GameAttributePlayersForTeam(2);
        lv_enumint = -1;
        while (true) {
            lv_enumint = PlayerGroupNextPlayer(auto9595B434_g, lv_enumint);
            if (lv_enumint < 0) { break; }
            if ((PlayerStatus(lv_enumint) == c_playerStatusActive)) {
                PlayerGroupAdd(lv_playersRemainingtobePlaced[2], lv_enumint);
            }
        }
        gv_singleDraft.lv_whosTurnTotalPlayersSelecting = (PlayerGroupCount(lv_playersRemainingtobePlaced[1]) + PlayerGroupCount(lv_playersRemainingtobePlaced[2]));
        gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[1] = PlayerGroupCount(lv_playersRemainingtobePlaced[1]);
        gv_singleDraft.lv_whosTurnTotalPlayersOnTeam[2] = PlayerGroupCount(lv_playersRemainingtobePlaced[2]);
    }
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_playersRemainingtobePlaced[1], lv_playersonteam[1]);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_playersRemainingtobePlaced[2], lv_playersonteam[2]);
    lv_enumint = 0;
    auto9AA4373F_g = lv_playersonteam[1];
    auto9AA4373F_var = -1;
    while (true) {
        auto9AA4373F_var = PlayerGroupNextPlayer(auto9AA4373F_g, auto9AA4373F_var);
        if (auto9AA4373F_var < 0) { break; }
        lv_enumint += 1;
        gv_selectionArena.lv_playerspotpointassignment[auto9AA4373F_var] = lv_enumint;
    }
    lv_enumint = 0;
    auto57A3C8FB_g = lv_playersonteam[2];
    auto57A3C8FB_var = -1;
    while (true) {
        auto57A3C8FB_var = PlayerGroupNextPlayer(auto57A3C8FB_g, auto57A3C8FB_var);
        if (auto57A3C8FB_var < 0) { break; }
        lv_enumint += 1;
        gv_selectionArena.lv_playerspotpointassignment[auto57A3C8FB_var] = lv_enumint;
    }
    libARMB_gf_HideTerranObjects();
    gf_CreateSelectionArena(Point(57.39, 26.18));
    Wait(0.0, c_timeGame);
    libARMB_gf_ClearPreplacedBuildings();
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[2], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[2], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[2], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[2], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[1], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[1], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[1], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    gf_ShowHideActorForPlayerGroup2(lv_playersonteam[1], libNtve_gf_MainActorofUnit(UnitLastCreated()), false);
    autoB5E1506C_g = lv_playersonteam[1];
    autoB5E1506C_var = -1;
    while (true) {
        autoB5E1506C_var = PlayerGroupNextPlayer(autoB5E1506C_g, autoB5E1506C_var);
        if (autoB5E1506C_var < 0) { break; }
        TextTagCreate(StringExternal("Param/Value/480085BC"), 24, gv_selectionArena.lv_spotPoints[gv_selectionArena.lv_playerspotpointassignment[autoB5E1506C_var]], 53.0, true, false, PlayerGroupAll());
        TextTagSetAlignment(TextTagLastCreated(), c_alignCenter, c_alignCenter);
        gv_selectionArena.lv_playerNameTags[autoB5E1506C_var] = TextTagLastCreated();
        TextTagShow(TextTagLastCreated(), lv_playersonteam[2], false);
        TextExpressionSetToken("Param/Expression/C2E859D0", "A", PlayerName(autoB5E1506C_var));
        TextTagSetText(gv_selectionArena.lv_playerNameTags[autoB5E1506C_var], TextExpressionAssemble("Param/Expression/C2E859D0"));
        TextTagCreate(StringExternal("Param/Value/28808036"), 24, gv_selectionArena.lv_spotPoints[gv_selectionArena.lv_playerspotpointassignment[autoB5E1506C_var]], 52.3, true, false, PlayerGroupSingle(autoB5E1506C_var));
        gv_selectionArena.lv_yOUtexttag[autoB5E1506C_var] = TextTagLastCreated();
    }
    autoF90FF693_g = lv_playersonteam[2];
    autoF90FF693_var = -1;
    while (true) {
        autoF90FF693_var = PlayerGroupNextPlayer(autoF90FF693_g, autoF90FF693_var);
        if (autoF90FF693_var < 0) { break; }
        TextTagCreate(StringExternal("Param/Value/70C2A145"), 24, gv_selectionArena.lv_spotPoints[gv_selectionArena.lv_playerspotpointassignment[autoF90FF693_var]], 53.0, true, false, PlayerGroupAll());
        TextTagSetAlignment(TextTagLastCreated(), c_alignCenter, c_alignCenter);
        gv_selectionArena.lv_playerNameTags[autoF90FF693_var] = TextTagLastCreated();
        TextTagShow(TextTagLastCreated(), lv_playersonteam[1], false);
        TextExpressionSetToken("Param/Expression/6082C42C", "A", PlayerName(autoF90FF693_var));
        TextTagSetText(gv_selectionArena.lv_playerNameTags[autoF90FF693_var], TextExpressionAssemble("Param/Expression/6082C42C"));
        TextTagCreate(StringExternal("Param/Value/46EC0520"), 24, gv_selectionArena.lv_spotPoints[gv_selectionArena.lv_playerspotpointassignment[autoF90FF693_var]], 52.3, true, false, PlayerGroupSingle(autoF90FF693_var));
        gv_selectionArena.lv_yOUtexttag[autoF90FF693_var] = TextTagLastCreated();
    }
    autoCA802547_g = PlayerGroupActive();
    autoCA802547_var = -1;
    while (true) {
        autoCA802547_var = PlayerGroupNextPlayer(autoCA802547_g, autoCA802547_var);
        if (autoCA802547_var < 0) { break; }
        VisRevealerCreate(autoCA802547_var, RegionEntireMap());
        gv_stufftoclean.lv_revealer[autoCA802547_var] = VisRevealerLastCreated();
     //   CameraApplyInfo(autoCA802547_var, CameraInfoFromId(666793663), 0.0, -1, 10.0, true);
      //  CameraSetValue(autoCA802547_var, c_cameraValueDistance, 60.0, 2.0, -1, 10.0);
        CameraSetValue(autoCA802547_var, c_cameraValueHeightOffset, 48.0, 0.0, -1, 10.0);
        CameraPan(autoCA802547_var, Point(57.5, 45.0), 0.0, -1, 10.0, false);
        CameraSetValue(autoCA802547_var, c_cameraValuePitch, 15.0, 0.0, -1, 10.0);
        CameraLockInput(autoCA802547_var, true);
    }
    //DialogControlSetPosition(gv_draftSelection.lv_chatui, PlayerGroupAll(), c_anchorBottomLeft, 20, 20);
    runDraftSelectionStep();
}
void runDraftSelectionStep() {
    // Variable Declarations
    int lv_selectiondialog;
    int lv_selectiontext;
    int lv_enumint;
    int lv_randomint;
    // Automatic Variable Declarations
    const int auto79434AEE_ae = 3;
    const int auto79434AEE_ai = 1;
    playergroup autoA1A6BBC2_g;
    // Variable Initialization
    lv_selectiondialog = c_invalidDialogId;
    lv_selectiontext = c_invalidDialogControlId;
    // Implementation
    lv_enumint = 1;
    if ((libARMB_gv_draftMode == ge_SelectModes_DraftSelection)) {
        gf_DraftSelectionCreateDraftSelectionInterface();
    }
    else if ((libARMB_gv_draftMode == ge_SelectModes_RandomDraft)) {
        gf_RandomDraftCreateUnitSelectionInterface(true);
    }
    else if ((libARMB_gv_draftMode == ge_SelectModes_SingleDraft)) {
        gf_SingleDraftInitSingleDraft();
    } else if ((libARMB_gv_draftMode == ge_SelectModes_TierDraft)) {
        gf_TierDraftInitTierDraft();
    }
}

void libARMB_InitCustomScript () {
}

// Presets
// Functions
void libARMB_gf_InitializeMeleeGame () {
    // Automatic Variable Declarations
    playergroup auto7619CED7_g;
    int auto7619CED7_var;

    // Implementation
    auto7619CED7_g = PlayerGroupAll();
    auto7619CED7_var = -1;
    while (true) {
        auto7619CED7_var = PlayerGroupNextPlayer(auto7619CED7_g, auto7619CED7_var);
        if (auto7619CED7_var < 0) { break; }
        if ((libARMB_gv_raceChoice[auto7619CED7_var] != libARMB_ge_RaceChoice_Observer)) {
            if ((libARMB_gv_monobattleMode != libARMB_ge_MonobattleMode_None)) {
                PlayerSetRace(auto7619CED7_var, libARMB_gf_GetPlayerRaceChoice(auto7619CED7_var));
            }
            else {
                libARMB_gf_ApplyPlayerCustomRace(auto7619CED7_var, libARMB_gf_GetPlayerRaceChoice(auto7619CED7_var));
            }
        }

    }
    if (true) {
    }

    if ((libARMB_gv_monobattleMode != libARMB_ge_MonobattleMode_None)) {
        TriggerExecute(libARMB_gt_RunMonobattle, true, false);
    }

}

void libARMB_gf_SetMonobattleMode (int lp_draftmode) {
    // Automatic Variable Declarations
    // Implementation
    libARMB_gv_monobattleMode = lp_draftmode;
}

void libARMB_gf_SetPlayerRaceChoice (int lp_player, int lp_race) {
    // Automatic Variable Declarations
    // Implementation
    libARMB_gv_raceChoice[lp_player] = lp_race;
}

void libARMB_gf_CreateMeleeStartingUnitsForTeams () {
    // Variable Declarations
    camerainfo lv_camera;
    int[3] lv_teams;
    point lv_point;

    // Automatic Variable Declarations
    playergroup auto4A86B7B6_g;
    int auto4A86B7B6_var;

    // Variable Initialization

    // Implementation
    auto4A86B7B6_g = PlayerGroupActive();
    auto4A86B7B6_var = -1;
    while (true) {
        auto4A86B7B6_var = PlayerGroupNextPlayer(auto4A86B7B6_g, auto4A86B7B6_var);
        if (auto4A86B7B6_var < 0) { break; }
        lv_camera = CameraInfoDefault();
        CameraInfoSetTarget(lv_camera, PlayerStartLocation(auto4A86B7B6_var));
        CameraApplyInfo(auto4A86B7B6_var, lv_camera, 0.0, -1, 0.0, true);
    }
}

void libARMB_gf_CheckRaceTriggers (string lp_race) {
    // Automatic Variable Declarations
    string autoA451B198_val;

    // Implementation
    autoA451B198_val = lp_race;
    if (autoA451B198_val == "UED") {
        if ((libARMB_gv_uED == false)) {
            libARMB_gv_uED = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

    }
    else if (autoA451B198_val == "NHbr") {
        if ((libARMB_gv_hybrids == false)) {
            libARMB_gv_hybrids = true;
            TriggerExecute(libNHbr_gt_InitializeNetworkHybridRace, true, false);
        }

    }
    else if (autoA451B198_val == "Dragon") {
        if ((libARMB_gv_dragons == false)) {
            libARMB_gv_dragons = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }
    else if (autoA451B198_val == "UPL") {
        if ((libARMB_gv_uPL == false)) {
            libARMB_gv_uPL = true;
            TriggerExecute(libUPLR_gt_InitializeUPLRace, true, false);
        }

    }
    else {
    }
}

void libARMB_gf_ApplyChosenRace (int lp_player, int lp_preset) {
    // Variable Declarations
    string lv_sbectcnoprbvlcye;
    string[20] lv_fjrpjrxecvlkjfpg;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARMB_gv_raceChoice[lp_player] = lp_preset;
    if ((GameAttributeGameValue("6") == "0001")) {
        PlayerSetRace(lp_player, libARMB_gf_GetPlayerRaceChoice(lp_player));
    }
    else {
        libARMB_gf_ApplyPlayerCustomRace(lp_player, libARMB_gf_GetPlayerRaceChoice(lp_player));
    }
}

string libARMB_gf_GetPlayerRaceChoice (int lp_player) {
    // Variable Declarations
    string lv_race;
    int lv_count;
    string[20] lv_races;

    // Automatic Variable Declarations
    int auto2D194B64_val;

    // Variable Initialization

    // Implementation
    lv_races[1] = "Zerg";
    lv_races[2] = "Terr";
    lv_races[3] = "Prot";
    lv_races[4] = "Xayi";
    lv_races[5] = "Gen";
    lv_races[6] = "Keir";
    lv_races[7] = "NHbr";
    lv_races[8] = "UED";
    lv_races[9] = "Dragon";
    lv_races[10] = "UPL";
    auto2D194B64_val = libARMB_gv_raceChoice[lp_player];
    if (auto2D194B64_val == libARMB_ge_RaceChoice_Protoss) {
        lv_race = "Prot";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Terran) {
        lv_race = "Terr";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Zerg) {
        lv_race = "Zerg";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Keiron) {
        lv_race = "Keir";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Genetron) {
        lv_race = "Gen";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Xayid) {
        lv_race = "Xayi";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_UED) {
        lv_race = "UED";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Hybrids) {
        lv_race = "NHbr";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Dragon) {
        lv_race = "Dragon";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_UPL) {
        lv_race = "UPL";
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_RandomKoprulu) {
        lv_race = lv_races[RandomInt(1, 3)];
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_RandomScion) {
        lv_race = lv_races[RandomInt(4, 6)];
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_RandomOther) {
        lv_race = lv_races[RandomInt(7, 11)];
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_RandomExtra) {
        lv_race = lv_races[RandomInt(1, 12)];
    }
    else if (auto2D194B64_val == libARMB_ge_RaceChoice_Random) {
        if ((libARMB_gv_acceptedSpecified == true)) {
            if ((libARMB_gv___VRaces.lv_dragon == true)) {
                lv_count += 1;
                lv_races[lv_count] = "Dragon";
            }

            if ((libARMB_gv___VRaces.lv_genetron == true)) {
                lv_count += 1;
                lv_races[lv_count] = "Gen";
            }

            if ((libARMB_gv___VRaces.lv_hybrids == true)) {
                lv_count += 1;
                lv_races[lv_count] = "NHbr";
            }

            if ((libARMB_gv___VRaces.lv_keiron == true)) {
                lv_count += 1;
                lv_races[lv_count] = "Keir";
            }

            if ((libARMB_gv___VRaces.lv_protoss == true)) {
                lv_count += 1;
                lv_races[lv_count] = "Prot";
            }

            if ((libARMB_gv___VRaces.lv_terran == true)) {
                lv_count += 1;
                lv_races[lv_count] = "Terr";
            }

            if ((libARMB_gv___VRaces.lv_zerg == true)) {
                lv_count += 1;
                lv_races[lv_count] = "Zerg";
            }

            if ((libARMB_gv___VRaces.lv_uED == true)) {
                lv_count += 1;
                lv_races[lv_count] = "UED";
            }

            if ((libARMB_gv___VRaces.lv_uPL == true)) {
                lv_count += 1;
                lv_races[lv_count] = "UPL";
            }

            if ((libARMB_gv___VRaces.lv_xayid == true)) {
                lv_count += 1;
                lv_races[lv_count] = "Xayi";
            }

            lv_race = lv_races[RandomInt(1, lv_count)];
        }
        else {
            lv_race = lv_races[RandomInt(1, 11)];
        }
    }
    else {
    }
    return lv_race;
}

bool libARMB_gf_IsRandomRaceChoice (int lp_player) {
    // Automatic Variable Declarations
    int autoB708DA86_val;

    // Implementation
    autoB708DA86_val = libARMB_gv_raceChoice[lp_player];
    if (autoB708DA86_val == libARMB_ge_RaceChoice_RandomOther) {
        return true;
    }
    else if (autoB708DA86_val == libARMB_ge_RaceChoice_RandomKoprulu) {
        return true;
    }
    else if (autoB708DA86_val == libARMB_ge_RaceChoice_RandomScion) {
        return true;
    }
    else if (autoB708DA86_val == libARMB_ge_RaceChoice_Random) {
        return true;
    }
    else {
        return false;
    }
}

int libARMB_gf_GetRacesVariationCount () {
    // Variable Declarations
    int lv_racescount;

    // Automatic Variable Declarations
    playergroup auto857EF3C1_g;
    int auto857EF3C1_var;

    // Variable Initialization

    // Implementation
    if ((libARMB_gv_acceptedSpecified == true)) {
        if ((libARMB_gv___VRaces.lv_dragon == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_genetron == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_hybrids == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_keiron == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_protoss == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_terran == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_zerg == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_uED == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_uPL == true)) {
            lv_racescount += 1;
        }

        if ((libARMB_gv___VRaces.lv_xayid == true)) {
            lv_racescount += 1;
        }

    }

    auto857EF3C1_g = libARMB_gv_startactiveplayers;
    auto857EF3C1_var = -1;
    while (true) {
        auto857EF3C1_var = PlayerGroupNextPlayer(auto857EF3C1_g, auto857EF3C1_var);
        if (auto857EF3C1_var < 0) { break; }
        if ((PlayerRace(auto857EF3C1_var) == "Dragon") && (libARMB_gv___VRaces.lv_dragon == false)) {
            libARMB_gv___VRaces.lv_dragon = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "Gen") && (libARMB_gv___VRaces.lv_genetron == false)) {
            libARMB_gv___VRaces.lv_genetron = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "NHbr") && (libARMB_gv___VRaces.lv_hybrids == false)) {
            libARMB_gv___VRaces.lv_hybrids = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "Keir") && (libARMB_gv___VRaces.lv_keiron == false)) {
            libARMB_gv___VRaces.lv_keiron = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "Prot") && (libARMB_gv___VRaces.lv_protoss == false)) {
            libARMB_gv___VRaces.lv_protoss = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "Terr") && (libARMB_gv___VRaces.lv_terran == false)) {
            libARMB_gv___VRaces.lv_terran = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "Zerg") && (libARMB_gv___VRaces.lv_zerg == false)) {
            libARMB_gv___VRaces.lv_zerg = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "UED") && (libARMB_gv___VRaces.lv_uED == false)) {
            libARMB_gv___VRaces.lv_uED = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "UPL") && (libARMB_gv___VRaces.lv_uPL == false)) {
            libARMB_gv___VRaces.lv_uPL = true;
            lv_racescount += 1;
        }

        if ((PlayerRace(auto857EF3C1_var) == "Xayi") && (libARMB_gv___VRaces.lv_xayid == false)) {
            libARMB_gv___VRaces.lv_xayid = true;
            lv_racescount += 1;
        }

    }
    return lv_racescount;
}

void libARMB_gf_ApplyPlayerCustomRace (int lp_player, string lp_race) {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetRace(lp_player, lp_race);
    if ((lp_race == "UED")) {
        if ((libARMB_gv_uED == false)) {
            libARMB_gv_uED = true;
            TriggerExecute(libUEDC_gt_InitializeUEDRace, true, false);
        }

    }

    if ((lp_race == "NHbr")) {
        if ((libARMB_gv_hybrids == false)) {
            libARMB_gv_hybrids = true;
            TriggerExecute(libNHbr_gt_InitializeNetworkHybridRace, true, false);
        }

    }

    if ((lp_race == "Dragon")) {
        if ((libARMB_gv_dragons == false)) {
            libARMB_gv_dragons = true;
            TriggerExecute(libDRAG_gt_InitializeDragonsRace, true, false);
        }

    }

    if ((lp_race == "UPL")) {
        if ((libARMB_gv_uPL == false)) {
            libARMB_gv_uPL = true;
            TriggerExecute(libUPLR_gt_InitializeUPLRace, true, false);
        }

    }

}

void libARMB_gf_Monobattle (int lp_mode) {
    // Automatic Variable Declarations
    // Implementation
    libARMB_gv_monobattleMode = lp_mode;
    TriggerExecute(libARMB_gt_RunMonobattle, true, false);
}

playergroup libARMB_gf_Aplayeronateamwithaplayer (int lp_index) {
    // Variable Declarations
    int lv_indexoftheteamwithplayers;

    // Automatic Variable Declarations
    const int auto0D21C888_ae = 15;
    int auto0D21C888_var;

    // Variable Initialization

    // Implementation
    auto0D21C888_var = 1;
    for ( ; auto0D21C888_var <= auto0D21C888_ae; auto0D21C888_var += 1 ) {
        if ((PlayerGroupCount(GameAttributePlayersForTeam(auto0D21C888_var)) > 0)) {
            lv_indexoftheteamwithplayers += 1;
            if ((lp_index == lv_indexoftheteamwithplayers)) {
                return GameAttributePlayersForTeam(auto0D21C888_var);
            }

        }

    }
    return PlayerGroupEmpty();
}

int libARMB_gf_Numberofteamswithplayers () {
    // Variable Declarations
    int lv_numberofteamswithplayers;

    // Automatic Variable Declarations
    const int auto0B8E0568_ae = 15;
    int auto0B8E0568_var;

    // Variable Initialization

    // Implementation
    auto0B8E0568_var = 1;
    for ( ; auto0B8E0568_var <= auto0B8E0568_ae; auto0B8E0568_var += 1 ) {
        if ((PlayerGroupCount(GameAttributePlayersForTeam(auto0B8E0568_var)) > 0)) {
            lv_numberofteamswithplayers += 1;
        }

    }
    return lv_numberofteamswithplayers;
}

void libARMB_gf_UnitSelectionPanel (int lp_player) {
    // Variable Declarations
    int lv_offsetX;
    text lv_tooltipsecondario;
    bool lv_disabilitapulsante;
    bool lv_haalleati;
    int lv_i;
    int lv_profileIndex;
    int lv_raceUnitOptions;
    string lv_profile;
    int lv_selectedUnitOption;
    int lv_iteration;
    int lv_buttonIndex;
    string lv_uNIT;
    string lv_aCTOR;
    string lv_uNIT_STRING;

    // Automatic Variable Declarations
    int autoF57E5CBE_ae;
    const int autoF57E5CBE_ai = 1;
    int auto69628141_ae;
    const int auto69628141_ai = 1;

    // Variable Initialization
    lv_offsetX = 27;
    lv_uNIT_STRING = "";

    // Implementation
    TriggerEnable(libARMB_gt_Unitselected, true);
    if ((libARMB_gv_dIALOG[lp_player] != c_invalidDialogId)) {
        DialogDestroy(libARMB_gv_dIALOG[lp_player]);
    }

    autoF57E5CBE_ae = UserDataInstanceCount("MonobattlesProfiles");
    lv_profileIndex = 1;
    for ( ; ( (autoF57E5CBE_ai >= 0 && lv_profileIndex <= autoF57E5CBE_ae) || (autoF57E5CBE_ai < 0 && lv_profileIndex >= autoF57E5CBE_ae) ) ; lv_profileIndex += autoF57E5CBE_ai ) {
        lv_profile = UserDataInstance("MonobattlesProfiles", lv_profileIndex);
        if ((UserDataGetGameLink("MonobattlesProfiles", lv_profile, "Race", 1) == PlayerRace(lp_player))) {
            lv_raceUnitOptions += 1;
        }

    }
    DialogCreate(((76 * lv_raceUnitOptions) + 91 + 50), 123, c_anchorBottom, -20, 275, true);
    libARMB_gv_dIALOG[lp_player] = DialogLastCreated();
    auto69628141_ae = UserDataInstanceCount("MonobattlesProfiles");
    lv_profileIndex = 1;
    for ( ; ( (auto69628141_ai >= 0 && lv_profileIndex <= auto69628141_ae) || (auto69628141_ai < 0 && lv_profileIndex >= auto69628141_ae) ) ; lv_profileIndex += auto69628141_ai ) {
        lv_profile = UserDataInstance("MonobattlesProfiles", lv_profileIndex);
        if ((UserDataGetGameLink("MonobattlesProfiles", lv_profile, "Race", 1) == PlayerRace(lp_player))) {
            lv_buttonIndex += 1;
            lv_uNIT = UserDataGetUnit("MonobattlesProfiles", lv_profile, "Unit", 1);
            lv_aCTOR = ((lv_uNIT));
            TextExpressionSetToken("Param/Expression/lib_ARMB_608A653B", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_ARMB_608A653B", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "Description", c_playerAny)));
            libNtve_gf_CreateDialogItemButton(libARMB_gv_dIALOG[lp_player], 75, 75, c_anchorTopLeft, lv_offsetX, 25, TextExpressionAssemble("Param/Expression/lib_ARMB_608A653B"), StringToText(""), "");
            libARMB_gv_dIALOG_BUTTONS[lp_player][lv_buttonIndex] = DialogControlLastCreated();
            libARMB_gv_dIALOG_PROFILES[lp_player][lv_buttonIndex] = lv_profile;
            DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
            libNtve_gf_CreateDialogItemImage(libARMB_gv_dIALOG[lp_player], 70, 70, c_anchorTopLeft, (lv_offsetX + 3), (25 + 3), StringToText(""), (CatalogFieldValueGet(c_gameCatalogActor, lv_aCTOR, "UnitIcon", lp_player)), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            lv_offsetX += 75;
        }

    }
    lv_offsetX += 15;
    lv_profile = "Random";
    lv_buttonIndex += 1;
    libNtve_gf_CreateDialogItemButton(libARMB_gv_dIALOG[lp_player], 76, 76, c_anchorTopLeft, lv_offsetX, 25, TextExpressionAssemble("Param/Expression/lib_ARMB_D7B6576F"), StringToText(""), "");
    libARMB_gv_dIALOG_BUTTONS[lp_player][lv_buttonIndex] = DialogControlLastCreated();
    libARMB_gv_dIALOG_PROFILES[lp_player][lv_buttonIndex] = lv_profile;
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
    libNtve_gf_CreateDialogItemImage(libARMB_gv_dIALOG[lp_player], 70, 70, c_anchorTopLeft, (lv_offsetX + 3), (25 + 3), StringToText(""), "Assets\\Textures\\ui_battlenet_glue_icons_random_normal.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(libARMB_gv_dIALOG[lp_player], PlayerGroupSingle(lp_player), true);
}

void libARMB_gf_AddTeamStartPoint (int lp_team, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    libARMB_gv__pointsCount[lp_team] += 1;
    libARMB_gv_points[lp_team][libARMB_gv__pointsCount[lp_team]] = lp_point;
}

void libARMB_gf_initUnitData () {
    // Variable Declarations
    int lv_i;
    string lv_profile;
    string lv_unit;
    string lv_actor;
    string lv_race;

    // Automatic Variable Declarations
    playergroup auto2AE87138_g;
    int auto2AE87138_var;
    string auto92920FD6_val;
    playergroup auto078FB010_g;
    int auto078FB010_var;
    int autoECCBC2F4_ae;
    const int autoECCBC2F4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libARMB_gv_acceptedSpecified == false)) {
        auto2AE87138_g = libARMB_gv_startactiveplayers;
        auto2AE87138_var = -1;
        while (true) {
            auto2AE87138_var = PlayerGroupNextPlayer(auto2AE87138_g, auto2AE87138_var);
            if (auto2AE87138_var < 0) { break; }
            lv_race = PlayerRace(auto2AE87138_var);
            auto92920FD6_val = lv_race;
            if (auto92920FD6_val == "Dragon") {
                libARMB_gv___VRaces.lv_dragon = true;
            }
            else if (auto92920FD6_val == "Gen") {
                libARMB_gv___VRaces.lv_genetron = true;
            }
            else if (auto92920FD6_val == "NHbr") {
                libARMB_gv___VRaces.lv_hybrids = true;
            }
            else if (auto92920FD6_val == "Keir") {
                libARMB_gv___VRaces.lv_keiron = true;
            }
            else if (auto92920FD6_val == "Prot") {
                libARMB_gv___VRaces.lv_protoss = true;
            }
            else if (auto92920FD6_val == "Terr") {
                libARMB_gv___VRaces.lv_terran = true;
            }
            else if (auto92920FD6_val == "UED") {
                libARMB_gv___VRaces.lv_uED = true;
            }
            else if (auto92920FD6_val == "Xayi") {
                libARMB_gv___VRaces.lv_xayid = true;
            }
            else if (auto92920FD6_val == "Zerg") {
                libARMB_gv___VRaces.lv_zerg = true;
            }
            else if (auto92920FD6_val == "UPL") {
            }
            else if (auto92920FD6_val == "TerU") {
            }
            else if (auto92920FD6_val == "Synd") {
            }
            else {
            }
        }
    }

    if ((libARMB_gv_draftMode == 1)) {
        auto078FB010_g = libARMB_gv_startactiveplayers;
        auto078FB010_var = -1;
        while (true) {
            auto078FB010_var = PlayerGroupNextPlayer(auto078FB010_g, auto078FB010_var);
            if (auto078FB010_var < 0) { break; }
            libARMB_gv_playerData[auto078FB010_var].lv_repick = libARMB_gf_IsRandomRaceChoice(auto078FB010_var);
        }
    }

    autoECCBC2F4_ae = UserDataInstanceCount("MonobattlesProfiles");
    lv_i = 1;
    for ( ; ( (autoECCBC2F4_ai >= 0 && lv_i <= autoECCBC2F4_ae) || (autoECCBC2F4_ai < 0 && lv_i >= autoECCBC2F4_ae) ) ; lv_i += autoECCBC2F4_ai ) {
        lv_profile = UserDataInstance("MonobattlesProfiles", lv_i);
        if ((UserDataGetInt("MonobattlesProfiles", lv_profile, "Active", 1) == 0)) {
            continue;
        }

        lv_unit = UserDataGetUnit("MonobattlesProfiles", lv_profile, "Unit", 1);
        if (((libARMB_gv_draftMode == 1) || ((libARMB_gf_GetUnitRace(lv_unit) == "Gen") && (libARMB_gv___VRaces.lv_genetron == true)) || ((libARMB_gf_GetUnitRace(lv_unit) == "NHbr") && (libARMB_gv___VRaces.lv_hybrids == true)) || ((libARMB_gf_GetUnitRace(lv_unit) == "Keir") && (libARMB_gv___VRaces.lv_keiron == true)) || ((libARMB_gf_GetUnitRace(lv_unit) == "Prot") && (libARMB_gv___VRaces.lv_protoss == true)) || ((libARMB_gf_GetUnitRace(lv_unit) == "Terr") && (libARMB_gv___VRaces.lv_terran == true)) || ((libARMB_gf_GetUnitRace(lv_unit) == "Zerg") && (libARMB_gv___VRaces.lv_zerg == true)) || ((libARMB_gf_GetUnitRace(lv_unit) == "UED") && (libARMB_gv___VRaces.lv_uED == true)) || ((libARMB_gf_GetUnitRace(lv_unit) == "Xayi") && (libARMB_gv___VRaces.lv_xayid == true)))) {
            libARMB_gv_unitDataCount += 1;
            lv_actor = ((lv_unit));
            libARMB_gv_unitData.lv_unitName[libARMB_gv_unitDataCount] = StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Name", c_playerAny));
            libARMB_gv_unitData.lv_unitSound[libARMB_gv_unitDataCount] = (CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "SoundArray[" + IntToString(0) + "]", c_playerAny));
            libARMB_gv_unitData.lv_unitType[libARMB_gv_unitDataCount] = lv_unit;
            libARMB_gv_unitData.lv_tier[libARMB_gv_unitDataCount] = UserDataGetInt("MonobattlesProfiles", lv_profile, "Tier", 1);
            libARMB_gv_unitData.lv_thumbnail[libARMB_gv_unitDataCount] = (CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", c_playerAny));
            libARMB_gv_unitData.lv_profile[libARMB_gv_unitDataCount] = lv_profile;
        }

    }
}

void libARMB_gf_ShowTerrainObjects () {
    // Automatic Variable Declarations
    unitgroup auto85E964C0_g;
    int auto85E964C0_u;
    unit auto85E964C0_var;

    // Implementation
    auto85E964C0_g = libARMB_gv_hidden;
    auto85E964C0_u = UnitGroupCount(auto85E964C0_g, c_unitCountAll);
    for (;; auto85E964C0_u -= 1) {
        auto85E964C0_var = UnitGroupUnitFromEnd(auto85E964C0_g, auto85E964C0_u);
        if (auto85E964C0_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto85E964C0_var, true);
    }
}

void libARMB_gf_ClearPreplacedBuildings () {
    // Automatic Variable Declarations
    playergroup autoA0F38DE1_g;
    int autoA0F38DE1_var;

    // Implementation
    autoA0F38DE1_g = libARMB_gv_startactiveplayers;
    autoA0F38DE1_var = -1;
    while (true) {
        autoA0F38DE1_var = PlayerGroupNextPlayer(autoA0F38DE1_g, autoA0F38DE1_var);
        if (autoA0F38DE1_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MonobattlePlayer", 0, autoA0F38DE1_var, PlayerStartLocation(autoA0F38DE1_var));
    }
}

void libARMB_gf_HideTerranObjects () {
    // Automatic Variable Declarations
    unitgroup auto6932BC03_g;
    int auto6932BC03_u;
    unit auto6932BC03_var;

    // Implementation
    libARMB_gv_hidden = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6932BC03_g = libARMB_gv_hidden;
    auto6932BC03_u = UnitGroupCount(auto6932BC03_g, c_unitCountAll);
    for (;; auto6932BC03_u -= 1) {
        auto6932BC03_var = UnitGroupUnitFromEnd(auto6932BC03_g, auto6932BC03_u);
        if (auto6932BC03_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto6932BC03_var, false);
    }
}

void libARMB_gf_RandomDraftSetrandomunitnumber (int lp_player) {
    // Variable Declarations
    string lv_profile;
    string lv_profile2;
    int lv_i;

    // Automatic Variable Declarations
    int auto006A2F1B_ae;
    const int auto006A2F1B_ai = 1;

    // Variable Initialization
    lv_profile = libARMB_gf_GetRandomProfile(libARMB_gf_GetPlayerRaceChoice(lp_player));

    // Implementation
    auto006A2F1B_ae = libARMB_gv_unitDataCount;
    lv_i = 1;
    for ( ; ( (auto006A2F1B_ai >= 0 && lv_i <= auto006A2F1B_ae) || (auto006A2F1B_ai < 0 && lv_i >= auto006A2F1B_ae) ) ; lv_i += auto006A2F1B_ai ) {
        if ((lv_profile == libARMB_gv_unitData.lv_profile[lv_i])) {
            libARMB_gv_unitData.lv_playerUnitLink[lp_player] = lv_i;
        }

    }
}

void libARMB_gf_AssignUnitAndRace (int lp_player) {
    // Variable Declarations
    string lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARMB_gf_ApplyPlayerCustomRace(lp_player, libARMB_gf_GetUnitRace(libARMB_gv_unitData.lv_unitType[libARMB_gv_unitData.lv_playerUnitLink[lp_player]]));
    libARMB_gf_ActivateMonobattleProfile(lp_player, libARMB_gv_unitData.lv_profile[libARMB_gv_unitData.lv_playerUnitLink[lp_player]]);
}

void libARMB_gf_ClearArmedCache (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = lp_player;

    // Implementation
    libARMB_gv_cACHE_ARMED[lv_p] = " ";
    libARMB_gv_cACHE_DISARMED[lv_p] = " ";
}

void libARMB_gf_Armunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_aBILITY;
    string lv_behavior;

    // Automatic Variable Declarations
    int autoA801A0C3_ae;
    const int autoA801A0C3_ai = 1;
    int autoD4C70578_ae;
    const int autoD4C70578_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    if ((UnitHasBehavior2(lp_unit, "Monobattle") == false)) {
        return ;
    }

    UnitBehaviorRemove(lp_unit, "Monobattle", 1);
    autoA801A0C3_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoA801A0C3_ai >= 0 && lv_i <= autoA801A0C3_ae) || (autoA801A0C3_ai < 0 && lv_i >= autoA801A0C3_ae) ) ; lv_i += autoA801A0C3_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((libARMB_gf_AbilityIsDanger(lp_player, lv_aBILITY) == true))) {
            UnitAbilityAdd(lp_unit, lv_aBILITY);
        }

    }
    autoD4C70578_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoD4C70578_ai >= 0 && lv_i <= autoD4C70578_ae) || (autoD4C70578_ai < 0 && lv_i >= autoD4C70578_ae) ) ; lv_i += autoD4C70578_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((libARMB_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorAdd(lp_unit, lv_behavior, lp_unit, 1);
        }

    }
}

void libARMB_gf_Disarmunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    int lv_cAbilityEffectAttack;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto1D74B2D6_ae;
    const int auto1D74B2D6_ai = 1;
    int auto3C48244D_ae;
    const int auto3C48244D_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);
    lv_cAbilityEffectAttack = CatalogEntryClass(c_gameCatalogAbil, "attack");

    // Implementation
    if ((UnitHasBehavior2(lp_unit, "Monobattle") == true)) {
        return ;
    }

    UnitBehaviorAdd(lp_unit, "Monobattle", lp_unit, 1);
    auto1D74B2D6_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto1D74B2D6_ai >= 0 && lv_i <= auto1D74B2D6_ae) || (auto1D74B2D6_ai < 0 && lv_i >= auto1D74B2D6_ae) ) ; lv_i += auto1D74B2D6_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((libARMB_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            UnitAbilityRemove(lp_unit, lv_ability);
        }

    }
    auto3C48244D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto3C48244D_ai >= 0 && lv_i <= auto3C48244D_ae) || (auto3C48244D_ai < 0 && lv_i >= auto3C48244D_ae) ) ; lv_i += auto3C48244D_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((libARMB_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorRemove(lp_unit, lv_behavior, 1);
        }

    }
}

void libARMB_gf_ArmUnitType (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto705E07D6_ae;
    const int auto705E07D6_ai = 1;
    int auto7114222D_ae;
    const int auto7114222D_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (libARMB_gf_UnitTypeisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((libARMB_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true)) {
        libARMB_gv_cACHE_DISARMED[lp_player] = StringReplaceWord(libARMB_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    auto705E07D6_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto705E07D6_ai >= 0 && lv_i <= auto705E07D6_ae) || (auto705E07D6_ai < 0 && lv_i >= auto705E07D6_ae) ) ; lv_i += auto705E07D6_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    auto7114222D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto7114222D_ai >= 0 && lv_i <= auto7114222D_ae) || (auto7114222D_ai < 0 && lv_i >= auto7114222D_ae) ) ; lv_i += auto7114222D_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == libARMB_gv_cAbilityAttack) || (libARMB_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        libARMB_gv_cACHE_ARMED[lp_player] = (libARMB_gv_cACHE_ARMED[lp_player] + (lp_unit) + " ");
    }

}

void libARMB_gf_Disarmunittype (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto1459E15E_ae;
    const int auto1459E15E_ai = 1;
    int auto7198A808_ae;
    const int auto7198A808_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (libARMB_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((libARMB_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        libARMB_gv_cACHE_ARMED[lp_player] = StringReplaceWord(libARMB_gv_cACHE_ARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    auto1459E15E_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto1459E15E_ai >= 0 && lv_i <= auto1459E15E_ae) || (auto1459E15E_ai < 0 && lv_i >= auto1459E15E_ae) ) ; lv_i += auto1459E15E_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    auto7198A808_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto7198A808_ai >= 0 && lv_i <= auto7198A808_ae) || (auto7198A808_ai < 0 && lv_i >= auto7198A808_ae) ) ; lv_i += auto7198A808_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == libARMB_gv_cAbilityAttack) || (libARMB_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        libARMB_gv_cACHE_DISARMED[lp_player] = (libARMB_gv_cACHE_DISARMED[lp_player] + (lp_unit) + " ");
    }

}

bool libARMB_gf_UnitTypeisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARMB_gv_cACHE_ARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libARMB_gf_UnitTypeisDisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARMB_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libARMB_gf_BehaviorisDetector (int lp_player, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    libARMB_gv_sEARCHMODE = libARMB_ge_SearchMode_Detection;
    libARMB_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return libARMB_gf_ByPassBehavior(lp_player, lp_behavior);
}

bool libARMB_gf_AbilityIsDetector (int lp_player, string lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    libARMB_gv_sEARCHMODE = libARMB_ge_SearchMode_Detection;
    libARMB_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return libARMB_gf_ByPassAbility(lp_player, lp_ability);
}

bool libARMB_gf_FilterEnemyisExcluded (string lp_filter) {
    // Variable Declarations
    string lv_excludedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_excludedString = "";

    // Implementation
    lv_excludedString = StringWord(StringReplaceWord(lp_filter, ";", " ", c_stringReplaceAll, c_stringCase), 2);
    if ((StringFind(lv_excludedString, "Enemy", c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libARMB_gf_UnitIsDanger (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_ability;
    string lv_behavior;
    bool lv_isDanger;

    // Automatic Variable Declarations
    int autoBDB4707D_ae;
    const int autoBDB4707D_ai = 1;
    int autoAF2A995A_ae;
    const int autoAF2A995A_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return false;
    }

    if ((StringFind(libARMB_gv_cACHE_DANGER_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(libARMB_gv_cACHE_SAFE_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return false;
    }

    if ((CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) > 0)) {
        libARMB_gv_cACHE_DANGER_UNITS = (libARMB_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
        return true;
    }

    autoBDB4707D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoBDB4707D_ai >= 0 && lv_i <= autoBDB4707D_ae) || (autoBDB4707D_ai < 0 && lv_i >= autoBDB4707D_ae) ) ; lv_i += autoBDB4707D_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((libARMB_gf_AbilityIsDanger(lp_player, lv_ability) == true)) {
            libARMB_gv_cACHE_DANGER_UNITS = (libARMB_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
            return true;
        }

    }
    autoAF2A995A_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoAF2A995A_ai >= 0 && lv_i <= autoAF2A995A_ae) || (autoAF2A995A_ai < 0 && lv_i >= autoAF2A995A_ae) ) ; lv_i += autoAF2A995A_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((libARMB_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            libARMB_gv_cACHE_DANGER_UNITS = (libARMB_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
            return true;
        }

    }
    libARMB_gv_cACHE_SAFE_UNITS = (libARMB_gv_cACHE_SAFE_UNITS + (lp_unit) + " ");
    return false;
}

bool libARMB_gf_AbilityIsDanger (int lp_player, string lp_ability) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARMB_gv_cACHE_DANGER_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(libARMB_gv_cACHE_SAFE_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return false;
    }

    libARMB_gv_sEARCHMODE = libARMB_ge_SearchMode_Agressive;
    libARMB_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = libARMB_gf_ByPassAbility(lp_player, lp_ability);
    if ((lv_isDanger == true)) {
        libARMB_gv_cACHE_DANGER_ABILITIES = (libARMB_gv_cACHE_DANGER_ABILITIES + (lp_ability) + " ");
    }
    else {
        libARMB_gv_cACHE_SAFE_ABILITIES = (libARMB_gv_cACHE_SAFE_ABILITIES + (lp_ability) + " ");
    }
    return lv_isDanger;
}

bool libARMB_gf_BehaviorisDanger (int lp_player, string lp_behavior) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARMB_gv_cACHE_DANGER_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(libARMB_gv_cACHE_SAFE_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return false;
    }

    libARMB_gv_sEARCHMODE = libARMB_ge_SearchMode_Agressive;
    libARMB_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = libARMB_gf_ByPassBehavior(lp_player, lp_behavior);
    if ((lv_isDanger == true)) {
        libARMB_gv_cACHE_DANGER_BEHAVIOR = (libARMB_gv_cACHE_DANGER_BEHAVIOR + (lp_behavior) + " ");
    }
    else {
        libARMB_gv_cACHE_SAFE_BEHAVIOR = (libARMB_gv_cACHE_SAFE_BEHAVIOR + (lp_behavior) + " ");
    }
    return lv_isDanger;
}

string libARMB_gf_GetUnitRace (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Race", c_playerAny));
}

string libARMB_gf_GetUpgradeRace (string lp_upgrade) {
    // Variable Declarations
    string lv_editorCategories;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editorCategories = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny);

    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny));
}

bool libARMB_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil) {
    // Variable Declarations
    bool lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARMB_gv_sEARCHMODE = libARMB_ge_SearchMode_Ability;
    libARMB_gv_cACHE_TMPEFFECTS_SIZE = 0;
    libARMB_gv_bYPASS_SEARCH_ABILITY_COMMAND = lp_abil;
    lv_value = libARMB_gf_ByPassBehavior(lp_player, lp_behavior);
    libARMB_gv_bYPASS_SEARCH_ABILITY_COMMAND = null;
    return lv_value;
}

bool libARMB_gf_ByPassBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;
    int lv_cBehaviorBuff;

    // Automatic Variable Declarations
    int autoCC77D6B3_val;

    // Variable Initialization
    lv_cBehaviorBuff = CatalogEntryClass(c_gameCatalogBehavior, "AdeptPhaseShiftCaster");

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return false;
    }

    autoCC77D6B3_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (autoCC77D6B3_val == lv_cBehaviorBuff) {
        if ((libARMB_gv_sEARCHMODE == libARMB_ge_SearchMode_Detection)) {
            if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lp_behavior, "Modification.Detect", lp_player) > 0.0)) {
                return true;
            }

        }

        if (((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

bool libARMB_gf_ByPassEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoD79EDEA7_ae;
    const int autoD79EDEA7_ai = 1;
    int auto1CBB5F64_val;
    int auto2F9A9472_ae;
    const int auto2F9A9472_ai = 1;
    int autoE6A442AD_ae;
    const int autoE6A442AD_ai = 1;
    int auto0B56D0B9_ae;
    const int auto0B56D0B9_ai = 1;
    int autoEB9E19F8_ae;
    const int autoEB9E19F8_ai = 1;
    int auto0FF22C3B_ae;
    const int auto0FF22C3B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return false;
    }

    autoD79EDEA7_ae = libARMB_gv_cACHE_TMPEFFECTS_SIZE;
    lv_i = 1;
    for ( ; ( (autoD79EDEA7_ai >= 0 && lv_i <= autoD79EDEA7_ae) || (autoD79EDEA7_ai < 0 && lv_i >= autoD79EDEA7_ae) ) ; lv_i += autoD79EDEA7_ai ) {
        if ((libARMB_gv_cACHE_TMPEFFECTS[lv_i] == lp_effect)) {
            return false;
        }

    }
    libARMB_gv_cACHE_TMPEFFECTS_SIZE += 1;
    libARMB_gv_cACHE_TMPEFFECTS[libARMB_gv_cACHE_TMPEFFECTS_SIZE] = lp_effect;
    auto1CBB5F64_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (auto1CBB5F64_val == libARMB_gv_cEffectIssueOrder) {
        if ((libARMB_gf_ByPassAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectApplyBehavior) {
        if ((libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectCreateHealer) {
        if (((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectCreatePersistent) {
        auto2F9A9472_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2F9A9472_ai >= 0 && lv_i <= auto2F9A9472_ae) || (auto2F9A9472_ai < 0 && lv_i >= auto2F9A9472_ae) ) ; lv_i += auto2F9A9472_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectLaunchMissile) {
        if (((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player))) == true) || (libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player))) == true) || (libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectSet) {
        autoE6A442AD_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoE6A442AD_ai >= 0 && lv_i <= autoE6A442AD_ae) || (autoE6A442AD_ai < 0 && lv_i >= autoE6A442AD_ae) ) ; lv_i += autoE6A442AD_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectTeleport) {
        if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectSearchArea) {
        auto0B56D0B9_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "AreaArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto0B56D0B9_ai >= 0 && lv_i <= auto0B56D0B9_ae) || (auto0B56D0B9_ai < 0 && lv_i >= auto0B56D0B9_ae) ) ; lv_i += auto0B56D0B9_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "AreaArray[" + IntToString(lv_i) + "].Effect", lp_player))) == true)) {
                return true;
            }

        }
        if ((libARMB_gv_sEARCHMODE == libARMB_ge_SearchMode_Agressive)) {
            if ((libARMB_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchFilters", lp_player)) == false)) {
                return true;
            }

        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectModifyUnit) {
        if ((libARMB_gv_sEARCHMODE == libARMB_ge_SearchMode_Ability)) {
            autoEB9E19F8_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "Cost", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (autoEB9E19F8_ai >= 0 && lv_i <= autoEB9E19F8_ae) || (autoEB9E19F8_ai < 0 && lv_i >= autoEB9E19F8_ae) ) ; lv_i += autoEB9E19F8_ai ) {
                if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Cost[" + IntToString(lv_i) + "].Abil", lp_player)) == libARMB_gv_bYPASS_SEARCH_ABILITY_COMMAND)) {
                    return true;
                }

            }
        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectDamage) {
        if ((libARMB_gv_sEARCHMODE == libARMB_ge_SearchMode_Agressive)) {
            if (((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Amount", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Random", lp_player) > 0.0))) {
                return true;
            }

        }

    }
    else if (auto1CBB5F64_val == libARMB_gv_cEffectCreateUnit) {
        if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player))) == true)) {
            return true;
        }

        if ((libARMB_gv_sEARCHMODE == libARMB_ge_SearchMode_Agressive)) {
            auto0FF22C3B_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (auto0FF22C3B_ai >= 0 && lv_i <= auto0FF22C3B_ae) || (auto0FF22C3B_ai < 0 && lv_i >= auto0FF22C3B_ae) ) ; lv_i += auto0FF22C3B_ai ) {
                if ((libARMB_gf_UnitIsDanger(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                    return true;
                }

            }
        }

    }
    else {
    }
    return false;
}

bool libARMB_gf_ByPassAbility (int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_i;
    string lv_requirement;
    int lv_cAbilityArmMagazine;
    int lv_cAbilityAugment;
    int lv_cAbilityBehavior;
    int lv_cAbilityBuild;
    int lv_cAbilityEffectInstant;
    int lv_cAbilityEffectTarget;
    int lv_cAbilityEffectMorph;

    // Automatic Variable Declarations
    int auto722CF02B_val;
    int auto2D9E120B_ae;
    const int auto2D9E120B_ai = 1;
    int autoB207D5D7_ae;
    const int autoB207D5D7_ai = 1;
    int auto0D8E56A4_ae;
    const int auto0D8E56A4_ai = 1;
    int autoFA3614C5_ae;
    const int autoFA3614C5_ai = 1;
    int autoABDCF586_ae;
    const int autoABDCF586_ai = 1;
    int auto2C3B8BEA_ae;
    const int auto2C3B8BEA_ai = 1;
    int auto2B838A87_ae;
    const int auto2B838A87_ai = 1;
    int auto3DFFDEB8_ae;
    const int auto3DFFDEB8_ai = 1;

    // Variable Initialization
    lv_cAbilityArmMagazine = CatalogEntryClass(c_gameCatalogAbil, "CarrierHangar");
    lv_cAbilityAugment = CatalogEntryClass(c_gameCatalogAbil, "TornadoMissile");
    lv_cAbilityBehavior = CatalogEntryClass(c_gameCatalogAbil, "BansheeCloak");
    lv_cAbilityBuild = CatalogEntryClass(c_gameCatalogAbil, "ProtossBuild");
    lv_cAbilityEffectInstant = CatalogEntryClass(c_gameCatalogAbil, "Overcharge");
    lv_cAbilityEffectTarget = CatalogEntryClass(c_gameCatalogAbil, "BlindingCloud");
    lv_cAbilityEffectMorph = CatalogEntryClass(c_gameCatalogAbil, "VoidRaySwarmDamageBoost");

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return false;
    }

    auto722CF02B_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (auto722CF02B_val == lv_cAbilityAugment) {
        if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto722CF02B_val == lv_cAbilityArmMagazine) {
        if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true) && (libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        auto2D9E120B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2D9E120B_ai >= 0 && lv_i <= auto2D9E120B_ae) || (auto2D9E120B_ai < 0 && lv_i >= auto2D9E120B_ae) ) ; lv_i += auto2D9E120B_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto722CF02B_val == lv_cAbilityBehavior) {
        if ((libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        autoB207D5D7_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoB207D5D7_ai >= 0 && lv_i <= autoB207D5D7_ae) || (autoB207D5D7_ai < 0 && lv_i >= autoB207D5D7_ae) ) ; lv_i += autoB207D5D7_ai ) {
            if ((libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto722CF02B_val == lv_cAbilityEffectInstant) {
        if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        auto0D8E56A4_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto0D8E56A4_ai >= 0 && lv_i <= auto0D8E56A4_ae) || (auto0D8E56A4_ai < 0 && lv_i >= auto0D8E56A4_ae) ) ; lv_i += auto0D8E56A4_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        autoFA3614C5_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoFA3614C5_ai >= 0 && lv_i <= autoFA3614C5_ae) || (autoFA3614C5_ai < 0 && lv_i >= autoFA3614C5_ae) ) ; lv_i += autoFA3614C5_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        autoABDCF586_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoABDCF586_ai >= 0 && lv_i <= autoABDCF586_ae) || (autoABDCF586_ai < 0 && lv_i >= autoABDCF586_ae) ) ; lv_i += autoABDCF586_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true) || (libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto722CF02B_val == lv_cAbilityEffectTarget) {
        if ((libARMB_gv_sEARCHMODE == libARMB_ge_SearchMode_Agressive)) {
            if ((CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "TargetFilters", lp_player) > 0) && (libARMB_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "TargetFilters[" + IntToString(0) + "]", lp_player)) == false)) {
                TextExpressionSetToken("Param/Expression/lib_ARMB_B024836C", "A", StringToText((lp_ability)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARMB_B024836C"), false);
                return true;
            }

        }

        if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        auto2C3B8BEA_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2C3B8BEA_ai >= 0 && lv_i <= auto2C3B8BEA_ae) || (auto2C3B8BEA_ai < 0 && lv_i >= auto2C3B8BEA_ae) ) ; lv_i += auto2C3B8BEA_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto2B838A87_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2B838A87_ai >= 0 && lv_i <= auto2B838A87_ae) || (auto2B838A87_ai < 0 && lv_i >= auto2B838A87_ae) ) ; lv_i += auto2B838A87_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto3DFFDEB8_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto3DFFDEB8_ai >= 0 && lv_i <= auto3DFFDEB8_ae) || (auto3DFFDEB8_ai < 0 && lv_i >= auto3DFFDEB8_ae) ) ; lv_i += auto3DFFDEB8_ai ) {
            if ((libARMB_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (libARMB_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

void libARMB_gf_ActivateMonobattleProfile (int lp_player, string lp_profile) {
    // Variable Declarations
    int lv_i;
    string lv_uNIT;
    string lv_uPGRADE;
    string lv_sOUND;
    int lv_sOUNDS;
    string lv_pROFILE;
    string lv_selectedUnit;

    // Automatic Variable Declarations
    string auto2D06D0FE_val;
    int autoE9695E8B_ae;
    int autoE9695E8B_var;
    int autoBDB74E67_ae;
    int autoBDB74E67_var;
    int autoC01889F3_ae;
    const int autoC01889F3_ai = 1;
    int auto8649832C_ae;
    int auto8649832C_var;
    int autoC24F4D3A_ae;
    const int autoC24F4D3A_ai = 1;
    int auto07B06529_ae;
    const int auto07B06529_ai = 1;
    int autoBCBF1AFE_ae;
    const int autoBCBF1AFE_ai = 1;
    int autoE8EC64D3_ae;
    const int autoE8EC64D3_ai = 1;

    // Variable Initialization
    lv_selectedUnit = "";

    // Implementation
    libARMB_gf_ClearCache();
    libARMB_gf_ClearArmedCache(lp_player);
    auto2D06D0FE_val = lp_profile;
    if (auto2D06D0FE_val == "Random") {
        libARMB_gv_profiles[lp_player] = libARMB_gf_GetRandomProfile(PlayerRace(lp_player));
    }
    else if (auto2D06D0FE_val == "Default") {
        autoE9695E8B_ae = UserDataInstanceCount("Rules");
        autoE9695E8B_var = 1;
        for ( ; autoE9695E8B_var <= autoE9695E8B_ae; autoE9695E8B_var += 1 ) {
            lv_pROFILE = UserDataInstance("Rules", autoE9695E8B_var);
            if ((UserDataGetGameLink("Rules", lv_pROFILE, "Race", 1) == PlayerRace(lp_player))) {
                libARMB_gv_profiles[lp_player] = lv_pROFILE;
                break;
            }

        }
    }
    else if (auto2D06D0FE_val == "Search") {
        lv_selectedUnit = UnitGetType(UnitGroupUnit(UnitGroupSelected(lp_player), 1));
        autoBDB74E67_ae = UserDataInstanceCount("MonobattlesProfiles");
        autoBDB74E67_var = 1;
        for ( ; autoBDB74E67_var <= autoBDB74E67_ae; autoBDB74E67_var += 1 ) {
            lv_pROFILE = UserDataInstance("MonobattlesProfiles", autoBDB74E67_var);
            if ((UserDataGetGameLink("Rules", lv_pROFILE, "Race", 1) == PlayerRace(lp_player))) {
                autoC01889F3_ae = UserDataFieldValueCount("MonobattlesProfiles", "Unit");
                lv_i = 1;
                for ( ; ( (autoC01889F3_ai >= 0 && lv_i <= autoC01889F3_ae) || (autoC01889F3_ai < 0 && lv_i >= autoC01889F3_ae) ) ; lv_i += autoC01889F3_ai ) {
                    lv_uNIT = UserDataGetUnit("MonobattlesProfiles", lv_pROFILE, "Unit", lv_i);
                    if ((lv_uNIT == lv_selectedUnit)) {
                        libARMB_gv_profiles[lp_player] = lv_pROFILE;
                        break;
                    }

                }
            }

        }
    }
    else {
        libARMB_gv_profiles[lp_player] = lp_profile;
    }
    if ((libARMB_gv_profiles[lp_player] == null)) {
        return ;
    }

    auto8649832C_ae = UserDataInstanceCount("Rules");
    auto8649832C_var = 1;
    for ( ; auto8649832C_var <= auto8649832C_ae; auto8649832C_var += 1 ) {
        if ((UserDataGetGameLink("Rules", UserDataInstance("Rules", auto8649832C_var), "Race", 1) == PlayerRace(lp_player))) {
            libARMB_gv_egxsaypdiavcxbna[lp_player] = UserDataInstance("Rules", auto8649832C_var);
            break;
        }

    }
    libARMB_gv_unitSelection[lp_player] = UserDataGetUnit("MonobattlesProfiles", libARMB_gv_profiles[lp_player], "Unit", 1);
    autoC24F4D3A_ae = UserDataFieldValueCount("MonobattlesProfiles", "UnitExcludes");
    lv_i = 1;
    for ( ; ( (autoC24F4D3A_ai >= 0 && lv_i <= autoC24F4D3A_ae) || (autoC24F4D3A_ai < 0 && lv_i >= autoC24F4D3A_ae) ) ; lv_i += autoC24F4D3A_ai ) {
        libARMB_gv_cACHESIZE_UNITS += 1;
        libARMB_gv_cACHE_UNITS[libARMB_gv_cACHESIZE_UNITS] = UserDataGetUnit("MonobattlesProfiles", libARMB_gv_profiles[lp_player], "UnitExcludes", lv_i);
    }
    auto07B06529_ae = UserDataFieldValueCount("MonobattlesProfiles", "UpgradesExcludes");
    lv_i = 1;
    for ( ; ( (auto07B06529_ai >= 0 && lv_i <= auto07B06529_ae) || (auto07B06529_ai < 0 && lv_i >= auto07B06529_ae) ) ; lv_i += auto07B06529_ai ) {
        libARMB_gv_cACHESIZE_UPGRADES += 1;
        libARMB_gv_cACHE_UPGRADES[libARMB_gv_cACHESIZE_UPGRADES] = UserDataGetUpgrade("MonobattlesProfiles", libARMB_gv_profiles[lp_player], "UpgradesExcludes", lv_i);
    }
    autoBCBF1AFE_ae = UserDataFieldValueCount("Rules", "Unit");
    lv_i = 1;
    for ( ; ( (autoBCBF1AFE_ai >= 0 && lv_i <= autoBCBF1AFE_ae) || (autoBCBF1AFE_ai < 0 && lv_i >= autoBCBF1AFE_ae) ) ; lv_i += autoBCBF1AFE_ai ) {
        lv_uNIT = UserDataGetUnit("Rules", libARMB_gv_egxsaypdiavcxbna[lp_player], "Unit", lv_i);
        libARMB_gf_ArmUnitType(lp_player, lv_uNIT);
        libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
    }
    autoE8EC64D3_ae = UserDataFieldValueCount("MonobattlesProfiles", "Unit");
    lv_i = 1;
    for ( ; ( (autoE8EC64D3_ai >= 0 && lv_i <= autoE8EC64D3_ae) || (autoE8EC64D3_ai < 0 && lv_i >= autoE8EC64D3_ae) ) ; lv_i += autoE8EC64D3_ai ) {
        lv_uNIT = UserDataGetUnit("MonobattlesProfiles", libARMB_gv_profiles[lp_player], "Unit", lv_i);
        libARMB_gf_ArmUnitType(lp_player, lv_uNIT);
        libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
    }
    libARMB_gf_AllowCommonUnits(lp_player);
    libARRA_gf_ResolveUnitAffectedUpgrades(lp_player);
    lv_sOUNDS = CatalogFieldValueCount(c_gameCatalogActor, (libARMB_gv_unitSelection[lp_player]), "SoundArray", lp_player);
    if ((lv_sOUNDS > 0)) {
        lv_sOUND = (CatalogFieldValueGet(c_gameCatalogActor, (libARMB_gv_unitSelection[lp_player]), "SoundArray[" + IntToString(0) + "]", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogSound, lv_sOUND) == true)) {
            SoundPlayForPlayer(SoundLink(lv_sOUND, c_soundIndexAny), lp_player, PlayerGroupSingle(lp_player), 100.0, 0.0);
        }

    }

}

string libARMB_gf_GetRandomProfile (string lp_race) {
    // Variable Declarations
    int lv_profileIndex;
    int lv_raceUnitOptions;
    string lv_profile;
    int lv_selectedUnitOption;
    int lv_iteration;

    // Automatic Variable Declarations
    int auto65B01D64_ae;
    const int auto65B01D64_ai = 1;
    int autoFDEFFD0E_ae;
    const int autoFDEFFD0E_ai = 1;

    // Variable Initialization

    // Implementation
    auto65B01D64_ae = UserDataInstanceCount("MonobattlesProfiles");
    lv_profileIndex = 1;
    for ( ; ( (auto65B01D64_ai >= 0 && lv_profileIndex <= auto65B01D64_ae) || (auto65B01D64_ai < 0 && lv_profileIndex >= auto65B01D64_ae) ) ; lv_profileIndex += auto65B01D64_ai ) {
        lv_profile = UserDataInstance("MonobattlesProfiles", lv_profileIndex);
        if ((UserDataGetInt("MonobattlesProfiles", lv_profile, "Active", 1) == 1) && (UserDataGetGameLink("MonobattlesProfiles", lv_profile, "Race", 1) == lp_race)) {
            lv_raceUnitOptions += 1;
        }

    }
    lv_selectedUnitOption = RandomInt(1, lv_raceUnitOptions);
    autoFDEFFD0E_ae = UserDataInstanceCount("MonobattlesProfiles");
    lv_profileIndex = 1;
    for ( ; ( (autoFDEFFD0E_ai >= 0 && lv_profileIndex <= autoFDEFFD0E_ae) || (autoFDEFFD0E_ai < 0 && lv_profileIndex >= autoFDEFFD0E_ae) ) ; lv_profileIndex += autoFDEFFD0E_ai ) {
        lv_profile = UserDataInstance("MonobattlesProfiles", lv_profileIndex);
        if ((UserDataGetInt("MonobattlesProfiles", lv_profile, "Active", 1) == 1) && (UserDataGetGameLink("MonobattlesProfiles", lv_profile, "Race", 1) == lp_race)) {
            lv_iteration += 1;
            if ((lv_iteration == lv_selectedUnitOption)) {
                return lv_profile;
            }

        }

    }
    return null;
}

void libARMB_gf_AllowCommonUnits (int lp_player) {
    // Variable Declarations
    string lv_uNIT;

    // Automatic Variable Declarations
    int auto7DDF3DC6_catalog;
    int auto7DDF3DC6_i;
    int auto1A81547E_val;

    // Variable Initialization

    // Implementation
    auto7DDF3DC6_catalog = c_gameCatalogUnit;
    auto7DDF3DC6_i = 1;
    for ( ; auto7DDF3DC6_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto7DDF3DC6_i += 1 ) {
        lv_uNIT = CatalogEntryGet(auto7DDF3DC6_catalog, auto7DDF3DC6_i);
        if ((PlayerRace(lp_player) != "Neut") && (libARMB_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
            continue;
        }

        auto1A81547E_val = libARMB_gf_AllowCommonUnit(lp_player, lv_uNIT);
        if (auto1A81547E_val == libARMB_ge_MonobattleUnitGroup_Pacific) {
            libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
        }
        else if (auto1A81547E_val == libARMB_ge_MonobattleUnitGroup_Danger) {
            libARMB_gf_ArmUnitType(lp_player, lv_uNIT);
            libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
        }
        else {
        }
    }
}

int libARMB_gf_AllowCommonUnit (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    bool lv_fOOD;
    string lv_uNIT;
    string lv_aBILITY;
    string lv_bEHAVIOR;
    int lv_resourceState;
    string lv_resourceStateString;
    int lv_cAbilTransport;
    int lv_cAbilHarvest;
    int lv_cBehaviorBuff;
    int lv_cBehaviorCreepSource;
    int lv_cAbilityEffectAttack;

    // Automatic Variable Declarations
    int auto7A58064F_ae;
    const int auto7A58064F_ai = 1;
    int autoC7DEFB0B_ae;
    const int autoC7DEFB0B_ai = 1;
    int auto0C34CCBF_ae;
    const int auto0C34CCBF_ai = 1;

    // Variable Initialization
    lv_uNIT = lp_unit;
    lv_resourceStateString = "";
    lv_cAbilTransport = CatalogEntryClass(c_gameCatalogAbil, "MedivacTransport");
    lv_cAbilHarvest = CatalogEntryClass(c_gameCatalogAbil, "MULEGather");
    lv_cBehaviorBuff = CatalogEntryClass(c_gameCatalogBehavior, "Detector11");
    lv_cBehaviorCreepSource = CatalogEntryClass(c_gameCatalogBehavior, "MakeCreep5x5");
    lv_cAbilityEffectAttack = CatalogEntryClass(c_gameCatalogAbil, "attack");

    // Implementation
    if ((UserDataGetInt("Rules", libARMB_gv_egxsaypdiavcxbna[lp_player], "Supply", 1) > 0)) {
        lv_fOOD = true;
    }
    else {
        lv_fOOD = false;
    }
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return libARMB_ge_MonobattleUnitGroup_Disabled;
    }

    if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "ResourceState", c_playerAny) == "Harvestable")) {
        return libARMB_ge_MonobattleUnitGroup_Pacific;
    }

    if ((lv_fOOD == true) && (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_uNIT, "Food", c_playerAny) > 0.0)) {
        return libARMB_ge_MonobattleUnitGroup_Pacific;
    }

    if ((UnitTypeTestAttribute(lv_uNIT, c_unitAttributeStructure) == true)) {
        auto7A58064F_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto7A58064F_ai >= 0 && lv_i <= auto7A58064F_ae) || (auto7A58064F_ai < 0 && lv_i >= auto7A58064F_ae) ) ; lv_i += auto7A58064F_ai ) {
            lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
            if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_aBILITY) == false)) {
                continue;
            }

            if ((CatalogEntryClass(c_gameCatalogAbil, lv_aBILITY) == lv_cAbilityEffectAttack)) {
                return libARMB_ge_MonobattleUnitGroup_Danger;
            }

        }
    }

    autoC7DEFB0B_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoC7DEFB0B_ai >= 0 && lv_i <= autoC7DEFB0B_ae) || (autoC7DEFB0B_ai < 0 && lv_i >= autoC7DEFB0B_ae) ) ; lv_i += autoC7DEFB0B_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_aBILITY) == false)) {
            continue;
        }

        if ((CatalogEntryClass(c_gameCatalogAbil, lv_aBILITY) == lv_cAbilHarvest)) {
            return libARMB_ge_MonobattleUnitGroup_Danger;
        }

        if ((libARMB_gf_AbilityIsDetector(lp_player, lv_aBILITY) == true) && (libARMB_gf_AbilityIsDanger(lp_player, lv_aBILITY) == false)) {
            return libARMB_ge_MonobattleUnitGroup_Pacific;
        }

        if ((CatalogEntryClass(c_gameCatalogAbil, lv_aBILITY) == lv_cAbilTransport)) {
            return libARMB_ge_MonobattleUnitGroup_Pacific;
        }

    }
    auto0C34CCBF_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto0C34CCBF_ai >= 0 && lv_i <= auto0C34CCBF_ae) || (auto0C34CCBF_ai < 0 && lv_i >= auto0C34CCBF_ae) ) ; lv_i += auto0C34CCBF_ai ) {
        lv_bEHAVIOR = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_bEHAVIOR) == false)) {
            continue;
        }

        if ((CatalogEntryClass(c_gameCatalogBehavior, lv_bEHAVIOR) == lv_cBehaviorBuff)) {
            if ((libARMB_gf_BehaviorisDetector(lp_player, lv_bEHAVIOR) == true) && (libARMB_gf_BehaviorisDanger(lp_player, lv_bEHAVIOR) == false)) {
                return libARMB_ge_MonobattleUnitGroup_Pacific;
            }

            if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_bEHAVIOR, "Modification.Radar", lp_player) > 0.0)) {
                return libARMB_ge_MonobattleUnitGroup_Pacific;
            }

        }

        if ((CatalogEntryClass(c_gameCatalogBehavior, lv_bEHAVIOR) == lv_cBehaviorCreepSource)) {
            return libARMB_ge_MonobattleUnitGroup_Pacific;
        }

    }
    return libARMB_ge_MonobattleUnitGroup_Disabled;
}

void libARMB_gf_DisallowAll (int lp_player) {
    // Variable Declarations
    string lv_uPGRADE;
    string lv_uNIT;
    string lv_aBILITY;
    int lv_i;

    // Automatic Variable Declarations
    int autoFF5D14A6_catalog;
    int autoFF5D14A6_i;
    int auto7A9713E0_catalog;
    int auto7A9713E0_i;

    // Variable Initialization

    // Implementation
    autoFF5D14A6_catalog = c_gameCatalogUpgrade;
    autoFF5D14A6_i = 1;
    for ( ; autoFF5D14A6_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; autoFF5D14A6_i += 1 ) {
        lv_uPGRADE = CatalogEntryGet(autoFF5D14A6_catalog, autoFF5D14A6_i);
        TechTreeUpgradeAllow(lp_player, lv_uPGRADE, false);
    }
    auto7A9713E0_catalog = c_gameCatalogUnit;
    auto7A9713E0_i = 1;
    for ( ; auto7A9713E0_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto7A9713E0_i += 1 ) {
        lv_uNIT = CatalogEntryGet(auto7A9713E0_catalog, auto7A9713E0_i);
        TechTreeUnitAllow(lp_player, lv_uNIT, false);
    }
}

void libARMB_gf_ClearCache () {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    int auto7BBFA58C_ae;
    const int auto7BBFA58C_ai = 1;
    int autoFE0B4184_ae;
    const int autoFE0B4184_ai = 1;
    int auto8EA2811D_ae;
    const int auto8EA2811D_ai = 1;
    int auto00FE2DA0_ae;
    const int auto00FE2DA0_ai = 1;
    int auto6EF6CE9C_ae;
    const int auto6EF6CE9C_ai = 1;
    int autoB82C086E_ae;
    const int autoB82C086E_ai = 1;
    int auto88260EDD_ae;
    const int auto88260EDD_ai = 1;

    // Variable Initialization

    // Implementation
    auto7BBFA58C_ae = libARMB_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (auto7BBFA58C_ai >= 0 && lv_i <= auto7BBFA58C_ae) || (auto7BBFA58C_ai < 0 && lv_i >= auto7BBFA58C_ae) ) ; lv_i += auto7BBFA58C_ai ) {
        libARMB_gv_cACHE_REQUIREMENT[lv_i] = null;
    }
    libARMB_gv_cACHESIZE_REQUIREMENT = 0;
    autoFE0B4184_ae = libARMB_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (autoFE0B4184_ai >= 0 && lv_i <= autoFE0B4184_ae) || (autoFE0B4184_ai < 0 && lv_i >= autoFE0B4184_ae) ) ; lv_i += autoFE0B4184_ai ) {
        libARMB_gv_cACHE_UPGRADES[lv_i] = null;
    }
    libARMB_gv_cACHESIZE_UPGRADES = 0;
    auto8EA2811D_ae = libARMB_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (auto8EA2811D_ai >= 0 && lv_i <= auto8EA2811D_ae) || (auto8EA2811D_ai < 0 && lv_i >= auto8EA2811D_ae) ) ; lv_i += auto8EA2811D_ai ) {
        libARMB_gv_cACHE_UNITS[lv_i] = null;
    }
    libARMB_gv_cACHESIZE_UNITS = 0;
    auto00FE2DA0_ae = libARMB_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (auto00FE2DA0_ai >= 0 && lv_i <= auto00FE2DA0_ae) || (auto00FE2DA0_ai < 0 && lv_i >= auto00FE2DA0_ae) ) ; lv_i += auto00FE2DA0_ai ) {
        libARMB_gv_cACHE_BEHAVIORS[lv_i] = null;
    }
    libARMB_gv_cACHESIZE_BEHAVIORS = 0;
    auto6EF6CE9C_ae = libARMB_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (auto6EF6CE9C_ai >= 0 && lv_i <= auto6EF6CE9C_ae) || (auto6EF6CE9C_ai < 0 && lv_i >= auto6EF6CE9C_ae) ) ; lv_i += auto6EF6CE9C_ai ) {
        libARMB_gv_cACHE_ABILITIES[lv_i] = null;
    }
    libARMB_gv_cACHESIZE_ABILITIES = 0;
    autoB82C086E_ae = libARMB_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (autoB82C086E_ai >= 0 && lv_i <= autoB82C086E_ae) || (autoB82C086E_ai < 0 && lv_i >= autoB82C086E_ae) ) ; lv_i += autoB82C086E_ai ) {
        libARMB_gv_cACHE_EFFECTS[lv_i] = null;
    }
    libARMB_gv_cACHESIZE_EFFECTS = 0;
    auto88260EDD_ae = libARMB_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (auto88260EDD_ai >= 0 && lv_i <= auto88260EDD_ae) || (auto88260EDD_ai < 0 && lv_i >= auto88260EDD_ae) ) ; lv_i += auto88260EDD_ai ) {
        libARMB_gv_cACHE_WEAPONS[lv_i] = null;
    }
    libARMB_gv_cACHESIZE_WEAPONS = 0;
}

void libARMB_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan) {
    // Variable Declarations
    string lv_aBILITY;
    string lv_bEHAVIOR;
    string lv_uNIT;
    string lv_requirement;
    int lv_unitsCount;
    int lv_i;
    string lv_upgradeEntry;
    int lv_affectedUnitIndex;
    bool lv_hasDangerAbilities;
    bool lv_isDangerAbility;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;
    string lv_axdjwuqohjsfjjis;

    // Automatic Variable Declarations
    int auto34CFD1B1_ae;
    const int auto34CFD1B1_ai = 1;
    int autoC56D0A91_ae;
    const int autoC56D0A91_ai = 1;
    int auto260A7804_ae;
    const int auto260A7804_ai = 1;
    int auto1658BB66_ae;
    const int auto1658BB66_ai = 1;
    int auto5AAEB075_ae;
    const int auto5AAEB075_ai = 1;
    int autoD64D26A9_ae;
    const int autoD64D26A9_ai = 1;
    int auto5F12E79D_catalog;
    int auto5F12E79D_i;
    int autoBE9A4507_ae;
    const int autoBE9A4507_ai = 1;
    int auto7A7D0DBD_ae;
    const int auto7A7D0DBD_ai = 1;
    int autoD0F740DA_ae;
    const int autoD0F740DA_ai = 1;
    int auto8868E15A_catalog;
    int auto8868E15A_i;
    int auto2B3E5E1F_ae;
    const int auto2B3E5E1F_ai = 1;
    int auto5E583573_catalog;
    int auto5E583573_i;
    int auto07A27F7F_ae;
    const int auto07A27F7F_ai = 1;

    // Variable Initialization
    lv_hasDangerAbilities = libARMB_gf_UnitTypeisArmed(lp_player, lp_unit);
    lv_axdjwuqohjsfjjis = ("Race:" + UserDataGetString("Rules", libARMB_gv_egxsaypdiavcxbna[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return ;
    }

    auto34CFD1B1_ae = libARMB_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (auto34CFD1B1_ai >= 0 && lv_i <= auto34CFD1B1_ae) || (auto34CFD1B1_ai < 0 && lv_i >= auto34CFD1B1_ae) ) ; lv_i += auto34CFD1B1_ai ) {
        if ((libARMB_gv_cACHE_UNITS[lv_i] == lp_unit)) {
            return ;
        }

    }
    libARMB_gv_cACHESIZE_UNITS += 1;
    libARMB_gv_cACHE_UNITS[libARMB_gv_cACHESIZE_UNITS] = lp_unit;
    TechTreeUnitAllow(lp_player, lp_unit, true);
    if ((libARMB_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        autoC56D0A91_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "EquipmentArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoC56D0A91_ai >= 0 && lv_i <= autoC56D0A91_ae) || (autoC56D0A91_ai < 0 && lv_i >= autoC56D0A91_ae) ) ; lv_i += autoC56D0A91_ai ) {
            libARMB_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Weapon", lp_player)));
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Effect", lp_player)));
        }
        auto260A7804_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto260A7804_ai >= 0 && lv_i <= auto260A7804_ae) || (auto260A7804_ai < 0 && lv_i >= auto260A7804_ae) ) ; lv_i += auto260A7804_ai ) {
            libARMB_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player)));
        }
    }
    else {
        libARMB_gf_Disarmunittype(lp_player, lp_unit);
    }
    auto1658BB66_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto1658BB66_ai >= 0 && lv_i <= auto1658BB66_ae) || (auto1658BB66_ai < 0 && lv_i >= auto1658BB66_ae) ) ; lv_i += auto1658BB66_ai ) {
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player)));
    }
    auto5AAEB075_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto5AAEB075_ai >= 0 && lv_i <= auto5AAEB075_ae) || (auto5AAEB075_ai < 0 && lv_i >= auto5AAEB075_ae) ) ; lv_i += auto5AAEB075_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_aBILITY) == false)) {
            continue;
        }
        else {
            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) && (libARMB_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
                lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                if ((lv_unitsCount > 0)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                    libARMB_gf_ArmUnitType(lp_player, lv_uNIT);
                }

            }

            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilArmMagazine, "") == true)) {
                if ((lv_hasDangerAbilities == true)) {
                    autoD64D26A9_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (autoD64D26A9_ai >= 0 && lv_i <= autoD64D26A9_ae) || (autoD64D26A9_ai < 0 && lv_i >= autoD64D26A9_ae) ) ; lv_i += autoD64D26A9_ai ) {
                        libARMB_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)));
                        libARMB_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
                    }
                }
                else {
                    continue;
                }
            }

            if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMergeable, "") == true))) {
                continue;
            }

            lv_isDangerAbility = libARMB_gf_AbilityIsDanger(lp_player, lv_aBILITY);
            if (((lv_hasDangerAbilities == true) || (lv_isDangerAbility == false))) {
                libARMB_gf_CacheAbility(lp_player, lv_aBILITY, false);
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectInstant, "") == true)) {
                    libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
            }

        }
    }
    if ((lp_scan == true)) {
        auto5F12E79D_catalog = c_gameCatalogAbil;
        auto5F12E79D_i = 1;
        for ( ; auto5F12E79D_i <= CatalogEntryCount(c_gameCatalogAbil) ; auto5F12E79D_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(auto5F12E79D_catalog, auto5F12E79D_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_axdjwuqohjsfjjis, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true))) {
                    autoBE9A4507_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (autoBE9A4507_ai >= 0 && lv_i <= autoBE9A4507_ae) || (autoBE9A4507_ai < 0 && lv_i >= autoBE9A4507_ae) ) ; lv_i += autoBE9A4507_ai ) {
                        lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player);
                        if ((lv_unitsCount > 0)) {
                            lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit[" + IntToString(0) + "]", lp_player));
                            if ((lv_uNIT == lp_unit)) {
                                libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                                libARMB_gf_CacheAbility(lp_player, lv_aBILITY, true);
                                break;
                            }

                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true)) {
                    auto7A7D0DBD_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto7A7D0DBD_ai >= 0 && lv_i <= auto7A7D0DBD_ae) || (auto7A7D0DBD_ai < 0 && lv_i >= auto7A7D0DBD_ae) ) ; lv_i += auto7A7D0DBD_ai ) {
                        if ((lp_unit == (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)))) {
                            libARMB_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_i);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true)) {
                    autoD0F740DA_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (autoD0F740DA_ai >= 0 && lv_i <= autoD0F740DA_ae) || (autoD0F740DA_ai < 0 && lv_i >= autoD0F740DA_ae) ) ; lv_i += autoD0F740DA_ai ) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                            libARMB_gf_CacheAbility(lp_player, lv_aBILITY, true);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                            libARMB_gf_CacheAbility(lp_player, lv_aBILITY, true);
                        }

                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "Info.Unit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        libARMB_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "PlaceUnit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        libARMB_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
            }
        }
        auto8868E15A_catalog = c_gameCatalogBehavior;
        auto8868E15A_i = 1;
        for ( ; auto8868E15A_i <= CatalogEntryCount(c_gameCatalogBehavior) ; auto8868E15A_i += 1 ) {
            lv_bEHAVIOR = CatalogEntryGet(auto8868E15A_catalog, auto8868E15A_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "EditorCategories", lp_player), lv_axdjwuqohjsfjjis, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((CatalogEntryClass(c_gameCatalogBehavior, lv_bEHAVIOR) == libARMB_gv_cBehaviorSpawn)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        auto2B3E5E1F_ae = (lv_unitsCount - 1);
                        lv_i = 0;
                        for ( ; ( (auto2B3E5E1F_ai >= 0 && lv_i <= auto2B3E5E1F_ae) || (auto2B3E5E1F_ai < 0 && lv_i >= auto2B3E5E1F_ae) ) ; lv_i += auto2B3E5E1F_ai ) {
                            if (((CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)) == lp_unit)) {
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "Requirements", lp_player));
                                libARMB_gf_CacheRequirement(lp_player, lv_requirement);
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Requirements", lp_player));
                                libARMB_gf_CacheRequirement(lp_player, lv_requirement);
                                libARMB_gf_CacheBehavior(lp_player, lv_bEHAVIOR);
                                auto5E583573_catalog = c_gameCatalogUnit;
                                auto5E583573_i = 1;
                                for ( ; auto5E583573_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto5E583573_i += 1 ) {
                                    lv_uNIT = CatalogEntryGet(auto5E583573_catalog, auto5E583573_i);
                                    if ((PlayerRace(lp_player) != "Neut") && (libARMB_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
                                        continue;
                                    }

                                    auto07A27F7F_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                                    lv_k = 0;
                                    for ( ; ( (auto07A27F7F_ai >= 0 && lv_k <= auto07A27F7F_ae) || (auto07A27F7F_ai < 0 && lv_k >= auto07A27F7F_ae) ) ; lv_k += auto07A27F7F_ai ) {
                                        if ((lv_bEHAVIOR == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_k) + "].Link", c_playerAny)))) {
                                            libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
                                        }

                                    }
                                }
                                break;
                            }

                        }
                    }

                }

            }
        }
    }

}

void libARMB_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command) {
    // Variable Declarations
    string lv_bEHAVIOR;
    string lv_uNIT;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;

    // Automatic Variable Declarations
    int auto901739C1_catalog;
    int auto901739C1_i;
    int auto2B5F2F87_ae;
    const int auto2B5F2F87_ai = 1;
    int autoFD355F23_ae;
    const int autoFD355F23_ai = 1;
    int auto76277D50_ae;
    const int auto76277D50_ai = 1;
    int auto02B42141_ae;
    const int auto02B42141_ai = 1;

    // Variable Initialization

    // Implementation
    libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lp_command) + "].Button.Requirements", lp_player)));
    libARMB_gf_CacheAbility(lp_player, lp_ability, false);
    auto901739C1_catalog = c_gameCatalogUnit;
    auto901739C1_i = 1;
    for ( ; auto901739C1_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto901739C1_i += 1 ) {
        lv_uNIT = CatalogEntryGet(auto901739C1_catalog, auto901739C1_i);
        if ((PlayerRace(lp_player) != "Neut") && (libARMB_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
            continue;
        }

        auto2B5F2F87_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
        lv_k = 0;
        for ( ; ( (auto2B5F2F87_ai >= 0 && lv_k <= auto2B5F2F87_ae) || (auto2B5F2F87_ai < 0 && lv_k >= auto2B5F2F87_ae) ) ; lv_k += auto2B5F2F87_ai ) {
            if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_k) + "].Link", lp_player)))) {
                autoFD355F23_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                lv_b = 0;
                for ( ; ( (autoFD355F23_ai >= 0 && lv_b <= autoFD355F23_ae) || (autoFD355F23_ai < 0 && lv_b >= autoFD355F23_ae) ) ; lv_b += autoFD355F23_ai ) {
                    lv_bEHAVIOR = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_b) + "].Link", lp_player));
                    if ((libARMB_gf_BehaviorUsesAbilityCommand(lp_player, lv_bEHAVIOR, AbilityCommand(lp_ability, lp_command)) == true)) {
                        libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
                        break;
                    }

                }
                auto76277D50_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts", lp_player) - 1);
                lv_cl = 0;
                for ( ; ( (auto76277D50_ai >= 0 && lv_cl <= auto76277D50_ae) || (auto76277D50_ai < 0 && lv_cl >= auto76277D50_ae) ) ; lv_cl += auto76277D50_ai ) {
                    auto02B42141_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons", lp_player) - 1);
                    lv_lb = 0;
                    for ( ; ( (auto02B42141_ai >= 0 && lv_lb <= auto02B42141_ae) || (auto02B42141_ai < 0 && lv_lb >= auto02B42141_ae) ) ; lv_lb += auto02B42141_ai ) {
                        if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons[" + IntToString(lv_lb) + "].AbilCmd", lp_player)) == AbilityCommand(lp_ability, lp_command))) {
                            libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
                            break;
                        }

                    }
                }
            }

        }
    }
}

void libARMB_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan) {
    // Variable Declarations
    int lv_i;
    string lv_unitEntry;
    int lv_affectedUnitIndex;
    string lv_abilityIter;
    int lv_abilityIndex;
    string lv_aBILITY;
    string lv_uPGRADE;
    string lv_upgradeIter;
    int lv_abilityCommandIndex;
    int lv_effectArrayIndex;
    string lv_effeectArrayReference;
    string lv_mesmfckymeeahpjq;

    // Automatic Variable Declarations
    int autoCE03109A_ae;
    const int autoCE03109A_ai = 1;
    int auto9B4BBD4A_catalog;
    int auto9B4BBD4A_i;
    int auto49ABD751_ae;
    const int auto49ABD751_ai = 1;

    // Variable Initialization
    lv_effeectArrayReference = "";
    lv_mesmfckymeeahpjq = ("Race:" + UserDataGetString("Rules", libARMB_gv_egxsaypdiavcxbna[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lp_upgrade) == false)) {
        return ;
    }

    autoCE03109A_ae = libARMB_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (autoCE03109A_ai >= 0 && lv_i <= autoCE03109A_ae) || (autoCE03109A_ai < 0 && lv_i >= autoCE03109A_ae) ) ; lv_i += autoCE03109A_ai ) {
        if ((libARMB_gv_cACHE_UPGRADES[lv_i] == lp_upgrade)) {
            return ;
        }

    }
    libARMB_gv_cACHESIZE_UPGRADES += 1;
    libARMB_gv_cACHE_UPGRADES[libARMB_gv_cACHESIZE_UPGRADES] = lp_upgrade;
    TechTreeUpgradeAllow(lp_player, lp_upgrade, true);
    if ((lp_scan == true)) {
        auto9B4BBD4A_catalog = c_gameCatalogAbil;
        auto9B4BBD4A_i = 1;
        for ( ; auto9B4BBD4A_i <= CatalogEntryCount(c_gameCatalogAbil) ; auto9B4BBD4A_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(auto9B4BBD4A_catalog, auto9B4BBD4A_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_mesmfckymeeahpjq, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilResearch, "") == true)) {
                    auto49ABD751_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_abilityCommandIndex = 0;
                    for ( ; ( (auto49ABD751_ai >= 0 && lv_abilityCommandIndex <= auto49ABD751_ae) || (auto49ABD751_ai < 0 && lv_abilityCommandIndex >= auto49ABD751_ae) ) ; lv_abilityCommandIndex += auto49ABD751_ai ) {
                        lv_upgradeIter = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_abilityCommandIndex) + "].Upgrade", lp_player));
                        if ((lv_upgradeIter == lp_upgrade)) {
                            libARMB_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_abilityCommandIndex);
                            break;
                        }

                    }
                }

            }
        }
    }

}

void libARMB_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan) {
    // Variable Declarations
    string lv_uNIT;
    int lv_i;

    // Automatic Variable Declarations
    int auto18580442_ae;
    const int auto18580442_ai = 1;
    int auto22BD25ED_catalog;
    int auto22BD25ED_i;
    int autoC28ADCD2_ae;
    const int autoC28ADCD2_ai = 1;
    int auto0C4D94AC_val;
    int autoF9F80A65_ae;
    const int autoF9F80A65_ai = 1;
    int auto6EB9BF6C_ae;
    const int auto6EB9BF6C_ai = 1;
    int auto1044B41B_ae;
    const int auto1044B41B_ai = 1;
    int auto01201575_ae;
    const int auto01201575_ai = 1;
    int autoEBC03BC4_ae;
    const int autoEBC03BC4_ai = 1;
    int auto69E1110D_ae;
    const int auto69E1110D_ai = 1;
    int autoD8096D54_ae;
    const int autoD8096D54_ai = 1;
    int auto059CDDC9_ae;
    const int auto059CDDC9_ai = 1;
    int auto41FBA842_ae;
    const int auto41FBA842_ai = 1;
    int auto0A9CE5B4_ae;
    const int auto0A9CE5B4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return ;
    }

    auto18580442_ae = libARMB_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (auto18580442_ai >= 0 && lv_i <= auto18580442_ae) || (auto18580442_ai < 0 && lv_i >= auto18580442_ae) ) ; lv_i += auto18580442_ai ) {
        if ((libARMB_gv_cACHE_ABILITIES[lv_i] == lp_ability)) {
            return ;
        }

    }
    if (((libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilRally, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilBuildable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilStop, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilAttack, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilMove, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilQueue, "") == true))) {
        return ;
    }

    libARMB_gv_cACHESIZE_ABILITIES += 1;
    libARMB_gv_cACHE_ABILITIES[libARMB_gv_cACHESIZE_ABILITIES] = lp_ability;
    if ((lp_scan == true)) {
        auto22BD25ED_catalog = c_gameCatalogUnit;
        auto22BD25ED_i = 1;
        for ( ; auto22BD25ED_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto22BD25ED_i += 1 ) {
            lv_uNIT = CatalogEntryGet(auto22BD25ED_catalog, auto22BD25ED_i);
            if ((PlayerRace(lp_player) != "Neut") && (libARMB_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            autoC28ADCD2_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (autoC28ADCD2_ai >= 0 && lv_i <= autoC28ADCD2_ae) || (autoC28ADCD2_ai < 0 && lv_i >= autoC28ADCD2_ae) ) ; lv_i += autoC28ADCD2_ai ) {
                if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny)))) {
                    libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
                }

            }
        }
    }

    auto0C4D94AC_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (auto0C4D94AC_val == libARMB_gv_cAbilityAugment) {
        libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player)));
    }
    else if (auto0C4D94AC_val == libARMB_gv_cAbilityArmMagazine) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        autoF9F80A65_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoF9F80A65_ai >= 0 && lv_i <= autoF9F80A65_ae) || (autoF9F80A65_ai < 0 && lv_i >= autoF9F80A65_ae) ) ; lv_i += autoF9F80A65_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto6EB9BF6C_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "InfoArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto6EB9BF6C_ai >= 0 && lv_i <= auto6EB9BF6C_ae) || (auto6EB9BF6C_ai < 0 && lv_i >= auto6EB9BF6C_ae) ) ; lv_i += auto6EB9BF6C_ai ) {
            libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
            libARMB_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
        }
    }
    else if (auto0C4D94AC_val == libARMB_gv_cAbilityBehavior) {
        libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        auto1044B41B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto1044B41B_ai >= 0 && lv_i <= auto1044B41B_ae) || (auto1044B41B_ai < 0 && lv_i >= auto1044B41B_ae) ) ; lv_i += auto1044B41B_ai ) {
            libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto0C4D94AC_val == libARMB_gv_cAbilityBuild) {
        libARMB_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BuildMorphAbil", lp_player)), false);
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
    }
    else if (auto0C4D94AC_val == libARMB_gv_cAbilityEffectInstant) {
        libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        auto01201575_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto01201575_ai >= 0 && lv_i <= auto01201575_ae) || (auto01201575_ai < 0 && lv_i >= auto01201575_ae) ) ; lv_i += auto01201575_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        autoEBC03BC4_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoEBC03BC4_ai >= 0 && lv_i <= autoEBC03BC4_ae) || (autoEBC03BC4_ai < 0 && lv_i >= autoEBC03BC4_ae) ) ; lv_i += autoEBC03BC4_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto69E1110D_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto69E1110D_ai >= 0 && lv_i <= auto69E1110D_ae) || (auto69E1110D_ai < 0 && lv_i >= auto69E1110D_ae) ) ; lv_i += auto69E1110D_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (auto0C4D94AC_val == libARMB_gv_cAbilityEffectTarget) {
        libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        autoD8096D54_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoD8096D54_ai >= 0 && lv_i <= autoD8096D54_ae) || (autoD8096D54_ai < 0 && lv_i >= autoD8096D54_ae) ) ; lv_i += autoD8096D54_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto059CDDC9_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto059CDDC9_ai >= 0 && lv_i <= auto059CDDC9_ae) || (auto059CDDC9_ai < 0 && lv_i >= auto059CDDC9_ae) ) ; lv_i += auto059CDDC9_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto41FBA842_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto41FBA842_ai >= 0 && lv_i <= auto41FBA842_ae) || (auto41FBA842_ai < 0 && lv_i >= auto41FBA842_ae) ) ; lv_i += auto41FBA842_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (auto0C4D94AC_val == libARMB_gv_cAbilityMorph) {
        libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOn", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOff", lp_player)));
    }
    else if (auto0C4D94AC_val == libARMB_gv_cAbilityTransport) {
        auto0A9CE5B4_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CmdButtonArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto0A9CE5B4_ai >= 0 && lv_i <= auto0A9CE5B4_ae) || (auto0A9CE5B4_ai < 0 && lv_i >= auto0A9CE5B4_ae) ) ; lv_i += auto0A9CE5B4_ai ) {
            libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(lv_i) + "].Requirements", lp_player)));
        }
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportEffect", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoBehavior", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportBehavior", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadTransportBehavior", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadCargoBehavior", lp_player)));
    }
    else {
    }
}

void libARMB_gf_CacheWeapon (int lp_player, string lp_weapon) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoA6B80779_ae;
    const int autoA6B80779_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lp_weapon) == false)) {
        return ;
    }

    autoA6B80779_ae = libARMB_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (autoA6B80779_ai >= 0 && lv_i <= autoA6B80779_ae) || (autoA6B80779_ai < 0 && lv_i >= autoA6B80779_ae) ) ; lv_i += autoA6B80779_ai ) {
        if ((libARMB_gv_cACHE_WEAPONS[lv_i] == lp_weapon)) {
            return ;
        }

    }
    libARMB_gv_cACHESIZE_WEAPONS += 1;
    libARMB_gv_cACHE_WEAPONS[libARMB_gv_cACHESIZE_WEAPONS] = lp_weapon;
    libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PostEffectBehavior.Behavior", lp_player)));
    libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffectBehavior.Behavior", lp_player)));
    libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffect", lp_player)));
    libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "Effect", lp_player)));
    libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "DisplayEffect", lp_player)));
    libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
    libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
}

void libARMB_gf_CacheBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoDB72EC03_ae;
    const int autoDB72EC03_ai = 1;
    int auto0CFC8F14_val;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return ;
    }

    autoDB72EC03_ae = libARMB_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (autoDB72EC03_ai >= 0 && lv_i <= autoDB72EC03_ae) || (autoDB72EC03_ai < 0 && lv_i >= autoDB72EC03_ae) ) ; lv_i += autoDB72EC03_ai ) {
        if ((libARMB_gv_cACHE_BEHAVIORS[lv_i] == lp_behavior)) {
            return ;
        }

    }
    libARMB_gv_cACHESIZE_BEHAVIORS += 1;
    libARMB_gv_cACHE_BEHAVIORS[libARMB_gv_cACHESIZE_BEHAVIORS] = lp_behavior;
    libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Requirements", lp_player)));
    auto0CFC8F14_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (auto0CFC8F14_val == libARMB_gv_cBehaviorBuff) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
    }
    else {
    }
}

void libARMB_gf_CacheEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoBEF1E295_ae;
    const int autoBEF1E295_ai = 1;
    int auto2A9FB036_ae;
    const int auto2A9FB036_ai = 1;
    int autoD5DFD414_val;
    int auto83541097_ae;
    const int auto83541097_ai = 1;
    int auto43E8A335_ae;
    const int auto43E8A335_ai = 1;
    int autoD1BB1D56_ae;
    const int autoD1BB1D56_ai = 1;
    int auto2CE3D857_ae;
    const int auto2CE3D857_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return ;
    }

    autoBEF1E295_ae = libARMB_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (autoBEF1E295_ai >= 0 && lv_i <= autoBEF1E295_ae) || (autoBEF1E295_ai < 0 && lv_i >= autoBEF1E295_ae) ) ; lv_i += autoBEF1E295_ai ) {
        if ((libARMB_gv_cACHE_EFFECTS[lv_i] == lp_effect)) {
            return ;
        }

    }
    libARMB_gv_cACHESIZE_EFFECTS += 1;
    libARMB_gv_cACHE_EFFECTS[libARMB_gv_cACHESIZE_EFFECTS] = lp_effect;
    auto2A9FB036_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "ValidatorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto2A9FB036_ai >= 0 && lv_i <= auto2A9FB036_ae) || (auto2A9FB036_ai < 0 && lv_i >= auto2A9FB036_ae) ) ; lv_i += auto2A9FB036_ai ) {
        libARMB_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ValidatorArray[" + IntToString(lv_i) + "]", lp_player)));
    }
    autoD5DFD414_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (autoD5DFD414_val == libARMB_gv_cEffectIssueOrder) {
        libARMB_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player)), false);
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectApplyBehavior) {
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player)));
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectCreateHealer) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectCreatePersistent) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        auto83541097_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto83541097_ai >= 0 && lv_i <= auto83541097_ae) || (auto83541097_ai < 0 && lv_i >= auto83541097_ae) ) ; lv_i += auto83541097_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectCreateUnit) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player)));
        auto43E8A335_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto43E8A335_ai >= 0 && lv_i <= auto43E8A335_ae) || (auto43E8A335_ai < 0 && lv_i >= auto43E8A335_ae) ) ; lv_i += auto43E8A335_ai ) {
            libARMB_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)));
            libARMB_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)), false);
        }
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectDamage) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "DamageInheritEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactLocation.Effect", lp_player)));
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectLaunchMissile) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player)));
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player)));
        libARMB_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player)));
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectSet) {
        autoD1BB1D56_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoD1BB1D56_ai >= 0 && lv_i <= autoD1BB1D56_ae) || (autoD1BB1D56_ai < 0 && lv_i >= autoD1BB1D56_ae) ) ; lv_i += autoD1BB1D56_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectTeleport) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player)));
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectModifyUnit) {
        libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ModifyTurret.AimCompleteEffect", lp_player)));
    }
    else if (autoD5DFD414_val == libARMB_gv_cEffectSwitch) {
        auto2CE3D857_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "CaseArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2CE3D857_ai >= 0 && lv_i <= auto2CE3D857_ae) || (auto2CE3D857_ai < 0 && lv_i >= auto2CE3D857_ae) ) ; lv_i += auto2CE3D857_ai ) {
            libARMB_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Effect", lp_player)));
            libARMB_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Validator", lp_player)));
        }
    }
    else {
    }
}

void libARMB_gf_CacheValidator (int lp_player, string lp_validator) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoE54D0BFA_val;
    int auto73EE0642_ae;
    const int auto73EE0642_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogValidator, lp_validator) == false)) {
        return ;
    }

    autoE54D0BFA_val = CatalogEntryClass(c_gameCatalogValidator, lp_validator);
    if (autoE54D0BFA_val == libARMB_gv_cValidatorCombine) {
        auto73EE0642_ae = (CatalogFieldValueCount(c_gameCatalogValidator, lp_validator, "CombineArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto73EE0642_ai >= 0 && lv_i <= auto73EE0642_ae) || (auto73EE0642_ai < 0 && lv_i >= auto73EE0642_ae) ) ; lv_i += auto73EE0642_ai ) {
            libARMB_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "CombineArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (autoE54D0BFA_val == libARMB_gv_cValidatorPlayerReqirement) {
        libARMB_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "Value", lp_player)));
    }
    else {
    }
}

void libARMB_gf_CacheRequirement (int lp_player, string lp_requirement) {
    // Variable Declarations
    int lv_i;
    string lv_requirementNode;

    // Automatic Variable Declarations
    int auto5DFD958A_ae;
    const int auto5DFD958A_ai = 1;
    int auto8C08FDD9_ae;
    const int auto8C08FDD9_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirement, lp_requirement) == false)) {
        return ;
    }

    auto5DFD958A_ae = libARMB_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (auto5DFD958A_ai >= 0 && lv_i <= auto5DFD958A_ae) || (auto5DFD958A_ai < 0 && lv_i >= auto5DFD958A_ae) ) ; lv_i += auto5DFD958A_ai ) {
        if ((libARMB_gv_cACHE_REQUIREMENT[lv_i] == lp_requirement)) {
            return ;
        }

    }
    libARMB_gv_cACHESIZE_REQUIREMENT += 1;
    libARMB_gv_cACHE_REQUIREMENT[libARMB_gv_cACHESIZE_REQUIREMENT] = lp_requirement;
    auto8C08FDD9_ae = (CatalogFieldValueCount(c_gameCatalogRequirement, lp_requirement, "NodeArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto8C08FDD9_ai >= 0 && lv_i <= auto8C08FDD9_ae) || (auto8C08FDD9_ai < 0 && lv_i >= auto8C08FDD9_ae) ) ; lv_i += auto8C08FDD9_ai ) {
        lv_requirementNode = (CatalogFieldValueGet(c_gameCatalogRequirement, lp_requirement, "NodeArray[" + IntToString(lv_i) + "].Link", lp_player));
        libARMB_gf_CacheRequirementNode(lp_player, lv_requirementNode);
    }
}

void libARMB_gf_CacheRequirementNode (int lp_player, string lp_requirementNode) {
    // Variable Declarations
    string lv_uNIT;
    string lv_uPGRADE;
    string lv_requirementNode;
    string lv_requirementNodeIter;
    string lv_aLIAS;
    string lv_aliasIter;
    int lv_i;

    // Automatic Variable Declarations
    int auto63E745AD_ae;
    const int auto63E745AD_ai = 1;
    int auto85EE15B6_catalog;
    int auto85EE15B6_i;
    int auto95CA2B66_ae;
    const int auto95CA2B66_ai = 1;
    int auto19938479_catalog;
    int auto19938479_i;
    int auto470CC8CB_ae;
    const int auto470CC8CB_ai = 1;

    // Variable Initialization
    lv_requirementNode = lp_requirementNode;
    lv_aLIAS = "";
    lv_aliasIter = "";

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirementNode, lp_requirementNode) == false)) {
        return ;
    }

    if (((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARMB_gv_cRequirementAnd) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARMB_gv_cRequirementOr) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARMB_gv_cRequirementEq) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARMB_gv_cRequirementGT) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARMB_gv_cRequirementGTE))) {
        auto63E745AD_ae = (CatalogFieldValueCount(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto63E745AD_ai >= 0 && lv_i <= auto63E745AD_ae) || (auto63E745AD_ai < 0 && lv_i >= auto63E745AD_ae) ) ; lv_i += auto63E745AD_ai ) {
            lv_requirementNodeIter = (CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray[" + IntToString(lv_i) + "]", lp_player));
            libARMB_gf_CacheRequirementNode(lp_player, lv_requirementNodeIter);
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARMB_gv_cRequirementCountUnit)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        auto85EE15B6_catalog = c_gameCatalogUnit;
        auto85EE15B6_i = 1;
        for ( ; auto85EE15B6_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto85EE15B6_i += 1 ) {
            lv_uNIT = CatalogEntryGet(auto85EE15B6_catalog, auto85EE15B6_i);
            if ((PlayerRace(lp_player) != "Neut") && (libARMB_gf_GetUnitRace(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uNIT) == lv_aLIAS)) {
                libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
            }
            else {
                auto95CA2B66_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (auto95CA2B66_ai >= 0 && lv_i <= auto95CA2B66_ae) || (auto95CA2B66_ai < 0 && lv_i >= auto95CA2B66_ae) ) ; lv_i += auto95CA2B66_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        libARMB_gf_CacheUnit(lp_player, lv_uNIT, true);
                    }

                }
            }
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARMB_gv_cRequirementCountUpgrade)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        auto19938479_catalog = c_gameCatalogUpgrade;
        auto19938479_i = 1;
        for ( ; auto19938479_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto19938479_i += 1 ) {
            lv_uPGRADE = CatalogEntryGet(auto19938479_catalog, auto19938479_i);
            if ((PlayerRace(lp_player) != "Neut") && (libARMB_gf_GetUpgradeRace(lv_uPGRADE) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uPGRADE) == lv_aLIAS)) {
                libARMB_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
            }
            else {
                auto470CC8CB_ae = (CatalogFieldValueCount(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (auto470CC8CB_ai >= 0 && lv_i <= auto470CC8CB_ae) || (auto470CC8CB_ai < 0 && lv_i >= auto470CC8CB_ae) ) ; lv_i += auto470CC8CB_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        libARMB_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
                    }

                }
            }
        }
    }

}

bool libARMB_gf_StructureIsFlying (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "CommandCenterFlying") || (UnitGetType(lp_unit) == "OrbitalCommandFlying") || (UnitGetType(lp_unit) == "BarracksFlying") || (UnitGetType(lp_unit) == "FactoryFlying") || (UnitGetType(lp_unit) == "StarportFlying"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libARMB_gf_UnitIsAntiAir (string lp_unit, int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_weapons;
    string lv_weapon;
    bool lv_isAntiAir;

    // Automatic Variable Declarations
    int auto02580C8C_ae;
    const int auto02580C8C_ai = 1;

    // Variable Initialization
    lv_weapons = CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player);

    // Implementation
    if ((lv_weapons > 0)) {
        auto02580C8C_ae = (lv_weapons - 1);
        lv_i = 0;
        for ( ; ( (auto02580C8C_ai >= 0 && lv_i <= auto02580C8C_ae) || (auto02580C8C_ai < 0 && lv_i >= auto02580C8C_ae) ) ; lv_i += auto02580C8C_ai ) {
            lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
            if ((lv_weapon != null) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterGround) != c_unitFilterRequired) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterAir) != c_unitFilterExcluded)) {
                return true;
            }

        }
    }

    return false;
}

bool libARMB_gf_UnitIsAir (string lp_unit, int lp_player) {
    // Variable Declarations
    const int lv_pLANE_AIR = 0;
    int lv_plane;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plane = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unit, "PlaneArray[" + IntToString(0) + "]", lp_player);

    // Implementation
    if ((lv_plane == lv_pLANE_AIR)) {
        return true;
    }
    else {
        return false;
    }
}

bool libARMB_gf_Canbebuilton (unit lp_unit, point lp_point) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_r;

    // Automatic Variable Declarations
    int auto16EC5F55_ae;
    const fixed auto16EC5F55_ai = 0.5;
    int auto8388331F_ae;
    const fixed auto8388331F_ai = 0.5;

    // Variable Initialization
    lv_r = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lp_unit), "Radius", UnitGetOwner(lp_unit)) + libARMB_gv_maximumdistancefromthebuildingstoppedsurfacetothenearestshoreline[UnitGetOwner(lp_unit)]);

    // Implementation
    if ((RegionContainsPoint(RegionPlayableMap(), lp_point) == false)) {
        return false;
    }

    auto16EC5F55_ae = CeilingI((PointGetX(lp_point) + lv_r));
    lv_x = FloorI((PointGetX(lp_point) - lv_r));
    for ( ; ( (auto16EC5F55_ai >= 0 && lv_x <= auto16EC5F55_ae) || (auto16EC5F55_ai < 0 && lv_x >= auto16EC5F55_ae) ) ; lv_x += auto16EC5F55_ai ) {
        auto8388331F_ae = CeilingI((PointGetY(lp_point) + lv_r));
        lv_y = FloorI((PointGetY(lp_point) - lv_r));
        for ( ; ( (auto8388331F_ai >= 0 && lv_y <= auto8388331F_ae) || (auto8388331F_ai < 0 && lv_y >= auto8388331F_ae) ) ; lv_y += auto8388331F_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (RegionContainsPoint(RegionCircle(lp_point, lv_r), Point(lv_x, lv_y)) == true) && (libARMB_gf_Canbebuiltonabranch(Point(lv_x, lv_y), libARMB_gv_enemyDefenseBuildingTickCount[UnitGetOwner(lp_unit)]) == true)) {
                return true;
            }

        }
    }
    return false;
}

bool libARMB_gf_Canbebuiltonabranch (point lp_point, int lp_number) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    fixed autoA4643FAB_ae;
    const fixed autoA4643FAB_ai = 0.5;
    fixed autoAE381BAC_ae;
    const fixed autoAE381BAC_ai = 0.5;

    // Variable Initialization

    // Implementation
    autoA4643FAB_ae = (PointGetX(lp_point) + (lp_number / 2.0));
    lv_x = (PointGetX(lp_point) - (lp_number / 2.0));
    for ( ; ( (autoA4643FAB_ai >= 0 && lv_x <= autoA4643FAB_ae) || (autoA4643FAB_ai < 0 && lv_x >= autoA4643FAB_ae) ) ; lv_x += autoA4643FAB_ai ) {
        autoAE381BAC_ae = (PointGetY(lp_point) + (lp_number / 2.0));
        lv_y = (PointGetY(lp_point) - (lp_number / 2.0));
        for ( ; ( (autoAE381BAC_ai >= 0 && lv_y <= autoAE381BAC_ae) || (autoAE381BAC_ai < 0 && lv_y >= autoAE381BAC_ae) ) ; lv_y += autoAE381BAC_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (PathingType(Point(lv_x, lv_y)) != c_pathingUnpathable) && (PathingType(Point(lv_x, lv_y)) != c_pathingCliff)) {
            }
            else {
                return false;
            }
        }
    }
    return true;
}

point libARMB_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales) {
    // Variable Declarations
    fixed lv_distancebetweentwopoints;
    point lv_nearestbuildablepoint;
    point lv_pointtowhichpointcoordinatesareroundedoff;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int auto287E2AC5_ae;
    int auto287E2AC5_var;
    fixed auto5F245D07_ae;
    const fixed auto5F245D07_ai = 1.0;
    fixed autoFB5857B6_ae;
    const fixed autoFB5857B6_ai = 1.0;
    fixed auto8D83CA98_ae;
    const fixed auto8D83CA98_ai = -1.0;
    fixed autoDB690805_ae;
    const fixed autoDB690805_ai = -1.0;

    // Variable Initialization
    lv_distancebetweentwopoints = 500.0;
    lv_pointtowhichpointcoordinatesareroundedoff = Point(Round(PointGetX(lp_point)), Round(PointGetY(lp_point)));

    // Implementation
    if ((ModI(lp_numberofscales, 2) == 0)) {
        if ((libARMB_gf_Canbebuiltonabranch(lv_pointtowhichpointcoordinatesareroundedoff, lp_numberofscales) == true)) {
            return lv_pointtowhichpointcoordinatesareroundedoff;
        }
        else {
            auto287E2AC5_ae = CeilingI(MaxF(libNtve_gf_HeightOfRegion(RegionEntireMap()), libNtve_gf_WidthOfRegion(RegionEntireMap())));
            auto287E2AC5_var = 1;
            for ( ; auto287E2AC5_var <= auto287E2AC5_ae; auto287E2AC5_var += 1 ) {
                auto5F245D07_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var);
                for ( ; ( (auto5F245D07_ai >= 0 && lv_x <= auto5F245D07_ae) || (auto5F245D07_ai < 0 && lv_x >= auto5F245D07_ae) ) ; lv_x += auto5F245D07_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var))) < lv_distancebetweentwopoints) && (libARMB_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var));
                    }

                }
                autoFB5857B6_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var);
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto287E2AC5_var - 1));
                for ( ; ( (autoFB5857B6_ai >= 0 && lv_y <= autoFB5857B6_ae) || (autoFB5857B6_ai < 0 && lv_y >= autoFB5857B6_ae) ) ; lv_y += autoFB5857B6_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var), lv_y)) < lv_distancebetweentwopoints) && (libARMB_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var), lv_y);
                    }

                }
                auto8D83CA98_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (auto287E2AC5_var - 1));
                for ( ; ( (auto8D83CA98_ai >= 0 && lv_x <= auto8D83CA98_ae) || (auto8D83CA98_ai < 0 && lv_x >= auto8D83CA98_ae) ) ; lv_x += auto8D83CA98_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var))) < lv_distancebetweentwopoints) && (libARMB_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto287E2AC5_var));
                    }

                }
                autoDB690805_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto287E2AC5_var - 1));
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (auto287E2AC5_var - 1));
                for ( ; ( (autoDB690805_ai >= 0 && lv_y <= autoDB690805_ae) || (autoDB690805_ai < 0 && lv_y >= autoDB690805_ae) ) ; lv_y += autoDB690805_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var), lv_y)) < lv_distancebetweentwopoints) && (libARMB_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto287E2AC5_var), lv_y);
                    }

                }
                if ((lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto287E2AC5_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (auto287E2AC5_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - (auto287E2AC5_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff)))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (auto287E2AC5_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff))))) {
                    return lv_nearestbuildablepoint;
                }

            }
        }
    }

    return lv_nearestbuildablepoint;
}

void libARMB_gf_Therangethataerialbuildingscanstay () {
    int init_i;

    // Variable Declarations
    int[16] lv_numberofterransintheteam;
    bool[16] lv_teamhasairunitsthatcanattackairbuildings;
    fixed[16] lv_teamsmaximumsurfacetoairrange;
    int[16] lv_numberofdefensebuildinggridsfortheteam;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_teamsmaximumsurfacetoairrange[init_i] = 7.0;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_numberofdefensebuildinggridsfortheteam[init_i] = 2;
    }

}

void libARMB_gf_MonobattleStart () {
    // Automatic Variable Declarations
    playergroup auto3DA6C71C_g;
    int auto3DA6C71C_var;
    unitgroup autoFC60484E_g;
    int autoFC60484E_u;
    unit autoFC60484E_var;

    // Implementation
    auto3DA6C71C_g = libARMB_gv_startactiveplayers;
    auto3DA6C71C_var = -1;
    while (true) {
        auto3DA6C71C_var = PlayerGroupNextPlayer(auto3DA6C71C_g, auto3DA6C71C_var);
        if (auto3DA6C71C_var < 0) { break; }
        autoFC60484E_g = UnitGroup("MonobattlePlayer", auto3DA6C71C_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoFC60484E_u = UnitGroupCount(autoFC60484E_g, c_unitCountAll);
        for (;; autoFC60484E_u -= 1) {
            autoFC60484E_var = UnitGroupUnitFromEnd(autoFC60484E_g, autoFC60484E_u);
            if (autoFC60484E_var == null) { break; }
            UnitRemove(autoFC60484E_var);
        }
    }
    libARMB_gf_Therangethataerialbuildingscanstay();
    TriggerEnable(libARMB_gt_MBForcingastationaryaerialbuildingtomove, true);
    TriggerEnable(libARMB_gt_MBForcingaerialbuildingstomove, true);
    TriggerEnable(libARMB_gt_MBUnitCreated, true);
    TriggerEnable(libARMB_gt_MBUnitChanges, true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Run Monobattle
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_RunMonobattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto545E09A0_g;
    int auto545E09A0_var;
    int auto9227EFE1_val;
    playergroup autoEF8D64C4_g;
    int autoEF8D64C4_var;
    playergroup auto1BDD5B40_g;
    int auto1BDD5B40_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto545E09A0_g = libARMB_gv_startactiveplayers;
    auto545E09A0_var = -1;
    while (true) {
        auto545E09A0_var = PlayerGroupNextPlayer(auto545E09A0_g, auto545E09A0_var);
        if (auto545E09A0_var < 0) { break; }
        if ((PlayerType(auto545E09A0_var) == c_playerTypeUser)) {
            libARMB_gf_DisallowAll(auto545E09A0_var);
        }

    }
    auto9227EFE1_val = libARMB_gv_monobattleMode;
    if (auto9227EFE1_val == libARMB_ge_MonobattleMode_RandomSimple) {
        autoEF8D64C4_g = libARMB_gv_startactiveplayers;
        autoEF8D64C4_var = -1;
        while (true) {
            autoEF8D64C4_var = PlayerGroupNextPlayer(autoEF8D64C4_g, autoEF8D64C4_var);
            if (autoEF8D64C4_var < 0) { break; }
            if ((PlayerType(autoEF8D64C4_var) == c_playerTypeUser)) {
                libARMB_gf_ActivateMonobattleProfile(autoEF8D64C4_var, "Random");
            }

        }
        libARMB_gf_MonobattleStart();
        TriggerExecute(libARMB_gt_CreateUnitBriefUI, true, false);
    }
    else if (auto9227EFE1_val == libARMB_ge_MonobattleMode_InGameSimple) {
        auto1BDD5B40_g = libARMB_gv_startactiveplayers;
        auto1BDD5B40_var = -1;
        while (true) {
            auto1BDD5B40_var = PlayerGroupNextPlayer(auto1BDD5B40_g, auto1BDD5B40_var);
            if (auto1BDD5B40_var < 0) { break; }
            if ((PlayerType(auto1BDD5B40_var) == c_playerTypeUser)) {
                libARMB_gf_UnitSelectionPanel(auto1BDD5B40_var);
            }

        }
        libARMB_gf_MonobattleStart();
        TriggerExecute(libARMB_gt_CreateUnitBriefUI, true, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_ARMB_9F2D923A"));
    }
    else if (auto9227EFE1_val == libARMB_ge_MonobattleMode_DraftSelection) {
        libARMB_gv_draftMode = 0;
        MonobattleInitGlobals();
    }
    else if (auto9227EFE1_val == libARMB_ge_MonobattleMode_BlindRandom) {
        libARMB_gv_draftMode = 1;
        MonobattleInitGlobals();
    }
    else if (auto9227EFE1_val == libARMB_ge_MonobattleMode_SingleDraft) {
        libARMB_gv_draftMode = 2;
        MonobattleInitGlobals();
    }
    else if (auto9227EFE1_val == libARMB_ge_MonobattleMode_TierDraft) {
        libARMB_gv_draftMode = 3;
        MonobattleInitGlobals();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_RunMonobattle_Init () {
    libARMB_gt_RunMonobattle = TriggerCreate("libARMB_gt_RunMonobattle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: show monobattle profiles
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_showmonobattleprofiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_profileIndex;
    int lv_player;
    string lv_profile;
    string lv_monobattleRaceRules;
    int lv_i;
    string lv_unitEntry;
    string lv_race;
    unit lv_selectedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_selectedUnit = UnitGroupUnit(UnitGroupSelected(lv_player), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_selectedUnit == null)) {
        return true;
    }

    lv_race = libARRA_gf_GetUnitRace(lv_selectedUnit);
    PlayerSetRace(EventPlayer(), lv_race);
    libARMB_gf_DisallowAll(EventPlayer());
    libARMB_gf_UnitSelectionPanel(lv_player);
    libARMB_gf_Therangethataerialbuildingscanstay();
    TriggerEnable(libARMB_gt_MBForcingastationaryaerialbuildingtomove, true);
    TriggerEnable(libARMB_gt_MBForcingaerialbuildingstomove, true);
    TriggerEnable(libARMB_gt_MBUnitCreated, true);
    TriggerEnable(libARMB_gt_MBUnitChanges, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_showmonobattleprofiles_Init () {
    libARMB_gt_showmonobattleprofiles = TriggerCreate("libARMB_gt_showmonobattleprofiles_Func");
    TriggerEnable(libARMB_gt_showmonobattleprofiles, false);
    TriggerAddEventChatMessage(libARMB_gt_showmonobattleprofiles, 1, "show monobattle profiles cheat", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Unit Brief UI
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_CreateUnitBriefUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cE94y;
    int lv_i;
    int lv_x;
    int lv_y;
    string lv_dialogimagestring;
    text lv_tooltip;
    text lv_playernametext;
    text lv_unitnametext;
    text lv_unitsubtitletext;
    text lv_unitdescriptivetext;
    text lv_enter;
    int lv_soundsArray;
    string lv_sound;

    // Automatic Variable Declarations
    int auto5AEA3C4B_ae;
    const int auto5AEA3C4B_ai = 1;
    playergroup autoC2F8BDD8_g;
    int autoC2F8BDD8_var;

    // Variable Initialization
    lv_cE94y = 64;
    lv_dialogimagestring = "";
    lv_enter = StringToText("<n/>");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARMB_gv_monobattlesProfilesBriefDialog != c_invalidDialogId)) {
        DialogDestroy(libARMB_gv_monobattlesProfilesBriefDialog);
    }

    if ((libARMB_gf_Numberofteamswithplayers() < 15)) {
        lv_cE94y = 60;
    }

    DialogCreate((47 * 15), 705, c_anchorTopRight, 40, 60, false);
    libARMB_gv_monobattlesProfilesBriefDialog = DialogLastCreated();
    auto5AEA3C4B_ae = libARMB_gf_Numberofteamswithplayers();
    lv_i = 1;
    for ( ; ( (auto5AEA3C4B_ai >= 0 && lv_i <= auto5AEA3C4B_ae) || (auto5AEA3C4B_ai < 0 && lv_i >= auto5AEA3C4B_ae) ) ; lv_i += auto5AEA3C4B_ai ) {
        lv_x = 0;
        autoC2F8BDD8_g = libARMB_gf_Aplayeronateamwithaplayer(lv_i);
        autoC2F8BDD8_var = -1;
        while (true) {
            autoC2F8BDD8_var = PlayerGroupNextPlayer(autoC2F8BDD8_g, autoC2F8BDD8_var);
            if (autoC2F8BDD8_var < 0) { break; }
            lv_playernametext = TextWithColor(PlayerName(autoC2F8BDD8_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoC2F8BDD8_var, false)));
            if ((libARMB_gv_unitSelection[autoC2F8BDD8_var] == null)) {
                lv_x = (lv_x + 55);
                continue;
            }

            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-border-transportslot-filled.dds", PlayerGroupAll());
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 55, 55);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoC2F8BDD8_var, false)), PlayerGroupAll());
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_x, lv_y);
            if ((libARMB_gv_unitSelection[autoC2F8BDD8_var] == null)) {
            }
            else {
                lv_dialogimagestring = CatalogFieldValueGet(c_gameCatalogActor, (libARMB_gv_unitSelection[autoC2F8BDD8_var]), "UnitIcon", autoC2F8BDD8_var);
                lv_unitnametext = (StringToText("<n/><s val=\"StandardTooltipHeader_White\">") + StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libARMB_gv_unitSelection[autoC2F8BDD8_var], "Name", autoC2F8BDD8_var)) + StringToText("</s>"));
                if ((CatalogFieldValueGet(c_gameCatalogUnit, libARMB_gv_unitSelection[autoC2F8BDD8_var], "Subtitle", autoC2F8BDD8_var) == "")) {
                    lv_unitsubtitletext = null;
                }
                else {
                    lv_unitsubtitletext = (lv_enter + TextWithColor(StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libARMB_gv_unitSelection[autoC2F8BDD8_var], "Subtitle", autoC2F8BDD8_var)), (Color(100,100,100))));
                }
                if ((CatalogFieldValueGet(c_gameCatalogUnit, libARMB_gv_unitSelection[autoC2F8BDD8_var], "Description", autoC2F8BDD8_var) == "")) {
                    lv_unitdescriptivetext = null;
                }
                else {
                    lv_unitdescriptivetext = (StringToText("<n/><n/>") + StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libARMB_gv_unitSelection[autoC2F8BDD8_var], "Description", autoC2F8BDD8_var)));
                }
                lv_tooltip = (lv_playernametext + lv_unitnametext + lv_unitsubtitletext + lv_unitdescriptivetext);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 49, 49, c_anchorTopRight, (lv_x + 3), (lv_y + 3), lv_tooltip, (lv_dialogimagestring), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            }
            lv_x = (lv_x + 55);
        }
        lv_y = (lv_y + lv_cE94y);
    }
    DialogSetImageVisible(libARMB_gv_monobattlesProfilesBriefDialog, false);
    DialogSetVisible(libARMB_gv_monobattlesProfilesBriefDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_CreateUnitBriefUI_Init () {
    libARMB_gt_CreateUnitBriefUI = TriggerCreate("libARMB_gt_CreateUnitBriefUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit selected
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_Unitselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_player;

    // Automatic Variable Declarations
    const int autoEB4FA9F6_ae = 20;
    const int autoEB4FA9F6_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    for ( ; ( (autoEB4FA9F6_ai >= 0 && lv_i <= autoEB4FA9F6_ae) || (autoEB4FA9F6_ai < 0 && lv_i >= autoEB4FA9F6_ae) ) ; lv_i += autoEB4FA9F6_ai ) {
        if ((EventDialogControl() == libARMB_gv_dIALOG_BUTTONS[lv_player][lv_i])) {
            libARMB_gv_profiles[lv_player] = libARMB_gv_dIALOG_PROFILES[lv_player][lv_i];
            libARMB_gv_unitSelection[lv_player] = UserDataGetUnit("MonobattlesProfiles", libARMB_gv_profiles[lv_player], "Unit", 1);
            libARMB_gf_ActivateMonobattleProfile(lv_player, libARMB_gv_profiles[lv_player]);
            libARMB_gf_Therangethataerialbuildingscanstay();
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor((PlayerName(lv_player) + StringExternal("Param/Value/lib_ARMB_21E5C08B") + StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libARMB_gv_unitSelection[lv_player], "Name", lv_player))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false))));
            TriggerExecute(libARMB_gt_CreateUnitBriefUI, true, false);
            DialogDestroy(libARMB_gv_dIALOG[lv_player]);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_Unitselected_Init () {
    libARMB_gt_Unitselected = TriggerCreate("libARMB_gt_Unitselected_Func");
    TriggerEnable(libARMB_gt_Unitselected, false);
    TriggerAddEventDialogControl(libARMB_gt_Unitselected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB Forcing aerial buildings to move 
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_MBForcingaerialbuildingstomove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    point lv_eC9DB4EBA599ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998;
    point lv_eC9DB4EB8F99EC8B9CED82ACECA780ECA090;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libARMB_gf_StructureIsFlying(lv_unit) == true)) {
        lv_eC9DB4EBA599ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998 = UnitGetPosition(lv_unit);
        if ((libARMB_gv_restrictedmovementofaerialbuildings[UnitGetOwner(lv_unit)] == true) && (libARMB_gf_Canbebuilton(lv_unit, lv_eC9DB4EBA599ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998) == false) && ((libARMB_gf_Canbebuilton(lv_unit, UnitGetGoalPosition(lv_unit)) == false) || (UnitTestState(lv_unit, c_unitStateIdle) == true) || (OrderGetAbilityCommand(UnitOrder(lv_unit, 0)) == AbilityCommand("move", 2)))) {
            if ((lv_eC9DB4EB8F99EC8B9CED82ACECA780ECA090 == null)) {
                lv_eC9DB4EB8F99EC8B9CED82ACECA780ECA090 = libNtve_gf_PointOffsetTowardsPoint(libARMB_gf_Thenearestbuildablepointtothepoint(lv_eC9DB4EBA599ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998, libARMB_gv_enemyDefenseBuildingTickCount[UnitGetOwner(lv_unit)]), (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lv_unit), "Radius", UnitGetOwner(lv_unit)) + libARMB_gv_maximumdistancefromthebuildingstoppedsurfacetothenearestshoreline[UnitGetOwner(lv_unit)] + -0.1), lv_eC9DB4EBA599ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998);
            }

            UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_eC9DB4EB8F99EC8B9CED82ACECA780ECA090), c_orderQueueReplace);
        }
        else {
            lv_eC9DB4EB8F99EC8B9CED82ACECA780ECA090 = null;
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_MBForcingaerialbuildingstomove_Init () {
    libARMB_gt_MBForcingaerialbuildingstomove = TriggerCreate("libARMB_gt_MBForcingaerialbuildingstomove_Func");
    TriggerEnable(libARMB_gt_MBForcingaerialbuildingstomove, false);
    TriggerAddEventUnitAbility(libARMB_gt_MBForcingaerialbuildingstomove, null, AbilityCommand("CommandCenterLiftOff", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libARMB_gt_MBForcingaerialbuildingstomove, null, AbilityCommand("OrbitalLiftOff", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libARMB_gt_MBForcingaerialbuildingstomove, null, AbilityCommand("BarracksLiftOff", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libARMB_gt_MBForcingaerialbuildingstomove, null, AbilityCommand("FactoryLiftOff", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libARMB_gt_MBForcingaerialbuildingstomove, null, AbilityCommand("StarportLiftOff", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB Forcing a stationary aerial building to move 
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_MBForcingastationaryaerialbuildingtomove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_eCA095ECA780ED959CEC9CA0EB8B9B;
    point lv_eCA095ECA780ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eCA095ECA780ED959CEC9CA0EB8B9B = EventUnit();
    lv_eCA095ECA780ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998 = UnitGetPosition(lv_eCA095ECA780ED959CEC9CA0EB8B9B);

    // Conditions
    if (testConds) {
        if (!((libARMB_gf_StructureIsFlying(lv_eCA095ECA780ED959CEC9CA0EB8B9B) == true))) {
            return false;
        }

        if (!((libARMB_gv_restrictedmovementofaerialbuildings[UnitGetOwner(lv_eCA095ECA780ED959CEC9CA0EB8B9B)] == true))) {
            return false;
        }

        if (!((libARMB_gf_Canbebuilton(lv_eCA095ECA780ED959CEC9CA0EB8B9B, lv_eCA095ECA780ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_eCA095ECA780ED959CEC9CA0EB8B9B, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(libARMB_gf_Thenearestbuildablepointtothepoint(lv_eCA095ECA780ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998, libARMB_gv_enemyDefenseBuildingTickCount[UnitGetOwner(lv_eCA095ECA780ED959CEC9CA0EB8B9B)]), (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lv_eCA095ECA780ED959CEC9CA0EB8B9B), "Radius", UnitGetOwner(lv_eCA095ECA780ED959CEC9CA0EB8B9B)) + libARMB_gv_maximumdistancefromthebuildingstoppedsurfacetothenearestshoreline[UnitGetOwner(lv_eCA095ECA780ED959CEC9CA0EB8B9B)] + -0.1), lv_eCA095ECA780ED959CEC9CA0EB8B9BEC9D98EC9C84ECB998)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_MBForcingastationaryaerialbuildingtomove_Init () {
    libARMB_gt_MBForcingastationaryaerialbuildingtomove = TriggerCreate("libARMB_gt_MBForcingastationaryaerialbuildingtomove_Func");
    TriggerEnable(libARMB_gt_MBForcingastationaryaerialbuildingtomove, false);
    TriggerAddEventUnitAbility(libARMB_gt_MBForcingastationaryaerialbuildingtomove, null, AbilityCommand("stop", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB Unit Created
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_MBUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    string lv_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_player = UnitGetOwner(EventUnitCreatedUnit());
    lv_type = UnitGetType(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_unit, "Hallucination") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARMB_gv_profiles[lv_player] != null)) {
        if ((libARMB_gf_UnitTypeisDisArmed(lv_player, lv_type) == true)) {
            libARMB_gf_Disarmunit(lv_player, lv_unit);
        }

        if ((libARMB_gf_UnitTypeisArmed(lv_player, lv_type) == true)) {
            libARMB_gf_Armunit(lv_player, lv_unit);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_MBUnitCreated_Init () {
    libARMB_gt_MBUnitCreated = TriggerCreate("libARMB_gt_MBUnitCreated_Func");
    TriggerEnable(libARMB_gt_MBUnitCreated, false);
    TriggerAddEventUnitCreated(libARMB_gt_MBUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MB Unit Changes
//--------------------------------------------------------------------------------------------------
bool libARMB_gt_MBUnitChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    string lv_type;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_type = UnitGetType(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_unit, "Hallucination") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARMB_gv_profiles[lv_player] != null)) {
        if ((libARMB_gf_UnitTypeisDisArmed(lv_player, lv_type) == true)) {
            libARMB_gf_Disarmunit(lv_player, lv_unit);
        }

        if ((libARMB_gf_UnitTypeisArmed(lv_player, lv_type) == true)) {
            libARMB_gf_Armunit(lv_player, lv_unit);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMB_gt_MBUnitChanges_Init () {
    libARMB_gt_MBUnitChanges = TriggerCreate("libARMB_gt_MBUnitChanges_Func");
    TriggerEnable(libARMB_gt_MBUnitChanges, false);
    TriggerAddEventUnitAbility(libARMB_gt_MBUnitChanges, null, null, c_unitAbilStageComplete, false);
}

void libARMB_InitTriggers () {
    libARMB_gt_RunMonobattle_Init();
    libARMB_gt_showmonobattleprofiles_Init();
    libARMB_gt_CreateUnitBriefUI_Init();
    libARMB_gt_Unitselected_Init();
    libARMB_gt_MBForcingaerialbuildingstomove_Init();
    libARMB_gt_MBForcingastationaryaerialbuildingtomove_Init();
    libARMB_gt_MBUnitCreated_Init();
    libARMB_gt_MBUnitChanges_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libARMB_InitLib_completed = false;

void libARMB_InitLib () {
    if (libARMB_InitLib_completed) {
        return;
    }

    libARMB_InitLib_completed = true;

    libARMB_InitLibraries();
    libARMB_InitVariables();
    libARMB_InitCustomScript();
    libARMB_InitTriggers();
}

include "LibPEEP"

