include "TriggerLibs/NativeLib"

include "LibPEEP_h"

//--------------------------------------------------------------------------------------------------
// Library: PEEP MODE
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libPEEP_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libPEEP_InitVariables_completed = false;

void libPEEP_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;
    int init_i2;
    int init_j2;

    if (libPEEP_InitVariables_completed) {
        return;
    }

    libPEEP_InitVariables_completed = true;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        libPEEP_gv_playerRoles[init_i] = libPEEP_ge_PlayerRole_Player;
    }
    libPEEP_gv_peepMode = libPEEP_ge_PeepModeGameStyle_None;
    libPEEP_gv_recGlobals.lv_strMapName = "Thunderbird LE";
    libPEEP_gv_recGlobals.lv_boolDebugMode = true;
    libPEEP_gv_recGlobals.lv_realResourceTradingCountdown = 213.0;
    libPEEP_gv_recGlobals.lv_intMinimumMatchSeconds = 120;
    libPEEP_gv_recGlobals.lv_realMatchCountdownPeriod = 16.0;
    libPEEP_gv_recGlobals.lv_realCommentatorChoicePeriod = 16.0;
    libPEEP_gv_recGlobals.lv_intDebugPlayer = 1;
    libPEEP_gv_recGlobals.lv_intDefaultColorScheme = 1;
    libPEEP_gv_recGlobals.lv_intMaxChips = 9999999;
    libPEEP_gv_recGlobals.lv_intMaxWins = 99999;
    libPEEP_gv_recGlobals.lv_intMaxPenTrail = 2500;
    libPEEP_gv_recGlobals.lv_intMaxMatches = 20;
    libPEEP_gv_recGlobals.lv_realWaitTime = 0.1;
    libPEEP_gv_recGlobals.lv_ugPrankUnitGroup = UnitGroupEmpty();
    libPEEP_gv_recGlobals.lv_intNumDebugSequences = 4;
    libPEEP_gv_recGlobals.lv_intNumAvatarPages = 3;
    libPEEP_gv_recGlobals.lv_intAvatarsPerPage = 15;
    libPEEP_gv_recGlobals.lv_realSlowRotationPitch = 36.0;
    libPEEP_gv_recGlobals.lv_coChipsColor = Color(99.22, 99.61, 80.39);
    libPEEP_gv_recGlobals.lv_coCashColor = Color(22*100/255,128*100/255,0);
    libPEEP_gv_recGlobals.lv_coRatingColor = Color(79.22, 85.10, 98.43);
    libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerPrankZerglingTimer = TimerCreate();
    libPEEP_gv_recGlobals.lv_strStarCodeEncryptionKey = "outworlder";
    libPEEP_gv_recGlobals.lv_timerNamePanelGraphic = TimerCreate();
    libPEEP_gv_recGlobals.lv_intNumMaxPets = 2;
    libPEEP_gv_recGlobals.lv_timerPetExclamationTimer = TimerCreate();
    libPEEP_gv_recGlobals.lv_realMinSonasRating = 10.0;
    libPEEP_gv_recGlobals.lv_realMaxSonasRating = 5000.0;
    libPEEP_gv_recGlobals.lv_intNumMaxTurfMarkers = 2;
    libPEEP_gv_recGlobals.lv_intNumMaxTurfSymbols = 2;
    libPEEP_gv_recGlobals.lv_timerResourceTrading = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerTutorial = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerBlinkTimer = TimerCreate();
    libPEEP_gv_recGlobals.lv_intNumMatchesToSave = 20;
    libPEEP_gv_recGlobals.lv_intNumLogItemsToSave = 950;
    libPEEP_gv_recGlobals.lv_intNumLeagues = 8;
    libPEEP_gv_recGlobals.lv_timerCommitMatchPlayers = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerSpawnMatchPets = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerSpawnFaceoffPets = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerStopVictorySound = TimerCreate();
    libPEEP_gv_recGlobals.lv_realChatTimeout = 15.0;
    libPEEP_gv_recGlobals.lv_intNumChatIndexes = 200;
    libPEEP_gv_recGlobals.lv_timerPrepareStartingUnits = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown = TimerCreate();
    libPEEP_gv_recGlobals.lv_realGlobalEventCooldown = 1.5;
    libPEEP_gv_recGlobals.lv_realCameraIdleCooldown = 9.0;
    libPEEP_gv_recGlobals.lv_intMaxZoomIndex = 5;
    libPEEP_gv_recGlobals.lv_timerBettingIntervalTimer = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerBettingPeriodTimer = TimerCreate();
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libPEEP_gv_recGlobals.lv_coLogClassTextColor[init_i1] = Color(100,100,100);
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recGlobals.lv_diPlayerVictoryIcons[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recGlobals.lv_timerMatchInitTimer = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerVictoryScreenTimer = TimerCreate();
    libPEEP_gv_recGlobals.lv_ugEligibleUnitGroup = UnitGroupEmpty();
    libPEEP_gv_recGlobals.lv_timerStartMinibattle = TimerCreate();
    libPEEP_gv_recGlobals.lv_intNumCountdownActors = 2;
    libPEEP_gv_recGlobals.lv_intNumFaceoffAnchorTypes = 1;
    libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE = 2;
    libPEEP_gv_recGlobals.lv_realTeamSelectionCooldown = 10.0;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        for (init_i2 = 0; init_i2 <= 3; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= 3; init_j2 += 1) {
                libPEEP_gv_recGlobals.lv_recColorSchemes[init_i1].lv_pcPlayerColors[init_i2][init_j2] = 1;
            }
        }
    }
    libPEEP_gv_recGlobals.lv_intDialogYStart = 78;
    libPEEP_gv_recGlobals.lv_intDialogBorder = 36;
    libPEEP_gv_recGlobals.lv_intDialogExtra = (libPEEP_gv_recGlobals.lv_intDialogBorder * 2);
    libPEEP_gv_recGlobals.lv_intDialogHeaderHeight = 28;
    libPEEP_gv_recGlobals.lv_intDialogHeaderPadding = 4;
    libPEEP_gv_recGlobals.lv_intDialogXStart = 2;
    libPEEP_gv_recGlobals.lv_intNumButtonTeamCols = 3;
    libPEEP_gv_recGlobals.lv_intTeamButtonSize = 84;
    libPEEP_gv_recGlobals.lv_intTeamIconSize = 76;
    libPEEP_gv_recGlobals.lv_intTeamButtonGap = 2;
    libPEEP_gv_recGlobals.lv_intTeamButtonInlay = ((libPEEP_gv_recGlobals.lv_intTeamButtonSize / 2) - (libPEEP_gv_recGlobals.lv_intTeamIconSize / 2));
    libPEEP_gv_recGlobals.lv_intNavButtonWidth = 109;
    libPEEP_gv_recGlobals.lv_intNavButtonHeight = 32;
    libPEEP_gv_recGlobals.lv_intNavButtonPadding = 3;
    libPEEP_gv_recGlobals.lv_realCameraYaw = 90.0;
    libPEEP_gv_recGlobals.lv_timerCameraYaw = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerMatchCountdown = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerFaceoffTransitionStart = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerFaceoffTransitionEnd = TimerCreate();
    libPEEP_gv_recGlobals.lv_timerFaceoffPointOffsetChange = TimerCreate();
    libPEEP_gv_recGameState.lv_intCurrentMatchMode = 1;
    libPEEP_gv_recGameState.lv_intCurrentColorScheme = 1;
    libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode = 1;
    libPEEP_gv_recGameState.lv_boolMatchModeVotingActive = true;
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libPEEP_gv_recTeamsSource[init_i].lv_ugFaceoffGroup = UnitGroupEmpty();
        libPEEP_gv_recTeamsSource[init_i].lv_ttFaceoffTextTag = c_textTagNone;
        libPEEP_gv_recTeamsSource[init_i].lv_ttSpecialTextTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        libPEEP_gv_recTeams[init_i].lv_ugFaceoffGroup = UnitGroupEmpty();
        libPEEP_gv_recTeams[init_i].lv_ttFaceoffTextTag = c_textTagNone;
        libPEEP_gv_recTeams[init_i].lv_ttSpecialTextTag = c_textTagNone;
    }
    for (init_i = 0; init_i <= 17; init_i += 1) {
        libPEEP_gv_recPlayers[init_i].lv_timerRevealCountdown = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_timerDebugSequence = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_ugCurrentSelectionGroup = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= 11; init_i1 += 1) {
            libPEEP_gv_recPlayers[init_i].lv_ugControlGroups[init_i1] = UnitGroupEmpty();
        }
        libPEEP_gv_recPlayers[init_i].lv_coRaceTextColor = Color(0,0,0);
        libPEEP_gv_recPlayers[init_i].lv_coRaceClockColor = Color(0,0,0);
        libPEEP_gv_recPlayers[init_i].lv_dResearchDialog = c_invalidDialogId;
        libPEEP_gv_recPlayers[init_i].lv_dStructureDialog = c_invalidDialogId;
        for (init_i1 = 0; init_i1 <= libPEEP_gv_rACES_COUNT; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 11; init_j1 += 1) {
                libPEEP_gv_recPlayers[init_i].lv_diResearchIcons[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= libPEEP_gv_rACES_COUNT; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 11; init_j1 += 1) {
                libPEEP_gv_recPlayers[init_i].lv_diStructureIcons[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= libPEEP_gv_rACES_COUNT; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 11; init_j1 += 1) {
                libPEEP_gv_recPlayers[init_i].lv_diResearchBackgrounds[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= libPEEP_gv_rACES_COUNT; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 11; init_j1 += 1) {
                libPEEP_gv_recPlayers[init_i].lv_diStructureBackgrounds[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= libPEEP_gv_rACES_COUNT; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 11; init_j1 += 1) {
                libPEEP_gv_recPlayers[init_i].lv_diResarchLevelLabels[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        for (init_i1 = 0; init_i1 <= libPEEP_gv_rACES_COUNT; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= 11; init_j1 += 1) {
                libPEEP_gv_recPlayers[init_i].lv_diStructureLevelLabels[init_i1][init_j1] = c_invalidDialogControlId;
            }
        }
        libPEEP_gv_recPlayers[init_i].lv_intLastTOWButton = 1;
        libPEEP_gv_recPlayers[init_i].lv_realBankSonasRating = 400.0;
        for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
            libPEEP_gv_recPlayers[init_i].lv_txtPetTags[init_i1] = c_textTagNone;
        }
        for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
            libPEEP_gv_recPlayers[init_i].lv_strBankPetNames[init_i1] = "";
        }
        libPEEP_gv_recPlayers[init_i].lv_intLastTeamDialogOpen = 1;
        for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
            libPEEP_gv_recPlayers[init_i].lv_boolPetNameless[init_i1] = true;
        }
        for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
            libPEEP_gv_recPlayers[init_i].lv_timerPetRenameCooldown[init_i1] = TimerCreate();
        }
        libPEEP_gv_recPlayers[init_i].lv_timerPetUtteranceDisplay = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_pgObserversFollowingMe = PlayerGroupEmpty();
        libPEEP_gv_recPlayers[init_i].lv_ugTestAttackGroup = UnitGroupEmpty();
        libPEEP_gv_recPlayers[init_i].lv_intBankRace = 1;
        libPEEP_gv_recPlayers[init_i].lv_intBankLeague = 1;
        libPEEP_gv_recPlayers[init_i].lv_timerFaceoffUnitSpecialAction = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_intRankSortCol = 2;
        libPEEP_gv_recPlayers[init_i].lv_timerBettingCloseTimer = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_recCamEvent.lv_ugUnitGroup = UnitGroupEmpty();
        libPEEP_gv_recPlayers[init_i].lv_ugCurrentCameraGroup = UnitGroupEmpty();
        libPEEP_gv_recPlayers[init_i].lv_timerCameraIdleExpiration = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_timerAutoCamIdler = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_timerAutoCamIdler2 = TimerCreate();
        libPEEP_gv_recPlayers[init_i].lv_realMatchLogSliderMultiplier = 1.0;
        for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
            libPEEP_gv_recPlayers[init_i].lv_boolTeamAllowanceList[init_i1] = true;
        }
        libPEEP_gv_recPlayers[init_i].lv_intChips = 1000;
        libPEEP_gv_recPlayers[init_i].lv_timerTeamSelectionCooldown = TimerCreate();
        for (init_i1 = 0; init_i1 <= 2000; init_i1 += 1) {
            libPEEP_gv_recPlayers[init_i].lv_ttFloatingTextTags[init_i1] = c_textTagNone;
        }
    }
    libPEEP_gv_recUI.lv_diInfoPaneCargoBlockerButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dCancelTeamDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diCancelTeamButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dOptionTabsDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 15; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diOptionTabsButtons[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_dChangePlayerValuesDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diChangePlayerValuesDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diChangePlayerValuesApplyButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diChangePlayerNameLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diChangePlayerNameChangeTextboxes[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diChangePlayerPollLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diCustNamePanelButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dCustNamePanelDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diCustNamePanelDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelChangePlayerValsButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelApplyButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCustNamePanelApplyAllButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_dRevealCountdownDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diRevealCountdownLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dDashboardDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diDashboardRatingLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diDashboardBalanceLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diDashboardChipsLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diKickPlayerButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dKickPlayerDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diKickPlayerDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diKickPlayerPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diKickPlayerConfirmButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dCommentatorChoiceDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diCommentatorChoiceTeamVotesLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diCommentatorChoiceRandomButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCommentatorChoiceTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCommentatorChoiceCountdownLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 51; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diSketchTownhallBackgrounds[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 51; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diSketchTownhallIcons[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diSketchMapTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diSketchpadBackground = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2501; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diPenTrail[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_dSketchDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diSketchCursor = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diSketchMapImage = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 30; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diVictoryElementList[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 150; init_i1 += 1) {
        libPEEP_gv_recUI.lv_dDialogList[init_i1] = c_invalidDialogId;
    }
    libPEEP_gv_recUI.lv_diVictoryExpectedLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diVictoryNameLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_dCinematicDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diCinematicButton2 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diPersonalOptionsButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotableOptionsButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diHistoryPlayerCheckboxes[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diChatLogPlayerCheckboxes[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diChatLogPlayerLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diChatLogPlayerCheckAll = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diInitLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTutorialLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTutorialTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTutorialSkipButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTutorialCooldownLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diRefreshMatchHistory = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dInitDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diNameTOWButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dTOWDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWLabelLeft[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWLabelCenter[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWImageLeft[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWImageCenter[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWImageRight[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTOWLabelRight[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diBlizzUIPanel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverStatsButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverStatsIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverBlizzButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverBlizzIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverLogsButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverLogsIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverLeaderboardButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverLeaderboardIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverBettingButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diObserverBettingIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diAutoCamIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dNamePanel2Dialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diNamePanel2CenterButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diNamePanel2CenterOrb = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diNamePanel2Wings[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libPEEP_gv_recUI.lv_diNamePanel2PlayerLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 2; init_j1 += 1) {
            libPEEP_gv_recUI.lv_diNamePanel2RaceIcons[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diNamePanel2ScoreLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diNamePanel2ColorIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diNamePanel2PollLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diNamePanel2BettingLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diNamePanel2MessageLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 50; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diNamePanel2ElementList[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diCashChipsButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diStoreButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diStoreButton2 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diStoreBalanceLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diPetTypePulldowns[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diPetSpawnPulldowns[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diPetNameLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_dInventoryDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diInventoryDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dStoreDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libPEEP_gv_recUI.lv_dStoreAisleDialogs[init_i1] = c_invalidDialogId;
    }
    for (init_i1 = 0; init_i1 <= 200; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStoreButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 200; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStoreIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 200; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStoreLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diStoreDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diStoreDescriptionLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diStoreAislePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dBlizzardUIDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diGameClock = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diGameTotalChips = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diGameTotalWins = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diChatLogListbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dFairMessageLogButtonDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diFairMessageLogButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourceTradingMineralLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourceTradingVespeneLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dResourceTradingLauncher = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diResourceTradingButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dResourceTradingDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diResourceTradingDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourcePlayerPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourceMineralMore = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourceMineralLess = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourceVespeneMore = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourceVespeneLess = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diResourceSend = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diAutoCamAlertLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diLeaderboardTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diLeaderboardBackground1 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diLeaderboardBackgroun2 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dChatDialogReplacement = c_invalidDialogId;
    libPEEP_gv_recUI.lv_dChatDialogCinematic = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diChatWindow = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diChatWindow2 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diAvatarsTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diAvatarsPageLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchHistorySelectListbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchHistoryLogListbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchHistoryTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchHistoryButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchHistoryImage = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dMatchHistoryDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diMatchHistoryDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dChatLogDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_dChatHelpDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diChatLogDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diChatHelpDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diChatRefreshButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diChatHelpButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionCameraIdleTimeLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diChipAnnouncementLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingMaxSliderLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingCountdownLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dBettingDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diBettingDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingCurrentBetLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingLastPayoutLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingSlider = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingPlaceBetButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingPotLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diBettingPotLabel2 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dHelpDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_dHelpDialog2 = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diHelpSlider = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diHelpDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diHelpPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diHelpLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dMatchLogDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diMatchLogSlider = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchLogMain = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchLogTitle = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchLogFiltersTitle1 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMatchLogFiltersTitle2 = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diMatchLogClassFilters[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diMatchLogClassFilterLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diLeaderboardDialogX = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diLeaderboardSortButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 17; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 6; init_j1 += 1) {
            libPEEP_gv_recUI.lv_diLeaderboardLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libPEEP_gv_recUI.lv_dLeaderboardDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_dClockReplacement = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diClockReplacement = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diMinimapClock = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dAnnouncementDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diAnnouncement = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dLoadingMatchDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_imageXButtonImage = "Assets/Textures/btn-command-stop.dds";
    libPEEP_gv_recUI.lv_dMinimapDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diCinematicModeController = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_intXButtonWidth = 36;
    libPEEP_gv_recUI.lv_intXButtonHeight = 36;
    libPEEP_gv_recUI.lv_intXButtonXOffset = 12;
    libPEEP_gv_recUI.lv_intXButtonYOffset = 11;
    libPEEP_gv_recUI.lv_diAvatarsDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTeamNewbDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diZoomIn = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diZoomInIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diZoomOut = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diZoomOutIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dStatsDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_dStatsDialogBackground = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dStatsBlizzardDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diStatsToggleSimple = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diStatsToggleImage = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsHeaders[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsRaceIconBackgrounds[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsRaceIconBackgrounds2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsRaceIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardRaceIconBackgrounds[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardRaceIconBackgrounds2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardRaceIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsMineralsLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardMineralsLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardMineralsIconBackgrounds[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardMineralsIconBackgrounds2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsMineralsRateLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsVespeneLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardVespeneLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardVespeneIconBackgrounds[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardVespeneIconBackgrounds2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsVespeneRateLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsSupplyLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIconBackgrounds[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIconBackgrounds2[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsHarvesterLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsArmyValueLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsArmyValueLostLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diStatsAPMLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diCinematicButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCinematicIcon = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dSurrenderDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diSurrenderConfirmButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diSurrenderDeclineButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTeamRestrictionDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dTeamRestrictionDialog = c_invalidDialogId;
    for (init_i1 = 0; init_i1 <= 16; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diTeamRestrictionCheckAll = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dMatchCountdownDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diMatchCountdown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diSubMatchCountdown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_lbLeaderboard = c_boardNone;
    libPEEP_gv_recUI.lv_diInventoryButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diInventoryButton2 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diInventoryButton3 = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCurrentMatchModeLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diCurrentPlayerSelectModeLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        libPEEP_gv_recUI.lv_recNavButtons[init_i1].lv_diButton = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_diTeamDisplay = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dAvatarDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diAvatarsNextPageButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diAvatarsPreviousPageButton = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diTeamNewbButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 100; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTeamSelectionButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 100; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTeamSelectionIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 100; init_i1 += 1) {
        libPEEP_gv_recUI.lv_diTeamSelectionLabels[init_i1] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diTeamJoinConfirmationLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTeamJoinYes = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diTeamJoinNo = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diPurchaseConfirmationLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diPurchaseYes = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diPurchaseNo = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diRacePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diLeaguePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dOptionsDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_dOptionsPersonalDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diOptionsDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diPersonalOptionsDialogX = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingMatchModePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingColorSchemePulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingMatchModeLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingPlayerSelectModeLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingColorSchemeLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingDisableBlingLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingDisableCheckboxLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingDisablePingsCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingDisablePingsLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingAllowChatLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingAllowCooperativeLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingEndMatchLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingDisableZoomCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diVotingDisableZoomLabel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionHideObserverChat = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionShowLogInChatCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionHideMatchPlayerChat = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionShowFloatingIcons = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionSilentChat = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionHideNamePanel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionAdvancedAvatarSelection = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diHideFairMessageLogCheckbox = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_dObserverDialog = c_invalidDialogId;
    libPEEP_gv_recUI.lv_diObserverVisionPulldown = c_invalidDialogControlId;
    libPEEP_gv_recUI.lv_diAutoCamCheckbox = c_invalidDialogControlId;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    //if (carry>0){
        //debug("This bigint is not suited for negative numbers!");
    //}
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    //debug(out);
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    if (carry>0){
        //debug("Left: "+IntToString(carry));
    }
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    //debug(IntToString(carry));
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: READ ME
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
//
//    
//    SC2Mapster.com
//    http://forums.sc2mapster.com/development/galaxy-scripting-and-trigger-lib/5091-library-starcode-v1-3/
//    Credits to vjeux
//
//
//  DOCUMENTATION:
//
//  Before you start using STARCODE you should know a couple of things:
//
//    1) STARCODE is still somewhat experimental. There could very well be bugs 
//       or glitches left in the system. During my tests I have fixed everything
//       I noticed, but that is no guarantee that it's always work under every 
//       circumstances. The system is rather messy too.
//       I haven't noticed any lags during my tests, but I believe that it could be
//       quite a bit faster with optimized functions.
//       Not my problem, at the moment.
//
//    2) I have tested STARCODE with dozens of integer values and generated codes of
//       up to 100 digits length without problems. After that, however, the system 
//       often hits StarCraft II's execution limit. Since I cannot disable this limit
//       you should try not to make codes longer than 100 digits.
//       You can, however, just create several codes with 100 digits length each.
//
//    3) The generated code length can change, even if you haven't added or removed any
//       integers. 
//       That is because the closer an integer's value is to it's maximum value, the more
//       space it needs in the code.
//       So to get the maximum code length you have to set all stored integer's values to
//       their respective maximum values.
//       Keep this in mind when you are storing your codes in a bank.
//       When the codes' length is already close to the maximum size of the bank, you should
//       check whether the code can possibly exceed the bank size.
//
//    4) There is a public function called Set Encryption Alphabet.
//       You should leave this function alone, unless you have a good reason to use it and know
//       what you are doing.
//       One reason could be to remove some characters from the alphabet so that they
//       won't be used in the code anymore.
//       The default alphabet is:
//
//       "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&/()=?,.-;:_^#+*' @{[]}|>"
//
//       You can add and remove characters as you like. However, you should always keep the first
//       ten characters (all numbers) at it's place, or some functions might return strange
//       results.
//       Also note that I have excluded "<" and "\" from the alphabet.
//       "\" is an escape characters so it's of no use to us.
//       "<" could be potentially dangerous. If you want to display your code and there happens
//       to be a sequence such as "<abc>" in there, StarCraft II will recongize this as a tag
//       and not display it. Thus you would get wrong results. I left ">" in because it won't
//       cause any harm on it's own.
//
//
//  Ok, I think I have mentioned everything. 
//  You can take a look at the Example Usage trigger to see how STARCODE can be used.
//
//  
//
// ~ s3rius
//

void libPEEP_InitCustomScript () {
}

// Presets
// Functions
void libPEEP_gf_SetPlayerRole (int lp_player, int lp_role) {
    // Automatic Variable Declarations
    // Implementation
}

void libPEEP_gf_SetPeepMode (int lp_mode, bool lp_autodetectpoint) {
    // Variable Declarations
    point lv_laapatsgmnetwncb;

    // Automatic Variable Declarations
    playergroup auto54205276_g;
    int auto54205276_var;

    // Variable Initialization

    // Implementation
    if ((lp_autodetectpoint == true)) {
        auto54205276_g = PlayerGroupAll();
        auto54205276_var = -1;
        while (true) {
            auto54205276_var = PlayerGroupNextPlayer(auto54205276_g, auto54205276_var);
            if (auto54205276_var < 0) { break; }
            lv_laapatsgmnetwncb = PlayerStartLocation(auto54205276_var);
            if ((lv_laapatsgmnetwncb != null)) {
                libPEEP_gf_SetPeepModePoint(auto54205276_var, 1, lv_laapatsgmnetwncb, lv_laapatsgmnetwncb, lv_laapatsgmnetwncb, lv_laapatsgmnetwncb);
            }
            else {
                break;
            }
        }
    }

}

void libPEEP_gf_SetPeepModeSettings (text lp_name, int lp_maxXCoordinate, int lp_overlayWidth, int lp_overlayHeight, int lp_spawnStyle) {
    // Variable Declarations
    int lv_nnsqspchushwfosm;

    // Automatic Variable Declarations
    int autoA9B36A44_val;

    // Variable Initialization

    // Implementation
    autoA9B36A44_val = lp_spawnStyle;
    if (autoA9B36A44_val == libPEEP_ge_MapSpawnType_Random) {
    }
    else if (autoA9B36A44_val == libPEEP_ge_MapSpawnType_noclosebyground) {
    }
    else if (autoA9B36A44_val == libPEEP_ge_MapSpawnType_crossmap) {
    }
    else {
    }
}

void libPEEP_gf_SetPeepModePoint (int lp_player, int lp_index, point lp_startingPoint, point lp_basePoint, point lp_welcomePoint, point lp_naturalPoint) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

    if (true) {
    }

}

void libPEEP_gf_SetPeepModeFaceOffPoint (int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libPEEP_gf_SetPeepModeMatchModeOrder (int lp_matchMode, int lp_orderList) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
    }

}

void libPEEP_gf_StarcodeStartCode () {
    // Automatic Variable Declarations
    // Implementation
        STARCODE_CurrentCode = "0";
}

void libPEEP_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue) {
    // Automatic Variable Declarations
    // Implementation
    if(lp_value<lp_maximumValue+1){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}

void libPEEP_gf_StarcodeSetCode (string lp_code) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_CurrentCode=lp_code;
}

void libPEEP_gf_StarcodeSetEncryptionAlphabet (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}

string libPEEP_gf_StarcodeGetCode () {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_CurrentCode;
}

int libPEEP_gf_StarcodeGetIntegerValue (int lp_maximumValue) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return lv_i;
}

string libPEEP_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}

string libPEEP_gf_StarcodeCompressString (string lp_toCompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
}

string libPEEP_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}

string libPEEP_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}

bool libPEEP_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}

string libPEEP_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}

string libPEEP_gf_StarcodeDecompressString (string lp_toDecompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

void libPEEP_gf_InitializeGlobals () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libPEEP_gf_MapInit();
    libPEEP_gf_InitializeUnitData();
    libPEEP_gf_InitializePets();
    libPEEP_gf_InitializeStore();
    libPEEP_gf_InitializeResearch();
    libPEEP_gf_InitializeStructures();
    libPEEP_gf_InitializeHelp();
    libPEEP_gf_InitializePranks();
    libPEEP_gf_InitializeNamePanelImages();
    libPEEP_gf_InitializeColorSchemes();
    libPEEP_gf_InitializeAutoCamStyles();
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "SupplyDepotLowered";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "RichMineralField";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "RichMineralField750";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "VespeneGeyser";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "ProtossVespeneGeyser";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "SpacePlatformGeyser";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRock4x4";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRockEx14x4";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "MineralField";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "MineralField750";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRock6x6";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRockEx16x6";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "MengskStatueAlone";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "WolfStatue";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "MengskStatue";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleStreetlight";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleTrafficSignal";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "TrafficSignal";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRampDiagonalHugeBLUR";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRockEx1DiagonalHugeBLUR";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRampDiagonalHugeULBR";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRockEx1DiagonalHugeULBR";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleDebrisRampDiagonalHugeULBR";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleDebrisRampDiagonalHugeULBR";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleDebrisRampDiagonalHugeBLUR";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleDebris6x6";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleCityDebris6x6";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "RichVespeneGeyser";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "UnbuildableRocksDestructible";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "UnbuildablePlatesDestructible";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "UnbuildableBricksDestructible";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "CollapsibleRockTowerDiagonal";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleIce6x6";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "CollapsibleRockTowerRampRight";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "CollapsibleRockTowerDiagonal";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "CollapsibleRockTowerPushUnit";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "DestructibleRampHorizontalHuge";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "PurifierMineralField";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "PurifierMineralField750";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "LabMineralField";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "LabMineralField750";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "PurifierRichMineralField";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "PurifierRichMineralField750";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "PurifierVespeneGeyser";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "ShakurasVespeneGeyser";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intIndex] = "MineralField450";
    libPEEP_gv_recGlobals.lv_intNumMapUnitTypes = lv_intIndex;
    libPEEP_gf_InitializeMapUnits();
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtBaseLocations[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_9B76D1FB");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtBaseLocations[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_3EBCB2F1");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtBaseLocations[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_FA044C08");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtBaseLocations[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_9237E93B");
    libPEEP_gv_recGlobals.lv_intNumPlayerSelectModes = 6;
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[1].lv_txtName = StringExternal("Param/Value/lib_PEEP_74A615D9");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[1].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D9E378FD");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[2].lv_txtName = StringExternal("Param/Value/lib_PEEP_309234F6");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[2].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7530D78F");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[3].lv_txtName = StringExternal("Param/Value/lib_PEEP_86E39AEF");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[3].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_546D1AB2");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[4].lv_txtName = StringExternal("Param/Value/lib_PEEP_CFDDDB64");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[4].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D4644A6C");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[5].lv_txtName = StringExternal("Param/Value/lib_PEEP_828B54C7");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[5].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8CC31C12");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[6].lv_txtName = StringExternal("Param/Value/lib_PEEP_DDBD6BE4");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[6].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_52444C5C");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[7].lv_txtName = StringExternal("Param/Value/lib_PEEP_FBE60BD1");
    libPEEP_gv_recGlobals.lv_recPlayerSelectModes[7].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D3F4B504");
    libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[1] = 4;
    libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[2] = 2;
    libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[3] = 1;
    libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[4] = 5;
    libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[5] = 3;
    libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[6] = 6;
    libPEEP_gv_recGlobals.lv_txtRaceNames[1] = StringExternal("Param/Value/lib_PEEP_5665B79B");
    libPEEP_gv_recGlobals.lv_txtRaceNames[2] = StringExternal("Param/Value/lib_PEEP_FC1D5B5D");
    libPEEP_gv_recGlobals.lv_txtRaceNames[3] = StringExternal("Param/Value/lib_PEEP_57A4EC68");
    libPEEP_gv_recGlobals.lv_txtRaceNames[4] = StringExternal("Param/Value/lib_PEEP_AD7B38D1");
    libPEEP_gv_recGlobals.lv_txtRaceNames[5] = StringExternal("Param/Value/lib_PEEP_D32F1C66");
    libPEEP_gv_recGlobals.lv_txtRaceNames[6] = StringExternal("Param/Value/lib_PEEP_121FED53");
    libPEEP_gv_recGlobals.lv_txtRaceNames[7] = StringExternal("Param/Value/lib_PEEP_B40672C5");
    libPEEP_gv_recGlobals.lv_txtRaceNames[8] = StringExternal("Param/Value/lib_PEEP_67443586");
    libPEEP_gv_recGlobals.lv_txtRaceNames[9] = StringExternal("Param/Value/lib_PEEP_06F687EF");
    libPEEP_gv_recGlobals.lv_txtRaceNames[10] = StringExternal("Param/Value/lib_PEEP_DFA437EE");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[1] = StringExternal("Param/Value/lib_PEEP_F9C5CFA8");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[2] = StringExternal("Param/Value/lib_PEEP_EB994C99");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[3] = StringExternal("Param/Value/lib_PEEP_1838409D");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[4] = StringExternal("Param/Value/lib_PEEP_15CC8D6A");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[5] = StringExternal("Param/Value/lib_PEEP_427040DB");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[6] = StringExternal("Param/Value/lib_PEEP_EB625108");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[7] = StringExternal("Param/Value/lib_PEEP_73A9BC16");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[8] = StringExternal("Param/Value/lib_PEEP_5FC43147");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[9] = StringExternal("Param/Value/lib_PEEP_F2604FEE");
    libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[10] = StringExternal("Param/Value/lib_PEEP_61C60E06");
    libPEEP_gv_recGlobals.lv_txtMatchModeNames[1] = StringExternal("Param/Value/lib_PEEP_4D36955C");
    libPEEP_gv_recGlobals.lv_txtMatchModeNames[2] = StringExternal("Param/Value/lib_PEEP_3019622F");
    libPEEP_gv_recGlobals.lv_txtMatchModeNames[3] = StringExternal("Param/Value/lib_PEEP_53258C84");
    libPEEP_gv_recGlobals.lv_txtMatchModeNames[4] = StringExternal("Param/Value/lib_PEEP_C7D5FF0A");
    libPEEP_gv_recGlobals.lv_txtMatchModeNames[5] = StringExternal("Param/Value/lib_PEEP_896C4CB0");
    libPEEP_gv_recGlobals.lv_txtMatchModeNames[6] = StringExternal("Param/Value/lib_PEEP_329C3014");
    libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[1] = 1;
    libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[2] = 2;
    libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[3] = 1;
    libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[4] = 2;
    libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[5] = 2;
    libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[6] = 1;
    libPEEP_gv_recGlobals.lv_utFaceoffAnchorTypes[1] = "Beacon_ProtossSmall";
    libPEEP_gv_recGlobals.lv_intNumNamePanelPositionNames = 3;
    libPEEP_gv_recGlobals.lv_txtNamePanelPositionNames[1] = StringExternal("Param/Value/lib_PEEP_0FC1E5AD");
    libPEEP_gv_recGlobals.lv_txtNamePanelPositionNames[2] = StringExternal("Param/Value/lib_PEEP_360B6170");
    libPEEP_gv_recGlobals.lv_txtNamePanelPositionNames[3] = StringExternal("Param/Value/lib_PEEP_9431E692");
    libPEEP_gv_recGlobals.lv_intNamePanelPositionOffsets[1] = -35;
    libPEEP_gv_recGlobals.lv_intNamePanelPositionOffsets[2] = -20;
    libPEEP_gv_recGlobals.lv_intNamePanelPositionOffsets[3] = 0;
    libPEEP_gv_recGlobals.lv_intNumNamePanelColorStyleNames = 2;
    libPEEP_gv_recGlobals.lv_txtNamePanelColorStyleNames[1] = StringExternal("Param/Value/lib_PEEP_48687147");
    libPEEP_gv_recGlobals.lv_txtNamePanelColorStyleNames[2] = StringExternal("Param/Value/lib_PEEP_F86C774E");
    libPEEP_gv_recGlobals.lv_intNumNamePanelMessageStyleNames = 5;
    libPEEP_gv_recGlobals.lv_txtNamePanelMessageStyleNames[1] = StringExternal("Param/Value/lib_PEEP_7562AA23");
    libPEEP_gv_recGlobals.lv_txtNamePanelMessageStyleNames[2] = StringExternal("Param/Value/lib_PEEP_EF0923EC");
    libPEEP_gv_recGlobals.lv_txtNamePanelMessageStyleNames[3] = StringExternal("Param/Value/lib_PEEP_5CF5C6F6");
    libPEEP_gv_recGlobals.lv_txtNamePanelMessageStyleNames[4] = StringExternal("Param/Value/lib_PEEP_C5879E75");
    libPEEP_gv_recGlobals.lv_txtNamePanelMessageStyleNames[5] = StringExternal("Param/Value/lib_PEEP_0987EBD7");
    libPEEP_gv_recGlobals.lv_imgNamePanelMatchModeImageList[1] = "Assets\\Textures\\namepanel_title_vs.dds";
    libPEEP_gv_recGlobals.lv_imgNamePanelMatchModeImageList[2] = "Assets\\Textures\\namepanel_title_vs.dds";
    libPEEP_gv_recGlobals.lv_imgNamePanelMatchModeImageList[3] = "Assets\\Textures\\namepanel_title_ffa.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][1] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_random_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][2] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][3] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][4] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][5] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][6] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][7] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][8] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][9] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][10] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_l.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][1] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_random_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][2] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][3] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][4] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][5] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][6] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][7] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][8] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][9] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_r.dds";
    libPEEP_gv_recGlobals.lv_imageLoadingVsImages[2][10] = "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_r.dds";
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[1] = StringExternal("Param/Value/lib_PEEP_641EE355");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[2] = StringExternal("Param/Value/lib_PEEP_AB29223A");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[3] = StringExternal("Param/Value/lib_PEEP_35D9EECC");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[4] = StringExternal("Param/Value/lib_PEEP_F2585D63");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[5] = StringExternal("Param/Value/lib_PEEP_AC2A0B22");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[6] = StringExternal("Param/Value/lib_PEEP_586A68EA");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[7] = StringExternal("Param/Value/lib_PEEP_038A8D22");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[8] = StringExternal("Param/Value/lib_PEEP_03755257");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[9] = StringExternal("Param/Value/lib_PEEP_2896C7FD");
    libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[10] = StringExternal("Param/Value/lib_PEEP_3381C891");
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[2] = "Assets\\Textures\\namepanel_race_terran.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[3] = "Assets\\Textures\\namepanel_race_zerg.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[4] = "Assets\\Textures\\namepanel_race_protoss.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[5] = "Assets\\Textures\\icon-1v1-genetron.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[6] = "Assets\\Textures\\icon-1v1-xayid.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[7] = "Assets\\Textures\\icon-1v1-keiron.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[8] = "Assets\\Textures\\icon-1v1-ued.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[9] = "Assets\\Textures\\icon-1v1-dragon.dds";
    libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[10] = "assets\\UI\\Hybrid\\icon-1v1-hybrid.dds";
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[2] = StringExternal("Param/Value/lib_PEEP_FA8C1803");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[3] = StringExternal("Param/Value/lib_PEEP_7C1B53BA");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[4] = StringExternal("Param/Value/lib_PEEP_BC01A45E");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[5] = StringExternal("Param/Value/lib_PEEP_ADDF39D8");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[6] = StringExternal("Param/Value/lib_PEEP_F174FF50");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[7] = StringExternal("Param/Value/lib_PEEP_EB36DCBA");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[8] = StringExternal("Param/Value/lib_PEEP_7C47AE18");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[9] = StringExternal("Param/Value/lib_PEEP_C8E5C53A");
    libPEEP_gv_recGlobals.lv_txtRaceSupplyIconImageNames[10] = StringExternal("Param/Value/lib_PEEP_0A17439D");
    libPEEP_gv_recGlobals.lv_txtLogClasses[1] = StringExternal("Param/Value/lib_PEEP_D4EBA2FE");
    libPEEP_gv_recGlobals.lv_txtLogClasses[2] = StringExternal("Param/Value/lib_PEEP_248D8F76");
    libPEEP_gv_recGlobals.lv_txtLogClasses[3] = StringExternal("Param/Value/lib_PEEP_7399B65C");
    libPEEP_gv_recGlobals.lv_txtLogClasses[4] = StringExternal("Param/Value/lib_PEEP_168C4A2D");
    libPEEP_gv_recGlobals.lv_txtLogClasses[5] = StringExternal("Param/Value/lib_PEEP_4FFE5337");
    libPEEP_gv_recGlobals.lv_txtLogClasses[6] = StringExternal("Param/Value/lib_PEEP_FBBDBC18");
    libPEEP_gv_recGlobals.lv_txtLogClasses[7] = StringExternal("Param/Value/lib_PEEP_7B37E68E");
    libPEEP_gv_recGlobals.lv_txtLogClasses[8] = StringExternal("Param/Value/lib_PEEP_44E39916");
    libPEEP_gv_recGlobals.lv_txtLogClasses[9] = StringExternal("Param/Value/lib_PEEP_6AD5DE44");
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[1] = true;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[2] = false;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[3] = false;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[4] = false;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[5] = true;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[6] = true;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[7] = false;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[8] = true;
    libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[9] = true;
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[1] = StringExternal("Param/Value/lib_PEEP_D2D8101C");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[2] = StringExternal("Param/Value/lib_PEEP_35825B3C");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[3] = StringExternal("Param/Value/lib_PEEP_9A65FAEF");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[4] = StringExternal("Param/Value/lib_PEEP_83F2894B");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[5] = StringExternal("Param/Value/lib_PEEP_ABB6C918");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[6] = StringExternal("Param/Value/lib_PEEP_79C1EF3B");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[7] = StringExternal("Param/Value/lib_PEEP_95AC3B31");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[8] = StringExternal("Param/Value/lib_PEEP_EF84F21C");
    libPEEP_gv_recGlobals.lv_txtLogClassTooltips[9] = StringExternal("Param/Value/lib_PEEP_48744687");
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[1] = Color(76.86, 94.12, 100.00);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[2] = Color(149*100/255,150*100/255,151*100/255);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[3] = Color(149*100/255,150*100/255,151*100/255);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[4] = Color(149*100/255,150*100/255,151*100/255);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[5] = Color(100,100,100);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[6] = Color(61.57, 100.00, 61.57);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[7] = Color(69.41, 66.27, 53.73);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[8] = Color(100.00, 96.47, 71.76);
    libPEEP_gv_recGlobals.lv_coLogClassTextColor[9] = Color(100.00, 41.96, 39.61);
    libPEEP_gv_recGlobals.lv_realCamEventCooldowns[1] = 2.5;
    libPEEP_gv_recGlobals.lv_realCamEventCooldowns[2] = 4.0;
    libPEEP_gv_recGlobals.lv_realCamEventCooldowns[3] = 5.0;
    libPEEP_gv_recGlobals.lv_realCamEventCooldowns[4] = 5.0;
    libPEEP_gv_recGlobals.lv_realCamEventCooldowns[5] = 2.5;
    libPEEP_gv_recGlobals.lv_recLeagues[1].lv_txtName = StringExternal("Param/Value/lib_PEEP_83C795A2");
    libPEEP_gv_recGlobals.lv_recLeagues[1].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_1BA5659D");
    libPEEP_gv_recGlobals.lv_recLeagues[2].lv_txtName = StringExternal("Param/Value/lib_PEEP_9ACBDB6B");
    libPEEP_gv_recGlobals.lv_recLeagues[2].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_2773B6B2");
    libPEEP_gv_recGlobals.lv_recLeagues[3].lv_txtName = StringExternal("Param/Value/lib_PEEP_2679EA8A");
    libPEEP_gv_recGlobals.lv_recLeagues[3].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_7D29A169");
    libPEEP_gv_recGlobals.lv_recLeagues[4].lv_txtName = StringExternal("Param/Value/lib_PEEP_03F02311");
    libPEEP_gv_recGlobals.lv_recLeagues[4].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_11D21F78");
    libPEEP_gv_recGlobals.lv_recLeagues[5].lv_txtName = StringExternal("Param/Value/lib_PEEP_32D7B95F");
    libPEEP_gv_recGlobals.lv_recLeagues[5].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_B97BD6D2");
    libPEEP_gv_recGlobals.lv_recLeagues[6].lv_txtName = StringExternal("Param/Value/lib_PEEP_2099C1DC");
    libPEEP_gv_recGlobals.lv_recLeagues[6].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_3248F6FF");
    libPEEP_gv_recGlobals.lv_recLeagues[7].lv_txtName = StringExternal("Param/Value/lib_PEEP_D89CAB59");
    libPEEP_gv_recGlobals.lv_recLeagues[7].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_F677BCB8");
    libPEEP_gv_recGlobals.lv_recLeagues[8].lv_txtName = StringExternal("Param/Value/lib_PEEP_D3403405");
    libPEEP_gv_recGlobals.lv_recLeagues[8].lv_txtImageIconName = StringExternal("Param/Value/lib_PEEP_3F78977C");
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_B545307A");
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_DBBE88FC") + TextWithColor(StringExternal("Param/Value/lib_PEEP_D2284E52"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_B23596E8"));
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_30529FC7");
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_D1BC23BC") + TextWithColor(StringExternal("Param/Value/lib_PEEP_B09BF094"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_E3D8402D"));
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_F778B432");
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_7C0EB96B") + TextWithColor(StringExternal("Param/Value/lib_PEEP_7944605A"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_D192BEF7"));
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_AA374B21");
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_3C5A4C8C"));
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_26BA2875");
    libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_133E371D"));
    libPEEP_gv_recGlobals.lv_intNumOptionTabs = lv_intIndex;
}

void libPEEP_gf_InitializeUnitData () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Archon";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Armory";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Assimilator";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "AutoTurret";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "EngineeringBay";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "EvolutionChamber";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Extractor";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Immortal";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "InfestationPit";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Infestor";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Observer";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Overlord";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Overseer";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "Ultralisk";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "UltraliskCavern";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "SCV";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex] = "OrbitalCommand";
    libPEEP_gv_recGlobals.lv_intNumUnitTypesStartingWithVowel = lv_intIndex;
    lv_intIndex = 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "CreepTumor";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "AutoTurret";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "BanelingCocoon";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "Broodling";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "BroodlingEscort";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "Egg";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "InfestorTerran";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "InfestorTerranBurrowed";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "Interceptor";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "Larva";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "PointDefenseDrone";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "MULE";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "InfestedTerransEgg";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "AcidNest";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "VolatileDischarge";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "Emanator";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "CloakCharge";
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex] = "ShockCharge";
    libPEEP_gv_recGlobals.lv_intNumIgnoreUnits = lv_intIndex;
    lv_intIndex = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "CommandCenter";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Hatchery";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Nexus";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "ProcessingCore";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "ScavengerNest";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Citadel";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "OperationHeadquarters";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "DenizenoftheDeep";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "NHbrTemple";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "SCV";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Drone";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Probe";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "ACR";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Scavenger";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Converter";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Salvager";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Plodder";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "NHbrMinion";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Refinery";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Extractor";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Assimilator";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Formulator";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Siphoner";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "FilteringPlant";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "NHbrHarvester";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "VespenePurificationPlant";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Coagulater";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 2;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "SupplyDepot";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Overlord";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Pylon";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "ProcessingNode";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "FeedingPool";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Reliquary";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Arsenal";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Razorback";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "NHbrIonicCrystal";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 3;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "SpineCrawler";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "SporeCrawler";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "PhotonCannon";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "MissileTurret";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "Bunker";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "SensorTower";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "NHbrConstruct@AntiGround";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "MissileTower";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType = "BilePit";
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass = 4;
    libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath = true;
    libPEEP_gv_recGlobals.lv_intNumUnits = lv_intIndex;
}

void libPEEP_gf_InitializeMapUnits () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intTypeNum;

    // Automatic Variable Declarations
    int autoB2D3F948_ae;
    const int autoB2D3F948_ai = 1;
    unitgroup auto272FC0EE_g;
    int auto272FC0EE_u;
    unit auto272FC0EE_var;

    // Variable Initialization

    // Implementation
    autoB2D3F948_ae = libPEEP_gv_recGlobals.lv_intNumMapUnitTypes;
    lv_intTypeNum = 1;
    for ( ; ( (autoB2D3F948_ai >= 0 && lv_intTypeNum <= autoB2D3F948_ae) || (autoB2D3F948_ai < 0 && lv_intTypeNum >= autoB2D3F948_ae) ) ; lv_intTypeNum += autoB2D3F948_ai ) {
        lv_intIndex = 0;
        auto272FC0EE_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto272FC0EE_u = UnitGroupCount(auto272FC0EE_g, c_unitCountAll);
        for (;; auto272FC0EE_u -= 1) {
            auto272FC0EE_var = UnitGroupUnitFromEnd(auto272FC0EE_g, auto272FC0EE_u);
            if (auto272FC0EE_var == null) { break; }
            if ((UnitGetType(auto272FC0EE_var) == libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intTypeNum])) {
                lv_intIndex += 1;
                libPEEP_gv_recGlobals.lv_pMapUnitPositionList[lv_intTypeNum][lv_intIndex] = UnitGetPosition(auto272FC0EE_var);
                libPEEP_gv_recGlobals.lv_realMapUnitAngleList[lv_intTypeNum][lv_intIndex] = UnitGetFacing(auto272FC0EE_var);
            }

        }
        libPEEP_gv_recGlobals.lv_intMapUnitPositionCounts[lv_intTypeNum] = lv_intIndex;
    }
}

void libPEEP_gf_InitializeHelp () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_58EAE3AD");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 0.2;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_75980A40");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_163CFB64");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_97BF753D");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 4.0;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_868293A4");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_70AB4448");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[3] = StringExternal("Param/Value/lib_PEEP_B9734EBB");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[4] = StringExternal("Param/Value/lib_PEEP_9CBE5888");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[5] = StringExternal("Param/Value/lib_PEEP_6F55D37C");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[6] = StringExternal("Param/Value/lib_PEEP_32EF5E54");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_8C5F7C4D");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 1.1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_0B780268");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_63F10552");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_ED2AEC59");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 2.2;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_029333D4");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_3BDCCCD1");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_CA9F0A1D");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 4.9;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_C82F48D8");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_ABA4AC7A");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[3] = StringExternal("Param/Value/lib_PEEP_1FF5565F");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[4] = StringExternal("Param/Value/lib_PEEP_6ED9DA89");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_A1996F9A");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 0.65;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_9A715151");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = (StringExternal("Param/Value/lib_PEEP_402F3C9E") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recGlobals.lv_intNumLogItemsToSave) + StringExternal("Param/Value/lib_PEEP_16D4648B"));
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_70A888F8");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 2.5;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_4D928AAE");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_8FA0D24E");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[3] = StringExternal("Param/Value/lib_PEEP_8858EEA1");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[4] = StringExternal("Param/Value/lib_PEEP_C753780C");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_5D884431");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 0.7;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_5A3219CF");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_FEBF062F");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 2.0;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_C07F9B53");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_08D2334C");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 0.0001;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_3D8250A8");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_C9568E06");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 3.0;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_C3896396");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_D043D237");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_E8F06B50");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 1.4;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_ACE18F8E");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[2] = StringExternal("Param/Value/lib_PEEP_6131C60E");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[3] = StringExternal("Param/Value/lib_PEEP_2211E799");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle = StringExternal("Param/Value/lib_PEEP_799C6756");
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_realHeightMultiplier = 1.0;
    libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtContent[1] = StringExternal("Param/Value/lib_PEEP_356C0AE8");
    libPEEP_gv_recGlobals.lv_intNumHelpTopics = lv_intIndex;
}

void libPEEP_gf_InitializePranks () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_77B4F242");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D0067B1F");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_140C7C27");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_CE46BC35");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_F2378DF5");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_02A7F75F");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_4EB386EC");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4E206FC7");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_91A08F36");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_9928F418");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_033237AF");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_64DA3619");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_D8674CEB");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A32258E6");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_EE725EC5");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_46C22292");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_A7C5BA38");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C672D6FF");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_6C4017F2");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_3832BAB4");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_06B1BFDF");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_88BB3833");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    lv_intIndex += 1;
    libPEEP_gv_recPranks[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_2E924D41");
    libPEEP_gv_recPranks[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_11BC5FCC");
    libPEEP_gv_recPranks[lv_intIndex].lv_imgIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    libPEEP_gv_recGlobals.lv_intNumPranks = lv_intIndex;
}

void libPEEP_gf_InitializeNamePanelImages () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_imgImage = "Assets\\Textures\\peepmode_logo_medium.dds";
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWeighting = 35;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWidth = 61;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intHeight = 56;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_imgImage = "Assets\\Textures\\reddit_alien.dds";
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWeighting = 15;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWidth = 68;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intHeight = 56;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_imgImage = "Assets\\Textures\\teamliquid_horse.dds";
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWeighting = 5;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWidth = 52;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intHeight = 52;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_imgImage = "Assets\\Textures\\mlg_logo.dds";
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWeighting = 10;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWidth = 60;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intHeight = 60;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_imgImage = "Assets\\Textures\\gsl_logo.dds";
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWeighting = 10;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWidth = 60;
    libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intHeight = 60;
    libPEEP_gv_recGlobals.lv_intNumNamePanelImages = lv_intIndex;
}

void libPEEP_gf_InitializeColorSchemes () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_2200FE51");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_55DF97CC");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][1] = 1;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][2] = 15;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][1] = 2;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][2] = 3;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_1ACADC32");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_EE9140C6");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][1] = 1;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][2] = 15;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][1] = 7;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][2] = 13;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_AEA38960");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_21230B53");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][1] = 0;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][2] = 5;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][1] = 14;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][2] = 12;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_3902473C");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_CC2370C5");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][1] = 6;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[1][2] = 5;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][1] = 4;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_pcPlayerColors[2][2] = 9;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_A167196F");
    libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_FA104467");
    libPEEP_gv_recGlobals.lv_intNumColorSchemes = lv_intIndex;
}

void libPEEP_gf_InitializeAutoCamStyles () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_CB1F44F3");
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_70C675B5");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_825B0BDE");
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_66E38FAF");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_7E50EB35");
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_AD11F412");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_B84FFA35");
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DE4EC15C");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_28ECE0C9");
    libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_654119BF");
    libPEEP_gv_recGlobals.lv_intNumAutoCamStyles = lv_intIndex;
}

void libPEEP_gf_GameInitBeforeTutorial () {
    // Variable Declarations
    int lv_intPlayer;
    bool lv_boolNewPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, true);
    if ((libPEEP_gv_peepMode == libPEEP_ge_PeepModeGameStyle_Democratic)) {
        libPEEP_gv_recGameState.lv_intGameStyle = 1;
    }
    else {
        libPEEP_gv_recGameState.lv_intGameStyle = 2;
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 50.0, false);
    GameSetSpeedLocked(true);
    libPEEP_gf_StartInitScreen();
    libPEEP_gf_InitializeGlobals();
    libPEEP_gf_InitializeTeams();
    libPEEP_gf_InitializePlayers();
    libPEEP_gf_InitializeUI();
    libPEEP_gf_RefreshAllVoting();
    libPEEP_gf_CreateFaceoff();
    libPEEP_gf_LoadAllPlayerBanks();
    libPEEP_gf_GameInitAfterTutorial();
}

void libPEEP_gf_GameInitAfterTutorial () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoE1801E80_ae;
    const int autoE1801E80_ai = 1;
    int auto4A316A5B_ae;
    const int auto4A316A5B_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gf_EndInitScreen();
    libPEEP_gf_InitializeFaceoff();
    autoE1801E80_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoE1801E80_ai >= 0 && lv_intPlayer <= autoE1801E80_ae) || (autoE1801E80_ai < 0 && lv_intPlayer >= autoE1801E80_ae) ) ; lv_intPlayer += autoE1801E80_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            libPEEP_gf_UIInitialConfigforPlayer(lv_intPlayer);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankGamesJoined += 1;
            libPEEP_gf_RefreshLeaderboardforPlayer(lv_intPlayer, 2, false);
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankGamesJoined > libPEEP_gv_recGlobals.lv_intMaxWins)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankGamesJoined = libPEEP_gv_recGlobals.lv_intMaxWins;
            }

            libPEEP_gf_RefreshMatchLogDialogforPlayer(lv_intPlayer);
            libPEEP_gf_RefreshBettingPayoutsForPlayer(lv_intPlayer, false);
            libPEEP_gf_RefreshStoreDialogforPlayer(lv_intPlayer);
            libPEEP_gf_RefreshPetUIforPlayer(lv_intPlayer);
            libPEEP_gf_RefreshTurfMarkerUIforPlayer(lv_intPlayer);
            libPEEP_gf_RefreshTurfSymbolUIforPlayer(lv_intPlayer);
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true)) {
                libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_9DE65DB4"), lv_intPlayer, false, false);
            }

            Wait(0.1, c_timeGame);
        }

    }
    libPEEP_gv_recGameState.lv_boolGameInitComplete = true;
    auto4A316A5B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto4A316A5B_ai >= 0 && lv_intPlayer <= auto4A316A5B_ae) || (auto4A316A5B_ai < 0 && lv_intPlayer >= auto4A316A5B_ae) ) ; lv_intPlayer += auto4A316A5B_ai ) {
        libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intPlayer);
    }
    libPEEP_gf_RefreshFaceoff();
}

void libPEEP_gf_UIInitialConfigforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLeaderboard == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dLeaderboardDialog, PlayerGroupSingle(lp_intPlayer), true);
    }

    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsCommentator == true)) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBlizzUI == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, PlayerGroupSingle(lp_intPlayer), true);
        }
        else {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLogs == true)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dMatchLogDialog, PlayerGroupSingle(lp_intPlayer), true);
            }

        }
    }

}

void libPEEP_gf_MapInit () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libPEEP_gf_SpawnPoints();
    libPEEP_gv_recGameState.lv_intCurrentMatchMode = libPEEP_gv_recGlobals.lv_intMatchModeOrderList[1];
    libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE = libPEEP_gv_recGlobals.lv_intStartingPointGroupSize;
}

void libPEEP_gf_SpawnPoints () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libPEEP_gv_recGlobals.lv_txtMapName = StringExternal("Param/Value/lib_PEEP_262988F1");
    libPEEP_gv_recGlobals.lv_realMapMaxXCoordinate = 160.0;
    libPEEP_gv_recGlobals.lv_intMapOverlayWidth = 654;
    libPEEP_gv_recGlobals.lv_intMapOverlayHeight = 750;
    libPEEP_gv_recGlobals.lv_intMapSpawnStyle = 0;
    libPEEP_gv_recGlobals.lv_intStartingPointGroupSize = 1;
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_pStartingPointGroups[lv_intIndex][1] = PlayerStartLocation(1);
    libPEEP_gv_recGlobals.lv_pBasePointGroups[lv_intIndex][1] = PlayerStartLocation(1);
    libPEEP_gv_recGlobals.lv_pWelcomePointGroups[lv_intIndex][1] = PlayerStartLocation(1);
    libPEEP_gv_recGlobals.lv_pNaturalPointGroups[lv_intIndex][1] = PlayerStartLocation(1);
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_pStartingPointGroups[lv_intIndex][1] = PlayerStartLocation(2);
    libPEEP_gv_recGlobals.lv_pBasePointGroups[lv_intIndex][1] = PlayerStartLocation(2);
    libPEEP_gv_recGlobals.lv_pWelcomePointGroups[lv_intIndex][1] = PlayerStartLocation(2);
    libPEEP_gv_recGlobals.lv_pNaturalPointGroups[lv_intIndex][1] = PlayerStartLocation(2);
    libPEEP_gv_recGlobals.lv_intNumStartingPointGroups = lv_intIndex;
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_pFaceoffPoints[lv_intIndex] = PlayerStartLocation(1);
    libPEEP_gv_recGlobals.lv_boolFaceoffPointGetsBeacon[lv_intIndex] = true;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_pFaceoffPoints[lv_intIndex] = PlayerStartLocation(2);
    libPEEP_gv_recGlobals.lv_boolFaceoffPointGetsBeacon[lv_intIndex] = true;
    libPEEP_gv_recGlobals.lv_intNumFaceoffPoints = lv_intIndex;
    libPEEP_gv_recGlobals.lv_intMaxMatchPlayers = 2;
    libPEEP_gv_recGlobals.lv_intMatchModeOrderList[1] = 1;
    libPEEP_gv_recGlobals.lv_intNumMatchModes = 1;
}

void libPEEP_gf_InitializeResearch () {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gv_recGlobals.lv_txtResearchRowNames[1] = StringExternal("Param/Value/lib_PEEP_7F9DE3CC");
    libPEEP_gv_recGlobals.lv_txtResearchRowNames[2] = StringExternal("Param/Value/lib_PEEP_EC41A0C4");
    libPEEP_gv_recGlobals.lv_txtResearchRowNames[3] = StringExternal("Param/Value/lib_PEEP_062B5284");
    libPEEP_gv_recGlobals.lv_txtResearchRowNames[4] = StringExternal("Param/Value/lib_PEEP_D9DCD031");
    libPEEP_gv_recGlobals.lv_txtResearchRowNames[5] = StringExternal("Param/Value/lib_PEEP_CFDCF3E9");
    libPEEP_gf_InitializeTerranResearch();
    libPEEP_gf_InitializeZergResearch();
    libPEEP_gf_InitializeProtossResearch();
    libPEEP_gf_InitializeGenetronResearch();
    libPEEP_gf_InitializeXayidResearch();
    libPEEP_gf_InitializeKeironResearch();
    libPEEP_gf_InitializeUEDResearch();
    libPEEP_gf_InitializeDragonResearch();
    libPEEP_gf_InitializeHybridsResearch();
}

void libPEEP_gf_InitializeTerranResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 2;
    lv_intRow = 1;
    lv_intCol = 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0CCDCE40");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_99663D05");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranInfantryWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B82E65A1");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C0085819");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranInfantryWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_507D17D4");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_39F3AB19");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranInfantryWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_EFD23728");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A95D791B");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_6679DD8B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_46C72407");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranInfantryArmorsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_03ECE932");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B1F95C8B");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranInfantryArmorsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_5C40E68F");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D1644A11");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranInfantryArmorsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0DE0660E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DF4A4C2E");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7F216C1F");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_AA6CF995");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranVehicleWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E04633B0");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_581C4812");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranVehicleWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E0579A38");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_ACC7CDEE");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranVehicleWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-vehicleweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_4FC66887");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F181F8D2");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C56C144B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_263FD101");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranShipWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_D17E6F09");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F348C313");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranShipWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_6B301593");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4A5E2A44");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranShipWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DBE24B8F");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C91275AD");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipplatinglevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_02D857F5");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_50803E3F");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranVehicleAndShipArmorsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipplatinglevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_765F3022");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_210FF6A0");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranVehicleAndShipArmorsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipplatinglevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2E8A82DF");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7FDACC34");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranVehicleAndShipArmorsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-shipplatinglevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_613FE6C1");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7CEEE211");
    lv_intRow = 2;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "HiSecAutoTracking";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-hisecautotracking.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1B10112A");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_65B0DA09");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "NeosteelFrame";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-neosteelframe.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C3825455");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_82F1AD06");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TerranBuildingArmor";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-buildingarmor.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E8E9C4E2");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_314EE282");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "DurableMaterials";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-durablematerials.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B4207EBC");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_AE672F4D");
    lv_intRow = 3;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ShieldWall";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-techupgrade-terran-combatshield-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_AA9D1CF3");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_359E8F49");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "Stimpack";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-terran-stimpack-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_9C5BB235");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8C2DBB81");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "PunisherGrenades";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-terran-punishergrenade-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2AB26ECA");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0C28CED0");
    lv_intRow = 4;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "HighCapacityBarrels";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-infernalpreigniter.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B8F09E97");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_78FA45A4");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TransformationServos";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-unit-terran-hellionbattlemode.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0E71E761");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_251B70FA");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GhostMoebiusReactor";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-moebiusreactor.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_8ACE3266");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_3CD41212");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "PersonalCloaking";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-terran-cloak-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_CF6F66D9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_49F65637");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "DrillClaws";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-unit-terran-widowmine.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_D7BBC4A1");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_3343324A");
    lv_intRow = 5;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "MedivacCaduceusReactor";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-caduceusreactor.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_BF45F2D9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_BDEF4275");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "RavenCorvidReactor";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_9614C812");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F514A13A");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "BattlecruiserBehemothReactor";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_287E4342");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DD0DC04D");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "BansheeCloak";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-terran-cloak-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_5C67C337");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_579B3DDE");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "HunterSeeker";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-terran-huntermissile-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_CE43F775");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0D2BB287");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "BattlecruiserEnableSpecializations";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-terran-weaponrefit.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_89512AE2");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_307407F0");
}

void libPEEP_gf_InitializeZergResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 3;
    lv_intRow = 1;
    lv_intCol = 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C8D95410");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E855814C");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergMeleeWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_57B83C22");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_150922C5");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergMeleeWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_D1A3D7A9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1869D458");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergMeleeWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-meleeattacks-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_738B1253");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0AA5597D");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2EFB06C3");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A5810E30");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergMissileWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_20503A65");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1AC1EA8B");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergMissileWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_5C3A5CAA");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_CC3CFADE");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergMissileWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_A7B6D436");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_182D193F");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2655C3B9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F5E7CD15");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergGroundArmorsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_74E1481D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B51B857A");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergGroundArmorsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_85A64998");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_40B991E8");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergGroundArmorsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-groundcarapace-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C65A6C60");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_71B23769");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-airattacks-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B56B5BC6");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2223288D");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergFlyerWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-airattacks-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_F22F092D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E50266BB");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergFlyerWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-airattacks-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_A58B3292");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_FB7B05F3");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergFlyerWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-airattacks-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2DE84682");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4F6A1892");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_A7E89CDF");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DE36421B");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergFlyerArmorsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_986FF21B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_31E8A498");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergFlyerArmorsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_FCB6CD08");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F3CB0D30");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ZergFlyerArmorsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-flyercarapace-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DA6A6903");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_3D935AF8");
    lv_intRow = 2;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "overlordspeed";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-pneumatizedcarapace.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_6C79A210");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_18FC64E9");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "overlordtransport";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-ventralsacs.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_53E0A013");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2CDADDDE");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "Burrow";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-zerg-burrow-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_876AF021");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E8497941");
    lv_intRow = 3;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "zerglingmovementspeed";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-metabolicboost.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_3B57D683");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C8B9687A");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "zerglingattackspeed";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-adrenalglands.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_89C1BAE2");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C171A5CA");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GlialReconstitution";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-glialreconstitution.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_8C1B7373");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_515F4ED7");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TunnelingClaws";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-tunnelingclaws.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7BC1D439");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_48BC83C5");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "CentrificalHooks";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-centrifugalhooks.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_9051360F");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_740557F3");
    lv_intRow = 4;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "hydraliskspeed";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-groovedspines.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E80EF842");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DC7E19C3");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "InfestorEnergyUpgrade";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-pathogenglands.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DD6D5842");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_FD0C339A");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "NeuralParasite";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-zerg-neuralparasite-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_BBDC18E4");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_74D6CAA4");
    lv_intRow = 5;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ChitinousPlating";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-chitinousplating.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_406AA78E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1A40A2E9");
}

void libPEEP_gf_InitializeProtossResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 4;
    lv_intRow = 1;
    lv_intCol = 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_93ED12DB");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_095FB079");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossGroundWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1226B7F1");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2E32018A");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossGroundWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7B3A57BB");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4A067786");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossGroundWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_F4534601");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DEF69D48");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2B393994");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_39884234");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossGroundArmorsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C0916FE5");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2730E572");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossGroundArmorsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DFF96A67");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F830926B");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossGroundArmorsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-groundarmorlevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7CE27308");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_9E5808F0");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_577BF8EA");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D686EFB7");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossShieldsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1733568A");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2952B47E");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossShieldsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_8590B903");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_72B28A2E");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossShieldsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_5648E047");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B1CC88B5");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C1BC95F9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_80D38644");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossAirWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1080AC60");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_ED596B69");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossAirWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_496B21B8");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_EF3F96A9");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossAirWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_538BF1A1");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1BC1BE6C");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_32472EB1");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_AF236E5E");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossAirArmorsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_BD100776");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0D144537");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossAirArmorsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7614C909");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8EF63CC0");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossAirArmorsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-airarmorlevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E4ABD1D2");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_68AA07DE");
    lv_intRow = 2;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "WarpGateResearch";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-warpgate.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_315D5F3A");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_06AA79F0");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ObserverGraviticBooster";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-graviticbooster.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C01A3218");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E3FAF61C");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GraviticDrive";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-graviticdrive.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_6A8EB379");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_CCE36FAE");
    lv_intRow = 3;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "Charge";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-protoss-charge-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_9C11E334");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DA3628D7");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "BlinkTech";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-protoss-blink-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_66A4DFEF");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C3EEFD38");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "haltech";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-protoss-hallucination-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_282A7647");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_62291BA1");
    lv_intRow = 4;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ExtendedThermalLance";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-extendedthermallance.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_52A90BC3");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0DBB8035");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "PsiStormTech";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_FCA26C49");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A820415B");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "AnionPulseCrystals";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-phoenixrange.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_3EFEB435");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_575C473E");
    lv_intRow = 5;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "CarrierLaunchSpeedUpgrade";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-gravitoncatapult.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1B409201");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_906514A3");
}

void libPEEP_gf_InitializeGenetronResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 5;
    lv_intRow = 1;
    lv_intCol = 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-lightmechweapons-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E4D2DAEA");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_34194C32");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronLightWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-lightmechweapons-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_A3A79C84");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B5422FA0");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronLightWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-lightmechweapons-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_F5304937");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2141E016");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronLightWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-lightmechweapons-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_90806961");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_23C7491B");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-groundmechplating-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_539CCFC6");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_FD2B04A3");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronGroundPlatingLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-groundmechplating-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B29AA23D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F6E572F0");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronGroundPlatingLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-groundmechplating-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_F6A1D79F");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_337905A5");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronGroundPlatingLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-groundmechplating-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1A93CF87");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7707778B");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-heavymechweapons-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_34105BAF");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A3F13B27");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronHeavyWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-heavymechweapons-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_5E713D3B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_64D32A7F");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronHeavyWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-heavymechweapons-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C2CB33D3");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_57D755BD");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronHeavyWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-heavymechweapons-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E4AD6685");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_BF3911A2");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-aircraftplating-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_FD1CE90D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D82397C2");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronAircraftPlatingLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-aircraftplating-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B53647EF");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_6DA15140");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronAircraftPlatingLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-aircraftplating-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DD0963D4");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A3106EDC");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronAircraftPlatingLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-aircraftplating-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_729CA417");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_3C1AA237");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-rocketweapons-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_A7B15777");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B3402FA1");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronAircraftWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-rocketweapons-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B9BB64EB");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_24D41CF7");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronAircraftWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-rocketweapons-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_4D268A89");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DC85F013");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronAircraftWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-rocketweapons-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_4B3B8FB6");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_ED3CD845");
    lv_intRow = 2;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "IntegratedOptics";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-integratedoptics.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_28BF02BB");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B3104B13");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "CloakingGenerator";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-processingdronecloak.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_A2E8F63C");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DB29AF27");
    lv_intRow = 3;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "CalibratedEngines";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-calibratedengines.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E29633B7");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_403FEA9B");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ReinforcedPlating";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-reinforcedplating.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_180F0B28");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_37649D15");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "FirewallShield";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-firewallshield.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_BDF82FBE");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C91F8E5E");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "RefittedNozzles";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-refittednozzles.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_867CAB9F");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_68B48049");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "PhalanxReactor";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-phalanxreactor.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_34284C70");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_46031D84");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "TrackingMunitions";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-tips-terran-penetrator.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_9787827E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_BAA867D2");
    lv_intRow = 4;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "EnhancedTargeting";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-enhancedtargeting.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_3EB3EABE");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_BF5302FA");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "SubterraneanSensors";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-alarak-havoctargetlockbuffed.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_60F14C63");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1FD5BA00");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "SelffixProtocol";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-swann-regenerativebiosteel.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_3F38E359");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C5981055");
    lv_intRow = 5;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "StealthSystems";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-hornerhan-wraith-permanentcloak.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1F8977E9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_620455DB");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "VengeanceMissile";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-genetron-vengeancemissile.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_D84522C3");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_871ECC7F");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ShapedHull";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-shapedhull.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_4EF042FF");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2BFBA4B8");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "AAMDefenseTurret";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-genetron-auxillaryantimissiledefenseturret.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2B5F8BDA");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2EA6A5E5");
}

void libPEEP_gf_InitializeXayidResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 6;
    lv_intRow = 1;
    lv_intCol = 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-missileweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_08B39B49");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_952A6CF2");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidGroundAttacksLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-hotsgroovedspines.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0D441E65");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_61AF2623");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidGroundAttacksLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-missileweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DA9C7E40");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2F2136F9");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidGroundAttacksLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-missileweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_F7FE3CB8");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F966EEB3");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-organiccarapace-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_780208E0");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B4E5E16A");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidGroundCarapaceLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-organiccarapace-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_743B331D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_31B29D83");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidGroundCarapaceLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-organiccarapace-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0CAAA606");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F10B9796");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidGroundCarapaceLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-organiccarapace-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_6397C35E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_6DFABDB8");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-zerg-pneumatizedcarapace.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_AD7F2049");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A8B276CB");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidFlyerCarapaceLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-airarmorlevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C9D18AAE");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8725DD4B");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidFlyerCarapaceLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-airarmorlevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_BF4979D1");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8422089C");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidFlyerCarapaceLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-airarmorlevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0AF3782F");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E93FCAEB");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-airweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_A0925E11");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E66B6FED");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidFlyerAttacksLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-airweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_FC5DEDCA");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_613B4974");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidFlyerAttacksLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-airweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0109162D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E4988EED");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "XayidFlyerAttacksLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-airweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_76465CEF");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_15079C28");
    lv_intRow = 2;
    lv_intLevel = 1;
    lv_intRow = 3;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "OcularAcuity";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-ocularacuity.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_3006D3B9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_9F60DE74");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "PiercingThrust";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-zerg-dehaka-tyrannozor-barrageofspikes.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0AE5E9D6");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DE333120");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ScorpaliskMetabolics";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-scorpaliskmetabolics.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_99215248");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0BE98ED1");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "PersistentSpores";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-xayid-coveringspray.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_9E33E08B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4AB5BBC1");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "CalcifiedHusk";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-calcifiedhusk.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_AEE34CAD");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D28E55D1");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "BileDucts";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-zerg-abathur-corrosivebilelarge.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_CD52871E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7DB8556D");
    lv_intRow = 4;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "BattleFrenzy";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-battlefrenzy.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_D65D64F6");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_3EEA892A");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ResidualAcid";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-residualacid.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0F6B3422");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D38E111D");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProlongedSpores";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-protractivespores.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_8D9B05E0");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_23082364");
    lv_intRow = 5;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "CleavingSpores";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-cleavingspores.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2F818986");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_9F67C62E");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "RefinedExcretion";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-xayid-refinedexcretion.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_75CD402A");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A4100D51");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "VolatileDischarge";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-xayid-volatiledischarge.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_4B7181F0");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_736CA4EA");
}

void libPEEP_gf_InitializeKeironResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 7;
    lv_intRow = 1;
    lv_intCol = 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_8A263FA4");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_664D0361");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironBioWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_AD12DFAE");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_BBEAE3BD");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironBioWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7BE5005C");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4674A961");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironBioWeaponsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0E0DBB1C");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_465A9420");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalarmorlevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_53BE60C9");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_CEDE90CE");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronGroundPlatingLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalarmorlevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E15E44CD");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B9630863");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronGroundPlatingLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalarmorlevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_28193E19");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7421E6DC");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "GenetronGroundPlatingLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-biologicalarmorlevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_C7553E9C");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_6F47242E");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalweaponslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_805F7E4D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_04E89CB5");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironMechWeaponsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalweaponslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_095A0C4B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_010A7221");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironMechWeaponsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalweaponslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7DCA55F7");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_B30D1766");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironMechArmorLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalweaponslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_1D8EB53E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_94B1C081");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalarmorlevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_B33DAD0D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_A2D7B05B");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironMechArmorLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalarmorlevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_5382B716");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_03B4B565");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironMechArmorLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalarmorlevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_6376C099");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8044983B");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironMechArmorLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-mechanicalarmorlevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_0AD2FD55");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8BEDD554");
    lv_intCol += 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-shields-level0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_BE01A198");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_3FDBAE9E");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironShieldsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-shields-level1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_8E3DE258");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_5E59BD91");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironShieldsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-shields-level2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2705992E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1D91CD63");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "KeironShieldsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-shields-level3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_F9C17E7B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C0525EAF");
    lv_intRow = 2;
    lv_intLevel = 1;
    lv_intRow = 3;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ModifiedGait";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-modifiedgait.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2D26041B");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_9662B5F8");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ExaltedShield";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-stetmann-banelingmanashield.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_829D1BEC");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_40F94AA8");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "LatentCharge";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-latentcharge.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DFD595DE");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_24802C64");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "AmplifiedSphere";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-fenix-scoutchampionrange.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_2DF5E19D");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4A22F95B");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "PulsarDampener";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-keiron-dampener.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_EBFDAC64");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F7CBC1C5");
    lv_intRow = 4;
    lv_intLevel = 1;
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "MeridianConvergence";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-keiron-convergence.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_81608628");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1566F8B9");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "WraithChamber";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-wraithchamber.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_8E0E6E8E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C787FBAB");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ShieldCompulsion";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-keiron-shieldcompulsion.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_124EDD5E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7AA4877F");
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "AnisopteraWings";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-anisopterawings.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_DD4C4B77");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_BB93F1DD");
    lv_intRow = 5;
    lv_intLevel = 1;
    lv_intCol += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "DissonanceProjector";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-keiron-dissonanceprojector.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_7DC670A3");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0B35B1D2");
    lv_intCol = 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ApertureKeyhole";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-ability-keiron-keyhole.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_E3DEB620");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_41B05B21");
}

void libPEEP_gf_InitializeUEDResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 8;
}

void libPEEP_gf_InitializeDragonResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 9;
}

void libPEEP_gf_InitializeHybridsResearch () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 10;
    lv_intRow = 1;
    lv_intCol = 1;
    lv_intLevel = 0;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = null;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel0.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_FE6AC40E");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_81610940");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossShieldsLevel1";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel1.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_5FED50FC");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_7441A186");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossShieldsLevel2";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel2.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_3453FA23");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_9C6AA050");
    lv_intLevel += 1;
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade = "ProtossShieldsLevel3";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_imgIcon = "Assets\\Textures\\btn-upgrade-protoss-shieldslevel3.dds";
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName = StringExternal("Param/Value/lib_PEEP_BD3C7FD2");
    libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_839A095B");
}

void libPEEP_gf_InitializeStructures () {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gv_recGlobals.lv_txtStructureRowNames[1] = StringExternal("Param/Value/lib_PEEP_62B0A36C");
    libPEEP_gv_recGlobals.lv_txtStructureRowNames[2] = StringExternal("Param/Value/lib_PEEP_0D1FD56A");
    libPEEP_gv_recGlobals.lv_txtStructureRowNames[3] = StringExternal("Param/Value/lib_PEEP_E08CE853");
    libPEEP_gv_recGlobals.lv_txtStructureRowNames[4] = StringToText("");
    libPEEP_gf_InitializeTerranStructures();
    libPEEP_gf_InitializeZergStructures();
    libPEEP_gf_InitializeProtossStructures();
    libPEEP_gf_InitializeGenetronStructures();
    libPEEP_gf_InitializeXayidStructures();
    libPEEP_gf_InitializeKeironStructures();
    libPEEP_gf_InitializeUEDStructures();
    libPEEP_gf_InitializeDragonStructures();
    libPEEP_gf_InitializeHybridsStructures();
}

void libPEEP_gf_InitializeTerranStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 2;
    lv_intRow = 1;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-commandcenter.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "CommandCenter";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-techupgrade-terran-orbitalcommand.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "OrbitalCommand";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-planetaryfortress.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "PlanetaryFortress";
    lv_intRow = 2;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-refinery.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Refinery";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-supplydepot.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "SupplyDepot";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-bunker.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Bunker";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-sensordome.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "SensorTower";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-missileturret.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "MissileTurret";
    lv_intRow = 3;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-barracks.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Barracks";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-factory.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Factory";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-starport.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Starport";
    lv_intRow = 4;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-engineeringbay.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "EngineeringBay";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-armory.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Armory";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-ghostacademy.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "GhostAcademy";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-terran-fusioncore.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "FusionCore";
}

void libPEEP_gf_InitializeZergStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 3;
    lv_intRow = 1;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-hatchery.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Hatchery";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-lair.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Lair";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-hive.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Hive";
    lv_intRow = 2;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-extractor.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Extractor";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-creeptumor.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "CreepTumor";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-spinecrawler.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "SpineCrawler";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-sporecrawler.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "SporeCrawler";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-nydusnetwork.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "NydusNetwork";
    lv_intRow = 3;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-spawningpool.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "SpawningPool";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-roachwarren.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "RoachWarren";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-banelingnest.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "BanelingNest";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-hydraliskden.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "HydraliskDen";
    lv_intRow = 4;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-evolutionchamber.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "EvolutionChamber";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-infestationpit.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "InfestationPit";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-spire.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Spire";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-greaterspire.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "GreaterSpire";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-zerg-ultraliskcavern.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "UltraliskCavern";
}

void libPEEP_gf_InitializeProtossStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 4;
    lv_intRow = 1;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-nexus.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Nexus";
    lv_intRow = 2;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-assimilator.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Assimilator";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-pylon.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Pylon";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-photoncannon.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "PhotonCannon";
    lv_intRow = 3;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-forge.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Forge";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-gateway.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Gateway";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-warpgate.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "WarpGate";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-roboticsfacility.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "RoboticsFacility";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-stargate.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Stargate";
    lv_intRow = 4;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-cyberneticscore.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "CyberneticsCore";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-templararchives.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "TemplarArchive";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-twilightcouncil.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "TwilightCouncil";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-darkshrine.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "DarkShrine";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-fleetbeacon.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "FleetBeacon";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-protoss-roboticssupportbay.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "RoboticsBay";
}

void libPEEP_gf_InitializeGenetronStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 5;
    lv_intRow = 1;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-processingcore.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "ProcessingCore";
    lv_intRow = 2;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-filteringplant.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "FilteringPlant";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-processingnode.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "ProcessingNode";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-repulsor.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Repulsor";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-interdictor.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Interdictor";
    lv_intRow = 3;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-manufacturer.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Manufacturer";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-fabricator.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Fabricator";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-assemblyarray.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "AssemblyArray";
    lv_intRow = 4;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-uploader.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Uploader";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-outfittingstation.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "OutfittingStation";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-techvault.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "TechVault";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-genetron-analysisterminal.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "AnalysisTerminal";
}

void libPEEP_gf_InitializeXayidStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 6;
    lv_intRow = 1;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-scavengernest.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "ScavengerNest";
    lv_intRow = 2;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-siphoner.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Siphoner";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-feedingpool.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "FeedingPool";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-bilepit.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "BilePit";
    lv_intRow = 3;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-xayidden.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "XayidDen";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-biomasshatchery.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "BiomassHatchery";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-aviannest.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "AvianNest";
    lv_intRow = 4;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-casnoliskden.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "CasnoliskDen";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-biomasscavern.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "BiomassCavern";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-mutagenchambernew.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "MutagenChamber";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-evolutionpit.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "EvolutionPit";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-xayid-sunkenwarren.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "SunkenWarren";
}

void libPEEP_gf_InitializeKeironStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 7;
    lv_intRow = 1;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-citadel.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Citadel";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-citadel.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "CitadelCharged";
    lv_intRow = 2;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-formulator.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Formulator";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-oculus.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Oculus";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-nullifier.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Nullifier";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-stratus.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Stratus";
    lv_intRow = 3;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-edifice.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Edifice";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-sanctum.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Sanctum";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-foundry.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Foundry";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-elysium.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Elysium";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-atrium.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Atrium";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-pantheon.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Pantheon";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-conduit.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Conduit";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-outlet.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Outlet";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-empyrean.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Empyrean";
    lv_intCol += 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-zenith.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Zenith";
    lv_intRow = 4;
    lv_intCol = 1;
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon = "Assets\\Textures\\btn-building-keiron-reliquary.dds";
    libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType = "Reliquary";
}

void libPEEP_gf_InitializeUEDStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 8;
}

void libPEEP_gf_InitializeDragonStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 9;
}

void libPEEP_gf_InitializeHybridsStructures () {
    // Variable Declarations
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRace = 10;
}

void libPEEP_gf_SetDecalTexture (unit lp_uUnit, int lp_intTextureID) {
    // Variable Declarations
    fixed lv_realScale;
    fixed lv_realStandardScale;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realScale = 1.0;
    lv_realStandardScale = 175.0;

    // Implementation
    if ((lp_intTextureID == 500)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourcePeepmodeEye");
        lv_realScale = 50.0;
    }
    else if ((lp_intTextureID == 501)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceTerranLogo");
        lv_realScale = 50.0;
    }
    else if ((lp_intTextureID == 502)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceZergLogo");
        lv_realScale = 50.0;
    }
    else if ((lp_intTextureID == 503)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceProtossLogo");
        lv_realScale = 50.0;
    }
    else if ((lp_intTextureID == 504)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDice");
        lv_realScale = 50.0;
    }
    else if ((lp_intTextureID == 505)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceCrown");
        lv_realScale = 100.0;
    }
    else if ((lp_intTextureID == 1)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalAtomic");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 2)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalSwan");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 3)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalCrescent");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 4)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalTriBlades");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 5)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalFernBlade");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 6)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalPanda");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 7)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalBrokenSkull");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 8)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalCyborgSkull");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 9)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalDemonSkull");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 10)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalBearPaw");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 11)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalLeaf");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 12)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalYinYangYin");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 13)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalLion");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 14)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalMurlocalypseNow");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 15)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalKnives");
        lv_realScale = lv_realStandardScale;
    }
    else if ((lp_intTextureID == 16)) {
        ActorSend(libNtve_gf_MainActorofUnit(lp_uUnit), "TextureSelectById XukeSourceDecalDragon");
        lv_realScale = lv_realStandardScale;
    }
    UnitSetScale(lp_uUnit, lv_realScale, lv_realScale, 100.0);
}

void libPEEP_gf_SetActorTintforPlayer (actor lp_aActor, int lp_intPlayer) {
    // Variable Declarations
    int lv_coPlayerColor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coPlayerColor = 1;

    // Implementation
    lv_coPlayerColor = PlayerGetColorIndex(lp_intPlayer, false);
    if ((lv_coPlayerColor == 0)) {
        ActorSend(lp_aActor, "SetTintColor {255,255,255 1.200000}");
    }
    else if ((lv_coPlayerColor == 1)) {
        ActorSend(lp_aActor, "SetTintColor {180,20,30 1.200000}");
    }
    else if ((lv_coPlayerColor == 2)) {
        ActorSend(lp_aActor, "SetTintColor {0,66,255 1.200000}");
    }
    else if ((lv_coPlayerColor == 3)) {
        ActorSend(lp_aActor, "SetTintColor {28,167,234 1.200000}");
    }
    else if ((lv_coPlayerColor == 4)) {
        ActorSend(lp_aActor, "SetTintColor {84,0,129 1.200000}");
    }
    else if ((lv_coPlayerColor == 5)) {
        ActorSend(lp_aActor, "SetTintColor {235,225,41 1.200000}");
    }
    else if ((lv_coPlayerColor == 6)) {
        ActorSend(lp_aActor, "SetTintColor {254,138,14 1.200000}");
    }
    else if ((lv_coPlayerColor == 7)) {
        ActorSend(lp_aActor, "SetTintColor {22,128,0 1.200000}");
    }
    else if ((lv_coPlayerColor == 8)) {
        ActorSend(lp_aActor, "SetTintColor {204,166,252 1.200000}");
    }
    else if ((lv_coPlayerColor == 9)) {
        ActorSend(lp_aActor, "SetTintColor {31,1,201 1.200000}");
    }
    else if ((lv_coPlayerColor == 10)) {
        ActorSend(lp_aActor, "SetTintColor {82,84,148 1.200000}");
    }
    else if ((lv_coPlayerColor == 11)) {
        ActorSend(lp_aActor, "SetTintColor {16,98,70 1.200000}");
    }
    else if ((lv_coPlayerColor == 12)) {
        ActorSend(lp_aActor, "SetTintColor {78,42,4 1.200000}");
    }
    else if ((lv_coPlayerColor == 13)) {
        ActorSend(lp_aActor, "SetTintColor {150,255,145 1.200000}");
    }
    else if ((lv_coPlayerColor == 14)) {
        ActorSend(lp_aActor, "SetTintColor {35,35,35 1.200000}");
    }
    else if ((lv_coPlayerColor == 15)) {
        ActorSend(lp_aActor, "SetTintColor 229,91,176");
    }
}

void libPEEP_gf_CreateTurfMarkersforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intMatIndex;
    int lv_intMatTypeIndex;
    point lv_pSpawnPoint;
    int lv_intSpawnIndex;
    actor lv_aActor;
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoF1D50F68_ae;
    const int autoF1D50F68_ai = 1;

    // Variable Initialization

    // Implementation
    autoF1D50F68_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfMarkers;
    lv_intMatIndex = 1;
    for ( ; ( (autoF1D50F68_ai >= 0 && lv_intMatIndex <= autoF1D50F68_ae) || (autoF1D50F68_ai < 0 && lv_intMatIndex >= autoF1D50F68_ae) ) ; lv_intMatIndex += autoF1D50F68_ai ) {
        lv_intMatTypeIndex = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerTypeSelections[lv_intMatIndex];
        if ((lv_intMatTypeIndex > 0)) {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfMarkerUnits[lv_intMatIndex] != null)) {
                UnitRemove(libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfMarkerUnits[lv_intMatIndex]);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfMarkerUnits[lv_intMatIndex] = null;
            }

            lv_intSpawnIndex = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intMatIndex], lp_intPlayer);
            if ((lv_intSpawnIndex == 1)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pStartingPoint;
            }
            else if ((lv_intSpawnIndex == 2)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pBaseBuildPoint;
            }
            else if ((lv_intSpawnIndex == 3)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pWelcomePoint;
            }
            else if ((lv_intSpawnIndex == 4)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pNaturalPoint;
            }
            UnitCreate(1, "CustomDecalCow", c_unitCreateIgnorePlacement, 0, lv_pSpawnPoint, 270.0);
            libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfMarkerUnits[lv_intMatIndex] = UnitLastCreated();
            UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
            UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            lv_aActor = libNtve_gf_MainActorofUnit(UnitLastCreated());
            if ((lv_intMatTypeIndex == 1)) {
                ActorSend(lv_aActor, "ModelSwap Beacon_TerranSmall");
                ActorSend(lv_aActor, "SetScale 1.400000,1.400000,0.500000");
            }
            else if ((lv_intMatTypeIndex == 2)) {
                ActorSend(lv_aActor, "ModelSwap Beacon_ZergSmall");
                ActorSend(lv_aActor, "SetScale 1.400000,1.400000,0.500000");
            }
            else if ((lv_intMatTypeIndex == 3)) {
                ActorSend(lv_aActor, "ModelSwap Beacon_ProtossSmall");
                ActorSend(lv_aActor, "SetScale 1.400000,1.400000,0.500000");
            }
            else if ((lv_intMatTypeIndex == 4)) {
                ActorSend(lv_aActor, "ModelSwap SignsWarningDeath20");
                ActorSend(lv_aActor, "SetScale 2.000000");
            }
            else if ((lv_intMatTypeIndex == 5)) {
                ActorSend(lv_aActor, "ModelSwap SignsWarningDeath13 0");
                ActorSend(lv_aActor, "SetScale 2.000000");
            }
            else if ((lv_intMatTypeIndex == 6)) {
                ActorSend(lv_aActor, "ModelSwap SignsIconsDeath05");
                ActorSend(lv_aActor, "SetScale 2.000000");
            }
            else if ((lv_intMatTypeIndex == 7)) {
                ActorSend(lv_aActor, "ModelSwap SignsWarning 0");
                ActorSend(lv_aActor, "SetScale 2.000000");
            }
            else if ((lv_intMatTypeIndex == 8)) {
                ActorSend(lv_aActor, "ModelSwap ShapeSadFace");
                ActorSend(lv_aActor, "SetScale 1.500000,1.500000,0.300000");
                libPEEP_gf_SetActorTintforPlayer(lv_aActor, lp_intPlayer);
            }
            else if ((lv_intMatTypeIndex == 9)) {
                ActorSend(lv_aActor, "ModelSwap ShapeSmileyFace");
                ActorSend(lv_aActor, "SetScale 1.500000,1.500000,0.300000");
                libPEEP_gf_SetActorTintforPlayer(lv_aActor, lp_intPlayer);
            }
            else if ((lv_intMatTypeIndex == 10)) {
                ActorSend(lv_aActor, "ModelSwap ShapeHeart");
                ActorSend(lv_aActor, "SetScale 1.000000,1.000000,0.300000");
                libPEEP_gf_SetActorTintforPlayer(lv_aActor, lp_intPlayer);
            }
            else if ((lv_intMatTypeIndex == 11)) {
                ActorSend(lv_aActor, "ModelSwap Shape5PointStar");
                ActorSend(lv_aActor, "SetScale 1.500000,1.500000,0.300000");
                libPEEP_gf_SetActorTintforPlayer(lv_aActor, lp_intPlayer);
            }
            else if ((lv_intMatTypeIndex == 12)) {
                ActorSend(lv_aActor, "ModelSwap ShapeSpade 0");
                ActorSend(lv_aActor, "SetScale 1.000000,1.000000,0.300000");
                libPEEP_gf_SetActorTintforPlayer(lv_aActor, lp_intPlayer);
            }
            else if ((lv_intMatTypeIndex == 13)) {
                ActorSend(lv_aActor, "ModelSwap ShapeBanana 22");
                ActorSend(lv_aActor, "SetScale 1.500000,1.500000,0.500000");
            }
            else if ((lv_intMatTypeIndex == 14)) {
                ActorSend(lv_aActor, "ModelSwap ShapeWatermelonSmall 23");
                ActorSend(lv_aActor, "SetScale 2.000000,2.000000,0.700000");
            }
            else if ((lv_intMatTypeIndex == 15)) {
                ActorSend(lv_aActor, "ModelSwap ShapeLemon 24");
                ActorSend(lv_aActor, "SetScale 1.800000,1.800000,0.600000");
            }
            else if ((lv_intMatTypeIndex == 16)) {
                ActorSend(lv_aActor, "ModelSwap ShapeGrape 27");
                ActorSend(lv_aActor, "SetScale 2.000000,2.000000,0.700000");
            }
        }

    }
}

void libPEEP_gf_DestroyPlayerTurfMarkers (int lp_intPlayer) {
    // Variable Declarations
    int lv_intMatIndex;

    // Automatic Variable Declarations
    int auto1AA0FE58_ae;
    const int auto1AA0FE58_ai = 1;

    // Variable Initialization

    // Implementation
    auto1AA0FE58_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfMarkers;
    lv_intMatIndex = 1;
    for ( ; ( (auto1AA0FE58_ai >= 0 && lv_intMatIndex <= auto1AA0FE58_ae) || (auto1AA0FE58_ai < 0 && lv_intMatIndex >= auto1AA0FE58_ae) ) ; lv_intMatIndex += auto1AA0FE58_ai ) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfMarkerUnits[lv_intMatIndex] != null)) {
            UnitRemove(libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfMarkerUnits[lv_intMatIndex]);
            libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfMarkerUnits[lv_intMatIndex] = null;
        }

    }
}

void libPEEP_gf_MoveTurfMarkers () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    unit lv_uUnit;
    point lv_pSpawnPoint;
    int lv_intSpawnIndex;

    // Automatic Variable Declarations
    int auto306817CF_ae;
    const int auto306817CF_ai = 1;
    const int auto1623B1CA_ae = 2;
    const int auto1623B1CA_ai = 1;

    // Variable Initialization

    // Implementation
    auto306817CF_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto306817CF_ai >= 0 && lv_intPlayer <= auto306817CF_ae) || (auto306817CF_ai < 0 && lv_intPlayer >= auto306817CF_ae) ) ; lv_intPlayer += auto306817CF_ai ) {
        lv_intIndex = 1;
        for ( ; ( (auto1623B1CA_ai >= 0 && lv_intIndex <= auto1623B1CA_ae) || (auto1623B1CA_ai < 0 && lv_intIndex >= auto1623B1CA_ae) ) ; lv_intIndex += auto1623B1CA_ai ) {
            lv_uUnit = libPEEP_gv_recPlayers[lv_intPlayer].lv_uTurfMarkerUnits[lv_intIndex];
            if ((lv_uUnit != null)) {
                lv_intSpawnIndex = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intIndex], lv_intPlayer);
                if ((lv_intSpawnIndex == 1)) {
                    lv_pSpawnPoint = PointWithOffsetPolar(libPEEP_gv_recPlayers[lv_intPlayer].lv_pStartingPoint, 3.2, 90.0);
                }
                else if ((lv_intSpawnIndex == 2)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lv_intPlayer].lv_pBaseBuildPoint;
                }
                else if ((lv_intSpawnIndex == 3)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lv_intPlayer].lv_pWelcomePoint;
                }
                else if ((lv_intSpawnIndex == 4)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lv_intPlayer].lv_pNaturalPoint;
                }
                UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_pSpawnPoint, RandomFixed(0.0, 4.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
            }

        }
    }
}

void libPEEP_gf_CreateTurfSymbolsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intSymbolIndex;
    int lv_intSymbolTypeIndex;
    point lv_pSpawnPoint;
    int lv_intSpawnIndex;
    unit lv_uUnit;

    // Automatic Variable Declarations
    int auto42161BA8_ae;
    const int auto42161BA8_ai = 1;

    // Variable Initialization

    // Implementation
    auto42161BA8_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfSymbols;
    lv_intSymbolIndex = 1;
    for ( ; ( (auto42161BA8_ai >= 0 && lv_intSymbolIndex <= auto42161BA8_ae) || (auto42161BA8_ai < 0 && lv_intSymbolIndex >= auto42161BA8_ae) ) ; lv_intSymbolIndex += auto42161BA8_ai ) {
        lv_intSymbolTypeIndex = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolTypeSelections[lv_intSymbolIndex];
        if ((lv_intSymbolTypeIndex > 0)) {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfSymbolUnits[lv_intSymbolIndex] != null)) {
                UnitRemove(libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfSymbolUnits[lv_intSymbolIndex]);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfSymbolUnits[lv_intSymbolIndex] = null;
            }

            lv_intSpawnIndex = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[lv_intSymbolIndex], lp_intPlayer);
            if ((lv_intSpawnIndex == 1)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pStartingPoint;
            }
            else if ((lv_intSpawnIndex == 2)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pBaseBuildPoint;
            }
            else if ((lv_intSpawnIndex == 3)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pWelcomePoint;
            }
            else if ((lv_intSpawnIndex == 4)) {
                lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pNaturalPoint;
            }
            UnitCreate(1, "CustomDecalMuta", c_unitCreateIgnorePlacement, 0, lv_pSpawnPoint, 270.0);
            lv_uUnit = UnitLastCreated();
            libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfSymbolUnits[lv_intSymbolIndex] = lv_uUnit;
            libPEEP_gf_SetDecalTexture(lv_uUnit, lv_intSymbolTypeIndex);
            libPEEP_gf_SetActorTintforPlayer(libNtve_gf_MainActorofUnit(UnitLastCreated()), lp_intPlayer);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        }

    }
}

void libPEEP_gf_DestroyPlayerTurfSymbols (int lp_intPlayer) {
    // Variable Declarations
    int lv_intSymbolIndex;

    // Automatic Variable Declarations
    int autoAB154470_ae;
    const int autoAB154470_ai = 1;

    // Variable Initialization

    // Implementation
    autoAB154470_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfSymbols;
    lv_intSymbolIndex = 1;
    for ( ; ( (autoAB154470_ai >= 0 && lv_intSymbolIndex <= autoAB154470_ae) || (autoAB154470_ai < 0 && lv_intSymbolIndex >= autoAB154470_ae) ) ; lv_intSymbolIndex += autoAB154470_ai ) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfSymbolUnits[lv_intSymbolIndex] != null)) {
            UnitRemove(libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfSymbolUnits[lv_intSymbolIndex]);
            libPEEP_gv_recPlayers[lp_intPlayer].lv_uTurfSymbolUnits[lv_intSymbolIndex] = null;
        }

    }
}

void libPEEP_gf_InitializePets () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    libPEEP_gv_recGlobals.lv_txtPetSpecialUtterances[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_A1251474");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtPetSpecialUtterances[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_1608224D");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtPetSpecialUtterances[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_27F92E27");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtPetSpecialUtterances[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_D21DCBE1");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtPetSpecialUtterances[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_31F56B7D");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtPetSpecialUtterances[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_B96E6FA1");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_txtPetSpecialUtterances[lv_intIndex] = StringExternal("Param/Value/lib_PEEP_44D68841");
    libPEEP_gv_recGlobals.lv_intNumPetSpecialUtterances = lv_intIndex;
    lv_intIndex = 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_DD16F41E");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "Sheep";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-sheep.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 170.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_C9DE0A8F");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_91FF57A2");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[3] = StringExternal("Param/Value/lib_PEEP_6FA4AB71");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[4] = StringExternal("Param/Value/lib_PEEP_6766EA4D");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 4;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_470867E8");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "Cow";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-cow.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 160.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_D8FDF79C");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_8FB76284");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[3] = StringExternal("Param/Value/lib_PEEP_58135B92");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[4] = StringExternal("Param/Value/lib_PEEP_13905885");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 4;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_1B858241");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "Dog";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-dog.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 200.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_0B609535");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_04EB6D6B");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[3] = StringExternal("Param/Value/lib_PEEP_09448E3C");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[4] = StringExternal("Param/Value/lib_PEEP_1125CBEB");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 4;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_661A598E");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "KarakFemale";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-karakfemale.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 165.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_B3AE4377");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_CE07D0FD");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_5EBC7F9E");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "KarakMale";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-karakmale.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 165.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_B06AC483");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_5DA4D1E2");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_D1AE1AF1");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "UrsadakFemaleExotic";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-ursadakfemale.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 80.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_2002B110");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_1D086D04");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_E61A0D23");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "UrsadakMaleExotic";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-ursadakmale.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 80.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_9FE14BDA");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_A837787B");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_24D7FE41");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "RedstoneLavaCritter";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-zerg-larva.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 300.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_C289E8DA");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_C242725F");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_FAC54561");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "Scantipede";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-scantipede.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 200.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_29A721FA");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_3DEDD472");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[3] = StringExternal("Param/Value/lib_PEEP_73634942");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[4] = StringExternal("Param/Value/lib_PEEP_37C6357A");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 4;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_9946A3BB");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "CarrionBird";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-carrionbird.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 300.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_3A192A05");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_A5834323");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_8EA92A9F");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "UtilityBot";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-utilitybot.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 200.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_5E382BEC");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_0CEBE1C4");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[3] = StringExternal("Param/Value/lib_PEEP_D909EF97");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 3;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_7F71A714");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "Lyote";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-lyotemale.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 250.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_1B0D83A7");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_C2518EFA");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_72D03CC8");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "ThornLizard";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-thornlizard.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 220.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_68D9EC93");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_3C7EAA11");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_453498D2");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "Artosilope";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-artosilope.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 180.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_0EEE3C8B");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_434214D6");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_58FE5D23");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "LabBot";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-labbot.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 210.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_A9086FBF");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_85152B18");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_3A6CE268");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_utUnitType = "Crabeetle";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_fIcon = "Assets\\Textures\\wireframe-critter-crabeetle.dds";
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_realScale = 220.0;
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[1] = StringExternal("Param/Value/lib_PEEP_014C7E1A");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_txtUtterances[2] = StringExternal("Param/Value/lib_PEEP_B05FCFCC");
    libPEEP_gv_recGlobals.lv_recPets[lv_intIndex].lv_intNumUtterances = 2;
    libPEEP_gv_recGlobals.lv_intNumPets = lv_intIndex;
}

void libPEEP_gf_MakePetUtterXforPlayer (int lp_intPlayer, string lp_strSpeech) {
    // Variable Declarations
    int lv_intPetIndex;
    text lv_txtMessage;
    bool lv_boolSaidSomething;

    // Automatic Variable Declarations
    int auto62DD686B_ae;
    const int auto62DD686B_ai = 1;

    // Variable Initialization

    // Implementation
    auto62DD686B_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto62DD686B_ai >= 0 && lv_intPetIndex <= auto62DD686B_ae) || (auto62DD686B_ai < 0 && lv_intPetIndex >= auto62DD686B_ae) ) ; lv_intPetIndex += auto62DD686B_ai ) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_BB62476B") + StringToText(StringSub(lp_strSpeech, 1, 50)) + StringExternal("Param/Value/lib_PEEP_9A895BB9"));
            TextTagSetText(libPEEP_gv_recPlayers[lp_intPlayer].lv_txtPetTags[lv_intPetIndex], lv_txtMessage);
            lv_boolSaidSomething = true;
        }

    }
    if ((lv_boolSaidSomething == true)) {
        TimerStart(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerPetUtteranceDisplay, 10.0, false, c_timeGame);
    }

}

void libPEEP_gf_MakePetsReturnHomeforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intPetIndex;
    int lv_intSpawnIndex;
    point lv_pSpawnPoint;

    // Automatic Variable Declarations
    int auto3A7455EF_ae;
    const int auto3A7455EF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
        auto3A7455EF_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
        lv_intPetIndex = 1;
        for ( ; ( (auto3A7455EF_ai >= 0 && lv_intPetIndex <= auto3A7455EF_ae) || (auto3A7455EF_ai < 0 && lv_intPetIndex >= auto3A7455EF_ae) ) ; lv_intPetIndex += auto3A7455EF_ai ) {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
                lv_intSpawnIndex = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetSpawnSelections[lv_intPetIndex];
                if ((lv_intSpawnIndex == 1)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pStartingPoint;
                }
                else if ((lv_intSpawnIndex == 2)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pBaseBuildPoint;
                }
                else if ((lv_intSpawnIndex == 3)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pWelcomePoint;
                }
                else if ((lv_intSpawnIndex == 4)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pNaturalPoint;
                }
                UnitIssueOrder(libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex], OrderTargetingPoint(AbilityCommand("move", 0), lv_pSpawnPoint), c_orderQueueReplace);
            }

        }
    }

}

void libPEEP_gf_CreateMatchPetsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intRand;
    int lv_intPetIndex;
    int lv_intPetTypeIndex;
    point lv_pSpawnPoint;
    int lv_intSpawnIndex;
    unit lv_uPet;
    fixed lv_realScale;

    // Automatic Variable Declarations
    int autoCBE90EE9_ae;
    const int autoCBE90EE9_ai = 1;

    // Variable Initialization

    // Implementation
    autoCBE90EE9_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (autoCBE90EE9_ai >= 0 && lv_intPetIndex <= autoCBE90EE9_ae) || (autoCBE90EE9_ai < 0 && lv_intPetIndex >= autoCBE90EE9_ae) ) ; lv_intPetIndex += autoCBE90EE9_ai ) {
        if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex] == null) || (UnitIsAlive(libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex]) == false))) {
            lv_intPetTypeIndex = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetTypeSelections[lv_intPetIndex];
            if ((lv_intPetTypeIndex > 0)) {
                lv_intSpawnIndex = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diPetSpawnPulldowns[lv_intPetIndex], lp_intPlayer);
                if ((lv_intSpawnIndex == 1)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pStartingPoint;
                }
                else if ((lv_intSpawnIndex == 2)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pBaseBuildPoint;
                }
                else if ((lv_intSpawnIndex == 3)) {
                    UnitSetState(lv_uPet, c_unitStateTargetable, false);
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pWelcomePoint;
                }
                else if ((lv_intSpawnIndex == 4)) {
                    lv_pSpawnPoint = libPEEP_gv_recPlayers[lp_intPlayer].lv_pNaturalPoint;
                }
                UnitCreate(1, libPEEP_gv_recGlobals.lv_recPets[lv_intPetTypeIndex].lv_utUnitType, 0, 0, lv_pSpawnPoint, RandomFixed(0.0, 360.0));
                lv_uPet = UnitLastCreated();
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "GlowStart");
                libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex] = lv_uPet;
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(lv_uPet));
                lv_realScale = libPEEP_gv_recGlobals.lv_recPets[lv_intPetTypeIndex].lv_realScale;
                lv_realScale = (lv_realScale * 0.72);
                UnitSetScale(lv_uPet, lv_realScale, lv_realScale, lv_realScale);
                UnitSetState(lv_uPet, c_unitStateInvulnerable, true);
                UnitSetState(lv_uPet, c_unitStateSelectable, true);
                UnitSetState(lv_uPet, c_unitStateHighlightable, false);
                UnitSetState(lv_uPet, c_unitStateTooltipable, true);
                UnitSetState(lv_uPet, c_unitStateCursorable, false);
                if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[lv_intPetIndex] == true)) {
                    UnitSetInfoText(lv_uPet, (StringExternal("Param/Value/lib_PEEP_FE403DF0") + UnitTypeGetName(libPEEP_gv_recGlobals.lv_recPets[lv_intPetTypeIndex].lv_utUnitType)), StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lv_intPetIndex]), (StringExternal("Param/Value/lib_PEEP_155B3880") + PlayerName(lp_intPlayer)));
                }
                else {
                    UnitSetInfoText(lv_uPet, StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lv_intPetIndex]), StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lv_intPetIndex]), (StringExternal("Param/Value/lib_PEEP_CF2CCFB7") + PlayerName(lp_intPlayer)));
                }
                TextTagCreate(StringToText(""), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
                libPEEP_gv_recPlayers[lp_intPlayer].lv_txtPetTags[lv_intPetIndex] = TextTagLastCreated();
                TextTagAttachToUnit(TextTagLastCreated(), lv_uPet, 1.2);
                libPEEP_gf_SetActorTintforPlayer(libNtve_gf_MainActorofUnit(UnitLastCreated()), lp_intPlayer);
            }

        }

    }
}

void libPEEP_gf_CreateFaceoffPetsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intRand;
    int lv_intPetIndex;
    int lv_intPetTypeIndex;
    point lv_pSpawnPoint;
    int lv_intSpawnIndex;
    unit lv_uPet;
    fixed lv_realScale;

    // Automatic Variable Declarations
    int auto84018797_ae;
    const int auto84018797_ai = 1;

    // Variable Initialization

    // Implementation
    auto84018797_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto84018797_ai >= 0 && lv_intPetIndex <= auto84018797_ae) || (auto84018797_ai < 0 && lv_intPetIndex >= auto84018797_ae) ) ; lv_intPetIndex += auto84018797_ai ) {
        lv_intPetTypeIndex = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetTypeSelections[lv_intPetIndex];
        if ((lv_intPetTypeIndex > 0)) {
            UnitCreate(1, libPEEP_gv_recGlobals.lv_recPets[lv_intPetTypeIndex].lv_utUnitType, 0, 0, libPEEP_gv_recTeams[libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam].lv_pFaceoffPoint, UnitGetFacing(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit));
            lv_uPet = UnitLastCreated();
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "GlowStart");
            libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex] = lv_uPet;
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(lv_uPet));
            lv_realScale = libPEEP_gv_recGlobals.lv_recPets[lv_intPetTypeIndex].lv_realScale;
            lv_realScale = (lv_realScale * 0.45);
            UnitSetScale(lv_uPet, lv_realScale, lv_realScale, lv_realScale);
            UnitSetState(lv_uPet, c_unitStateHighlightable, false);
            UnitSetState(lv_uPet, c_unitStateTargetable, false);
            UnitSetState(lv_uPet, c_unitStateSelectable, false);
            UnitSetState(lv_uPet, c_unitStateInvulnerable, true);
            UnitSetState(lv_uPet, c_unitStateTooltipable, true);
            UnitSetState(lv_uPet, c_unitStateCursorable, false);
            UnitSetInfoText(lv_uPet, StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lv_intPetIndex]), StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lv_intPetIndex]), (StringExternal("Param/Value/lib_PEEP_98E954A7") + PlayerName(lp_intPlayer)));
            TextTagCreate(StringToText(""), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
            libPEEP_gv_recPlayers[lp_intPlayer].lv_txtPetTags[lv_intPetIndex] = TextTagLastCreated();
            TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 0.7);
            libPEEP_gf_SetActorTintforPlayer(libNtve_gf_MainActorofUnit(UnitLastCreated()), lp_intPlayer);
        }

    }
}

void libPEEP_gf_DestroyPlayerPets (int lp_intPlayer) {
    // Variable Declarations
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto2D7E44A0_ae;
    const int auto2D7E44A0_ai = 1;

    // Variable Initialization

    // Implementation
    auto2D7E44A0_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto2D7E44A0_ai >= 0 && lv_intPetIndex <= auto2D7E44A0_ae) || (auto2D7E44A0_ai < 0 && lv_intPetIndex >= auto2D7E44A0_ae) ) ; lv_intPetIndex += auto2D7E44A0_ai ) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex]));
            UnitRemove(libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex]);
            libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lv_intPetIndex] = null;
            TextTagDestroy(libPEEP_gv_recPlayers[lp_intPlayer].lv_txtPetTags[lv_intPetIndex]);
        }

    }
}

void libPEEP_gf_RenamePlayerPet (int lp_intPlayer, int lp_intPetIndex, string lp_strName) {
    // Variable Declarations
    bool lv_boolPetUnlocked;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_intPetIndex == 1) || (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[100] == true))) {
        lv_boolPetUnlocked = true;
    }
    else {
        lv_boolPetUnlocked = false;
    }
    if ((lv_boolPetUnlocked == false)) {
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_F81A0BB1"), lp_intPlayer, false, false);
    }
    else {
        if ((TimerGetRemaining(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerPetRenameCooldown[lp_intPetIndex]) <= 0.0)) {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lp_intPetIndex] = lp_strName;
            libPEEP_gf_SaveBankforPlayer(lp_intPlayer);
            TimerStart(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerPetRenameCooldown[lp_intPetIndex], 20.0, false, c_timeGame);
            if ((StringEqual(lp_strName, "", c_stringCase) == true)) {
                libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[lp_intPetIndex] = true;
                libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_D2BC52D3") + IntToText(lp_intPetIndex) + StringExternal("Param/Value/lib_PEEP_0991C803")), lp_intPlayer, false, false);
            }
            else {
                libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[lp_intPetIndex] = false;
                libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_C22DB41D") + IntToText(lp_intPetIndex) + StringExternal("Param/Value/lib_PEEP_E1B32623") + StringToText(lp_strName)), lp_intPlayer, false, false);
            }
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lp_intPetIndex] != null)) {
                UnitSetInfoText(libPEEP_gv_recPlayers[lp_intPlayer].lv_uPetUnits[lp_intPetIndex], StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lp_intPetIndex]), StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lp_intPetIndex]), (StringExternal("Param/Value/lib_PEEP_A51F1EDF") + PlayerName(lp_intPlayer)));
            }

        }
        else {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_6F7A8846") + FixedToText(TimerGetRemaining(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerPetRenameCooldown[lp_intPetIndex]), 0) + StringExternal("Param/Value/lib_PEEP_53CC1B92")), lp_intPlayer, false, false);
        }
        libPEEP_gf_RefreshPetUIforPlayer(lp_intPlayer);
    }
}

text libPEEP_gf_makePetNameText (int lp_intPlayer, int lp_intPetIndex) {
    // Variable Declarations
    text lv_txtMessage;
    string lv_strString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_strString = "";

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[lp_intPetIndex] == true)) {
        return StringToText("");
    }
    else {
        lv_txtMessage = StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lp_intPetIndex]);
        lv_txtMessage = TextWithColor(lv_txtMessage, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false)));
        lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_4AFC1091") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_1955A7A9"));
        return lv_txtMessage;
    }
}

void libPEEP_gf_LoadBankforPlayer (int lp_intPlayer) {
    // Variable Declarations
    string lv_strString;
    int lv_intTmp;
    int lv_intIndex;
    int lv_intIndex2;
    bool lv_boolTmp;
    int lv_intJunk;

    // Automatic Variable Declarations
    const int auto30E8DA4C_ae = 9;
    const int auto30E8DA4C_ai = 1;
    const int autoD9BF6A97_ae = 3;
    const int autoD9BF6A97_ai = 1;
    const int auto8E9C4FEC_ae = libPEEP_gv_rACES_COUNT;
    const int auto8E9C4FEC_ai = 1;
    const int auto7331E000_ae = 200;
    const int auto7331E000_ai = 1;
    const int auto89EF4F62_ae = 2;
    const int auto89EF4F62_ai = 1;
    const int auto7F4D9D9B_ae = 2;
    const int auto7F4D9D9B_ai = 1;
    const int auto33B8EC18_ae = 2;
    const int auto33B8EC18_ai = 1;
    const int autoA450B544_ae = 2;
    const int autoA450B544_ai = 1;
    const int auto2A567953_ae = 2;
    const int auto2A567953_ai = 1;
    const int auto9BEC7BFF_ae = 2;
    const int auto9BEC7BFF_ai = 1;

    // Variable Initialization
    lv_strString = "";

    // Implementation
    if ((lp_intPlayer == 1)) {
        BankLoad("PeepModeLotV", 1);
    }
    else if ((lp_intPlayer == 2)) {
        BankLoad("PeepModeLotV", 2);
    }
    else if ((lp_intPlayer == 3)) {
        BankLoad("PeepModeLotV", 3);
    }
    else if ((lp_intPlayer == 4)) {
        BankLoad("PeepModeLotV", 4);
    }
    else if ((lp_intPlayer == 5)) {
        BankLoad("PeepModeLotV", 5);
    }
    else if ((lp_intPlayer == 6)) {
        BankLoad("PeepModeLotV", 6);
    }
    else if ((lp_intPlayer == 7)) {
        BankLoad("PeepModeLotV", 7);
    }
    else if ((lp_intPlayer == 8)) {
        BankLoad("PeepModeLotV", 8);
    }
    else if ((lp_intPlayer == 9)) {
        BankLoad("PeepModeLotV", 9);
    }
    else if ((lp_intPlayer == 10)) {
        BankLoad("PeepModeLotV", 10);
    }
    else if ((lp_intPlayer == 11)) {
        BankLoad("PeepModeLotV", 11);
    }
    else if ((lp_intPlayer == 12)) {
        BankLoad("PeepModeLotV", 12);
    }
    else if ((lp_intPlayer == 13)) {
        BankLoad("PeepModeLotV", 13);
    }
    else if ((lp_intPlayer == 14)) {
        BankLoad("PeepModeLotV", 14);
    }
    libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank = BankLastCreated();
    BankOptionSet(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, c_bankOptionSignature, true);
    if ((BankVerify(BankLastCreated()) == true)) {
        lv_strString = BankValueGetAsString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "a");
        if ((lv_strString != "")) {
            if ((libPEEP_gf_StarcodeValidateString(lv_strString, 10) == false)) {
            }
            else {
                lv_strString = libPEEP_gf_StarcodeRemoveHashfromString(lv_strString, 10);
                lv_strString = libPEEP_gf_StarcodeDecryptString(lv_strString, libPEEP_gv_recGlobals.lv_strStarCodeEncryptionKey);
                lv_strString = libPEEP_gf_StarcodeDecompressString(lv_strString);
                libPEEP_gf_StarcodeSetCode(lv_strString);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_realBankSonasRating = (IntToFixed(libPEEP_gf_StarcodeGetIntegerValue((FixedToInt(libPEEP_gv_recGlobals.lv_realMaxSonasRating) * 100))) / 100.0);
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionShowLogInChatCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionShowLogInChatCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionShowFloatingIcons, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionShowFloatingIcons, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionHideObserverChat, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionHideObserverChat, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionSilentChat, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionSilentChat, false, PlayerGroupSingle(lp_intPlayer));
                }
                libNtve_gf_SetDialogItemCurrentValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, (IntToFixed(libPEEP_gf_StarcodeGetIntegerValue(100)) / 10.0), PlayerGroupSingle(lp_intPlayer));
                lv_intIndex = 1;
                for ( ; ( (auto30E8DA4C_ai >= 0 && lv_intIndex <= auto30E8DA4C_ae) || (auto30E8DA4C_ai < 0 && lv_intIndex >= auto30E8DA4C_ae) ) ; lv_intIndex += auto30E8DA4C_ai ) {
                    lv_intIndex2 = (10 - lv_intIndex);
                    if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intIndex2], true, PlayerGroupSingle(lp_intPlayer));
                    }
                    else {
                        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intIndex2], false, PlayerGroupSingle(lp_intPlayer));
                    }
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                lv_intIndex = 1;
                for ( ; ( (autoD9BF6A97_ai >= 0 && lv_intIndex <= autoD9BF6A97_ae) || (autoD9BF6A97_ai < 0 && lv_intIndex >= autoD9BF6A97_ae) ) ; lv_intIndex += autoD9BF6A97_ai ) {
                    lv_intIndex2 = (4 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                }
                lv_intIndex = 2;
                for ( ; ( (auto8E9C4FEC_ai >= 0 && lv_intIndex <= auto8E9C4FEC_ae) || (auto8E9C4FEC_ai < 0 && lv_intIndex >= auto8E9C4FEC_ae) ) ; lv_intIndex += auto8E9C4FEC_ai ) {
                    lv_intIndex2 = (6 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBank1v1sWonByRace[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBank1v1sPlayedByRace[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                }
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesObserved = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankGamesJoined = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxChips);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsCashed = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxChips);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWinStreak = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWorstStreak = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankBestStreak = libPEEP_gf_StarcodeGetIntegerValue(libPEEP_gv_recGlobals.lv_intMaxWins);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankLeague = libPEEP_gf_StarcodeGetIntegerValue(20);
                DialogControlSelectItem(libPEEP_gv_recUI.lv_diLeaguePulldown, PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankLeague);
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLeaderboard = true;
                }
                else {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLeaderboard = false;
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStats = true;
                }
                else {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStats = false;
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStatsBlizzard = true;
                }
                else {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStatsBlizzard = false;
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLogs = true;
                }
                else {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLogs = false;
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBlizzUI = true;
                }
                else {
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBlizzUI = false;
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionAdvancedAvatarSelection, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionAdvancedAvatarSelection, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, false, PlayerGroupSingle(lp_intPlayer));
                }
                lv_intTmp = libPEEP_gf_StarcodeGetIntegerValue(20);
                if ((lv_intTmp > libPEEP_gv_recGlobals.lv_intNumAutoCamStyles)) {
                    lv_intTmp = 1;
                }

                DialogControlSelectItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupSingle(lp_intPlayer), lv_intTmp);
                lv_intTmp = libPEEP_gf_StarcodeGetIntegerValue(20);
                if ((lv_intTmp > libPEEP_gv_recGlobals.lv_intNumNamePanelMessageStyleNames)) {
                    lv_intTmp = 1;
                }

                DialogControlSelectItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, PlayerGroupSingle(lp_intPlayer), lv_intTmp);
                lv_intTmp = libPEEP_gf_StarcodeGetIntegerValue(20);
                if ((lv_intTmp > libPEEP_gv_recGlobals.lv_intNumNamePanelColorStyleNames)) {
                    lv_intTmp = 1;
                }

                DialogControlSelectItem(libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown, PlayerGroupSingle(lp_intPlayer), lv_intTmp);
                lv_intTmp = libPEEP_gf_StarcodeGetIntegerValue(20);
                if ((lv_intTmp > libPEEP_gv_recGlobals.lv_intNumNamePanelPositionNames)) {
                    lv_intTmp = 1;
                }

                DialogControlSelectItem(libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown, PlayerGroupSingle(lp_intPlayer), lv_intTmp);
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
                if ((libPEEP_gf_StarcodeGetIntegerValue(1) == 1)) {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diHideFairMessageLogCheckbox, true, PlayerGroupSingle(lp_intPlayer));
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diHideFairMessageLogCheckbox, false, PlayerGroupSingle(lp_intPlayer));
                }
            }
        }

        lv_strString = BankValueGetAsString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "b");
        if ((lv_strString != "")) {
            if ((libPEEP_gf_StarcodeValidateString(lv_strString, 10) == false)) {
                libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_08804492"), lp_intPlayer, false, false);
            }
            else {
                lv_strString = libPEEP_gf_StarcodeRemoveHashfromString(lv_strString, 10);
                lv_strString = libPEEP_gf_StarcodeDecryptString(lv_strString, libPEEP_gv_recGlobals.lv_strStarCodeEncryptionKey);
                lv_strString = libPEEP_gf_StarcodeDecompressString(lv_strString);
                libPEEP_gf_StarcodeSetCode(lv_strString);
                lv_intIndex = 1;
                for ( ; ( (auto7331E000_ai >= 0 && lv_intIndex <= auto7331E000_ae) || (auto7331E000_ai < 0 && lv_intIndex >= auto7331E000_ae) ) ; lv_intIndex += auto7331E000_ai ) {
                    lv_intIndex2 = (201 - lv_intIndex);
                    lv_intTmp = libPEEP_gf_StarcodeGetIntegerValue(1);
                    if ((lv_intTmp == 1)) {
                        lv_boolTmp = true;
                    }
                    else {
                        lv_boolTmp = false;
                    }
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[lv_intIndex2] = lv_boolTmp;
                }
            }
        }

        lv_strString = BankValueGetAsString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "c");
        if ((lv_strString != "")) {
            if ((libPEEP_gf_StarcodeValidateString(lv_strString, 10) == false)) {
            }
            else {
                lv_strString = libPEEP_gf_StarcodeRemoveHashfromString(lv_strString, 10);
                lv_strString = libPEEP_gf_StarcodeDecryptString(lv_strString, libPEEP_gv_recGlobals.lv_strStarCodeEncryptionKey);
                lv_strString = libPEEP_gf_StarcodeDecompressString(lv_strString);
                libPEEP_gf_StarcodeSetCode(lv_strString);
                lv_intIndex = 1;
                for ( ; ( (auto89EF4F62_ai >= 0 && lv_intIndex <= auto89EF4F62_ae) || (auto89EF4F62_ai < 0 && lv_intIndex >= auto89EF4F62_ae) ) ; lv_intIndex += auto89EF4F62_ai ) {
                    lv_intIndex2 = (3 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolSpawnSelections[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(10);
                }
                lv_intIndex = 1;
                for ( ; ( (auto7F4D9D9B_ai >= 0 && lv_intIndex <= auto7F4D9D9B_ae) || (auto7F4D9D9B_ai < 0 && lv_intIndex >= auto7F4D9D9B_ae) ) ; lv_intIndex += auto7F4D9D9B_ai ) {
                    lv_intIndex2 = (3 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolTypeSelections[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(20);
                }
                lv_intIndex = 1;
                for ( ; ( (auto33B8EC18_ai >= 0 && lv_intIndex <= auto33B8EC18_ae) || (auto33B8EC18_ai < 0 && lv_intIndex >= auto33B8EC18_ae) ) ; lv_intIndex += auto33B8EC18_ai ) {
                    lv_intIndex2 = (3 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerSpawnSelections[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(10);
                }
                lv_intIndex = 1;
                for ( ; ( (autoA450B544_ai >= 0 && lv_intIndex <= autoA450B544_ae) || (autoA450B544_ai < 0 && lv_intIndex >= autoA450B544_ae) ) ; lv_intIndex += autoA450B544_ai ) {
                    lv_intIndex2 = (3 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerTypeSelections[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(20);
                }
                lv_intIndex = 1;
                for ( ; ( (auto2A567953_ai >= 0 && lv_intIndex <= auto2A567953_ae) || (auto2A567953_ai < 0 && lv_intIndex >= auto2A567953_ae) ) ; lv_intIndex += auto2A567953_ai ) {
                    lv_intIndex2 = (3 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetSpawnSelections[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(10);
                }
                lv_intIndex = 1;
                for ( ; ( (auto9BEC7BFF_ai >= 0 && lv_intIndex <= auto9BEC7BFF_ae) || (auto9BEC7BFF_ai < 0 && lv_intIndex >= auto9BEC7BFF_ae) ) ; lv_intIndex += auto9BEC7BFF_ai ) {
                    lv_intIndex2 = (3 - lv_intIndex);
                    libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetTypeSelections[lv_intIndex2] = libPEEP_gf_StarcodeGetIntegerValue(20);
                }
            }
        }

        lv_strString = BankValueGetAsString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "d");
        if ((lv_strString != "")) {
            lv_strString = StringSub(lv_strString, 1, 14);
        }

        libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[1] = lv_strString;
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[1] == "")) {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[1] = true;
        }
        else {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[1] = false;
        }
        lv_strString = BankValueGetAsString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "e");
        if ((lv_strString != "")) {
            lv_strString = StringSub(lv_strString, 1, 14);
        }

        libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[2] = lv_strString;
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[2] == "")) {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[2] = true;
        }
        else {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[2] = false;
        }
        lv_strString = BankValueGetAsString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "r");
        if ((lv_strString != "")) {
            libNtve_gf_SetDialogItemEditorValue(libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox, lv_strString, PlayerGroupSingle(lp_intPlayer));
        }

    }

}

void libPEEP_gf_SaveBankforPlayer (int lp_intPlayer) {
    // Variable Declarations
    string lv_strString;
    int lv_intIndex;
    int lv_intItemID;
    int lv_intTmp;

    // Automatic Variable Declarations
    const int auto55FAF589_ae = libPEEP_gv_rACES_COUNT;
    const int auto55FAF589_ai = 1;
    const int auto55DC93A1_ae = 3;
    const int auto55DC93A1_ai = 1;
    const int autoC0CA0639_ae = 9;
    const int autoC0CA0639_ai = 1;
    const int auto6E076458_ae = 200;
    const int auto6E076458_ai = 1;
    const int autoB22CBB13_ae = 2;
    const int autoB22CBB13_ai = 1;
    const int auto27A76C83_ae = 2;
    const int auto27A76C83_ai = 1;
    const int auto28249880_ae = 2;
    const int auto28249880_ai = 1;
    const int auto8736CFEE_ae = 2;
    const int auto8736CFEE_ai = 1;
    const int auto7DEA9CEE_ae = 2;
    const int auto7DEA9CEE_ai = 1;
    const int auto6D1CA2D3_ae = 2;
    const int auto6D1CA2D3_ai = 1;

    // Variable Initialization
    lv_strString = "";

    // Implementation
    libPEEP_gf_StarcodeStartCode();
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diHideFairMessageLogCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown, lp_intPlayer), 20);
    libPEEP_gf_StarcodeStoreIntegerValue(DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown, lp_intPlayer), 20);
    libPEEP_gf_StarcodeStoreIntegerValue(DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, lp_intPlayer), 20);
    libPEEP_gf_StarcodeStoreIntegerValue(DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lp_intPlayer), 20);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionAdvancedAvatarSelection, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBlizzUI), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLogs), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStatsBlizzard), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStats), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLeaderboard), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankLeague, 20);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankBestStreak, libPEEP_gv_recGlobals.lv_intMaxWins);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWorstStreak, libPEEP_gv_recGlobals.lv_intMaxWins);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWinStreak, libPEEP_gv_recGlobals.lv_intMaxWins);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsCashed, libPEEP_gv_recGlobals.lv_intMaxChips);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount, libPEEP_gv_recGlobals.lv_intMaxChips);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankGamesJoined, libPEEP_gv_recGlobals.lv_intMaxWins);
    libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesObserved, libPEEP_gv_recGlobals.lv_intMaxWins);
    lv_intIndex = 2;
    for ( ; ( (auto55FAF589_ai >= 0 && lv_intIndex <= auto55FAF589_ae) || (auto55FAF589_ai < 0 && lv_intIndex >= auto55FAF589_ae) ) ; lv_intIndex += auto55FAF589_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBank1v1sPlayedByRace[lv_intIndex], libPEEP_gv_recGlobals.lv_intMaxWins);
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBank1v1sWonByRace[lv_intIndex], libPEEP_gv_recGlobals.lv_intMaxWins);
    }
    lv_intIndex = 1;
    for ( ; ( (auto55DC93A1_ai >= 0 && lv_intIndex <= auto55DC93A1_ae) || (auto55DC93A1_ai < 0 && lv_intIndex >= auto55DC93A1_ae) ) ; lv_intIndex += auto55DC93A1_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[lv_intIndex], libPEEP_gv_recGlobals.lv_intMaxWins);
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[lv_intIndex], libPEEP_gv_recGlobals.lv_intMaxWins);
    }
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, lp_intPlayer)), 1);
    lv_intIndex = 1;
    for ( ; ( (autoC0CA0639_ai >= 0 && lv_intIndex <= autoC0CA0639_ae) || (autoC0CA0639_ai < 0 && lv_intIndex >= autoC0CA0639_ae) ) ; lv_intIndex += autoC0CA0639_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intIndex], lp_intPlayer)), 1);
    }
    libPEEP_gf_StarcodeStoreIntegerValue(FixedToInt((libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, lp_intPlayer) * 10.0)), 100);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionSilentChat, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideObserverChat, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionShowFloatingIcons, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionShowLogInChatCheckbox, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue(BoolToInt(libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, lp_intPlayer)), 1);
    libPEEP_gf_StarcodeStoreIntegerValue((FixedToInt(libPEEP_gv_recPlayers[lp_intPlayer].lv_realBankSonasRating) * 100), (FixedToInt(libPEEP_gv_recGlobals.lv_realMaxSonasRating) * 100));
    lv_strString = libPEEP_gf_StarcodeCompressString(libPEEP_gf_StarcodeGetCode());
    lv_strString = libPEEP_gf_StarcodeEncryptString(lv_strString, libPEEP_gv_recGlobals.lv_strStarCodeEncryptionKey);
    lv_strString = libPEEP_gf_StarcodeHashString(lv_strString, 10);
    BankValueSetFromString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "a", lv_strString);
    libPEEP_gf_StarcodeStartCode();
    lv_intItemID = 1;
    for ( ; ( (auto6E076458_ai >= 0 && lv_intItemID <= auto6E076458_ae) || (auto6E076458_ai < 0 && lv_intItemID >= auto6E076458_ae) ) ; lv_intItemID += auto6E076458_ai ) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[lv_intItemID] == true)) {
            lv_intTmp = 1;
        }
        else {
            lv_intTmp = 0;
        }
        libPEEP_gf_StarcodeStoreIntegerValue(lv_intTmp, 1);
    }
    lv_strString = libPEEP_gf_StarcodeCompressString(libPEEP_gf_StarcodeGetCode());
    lv_strString = libPEEP_gf_StarcodeEncryptString(lv_strString, libPEEP_gv_recGlobals.lv_strStarCodeEncryptionKey);
    lv_strString = libPEEP_gf_StarcodeHashString(lv_strString, 10);
    BankValueSetFromString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "b", lv_strString);
    libPEEP_gf_StarcodeStartCode();
    lv_intIndex = 1;
    for ( ; ( (autoB22CBB13_ai >= 0 && lv_intIndex <= autoB22CBB13_ae) || (autoB22CBB13_ai < 0 && lv_intIndex >= autoB22CBB13_ae) ) ; lv_intIndex += autoB22CBB13_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetTypeSelections[lv_intIndex], 20);
    }
    lv_intIndex = 1;
    for ( ; ( (auto27A76C83_ai >= 0 && lv_intIndex <= auto27A76C83_ae) || (auto27A76C83_ai < 0 && lv_intIndex >= auto27A76C83_ae) ) ; lv_intIndex += auto27A76C83_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetSpawnSelections[lv_intIndex], 10);
    }
    lv_intIndex = 1;
    for ( ; ( (auto28249880_ai >= 0 && lv_intIndex <= auto28249880_ae) || (auto28249880_ai < 0 && lv_intIndex >= auto28249880_ae) ) ; lv_intIndex += auto28249880_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerTypeSelections[lv_intIndex], 20);
    }
    lv_intIndex = 1;
    for ( ; ( (auto8736CFEE_ai >= 0 && lv_intIndex <= auto8736CFEE_ae) || (auto8736CFEE_ai < 0 && lv_intIndex >= auto8736CFEE_ae) ) ; lv_intIndex += auto8736CFEE_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerSpawnSelections[lv_intIndex], 10);
    }
    lv_intIndex = 1;
    for ( ; ( (auto7DEA9CEE_ai >= 0 && lv_intIndex <= auto7DEA9CEE_ae) || (auto7DEA9CEE_ai < 0 && lv_intIndex >= auto7DEA9CEE_ae) ) ; lv_intIndex += auto7DEA9CEE_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolTypeSelections[lv_intIndex], 20);
    }
    lv_intIndex = 1;
    for ( ; ( (auto6D1CA2D3_ai >= 0 && lv_intIndex <= auto6D1CA2D3_ae) || (auto6D1CA2D3_ai < 0 && lv_intIndex >= auto6D1CA2D3_ae) ) ; lv_intIndex += auto6D1CA2D3_ai ) {
        libPEEP_gf_StarcodeStoreIntegerValue(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolSpawnSelections[lv_intIndex], 10);
    }
    lv_strString = libPEEP_gf_StarcodeCompressString(libPEEP_gf_StarcodeGetCode());
    lv_strString = libPEEP_gf_StarcodeEncryptString(lv_strString, libPEEP_gv_recGlobals.lv_strStarCodeEncryptionKey);
    lv_strString = libPEEP_gf_StarcodeHashString(lv_strString, 10);
    BankValueSetFromString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "c", lv_strString);
    BankValueSetFromString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "d", libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[1]);
    BankValueSetFromString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "e", libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[2]);
    BankValueSetFromString(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank, "peepmode", "f", libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox, lp_intPlayer));
    BankSave(libPEEP_gv_recPlayers[lp_intPlayer].lv_bBank);
}

void libPEEP_gf_SaveAllPlayerBanks () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoA6234571_ae;
    const int autoA6234571_ai = 1;

    // Variable Initialization

    // Implementation
    autoA6234571_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoA6234571_ai >= 0 && lv_intPlayer <= autoA6234571_ae) || (autoA6234571_ai < 0 && lv_intPlayer >= autoA6234571_ae) ) ; lv_intPlayer += autoA6234571_ai ) {
        if (((PlayerStatus(lv_intPlayer) == c_playerStatusActive) && (PlayerType(lv_intPlayer) == c_playerTypeUser) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            libPEEP_gf_SaveBankforPlayer(lv_intPlayer);
        }

    }
}

void libPEEP_gf_LoadAllPlayerBanks () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto174C8DB1_ae;
    const int auto174C8DB1_ai = 1;

    // Variable Initialization

    // Implementation
    auto174C8DB1_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto174C8DB1_ai >= 0 && lv_intPlayer <= auto174C8DB1_ae) || (auto174C8DB1_ai < 0 && lv_intPlayer >= auto174C8DB1_ae) ) ; lv_intPlayer += auto174C8DB1_ai ) {
        if (((PlayerType(lv_intPlayer) == c_playerTypeUser) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            libPEEP_gf_LoadBankforPlayer(lv_intPlayer);
            libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intPlayer);
            Wait(0.1, c_timeGame);
        }

    }
}

void libPEEP_gf_HandlePlayerLeavingGame (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_intEarnedChips;

    // Automatic Variable Declarations
    int auto90A11AAD_ae;
    const int auto90A11AAD_ai = 1;
    int auto5B55C127_ae;
    const int auto5B55C127_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayerExitProcessed = true;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount = 0;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetTeam = 0;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout = 0;
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
        libPEEP_gf_RefreshPotLabel();
    }

    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsComputerControlled == false)) {
        libPEEP_gv_recGlobals.lv_iNT_NUM_HUMAN_PLAYERS -= 1;
    }

    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolInactive = true;
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsCommentator == true)) {
        libPEEP_gv_recGlobals.lv_iNT_NUM_COMMENTATORS -= 1;
        if (((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recGlobals.lv_iNT_NUM_COMMENTATORS == 0))) {
            libPEEP_gv_recGameState.lv_intGameStyle = 1;
            libPEEP_gv_recGameState.lv_boolAllCommentatorsLeft = true;
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState != 1)) {
                libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_79EE2F19"), 0, false, false);
            }
            else {
                libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_5AC55E74"), 0, false, false);
            }
        }

    }

    if ((libPEEP_gv_recGameState.lv_boolGameInitComplete == false)) {
        TriggerExecute(libPEEP_gt_ButtonSkipTutorial, true, false);
    }

    if ((libPEEP_gv_recGameState.lv_boolGameInitComplete == true)) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolKicked == false)) {
            libPEEP_gf_CreateChatMessage(0, (TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_F74446D8")), 0, false, false);
        }

        auto90A11AAD_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intTmpPlayer = 1;
        for ( ; ( (auto90A11AAD_ai >= 0 && lv_intTmpPlayer <= auto90A11AAD_ae) || (auto90A11AAD_ai < 0 && lv_intTmpPlayer >= auto90A11AAD_ae) ) ; lv_intTmpPlayer += auto90A11AAD_ai ) {
            if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false)) {
                libPEEP_gf_RefreshLeaderboardforPlayer(lv_intTmpPlayer, libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intRankSortCol, false);
            }

        }
        libPEEP_gf_RefreshAllVoting();
    }

    if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayingMatch == true))) {
        libPEEP_gf_RemovePlayerfromMatch(lp_intPlayer);
        libPEEP_gf_RemovePlayerfromTeam(lp_intPlayer, true);
    }
    else {
        if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSelectedForMatch == true))) {
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_73CBD1D0"), 0, false, false);
            libPEEP_gf_CleanupfromPlayerLeavingPrematurely(lp_intPlayer);
        }
        else {
            libPEEP_gf_RemovePlayerfromTeam(lp_intPlayer, true);
            libPEEP_gf_RefreshPlayerUI();
        }
    }
    auto5B55C127_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto5B55C127_ai >= 0 && lv_intTmpPlayer <= auto5B55C127_ae) || (auto5B55C127_ai < 0 && lv_intTmpPlayer >= auto5B55C127_ae) ) ; lv_intTmpPlayer += auto5B55C127_ai ) {
        libPEEP_gf_RefreshNamePanelPollsforPlayer(lv_intTmpPlayer);
        libPEEP_gf_RefreshNamePanelBettingforPlayer(lv_intTmpPlayer);
    }
}

void libPEEP_gf_CleanupfromPlayerLeavingPrematurely (int lp_intPlayerWhoLeft) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_intTeam;
    int lv_intTeamCounter;
    int lv_intNumPlayers;

    // Automatic Variable Declarations
    int auto48611FC2_ae;
    const int auto48611FC2_ai = 1;
    int auto99CBB92C_ae;
    const int auto99CBB92C_ai = 1;
    int auto7E92AD5A_ae;
    const int auto7E92AD5A_ai = 1;

    // Variable Initialization

    // Implementation
    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    DialogDestroy(libPEEP_gv_recUI.lv_dLoadingMatchDialog);
    TimerPause(libPEEP_gv_recGlobals.lv_timerCameraYaw, true);
    TimerPause(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer, true);
    TimerPause(libPEEP_gv_recGlobals.lv_timerPrepareStartingUnits, true);
    TimerPause(libPEEP_gv_recGlobals.lv_timerFaceoffTransitionEnd, true);
    TimerPause(libPEEP_gv_recGlobals.lv_timerFaceoffTransitionStart, true);
    TimerPause(libPEEP_gv_recGlobals.lv_timerMatchInitTimer, true);
    TimerPause(libPEEP_gv_recGlobals.lv_timerStartMinibattle, true);
    TimerPause(libPEEP_gv_recGlobals.lv_timerBlinkTimer, true);
    auto48611FC2_ae = libPEEP_gv_recGameState.lv_intNumMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto48611FC2_ai >= 0 && lv_intIndex <= auto48611FC2_ae) || (auto48611FC2_ai < 0 && lv_intIndex >= auto48611FC2_ae) ) ; lv_intIndex += auto48611FC2_ai ) {
        libPEEP_gv_recGameState.lv_intMatchPlayerList[lv_intIndex] = 0;
    }
    libPEEP_gv_recGameState.lv_intNumMatchPlayers = 0;
    auto99CBB92C_ae = libPEEP_gv_recGameState.lv_intNumObservers;
    lv_intIndex = 1;
    for ( ; ( (auto99CBB92C_ai >= 0 && lv_intIndex <= auto99CBB92C_ae) || (auto99CBB92C_ai < 0 && lv_intIndex >= auto99CBB92C_ae) ) ; lv_intIndex += auto99CBB92C_ai ) {
        libPEEP_gv_recGameState.lv_intObserverList[lv_intIndex] = 0;
    }
    libPEEP_gv_recGameState.lv_intNumObservers = 0;
    libPEEP_gf_ClearOutMatchSelections();
    auto7E92AD5A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto7E92AD5A_ai >= 0 && lv_intPlayer <= auto7E92AD5A_ae) || (auto7E92AD5A_ai < 0 && lv_intPlayer >= auto7E92AD5A_ae) ) ; lv_intPlayer += auto7E92AD5A_ai ) {
        libPEEP_gf_DestroyPlayerPets(lv_intPlayer);
        libPEEP_gf_ExitMovieModeforPlayer(lv_intPlayer);
        if (((lv_intPlayer == lp_intPlayerWhoLeft) || ((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 1) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 2) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 5)) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == false)))) {
            libPEEP_gf_RemovePlayerfromTeam(lv_intPlayer, false);
            libPEEP_gf_AddPlayertoTeam(lv_intPlayer, 0, false);
        }

    }
    Wait(0.5, c_timeGame);
    libPEEP_gf_InitializeFaceoff();
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 100.0, false);
}

string libPEEP_gf_getTeamUnitOfPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intTeam = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam;
    return libPEEP_gv_recTeams[lv_intTeam].lv_utSpawnUnit;
}

text libPEEP_gf_getTeamNameOfPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intTeam = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam;
    return libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName;
}

text libPEEP_gf_getPlayerDisplayNameForPlayer (int lp_intPlayer, int lp_intObserver) {
    // Variable Declarations
    text lv_txtName;
    string lv_strSubstituteName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_strSubstituteName = "";

    // Implementation
    lv_strSubstituteName = libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diChangePlayerNameChangeTextboxes[lp_intPlayer], lp_intObserver);
    if ((lv_strSubstituteName != "")) {
        lv_txtName = StringToText(lv_strSubstituteName);
    }
    else {
        lv_txtName = PlayerName(lp_intPlayer);
    }
    return lv_txtName;
}

text libPEEP_gf_makePlayerProfileText (int lp_intPlayer) {
    // Variable Declarations
    text lv_txtText;
    fixed lv_realWinPercentage;
    int lv_intRating;
    int lv_intIndex;
    text lv_txtTmp;
    text lv_txtTmp2;
    int lv_intTmp;
    fixed lv_realTmp;

    // Automatic Variable Declarations
    const int auto45390BE2_ae = libPEEP_gv_rACES_COUNT;
    const int auto45390BE2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_txtText = (StringExternal("Param/Value/lib_PEEP_C80ED898") + StringExternal("Param/Value/lib_PEEP_474B0DD7") + IntToText(lp_intPlayer) + StringExternal("Param/Value/lib_PEEP_22DD6F5B") + TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_DB85FBD5"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_F02A6645"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_32D8C7E1") + FixedToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_realBankSonasRating, 2) + StringExternal("Param/Value/lib_PEEP_4BC8D3E6"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_9267811E") + libPEEP_gv_recGlobals.lv_recLeagues[libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankLeague].lv_txtImageIconName + StringExternal("Param/Value/lib_PEEP_2D6E2891") + libPEEP_gv_recGlobals.lv_recLeagues[libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankLeague].lv_txtName + StringExternal("Param/Value/lib_PEEP_0E929193"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_35566BB3") + libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace] + StringExternal("Param/Value/lib_PEEP_46B349CE") + libPEEP_gv_recGlobals.lv_txtRaceNames[libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace] + StringExternal("Param/Value/lib_PEEP_6FFBE0E8"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_029ABB52"));
    lv_intTmp = (libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[1] - libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[1]);
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_57FF8ACF") + IntToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[1]) + StringExternal("Param/Value/lib_PEEP_A1D8F49B") + IntToText(lv_intTmp) + StringExternal("Param/Value/lib_PEEP_363C0CA8") + FixedToText(libPEEP_gf_getPlayerWinPercentage(lp_intPlayer, 1), 1) + StringExternal("Param/Value/lib_PEEP_23500705") + StringExternal("Param/Value/lib_PEEP_C78E36EA"));
    lv_intIndex = 2;
    for ( ; ( (auto45390BE2_ai >= 0 && lv_intIndex <= auto45390BE2_ae) || (auto45390BE2_ai < 0 && lv_intIndex >= auto45390BE2_ae) ) ; lv_intIndex += auto45390BE2_ai ) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBank1v1sPlayedByRace[lv_intIndex] > 0)) {
            lv_realTmp = ((IntToFixed(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBank1v1sWonByRace[lv_intIndex]) * 100.0) / IntToFixed(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBank1v1sPlayedByRace[lv_intIndex]));
        }
        else {
            lv_realTmp = 0;
        }
        lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_1B247ED2") + libPEEP_gv_recGlobals.lv_txtRaceAbbreviations[lv_intIndex] + StringExternal("Param/Value/lib_PEEP_13BCA7DC") + FixedToText(lv_realTmp, 0) + StringExternal("Param/Value/lib_PEEP_2822D3CC"));
    }
    lv_intTmp = (libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[2] - libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[2]);
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_3CDD5B28") + IntToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[2]) + StringExternal("Param/Value/lib_PEEP_6FAF11F1") + IntToText(lv_intTmp) + StringExternal("Param/Value/lib_PEEP_20864A95") + FixedToText(libPEEP_gf_getPlayerWinPercentage(lp_intPlayer, 2), 1) + StringExternal("Param/Value/lib_PEEP_54072E3B") + StringExternal("Param/Value/lib_PEEP_973A77F1"));
    lv_intTmp = (libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[3] - libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[3]);
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_6F4B8FF2") + IntToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[3]) + StringExternal("Param/Value/lib_PEEP_D75F46C7") + IntToText(lv_intTmp) + StringExternal("Param/Value/lib_PEEP_5B4BC6C9") + FixedToText(libPEEP_gf_getPlayerWinPercentage(lp_intPlayer, 3), 1) + StringExternal("Param/Value/lib_PEEP_FC2B0789") + StringExternal("Param/Value/lib_PEEP_80E60611"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_D5DDF8D7"));
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankLossStreak > 0)) {
        lv_txtTmp = StringExternal("Param/Value/lib_PEEP_68D63644");
        lv_txtTmp2 = StringExternal("Param/Value/lib_PEEP_15A76E02");
        lv_intTmp = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankLossStreak;
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWinStreak > 0)) {
            lv_txtTmp = StringExternal("Param/Value/lib_PEEP_2AA695D5");
            lv_txtTmp2 = StringExternal("Param/Value/lib_PEEP_AA5BB237");
            lv_intTmp = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWinStreak;
        }
        else {
            lv_txtTmp = StringExternal("Param/Value/lib_PEEP_4D84CC26");
            lv_intTmp = 0;
        }
    }
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_73827EDB") + libPEEP_gf_formatIntegerAsText(lv_intTmp) + StringExternal("Param/Value/lib_PEEP_32E845EC") + lv_txtTmp);
    if ((lv_intTmp > 1)) {
        lv_txtText = (lv_txtText + lv_txtTmp2);
    }

    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_9AE39D28"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_4354E043") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankBestStreak) + StringExternal("Param/Value/lib_PEEP_7246CD4D"));
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankBestStreak != 1)) {
        lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_D70A47DB"));
    }

    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_AB0D1BF7"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_6AF2EAF4") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWorstStreak) + StringExternal("Param/Value/lib_PEEP_50881FD1"));
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankWorstStreak != 1)) {
        lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_3A95C1B2"));
    }

    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_F5C1E061"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_175CC322"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_4D72A840") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankGamesJoined) + StringExternal("Param/Value/lib_PEEP_F24A072B"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_061EA2AA") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesObserved) + StringExternal("Param/Value/lib_PEEP_66B063A5"));
    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_0878A5AD") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsCashed) + StringExternal("Param/Value/lib_PEEP_CD069826"));
    return lv_txtText;
}

fixed libPEEP_gf_getPlayerWinPercentage (int lp_intPlayer, int lp_intModeIndex) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intOverallWins;
    int lv_intOverallMatches;

    // Automatic Variable Declarations
    const int autoBA76DC3D_ae = 2;
    const int autoBA76DC3D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_intModeIndex == 0)) {
        lv_intIndex = 1;
        for ( ; ( (autoBA76DC3D_ai >= 0 && lv_intIndex <= autoBA76DC3D_ae) || (autoBA76DC3D_ai < 0 && lv_intIndex >= autoBA76DC3D_ae) ) ; lv_intIndex += autoBA76DC3D_ai ) {
            lv_intOverallMatches += libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[lv_intIndex];
            lv_intOverallWins += libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[lv_intIndex];
        }
        if ((lv_intOverallMatches > 0)) {
            return ((IntToFixed(lv_intOverallWins) * 100.0) / IntToFixed(lv_intOverallMatches));
        }
        else {
            return 0.0;
        }
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[lp_intModeIndex] > 0)) {
            return ((IntToFixed(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesWon[lp_intModeIndex]) * 100.0) / IntToFixed(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankMatchesPlayed[lp_intModeIndex]));
        }
        else {
            return 0.0;
        }
    }
}

int libPEEP_gf_getPlayerPeepRating (int lp_intPlayer) {
    // Variable Declarations
    int lv_intRating;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intRating = CeilingI((libPEEP_gf_getPlayerWinPercentage(lp_intPlayer, 0) / 20.0));
    if ((lv_intRating == 0)) {
        lv_intRating = 1;
    }

    return lv_intRating;
}

playergroup libPEEP_gf_pgObservers () {
    // Variable Declarations
    int lv_intPlayer;
    playergroup lv_pgObservers;

    // Automatic Variable Declarations
    int auto0FECAA9B_ae;
    const int auto0FECAA9B_ai = 1;

    // Variable Initialization
    lv_pgObservers = PlayerGroupEmpty();

    // Implementation
    auto0FECAA9B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto0FECAA9B_ai >= 0 && lv_intPlayer <= auto0FECAA9B_ae) || (auto0FECAA9B_ai < 0 && lv_intPlayer >= auto0FECAA9B_ae) ) ; lv_intPlayer += auto0FECAA9B_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            PlayerGroupAdd(lv_pgObservers, lv_intPlayer);
        }

    }
    return lv_pgObservers;
}

playergroup libPEEP_gf_pgPlayers () {
    // Variable Declarations
    int lv_intPlayer;
    playergroup lv_pgPlayers;

    // Automatic Variable Declarations
    int auto6989B377_ae;
    const int auto6989B377_ai = 1;

    // Variable Initialization
    lv_pgPlayers = PlayerGroupEmpty();

    // Implementation
    auto6989B377_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto6989B377_ai >= 0 && lv_intPlayer <= auto6989B377_ae) || (auto6989B377_ai < 0 && lv_intPlayer >= auto6989B377_ae) ) ; lv_intPlayer += auto6989B377_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            PlayerGroupAdd(lv_pgPlayers, lv_intPlayer);
        }

    }
    return lv_pgPlayers;
}

void libPEEP_gf_InitializePlayers () {
    // Variable Declarations
    int lv_intCounter;
    int lv_intNumPlayers;
    int lv_intNumHumanPlayers;
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto4726C1F2_g;
    int auto80E08BE8_ae;
    const int auto80E08BE8_ai = 1;
    const int auto55A3BAC0_ae = 2;
    const int auto55A3BAC0_ai = 1;
    int auto6580FA79_ae;
    const int auto6580FA79_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS = 0;
    auto4726C1F2_g = PlayerGroupAll();
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto4726C1F2_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        libPEEP_gv_recPlayers[lv_intPlayer].lv_pcLobbyPlayerColor = PlayerGetColorIndex(lv_intPlayer, false);
        if (((lv_intPlayer > 0) && (lv_intPlayer < 15))) {
            if ((PlayerType(lv_intPlayer) == c_playerTypeComputer)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsComputerControlled = true;
                lv_intNumPlayers += 1;
                libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPlayerName = PlayerName(lv_intPlayer);
            }
            else {
                if (((PlayerStatus(lv_intPlayer) != c_playerStatusLeft) && (PlayerStatus(lv_intPlayer) != c_playerStatusUnused))) {
                    if (((libPEEP_gv_playerRoles[lv_intPlayer] == libPEEP_ge_PlayerRole_Commentator) || (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true))) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator = true;
                        libPEEP_gv_recGlobals.lv_iNT_NUM_COMMENTATORS += 1;
                    }

                    lv_intNumPlayers += 1;
                    lv_intNumHumanPlayers += 1;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPlayerName = PlayerName(lv_intPlayer);
                    libPEEP_gf_AddPlayertoTeam(lv_intPlayer, 0, false);
                }
                else {
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive = true;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolKicked = true;
                    GameOver(lv_intPlayer, c_gameOverTie, false, true);
                }
            }
        }
        else {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive = true;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolKicked = true;
            GameOver(lv_intPlayer, c_gameOverTie, false, true);
        }
    }
    if ((libPEEP_gv_recGlobals.lv_iNT_NUM_COMMENTATORS == 0)) {
        libPEEP_gv_recGameState.lv_intGameStyle = 1;
    }

    libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS = lv_intNumPlayers;
    libPEEP_gv_recGlobals.lv_iNT_NUM_HUMAN_PLAYERS = lv_intNumHumanPlayers;
    auto80E08BE8_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto80E08BE8_ai >= 0 && lv_intPlayer <= auto80E08BE8_ae) || (auto80E08BE8_ai < 0 && lv_intPlayer >= auto80E08BE8_ae) ) ; lv_intPlayer += auto80E08BE8_ai ) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 1;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(19.0, 81.0, 41.0);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(100,100,100);
        if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 1;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(19.0, 81.0, 41.0);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(100,100,100);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 2;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(19.0, 81.0, 41.0);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(75.69, 100.00, 75.69);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 3;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(85.0, 48.0, 30.0);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(85.0, 48.0, 30.0);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 4;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(28*100/255,167*100/255,234*100/255);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(28*100/255,167*100/255,234*100/255);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 5;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(0,66*100/255,100);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(0,66*100/255,100);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 6;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(100.00, 0.00, 0.00);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(100.00, 0.00, 0.00);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 7;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(150*100/255,150*100/255,30*100/255);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(150*100/255,150*100/255,30*100/255);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 8;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(16*100/255,98*100/255,70*100/255);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(16*100/255,98*100/255,70*100/255);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 9;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(84*100/255,0,129*100/255);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(84*100/255,0,129*100/255);
        }
        else if (true) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = 10;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor = Color(0,0,0);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor = Color(0,0,0);
        }
        lv_intCounter = 0;
        for ( ; ( (auto55A3BAC0_ai >= 0 && lv_intCounter <= auto55A3BAC0_ae) || (auto55A3BAC0_ai < 0 && lv_intCounter >= auto55A3BAC0_ae) ) ; lv_intCounter += auto55A3BAC0_ai ) {
            CatalogFieldValueSet(c_gameCatalogUnit, "Zergling", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "ChangelingZergling", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "ChangelingZerglingWings", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Ultralisk", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Queen", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Marine", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "ChangelingMarine", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "ChangelingMarineShield", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Marauder", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Thor", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "ThorAP", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Zealot", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "ChangelingZealot", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "HighTemplar", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Immortal", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
            CatalogFieldValueSet(c_gameCatalogUnit, "Adept", "TauntDuration[" + IntToString(lv_intCounter) + "]", lv_intPlayer, "0");
        }
    }
    auto6580FA79_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto6580FA79_ai >= 0 && lv_intPlayer <= auto6580FA79_ae) || (auto6580FA79_ai < 0 && lv_intPlayer >= auto6580FA79_ae) ) ; lv_intPlayer += auto6580FA79_ai ) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_lightgreen.dds";
        libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_lightgreen.dds";
        libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_white_left.dds";
        libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_white_right.dds";
        libPEEP_gf_SetPlayerAssetsBasedonColor(lv_intPlayer);
    }
}

void libPEEP_gf_MakeDummy (int lp_intPlayer, int lp_intTeam, bool lp_boolFirstCall) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boolFirstCall == false)) {
        libPEEP_gf_RemovePlayerfromTeam(lp_intPlayer, true);
    }

    libPEEP_gf_AddPlayertoTeam(lp_intPlayer, lp_intTeam, true);
}

void libPEEP_gf_SetPlayerColorstoColorScheme () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;
    int lv_intSide;
    int lv_intTeamIndex;
    int lv_intTeam;
    int lv_intGroupIndex;
    int lv_intColorIndex;
    int[18] lv_pcPlayerNewColorList;
    bool lv_bool1v1;
    int lv_pcTmpColor;
    bool[18] lv_boolPlayerColorChanged;
    text lv_txtColor;

    // Automatic Variable Declarations
    const int autoF748915F_ae = 2;
    const int autoF748915F_ai = 1;
    int auto1966ECF3_ae;
    const int auto1966ECF3_ai = 1;
    int auto8121046B_ae;
    const int auto8121046B_ai = 1;
    int autoB1DD8A1F_ae;
    const int autoB1DD8A1F_ai = 1;
    int auto4F70C709_ae;
    const int auto4F70C709_ai = 1;
    playergroup auto34424727_g;
    int auto34424727_var;
    int autoB0648360_ae;
    const int autoB0648360_ai = 1;

    // Variable Initialization
    lv_pcTmpColor = 1;

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentColorScheme == 5)) {
        auto4F70C709_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto4F70C709_ai >= 0 && lv_intPlayer <= auto4F70C709_ae) || (auto4F70C709_ai < 0 && lv_intPlayer >= auto4F70C709_ae) ) ; lv_intPlayer += auto4F70C709_ai ) {
            if ((PlayerGetColorIndex(lv_intPlayer, false) != libPEEP_gv_recPlayers[lv_intPlayer].lv_pcLobbyPlayerColor)) {
                PlayerSetColorIndex(lv_intPlayer, libPEEP_gv_recPlayers[lv_intPlayer].lv_pcLobbyPlayerColor, true);
                lv_boolPlayerColorChanged[lv_intPlayer] = true;
            }

        }
    }
    else {
        lv_intSide = 1;
        for ( ; ( (autoF748915F_ai >= 0 && lv_intSide <= autoF748915F_ae) || (autoF748915F_ai < 0 && lv_intSide >= autoF748915F_ae) ) ; lv_intSide += autoF748915F_ai ) {
            lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intSide];
            if ((lv_intSide == 2)) {
                lv_intGroupIndex = (3 - lv_intGroupIndex);
            }
            else {
                lv_intGroupIndex = RandomInt(1, 2);
            }
            auto1966ECF3_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
            lv_intTeamIndex = 1;
            for ( ; ( (auto1966ECF3_ai >= 0 && lv_intTeamIndex <= auto1966ECF3_ae) || (auto1966ECF3_ai < 0 && lv_intTeamIndex >= auto1966ECF3_ae) ) ; lv_intTeamIndex += auto1966ECF3_ai ) {
                if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 1)) {
                    lv_intColorIndex = 1;
                    lv_bool1v1 = true;
                }
                else {
                    lv_intColorIndex = lv_intTeamIndex;
                }
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intTeamIndex];
                lv_pcPlayerNewColorList[lv_intPlayer] = libPEEP_gv_recGlobals.lv_recColorSchemes[libPEEP_gv_recGameState.lv_intCurrentColorScheme].lv_pcPlayerColors[lv_intGroupIndex][lv_intColorIndex];
            }
        }
        if ((lv_bool1v1 == true)) {
            lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[1];
            lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
            if ((PlayerGetColorIndex(lv_intPlayer, false) == lv_pcPlayerNewColorList[lv_intPlayer])) {
                lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[2];
                lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
                lv_pcTmpColor = lv_pcPlayerNewColorList[lv_intPlayer];
                lv_pcPlayerNewColorList[lv_intPlayer] = lv_pcPlayerNewColorList[lv_intTmpPlayer];
                lv_pcPlayerNewColorList[lv_intTmpPlayer] = lv_pcTmpColor;
            }

        }

        auto8121046B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto8121046B_ai >= 0 && lv_intPlayer <= auto8121046B_ae) || (auto8121046B_ai < 0 && lv_intPlayer >= auto8121046B_ae) ) ; lv_intPlayer += auto8121046B_ai ) {
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0)) {
                if ((PlayerGetColorIndex(lv_intPlayer, false) != lv_pcPlayerNewColorList[lv_intPlayer])) {
                    autoB1DD8A1F_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                    lv_intTmpPlayer = 1;
                    for ( ; ( (autoB1DD8A1F_ai >= 0 && lv_intTmpPlayer <= autoB1DD8A1F_ae) || (autoB1DD8A1F_ai < 0 && lv_intTmpPlayer >= autoB1DD8A1F_ae) ) ; lv_intTmpPlayer += autoB1DD8A1F_ai ) {
                        if ((PlayerGetColorIndex(lv_intTmpPlayer, false) == lv_pcPlayerNewColorList[lv_intPlayer])) {
                            while ((PlayerGetColorIndex(lv_intTmpPlayer, false) != PlayerGetColorIndex(lv_intPlayer, false))) {
                                PlayerSetColorIndex(lv_intTmpPlayer, PlayerGetColorIndex(lv_intPlayer, false), true);
                                lv_boolPlayerColorChanged[lv_intTmpPlayer] = true;
                            }
                            break;
                        }

                    }
                    PlayerSetColorIndex(lv_intPlayer, lv_pcPlayerNewColorList[lv_intPlayer], true);
                    lv_boolPlayerColorChanged[lv_intPlayer] = true;
                }

            }

        }
    }
    auto34424727_g = PlayerGroupAll();
    auto34424727_var = -1;
    while (true) {
        auto34424727_var = PlayerGroupNextPlayer(auto34424727_g, auto34424727_var);
        if (auto34424727_var < 0) { break; }
        if ((libPEEP_gv_recPlayers[auto34424727_var].lv_uFaceoffUnit != null)) {
            UnitSetTeamColorIndex(libPEEP_gv_recPlayers[auto34424727_var].lv_uFaceoffUnit, PlayerGetColorIndex(auto34424727_var, false));
        }

    }
    autoB0648360_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoB0648360_ai >= 0 && lv_intPlayer <= autoB0648360_ae) || (autoB0648360_ai < 0 && lv_intPlayer >= autoB0648360_ae) ) ; lv_intPlayer += autoB0648360_ai ) {
        libPEEP_gf_SetPlayerAssetsBasedonColor(lv_intPlayer);
    }
    libPEEP_gf_RefreshLeaderboardforAllPlayers();
    libPEEP_gf_RefreshChatLogPlayerListing();
}

void libPEEP_gf_KickUnregisteredPlayers () {
    // Automatic Variable Declarations
    playergroup auto85CB07B5_g;
    int auto85CB07B5_var;

    // Implementation
    auto85CB07B5_g = PlayerGroupAll();
    auto85CB07B5_var = -1;
    while (true) {
        auto85CB07B5_var = PlayerGroupNextPlayer(auto85CB07B5_g, auto85CB07B5_var);
        if (auto85CB07B5_var < 0) { break; }
        if ((auto85CB07B5_var > libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS)) {
            GameOver(auto85CB07B5_var, c_gameOverTie, false, true);
        }

    }
}

void libPEEP_gf_SetPlayerAssetsBasedonColor (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGetColorIndex(lp_intPlayer, false) == 0)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_white.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_white.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_white_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_white_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 2)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_blue.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_blue.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_blue_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_blue_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 12)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_brown.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_brown.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_brown_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_brown_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 11)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_darkgreen.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_darkgreen.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_darkgreen_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_darkgreen_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 10)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_lightgrey.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_lightgrey.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_lightgray_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_lightgray_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 7)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_green.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_green.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_green_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_green_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 13)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_lightgreen.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_lightgreen.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_lightgreen_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_lightgreen_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 14)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_darkgrey.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_darkgrey.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_darkgray_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_darkgray_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 8)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_lightpink.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_lightpink.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_lightpink_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_lightpink_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 6)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_orange.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_orange.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_orange_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_orange_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 15)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_pink.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_pink.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_pink_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_pink_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 4)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_purple.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_purple.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_purple_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_purple_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 1)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_red.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_red.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_red_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_red_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 3)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_teal.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_teal.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_teal_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_teal_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 9)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_violet.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_violet.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_violet_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_violet_right.dds";
    }
    else if ((PlayerGetColorIndex(lp_intPlayer, false) == 5)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftTOWImage = "Assets\\Textures\\towbar_left_yellow.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightTOWImage = "Assets\\Textures\\towbar_right_yellow.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgLeftColorStrip = "Assets\\Textures\\namepanel_color_yellow_left.dds";
        libPEEP_gv_recPlayers[lp_intPlayer].lv_imgRightColorStrip = "Assets\\Textures\\namepanel_color_yellow_right.dds";
    }
}

void libPEEP_gf_CalculateTeamInfo () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intRace;
    int lv_intNumActiveTeams;
    fixed lv_realDegreeStep;
    fixed lv_realDegrees;
    fixed lv_realDegreeBaseOffset;
    text lv_txtPlayerList;
    int lv_intTeam;
    int lv_intTeam2;
    int lv_intPlayer;
    bool lv_boolPlayerSet;
    bool lv_boolCommonerOnTeam;
    int lv_intRand;
    text lv_txtImageTag;
    int lv_intNumMatchesPlayed;
    int lv_intRatingSum;
    int lv_intAverageRating;
    bool lv_boolDisplayCrown;
    bool lv_boolDisplayMatchCount;
    text lv_txtMessage;
    bool lv_boolLeagueDeclared;
    text lv_txtSimpleTeamName;

    // Automatic Variable Declarations
    int auto22E0327E_ae;
    const int auto22E0327E_ai = 1;
    int auto705DBD96_ae;
    const int auto705DBD96_ai = 1;
    int auto3046CA54_ae;
    const int auto3046CA54_ai = 1;
    int auto4F965EBA_ae;
    const int auto4F965EBA_ai = 1;
    int auto6E3775A8_ae;
    const int auto6E3775A8_ai = 1;
    int autoFB568C9C_ae;
    const int autoFB568C9C_ai = 1;
    int auto9330D500_ae;
    const int auto9330D500_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gv_recGlobals.lv_intKingTeamSize = 0;
    auto22E0327E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto22E0327E_ai >= 0 && lv_intTeam <= auto22E0327E_ae) || (auto22E0327E_ai < 0 && lv_intTeam >= auto22E0327E_ae) ) ; lv_intTeam += auto22E0327E_ai ) {
        libPEEP_gv_recTeams[lv_intTeam].lv_txtPlayerList = StringToText("");
        lv_boolCommonerOnTeam = false;
        lv_intNumMatchesPlayed = 0;
        lv_intRatingSum = 0;
        libPEEP_gv_recTeams[lv_intTeam].lv_txtSpecialTextTag = StringToText("");
        auto705DBD96_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto705DBD96_ai >= 0 && lv_intIndex <= auto705DBD96_ae) || (auto705DBD96_ai < 0 && lv_intIndex >= auto705DBD96_ae) ) ; lv_intIndex += auto705DBD96_ai ) {
            lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
            lv_intNumMatchesPlayed += libPEEP_gv_recPlayers[lv_intPlayer].lv_intMatchesPlayedThisGame;
            lv_intRatingSum += FixedToInt(libPEEP_gv_recPlayers[lv_intPlayer].lv_realBankSonasRating);
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == false)) {
                lv_boolCommonerOnTeam = true;
            }

        }
        libPEEP_gv_recTeams[lv_intTeam].lv_intNumMatchesPlayed = lv_intNumMatchesPlayed;
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0)) {
            lv_intAverageRating = (lv_intRatingSum / libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers);
        }
        else {
            lv_intAverageRating = 0;
        }
        libPEEP_gv_recTeams[lv_intTeam].lv_intAverageRating = lv_intAverageRating;
        if (((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0) && (lv_boolCommonerOnTeam == false))) {
            libPEEP_gv_recTeams[lv_intTeam].lv_boolWinnerToken = true;
            libPEEP_gv_recGlobals.lv_intKingTeamSize = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        }
        else {
            libPEEP_gv_recTeams[lv_intTeam].lv_boolWinnerToken = false;
        }
        if ((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 4)) {
            libPEEP_gv_recTeams[lv_intTeam].lv_txtSpecialTextTag = StringToText("");
        }
        else if (((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 2) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 3))) {
            if ((lv_intNumMatchesPlayed > 0)) {
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_607BAD7B") + TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intNumMatchesPlayed), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_275F7C0E"));
                if ((lv_intNumMatchesPlayed != 1)) {
                    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_757E6BB7"));
                }

                lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_2B7D0FF1") + StringExternal("Param/Value/lib_PEEP_90B6FAE9"));
            }
            else {
                lv_txtMessage = StringToText("");
            }
            libPEEP_gv_recTeams[lv_intTeam].lv_txtSpecialTextTag = lv_txtMessage;
        }
        else if (((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 5) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 6))) {
            lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_BA44BD3D") + StringExternal("Param/Value/lib_PEEP_94CBE522") + TextWithColor(IntToText(lv_intAverageRating), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_FC81BAA5"));
            libPEEP_gv_recTeams[lv_intTeam].lv_txtSpecialTextTag = lv_txtMessage;
        }
        if (((lv_boolCommonerOnTeam == false) && ((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 1) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 2) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 5)))) {
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_70867FD4");
            if (((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 1) && (libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1]].lv_intWins > 1))) {
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_FFAFDEA6") + TextWithColor(IntToText(libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1]].lv_intWins), Color(92.16, 93.33, 35.69)) + StringExternal("Param/Value/lib_PEEP_9E351519") + lv_txtMessage);
            }

            libPEEP_gv_recTeams[lv_intTeam].lv_txtSpecialTextTag = lv_txtMessage;
        }

    }
    auto3046CA54_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto3046CA54_ai >= 0 && lv_intTeam <= auto3046CA54_ae) || (auto3046CA54_ai < 0 && lv_intTeam >= auto3046CA54_ae) ) ; lv_intTeam += auto3046CA54_ai ) {
        lv_txtPlayerList = libPEEP_gv_recTeams[lv_intTeam].lv_txtPlayerList;
        lv_boolLeagueDeclared = false;
        auto4F965EBA_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto4F965EBA_ai >= 0 && lv_intIndex <= auto4F965EBA_ae) || (auto4F965EBA_ai < 0 && lv_intIndex >= auto4F965EBA_ae) ) ; lv_intIndex += auto4F965EBA_ai ) {
            if ((libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex]].lv_intBankLeague > 1)) {
                lv_boolLeagueDeclared = true;
            }

        }
        auto6E3775A8_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto6E3775A8_ai >= 0 && lv_intIndex <= auto6E3775A8_ae) || (auto6E3775A8_ai < 0 && lv_intIndex >= auto6E3775A8_ae) ) ; lv_intIndex += auto6E3775A8_ai ) {
            lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
            lv_intRace = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace;
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLeague > 1)) {
                lv_txtImageTag = (StringExternal("Param/Value/lib_PEEP_4FB8191A") + libPEEP_gv_recGlobals.lv_recLeagues[libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLeague].lv_txtImageIconName + StringExternal("Param/Value/lib_PEEP_B9BCA714"));
            }
            else {
                if ((lv_boolLeagueDeclared == true)) {
                    lv_txtImageTag = (StringExternal("Param/Value/lib_PEEP_FCBA6806") + StringExternal("Param/Value/lib_PEEP_D4102C61") + StringExternal("Param/Value/lib_PEEP_3248DA45"));
                }
                else {
                    lv_txtImageTag = StringToText("");
                }
            }
            lv_txtPlayerList = (lv_txtPlayerList + lv_txtImageTag);
            lv_txtImageTag = (StringExternal("Param/Value/lib_PEEP_413C1181") + libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[lv_intRace] + StringExternal("Param/Value/lib_PEEP_D298D927"));
            lv_txtPlayerList = (lv_txtPlayerList + lv_txtImageTag);
            lv_txtPlayerList = (lv_txtPlayerList + StringExternal("Param/Value/lib_PEEP_F5AADDE5"));
            lv_txtPlayerList = (lv_txtPlayerList + TextWithColor(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPlayerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
            lv_txtPlayerList = (lv_txtPlayerList + StringExternal("Param/Value/lib_PEEP_D0B71693"));
            if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == true) && (libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 1) && (libPEEP_gv_recTeams[lv_intTeam].lv_boolWinnerToken == false))) {
                lv_txtPlayerList = (lv_txtPlayerList + StringExternal("Param/Value/lib_PEEP_37CB2013"));
            }

            if ((lv_intIndex < libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers)) {
                lv_txtPlayerList = (lv_txtPlayerList + StringExternal("Param/Value/lib_PEEP_F90CA753"));
            }

        }
        libPEEP_gv_recTeams[lv_intTeam].lv_txtPlayerList = lv_txtPlayerList;
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0)) {
            if ((lv_intTeam > 0)) {
                lv_intNumActiveTeams += 1;
            }

        }

    }
    libPEEP_gv_recGlobals.lv_intNumActiveTeams = lv_intNumActiveTeams;
    libPEEP_gf_RefreshTeamSelectionList();
    libPEEP_gf_CalculateFaceoffPoints();
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        if (((TimerIsPaused(libPEEP_gv_recGlobals.lv_timerMatchCountdown) == true) || (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) <= 0.0))) {
            if ((libPEEP_gf_matchConditionsMet(libPEEP_gv_recGameState.lv_intCurrentMatchMode) == true)) {
                SoundPlay(SoundLink("UI_PopUpWindowEnters", -1), PlayerGroupAll(), 100.0, 0.0);
                TimerStart(libPEEP_gv_recGlobals.lv_timerMatchCountdown, libPEEP_gv_recGlobals.lv_realMatchCountdownPeriod, false, c_timeReal);
                DialogSetVisible(libPEEP_gv_recUI.lv_dMatchCountdownDialog, PlayerGroupAll(), true);
            }

        }
        else {
            if ((libPEEP_gf_matchConditionsMet(libPEEP_gv_recGameState.lv_intCurrentMatchMode) == false)) {
                SoundPlay(SoundLink("UI_MissionLaunchMenu_Disappear", -1), PlayerGroupAll(), 100.0, 0.0);
                TimerPause(libPEEP_gv_recGlobals.lv_timerMatchCountdown, true);
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diSubMatchCountdown, StringToText(""), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, StringToText(""), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diSubMatchCountdown, StringToText(""), PlayerGroupAll());
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), true);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, PlayerGroupAll(), true);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, PlayerGroupAll(), true);
                libPEEP_gv_recGameState.lv_boolMatchModeVotingActive = true;
                autoFB568C9C_ae = libPEEP_gv_recGlobals.lv_intNumCountdownActors;
                lv_intIndex = 1;
                for ( ; ( (autoFB568C9C_ai >= 0 && lv_intIndex <= autoFB568C9C_ae) || (autoFB568C9C_ai < 0 && lv_intIndex >= autoFB568C9C_ae) ) ; lv_intIndex += autoFB568C9C_ai ) {
                    ActorScopeKill(ActorScopeFromActor(libPEEP_gv_recGlobals.lv_asMatchCountdownActors[lv_intIndex]));
                }
            }

        }
        auto9330D500_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
        lv_intTeam = 1;
        for ( ; ( (auto9330D500_ai >= 0 && lv_intTeam <= auto9330D500_ae) || (auto9330D500_ai < 0 && lv_intTeam >= auto9330D500_ae) ) ; lv_intTeam += auto9330D500_ai ) {
            libPEEP_gv_recTeams[lv_intTeam].lv_boolEligibleForMatch = false;
        }
        libPEEP_gf_CalculateTeamSelections(libPEEP_gv_recGameState.lv_intCurrentMatchMode, false);
        libPEEP_gf_RefreshFaceoff();
    }

}

void libPEEP_gf_RefreshTeamSelectionList () {
    // Variable Declarations
    int lv_intX;
    int lv_intY;
    int lv_intPlayer;
    int lv_intTeam;
    bool lv_boolMatched;
    int lv_intIndex;
    int lv_int;
    int[18] lv_intTempTeamList;
    int[18] lv_intTempValueList;
    bool lv_boolSwapTookPlace;
    int lv_intTmp;
    int lv_intNumTeams;
    int lv_intLastValue;
    int lv_intRatingGroupSize;

    // Automatic Variable Declarations
    const int autoAA906808_ae = 16;
    const int autoAA906808_ai = 1;
    const int auto5196299C_ae = 16;
    const int auto5196299C_ai = 1;
    int auto4274B301_ae;
    const int auto4274B301_ai = 1;
    int autoC241B677_ae;
    const int autoC241B677_ai = 1;
    int auto444223EC_ae;
    const int auto444223EC_ai = 1;
    int autoBFE3D24B_ae;
    const int autoBFE3D24B_ai = 1;
    int auto0E9212DA_ae;
    const int auto0E9212DA_ai = 1;
    int auto2B9E6FFD_ae;
    const int auto2B9E6FFD_ai = 1;

    // Variable Initialization
    lv_boolSwapTookPlace = true;
    lv_intRatingGroupSize = 30;

    // Implementation
    lv_intX = 0;
    for ( ; ( (autoAA906808_ai >= 0 && lv_intX <= autoAA906808_ae) || (autoAA906808_ai < 0 && lv_intX >= autoAA906808_ae) ) ; lv_intX += autoAA906808_ai ) {
        libPEEP_gv_recGlobals.lv_intTeamSelectionCounts[lv_intX] = 0;
        lv_intY = 1;
        for ( ; ( (auto5196299C_ai >= 0 && lv_intY <= auto5196299C_ae) || (auto5196299C_ai < 0 && lv_intY >= auto5196299C_ae) ) ; lv_intY += auto5196299C_ai ) {
            libPEEP_gv_recGlobals.lv_intTeamSelectionList[lv_intX][lv_intY] = 0;
        }
    }
    if (((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 1) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 2) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 5))) {
        lv_intY = 0;
        auto4274B301_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
        lv_intTeam = 1;
        for ( ; ( (auto4274B301_ai >= 0 && lv_intTeam <= auto4274B301_ae) || (auto4274B301_ai < 0 && lv_intTeam >= auto4274B301_ae) ) ; lv_intTeam += auto4274B301_ai ) {
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_boolWinnerToken == true)) {
                lv_intY += 1;
                libPEEP_gv_recGlobals.lv_intTeamSelectionList[0][lv_intY] = lv_intTeam;
            }

        }
        libPEEP_gv_recGlobals.lv_intTeamSelectionCounts[0] = lv_intY;
    }

    lv_intNumTeams = 0;
    autoC241B677_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (autoC241B677_ai >= 0 && lv_intTeam <= autoC241B677_ae) || (autoC241B677_ai < 0 && lv_intTeam >= autoC241B677_ae) ) ; lv_intTeam += autoC241B677_ai ) {
        if (((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0) && ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == libPEEP_gv_recGlobals.lv_intKingTeamSize) || (libPEEP_gv_recGlobals.lv_intKingTeamSize == 0) || ((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 1) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 2) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 5))))) {
            lv_boolMatched = false;
            auto444223EC_ae = libPEEP_gv_recGlobals.lv_intTeamSelectionCounts[0];
            lv_intIndex = 1;
            for ( ; ( (auto444223EC_ai >= 0 && lv_intIndex <= auto444223EC_ae) || (auto444223EC_ai < 0 && lv_intIndex >= auto444223EC_ae) ) ; lv_intIndex += auto444223EC_ai ) {
                if ((libPEEP_gv_recGlobals.lv_intTeamSelectionList[0][lv_intIndex] == lv_intTeam)) {
                    lv_boolMatched = true;
                    break;
                }

            }
            if ((lv_boolMatched == false)) {
                lv_intNumTeams += 1;
                lv_intTempTeamList[lv_intNumTeams] = lv_intTeam;
            }

        }

    }
    autoBFE3D24B_ae = lv_intNumTeams;
    lv_intIndex = 1;
    for ( ; ( (autoBFE3D24B_ai >= 0 && lv_intIndex <= autoBFE3D24B_ae) || (autoBFE3D24B_ai < 0 && lv_intIndex >= autoBFE3D24B_ae) ) ; lv_intIndex += autoBFE3D24B_ai ) {
        lv_intTempValueList[lv_intIndex] = 0;
        if (((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 2) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 3))) {
            lv_intTempValueList[lv_intIndex] = libPEEP_gv_recTeams[lv_intTempTeamList[lv_intIndex]].lv_intNumMatchesPlayed;
        }
        else if (((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 5) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 6))) {
            lv_intTmp = libPEEP_gv_recTeams[lv_intTempTeamList[lv_intIndex]].lv_intAverageRating;
            lv_intTempValueList[lv_intIndex] = (lv_intTmp / lv_intRatingGroupSize);
        }
        else if ((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 7)) {
            lv_intTempValueList[lv_intIndex] = libPEEP_gv_recTeams[lv_intTempTeamList[lv_intIndex]].lv_intCommentatorVotes;
        }
    }
    while ((lv_boolSwapTookPlace == true)) {
        lv_boolSwapTookPlace = false;
        auto0E9212DA_ae = lv_intNumTeams;
        lv_intIndex = 1;
        for ( ; ( (auto0E9212DA_ai >= 0 && lv_intIndex <= auto0E9212DA_ae) || (auto0E9212DA_ai < 0 && lv_intIndex >= auto0E9212DA_ae) ) ; lv_intIndex += auto0E9212DA_ai ) {
            if (((lv_intIndex + 1) <= lv_intNumTeams) && ((((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 5) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 6) || (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 7)) && (lv_intTempValueList[lv_intIndex] < lv_intTempValueList[(lv_intIndex + 1)])) || ((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 5) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 6) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 7) && (lv_intTempValueList[lv_intIndex] > lv_intTempValueList[(lv_intIndex + 1)])))) {
                lv_boolSwapTookPlace = true;
                lv_intTmp = lv_intTempTeamList[lv_intIndex];
                lv_intTempTeamList[lv_intIndex] = lv_intTempTeamList[(lv_intIndex + 1)];
                lv_intTempTeamList[(lv_intIndex + 1)] = lv_intTmp;
                lv_intTmp = lv_intTempValueList[lv_intIndex];
                lv_intTempValueList[lv_intIndex] = lv_intTempValueList[(lv_intIndex + 1)];
                lv_intTempValueList[(lv_intIndex + 1)] = lv_intTmp;
            }

        }
    }
    lv_intX = 0;
    lv_intLastValue = -1;
    auto2B9E6FFD_ae = lv_intNumTeams;
    lv_intIndex = 1;
    for ( ; ( (auto2B9E6FFD_ai >= 0 && lv_intIndex <= auto2B9E6FFD_ae) || (auto2B9E6FFD_ai < 0 && lv_intIndex >= auto2B9E6FFD_ae) ) ; lv_intIndex += auto2B9E6FFD_ai ) {
        lv_intTeam = lv_intTempTeamList[lv_intIndex];
        if ((lv_intLastValue != lv_intTempValueList[lv_intIndex])) {
            if ((lv_intX > 0)) {
                libPEEP_gv_recGlobals.lv_intTeamSelectionCounts[lv_intX] = lv_intY;
            }

            lv_intX += 1;
            lv_intY = 0;
            lv_intLastValue = lv_intTempValueList[lv_intIndex];
        }

        lv_intY += 1;
        libPEEP_gv_recGlobals.lv_intTeamSelectionCounts[lv_intX] += 1;
        libPEEP_gv_recGlobals.lv_intTeamSelectionList[lv_intX][lv_intY] = lv_intTeam;
    }
}

void libPEEP_gf_CalculateTeamSelections (int lp_intMatchMode, bool lp_boolSelectTeams) {
    // Variable Declarations
    int[5] lv_intEligibleModeList;
    int lv_intIndex;
    int lv_intTeam;
    int lv_intRand;
    int lv_intTmpMatchMode;
    int lv_intTopIndex;
    int lv_intTeamSize;
    int lv_intMinimumTeams;
    int lv_intMaximumTeams;
    bool lv_boolProceedWithSelection;
    int[18][18] lv_intList;
    int[18] lv_intListCount;
    int lv_intX;
    int lv_intY;
    int lv_intNumSelected;
    int lv_intTeamCount;

    // Automatic Variable Declarations
    const int auto19EF1989_ae = 16;
    const int auto19EF1989_ai = 1;
    int auto013308A2_ae;
    const int auto013308A2_ai = 1;
    const int autoD232E467_ae = 16;
    const int autoD232E467_ai = 1;
    int autoC120DB1C_ae;
    const int autoC120DB1C_ai = 1;
    int auto74ACF2B5_ae;
    const int auto74ACF2B5_ai = 1;
    int autoE9ED8338_ae;
    const int autoE9ED8338_ai = 1;
    int autoF69CC719_ae;
    const int autoF69CC719_ai = 1;
    int auto739DD7AF_ae;
    const int auto739DD7AF_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gf_ClearOutMatchSelections();
    if (((lp_intMatchMode == 4) || (lp_intMatchMode == 5) || (lp_intMatchMode == 6))) {
        if ((lp_intMatchMode == 4)) {
            lv_intTopIndex = 2;
        }
        else {
            lv_intTopIndex = 3;
        }
        if ((lp_boolSelectTeams == false)) {
            autoF69CC719_ae = lv_intTopIndex;
            lv_intTmpMatchMode = 1;
            for ( ; ( (autoF69CC719_ai >= 0 && lv_intTmpMatchMode <= autoF69CC719_ae) || (autoF69CC719_ai < 0 && lv_intTmpMatchMode >= autoF69CC719_ae) ) ; lv_intTmpMatchMode += autoF69CC719_ai ) {
                if (((libPEEP_gf_matchConditionsMet(lv_intTmpMatchMode) == true) && ((lv_intTmpMatchMode != 2) || (lp_intMatchMode != 6)))) {
                    libPEEP_gf_CalculateTeamSelections(lv_intTmpMatchMode, false);
                }

            }
        }
        else {
            libPEEP_gv_recGameState.lv_intTrueMatchMode = 0;
            lv_intIndex = 0;
            auto739DD7AF_ae = lv_intTopIndex;
            lv_intTmpMatchMode = 1;
            for ( ; ( (auto739DD7AF_ai >= 0 && lv_intTmpMatchMode <= auto739DD7AF_ae) || (auto739DD7AF_ai < 0 && lv_intTmpMatchMode >= auto739DD7AF_ae) ) ; lv_intTmpMatchMode += auto739DD7AF_ai ) {
                if (((libPEEP_gf_matchConditionsMet(lv_intTmpMatchMode) == true) && ((lv_intTmpMatchMode != 2) || (lp_intMatchMode != 6)))) {
                    lv_intIndex += 1;
                    lv_intEligibleModeList[lv_intIndex] = lv_intTmpMatchMode;
                }

            }
            lv_intRand = RandomInt(1, lv_intIndex);
            libPEEP_gv_recGameState.lv_intTrueMatchMode = lv_intEligibleModeList[lv_intRand];
            libPEEP_gf_CalculateTeamSelections(libPEEP_gv_recGameState.lv_intTrueMatchMode, true);
        }
    }
    else {
        libPEEP_gv_recGameState.lv_intTrueMatchMode = lp_intMatchMode;
        lv_boolProceedWithSelection = false;
        if (((lp_intMatchMode == 1) && (libPEEP_gf_matchConditionsMet(1) == true))) {
            lv_boolProceedWithSelection = true;
            lv_intTeamSize = 1;
            lv_intMinimumTeams = 2;
            lv_intMaximumTeams = 2;
        }
        else if (((lp_intMatchMode == 2) && (libPEEP_gf_matchConditionsMet(2) == true))) {
            lv_boolProceedWithSelection = true;
            lv_intTeamSize = 2;
            lv_intMinimumTeams = 2;
            lv_intMaximumTeams = 2;
        }
        else if (((lp_intMatchMode == 3) && (libPEEP_gf_matchConditionsMet(3) == true))) {
            lv_boolProceedWithSelection = true;
            lv_intTeamSize = 1;
            lv_intMinimumTeams = 3;
            lv_intMaximumTeams = 4;
        }
        libPEEP_gv_recGlobals.lv_intMaxTeamsForNextMatch = lv_intMaximumTeams;
        libPEEP_gv_recGlobals.lv_intCurrentTeamSize = lv_intTeamSize;
        if ((lv_boolProceedWithSelection == true)) {
            lv_intX = 0;
            for ( ; ( (auto19EF1989_ai >= 0 && lv_intX <= auto19EF1989_ae) || (auto19EF1989_ai < 0 && lv_intX >= auto19EF1989_ae) ) ; lv_intX += auto19EF1989_ai ) {
                auto013308A2_ae = libPEEP_gv_recGlobals.lv_intTeamSelectionCounts[lv_intX];
                lv_intY = 1;
                for ( ; ( (auto013308A2_ai >= 0 && lv_intY <= auto013308A2_ae) || (auto013308A2_ai < 0 && lv_intY >= auto013308A2_ae) ) ; lv_intY += auto013308A2_ai ) {
                    lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamSelectionList[lv_intX][lv_intY];
                    if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == lv_intTeamSize)) {
                        lv_intListCount[lv_intX] += 1;
                        lv_intList[lv_intX][lv_intListCount[lv_intX]] = libPEEP_gv_recGlobals.lv_intTeamSelectionList[lv_intX][lv_intY];
                    }

                }
            }
            lv_intTeamCount = 0;
            lv_intX = 0;
            for ( ; ( (autoD232E467_ai >= 0 && lv_intX <= autoD232E467_ae) || (autoD232E467_ai < 0 && lv_intX >= autoD232E467_ae) ) ; lv_intX += autoD232E467_ai ) {
                if ((lv_intTeamCount < lv_intMaximumTeams)) {
                    autoC120DB1C_ae = lv_intListCount[lv_intX];
                    lv_intY = 1;
                    for ( ; ( (autoC120DB1C_ai >= 0 && lv_intY <= autoC120DB1C_ae) || (autoC120DB1C_ai < 0 && lv_intY >= autoC120DB1C_ae) ) ; lv_intY += autoC120DB1C_ai ) {
                        lv_intTeam = lv_intList[lv_intX][lv_intY];
                        libPEEP_gv_recTeams[lv_intTeam].lv_boolEligibleForMatch = true;
                    }
                }

                lv_intTeamCount += lv_intListCount[lv_intX];
            }
            if ((lp_boolSelectTeams == true)) {
                lv_intNumSelected = 0;
                lv_intX = 0;
                while (((lv_intNumSelected < lv_intTeamCount) && (lv_intNumSelected < lv_intMaximumTeams))) {
                    while ((lv_intListCount[lv_intX] == 0)) {
                        lv_intX += 1;
                    }
                    lv_intRand = RandomInt(1, lv_intListCount[lv_intX]);
                    lv_intTeam = lv_intList[lv_intX][lv_intRand];
                    lv_intNumSelected += 1;
                    auto74ACF2B5_ae = lv_intListCount[lv_intX];
                    lv_intY = lv_intRand;
                    for ( ; ( (auto74ACF2B5_ai >= 0 && lv_intY <= auto74ACF2B5_ae) || (auto74ACF2B5_ai < 0 && lv_intY >= auto74ACF2B5_ae) ) ; lv_intY += auto74ACF2B5_ai ) {
                        lv_intList[lv_intX][lv_intY] = lv_intList[lv_intX][(lv_intY + 1)];
                    }
                    lv_intListCount[lv_intX] -= 1;
                    libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intNumSelected] = lv_intTeam;
                    libPEEP_gv_recTeams[lv_intTeam].lv_boolSelectedForMatch = true;
                    autoE9ED8338_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
                    lv_intIndex = 1;
                    for ( ; ( (autoE9ED8338_ai >= 0 && lv_intIndex <= autoE9ED8338_ae) || (autoE9ED8338_ai < 0 && lv_intIndex >= autoE9ED8338_ae) ) ; lv_intIndex += autoE9ED8338_ai ) {
                        libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex]].lv_boolSelectedForMatch = true;
                    }
                }
            }

            libPEEP_gf_SetupMatchTeamList();
        }

    }
}

bool libPEEP_gf_matchConditionsMet (int lp_intMatchMode) {
    // Variable Declarations
    int lv_intTeam;
    int lv_intX;
    int lv_intY;
    int lv_intTeamSize;
    int lv_intMinimumTeams;
    int lv_intTeamCount;

    // Automatic Variable Declarations
    const int auto0C07FA5B_ae = 16;
    const int auto0C07FA5B_ai = 1;
    int auto865A513C_ae;
    const int auto865A513C_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_intMatchMode == 4) || (lp_intMatchMode == 5) || (lp_intMatchMode == 6))) {
        if ((lp_intMatchMode == 4)) {
            if (((libPEEP_gf_matchConditionsMet(1) == true) || (libPEEP_gf_matchConditionsMet(2) == true))) {
                return true;
            }
            else {
                return false;
            }
        }
        else if ((lp_intMatchMode == 5)) {
            if (((libPEEP_gf_matchConditionsMet(1) == true) || (libPEEP_gf_matchConditionsMet(2) == true) || (libPEEP_gf_matchConditionsMet(3) == true))) {
                return true;
            }
            else {
                return false;
            }
        }
        else if ((lp_intMatchMode == 6)) {
            if (((libPEEP_gf_matchConditionsMet(1) == true) || (libPEEP_gf_matchConditionsMet(3) == true))) {
                return true;
            }
            else {
                return false;
            }
        }
        return false;
    }
    else {
        if ((lp_intMatchMode == 1)) {
            lv_intTeamSize = 1;
            lv_intMinimumTeams = 2;
        }
        else if ((lp_intMatchMode == 2)) {
            lv_intTeamSize = 2;
            lv_intMinimumTeams = 2;
        }
        else if ((lp_intMatchMode == 3)) {
            lv_intTeamSize = 1;
            lv_intMinimumTeams = 3;
        }
        else if ((lp_intMatchMode == 4)) {
            lv_intTeamSize = 1;
            lv_intMinimumTeams = 3;
        }
        else if ((lp_intMatchMode == 5)) {
            lv_intTeamSize = 1;
            lv_intMinimumTeams = 3;
        }
        else if ((lp_intMatchMode == 6)) {
            lv_intTeamSize = 1;
            lv_intMinimumTeams = 3;
        }
        lv_intX = 0;
        for ( ; ( (auto0C07FA5B_ai >= 0 && lv_intX <= auto0C07FA5B_ae) || (auto0C07FA5B_ai < 0 && lv_intX >= auto0C07FA5B_ae) ) ; lv_intX += auto0C07FA5B_ai ) {
            auto865A513C_ae = libPEEP_gv_recGlobals.lv_intTeamSelectionCounts[lv_intX];
            lv_intY = 1;
            for ( ; ( (auto865A513C_ai >= 0 && lv_intY <= auto865A513C_ae) || (auto865A513C_ai < 0 && lv_intY >= auto865A513C_ae) ) ; lv_intY += auto865A513C_ai ) {
                lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamSelectionList[lv_intX][lv_intY];
                if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == lv_intTeamSize)) {
                    lv_intTeamCount += 1;
                }

            }
        }
        if ((lv_intTeamCount >= lv_intMinimumTeams)) {
            return true;
        }
        else {
            return false;
        }
    }
}

void libPEEP_gf_ClearOutMatchSelections () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    const int autoFB3C6D8C_ae = 4;
    const int autoFB3C6D8C_ai = 1;
    int auto1540DA55_ae;
    const int auto1540DA55_ai = 1;
    int auto23B419AA_ae;
    const int auto23B419AA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    for ( ; ( (autoFB3C6D8C_ai >= 0 && lv_intIndex <= autoFB3C6D8C_ae) || (autoFB3C6D8C_ai < 0 && lv_intIndex >= autoFB3C6D8C_ae) ) ; lv_intIndex += autoFB3C6D8C_ai ) {
        libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex] = 0;
    }
    auto1540DA55_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intIndex = 1;
    for ( ; ( (auto1540DA55_ai >= 0 && lv_intIndex <= auto1540DA55_ae) || (auto1540DA55_ai < 0 && lv_intIndex >= auto1540DA55_ae) ) ; lv_intIndex += auto1540DA55_ai ) {
        libPEEP_gv_recPlayers[lv_intIndex].lv_boolSelectedForMatch = false;
    }
    auto23B419AA_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intIndex = 1;
    for ( ; ( (auto23B419AA_ai >= 0 && lv_intIndex <= auto23B419AA_ae) || (auto23B419AA_ai < 0 && lv_intIndex >= auto23B419AA_ae) ) ; lv_intIndex += auto23B419AA_ai ) {
        libPEEP_gv_recTeams[lv_intIndex].lv_boolSelectedForMatch = false;
    }
}

void libPEEP_gf_SetupMatchTeamList () {
    // Variable Declarations
    int lv_intTeam;
    int lv_intPlayer;
    int lv_intNumPlayingTeams;
    int lv_intIndex;
    bool lv_boolMatched;

    // Automatic Variable Declarations
    int auto5809934D_ae;
    const int auto5809934D_ai = 1;
    int auto69EA9D4B_ae;
    const int auto69EA9D4B_ai = 1;
    int auto10E2F61A_ae;
    const int auto10E2F61A_ai = 1;

    // Variable Initialization

    // Implementation
    auto5809934D_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto5809934D_ai >= 0 && lv_intIndex <= auto5809934D_ae) || (auto5809934D_ai < 0 && lv_intIndex >= auto5809934D_ae) ) ; lv_intIndex += auto5809934D_ai ) {
        libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex] = 0;
    }
    auto69EA9D4B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto69EA9D4B_ai >= 0 && lv_intPlayer <= auto69EA9D4B_ae) || (auto69EA9D4B_ai < 0 && lv_intPlayer >= auto69EA9D4B_ae) ) ; lv_intPlayer += auto69EA9D4B_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == true)) {
            lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam;
            lv_boolMatched = false;
            auto10E2F61A_ae = lv_intNumPlayingTeams;
            lv_intIndex = 1;
            for ( ; ( (auto10E2F61A_ai >= 0 && lv_intIndex <= auto10E2F61A_ae) || (auto10E2F61A_ai < 0 && lv_intIndex >= auto10E2F61A_ae) ) ; lv_intIndex += auto10E2F61A_ai ) {
                if ((lv_intTeam == libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex])) {
                    lv_boolMatched = true;
                    break;
                }

            }
            if (((lv_boolMatched == false) && (lv_intTeam > 0))) {
                lv_intNumPlayingTeams += 1;
                libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intNumPlayingTeams] = lv_intTeam;
            }

        }

    }
    libPEEP_gv_recGameState.lv_intNumPlayingTeams = lv_intNumPlayingTeams;
}

void libPEEP_gf_CalculateSonasRatings (int lp_intTeam1, int lp_intTeam2, int lp_intWinner, bool lp_boolApplyChanges) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intPlayer;
    fixed lv_realSonasChange;
    int[3] lv_intTeamList;
    fixed[3] lv_realTeamSonasRatings;
    fixed[3] lv_realTeamSonasMaxAdvantage;
    fixed[3] lv_realTeamSonasMaxDisadvantage;
    int lv_intIndex2;
    int lv_intTeam;
    int lv_intKValue;
    int lv_intTmpMatchMinimum;
    int lv_intTmpMatchesPlayedSum;
    fixed lv_realTmpSonasMinimum;
    fixed lv_realThisSonasChange;
    fixed lv_realThisNewSonas;
    int lv_intNumPlayers;
    fixed lv_realScore;
    fixed lv_realExpectedScore;
    fixed lv_realSonasDelta;
    fixed lv_realSonasScopedDelta;
    int lv_intTeamWithAdvantage;

    // Automatic Variable Declarations
    const int auto0571BB24_ae = 2;
    const int auto0571BB24_ai = 1;
    int auto9EF0A85B_ae;
    const int auto9EF0A85B_ai = 1;
    const int autoA420EBD5_ae = 2;
    const int autoA420EBD5_ai = 1;
    int auto37614100_ae;
    const int auto37614100_ai = 1;

    // Variable Initialization
    lv_intKValue = 10;

    // Implementation
    lv_intTeamList[1] = lp_intTeam1;
    lv_intTeamList[2] = lp_intTeam2;
    lv_intIndex = 1;
    for ( ; ( (auto0571BB24_ai >= 0 && lv_intIndex <= auto0571BB24_ae) || (auto0571BB24_ai < 0 && lv_intIndex >= auto0571BB24_ae) ) ; lv_intIndex += auto0571BB24_ai ) {
        lv_intTeam = lv_intTeamList[lv_intIndex];
        lv_intNumPlayers = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_realTeamSonasMaxAdvantage[lv_intIndex] = (390.0 * IntToFixed(lv_intNumPlayers));
        lv_realTeamSonasMaxDisadvantage[lv_intIndex] = (460.0 * IntToFixed(lv_intNumPlayers));
        lv_realTeamSonasRatings[lv_intIndex] = 0.0;
        auto9EF0A85B_ae = lv_intNumPlayers;
        lv_intIndex2 = 1;
        for ( ; ( (auto9EF0A85B_ai >= 0 && lv_intIndex2 <= auto9EF0A85B_ae) || (auto9EF0A85B_ai < 0 && lv_intIndex2 >= auto9EF0A85B_ae) ) ; lv_intIndex2 += auto9EF0A85B_ai ) {
            lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
            lv_realTeamSonasRatings[lv_intIndex] += libPEEP_gv_recPlayers[lv_intPlayer].lv_realBankSonasRating;
        }
    }
    lv_realSonasDelta = AbsF((lv_realTeamSonasRatings[1] - lv_realTeamSonasRatings[2]));
    lv_realSonasScopedDelta = lv_realSonasDelta;
    lv_intTeamWithAdvantage = 0;
    if ((lv_realTeamSonasRatings[1] > lv_realTeamSonasRatings[2])) {
        lv_intTeamWithAdvantage = lv_intTeamList[1];
    }
    else {
        if ((lv_realTeamSonasRatings[1] < lv_realTeamSonasRatings[2])) {
            lv_intTeamWithAdvantage = lv_intTeamList[2];
        }

    }
    lv_intIndex = 1;
    for ( ; ( (autoA420EBD5_ai >= 0 && lv_intIndex <= autoA420EBD5_ae) || (autoA420EBD5_ai < 0 && lv_intIndex >= autoA420EBD5_ae) ) ; lv_intIndex += autoA420EBD5_ai ) {
        lv_intTeam = lv_intTeamList[lv_intIndex];
        lv_realExpectedScore = 0.5;
        if ((lv_intTeam == lv_intTeamWithAdvantage)) {
            if ((lv_realSonasDelta > lv_realTeamSonasMaxAdvantage[lv_intIndex])) {
                lv_realSonasScopedDelta = lv_realTeamSonasMaxAdvantage[lv_intIndex];
            }

            lv_realExpectedScore = (lv_realSonasScopedDelta / lv_realTeamSonasMaxAdvantage[lv_intIndex]);
            lv_realExpectedScore = (lv_realExpectedScore / 2.0);
            lv_realExpectedScore = (0.5 + lv_realExpectedScore);
        }
        else {
            if ((lv_intTeamWithAdvantage > 0)) {
                if ((lv_realSonasDelta > lv_realTeamSonasMaxDisadvantage[lv_intIndex])) {
                    lv_realSonasScopedDelta = lv_realTeamSonasMaxDisadvantage[lv_intIndex];
                }

                lv_realExpectedScore = (lv_realSonasScopedDelta / lv_realTeamSonasMaxDisadvantage[lv_intIndex]);
                lv_realExpectedScore = (lv_realExpectedScore / 2.0);
                lv_realExpectedScore = (0.5 - lv_realExpectedScore);
            }

        }
        libPEEP_gv_recTeams[lv_intTeam].lv_realSonasExpectedScore = lv_realExpectedScore;
        if ((lp_intWinner > 0)) {
            if ((lv_intTeam == lp_intWinner)) {
                lv_realScore = 1.0;
            }
            else {
                lv_realScore = 0.0;
            }
            lv_realSonasChange = (IntToFixed(lv_intKValue) * (lv_realScore - lv_realExpectedScore));
            auto37614100_ae = lv_intNumPlayers;
            lv_intIndex2 = 1;
            for ( ; ( (auto37614100_ai >= 0 && lv_intIndex2 <= auto37614100_ae) || (auto37614100_ai < 0 && lv_intIndex2 >= auto37614100_ae) ) ; lv_intIndex2 += auto37614100_ai ) {
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
                lv_realThisSonasChange = (lv_realSonasChange / IntToFixed(lv_intNumPlayers));
                lv_realThisNewSonas = (libPEEP_gv_recPlayers[lv_intPlayer].lv_realBankSonasRating + lv_realThisSonasChange);
                if ((lv_realThisNewSonas < libPEEP_gv_recGlobals.lv_realMinSonasRating)) {
                    lv_realThisNewSonas = libPEEP_gv_recGlobals.lv_realMinSonasRating;
                }
                else if ((lv_realThisNewSonas > libPEEP_gv_recGlobals.lv_realMaxSonasRating)) {
                    lv_realThisNewSonas = libPEEP_gv_recGlobals.lv_realMaxSonasRating;
                }
                libPEEP_gv_recPlayers[lv_intPlayer].lv_realSonasRatingChange = lv_realThisSonasChange;
                if ((lp_boolApplyChanges == true)) {
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_realBankSonasRating = lv_realThisNewSonas;
                }

            }
        }

    }
}

text libPEEP_gf_makeTeamList (int lp_intTeam) {
    // Variable Declarations
    text lv_txtText;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto53550392_ae;
    const int auto53550392_ai = 1;

    // Variable Initialization

    // Implementation
    auto53550392_ae = libPEEP_gv_recTeams[lp_intTeam].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto53550392_ai >= 0 && lv_intIndex <= auto53550392_ae) || (auto53550392_ai < 0 && lv_intIndex >= auto53550392_ae) ) ; lv_intIndex += auto53550392_ai ) {
        lv_txtText = (lv_txtText + libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lp_intTeam].lv_intPlayerList[lv_intIndex]].lv_txtPlayerName);
        if ((libPEEP_gv_recTeams[lp_intTeam].lv_intPlayerList[(lv_intIndex + 1)] > 0)) {
            lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_2ADD6351"));
        }

    }
    return lv_txtText;
}

int libPEEP_gf_getNumObservers () {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_intNumObservers;

    // Automatic Variable Declarations
    int autoCFEDAF2A_ae;
    const int autoCFEDAF2A_ai = 1;

    // Variable Initialization

    // Implementation
    autoCFEDAF2A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoCFEDAF2A_ai >= 0 && lv_intTmpPlayer <= autoCFEDAF2A_ae) || (autoCFEDAF2A_ai < 0 && lv_intTmpPlayer >= autoCFEDAF2A_ae) ) ; lv_intTmpPlayer += autoCFEDAF2A_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intCurrentTeam == 0))) {
            lv_intNumObservers += 1;
        }

    }
    return lv_intNumObservers;
}

void libPEEP_gf_DebugTeams () {
    // Variable Declarations
    int lv_intTeam;
    int lv_intPlayer;
    int lv_intIndex;
    text lv_txtMessage;

    // Automatic Variable Declarations
    int autoAF6575F2_ae;
    const int autoAF6575F2_ai = 1;
    int auto7264368B_ae;
    const int auto7264368B_ai = 1;

    // Variable Initialization

    // Implementation
    autoAF6575F2_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 0;
    for ( ; ( (autoAF6575F2_ai >= 0 && lv_intTeam <= autoAF6575F2_ae) || (autoAF6575F2_ai < 0 && lv_intTeam >= autoAF6575F2_ae) ) ; lv_intTeam += autoAF6575F2_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0)) {
            lv_txtMessage = (libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_64789603"));
            auto7264368B_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
            lv_intIndex = 1;
            for ( ; ( (auto7264368B_ai >= 0 && lv_intIndex <= auto7264368B_ae) || (auto7264368B_ai < 0 && lv_intIndex >= auto7264368B_ae) ) ; lv_intIndex += auto7264368B_ai ) {
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
                lv_txtMessage = (lv_txtMessage + libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPlayerName + StringToText("") + IntToText(lv_intPlayer) + StringExternal("Param/Value/lib_PEEP_8E1742DD"));
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lv_txtMessage);
        }

    }
}

void libPEEP_gf_InitializeTeams () {
    // Variable Declarations
    int lv_intTeam;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libPEEP_gv_recGlobals.lv_intFaceoffObserverUnitTypeCount = 2;
    libPEEP_gv_recGlobals.lv_uFaceoffObserverUnitTypes[0] = "Observer";
    libPEEP_gv_recGlobals.lv_uFaceoffObserverUnitTypes[1] = "Overseer";
    libPEEP_gv_recGlobals.lv_uFaceoffObserverUnitTypes[2] = "Raven";
    libPEEP_gv_recTeamsSource[1].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_7F8DEBA4");
    libPEEP_gv_recTeamsSource[1].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[1].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-zergling.dds";
    libPEEP_gv_recTeamsSource[1].lv_utSpawnUnit = "Zergling";
    libPEEP_gv_recTeamsSource[1].lv_realFaceoffUnitScale = 1.2;
    libPEEP_gv_recTeamsSource[1].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_CFF17100");
    libPEEP_gv_recTeamsSource[2].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_C4AC2124");
    libPEEP_gv_recTeamsSource[2].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[2].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-zealot.dds";
    libPEEP_gv_recTeamsSource[2].lv_utSpawnUnit = "Zealot";
    libPEEP_gv_recTeamsSource[2].lv_realFaceoffUnitScale = 1.0;
    libPEEP_gv_recTeamsSource[2].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_12E88CE1");
    libPEEP_gv_recTeamsSource[3].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_CF148B0A");
    libPEEP_gv_recTeamsSource[3].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[3].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-hydralisk.dds";
    libPEEP_gv_recTeamsSource[3].lv_utSpawnUnit = "Hydralisk";
    libPEEP_gv_recTeamsSource[3].lv_realFaceoffUnitScale = 0.9;
    libPEEP_gv_recTeamsSource[3].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_15831BED");
    libPEEP_gv_recTeamsSource[4].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_B1D77607");
    libPEEP_gv_recTeamsSource[4].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[4].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-darktemplar.dds";
    libPEEP_gv_recTeamsSource[4].lv_utSpawnUnit = "DarkTemplar";
    libPEEP_gv_recTeamsSource[4].lv_realFaceoffUnitScale = 1.0;
    libPEEP_gv_recTeamsSource[4].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_B010A4C1");
    libPEEP_gv_recTeamsSource[5].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_A4BF0510");
    libPEEP_gv_recTeamsSource[5].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[5].lv_fIcon = "Assets\\Textures\\btn-unit-terran-marine.dds";
    libPEEP_gv_recTeamsSource[5].lv_utSpawnUnit = "Marine";
    libPEEP_gv_recTeamsSource[5].lv_realFaceoffUnitScale = 1.12;
    libPEEP_gv_recTeamsSource[5].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_2EAC3069");
    libPEEP_gv_recTeamsSource[6].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_E8CA8C94");
    libPEEP_gv_recTeamsSource[6].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[6].lv_fIcon = "Assets\\Textures\\btn-unit-terran-ghost.dds";
    libPEEP_gv_recTeamsSource[6].lv_utSpawnUnit = "Ghost";
    libPEEP_gv_recTeamsSource[6].lv_realFaceoffUnitScale = 1.1;
    libPEEP_gv_recTeamsSource[6].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_AFE5A5AA");
    libPEEP_gv_recTeamsSource[7].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_73EB6C37");
    libPEEP_gv_recTeamsSource[7].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[7].lv_fIcon = "Assets\\Textures\\btn-unit-terran-reaper.dds";
    libPEEP_gv_recTeamsSource[7].lv_utSpawnUnit = "Reaper";
    libPEEP_gv_recTeamsSource[7].lv_realFaceoffUnitScale = 1.0;
    libPEEP_gv_recTeamsSource[7].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_182F5761");
    libPEEP_gv_recTeamsSource[8].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_BBE8B14B");
    libPEEP_gv_recTeamsSource[8].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[8].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-sentry.dds";
    libPEEP_gv_recTeamsSource[8].lv_utSpawnUnit = "Sentry";
    libPEEP_gv_recTeamsSource[8].lv_realFaceoffUnitScale = 0.92;
    libPEEP_gv_recTeamsSource[8].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_31AC4CBC");
    libPEEP_gv_recTeamsSource[9].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_3F7ECCE7");
    libPEEP_gv_recTeamsSource[9].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[9].lv_fIcon = "Assets\\Textures\\btn-unit-terran-marauder.dds";
    libPEEP_gv_recTeamsSource[9].lv_utSpawnUnit = "Marauder";
    libPEEP_gv_recTeamsSource[9].lv_realFaceoffUnitScale = 0.9;
    libPEEP_gv_recTeamsSource[9].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_032BE863");
    libPEEP_gv_recTeamsSource[10].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_1E439C0C");
    libPEEP_gv_recTeamsSource[10].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[10].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-changeling.dds";
    libPEEP_gv_recTeamsSource[10].lv_utSpawnUnit = "Changeling";
    libPEEP_gv_recTeamsSource[10].lv_realFaceoffUnitScale = 1.0;
    libPEEP_gv_recTeamsSource[10].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_2604DB4C");
    libPEEP_gv_recTeamsSource[11].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_4A766F91");
    libPEEP_gv_recTeamsSource[11].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[11].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-roach.dds";
    libPEEP_gv_recTeamsSource[11].lv_utSpawnUnit = "Roach";
    libPEEP_gv_recTeamsSource[11].lv_realFaceoffUnitScale = 0.9;
    libPEEP_gv_recTeamsSource[11].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_D3260208");
    libPEEP_gv_recTeamsSource[12].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_D063E7EC");
    libPEEP_gv_recTeamsSource[12].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[12].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-baneling.dds";
    libPEEP_gv_recTeamsSource[12].lv_utSpawnUnit = "Baneling";
    libPEEP_gv_recTeamsSource[12].lv_realFaceoffUnitScale = 1.0;
    libPEEP_gv_recTeamsSource[12].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_F91C4254");
    libPEEP_gv_recTeamsSource[13].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_F68AD255");
    libPEEP_gv_recTeamsSource[13].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[13].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-stalker.dds";
    libPEEP_gv_recTeamsSource[13].lv_utSpawnUnit = "Stalker";
    libPEEP_gv_recTeamsSource[13].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[13].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_8800F52A");
    libPEEP_gv_recTeamsSource[14].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_D436C901");
    libPEEP_gv_recTeamsSource[14].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[14].lv_fIcon = "Assets\\Textures\\btn-unit-terran-hellion.dds";
    libPEEP_gv_recTeamsSource[14].lv_utSpawnUnit = "Hellion";
    libPEEP_gv_recTeamsSource[14].lv_realFaceoffUnitScale = 0.91;
    libPEEP_gv_recTeamsSource[14].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_33C5A346");
    libPEEP_gv_recTeamsSource[15].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_324A27F6");
    libPEEP_gv_recTeamsSource[15].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[15].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-probe.dds";
    libPEEP_gv_recTeamsSource[15].lv_utSpawnUnit = "Probe";
    libPEEP_gv_recTeamsSource[15].lv_realFaceoffUnitScale = 1.0;
    libPEEP_gv_recTeamsSource[15].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_738C49B8");
    lv_intTeam = 16;
    libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX = lv_intTeam;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_5AD011C9");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-infestor.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Infestor";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_2A6CF5CE");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_ABD4459E");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-terran-siegetank.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "SiegeTank";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.75;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_0B284A76");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_5858143E");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-immortal.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Immortal";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_F7067E24");
    lv_intTeam += 1;
    libPEEP_gv_recGlobals.lv_iNT_TEAM_STREAK_INDEX = lv_intTeam;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_30CD5E19");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-archon.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Archon";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_D8418794");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_9391674C");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-terran-thor.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Thor";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.75;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_C91AC946");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_08C0E74D");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-ultralisk.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Ultralisk";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.7;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_FCDE463E");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_9867BA12");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-colossus.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Colossus";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.6;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_89D58B94");
    lv_intTeam += 1;
    libPEEP_gv_recGlobals.lv_iNT_TEAM_LOCKED_INDEX = lv_intTeam;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_A66B5738");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-carrier.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Carrier";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.65;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_6FAA71D7");
    lv_intTeam += 1;
    libPEEP_gv_recGlobals.lv_iNT_TEAM_PURCHASE_INDEX = lv_intTeam;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_F7D97BC3");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-terran-vikingassault.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "VikingAssault";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.86;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_56A0B41F");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_B265BE35");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 2;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-terran-medivac.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Medivac";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.72;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_363C6615");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_6102348A");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-hightemplar.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "HighTemplar";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.86;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_6AA75FA4");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_A5631885");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-interceptor.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Interceptor";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 1.25;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_D1CF3BB5");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_C8349828");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 5;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "InfestedTerransEgg";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 1.0;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_C405CD19");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_164D7B44");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 6;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-queen.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Queen";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.85;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_0FDB6B9D");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_5B107482");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 7;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-phoenix.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Phoenix";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_E952B9CF");
    libPEEP_gf_InitializeMoreTeams();
}

void libPEEP_gf_InitializeMoreTeams () {
    // Variable Declarations
    int lv_intTeam;
    int lv_intRand;
    bool[51] lv_boolUsedIndexes;
    int lv_intIndex;
    int lv_intTopIndex;
    int lv_intRemaining;

    // Automatic Variable Declarations
    int auto7E61D382_ae;
    const int auto7E61D382_ai = 1;
    int auto97C5FFAE_ae;
    const int auto97C5FFAE_ai = 1;
    int autoF871D589_ae;
    const int autoF871D589_ai = 1;
    int auto57415131_ae;
    const int auto57415131_ai = 1;
    int autoB6EC6331_ae;
    const int autoB6EC6331_ai = 1;

    // Variable Initialization
    lv_intTeam = 30;

    // Implementation
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_CC917866");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-viper.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Viper";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_0C76E9CA");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_00B527E4");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 9;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-terran-widowmine.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "WidowMine";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_88F1A769");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_C05F66A6");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 10;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-oracle.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Oracle";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_A6FF0D9F");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_98672086");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 2;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 80;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-terran-mule.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "MULE";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 1.3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_10E314AB");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_F2DE296A");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 3;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 81;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-mutalisk.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "Mutalisk";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 1.8;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_13CA8298");
    lv_intTeam += 1;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_39088160");
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace = 4;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID = 82;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-mothershipcore.dds";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit = "MothershipCore";
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale = 0.9;
    libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip = StringExternal("Param/Value/lib_PEEP_F6F91FD9");
    libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS = lv_intTeam;
    libPEEP_gv_recTeams[0].lv_fIcon = "Assets\\Textures\\btn-command-cancel.dds";
    libPEEP_gv_recTeams[0].lv_txtTeamName = StringExternal("Param/Value/lib_PEEP_9B91346C");
    libPEEP_gv_recTeams[0].lv_utSpawnUnit = "Observer";
    lv_intTopIndex = (libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX - 1);
    lv_intRemaining = lv_intTopIndex;
    auto7E61D382_ae = lv_intTopIndex;
    lv_intTeam = 1;
    for ( ; ( (auto7E61D382_ai >= 0 && lv_intTeam <= auto7E61D382_ae) || (auto7E61D382_ai < 0 && lv_intTeam >= auto7E61D382_ae) ) ; lv_intTeam += auto7E61D382_ai ) {
        lv_intRand = RandomInt(1, lv_intRemaining);
        libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName = libPEEP_gv_recTeamsSource[lv_intRand].lv_txtTeamName;
        libPEEP_gv_recTeams[lv_intTeam].lv_intRace = libPEEP_gv_recTeamsSource[lv_intRand].lv_intRace;
        libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip = libPEEP_gv_recTeamsSource[lv_intRand].lv_txtTooltip;
        libPEEP_gv_recTeams[lv_intTeam].lv_fIcon = libPEEP_gv_recTeamsSource[lv_intRand].lv_fIcon;
        libPEEP_gv_recTeams[lv_intTeam].lv_utSpawnUnit = libPEEP_gv_recTeamsSource[lv_intRand].lv_utSpawnUnit;
        libPEEP_gv_recTeams[lv_intTeam].lv_realFaceoffUnitScale = libPEEP_gv_recTeamsSource[lv_intRand].lv_realFaceoffUnitScale;
        libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup = UnitGroupEmpty();
        lv_intRemaining -= 1;
        auto97C5FFAE_ae = lv_intRemaining;
        lv_intIndex = lv_intRand;
        for ( ; ( (auto97C5FFAE_ai >= 0 && lv_intIndex <= auto97C5FFAE_ae) || (auto97C5FFAE_ai < 0 && lv_intIndex >= auto97C5FFAE_ae) ) ; lv_intIndex += auto97C5FFAE_ai ) {
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_txtTeamName = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_txtTeamName;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_intRace = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_intRace;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_txtTooltip = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_txtTooltip;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_fIcon = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_fIcon;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_utSpawnUnit = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_utSpawnUnit;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_realFaceoffUnitScale = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_realFaceoffUnitScale;
        }
    }
    lv_intTopIndex = (libPEEP_gv_recGlobals.lv_iNT_TEAM_STREAK_INDEX - 1);
    lv_intRemaining = lv_intTopIndex;
    autoF871D589_ae = lv_intTopIndex;
    lv_intTeam = libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX;
    for ( ; ( (autoF871D589_ai >= 0 && lv_intTeam <= autoF871D589_ae) || (autoF871D589_ai < 0 && lv_intTeam >= autoF871D589_ae) ) ; lv_intTeam += autoF871D589_ai ) {
        lv_intRand = RandomInt(libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX, lv_intRemaining);
        libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName = libPEEP_gv_recTeamsSource[lv_intRand].lv_txtTeamName;
        libPEEP_gv_recTeams[lv_intTeam].lv_intRace = libPEEP_gv_recTeamsSource[lv_intRand].lv_intRace;
        libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip = libPEEP_gv_recTeamsSource[lv_intRand].lv_txtTooltip;
        libPEEP_gv_recTeams[lv_intTeam].lv_fIcon = libPEEP_gv_recTeamsSource[lv_intRand].lv_fIcon;
        libPEEP_gv_recTeams[lv_intTeam].lv_utSpawnUnit = libPEEP_gv_recTeamsSource[lv_intRand].lv_utSpawnUnit;
        libPEEP_gv_recTeams[lv_intTeam].lv_realFaceoffUnitScale = libPEEP_gv_recTeamsSource[lv_intRand].lv_realFaceoffUnitScale;
        libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup = UnitGroupEmpty();
        lv_intRemaining -= 1;
        auto57415131_ae = lv_intRemaining;
        lv_intIndex = lv_intRand;
        for ( ; ( (auto57415131_ai >= 0 && lv_intIndex <= auto57415131_ae) || (auto57415131_ai < 0 && lv_intIndex >= auto57415131_ae) ) ; lv_intIndex += auto57415131_ai ) {
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_txtTeamName = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_txtTeamName;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_intRace = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_intRace;
            libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_txtTooltip;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_fIcon = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_fIcon;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_utSpawnUnit = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_utSpawnUnit;
            libPEEP_gv_recTeamsSource[lv_intIndex].lv_realFaceoffUnitScale = libPEEP_gv_recTeamsSource[(lv_intIndex + 1)].lv_realFaceoffUnitScale;
        }
    }
    autoB6EC6331_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = libPEEP_gv_recGlobals.lv_iNT_TEAM_STREAK_INDEX;
    for ( ; ( (autoB6EC6331_ai >= 0 && lv_intTeam <= autoB6EC6331_ae) || (autoB6EC6331_ai < 0 && lv_intTeam >= autoB6EC6331_ae) ) ; lv_intTeam += autoB6EC6331_ai ) {
        libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName = libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTeamName;
        libPEEP_gv_recTeams[lv_intTeam].lv_intRace = libPEEP_gv_recTeamsSource[lv_intTeam].lv_intRace;
        libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip = libPEEP_gv_recTeamsSource[lv_intTeam].lv_txtTooltip;
        libPEEP_gv_recTeams[lv_intTeam].lv_fIcon = libPEEP_gv_recTeamsSource[lv_intTeam].lv_fIcon;
        libPEEP_gv_recTeams[lv_intTeam].lv_utSpawnUnit = libPEEP_gv_recTeamsSource[lv_intTeam].lv_utSpawnUnit;
        libPEEP_gv_recTeams[lv_intTeam].lv_realFaceoffUnitScale = libPEEP_gv_recTeamsSource[lv_intTeam].lv_realFaceoffUnitScale;
        libPEEP_gv_recTeams[lv_intTeam].lv_intStoreID = libPEEP_gv_recTeamsSource[lv_intTeam].lv_intStoreID;
        libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup = UnitGroupEmpty();
    }
}

void libPEEP_gf_AddPlayertoTeam (int lp_intPlayer, int lp_intTeam, bool lp_boolHandleFaceoffUnit) {
    // Variable Declarations
    int lv_intMax;
    int lv_intIndex;
    bool lv_boolPlayerAdded;
    fixed lv_realUnitScale;
    fixed lv_realUnitSpeed;
    bool lv_boolTeamPresent;

    // Automatic Variable Declarations
    int auto2A62A2FC_ae;
    const int auto2A62A2FC_ai = 1;
    int auto59C3D121_ae;
    const int auto59C3D121_ai = 1;
    int auto9807E824_ae;
    const int auto9807E824_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intLastTeamConfirmation = 0;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intLastTeamSelection = 0;
    auto2A62A2FC_ae = libPEEP_gv_recGlobals.lv_intNumFaceoffTeams;
    lv_intIndex = 1;
    for ( ; ( (auto2A62A2FC_ai >= 0 && lv_intIndex <= auto2A62A2FC_ae) || (auto2A62A2FC_ai < 0 && lv_intIndex >= auto2A62A2FC_ae) ) ; lv_intIndex += auto2A62A2FC_ai ) {
        if ((libPEEP_gv_recGlobals.lv_intFaceoffTeams[lv_intIndex] == lp_intTeam)) {
            lv_boolTeamPresent = true;
        }

    }
    if (((lv_boolTeamPresent == false) && (lp_intTeam > 0))) {
        libPEEP_gv_recGlobals.lv_intNumFaceoffTeams += 1;
        libPEEP_gv_recGlobals.lv_intFaceoffTeams[libPEEP_gv_recGlobals.lv_intNumFaceoffTeams] = lp_intTeam;
    }

    if ((lp_intTeam == 0)) {
        lv_intMax = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    }
    else {
        lv_intMax = libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE;
    }
    auto59C3D121_ae = lv_intMax;
    lv_intIndex = 1;
    for ( ; ( (auto59C3D121_ai >= 0 && lv_intIndex <= auto59C3D121_ae) || (auto59C3D121_ai < 0 && lv_intIndex >= auto59C3D121_ae) ) ; lv_intIndex += auto59C3D121_ai ) {
        if (((lv_boolPlayerAdded == false) && (libPEEP_gv_recTeams[lp_intTeam].lv_intPlayerList[lv_intIndex] == 0))) {
            libPEEP_gv_recTeams[lp_intTeam].lv_intPlayerList[lv_intIndex] = lp_intPlayer;
            lv_boolPlayerAdded = true;
            if (((lp_intTeam > 0) && (lv_intIndex == 1))) {
                libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsTeamLeader = true;
            }
            else {
                libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsTeamLeader = false;
            }
        }

    }
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam = lp_intTeam;
    libPEEP_gv_recTeams[lp_intTeam].lv_intNumPlayers += 1;
    if (((lp_intTeam > 0) && (lp_boolHandleFaceoffUnit == true))) {
        UnitCreate(1, libPEEP_gv_recUI.lv_recConfigTeamButtons[lp_intTeam].lv_utSpawnUnit, 0, 0, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 0.0);
        libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity 1.000000 0.800000");
        UnitGroupAdd(libPEEP_gv_recTeams[lp_intTeam].lv_ugFaceoffGroup, libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit);
        UnitSetTeamColorIndex(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, PlayerGetColorIndex(lp_intPlayer, false));
        UnitSetPropertyFixed(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, c_unitPropLifeMax, 100000.0);
        UnitSetState(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, c_unitStateSelectable, false);
        UnitSetState(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, c_unitStateHighlightable, false);
        UnitSetState(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, c_unitStateStatusBar, false);
        UnitSetState(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, c_unitStateCursorable, false);
        auto9807E824_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intIndex = 1;
        for ( ; ( (auto9807E824_ai >= 0 && lv_intIndex <= auto9807E824_ae) || (auto9807E824_ai < 0 && lv_intIndex >= auto9807E824_ae) ) ; lv_intIndex += auto9807E824_ai ) {
            libNtve_gf_ShareVisionofUnit(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, true, lv_intIndex);
        }
        lv_realUnitScale = (100.0 * libPEEP_gv_recTeams[lp_intTeam].lv_realFaceoffUnitScale * 1.2);
        UnitSetScale(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit, lv_realUnitScale, lv_realUnitScale, lv_realUnitScale);
        if ((libPEEP_gv_recGlobals.lv_boolPrankLesserSelves == true)) {
            libPEEP_gf_PrankSwapPlayersFaceoffUnittoWorker(lp_intPlayer);
        }

        if ((libPEEP_gv_recGlobals.lv_boolPrankLittleGuys == true)) {
            libPEEP_gf_PrankMakePlayersFaceoffUnitLittle(lp_intPlayer);
        }

        if ((libPEEP_gv_recGlobals.lv_boolPrankFunhouse == true)) {
            libPEEP_gf_PrankMakePlayersFaceoffUnitStretch(lp_intPlayer);
        }

    }

}

void libPEEP_gf_RemovePlayerfromTeam (int lp_intPlayer, bool lp_boolHandleFaceoffUnit) {
    // Variable Declarations
    int lv_intIndex;
    bool lv_boolPlayerHit;
    int lv_intIndex2;
    int lv_intTeam;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int auto4BF33F66_ae;
    const int auto4BF33F66_ai = 1;
    int auto2A66B0B0_ae;
    const int auto2A66B0B0_ai = 1;
    int auto150172EE_ae;
    const int auto150172EE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intTeam = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam;
    auto4BF33F66_ae = (libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers + 1);
    lv_intIndex = 1;
    for ( ; ( (auto4BF33F66_ai >= 0 && lv_intIndex <= auto4BF33F66_ae) || (auto4BF33F66_ai < 0 && lv_intIndex >= auto4BF33F66_ae) ) ; lv_intIndex += auto4BF33F66_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex] == lp_intPlayer)) {
            lv_boolPlayerHit = true;
        }
        else {
            if ((lv_boolPlayerHit == true)) {
                lv_intIndex2 = (lv_intIndex - 1);
                lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
                libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2] = lv_intTmpPlayer;
            }

        }
    }
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam = 0;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsTeamLeader = false;
    if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0)) {
        libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers -= 1;
    }

    if (((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 0) && (lv_intTeam > 0))) {
        auto2A66B0B0_ae = libPEEP_gv_recGlobals.lv_intNumFaceoffTeams;
        lv_intIndex = 1;
        for ( ; ( (auto2A66B0B0_ai >= 0 && lv_intIndex <= auto2A66B0B0_ae) || (auto2A66B0B0_ai < 0 && lv_intIndex >= auto2A66B0B0_ae) ) ; lv_intIndex += auto2A66B0B0_ai ) {
            if ((libPEEP_gv_recGlobals.lv_intFaceoffTeams[lv_intIndex] == lv_intTeam)) {
                libPEEP_gv_recTeams[lv_intTeam].lv_realFaceoffAngle = 0.0;
                break;
            }

        }
        auto150172EE_ae = libPEEP_gv_recGlobals.lv_intNumFaceoffTeams;
        lv_intIndex2 = lv_intIndex;
        for ( ; ( (auto150172EE_ai >= 0 && lv_intIndex2 <= auto150172EE_ae) || (auto150172EE_ai < 0 && lv_intIndex2 >= auto150172EE_ae) ) ; lv_intIndex2 += auto150172EE_ai ) {
            libPEEP_gv_recGlobals.lv_intFaceoffTeams[lv_intIndex2] = libPEEP_gv_recGlobals.lv_intFaceoffTeams[(lv_intIndex2 + 1)];
        }
        if ((libPEEP_gv_recGlobals.lv_intNumFaceoffTeams > 0)) {
            libPEEP_gv_recGlobals.lv_intNumFaceoffTeams -= 1;
        }

    }

    if ((libPEEP_gv_recGlobals.lv_intNumFaceoffTeams == 1)) {
        libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset = libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intFaceoffTeams[1]].lv_realFaceoffAngle;
    }

    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit != null)) {
        UnitGroupRemove(libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup, libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit));
        UnitRemove(libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit);
        libPEEP_gf_DestroyPlayerPets(lp_intPlayer);
    }

}

void libPEEP_gf_KickPlayerOffTeam (int lp_intKickingPlayer, int lp_intKickedPlayer, int lp_intTeam) {
    // Variable Declarations
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_2C038417") + TextWithColor(libPEEP_gv_recPlayers[lp_intKickedPlayer].lv_txtPlayerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intKickedPlayer, false))) + StringExternal("Param/Value/lib_PEEP_C6411C64") + libPEEP_gv_recTeams[lp_intTeam].lv_txtTeamName);
    libPEEP_gf_CreateChatMessage(0, lv_txtMessage, lp_intKickingPlayer, false, false);
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_C47503FE") + libPEEP_gv_recTeams[lp_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_5051F04E") + TextWithColor(libPEEP_gv_recPlayers[lp_intKickingPlayer].lv_txtPlayerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intKickingPlayer, false))));
    libPEEP_gf_CreateChatMessage(0, lv_txtMessage, lp_intKickedPlayer, false, false);
    libPEEP_gf_RemovePlayerfromTeam(lp_intKickedPlayer, true);
    libPEEP_gf_AddPlayertoTeam(lp_intKickedPlayer, 0, false);
    if ((libPEEP_gv_recPlayers[lp_intKickedPlayer].lv_uFaceoffUnit != null)) {
        UnitGroupRemove(libPEEP_gv_recTeams[lp_intTeam].lv_ugFaceoffGroup, libPEEP_gv_recPlayers[lp_intKickedPlayer].lv_uFaceoffUnit);
        UnitKill(libPEEP_gv_recPlayers[lp_intKickedPlayer].lv_uFaceoffUnit);
    }

    libPEEP_gf_RefreshPlayerUI();
}

void libPEEP_gf_RefreshPlayerUI () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto419BE3B9_ae;
    const int auto419BE3B9_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gf_CalculateTeamInfo();
    auto419BE3B9_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto419BE3B9_ai >= 0 && lv_intPlayer <= auto419BE3B9_ae) || (auto419BE3B9_ai < 0 && lv_intPlayer >= auto419BE3B9_ae) ) ; lv_intPlayer += auto419BE3B9_ai ) {
        libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intPlayer);
    }
}

void libPEEP_gf_InitializeUI () {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gf_CreateSurrenderDialog();
    libPEEP_gf_InitializeNavButtons();
    libPEEP_gf_CreateNavButtons();
    libPEEP_gf_CreateMatchLogDialog();
    libPEEP_gf_CreateMatchHistoryDialog();
    libPEEP_gf_CreateBlizzardUIDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_InitializeAvatarButtons();
    libPEEP_gf_CreateNewbTeamDialog();
    libPEEP_gf_CreateCancelPlayDialog();
    libPEEP_gf_CreateAvatarsDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateJoinConfirmationDialog();
    libPEEP_gf_CreateVotableOptionsDialog();
    libPEEP_gf_CreateKickPlayerDialog();
    libPEEP_gf_CreateCommentatorChoiceDialog();
    libPEEP_gf_CreateNamePanelOptionsDialog();
    libPEEP_gf_CreateChangePlayerNamesDialog();
    libPEEP_gf_CreateOptionTabsDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreatePersonalOptionsDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateObserverDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateAdvancedResourceDialog();
    libPEEP_gf_CreateBlizzardResourceDialog();
    libPEEP_gf_CreateDashboard();
    libPEEP_gf_SetupMinimapUI();
    libPEEP_gf_CreateLeaderboard();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateBettingDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateStoreDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreatePurchaseConfirmationDialog();
    libPEEP_gf_CreateBlingDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateQuickDialog();
    libPEEP_gf_InitializeGeneralUI();
    libPEEP_gf_CreateHelpDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateChatDialogs();
    libPEEP_gf_CreateResourceTradingDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateTeamRestrictionDialog();
    Wait(0.1, c_timeGame);
    libPEEP_gf_CreateChatLogDialog();
    libPEEP_gf_CreateChatHelpDialog();
    libPEEP_gf_CreateRevealCountdownDialog();
    libPEEP_gf_CreateNamePanel();
}

void libPEEP_gf_InitializeGeneralUI () {
    // Variable Declarations
    int lv_intAnnouncementWidth;
    int lv_intAnnouncementHeight;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intAnnouncementWidth = 1400;
    lv_intAnnouncementHeight = 100;

    // Implementation
    DialogCreate(lv_intAnnouncementWidth, lv_intAnnouncementHeight, c_anchorTop, 0, 60, true);
    libPEEP_gv_recUI.lv_dAnnouncementDialog = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dAnnouncementDialog, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intAnnouncementWidth / 2), lv_intAnnouncementHeight, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intAnnouncementWidth / 2), lv_intAnnouncementHeight, c_anchorTopLeft, (lv_intAnnouncementWidth / 2), 0, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intAnnouncementWidth, lv_intAnnouncementHeight);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 0);
    libPEEP_gv_recUI.lv_diAnnouncement = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diAnnouncement, "ChallengeSet", PlayerGroupAll());
    DialogCreate(800, 600, c_anchorCenter, 0, -170, true);
    libPEEP_gv_recUI.lv_dMatchCountdownDialog = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dMatchCountdownDialog, false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 600);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 0);
    libPEEP_gv_recUI.lv_diMatchCountdown = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diMatchCountdown, "HeaderCenterText", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 600);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 39);
    libNtve_gf_SetDialogItemTextWriteoutDuration(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteout(DialogControlLastCreated(), true, PlayerGroupAll());
    libPEEP_gv_recUI.lv_diSubMatchCountdown = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    DialogCreate(115, 60, c_anchorBottomLeft, 290, 300, true);
    libPEEP_gv_recUI.lv_dClockReplacement = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 36), (DialogGetHeight(DialogLastCreated()) - 28), c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\black_dots.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 90, 35);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "MultiplayerLoadingPanelFavored", PlayerGroupAll());
    libPEEP_gv_recUI.lv_diClockReplacement = DialogControlLastCreated();
    DialogCreate(46, 46, c_anchorBottomLeft, 343, 124, true);
    libPEEP_gv_recUI.lv_dCinematicDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 46, 46, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diCinematicButton2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_87C8329A") + TextWithColor(StringExternal("Param/Value/lib_PEEP_25145D41"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_159487C2")), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 46, 46, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-ability-protoss-hallucination.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonCinematicMode, c_playerAny, libPEEP_gv_recUI.lv_diCinematicButton2, c_triggerControlEventTypeClick);
    DialogCreate(46, 46, c_anchorBottomRight, 200, 200, true);
    libPEEP_gv_recUI.lv_dFairMessageLogButtonDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 46, 46, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diFairMessageLogButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_1635CB2B") + TextWithColor(StringExternal("Param/Value/lib_PEEP_A15F06C0"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_4A16305E")), PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 46, 46, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\btn-ability-protoss-shieldbattery.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonShowFairMessageLog, c_playerAny, libPEEP_gv_recUI.lv_diFairMessageLogButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneCargo");
    DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeButton);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libPEEP_gv_recUI.lv_diInfoPaneCargoBlockerButton = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void libPEEP_gf_RefreshBlizzardUIPanel () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRaceIndex;

    // Automatic Variable Declarations
    int autoFBE6E0CE_ae;
    const int autoFBE6E0CE_ai = 1;

    // Variable Initialization

    // Implementation
    autoFBE6E0CE_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoFBE6E0CE_ai >= 0 && lv_intPlayer <= autoFBE6E0CE_ae) || (autoFBE6E0CE_ai < 0 && lv_intPlayer >= autoFBE6E0CE_ae) ) ; lv_intPlayer += autoFBE6E0CE_ai ) {
        lv_intRaceIndex = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace;
        if ((lv_intRaceIndex == 1)) {
            PlayerSetRace(lv_intPlayer, "Neut");
        }
        else if ((lv_intRaceIndex == 2)) {
            PlayerSetRace(lv_intPlayer, "Terr");
        }
        else if ((lv_intRaceIndex == 3)) {
            PlayerSetRace(lv_intPlayer, "Zerg");
        }
        else if ((lv_intRaceIndex == 4)) {
            PlayerSetRace(lv_intPlayer, "Prot");
        }
        else if ((lv_intRaceIndex == 5)) {
            PlayerSetRace(lv_intPlayer, "Gen");
        }
        else if ((lv_intRaceIndex == 6)) {
            PlayerSetRace(lv_intPlayer, "Xayi");
        }
        else if ((lv_intRaceIndex == 7)) {
            PlayerSetRace(lv_intPlayer, "Keir");
        }
        else if ((lv_intRaceIndex == 8)) {
            PlayerSetRace(lv_intPlayer, "UED");
        }
        else if ((lv_intRaceIndex == 9)) {
            PlayerSetRace(lv_intPlayer, "Dragon");
        }
        else if ((lv_intRaceIndex == 10)) {
            PlayerSetRace(lv_intPlayer, "NHbr");
        }
    }
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diBlizzUIPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diBlizzUIPanel, PlayerGroupAll(), true);
}

void libPEEP_gf_SelectRandomTeamforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTeam;
    int[18] lv_intEmptyTeamList;
    int lv_intNumEmptyTeams;
    int[libPEEP_gv_rACES_COUNT + 1][18] lv_intRaceTeamLists;
    int[libPEEP_gv_rACES_COUNT + 1] lv_intNumRaceTeams;
    int lv_intRace;
    int lv_intIndex;
    int lv_intSelectedRace;

    // Automatic Variable Declarations
    int autoA83F0091_ae;
    const int autoA83F0091_ai = 1;
    const int auto1D74111B_ae = 4;
    const int auto1D74111B_ai = 1;
    int autoC8D57395_ae;
    const int autoC8D57395_ai = 1;

    // Variable Initialization

    // Implementation
    autoA83F0091_ae = (libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX - 1);
    lv_intTeam = 1;
    for ( ; ( (autoA83F0091_ai >= 0 && lv_intTeam <= autoA83F0091_ae) || (autoA83F0091_ai < 0 && lv_intTeam >= autoA83F0091_ae) ) ; lv_intTeam += autoA83F0091_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 0)) {
            lv_intNumEmptyTeams += 1;
            lv_intEmptyTeamList[lv_intNumEmptyTeams] = lv_intTeam;
        }

    }
    lv_intRace = 2;
    for ( ; ( (auto1D74111B_ai >= 0 && lv_intRace <= auto1D74111B_ae) || (auto1D74111B_ai < 0 && lv_intRace >= auto1D74111B_ae) ) ; lv_intRace += auto1D74111B_ai ) {
        autoC8D57395_ae = lv_intNumEmptyTeams;
        lv_intIndex = 1;
        for ( ; ( (autoC8D57395_ai >= 0 && lv_intIndex <= autoC8D57395_ae) || (autoC8D57395_ai < 0 && lv_intIndex >= autoC8D57395_ae) ) ; lv_intIndex += autoC8D57395_ai ) {
            lv_intTeam = lv_intEmptyTeamList[lv_intIndex];
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_intRace == lv_intRace)) {
                lv_intNumRaceTeams[lv_intRace] += 1;
                lv_intRaceTeamLists[lv_intRace][lv_intNumRaceTeams[lv_intRace]] = lv_intTeam;
            }

        }
    }
    lv_intSelectedRace = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diRacePulldown, lp_intPlayer);
    if (((lv_intSelectedRace == 1) || (lv_intNumRaceTeams[lv_intSelectedRace] == 0))) {
        lv_intTeam = lv_intEmptyTeamList[RandomInt(1, lv_intNumEmptyTeams)];
    }
    else {
        lv_intTeam = lv_intRaceTeamLists[lv_intSelectedRace][RandomInt(1, lv_intNumRaceTeams[lv_intSelectedRace])];
    }
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intLastTeamSelection = lv_intTeam;
    libPEEP_gf_TrytoAddPlayertoTeam(lp_intPlayer, lv_intTeam);
}

void libPEEP_gf_CreateNewbTeamDialog () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto076A1C8C_ae;
    const int auto076A1C8C_ai = 1;
    int auto601C3CA2_ae;
    const int auto601C3CA2_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(330, 280, c_anchorTopLeft, libPEEP_gv_recGlobals.lv_intDialogXStart, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 100, c_anchorTop, 0, 35, StringExternal("Param/Value/lib_PEEP_4C198D79"), StringExternal("Param/Value/lib_PEEP_4E299F6C"), "");
    libPEEP_gv_recUI.lv_diTeamNewbButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonNewbTeamSelection, c_playerAny, libPEEP_gv_recUI.lv_diTeamNewbButton, c_triggerControlEventTypeClick);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diRacePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownRace, c_playerAny, libPEEP_gv_recUI.lv_diRacePulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 89);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_5C79F16C"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_AA321D7E"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_1EDBBAE7"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_D4AC98C7"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_DA063905"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_A82410D2"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_5D4A83FA"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_447EF2F0"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_D6BF662B"));
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_B9A85870"));
    auto076A1C8C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto076A1C8C_ai >= 0 && lv_intPlayer <= auto076A1C8C_ae) || (auto076A1C8C_ai < 0 && lv_intPlayer >= auto076A1C8C_ae) ) ; lv_intPlayer += auto076A1C8C_ai ) {
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupSingle(lv_intPlayer), libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace);
    }
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_0BE6F400"), PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diLeaguePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownLeague, c_playerAny, libPEEP_gv_recUI.lv_diLeaguePulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 0, 35);
    auto601C3CA2_ae = libPEEP_gv_recGlobals.lv_intNumLeagues;
    lv_intIndex = 1;
    for ( ; ( (auto601C3CA2_ai >= 0 && lv_intIndex <= auto601C3CA2_ae) || (auto601C3CA2_ai < 0 && lv_intIndex >= auto601C3CA2_ae) ) ; lv_intIndex += auto601C3CA2_ai ) {
        if ((lv_intIndex == 1)) {
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_3F4BE47A"));
        }
        else {
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), libPEEP_gv_recGlobals.lv_recLeagues[lv_intIndex].lv_txtName);
        }
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_057560A7"), PlayerGroupAll());
}

void libPEEP_gf_CreateCancelPlayDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(330, 165, c_anchorTopLeft, libPEEP_gv_recGlobals.lv_intDialogXStart, 335, true);
    libPEEP_gv_recUI.lv_dCancelTeamDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 250, 100, c_anchorTop, 0, 35, StringExternal("Param/Value/lib_PEEP_26809166"), TextWithColor(StringExternal("Param/Value/lib_PEEP_83AAD2BE"), (Color(150*100/255,150*100/255,30*100/255))), "");
    libPEEP_gv_recUI.lv_diCancelTeamButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonCancelTeam, c_playerAny, libPEEP_gv_recUI.lv_diCancelTeamButton, c_triggerControlEventTypeClick);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
}

void libPEEP_gf_CreateJoinConfirmationDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(450, 330, c_anchorTopLeft, 285, 170, true);
    libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, 350, 250, c_anchorTop, 0, 50, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diTeamJoinConfirmationLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, 150, 50, c_anchorBottom, -80, 40, StringToText(""), StringExternal("Param/Value/lib_PEEP_FAAB8409"), "");
    libPEEP_gv_recUI.lv_diTeamJoinYes = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, 150, 50, c_anchorBottom, 80, 40, StringToText(""), StringExternal("Param/Value/lib_PEEP_0E3B41C1"), "");
    libPEEP_gv_recUI.lv_diTeamJoinNo = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonConfirmJoin, c_playerAny, libPEEP_gv_recUI.lv_diTeamJoinYes, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonDeclineJoin, c_playerAny, libPEEP_gv_recUI.lv_diTeamJoinNo, c_triggerControlEventTypeClick);
}

void libPEEP_gf_CreateAvatarsDialog () {
    // Variable Declarations
    int lv_intCount;
    int lv_intRow;
    int lv_intCol;
    int lv_intX;
    int lv_intY;
    int lv_intButtonPlusGap;
    int lv_intNumRows;
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intHeaderWidth;
    int lv_intPlayer;
    int lv_intPage;

    // Automatic Variable Declarations
    int auto6F8628BD_ae;
    const int auto6F8628BD_ai = 1;
    const int auto331F6A39_ae = 5;
    const int auto331F6A39_ai = 1;
    const int auto90A9E57C_ae = 3;
    const int auto90A9E57C_ai = 1;

    // Variable Initialization
    lv_intX = libPEEP_gv_recGlobals.lv_intDialogBorder;
    lv_intY = (libPEEP_gv_recGlobals.lv_intDialogBorder + libPEEP_gv_recGlobals.lv_intDialogHeaderHeight + libPEEP_gv_recGlobals.lv_intDialogHeaderPadding);
    lv_intButtonPlusGap = (libPEEP_gv_recGlobals.lv_intTeamButtonSize + libPEEP_gv_recGlobals.lv_intTeamButtonGap);
    lv_intNumRows = 5;
    lv_intDialogWidth = (libPEEP_gv_recGlobals.lv_intDialogExtra + ((libPEEP_gv_recGlobals.lv_intTeamButtonSize + libPEEP_gv_recGlobals.lv_intTeamButtonGap) * libPEEP_gv_recGlobals.lv_intNumButtonTeamCols));
    lv_intDialogHeight = (libPEEP_gv_recGlobals.lv_intDialogExtra + ((libPEEP_gv_recGlobals.lv_intTeamButtonSize + libPEEP_gv_recGlobals.lv_intTeamButtonGap) * lv_intNumRows) + libPEEP_gv_recGlobals.lv_intDialogHeaderHeight + 50);
    lv_intHeaderWidth = (lv_intDialogWidth - libPEEP_gv_recGlobals.lv_intDialogExtra);

    // Implementation
    DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTopLeft, 180, 175, true);
    libPEEP_gv_recUI.lv_dAvatarDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dAvatarDialog, lv_intHeaderWidth, libPEEP_gv_recGlobals.lv_intDialogHeaderHeight, c_anchorTop, 5, libPEEP_gv_recGlobals.lv_intDialogBorder, StringToText(""), Color(100,100,100), false, 2.0);
    if ((libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE == 1)) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_2992F2BA"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_8FE92F71"), PlayerGroupAll());
    }
    libPEEP_gv_recUI.lv_diAvatarsTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diAvatarsTitle, "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dAvatarDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diAvatarsDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXAvatarsDialog, c_playerAny, libPEEP_gv_recUI.lv_diAvatarsDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    auto6F8628BD_ae = libPEEP_gv_recGlobals.lv_intNumAvatarPages;
    lv_intPage = 1;
    for ( ; ( (auto6F8628BD_ai >= 0 && lv_intPage <= auto6F8628BD_ae) || (auto6F8628BD_ai < 0 && lv_intPage >= auto6F8628BD_ae) ) ; lv_intPage += auto6F8628BD_ai ) {
        lv_intY = 70;
        lv_intRow = 1;
        for ( ; ( (auto331F6A39_ai >= 0 && lv_intRow <= auto331F6A39_ae) || (auto331F6A39_ai < 0 && lv_intRow >= auto331F6A39_ae) ) ; lv_intRow += auto331F6A39_ai ) {
            lv_intX = libPEEP_gv_recGlobals.lv_intDialogBorder;
            lv_intCol = 1;
            for ( ; ( (auto90A9E57C_ai >= 0 && lv_intCol <= auto90A9E57C_ae) || (auto90A9E57C_ai < 0 && lv_intCol >= auto90A9E57C_ae) ) ; lv_intCol += auto90A9E57C_ai ) {
                lv_intCount += 1;
                if ((lv_intCount <= libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS)) {
                    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dAvatarDialog, libPEEP_gv_recGlobals.lv_intTeamButtonSize, libPEEP_gv_recGlobals.lv_intTeamButtonSize, c_anchorTopLeft, lv_intX, lv_intY, libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intCount].lv_txtTooltip, StringToText(""), "");
                    libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intCount] = DialogControlLastCreated();
                    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
                    TriggerAddEventDialogControl(libPEEP_gt_ButtonsTeamSelection, c_playerAny, libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intCount], c_triggerControlEventTypeClick);
                    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dAvatarDialog, libPEEP_gv_recGlobals.lv_intTeamIconSize, libPEEP_gv_recGlobals.lv_intTeamIconSize, c_anchorTopLeft, (lv_intX + libPEEP_gv_recGlobals.lv_intTeamButtonInlay), (lv_intY + libPEEP_gv_recGlobals.lv_intTeamButtonInlay), StringToText(""), libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intCount].lv_fIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libPEEP_gv_recUI.lv_diTeamSelectionIcons[lv_intCount] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dAvatarDialog, 50, 50, c_anchorTopLeft, (lv_intX + 58), (lv_intY + 55), StringToText(""), Color(100,100,100), false, 2.0);
                    libPEEP_gv_recUI.lv_diTeamSelectionLabels[lv_intCount] = DialogControlLastCreated();
                    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
                    lv_intX += lv_intButtonPlusGap;
                }

            }
            lv_intY += lv_intButtonPlusGap;
        }
    }
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dAvatarDialog, 60, 50, c_anchorBottomLeft, 50, 30, StringExternal("Param/Value/lib_PEEP_26B2422E"), StringExternal("Param/Value/lib_PEEP_CC757C22"), "");
    libPEEP_gv_recUI.lv_diAvatarsPreviousPageButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonAvatarsPreviousPage, c_playerAny, libPEEP_gv_recUI.lv_diAvatarsPreviousPageButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 60, 50, c_anchorBottomRight, 50, 30, StringExternal("Param/Value/lib_PEEP_BFB0E048"), StringExternal("Param/Value/lib_PEEP_3787173D"), "");
    libPEEP_gv_recUI.lv_diAvatarsNextPageButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonAvatarsNextPage, c_playerAny, libPEEP_gv_recUI.lv_diAvatarsNextPageButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 40, c_anchorBottom, 0, 35, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diAvatarsPageLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
}

void libPEEP_gf_TrytoAddPlayertoTeam (int lp_intPlayer, int lp_intTeam) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_intTeam;
    bool lv_boolTriggered;
    int lv_intTeamLeader;
    int lv_intOldTeam;
    text lv_txtMessage;
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intTeam = lp_intTeam;

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        lv_intTeamLeader = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
        lv_boolTriggered = true;
        DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lp_intPlayer), false);
        if (((lv_intTeam == 0) || (lv_intTeam == (libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS + 1)))) {
            libPEEP_gf_RemovePlayerfromTeam(lp_intPlayer, true);
            libPEEP_gf_AddPlayertoTeam(lp_intPlayer, 0, true);
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolWinnerToken = false;
        }
        else {
            if (((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intLastTeamConfirmation != lv_intTeam) && (libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1] != lp_intPlayer) && (libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[2] != lp_intPlayer))) {
                lv_txtMessage = (libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_A7C4AA98") + libPEEP_gv_recTeams[lv_intTeam].lv_txtPlayerList + StringExternal("Param/Value/lib_PEEP_C9023E63"));
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTeamJoinConfirmationLabel, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
                DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lp_intPlayer), true);
            }
            else {
                if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers >= libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE)) {
                    libPEEP_gf_CreateChatMessage(0, (libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_A607AD20")), lp_intPlayer, false, false);
                }
                else {
                    if ((libPEEP_gv_recPlayers[lv_intTeamLeader].lv_boolTeamAllowanceList[lp_intPlayer] == true)) {
                        libPEEP_gf_RemovePlayerfromTeam(lp_intPlayer, true);
                        libPEEP_gf_AddPlayertoTeam(lp_intPlayer, lv_intTeam, true);
                        TimerStart(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerTeamSelectionCooldown, libPEEP_gv_recGlobals.lv_realTeamSelectionCooldown, false, c_timeReal);
                    }

                }
            }
        }
        if ((lv_boolTriggered == true)) {
            libPEEP_gf_RefreshPlayerUI();
        }

    }

}

void libPEEP_gf_InitializeAvatarButtons () {
    // Variable Declarations
    text lv_txtTooltip;
    int lv_intTeam;

    // Automatic Variable Declarations
    int auto633A81BC_ae;
    const int auto633A81BC_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intTeam].lv_txtTooltip = libPEEP_gv_recTeams[0].lv_txtTeamName;
    libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intTeam].lv_fIcon = libPEEP_gv_recTeams[0].lv_fIcon;
    libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intTeam].lv_utSpawnUnit = libPEEP_gv_recTeams[0].lv_utSpawnUnit;
    auto633A81BC_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto633A81BC_ai >= 0 && lv_intTeam <= auto633A81BC_ae) || (auto633A81BC_ai < 0 && lv_intTeam >= auto633A81BC_ae) ) ; lv_intTeam += auto633A81BC_ai ) {
        if ((lv_intTeam >= libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX)) {
            lv_txtTooltip = (libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_2292CBA2") + libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip);
        }
        else {
            lv_txtTooltip = libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip;
        }
        libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intTeam].lv_txtTooltip = lv_txtTooltip;
        libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intTeam].lv_fIcon = libPEEP_gv_recTeams[lv_intTeam].lv_fIcon;
        libPEEP_gv_recUI.lv_recConfigTeamButtons[lv_intTeam].lv_utSpawnUnit = libPEEP_gv_recTeams[lv_intTeam].lv_utSpawnUnit;
    }
}

void libPEEP_gf_RefreshAvatarButtonsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTeam;
    int lv_intTeamLeader;
    int lv_intNumPlayers;
    text lv_txtMessage;
    bool lv_boolTeamUnlocked;
    int lv_intTmp;

    // Automatic Variable Declarations
    int autoEF47967B_ae;
    const int autoEF47967B_ai = 1;

    // Variable Initialization

    // Implementation
    autoEF47967B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (autoEF47967B_ai >= 0 && lv_intTeam <= autoEF47967B_ae) || (autoEF47967B_ai < 0 && lv_intTeam >= autoEF47967B_ae) ) ; lv_intTeam += autoEF47967B_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 0)) {
            lv_txtMessage = (libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_90C83BF1") + StringExternal("Param/Value/lib_PEEP_233032DE"));
        }
        else {
            lv_txtMessage = (libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_4107CA00") + IntToText(libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers) + StringExternal("Param/Value/lib_PEEP_3103230B") + libPEEP_gv_recTeams[lv_intTeam].lv_txtPlayerList + StringToText(""));
        }
        if ((lv_intTeam >= libPEEP_gv_recGlobals.lv_iNT_TEAM_PURCHASE_INDEX)) {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[libPEEP_gv_recTeams[lv_intTeam].lv_intStoreID] == true)) {
                lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_35980E20") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recStoreItems[libPEEP_gv_recTeams[lv_intTeam].lv_intStoreID].lv_intPrice));
            }
            else {
                lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_A5EAFE54") + libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip);
            }
        }
        else {
            lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_71B11BB2") + libPEEP_gv_recTeams[lv_intTeam].lv_txtTooltip);
        }
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intTeam], lv_txtMessage, PlayerGroupAll());
        lv_txtMessage = StringToText("");
        lv_intNumPlayers = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        if ((lv_intNumPlayers == 0)) {
            lv_txtMessage = StringToText("");
        }
        else {
            lv_txtMessage = IntToText(lv_intNumPlayers);
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTeamSelectionLabels[lv_intTeam], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
        lv_intTeamLeader = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
        if (((libPEEP_gv_recPlayers[lv_intTeamLeader].lv_boolTeamAllowanceList[lp_intPlayer] == true) && (libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers < libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE) && (lv_intTeam != libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam) && ((lv_intTeam < libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX) || ((lv_intTeam >= libPEEP_gv_recGlobals.lv_iNT_TEAM_PURCHASE_INDEX) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[libPEEP_gv_recTeams[lv_intTeam].lv_intStoreID] == true)) || ((lv_intTeam < libPEEP_gv_recGlobals.lv_iNT_TEAM_STREAK_INDEX) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intWins >= 1)) || ((lv_intTeam < libPEEP_gv_recGlobals.lv_iNT_TEAM_LOCKED_INDEX) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intWins > 1) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intWins > ((lv_intTeam - libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX) - 2))) || ((lv_intTeam == libPEEP_gv_recGlobals.lv_iNT_TEAM_LOCKED_INDEX) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intChips >= 10000))))) {
            lv_boolTeamUnlocked = true;
        }
        else {
            lv_boolTeamUnlocked = false;
        }
        if ((lv_boolTeamUnlocked == true)) {
            if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && (TimerGetRemaining(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerTeamSelectionCooldown) == 0.0) && (libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intTeam], PlayerGroupSingle(lp_intPlayer), true);
                DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTeamSelectionIcons[lv_intTeam], PlayerGroupSingle(lp_intPlayer), 0.0, 0.0);
            }
            else {
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intTeam], PlayerGroupSingle(lp_intPlayer), false);
                DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTeamSelectionIcons[lv_intTeam], PlayerGroupSingle(lp_intPlayer), 0.0, 25.0);
            }
        }
        else {
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intTeam], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTeamSelectionIcons[lv_intTeam], PlayerGroupSingle(lp_intPlayer), 0.0, 75.0);
        }
    }
}

void libPEEP_gf_RefreshAvatarDialogPageforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intCurrentPage;
    int lv_intIndex;
    int lv_intFirstIndex;
    int lv_intLastIndex;
    text lv_txtMessage;

    // Automatic Variable Declarations
    int autoE3051037_ae;
    const int autoE3051037_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intCurrentPage = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentAvatarPage;
    if ((lv_intCurrentPage == 0)) {
        lv_intCurrentPage = 1;
    }

    lv_intFirstIndex = ((libPEEP_gv_recGlobals.lv_intAvatarsPerPage * (lv_intCurrentPage - 1)) + 1);
    lv_intLastIndex = ((lv_intFirstIndex + libPEEP_gv_recGlobals.lv_intAvatarsPerPage) - 1);
    if ((lv_intLastIndex > libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS)) {
        lv_intLastIndex = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    }

    autoE3051037_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intIndex = 1;
    for ( ; ( (autoE3051037_ai >= 0 && lv_intIndex <= autoE3051037_ae) || (autoE3051037_ai < 0 && lv_intIndex >= autoE3051037_ae) ) ; lv_intIndex += autoE3051037_ai ) {
        if (((lv_intIndex >= lv_intFirstIndex) && (lv_intIndex <= lv_intLastIndex))) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diTeamSelectionIcons[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diTeamSelectionLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
        else {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diTeamSelectionIcons[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diTeamSelectionLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        }
    }
    lv_txtMessage = (libPEEP_gf_formatIntegerAsText(lv_intCurrentPage) + StringExternal("Param/Value/lib_PEEP_C68F9252") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recGlobals.lv_intNumAvatarPages));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_44BC6499") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_B20765FD"));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diAvatarsPageLabel, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
}

void libPEEP_gf_AwardBettersatEndofMatch () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intWinningTeam;
    int lv_intDelta;
    int lv_intDeltaAbsolute;
    text lv_txtAnnouncement;
    int lv_intNumBetters;
    int[7] lv_intTeamList;
    int lv_intTeamCount;
    bool lv_boolMatched;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto9677E9D9_ae;
    const int auto9677E9D9_ai = 1;
    int autoD52BAA52_ae;
    const int autoD52BAA52_ai = 1;
    int auto1F1D177E_ae;
    const int auto1F1D177E_ai = 1;

    // Variable Initialization

    // Implementation
    auto9677E9D9_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto9677E9D9_ai >= 0 && lv_intPlayer <= auto9677E9D9_ae) || (auto9677E9D9_ai < 0 && lv_intPlayer >= auto9677E9D9_ae) ) ; lv_intPlayer += auto9677E9D9_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == true)) {
            lv_intWinningTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam;
        }

        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount > 0) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            lv_intNumBetters += 1;
            lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam;
            lv_boolMatched = false;
            autoD52BAA52_ae = lv_intTeamCount;
            lv_intIndex = 1;
            for ( ; ( (autoD52BAA52_ai >= 0 && lv_intIndex <= autoD52BAA52_ae) || (autoD52BAA52_ai < 0 && lv_intIndex >= autoD52BAA52_ae) ) ; lv_intIndex += autoD52BAA52_ai ) {
                if ((lv_intTeam == lv_intTeamList[lv_intIndex])) {
                    lv_boolMatched = true;
                }

            }
            if ((lv_boolMatched == false)) {
                lv_intTeamCount += 1;
                lv_intTeamList[lv_intTeamCount] = lv_intTeam;
            }

        }

    }
    auto1F1D177E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto1F1D177E_ai >= 0 && lv_intPlayer <= auto1F1D177E_ae) || (auto1F1D177E_ai < 0 && lv_intPlayer >= auto1F1D177E_ae) ) ; lv_intPlayer += auto1F1D177E_ai ) {
        lv_txtAnnouncement = StringToText("");
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount > 0))) {
            libPEEP_gf_RefreshBettingPayoutsForPlayer(lv_intPlayer, false);
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam == lv_intWinningTeam)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips + libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetPotentialPayout);
                lv_intDelta = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetPotentialPayout;
                lv_intDeltaAbsolute = lv_intDelta;
            }
            else {
                if ((lv_intTeamCount == 1)) {
                    lv_intDeltaAbsolute = (0 + FixedToInt((IntToFixed(libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount) * 0.3)));
                    lv_intDelta = (0 - lv_intDeltaAbsolute);
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips + lv_intDelta);
                }
                else {
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips - libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount);
                    lv_intDelta = (0 - libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount);
                    lv_intDeltaAbsolute = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount;
                }
            }
            if ((lv_intDelta > 0)) {
                lv_txtAnnouncement = TextWithColor((StringExternal("Param/Value/lib_PEEP_CB605050") + libPEEP_gf_formatIntegerAsText(lv_intDelta) + StringExternal("Param/Value/lib_PEEP_9E267B32")), (Color(20*100/255,134*100/255,107*100/255)));
            }
            else {
                if ((lv_intDelta < 0)) {
                    lv_txtAnnouncement = TextWithColor((StringExternal("Param/Value/lib_PEEP_3EBF0968") + libPEEP_gf_formatIntegerAsText(lv_intDeltaAbsolute) + StringExternal("Param/Value/lib_PEEP_2BBD47FE")), (Color(100.00, 0.00, 0.00)));
                }
                else {
                    lv_txtAnnouncement = TextWithColor((StringExternal("Param/Value/lib_PEEP_05161153")), (Color(149*100/255,150*100/255,151*100/255)));
                }
            }
            lv_txtAnnouncement = (StringExternal("Param/Value/lib_PEEP_D14E9BD3") + lv_txtAnnouncement + StringExternal("Param/Value/lib_PEEP_08FB4D40"));
        }

        lv_txtAnnouncement = (lv_txtAnnouncement + StringExternal("Param/Value/lib_PEEP_8965A87F") + StringExternal("Param/Value/lib_PEEP_683BDC5E") + TextWithColor(StringExternal("Param/Value/lib_PEEP_BD049CDA"), (Color(20*100/255,134*100/255,107*100/255))) + StringExternal("Param/Value/lib_PEEP_CBD8FD12"));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, lv_txtAnnouncement, PlayerGroupSingle(lv_intPlayer));
    }
}

void libPEEP_gf_ClearOutBetting () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoAF965C94_ae;
    const int autoAF965C94_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_StopFlashingScreenButton(5);
    DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll());
    autoAF965C94_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoAF965C94_ai >= 0 && lv_intPlayer <= autoAF965C94_ae) || (autoAF965C94_ai < 0 && lv_intPlayer >= autoAF965C94_ae) ) ; lv_intPlayer += autoAF965C94_ai ) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount = 0;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetPotentialPayout = 0;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam = 0;
        libPEEP_gf_RefreshBettingPayoutsForPlayer(lv_intPlayer, false);
        libNtve_gf_SetDialogItemMaximumValue(libPEEP_gv_recUI.lv_diBettingMaxSliderLabel, IntToFixed(libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips), PlayerGroupSingle(lv_intPlayer));
    }
    libPEEP_gf_RefreshPotLabel();
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diBettingCountdownLabel, StringToText(""), PlayerGroupAll());
}

void libPEEP_gf_RefreshBettingPayoutsForPlayer (int lp_intPlayer, bool lp_boolIncludePotentialBets) {
    // Variable Declarations
    int lv_intPotentialBet;
    int lv_intSpecifiedIndex;
    int lv_intPlayerBet;
    int lv_intTotalPot;
    int[201] lv_intTeamPotList;
    int lv_intTeam;
    int lv_intTmpTotalPot;
    int lv_intPayout;
    text lv_txtText;
    int lv_intAvailableChips;
    int lv_intTmpPlayer;
    text lv_txtPotentialBet;
    text lv_txtPotentialBet2;
    text lv_txtPotentialPayout;

    // Automatic Variable Declarations
    int autoB8416A0B_ae;
    const int autoB8416A0B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSelectedForMatch == false)) {
        autoB8416A0B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intTmpPlayer = 1;
        for ( ; ( (autoB8416A0B_ai >= 0 && lv_intTmpPlayer <= autoB8416A0B_ae) || (autoB8416A0B_ai < 0 && lv_intTmpPlayer >= autoB8416A0B_ae) ) ; lv_intTmpPlayer += autoB8416A0B_ai ) {
            lv_intTeam = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intCurrentBetTeam;
            if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intCurrentBetTeam > 0)) {
                lv_intTotalPot = (lv_intTotalPot + libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intCurrentBetAmount);
                lv_intTeamPotList[lv_intTeam] = (lv_intTeamPotList[lv_intTeam] + libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intCurrentBetAmount);
            }

        }
        lv_intTmpTotalPot = lv_intTotalPot;
        lv_intSpecifiedIndex = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diBettingPulldown, lp_intPlayer);
        lv_intTeam = libPEEP_gv_recGlobals.lv_intBettingPulldownTeamIDs[lv_intSpecifiedIndex];
        lv_intPlayerBet = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount;
        lv_intPotentialBet = FixedToInt(libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diBettingSlider, lp_intPlayer));
        if ((lp_boolIncludePotentialBets == true)) {
            lv_intPlayerBet = (lv_intPlayerBet + lv_intPotentialBet);
            lv_intTmpTotalPot = (lv_intTmpTotalPot + lv_intPotentialBet);
            lv_intTeamPotList[lv_intTeam] = (lv_intTeamPotList[lv_intTeam] + lv_intPotentialBet);
        }

        if ((lv_intTeamPotList[lv_intTeam] == 0)) {
            if ((lv_intTeam > 0)) {
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout = (lv_intTmpTotalPot - lv_intPlayerBet);
            }
            else {
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout = 0;
            }
        }
        else {
            lv_intPayout = ((lv_intPlayerBet * lv_intTmpTotalPot) / lv_intTeamPotList[lv_intTeam]);
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout = (lv_intPayout - lv_intPlayerBet);
        }
        if (((lv_intPlayerBet > 0) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout == 0))) {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout = FixedToInt((IntToFixed(lv_intPlayerBet) * 0.3));
        }

        lv_intPotentialBet = FixedToInt(libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diBettingSlider, lp_intPlayer));
        lv_intAvailableChips = (libPEEP_gv_recPlayers[lp_intPlayer].lv_intChips - libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount);
        lv_txtPotentialBet = libPEEP_gf_formatIntegerAsText(lv_intPotentialBet);
        lv_txtPotentialBet2 = (StringExternal("Param/Value/lib_PEEP_324933DB") + lv_txtPotentialBet);
        lv_txtPotentialBet = (StringExternal("Param/Value/lib_PEEP_A3694D88") + lv_txtPotentialBet);
        if ((lv_intPotentialBet > 0)) {
            lv_txtPotentialBet = TextWithColor(lv_txtPotentialBet, (Color(100.00, 0.00, 0.00)));
            lv_txtPotentialBet2 = TextWithColor(lv_txtPotentialBet2, (Color(20*100/255,134*100/255,107*100/255)));
        }

        lv_txtText = (libPEEP_gf_formatIntegerAsText(lv_intAvailableChips) + TextWithColor(StringExternal("Param/Value/lib_PEEP_E0CBF767"), (Color(149*100/255,150*100/255,151*100/255))));
        if ((lv_intPotentialBet > 0)) {
            lv_txtText = (lv_txtText + StringToText("") + lv_txtPotentialBet);
        }

        lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_91051247"));
        lv_txtText = (lv_txtText + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount) + TextWithColor(StringExternal("Param/Value/lib_PEEP_A44AC0EE"), (Color(149*100/255,150*100/255,151*100/255))));
        if ((lv_intPotentialBet > 0)) {
            lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_7F3DEC61") + lv_txtPotentialBet2);
        }

        lv_txtPotentialPayout = (libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout));
        lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_9C202F76") + lv_txtPotentialPayout + TextWithColor(StringExternal("Param/Value/lib_PEEP_85094C82"), (Color(149*100/255,150*100/255,151*100/255))));
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetPotentialPayout > 0)) {
            lv_txtPotentialPayout = TextWithColor(lv_txtPotentialPayout, (Color(20*100/255,134*100/255,107*100/255)));
        }

        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diBettingPulldown, lv_txtText, PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diBettingSlider, lv_txtText, PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diBettingPlaceBetButton, lv_txtText, PlayerGroupSingle(lp_intPlayer));
    }

}

void libPEEP_gf_NewBettingPeriodforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intAvailableChips;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSelectedForMatch == false)) {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount == 0)) {
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupSingle(lp_intPlayer), true);
        }

        lv_intAvailableChips = (libPEEP_gv_recPlayers[lp_intPlayer].lv_intChips - libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount);
        libNtve_gf_SetDialogItemMaximumValue(libPEEP_gv_recUI.lv_diBettingSlider, IntToFixed(lv_intAvailableChips), PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diBettingMaxSliderLabel, TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intAvailableChips), libPEEP_gv_recGlobals.lv_coChipsColor), PlayerGroupSingle(lp_intPlayer));
        if ((lv_intAvailableChips > 0)) {
            if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diBettingPulldown, lp_intPlayer) > 1)) {
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupSingle(lp_intPlayer), true);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPlaceBetButton, PlayerGroupSingle(lp_intPlayer), true);
            }

            if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox, lp_intPlayer) == true) && (libPEEP_gf_getNumObservers() > 1))) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lp_intPlayer), true);
                libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBetting = true;
            }

        }

        libPEEP_gf_RefreshBettingPayoutsForPlayer(lp_intPlayer, false);
    }

}

void libPEEP_gf_RefreshPotLabel () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTotalPot;
    int[201] lv_intTeamPotList;
    int lv_intTeam;
    text lv_txtPot;
    text lv_txtPlayers;
    int lv_intIndex;
    text lv_txtTeamName;
    text lv_txtBetterList;
    int lv_intNumBetters;

    // Automatic Variable Declarations
    int auto52ED5068_ae;
    const int auto52ED5068_ai = 1;
    int auto0CB7664A_ae;
    const int auto0CB7664A_ai = 1;
    int auto4A659FB3_ae;
    const int auto4A659FB3_ai = 1;

    // Variable Initialization

    // Implementation
    auto52ED5068_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto52ED5068_ai >= 0 && lv_intPlayer <= auto52ED5068_ae) || (auto52ED5068_ai < 0 && lv_intPlayer >= auto52ED5068_ae) ) ; lv_intPlayer += auto52ED5068_ai ) {
        lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam;
        if ((lv_intTeam > 0)) {
            lv_intTotalPot = (lv_intTotalPot + libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount);
            lv_intTeamPotList[lv_intTeam] = (lv_intTeamPotList[lv_intTeam] + libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount);
        }

    }
    auto0CB7664A_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto0CB7664A_ai >= 0 && lv_intIndex <= auto0CB7664A_ae) || (auto0CB7664A_ai < 0 && lv_intIndex >= auto0CB7664A_ae) ) ; lv_intIndex += auto0CB7664A_ai ) {
        if ((libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex] > 0)) {
            lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex];
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 1)) {
                lv_txtTeamName = libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1]].lv_txtPlayerName;
                lv_txtTeamName = TextWithColor(lv_txtTeamName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1], false)));
            }
            else {
                lv_txtTeamName = libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName;
                lv_txtTeamName = TextWithColor(lv_txtTeamName, (Color(149*100/255,150*100/255,151*100/255)));
            }
            lv_txtPlayers = (lv_txtPlayers + lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_349C481C"));
            lv_txtPot = (lv_txtPot + libPEEP_gf_formatIntegerAsText(lv_intTeamPotList[lv_intTeam]) + StringExternal("Param/Value/lib_PEEP_39B5109E"));
        }

    }
    if ((libPEEP_gv_recGameState.lv_intNumPlayingTeams == 2)) {
        lv_txtPot = (StringExternal("Param/Value/lib_PEEP_4ED0B990") + TextWithColor(lv_txtPot, libPEEP_gv_recGlobals.lv_coChipsColor));
        lv_txtPlayers = (StringExternal("Param/Value/lib_PEEP_B412FE8A") + lv_txtPlayers);
    }

    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diBettingPotLabel, lv_txtPot, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diBettingPotLabel2, lv_txtPlayers, PlayerGroupAll());
    auto4A659FB3_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto4A659FB3_ai >= 0 && lv_intPlayer <= auto4A659FB3_ae) || (auto4A659FB3_ai < 0 && lv_intPlayer >= auto4A659FB3_ae) ) ; lv_intPlayer += auto4A659FB3_ai ) {
        lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam;
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount > 0)) {
            lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam;
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 1)) {
                lv_txtTeamName = libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName;
                lv_txtTeamName = TextWithColor(lv_txtTeamName, (Color(149*100/255,150*100/255,151*100/255)));
            }
            else {
                lv_txtTeamName = libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1]].lv_txtPlayerName;
                lv_txtTeamName = TextWithColor(lv_txtTeamName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1], false)));
            }
            lv_txtBetterList = (lv_txtBetterList + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_F8E7ED90") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount) + StringExternal("Param/Value/lib_PEEP_C8E64F62") + lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_281C269A"));
        }

    }
    lv_txtPot = (TextWithColor(StringExternal("Param/Value/lib_PEEP_BFA9BA82"), (Color(149*100/255,150*100/255,151*100/255))) + libPEEP_gf_formatIntegerAsText(lv_intTotalPot) + StringExternal("Param/Value/lib_PEEP_8E66B130") + lv_txtBetterList);
    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diBettingPotLabel, lv_txtPot, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diBettingPotLabel2, lv_txtPot, PlayerGroupAll());
}

void libPEEP_gf_CreateBettingDialog () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(400, 320, c_anchorTop, 0, 110, true);
    libPEEP_gv_recUI.lv_dBettingDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dBettingDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diBettingDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXBettingDialog, c_playerAny, libPEEP_gv_recUI.lv_diBettingDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dBettingDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dBettingDialog, 150, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_PEEP_F6881A6E"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    DialogControlCreate(libPEEP_gv_recUI.lv_dBettingDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diBettingPulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownTeamtoWin, c_playerAny, libPEEP_gv_recUI.lv_diBettingPulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), c_anchorTopLeft, 160, 35);
    DialogControlSetSize(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), 200, 50);
    DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_E82C35DB"));
    DialogControlCreate(libPEEP_gv_recUI.lv_dBettingDialog, c_triggerControlTypeSlider);
    libPEEP_gv_recUI.lv_diBettingSlider = DialogControlLastCreated();
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupAll(), c_anchorTopLeft, 85, 85);
    DialogControlSetSize(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupAll(), 190, 50);
    libNtve_gf_SetDialogItemMinimumValue(libPEEP_gv_recUI.lv_diBettingSlider, 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(libPEEP_gv_recUI.lv_diBettingSlider, 1000.0, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dBettingDialog, 200, 50, c_anchorTopLeft, 50, 100, TextWithColor(StringExternal("Param/Value/lib_PEEP_F1BCCA85"), libPEEP_gv_recGlobals.lv_coChipsColor), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dBettingDialog, 200, 50, c_anchorTopLeft, 280, 100, TextWithColor(StringExternal("Param/Value/lib_PEEP_1F316E40"), libPEEP_gv_recGlobals.lv_coChipsColor), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libPEEP_gv_recUI.lv_diBettingMaxSliderLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dBettingDialog, 135, 50, c_anchorTopRight, 50, 140, StringToText(""), StringExternal("Param/Value/lib_PEEP_A926EE75"), "");
    libPEEP_gv_recUI.lv_diBettingPlaceBetButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonPlaceBet, c_playerAny, libPEEP_gv_recUI.lv_diBettingPlaceBetButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 24, 24, c_anchorTopLeft, 75, 152, StringExternal("Param/Value/lib_PEEP_AE98A687"), "Assets\\Textures\\icon-time-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 105, 155);
    libPEEP_gv_recUI.lv_diBettingCountdownLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 20, 200);
    libPEEP_gv_recUI.lv_diBettingPotLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelSupplyLeft", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 150);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 20, 200);
    libPEEP_gv_recUI.lv_diBettingPotLabel2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelSupplyRight", PlayerGroupAll());
}

void libPEEP_gf_InitializeBettingforMatch () {
    // Variable Declarations
    int lv_intTeam;
    text lv_txtText;
    int lv_intCount;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto01B6A73C_ae;
    const int auto01B6A73C_ai = 1;

    // Variable Initialization
    lv_intCount = 1;

    // Implementation
    DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll());
    if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 2)) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_503F3082"));
    }
    else {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_81EB540B"));
    }
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), 1);
    auto01B6A73C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto01B6A73C_ai >= 0 && lv_intTeam <= auto01B6A73C_ae) || (auto01B6A73C_ai < 0 && lv_intTeam >= auto01B6A73C_ae) ) ; lv_intTeam += auto01B6A73C_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_boolSelectedForMatch == true)) {
            lv_intCount += 1;
            libPEEP_gv_recGlobals.lv_intBettingPulldownTeamIDs[lv_intCount] = lv_intTeam;
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 1)) {
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
                lv_txtText = libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPlayerName;
            }
            else {
                lv_txtText = (libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_9F55BF40") + libPEEP_gf_makeTeamList(lv_intTeam) + StringExternal("Param/Value/lib_PEEP_3CD9DCCE"));
            }
            DialogControlAddItem(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), lv_txtText);
        }

    }
    libPEEP_gf_RefreshPotLabel();
    TimerStart(libPEEP_gv_recGlobals.lv_timerBettingIntervalTimer, 5.0, false, c_timeReal);
}

void libPEEP_gf_EnableBettingControls () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto1A379D8B_ae;
    const int auto1A379D8B_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), true);
    auto1A379D8B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto1A379D8B_ai >= 0 && lv_intPlayer <= auto1A379D8B_ae) || (auto1A379D8B_ai < 0 && lv_intPlayer >= auto1A379D8B_ae) ) ; lv_intPlayer += auto1A379D8B_ai ) {
        if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diBettingPulldown, lv_intPlayer) > 1)) {
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupAll(), true);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPlaceBetButton, PlayerGroupAll(), true);
        }

    }
}

void libPEEP_gf_DisableBettingControls () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPlaceBetButton, PlayerGroupAll(), false);
}

void libPEEP_gf_CreateBlingDialog () {
    // Variable Declarations
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intItemIndex;
    int lv_intTypeIndex;
    int lv_intX;
    int lv_intY;
    int lv_intNumOwned;
    int lv_intIndex;
    int lv_txtDisplayName;
    int lv_intYGap;
    int lv_intYGap2;

    // Automatic Variable Declarations
    int auto705CCFAB_ae;
    const int auto705CCFAB_ai = 1;
    const int auto9A1EF627_ae = 4;
    const int auto9A1EF627_ai = 1;
    int autoE97F9214_ae;
    const int autoE97F9214_ai = 1;
    const int autoA16B1E1D_ae = 4;
    const int autoA16B1E1D_ai = 1;
    int autoA348CB7C_ae;
    const int autoA348CB7C_ai = 1;
    const int auto8FBFB925_ae = 4;
    const int auto8FBFB925_ai = 1;

    // Variable Initialization
    lv_intDialogWidth = 700;
    lv_intDialogHeight = 655;
    lv_intX = 50;
    lv_intY = 100;
    lv_txtDisplayName = c_timerWindowNone;
    lv_intYGap = 18;
    lv_intYGap2 = 66;

    // Implementation
    DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTopLeft, 150, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dInventoryDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dInventoryDialog, 300, 100, c_anchorTop, -90, 22, StringExternal("Param/Value/lib_PEEP_36C4BBE6"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dInventoryDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diInventoryDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXInventoryDialog, c_playerAny, libPEEP_gv_recUI.lv_diInventoryDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dInventoryDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 210, 50, c_anchorTopRight, 50, 50, StringExternal("Param/Value/lib_PEEP_4CDE2452"), TextWithColor(StringExternal("Param/Value/lib_PEEP_AC2BB9AD"), (Color(254*100/255,138*100/255,14*100/255))), "");
    libPEEP_gv_recUI.lv_diStoreButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonsStore, c_playerAny, libPEEP_gv_recUI.lv_diStoreButton, c_triggerControlEventTypeClick);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CreditsPanelLabel", PlayerGroupAll());
    auto705CCFAB_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intItemIndex = 1;
    for ( ; ( (auto705CCFAB_ai >= 0 && lv_intItemIndex <= auto705CCFAB_ae) || (auto705CCFAB_ai < 0 && lv_intItemIndex >= auto705CCFAB_ae) ) ; lv_intItemIndex += auto705CCFAB_ai ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, lv_intY, (StringExternal("Param/Value/lib_PEEP_FBB7A56A") + IntToText(lv_intItemIndex) + StringExternal("Param/Value/lib_PEEP_5C66058A")), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_E125955C"), PlayerGroupAll());
        lv_intY += lv_intYGap;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, (lv_intY + 15), StringToText(""), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_A9F20DA2"), PlayerGroupAll());
        libPEEP_gv_recUI.lv_diPetNameLabels[lv_intItemIndex] = DialogControlLastCreated();
        lv_intY += 45;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, lv_intY, (StringExternal("Param/Value/lib_PEEP_AE3C6A7D") + IntToText(lv_intItemIndex) + StringExternal("Param/Value/lib_PEEP_0C191D21")), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intY += lv_intYGap;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intItemIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_PulldownsPetType, c_playerAny, libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intItemIndex], c_triggerControlEventTypeSelectionChanged);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX - 8), (lv_intY + 13));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_EC14BC2F"), PlayerGroupAll());
        lv_intY += lv_intYGap2;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, lv_intY, (StringExternal("Param/Value/lib_PEEP_13BB65A2") + IntToText(lv_intItemIndex) + StringExternal("Param/Value/lib_PEEP_B6DBB10B")), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intY += lv_intYGap;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        libPEEP_gv_recUI.lv_diPetSpawnPulldowns[lv_intItemIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_PulldownsPetSpawn, c_playerAny, libPEEP_gv_recUI.lv_diPetSpawnPulldowns[lv_intItemIndex], c_triggerControlEventTypeSelectionChanged);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX - 8), (lv_intY + 13));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_0B723EBC"), PlayerGroupAll());
        lv_intIndex = 1;
        for ( ; ( (auto9A1EF627_ai >= 0 && lv_intIndex <= auto9A1EF627_ae) || (auto9A1EF627_ai < 0 && lv_intIndex >= auto9A1EF627_ae) ) ; lv_intIndex += auto9A1EF627_ai ) {
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), libPEEP_gv_recGlobals.lv_txtBaseLocations[lv_intIndex]);
        }
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
        lv_intY += lv_intYGap2;
        lv_intY += lv_intYGap;
    }
    lv_intX = 260;
    lv_intY = 100;
    autoE97F9214_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfMarkers;
    lv_intItemIndex = 1;
    for ( ; ( (autoE97F9214_ai >= 0 && lv_intItemIndex <= autoE97F9214_ae) || (autoE97F9214_ai < 0 && lv_intItemIndex >= autoE97F9214_ae) ) ; lv_intItemIndex += autoE97F9214_ai ) {
        lv_intY += lv_intYGap;
        lv_intY += 45;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, lv_intY, (StringExternal("Param/Value/lib_PEEP_C25B5852") + IntToText(lv_intItemIndex) + StringExternal("Param/Value/lib_PEEP_F45F96B4")), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intY += lv_intYGap;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intItemIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_PulldownsTurfMarkerType, c_playerAny, libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intItemIndex], c_triggerControlEventTypeSelectionChanged);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX - 8), (lv_intY + 13));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_15367B0C"), PlayerGroupAll());
        lv_intY += lv_intYGap2;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, lv_intY, (StringExternal("Param/Value/lib_PEEP_28534A64") + IntToText(lv_intItemIndex) + StringExternal("Param/Value/lib_PEEP_DCFC2FA5")), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intY += lv_intYGap;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intItemIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_PulldownsTurfMarkerSpawn, c_playerAny, libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intItemIndex], c_triggerControlEventTypeSelectionChanged);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX - 8), (lv_intY + 13));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_ADD3B112"), PlayerGroupAll());
        lv_intIndex = 1;
        for ( ; ( (autoA16B1E1D_ai >= 0 && lv_intIndex <= autoA16B1E1D_ae) || (autoA16B1E1D_ai < 0 && lv_intIndex >= autoA16B1E1D_ae) ) ; lv_intIndex += autoA16B1E1D_ai ) {
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), libPEEP_gv_recGlobals.lv_txtBaseLocations[lv_intIndex]);
        }
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
        lv_intY += lv_intYGap2;
        lv_intY += lv_intYGap;
    }
    lv_intX = 470;
    lv_intY = 100;
    autoA348CB7C_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfMarkers;
    lv_intItemIndex = 1;
    for ( ; ( (autoA348CB7C_ai >= 0 && lv_intItemIndex <= autoA348CB7C_ae) || (autoA348CB7C_ai < 0 && lv_intItemIndex >= autoA348CB7C_ae) ) ; lv_intItemIndex += autoA348CB7C_ai ) {
        lv_intY += lv_intYGap;
        lv_intY += 45;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, lv_intY, (StringExternal("Param/Value/lib_PEEP_2F3AEA65") + IntToText(lv_intItemIndex) + StringExternal("Param/Value/lib_PEEP_4575CB27")), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intY += lv_intYGap;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intItemIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_PulldownsTurfSymbolType, c_playerAny, libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intItemIndex], c_triggerControlEventTypeSelectionChanged);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX - 8), (lv_intY + 13));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_72649BCC"), PlayerGroupAll());
        lv_intY += lv_intYGap2;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, lv_intX, lv_intY, (StringExternal("Param/Value/lib_PEEP_92DC1843") + IntToText(lv_intItemIndex) + StringExternal("Param/Value/lib_PEEP_821AF20D")), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intY += lv_intYGap;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[lv_intItemIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_PulldownsTurfSymbolSpawn, c_playerAny, libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[lv_intItemIndex], c_triggerControlEventTypeSelectionChanged);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX - 8), (lv_intY + 13));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_9B62B9E4"), PlayerGroupAll());
        lv_intIndex = 1;
        for ( ; ( (auto8FBFB925_ai >= 0 && lv_intIndex <= auto8FBFB925_ae) || (auto8FBFB925_ai < 0 && lv_intIndex >= auto8FBFB925_ae) ) ; lv_intIndex += auto8FBFB925_ai ) {
            DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), libPEEP_gv_recGlobals.lv_txtBaseLocations[lv_intIndex]);
        }
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
        lv_intY += lv_intYGap2;
        lv_intY += lv_intYGap;
    }
}

void libPEEP_gf_RefreshPetUIforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intPetIndex;
    int lv_intPetTypeIndex;
    text lv_txtName;
    int lv_intIndex;
    bool lv_boolSlotUnlocked;
    text lv_txtMessage;

    // Automatic Variable Declarations
    int auto9C56F011_ae;
    const int auto9C56F011_ai = 1;
    int autoBA4B17DE_ae;
    const int autoBA4B17DE_ai = 1;

    // Variable Initialization
    lv_intIndex = 1;

    // Implementation
    auto9C56F011_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto9C56F011_ai >= 0 && lv_intPetIndex <= auto9C56F011_ae) || (auto9C56F011_ai < 0 && lv_intPetIndex >= auto9C56F011_ae) ) ; lv_intPetIndex += auto9C56F011_ai ) {
        lv_intIndex = 1;
        if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[100] == true) || (lv_intPetIndex == 1))) {
            lv_boolSlotUnlocked = true;
        }
        else {
            lv_boolSlotUnlocked = false;
        }
        DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer));
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intPetTypeIndexList[lv_intIndex] = 0;
        DialogControlAddItem(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), StringExternal("Param/Value/lib_PEEP_A4EA099F"));
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetTypeSelections[lv_intPetIndex] == 0)) {
            DialogControlSelectItem(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), 1);
        }

        autoBA4B17DE_ae = libPEEP_gv_recGlobals.lv_intNumPets;
        lv_intPetTypeIndex = 1;
        for ( ; ( (autoBA4B17DE_ai >= 0 && lv_intPetTypeIndex <= autoBA4B17DE_ae) || (autoBA4B17DE_ai < 0 && lv_intPetTypeIndex >= autoBA4B17DE_ae) ) ; lv_intPetTypeIndex += autoBA4B17DE_ai ) {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[(libPEEP_gv_recGlobals.lv_recStoreAisles[3].lv_intFirstItemID + (lv_intPetTypeIndex - 1))] == true)) {
                lv_intIndex += 1;
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intPetTypeIndexList[lv_intIndex] = lv_intPetTypeIndex;
                DialogControlAddItem(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recGlobals.lv_recPets[lv_intPetTypeIndex].lv_txtName);
                if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetTypeSelections[lv_intPetIndex] == lv_intPetTypeIndex)) {
                    DialogControlSelectItem(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), lv_intIndex);
                }

            }

        }
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diPetSpawnPulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankPetSpawnSelections[lv_intPetIndex]);
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPetNameless[lv_intPetIndex] == true)) {
            lv_txtName = StringExternal("Param/Value/lib_PEEP_50F5D38F");
        }
        else {
            lv_txtName = StringToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_strBankPetNames[lv_intPetIndex]);
        }
        lv_txtName = TextWithColor(lv_txtName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false)));
        lv_txtName = (StringExternal("Param/Value/lib_PEEP_C889598C") + TextWithColor(lv_txtName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_AB7468E5"));
        if ((lv_boolSlotUnlocked == true)) {
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diPetSpawnPulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), true);
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diPetNameLabels[lv_intPetIndex], lv_txtName, PlayerGroupSingle(lp_intPlayer));
        }
        else {
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_ED84BF96");
            DialogControlSelectItem(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), 1);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), false);
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diPetTypePulldowns[lv_intPetIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diPetSpawnPulldowns[lv_intPetIndex], PlayerGroupSingle(lp_intPlayer), false);
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diPetSpawnPulldowns[lv_intPetIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diPetNameLabels[lv_intPetIndex], TextWithColor(StringExternal("Param/Value/lib_PEEP_C3B4335D"), (Color(149*100/255,150*100/255,151*100/255))), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diPetNameLabels[lv_intPetIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
        }
    }
}

void libPEEP_gf_RefreshTurfMarkerUIforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intMatIndex;
    int lv_intMatTypeIndex;
    int lv_intIndex;
    bool lv_boolSlotUnlocked;
    text lv_txtMessage;
    int lv_intStoreID;

    // Automatic Variable Declarations
    int autoB0A715C7_ae;
    const int autoB0A715C7_ai = 1;
    int autoDC8193A7_ae;
    const int autoDC8193A7_ai = 1;

    // Variable Initialization
    lv_intIndex = 1;

    // Implementation
    autoB0A715C7_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfMarkers;
    lv_intMatIndex = 1;
    for ( ; ( (autoB0A715C7_ai >= 0 && lv_intMatIndex <= autoB0A715C7_ae) || (autoB0A715C7_ai < 0 && lv_intMatIndex >= autoB0A715C7_ae) ) ; lv_intMatIndex += autoB0A715C7_ai ) {
        lv_intIndex = 1;
        if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[101] == true) || (lv_intMatIndex == 1))) {
            lv_boolSlotUnlocked = true;
        }
        else {
            lv_boolSlotUnlocked = false;
        }
        DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer));
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intTurfMarkerTypeIndexList[lv_intIndex] = 0;
        DialogControlAddItem(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), StringExternal("Param/Value/lib_PEEP_C99D20C6"));
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerTypeSelections[lv_intMatIndex] == 0)) {
            DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), 1);
        }

        autoDC8193A7_ae = libPEEP_gv_recGlobals.lv_recStoreAisles[4].lv_intNumItems;
        lv_intMatTypeIndex = 1;
        for ( ; ( (autoDC8193A7_ai >= 0 && lv_intMatTypeIndex <= autoDC8193A7_ae) || (autoDC8193A7_ai < 0 && lv_intMatTypeIndex >= autoDC8193A7_ae) ) ; lv_intMatTypeIndex += autoDC8193A7_ai ) {
            lv_intStoreID = (libPEEP_gv_recGlobals.lv_recStoreAisles[4].lv_intFirstItemID + (lv_intMatTypeIndex - 1));
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[lv_intStoreID] == true)) {
                lv_intIndex += 1;
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intTurfMarkerTypeIndexList[lv_intIndex] = lv_intMatTypeIndex;
                DialogControlAddItem(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recStoreItems[lv_intStoreID].lv_txtName);
                if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerTypeSelections[lv_intMatIndex] == lv_intMatTypeIndex)) {
                    DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), lv_intIndex);
                }

            }

        }
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfMarkerSpawnSelections[lv_intMatIndex]);
        if ((lv_boolSlotUnlocked == true)) {
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
        else {
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_60A8A608");
            DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), 1);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), false);
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[lv_intMatIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intMatIndex], PlayerGroupSingle(lp_intPlayer), false);
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[lv_intMatIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
        }
    }
}

void libPEEP_gf_RefreshTurfSymbolUIforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intSymbolIndex;
    int lv_intSymbolTypeIndex;
    int lv_intIndex;
    bool lv_boolSlotUnlocked;
    text lv_txtMessage;
    int lv_intStoreID;

    // Automatic Variable Declarations
    int autoD29B3870_ae;
    const int autoD29B3870_ai = 1;
    int auto455F5D39_ae;
    const int auto455F5D39_ai = 1;

    // Variable Initialization
    lv_intIndex = 1;

    // Implementation
    autoD29B3870_ae = libPEEP_gv_recGlobals.lv_intNumMaxTurfSymbols;
    lv_intSymbolIndex = 1;
    for ( ; ( (autoD29B3870_ai >= 0 && lv_intSymbolIndex <= autoD29B3870_ae) || (autoD29B3870_ai < 0 && lv_intSymbolIndex >= autoD29B3870_ae) ) ; lv_intSymbolIndex += autoD29B3870_ai ) {
        lv_intIndex = 1;
        if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[102] == true) || (lv_intSymbolIndex == 1))) {
            lv_boolSlotUnlocked = true;
        }
        else {
            lv_boolSlotUnlocked = false;
        }
        DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer));
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intTurfSymbolTypeIndexList[lv_intIndex] = 0;
        DialogControlAddItem(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), StringExternal("Param/Value/lib_PEEP_3B5FF554"));
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolTypeSelections[lv_intSymbolIndex] == 0)) {
            DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), 1);
        }

        auto455F5D39_ae = libPEEP_gv_recGlobals.lv_recStoreAisles[5].lv_intNumItems;
        lv_intSymbolTypeIndex = 1;
        for ( ; ( (auto455F5D39_ai >= 0 && lv_intSymbolTypeIndex <= auto455F5D39_ae) || (auto455F5D39_ai < 0 && lv_intSymbolTypeIndex >= auto455F5D39_ae) ) ; lv_intSymbolTypeIndex += auto455F5D39_ai ) {
            lv_intStoreID = (libPEEP_gv_recGlobals.lv_recStoreAisles[5].lv_intFirstItemID + (lv_intSymbolTypeIndex - 1));
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[lv_intStoreID] == true)) {
                lv_intIndex += 1;
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intTurfSymbolTypeIndexList[lv_intIndex] = lv_intSymbolTypeIndex;
                DialogControlAddItem(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recStoreItems[lv_intStoreID].lv_txtName);
                if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolTypeSelections[lv_intSymbolIndex] == lv_intSymbolTypeIndex)) {
                    DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), lv_intIndex);
                }

            }

        }
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankTurfSymbolSpawnSelections[lv_intSymbolIndex]);
        if ((lv_boolSlotUnlocked == true)) {
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
        else {
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_C63DBD92");
            DialogControlSelectItem(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), 1);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), false);
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[lv_intSymbolIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[lv_intSymbolIndex], PlayerGroupSingle(lp_intPlayer), false);
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[lv_intSymbolIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
        }
    }
}

void libPEEP_gf_CreateBlizzardUIDialog () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(2000, 2000, c_anchorTopLeft, 0, 0, true);
    libPEEP_gv_recUI.lv_dBlizzardUIDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "GameUI/GameUI/UIContainer/FullscreenUpperContainer/LeaderPanel");
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, 80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libPEEP_gv_recUI.lv_diBlizzUIPanel = DialogControlLastCreated();
}

void libPEEP_gf_MoveBlizzardUItoCinematicforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diBlizzUIPanel, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, 0, 44);
}

void libPEEP_gf_MoveBlizzardUItoNormalforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diBlizzUIPanel, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, 0, 80);
}

void libPEEP_gf_MoveBlizzardUItoFullscreenforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diBlizzUIPanel, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, 0, 0);
}

string libPEEP_gf_replaceSpecialChars (string lp_strInput) {
    // Variable Declarations
    string lv_strOutput;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_strOutput = "";

    // Implementation
    lv_strOutput = lp_strInput;
    lv_strOutput = StringReplaceWord(lv_strOutput, "<3", "_hEaRt_", c_stringReplaceAll, c_stringCase);
    lv_strOutput = StringReplaceWord(lv_strOutput, "<", "<img width=\"15\" height=\"13\" path=\"Assets/Textures/less_than.dds\" />", c_stringReplaceAll, c_stringCase);
    lv_strOutput = StringReplaceWord(lv_strOutput, "&", "<img width=\"18\" height=\"13\" path=\"Assets/Textures/ampersand.dds\" />", c_stringReplaceAll, c_stringCase);
    lv_strOutput = StringReplaceWord(lv_strOutput, "_hEaRt_", "<img width=\"20\" height=\"20\" path=\"Assets/Textures/icon-health-nobg.dds\" />", c_stringReplaceAll, c_stringCase);
    return lv_strOutput;
}

text libPEEP_gf_convertChatItemToText (int lp_intChatIndex) {
    // Variable Declarations
    text lv_txtMessage;
    int lv_intSender;
    int lv_intRecipient;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recChatList[lp_intChatIndex].lv_intPlayer == 0)) {
        lv_txtMessage = (libPEEP_gv_recChatList[lp_intChatIndex].lv_txtPrefix + lv_txtMessage + libPEEP_gv_recChatList[lp_intChatIndex].lv_txtMessage);
    }
    else {
        if ((libPEEP_gv_recChatList[lp_intChatIndex].lv_intRecipient > 0)) {
            lv_intSender = libPEEP_gv_recChatList[lp_intChatIndex].lv_intPlayer;
            lv_intRecipient = libPEEP_gv_recChatList[lp_intChatIndex].lv_intRecipient;
            lv_txtMessage = (TextWithColor(StringExternal("Param/Value/lib_PEEP_9FCB22E6"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intRecipient, false))) + TextWithColor(IntToText(lv_intRecipient), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intRecipient, false))) + StringExternal("Param/Value/lib_PEEP_9F95646E") + TextWithColor(PlayerName(lv_intRecipient), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intRecipient, false))) + TextWithColor(StringExternal("Param/Value/lib_PEEP_8DCD1E55"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intRecipient, false))) + TextWithColor(IntToText(lv_intSender), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intSender, false))) + StringExternal("Param/Value/lib_PEEP_94922D89") + TextWithColor(PlayerName(lv_intSender), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intSender, false))));
        }
        else {
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
                lv_txtMessage = (libPEEP_gv_recChatList[lp_intChatIndex].lv_txtPrefix + TextWithColor(PlayerName(libPEEP_gv_recChatList[lp_intChatIndex].lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libPEEP_gv_recChatList[lp_intChatIndex].lv_intPlayer, false))));
            }
            else {
                lv_txtMessage = (TextWithColor(PlayerName(libPEEP_gv_recChatList[lp_intChatIndex].lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libPEEP_gv_recChatList[lp_intChatIndex].lv_intPlayer, false))));
            }
        }
        lv_txtMessage = (lv_txtMessage + TextWithColor(StringExternal("Param/Value/lib_PEEP_717707E1"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libPEEP_gv_recChatList[lp_intChatIndex].lv_intPlayer, false))) + libPEEP_gv_recChatList[lp_intChatIndex].lv_txtMessage);
    }
    return lv_txtMessage;
}

void libPEEP_gf_CreateChatMessage (int lp_intPlayer, text lp_txtMessage, int lp_intRecipient, bool lp_boolSendToEnemies, bool lp_boolIsLogMessage) {
    // Variable Declarations
    text lv_txtPrefix;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_intRecipient > -1)) {
        libPEEP_gv_recGlobals.lv_intCurrentChatIndex += 1;
        if ((libPEEP_gv_recGlobals.lv_intCurrentChatIndex > libPEEP_gv_recGlobals.lv_intNumChatIndexes)) {
            libPEEP_gv_recGlobals.lv_intCurrentChatIndex = 1;
        }

        if ((lp_intPlayer == 0)) {
            if ((lp_boolIsLogMessage == true)) {
                lv_txtPrefix = (TextWithColor(libPEEP_gf_convertSecondsToTime(libPEEP_gv_recGameState.lv_intMatchSecondsElapsed), (Color(22*100/255,128*100/255,0))) + StringExternal("Param/Value/lib_PEEP_40DD4239"));
            }
            else {
                lv_txtPrefix = TextWithColor(StringExternal("Param/Value/lib_PEEP_C9B450D0"), (Color(150*100/255,150*100/255,30*100/255)));
            }
        }
        else {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayingMatch == true)) {
                lv_txtPrefix = StringToText("");
            }
            else {
                if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsCommentator == true)) {
                    lv_txtPrefix = TextWithColor(StringExternal("Param/Value/lib_PEEP_0783F466"), (Color(149*100/255,150*100/255,151*100/255)));
                }
                else {
                    lv_txtPrefix = TextWithColor(StringExternal("Param/Value/lib_PEEP_94C05289"), (Color(149*100/255,150*100/255,151*100/255)));
                }
            }
        }
        libPEEP_gv_recChatList[libPEEP_gv_recGlobals.lv_intCurrentChatIndex].lv_txtPrefix = lv_txtPrefix;
        libPEEP_gv_recChatList[libPEEP_gv_recGlobals.lv_intCurrentChatIndex].lv_intPlayer = lp_intPlayer;
        libPEEP_gv_recChatList[libPEEP_gv_recGlobals.lv_intCurrentChatIndex].lv_intRecipient = lp_intRecipient;
        libPEEP_gv_recChatList[libPEEP_gv_recGlobals.lv_intCurrentChatIndex].lv_realTimestamp = GameGetMissionTime();
        libPEEP_gv_recChatList[libPEEP_gv_recGlobals.lv_intCurrentChatIndex].lv_txtMessage = lp_txtMessage;
        libPEEP_gv_recChatList[libPEEP_gv_recGlobals.lv_intCurrentChatIndex].lv_boolAll = lp_boolSendToEnemies;
        libPEEP_gv_recChatList[libPEEP_gv_recGlobals.lv_intCurrentChatIndex].lv_boolLogMessage = lp_boolIsLogMessage;
        libPEEP_gf_RefreshChat();
    }

}

void libPEEP_gf_CreateChatDialogs () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(800, 200, c_anchorBottom, 38, 350, true);
    libPEEP_gv_recUI.lv_dChatDialogReplacement = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dChatDialogReplacement, false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 350);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 0);
    libPEEP_gv_recUI.lv_diChatWindow = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diChatWindow, "ChatDisplay", PlayerGroupAll());
    DialogCreate(800, 233, c_anchorBottom, 38, -10, true);
    libPEEP_gv_recUI.lv_dChatDialogCinematic = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dChatDialogCinematic, false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogCinematic, PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 350);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 0, 0);
    libPEEP_gv_recUI.lv_diChatWindow2 = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diChatWindow2, "ChatDisplay", PlayerGroupAll());
}

void libPEEP_gf_RefreshChat () {
    // Variable Declarations
    int lv_intChatListSize;
    text[21] lv_txtPlayerChatList;
    int lv_intOffset;
    int lv_intIndex;
    int lv_intPlayerChatIndex;
    int lv_intTmpPlayer;
    int lv_intNumChatDisplayLines;
    int lv_intDelta;
    text lv_txtDisplay;
    int lv_intStartIndex;
    int lv_intPlayer;
    bool lv_boolChatMessageJustOccurred;
    int lv_intChatIndexThatJustOccurred;
    int lv_intChatIndexThatJustOccurred2;
    bool lv_boolIGotANewMessage;

    // Automatic Variable Declarations
    playergroup autoC207A862_g;
    int autoC207A862_var;
    int auto91E8DC95_ae;
    const int auto91E8DC95_ai = 1;
    int autoAB76D6F3_ae;
    const int autoAB76D6F3_ai = 1;
    int auto327355A0_ae;
    const int auto327355A0_ai = 1;

    // Variable Initialization
    lv_intChatListSize = 20;
    lv_intNumChatDisplayLines = 8;

    // Implementation
    autoC207A862_g = PlayerGroupActive();
    autoC207A862_var = -1;
    while (true) {
        autoC207A862_var = PlayerGroupNextPlayer(autoC207A862_g, autoC207A862_var);
        if (autoC207A862_var < 0) { break; }
        lv_intPlayerChatIndex = 0;
        lv_intChatIndexThatJustOccurred = 999999;
        auto91E8DC95_ae = lv_intChatListSize;
        lv_intIndex = 1;
        for ( ; ( (auto91E8DC95_ai >= 0 && lv_intIndex <= auto91E8DC95_ae) || (auto91E8DC95_ai < 0 && lv_intIndex >= auto91E8DC95_ae) ) ; lv_intIndex += auto91E8DC95_ai ) {
            lv_txtPlayerChatList[lv_intIndex] = StringToText("");
        }
        autoAB76D6F3_ae = (libPEEP_gv_recGlobals.lv_intNumChatIndexes - 1);
        lv_intOffset = 0;
        for ( ; ( (autoAB76D6F3_ai >= 0 && lv_intOffset <= autoAB76D6F3_ae) || (autoAB76D6F3_ai < 0 && lv_intOffset >= autoAB76D6F3_ae) ) ; lv_intOffset += autoAB76D6F3_ai ) {
            lv_intIndex = (ModI((libPEEP_gv_recGlobals.lv_intCurrentChatIndex + lv_intOffset), libPEEP_gv_recGlobals.lv_intNumChatIndexes) + 1);
            lv_intTmpPlayer = libPEEP_gv_recChatList[lv_intIndex].lv_intPlayer;
            if ((((libPEEP_gv_recChatList[lv_intIndex].lv_realTimestamp + libPEEP_gv_recGlobals.lv_realChatTimeout) > GameGetMissionTime()) && (lv_intPlayerChatIndex < lv_intChatListSize))) {
                if ((libPEEP_gf_isChatIndexVisibleToPlayer(autoC207A862_var, lv_intIndex) == true)) {
                    lv_intPlayerChatIndex += 1;
                    lv_txtPlayerChatList[lv_intPlayerChatIndex] = libPEEP_gf_convertChatItemToText(lv_intIndex);
                    if (((libPEEP_gv_recChatList[lv_intIndex].lv_boolLogMessage == false) && (libPEEP_gv_recChatList[lv_intIndex].lv_realTimestamp == GameGetMissionTime()))) {
                        lv_intChatIndexThatJustOccurred = lv_intPlayerChatIndex;
                        lv_intChatIndexThatJustOccurred2 = lv_intIndex;
                    }

                }

            }

        }
        lv_txtDisplay = StringToText("");
        lv_intDelta = (lv_intNumChatDisplayLines - lv_intPlayerChatIndex);
        if ((lv_intNumChatDisplayLines < lv_intPlayerChatIndex)) {
            lv_intStartIndex = ((lv_intPlayerChatIndex - lv_intNumChatDisplayLines) + 1);
        }
        else {
            lv_intStartIndex = 1;
        }
        lv_boolIGotANewMessage = false;
        auto327355A0_ae = lv_intPlayerChatIndex;
        lv_intIndex = lv_intStartIndex;
        for ( ; ( (auto327355A0_ai >= 0 && lv_intIndex <= auto327355A0_ae) || (auto327355A0_ai < 0 && lv_intIndex >= auto327355A0_ae) ) ; lv_intIndex += auto327355A0_ai ) {
            if ((lv_intIndex == lv_intChatIndexThatJustOccurred)) {
                lv_boolIGotANewMessage = true;
            }

            lv_txtDisplay = (lv_txtDisplay + lv_txtPlayerChatList[lv_intIndex] + StringExternal("Param/Value/lib_PEEP_9ACE584C"));
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diChatWindow, lv_txtDisplay, PlayerGroupSingle(autoC207A862_var));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diChatWindow2, (StringExternal("Param/Value/lib_PEEP_7DAF4768") + lv_txtDisplay + StringExternal("Param/Value/lib_PEEP_838A2D27")), PlayerGroupSingle(autoC207A862_var));
        if (((lv_boolIGotANewMessage == true) && (((libPEEP_gv_recChatList[lv_intChatIndexThatJustOccurred2].lv_intPlayer > 0) && (libPEEP_gv_recChatList[lv_intChatIndexThatJustOccurred2].lv_intRecipient > 0)) || ((libPEEP_gv_recPlayers[autoC207A862_var].lv_boolPlayingMatch == false) && ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionSilentChat, autoC207A862_var) == false) || (libPEEP_gv_recPlayers[libPEEP_gv_recChatList[lv_intChatIndexThatJustOccurred2].lv_intPlayer].lv_boolPlayingMatch == true) || (libPEEP_gv_recChatList[lv_intChatIndexThatJustOccurred2].lv_intPlayer == 0))) || ((libPEEP_gv_recPlayers[autoC207A862_var].lv_boolPlayingMatch == true) && (libPEEP_gv_recPlayers[libPEEP_gv_recChatList[lv_intChatIndexThatJustOccurred2].lv_intPlayer].lv_boolPlayingMatch == true))))) {
            SoundPlay(SoundLink("ChatPing", -1), PlayerGroupSingle(autoC207A862_var), 100.0, 0.0);
        }

    }
}

bool libPEEP_gf_isChatIndexVisibleToPlayer (int lp_intPlayer, int lp_intIndex) {
    // Variable Declarations
    int lv_intChatPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intChatPlayer = libPEEP_gv_recChatList[lp_intIndex].lv_intPlayer;
    if (((libPEEP_gv_recChatList[lp_intIndex].lv_realTimestamp > 0.0) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intPlayerIsIgnored[libPEEP_gv_recChatList[lp_intIndex].lv_intPlayer] == false) && (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayingMatch == true) && ((libPEEP_gv_recChatList[lp_intIndex].lv_intRecipient == lp_intPlayer) || (libPEEP_gv_recChatList[lp_intIndex].lv_intPlayer == lp_intPlayer) || (libPEEP_gv_recChatList[lp_intIndex].lv_boolAll == true) || (((libPEEP_gv_recGameState.lv_intTrueMatchMode == 1) || (libPEEP_gv_recGameState.lv_intTrueMatchMode == 3) || (libPEEP_gv_recGameState.lv_intNumMatchPlayers == 2)) && (libPEEP_gv_recPlayers[lv_intChatPlayer].lv_boolPlayingMatch == true)) || ((libPEEP_gv_recPlayers[lv_intChatPlayer].lv_intCurrentTeam == libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam) && (libPEEP_gv_recPlayers[lv_intChatPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recChatList[lp_intIndex].lv_intRecipient == 0)) || ((lv_intChatPlayer > 0) && (libPEEP_gv_recPlayers[lv_intChatPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_boolVotableAllowChat == true) && (libPEEP_gv_recChatList[lp_intIndex].lv_intRecipient == 0)))) || ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayingMatch == false) && ((libPEEP_gv_recChatList[lp_intIndex].lv_intRecipient == lp_intPlayer) || (libPEEP_gv_recChatList[lp_intIndex].lv_intPlayer == lp_intPlayer) || ((lv_intChatPlayer == 0) && (libPEEP_gv_recChatList[lp_intIndex].lv_intRecipient == 0)) || ((lv_intChatPlayer > 0) && (libPEEP_gv_recPlayers[lv_intChatPlayer].lv_boolPlayingMatch == true) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideMatchPlayerChat, lp_intPlayer) == false) && (libPEEP_gv_recChatList[lp_intIndex].lv_intRecipient == 0)) || ((lv_intChatPlayer > 0) && (libPEEP_gv_recPlayers[lv_intChatPlayer].lv_boolPlayingMatch == false) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideObserverChat, lp_intPlayer) == false) && (libPEEP_gv_recChatList[lp_intIndex].lv_intRecipient == 0))))))) {
        return true;
    }
    else {
        return false;
    }
}

void libPEEP_gf_CreateForcedSystemMessage (text lp_txtMessage) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoA6452197_ae;
    const int autoA6452197_ai = 1;

    // Variable Initialization

    // Implementation
    autoA6452197_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoA6452197_ai >= 0 && lv_intPlayer <= autoA6452197_ae) || (autoA6452197_ai < 0 && lv_intPlayer >= autoA6452197_ae) ) ; lv_intPlayer += autoA6452197_ai ) {
        libPEEP_gf_CreateChatMessage(0, lp_txtMessage, lv_intPlayer, false, false);
    }
}

void libPEEP_gf_CreateChatHelpDialog () {
    // Variable Declarations
    text lv_txtHelp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(700, 740, c_anchorTop, 0, 100, true);
    libPEEP_gv_recUI.lv_dChatHelpDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTop, 0, 45, StringExternal("Param/Value/lib_PEEP_424FD669"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diChatHelpDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXChatHelpDialog, c_playerAny, libPEEP_gv_recUI.lv_diChatHelpDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_txtHelp = StringExternal("Param/Value/lib_PEEP_EBF7337A");
    lv_txtHelp = TextWithColor(lv_txtHelp, Color(52.94, 82.75, 97.25));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 600, c_anchorTop, 0, 90, lv_txtHelp, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChatBarRecipient", PlayerGroupAll());
}

void libPEEP_gf_CreateChatLogDialog () {
    // Variable Declarations
    int lv_intDividerXOffset;
    int lv_intX;
    int lv_intY;
    int lv_intPlayer;
    text lv_txtPlayer;

    // Automatic Variable Declarations
    int auto5E355648_ae;
    const int auto5E355648_ai = 1;

    // Variable Initialization
    lv_intDividerXOffset = 240;

    // Implementation
    DialogCreate(1400, 700, c_anchorTop, 0, 150, true);
    libPEEP_gv_recUI.lv_dChatLogDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dChatLogDialog, 200, 50, c_anchorTop, 0, 45, StringExternal("Param/Value/lib_PEEP_F9997905"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dChatLogDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diChatLogDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXChatLogDialog, c_playerAny, libPEEP_gv_recUI.lv_diChatLogDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dChatLogDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_intX = (lv_intDividerXOffset + 50);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dChatLogDialog, 115, 50, c_anchorTopLeft, 50, 40, StringExternal("Param/Value/lib_PEEP_AA1477C9"), StringExternal("Param/Value/lib_PEEP_170D7608"), "");
    libPEEP_gv_recUI.lv_diChatRefreshButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonChatRefresh, c_playerAny, libPEEP_gv_recUI.lv_diChatRefreshButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dChatLogDialog, 110, 50, c_anchorTopLeft, 180, 40, StringExternal("Param/Value/lib_PEEP_00F58261"), StringExternal("Param/Value/lib_PEEP_F9C66356"), "");
    libPEEP_gv_recUI.lv_diChatHelpButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonChatHelp, c_playerAny, libPEEP_gv_recUI.lv_diChatHelpButton, c_triggerControlEventTypeClick);
    lv_intY = 105;
    lv_intX = 36;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
    libPEEP_gv_recUI.lv_diChatLogPlayerCheckAll = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxChatLogCheckAll, c_playerAny, libPEEP_gv_recUI.lv_diChatLogPlayerCheckAll, c_triggerControlEventTypeChecked);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, lv_intY);
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
    lv_intX += 40;
    lv_txtPlayer = TextWithColor(StringExternal("Param/Value/lib_PEEP_D5A5DDF5"), (Color(100,100,100)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, lv_intX, (lv_intY + 8), lv_txtPlayer, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    lv_intY += 35;
    auto5E355648_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 0;
    for ( ; ( (auto5E355648_ai >= 0 && lv_intPlayer <= auto5E355648_ae) || (auto5E355648_ai < 0 && lv_intPlayer >= auto5E355648_ae) ) ; lv_intPlayer += auto5E355648_ai ) {
        lv_intX = 36;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
        libPEEP_gv_recUI.lv_diChatLogPlayerCheckboxes[lv_intPlayer] = DialogControlLastCreated();
        if ((lv_intPlayer == 0)) {
            lv_txtPlayer = TextWithColor(StringExternal("Param/Value/lib_PEEP_24D2AE6A"), (Color(150*100/255,150*100/255,30*100/255)));
        }
        else {
            lv_txtPlayer = (TextWithColor(IntToText(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_AC3AABD1") + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
        }
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, lv_intY);
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
        lv_intX += 40;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, (lv_intY + 8));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtPlayer, PlayerGroupAll());
        libPEEP_gv_recUI.lv_diChatLogPlayerLabels[lv_intPlayer] = DialogControlLastCreated();
        lv_intY += 35;
    }
    DialogControlCreate(libPEEP_gv_recUI.lv_dChatLogDialog, c_triggerControlTypeListBox);
    libPEEP_gv_recUI.lv_diChatLogListbox = DialogControlLastCreated();
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diChatLogListbox, PlayerGroupAll(), c_anchorTopLeft, 280, 107);
    DialogControlSetSize(libPEEP_gv_recUI.lv_diChatLogListbox, PlayerGroupAll(), 1075, 550);
}

void libPEEP_gf_RefreshChatLogPlayerListing () {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtPlayer;

    // Automatic Variable Declarations
    int auto9275CCC3_ae;
    const int auto9275CCC3_ai = 1;

    // Variable Initialization

    // Implementation
    auto9275CCC3_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto9275CCC3_ai >= 0 && lv_intPlayer <= auto9275CCC3_ae) || (auto9275CCC3_ai < 0 && lv_intPlayer >= auto9275CCC3_ae) ) ; lv_intPlayer += auto9275CCC3_ai ) {
        lv_txtPlayer = (TextWithColor(IntToText(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_C89EA4DF") + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diChatLogPlayerLabels[lv_intPlayer], lv_txtPlayer, PlayerGroupAll());
    }
}

void libPEEP_gf_RefreshChatLogforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intOffset;
    int lv_intIndex;
    text lv_txtText;
    int lv_intNumLines;
    int lv_intCount;

    // Automatic Variable Declarations
    int auto8E10D0B0_ae;
    const int auto8E10D0B0_ai = 1;
    int auto430B9E93_ae;
    const int auto430B9E93_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diChatLogListbox, PlayerGroupSingle(lp_intPlayer));
    auto8E10D0B0_ae = (libPEEP_gv_recGlobals.lv_intNumChatIndexes - 1);
    lv_intOffset = 0;
    for ( ; ( (auto8E10D0B0_ai >= 0 && lv_intOffset <= auto8E10D0B0_ae) || (auto8E10D0B0_ai < 0 && lv_intOffset >= auto8E10D0B0_ae) ) ; lv_intOffset += auto8E10D0B0_ai ) {
        lv_intIndex = (ModI((libPEEP_gv_recGlobals.lv_intCurrentChatIndex + lv_intOffset), libPEEP_gv_recGlobals.lv_intNumChatIndexes) + 1);
        if (((libPEEP_gf_isChatIndexVisibleToPlayer(lp_intPlayer, lv_intIndex) == true) && (libPEEP_gv_recUI.lv_diChatLogPlayerCheckboxes[libPEEP_gv_recChatList[lv_intIndex].lv_intPlayer] != c_invalidDialogControlId) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diChatLogPlayerCheckboxes[libPEEP_gv_recChatList[lv_intIndex].lv_intPlayer], lp_intPlayer) == true))) {
            lv_intNumLines += 1;
        }

    }
    if ((lv_intNumLines >= libPEEP_gv_recGlobals.lv_intNumChatIndexes)) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diChatLogListbox, PlayerGroupSingle(lp_intPlayer), (StringExternal("Param/Value/lib_PEEP_93F6CFA5") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recGlobals.lv_intNumChatIndexes) + StringExternal("Param/Value/lib_PEEP_03C47B82")));
    }

    auto430B9E93_ae = (libPEEP_gv_recGlobals.lv_intNumChatIndexes - 1);
    lv_intOffset = 0;
    for ( ; ( (auto430B9E93_ai >= 0 && lv_intOffset <= auto430B9E93_ae) || (auto430B9E93_ai < 0 && lv_intOffset >= auto430B9E93_ae) ) ; lv_intOffset += auto430B9E93_ai ) {
        lv_intIndex = (ModI((libPEEP_gv_recGlobals.lv_intCurrentChatIndex + lv_intOffset), libPEEP_gv_recGlobals.lv_intNumChatIndexes) + 1);
        if (((libPEEP_gf_isChatIndexVisibleToPlayer(lp_intPlayer, lv_intIndex) == true) && (libPEEP_gv_recUI.lv_diChatLogPlayerCheckboxes[libPEEP_gv_recChatList[lv_intIndex].lv_intPlayer] != c_invalidDialogControlId) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diChatLogPlayerCheckboxes[libPEEP_gv_recChatList[lv_intIndex].lv_intPlayer], lp_intPlayer) == true))) {
            lv_txtText = (TextWithColor(libPEEP_gf_convertSecondsToTime(FixedToInt((libPEEP_gv_recChatList[lv_intIndex].lv_realTimestamp * 0.75))), (Color(22*100/255,128*100/255,0))) + StringExternal("Param/Value/lib_PEEP_D303054B") + libPEEP_gf_convertChatItemToText(lv_intIndex));
            DialogControlAddItem(libPEEP_gv_recUI.lv_diChatLogListbox, PlayerGroupSingle(lp_intPlayer), lv_txtText);
        }

    }
    lv_intCount = DialogControlGetItemCount(libPEEP_gv_recUI.lv_diChatLogListbox, lp_intPlayer);
    if ((lv_intCount > 1)) {
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diChatLogListbox, PlayerGroupSingle(lp_intPlayer), lv_intCount);
    }

}

void libPEEP_gf_LaunchCommentatorChoice () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intTeamCount;
    int lv_intIndex2;
    int lv_intButtonHeight;
    int lv_intY;
    int lv_intVoteLabelOffset;

    // Automatic Variable Declarations
    int auto88794A17_ae;
    const int auto88794A17_ai = 1;
    int auto0D3F1D5F_ae;
    const int auto0D3F1D5F_ai = 1;
    int auto64F49165_ae;
    const int auto64F49165_ai = 1;
    int autoBCC0350D_ae;
    const int autoBCC0350D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentMatchMode == 2)) {
        lv_intButtonHeight = 80;
        lv_intVoteLabelOffset = 30;
    }
    else {
        lv_intButtonHeight = 50;
        lv_intVoteLabelOffset = 14;
    }
    auto88794A17_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intIndex = 1;
    for ( ; ( (auto88794A17_ai >= 0 && lv_intIndex <= auto88794A17_ae) || (auto88794A17_ai < 0 && lv_intIndex >= auto88794A17_ae) ) ; lv_intIndex += auto88794A17_ai ) {
        libPEEP_gv_recPlayers[lv_intIndex].lv_intCommentatorChoiceNumTeamsSelected = 0;
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamVotesLabels[lv_intIndex], TextWithColor(StringExternal("Param/Value/lib_PEEP_DB4CD02D"), (Color(149*100/255,150*100/255,151*100/255))), PlayerGroupAll());
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intIndex], PlayerGroupAll(), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamVotesLabels[lv_intIndex], PlayerGroupAll(), false);
    }
    lv_intY = 105;
    auto0D3F1D5F_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intIndex = 1;
    for ( ; ( (auto0D3F1D5F_ai >= 0 && lv_intIndex <= auto0D3F1D5F_ae) || (auto0D3F1D5F_ai < 0 && lv_intIndex >= auto0D3F1D5F_ae) ) ; lv_intIndex += auto0D3F1D5F_ai ) {
        libPEEP_gv_recTeams[lv_intIndex].lv_intCommentatorVotes = 0;
        if ((libPEEP_gv_recTeams[lv_intIndex].lv_boolEligibleForMatch == true)) {
            lv_intTeamCount += 1;
            auto64F49165_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
            lv_intIndex2 = 1;
            for ( ; ( (auto64F49165_ai >= 0 && lv_intIndex2 <= auto64F49165_ae) || (auto64F49165_ai < 0 && lv_intIndex2 >= auto64F49165_ae) ) ; lv_intIndex2 += auto64F49165_ai ) {
                libPEEP_gv_recPlayers[lv_intIndex2].lv_intCommentatorChoiceTeamList[lv_intTeamCount] = lv_intIndex;
            }
            if ((libPEEP_gv_recGameState.lv_intCurrentMatchMode == 2)) {
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamCount], (libPEEP_gv_recTeams[lv_intIndex].lv_txtPlayerList), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamCount], (StringExternal("Param/Value/lib_PEEP_986DB30F") + libPEEP_gv_recTeams[lv_intIndex].lv_txtPlayerList + StringExternal("Param/Value/lib_PEEP_F3092A29")), PlayerGroupAll());
            }
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamCount], PlayerGroupAll(), true);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamCount], PlayerGroupAll(), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamVotesLabels[lv_intTeamCount], PlayerGroupAll(), true);
            DialogControlSetPosition(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamCount], PlayerGroupAll(), c_anchorTop, -47, lv_intY);
            DialogControlSetPosition(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamVotesLabels[lv_intTeamCount], PlayerGroupAll(), c_anchorTop, 160, (lv_intY + lv_intVoteLabelOffset));
            DialogControlSetSize(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamCount], PlayerGroupAll(), DialogControlGetWidth(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamCount], 1), lv_intButtonHeight);
            lv_intY += lv_intButtonHeight;
        }

    }
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCommentatorChoiceRandomButton, PlayerGroupAll(), true);
    DialogSetSize(libPEEP_gv_recUI.lv_dCommentatorChoiceDialog, DialogGetWidth(libPEEP_gv_recUI.lv_dCommentatorChoiceDialog), (250 + (lv_intButtonHeight * lv_intTeamCount)));
    autoBCC0350D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intIndex = 1;
    for ( ; ( (autoBCC0350D_ai >= 0 && lv_intIndex <= autoBCC0350D_ae) || (autoBCC0350D_ai < 0 && lv_intIndex >= autoBCC0350D_ae) ) ; lv_intIndex += autoBCC0350D_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intIndex].lv_boolIsCommentator == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dCommentatorChoiceDialog, PlayerGroupSingle(lv_intIndex), true);
            SoundPlay(SoundLink("UI_MiniMapPing", -1), PlayerGroupSingle(lv_intIndex), 100.0, 0.0);
        }

    }
    TimerStart(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer, libPEEP_gv_recGlobals.lv_realCommentatorChoicePeriod, false, c_timeGame);
    libPEEP_gf_RefreshCommentatorChoiceControls();
}

void libPEEP_gf_CreateCommentatorChoiceDialog () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intTeamSlot;
    int lv_intY;

    // Automatic Variable Declarations
    int autoDD2E5E14_ae;
    const int autoDD2E5E14_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(470, 935, c_anchorTopLeft, 0, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dCommentatorChoiceDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 380, 65);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 36);
    libPEEP_gv_recUI.lv_diCommentatorChoiceTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    lv_intY = 105;
    autoDD2E5E14_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTeamSlot = 1;
    for ( ; ( (autoDD2E5E14_ai >= 0 && lv_intTeamSlot <= autoDD2E5E14_ae) || (autoDD2E5E14_ai < 0 && lv_intTeamSlot >= autoDD2E5E14_ae) ) ; lv_intTeamSlot += autoDD2E5E14_ai ) {
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 280, 50, c_anchorTop, -47, lv_intY, StringExternal("Param/Value/lib_PEEP_81DFA9EC"), StringExternal("Param/Value/lib_PEEP_6B3F0F26"), "");
        libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamSlot] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_ButtonsCommentatorTeamVote, c_playerAny, libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intTeamSlot], c_triggerControlEventTypeClick);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 120, 50, c_anchorTop, 160, (lv_intY + 14), StringExternal("Param/Value/lib_PEEP_AB64F87D"), Color(100,100,100), false, 2.0);
        libPEEP_gv_recUI.lv_diCommentatorChoiceTeamVotesLabels[lv_intTeamSlot] = DialogControlLastCreated();
        lv_intY += 50;
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 80, 60);
    libPEEP_gv_recUI.lv_diCommentatorChoiceCountdownLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 365, 50, c_anchorBottom, 0, 35, StringExternal("Param/Value/lib_PEEP_6B203C78"), StringExternal("Param/Value/lib_PEEP_6255D4F9"), "");
    libPEEP_gv_recUI.lv_diCommentatorChoiceRandomButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonCommentatorDeferVote, c_playerAny, libPEEP_gv_recUI.lv_diCommentatorChoiceRandomButton, c_triggerControlEventTypeClick);
}

void libPEEP_gf_RefreshCommentatorChoiceControls () {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtAnnouncement;
    text lv_txtText;
    int lv_intVotesLeft;
    int lv_intIndex;
    bool lv_boolAllDone;

    // Automatic Variable Declarations
    int auto1A4D5347_ae;
    const int auto1A4D5347_ai = 1;
    int auto530FE15F_ae;
    const int auto530FE15F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_boolAllDone = true;
    lv_txtAnnouncement = (StringExternal("Param/Value/lib_PEEP_42B58D76"));
    if ((libPEEP_gv_recGlobals.lv_iNT_NUM_COMMENTATORS > 1)) {
        lv_txtAnnouncement = (lv_txtAnnouncement + StringExternal("Param/Value/lib_PEEP_7960849F"));
    }

    lv_txtAnnouncement = (lv_txtAnnouncement + StringExternal("Param/Value/lib_PEEP_28FEE5A7") + TextWithColor(libPEEP_gf_formatIntegerAsText(FixedToInt(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer))), (Color(100.00, 0.00, 0.00))));
    auto1A4D5347_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto1A4D5347_ai >= 0 && lv_intPlayer <= auto1A4D5347_ae) || (auto1A4D5347_ai < 0 && lv_intPlayer >= auto1A4D5347_ae) ) ; lv_intPlayer += auto1A4D5347_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            lv_txtAnnouncement = (lv_txtAnnouncement + StringExternal("Param/Value/lib_PEEP_F1731E12"));
            lv_intVotesLeft = (libPEEP_gv_recGlobals.lv_intMaxTeamsForNextMatch - libPEEP_gv_recPlayers[lv_intPlayer].lv_intCommentatorChoiceNumTeamsSelected);
            if ((lv_intVotesLeft == 0)) {
                lv_txtAnnouncement = (lv_txtAnnouncement + StringExternal("Param/Value/lib_PEEP_0F8E599B"));
                auto530FE15F_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                lv_intIndex = 1;
                for ( ; ( (auto530FE15F_ai >= 0 && lv_intIndex <= auto530FE15F_ae) || (auto530FE15F_ai < 0 && lv_intIndex >= auto530FE15F_ae) ) ; lv_intIndex += auto530FE15F_ai ) {
                    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intIndex], PlayerGroupSingle(lv_intPlayer), false);
                    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCommentatorChoiceRandomButton, PlayerGroupSingle(lv_intPlayer), false);
                    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCommentatorChoiceTitle, StringExternal("Param/Value/lib_PEEP_29923E66"), PlayerGroupSingle(lv_intPlayer));
                    DialogControlSetVisible(libPEEP_gv_recUI.lv_diCommentatorChoiceCountdownLabel, PlayerGroupSingle(lv_intPlayer), false);
                }
            }
            else {
                lv_boolAllDone = false;
                lv_txtText = (StringExternal("Param/Value/lib_PEEP_4ED41969") + TextWithColor(IntToText(lv_intVotesLeft), (Color(22*100/255,128*100/255,0))) + StringExternal("Param/Value/lib_PEEP_F5F2770E"));
                if ((libPEEP_gv_recGlobals.lv_intCurrentTeamSize > 1)) {
                    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_03A073BB"));
                }
                else {
                    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_AED815CA"));
                }
                if ((lv_intVotesLeft > 1)) {
                    lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_6BFA4417"));
                }

                lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_57DF5D17") + libPEEP_gv_recGlobals.lv_txtMatchModeNames[libPEEP_gv_recGameState.lv_intTrueMatchMode]);
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCommentatorChoiceTitle, lv_txtText, PlayerGroupSingle(lv_intPlayer));
            }
            lv_txtAnnouncement = (lv_txtAnnouncement + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
        }

    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, lv_txtAnnouncement, PlayerGroupAll());
    if ((lv_boolAllDone == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dCommentatorChoiceDialog, PlayerGroupAll(), false);
        TimerStart(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer, 0.0, false, c_timeGame);
    }

}

void libPEEP_gf_CreateDashboard () {
    // Variable Declarations
    int lv_intLabelX;
    int lv_intY;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(300, 155, c_anchorTopRight, -40, 0, true);
    libPEEP_gv_recUI.lv_dDashboardDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, DialogGetHeight(DialogLastCreated()), c_anchorTopRight, 0, 0, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    lv_intY = 10;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopRight, 58, (lv_intY + 4), StringExternal("Param/Value/lib_PEEP_6EB04595"), "Assets\\Textures\\peepmode_logo_medium.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 97, (lv_intY + 9));
    libPEEP_gv_recUI.lv_diDashboardRatingLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
    lv_intY += 47;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 180, 50, c_anchorTopRight, 100, (lv_intY - 3), StringExternal("Param/Value/lib_PEEP_325BA9EB"), StringToText(""), "");
    libPEEP_gv_recUI.lv_diStoreButton2 = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonsStore, c_playerAny, libPEEP_gv_recUI.lv_diStoreButton2, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 38, 38, c_anchorTopRight, 52, (lv_intY + 1), StringToText(""), "Assets\\Textures\\btn-tips-credit.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 107, (lv_intY + 10));
    libPEEP_gv_recUI.lv_diDashboardBalanceLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
    lv_intY += 47;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorTopRight, 58, (lv_intY + 5), StringExternal("Param/Value/lib_PEEP_57025C30"), "Assets\\Textures\\chip.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 97, (lv_intY + 9));
    libPEEP_gv_recUI.lv_diDashboardChipsLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
}

void libPEEP_gf_RefreshDashboardsforAllPlayers () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto8D9AE117_ae;
    const int auto8D9AE117_ai = 1;

    // Variable Initialization

    // Implementation
    auto8D9AE117_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto8D9AE117_ai >= 0 && lv_intPlayer <= auto8D9AE117_ae) || (auto8D9AE117_ai < 0 && lv_intPlayer >= auto8D9AE117_ae) ) ; lv_intPlayer += auto8D9AE117_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false)) {
            libPEEP_gf_RefreshDashboardforPlayer(lv_intPlayer);
        }

    }
}

void libPEEP_gf_RefreshDashboardforPlayer (int lp_intPlayer) {
    // Variable Declarations
    text lv_txtMessage;
    int lv_intButtonWidth;
    int lv_intBalance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_txtMessage = (TextWithColor(FixedToText(libPEEP_gv_recPlayers[lp_intPlayer].lv_realBankSonasRating, 0), Color(80.00, 92.55, 100.00)));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diDashboardRatingLabel, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
    lv_txtMessage = (TextWithColor(StringExternal("Param/Value/lib_PEEP_AD7F6A41"), (Color(22*100/255,128*100/255,0))) + TextWithColor(libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount), (Color(22*100/255,128*100/255,0))));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diDashboardBalanceLabel, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
    lv_intBalance = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount;
    lv_intButtonWidth = 70;
    if ((lv_intBalance >= 100000)) {
        lv_intButtonWidth = 193;
    }
    else if ((lv_intBalance >= 10000)) {
        lv_intButtonWidth = 170;
    }
    else if ((lv_intBalance >= 1000)) {
        lv_intButtonWidth = 145;
    }
    else if ((lv_intBalance >= 100)) {
        lv_intButtonWidth = 120;
    }
    else if ((lv_intBalance >= 10)) {
        lv_intButtonWidth = 95;
    }
    DialogControlSetSize(libPEEP_gv_recUI.lv_diStoreButton2, PlayerGroupSingle(lp_intPlayer), lv_intButtonWidth, 50);
    lv_txtMessage = (TextWithColor(libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intChips), Color(96.86, 95.69, 83.53)));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diDashboardChipsLabel, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
}

void libPEEP_gf_CreateFloatingIcon (unit lp_uUnit, string lp_glUnitType, string lp_glUpgrade) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtIcon;
    int lv_intIconIndex;
    string lv_imgFrame;
    int lv_intUnitOwner;

    // Automatic Variable Declarations
    playergroup auto1EE8426C_g;

    // Variable Initialization

    // Implementation
    lv_intIconIndex = (libPEEP_gv_recGlobals.lv_intNumFloatingIcons + 1);
    libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_uAnchorUnit = lp_uUnit;
    libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_glUnitType = lp_glUnitType;
    libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_glUpgrade = lp_glUpgrade;
    libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_txtIcon = libPEEP_gf_convertGameLinkToIconText(lp_glUnitType, lp_glUpgrade);
    libPEEP_gv_recGlobals.lv_intNumFloatingIcons = lv_intIconIndex;
    lv_intUnitOwner = UnitGetOwner(lp_uUnit);
    auto1EE8426C_g = PlayerGroupAll();
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto1EE8426C_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        TextTagCreate(StringToText(""), 26, UnitGetPosition(lp_uUnit), 0.0, true, true, PlayerGroupSingle(lv_intPlayer));
        TextTagAttachToUnit(TextTagLastCreated(), lp_uUnit, 1.0);
        TextTagSetTextAlignment(TextTagLastCreated(), c_alignCenter, c_alignCenter);
        TextTagSetTextShadow(TextTagLastCreated(), false);
        if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 1)) {
            lv_imgFrame = "Assets\\Textures\\frame_red.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 2)) {
            lv_imgFrame = "Assets\\Textures\\frame_blue.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 3)) {
            lv_imgFrame = "Assets\\Textures\\frame_teal.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 4)) {
            lv_imgFrame = "Assets\\Textures\\frame_purple.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 5)) {
            lv_imgFrame = "Assets\\Textures\\frame_yellow.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 6)) {
            lv_imgFrame = "Assets\\Textures\\frame_orange.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 7)) {
            lv_imgFrame = "Assets\\Textures\\frame_green.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 8)) {
            lv_imgFrame = "Assets\\Textures\\frame_light_pink.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 9)) {
            lv_imgFrame = "Assets\\Textures\\frame_violet.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 10)) {
            lv_imgFrame = "Assets\\Textures\\frame_light_gray.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 11)) {
            lv_imgFrame = "Assets\\Textures\\frame_green.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 12)) {
            lv_imgFrame = "Assets\\Textures\\frame_brown.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 13)) {
            lv_imgFrame = "Assets\\Textures\\frame_light_green.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 14)) {
            lv_imgFrame = "Assets\\Textures\\frame_dark_gray.dds";
        }
        else if ((PlayerGetColorIndex(lv_intUnitOwner, false) == 15)) {
            lv_imgFrame = "Assets\\Textures\\frame_pink.dds";
        }
        TextTagSetBackgroundImage(TextTagLastCreated(), lv_imgFrame, false);
        TextTagSetBackgroundOffset(TextTagLastCreated(), 0.0, -0.25);
        TextTagShowBackground(TextTagLastCreated(), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_ttFloatingTextTags[lv_intIconIndex] = TextTagLastCreated();
        libPEEP_gf_RefreshFloatingIcon(lv_intPlayer, lv_intIconIndex);
    }
    libPEEP_gf_SetFloatingIconOffsets(lp_uUnit);
}

void libPEEP_gf_DestroyFloatingIconforAllPlayers (unit lp_uUnit, string lp_glUnitType, string lp_glUpgrade) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intNumIcons;
    int lv_intIconIndex;
    int lv_intIconIndex2;

    // Automatic Variable Declarations
    int auto7E31C3C1_ae;
    const int auto7E31C3C1_ai = 1;
    playergroup auto4BE1A484_g;

    // Variable Initialization

    // Implementation
    lv_intNumIcons = libPEEP_gv_recGlobals.lv_intNumFloatingIcons;
    auto7E31C3C1_ae = lv_intNumIcons;
    lv_intIconIndex = 1;
    for ( ; ( (auto7E31C3C1_ai >= 0 && lv_intIconIndex <= auto7E31C3C1_ae) || (auto7E31C3C1_ai < 0 && lv_intIconIndex >= auto7E31C3C1_ae) ) ; lv_intIconIndex += auto7E31C3C1_ai ) {
        if (((lp_uUnit == libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_uAnchorUnit) && ((lp_glUnitType == libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_glUnitType) || (lp_glUpgrade == libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_glUpgrade)))) {
            auto4BE1A484_g = PlayerGroupAll();
            lv_intPlayer = -1;
            while (true) {
                lv_intPlayer = PlayerGroupNextPlayer(auto4BE1A484_g, lv_intPlayer);
                if (lv_intPlayer < 0) { break; }
                TextTagDestroy(libPEEP_gv_recPlayers[lv_intPlayer].lv_ttFloatingTextTags[lv_intIconIndex]);
                libPEEP_gv_recPlayers[lv_intPlayer].lv_ttFloatingTextTags[lv_intIconIndex] = libPEEP_gv_recPlayers[lv_intPlayer].lv_ttFloatingTextTags[lv_intNumIcons];
            }
            libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_uAnchorUnit = libPEEP_gv_recFloatingIcons[lv_intNumIcons].lv_uAnchorUnit;
            libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_txtIcon = libPEEP_gv_recFloatingIcons[lv_intNumIcons].lv_txtIcon;
            libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_glUpgrade = libPEEP_gv_recFloatingIcons[lv_intNumIcons].lv_glUpgrade;
            libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_glUnitType = libPEEP_gv_recFloatingIcons[lv_intNumIcons].lv_glUnitType;
            libPEEP_gv_recGlobals.lv_intNumFloatingIcons = (lv_intNumIcons - 1);
            break;
        }

    }
    libPEEP_gf_SetFloatingIconOffsets(lp_uUnit);
}

void libPEEP_gf_DestroyAllFloatingIcons () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIconIndex;

    // Automatic Variable Declarations
    int autoA5D58DB4_ae;
    const int autoA5D58DB4_ai = 1;
    playergroup auto92197DC0_g;

    // Variable Initialization

    // Implementation
    autoA5D58DB4_ae = libPEEP_gv_recGlobals.lv_intNumFloatingIcons;
    lv_intIconIndex = 1;
    for ( ; ( (autoA5D58DB4_ai >= 0 && lv_intIconIndex <= autoA5D58DB4_ae) || (autoA5D58DB4_ai < 0 && lv_intIconIndex >= autoA5D58DB4_ae) ) ; lv_intIconIndex += autoA5D58DB4_ai ) {
        auto92197DC0_g = PlayerGroupAll();
        lv_intPlayer = -1;
        while (true) {
            lv_intPlayer = PlayerGroupNextPlayer(auto92197DC0_g, lv_intPlayer);
            if (lv_intPlayer < 0) { break; }
            TextTagDestroy(libPEEP_gv_recPlayers[lv_intPlayer].lv_ttFloatingTextTags[lv_intIconIndex]);
        }
    }
    libPEEP_gv_recGlobals.lv_intNumFloatingIcons = 0;
}

void libPEEP_gf_RefreshFloatingIconsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIconIndex;

    // Automatic Variable Declarations
    int auto60D69FD8_ae;
    const int auto60D69FD8_ai = 1;

    // Variable Initialization

    // Implementation
    auto60D69FD8_ae = libPEEP_gv_recGlobals.lv_intNumFloatingIcons;
    lv_intIconIndex = 1;
    for ( ; ( (auto60D69FD8_ai >= 0 && lv_intIconIndex <= auto60D69FD8_ae) || (auto60D69FD8_ai < 0 && lv_intIconIndex >= auto60D69FD8_ae) ) ; lv_intIconIndex += auto60D69FD8_ai ) {
        libPEEP_gf_RefreshFloatingIcon(lp_intPlayer, lv_intIconIndex);
    }
}

void libPEEP_gf_RefreshFloatingIcon (int lp_intPlayer, int lp_intLabelIndex) {
    // Variable Declarations
    text lv_txtText;
    int lv_intSize;
    int lv_intZoomIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intSize = 50;

    // Implementation
    lv_intZoomIndex = libPEEP_gv_recPlayers[lp_intPlayer].lv_intZoomIndex;
    if ((lv_intZoomIndex == 0)) {
        lv_intSize = 50;
    }
    else if ((lv_intZoomIndex == 1)) {
        lv_intSize = 45;
    }
    else if ((lv_intZoomIndex == 2)) {
        lv_intSize = 40;
    }
    else if ((lv_intZoomIndex == 3)) {
        lv_intSize = 35;
    }
    else if ((lv_intZoomIndex == 4)) {
        lv_intSize = 30;
    }
    else if ((lv_intZoomIndex == 5)) {
        lv_intSize = 30;
    }
    lv_txtText = (StringExternal("Param/Value/lib_PEEP_EA4E4D0F") + libPEEP_gv_recFloatingIcons[lp_intLabelIndex].lv_txtIcon + StringExternal("Param/Value/lib_PEEP_CEBB340C") + IntToText(lv_intSize) + StringExternal("Param/Value/lib_PEEP_4CE18DF8") + IntToText(lv_intSize) + StringExternal("Param/Value/lib_PEEP_27D2CE8D"));
    TextTagSetText(libPEEP_gv_recPlayers[lp_intPlayer].lv_ttFloatingTextTags[lp_intLabelIndex], lv_txtText);
    if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayingMatch == false) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionShowFloatingIcons, lp_intPlayer) == true))) {
        TextTagShow(libPEEP_gv_recPlayers[lp_intPlayer].lv_ttFloatingTextTags[lp_intLabelIndex], PlayerGroupSingle(lp_intPlayer), true);
    }
    else {
        TextTagShow(libPEEP_gv_recPlayers[lp_intPlayer].lv_ttFloatingTextTags[lp_intLabelIndex], PlayerGroupSingle(lp_intPlayer), false);
    }
}

void libPEEP_gf_SetFloatingIconOffsets (unit lp_uAnchorUnit) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intNumIcons;
    int lv_intIconIndex;
    int lv_intIconIndex2;
    int[101] lv_intIndexList;
    int lv_intNumMatches;
    fixed lv_realMidway;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto6F7D313A_ae;
    const int auto6F7D313A_ai = 1;
    int autoD5D12796_ae;
    const int autoD5D12796_ai = 1;
    playergroup auto3CFBCE30_g;
    playergroup auto39EAFA49_g;

    // Variable Initialization

    // Implementation
    auto6F7D313A_ae = libPEEP_gv_recGlobals.lv_intNumFloatingIcons;
    lv_intIconIndex = 1;
    for ( ; ( (auto6F7D313A_ai >= 0 && lv_intIconIndex <= auto6F7D313A_ae) || (auto6F7D313A_ai < 0 && lv_intIconIndex >= auto6F7D313A_ae) ) ; lv_intIconIndex += auto6F7D313A_ai ) {
        if ((libPEEP_gv_recFloatingIcons[lv_intIconIndex].lv_uAnchorUnit == lp_uAnchorUnit)) {
            lv_intNumMatches = (lv_intNumMatches + 1);
            lv_intIndexList[lv_intNumMatches] = lv_intIconIndex;
        }

    }
    if ((lv_intNumMatches == 1)) {
        auto39EAFA49_g = PlayerGroupAll();
        lv_intPlayer = -1;
        while (true) {
            lv_intPlayer = PlayerGroupNextPlayer(auto39EAFA49_g, lv_intPlayer);
            if (lv_intPlayer < 0) { break; }
            TextTagAttachToUnitPoint(libPEEP_gv_recPlayers[lv_intPlayer].lv_ttFloatingTextTags[lv_intIndexList[1]], lp_uAnchorUnit, "Ref_Origin", 0, 0);
        }
    }
    else {
        lv_realMidway = ((lv_intNumMatches / 2.0) + 0.5);
        autoD5D12796_ae = lv_intNumMatches;
        lv_intIndex = 1;
        for ( ; ( (autoD5D12796_ai >= 0 && lv_intIndex <= autoD5D12796_ae) || (autoD5D12796_ai < 0 && lv_intIndex >= autoD5D12796_ae) ) ; lv_intIndex += autoD5D12796_ai ) {
            auto3CFBCE30_g = PlayerGroupAll();
            lv_intPlayer = -1;
            while (true) {
                lv_intPlayer = PlayerGroupNextPlayer(auto3CFBCE30_g, lv_intPlayer);
                if (lv_intPlayer < 0) { break; }
                TextTagAttachToUnitPoint(libPEEP_gv_recPlayers[lv_intPlayer].lv_ttFloatingTextTags[lv_intIndexList[1]], lp_uAnchorUnit, "Ref_Origin", FixedToInt(((lv_intIndex - lv_realMidway) * 45.0)), 0);
            }
        }
    }
}

text libPEEP_gf_convertGameLinkToIconText (string lp_glUnitType, string lp_glUpgrade) {
    // Variable Declarations
    text lv_txtIcon;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_glUpgrade != null)) {
        if ((lp_glUpgrade == "ProtossAirArmorsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6A19D079");
        }
        else if ((lp_glUpgrade == "ProtossAirArmorsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_32B80F2D");
        }
        else if ((lp_glUpgrade == "ProtossAirArmorsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7850B65D");
        }
        else if ((lp_glUpgrade == "ProtossGroundArmorsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_ED21964A");
        }
        else if ((lp_glUpgrade == "ProtossGroundArmorsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_937465B6");
        }
        else if ((lp_glUpgrade == "ProtossGroundArmorsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_12F4E5ED");
        }
        else if ((lp_glUpgrade == "ProtossShieldsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AF2CB294");
        }
        else if ((lp_glUpgrade == "ProtossShieldsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7F8F7D88");
        }
        else if ((lp_glUpgrade == "ProtossShieldsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_93A3ECEB");
        }
        else if ((lp_glUpgrade == "TerranBuildingArmor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_89961661");
        }
        else if ((lp_glUpgrade == "TerranInfantryArmorsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C7214F87");
        }
        else if ((lp_glUpgrade == "TerranInfantryArmorsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B07E476F");
        }
        else if ((lp_glUpgrade == "TerranInfantryArmorsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4C7DAA02");
        }
        else if ((lp_glUpgrade == "TerranVehicleAndShipArmorsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_CF6D18E7");
        }
        else if ((lp_glUpgrade == "TerranVehicleAndShipArmorsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_BB61B172");
        }
        else if ((lp_glUpgrade == "TerranVehicleAndShipArmorsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0B1C0AA4");
        }
        else if ((lp_glUpgrade == "ZergFlyerArmorsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7EF65805");
        }
        else if ((lp_glUpgrade == "ZergFlyerArmorsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_23462684");
        }
        else if ((lp_glUpgrade == "ZergFlyerArmorsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_11251C2B");
        }
        else if ((lp_glUpgrade == "ZergGroundArmorsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F07F6475");
        }
        else if ((lp_glUpgrade == "ZergGroundArmorsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DF117569");
        }
        else if ((lp_glUpgrade == "ZergGroundArmorsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9A647D67");
        }
        else if ((lp_glUpgrade == "AdeptPiercingAttack")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A57504E9");
        }
        else if ((lp_glUpgrade == "ProtossAirWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_CC0468C5");
        }
        else if ((lp_glUpgrade == "ProtossAirWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_8A880F0C");
        }
        else if ((lp_glUpgrade == "ProtossAirWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_773F6135");
        }
        else if ((lp_glUpgrade == "ProtossGroundWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_125B482C");
        }
        else if ((lp_glUpgrade == "ProtossGroundWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A084302F");
        }
        else if ((lp_glUpgrade == "ProtossGroundWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7EB700EC");
        }
        else if ((lp_glUpgrade == "TerranInfantryWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_960B45ED");
        }
        else if ((lp_glUpgrade == "TerranInfantryWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0A9457B0");
        }
        else if ((lp_glUpgrade == "TerranInfantryWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_032CF154");
        }
        else if ((lp_glUpgrade == "TerranVehicleWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_133BE81A");
        }
        else if ((lp_glUpgrade == "TerranVehicleWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4A804FA4");
        }
        else if ((lp_glUpgrade == "TerranVehicleWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_50E0E084");
        }
        else if ((lp_glUpgrade == "TerranShipWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6F1C853A");
        }
        else if ((lp_glUpgrade == "TerranShipWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_EB3AFE3A");
        }
        else if ((lp_glUpgrade == "TerranShipWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7947B6FE");
        }
        else if ((lp_glUpgrade == "VikingJotunBoosters")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_079C4505");
        }
        else if ((lp_glUpgrade == "ZergFlyerWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_19597671");
        }
        else if ((lp_glUpgrade == "ZergFlyerWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_EF06C9F9");
        }
        else if ((lp_glUpgrade == "ZergFlyerWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_47E58EDF");
        }
        else if ((lp_glUpgrade == "ZergMeleeWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0DAAF575");
        }
        else if ((lp_glUpgrade == "ZergMeleeWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3461166C");
        }
        else if ((lp_glUpgrade == "ZergMeleeWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C571381C");
        }
        else if ((lp_glUpgrade == "ZergMissileWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_640E7F54");
        }
        else if ((lp_glUpgrade == "ZergMissileWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_70208654");
        }
        else if ((lp_glUpgrade == "ZergMissileWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_54028E0F");
        }
        else if ((lp_glUpgrade == "AdeptShieldUpgrade")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E86AAE8A");
        }
        else if ((lp_glUpgrade == "PhoenixRangeUpgrade")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B3B0F6E2");
        }
        else if ((lp_glUpgrade == "BansheeCloak")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_810B72AD");
        }
        else if ((lp_glUpgrade == "BansheeSpeed")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_95AD4F1D");
        }
        else if ((lp_glUpgrade == "PersonalCloaking")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9B40A6E6");
        }
        else if ((lp_glUpgrade == "PersonalCloaking")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_5D4AF96E");
        }
        else if ((lp_glUpgrade == "NeuralParasite")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F1B76C76");
        }
        else if ((lp_glUpgrade == "LiberatorAGRangeUpgrade")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7F632F4B");
        }
        else if ((lp_glUpgrade == "BlinkTech")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_88C8F4FF");
        }
        else if ((lp_glUpgrade == "Stimpack")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_842BCCCA");
        }
        else if ((lp_glUpgrade == "WarpGateResearch")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_01507C58");
        }
        else if ((lp_glUpgrade == "WarpGateResearch")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D9E6B371");
        }
        else if ((lp_glUpgrade == "AnionPulseCrystals")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_BD0A5577");
        }
        else if ((lp_glUpgrade == "CentrificalHooks")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_926624C4");
        }
        else if ((lp_glUpgrade == "BattlecruiserBehemothReactor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_71A9C948");
        }
        else if ((lp_glUpgrade == "BattlecruiserEnableSpecializations")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DF4DFDC1");
        }
        else if ((lp_glUpgrade == "NeosteelFrame")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6000B132");
        }
        else if ((lp_glUpgrade == "Burrow")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_73700497");
        }
        else if ((lp_glUpgrade == "CarrierLaunchSpeedUpgrade")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_43E4593F");
        }
        else if ((lp_glUpgrade == "ExtendedThermalLance")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DA71F338");
        }
        else if ((lp_glUpgrade == "CycloneLockOnDamageUpgrade")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_BA99E385");
        }
        else if ((lp_glUpgrade == "LocustLifetimeIncrease")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_022CB907");
        }
        else if ((lp_glUpgrade == "GhostMoebiusReactor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A5504812");
        }
        else if ((lp_glUpgrade == "HighCapacityBarrels")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C6D2222F");
        }
        else if ((lp_glUpgrade == "TransformationServos")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_762B7731");
        }
        else if ((lp_glUpgrade == "HiSecAutoTracking")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7A60F8E9");
        }
        else if ((lp_glUpgrade == "PsiStormTech")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A72AB103");
        }
        else if ((lp_glUpgrade == "hydraliskspeed")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_36BB3A08");
        }
        else if ((lp_glUpgrade == "InfestorEnergyUpgrade")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FE34BB36");
        }
        else if ((lp_glUpgrade == "LiberatorMorph")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B165E69A");
        }
        else if ((lp_glUpgrade == "LurkerRange")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_428DDFA8");
        }
        else if ((lp_glUpgrade == "PunisherGrenades")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FA7A3006");
        }
        else if ((lp_glUpgrade == "ShieldWall")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0B12E0A2");
        }
        else if ((lp_glUpgrade == "MedivacIncreaseSpeedBoost")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_405A3006");
        }
        else if ((lp_glUpgrade == "ObserverGraviticBooster")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DFA69744");
        }
        else if ((lp_glUpgrade == "overlordspeed")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_85940BB3");
        }
        else if ((lp_glUpgrade == "overlordtransport")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_10716B26");
        }
        else if ((lp_glUpgrade == "RavenCorvidReactor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_22A5DC9B");
        }
        else if ((lp_glUpgrade == "RavenDamageUpgrade")) {
            lv_txtIcon = StringToText("");
        }
        else if ((lp_glUpgrade == "ReaperSpeed")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_116D4F89");
        }
        else if ((lp_glUpgrade == "GlialReconstitution")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_09F39632");
        }
        else if ((lp_glUpgrade == "TunnelingClaws")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_2E62A490");
        }
        else if ((lp_glUpgrade == "ChitinousPlating")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6C5BE1EE");
        }
        else if ((lp_glUpgrade == "GraviticDrive")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_72916963");
        }
        else if ((lp_glUpgrade == "DrillClaws")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_851108BE");
        }
        else if ((lp_glUpgrade == "Charge")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D6727E0B");
        }
        else if ((lp_glUpgrade == "zerglingattackspeed")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_42411C4A");
        }
        else if ((lp_glUpgrade == "zerglingmovementspeed")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B8FBA3E0");
        }
        else if ((lp_glUpgrade == "GenetronLightWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_1ABF4CFD");
        }
        else if ((lp_glUpgrade == "GenetronLightWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_219B8B0C");
        }
        else if ((lp_glUpgrade == "GenetronLightWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E8A0E32C");
        }
        else if ((lp_glUpgrade == "GenetronGroundPlatingLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_34C80C8C");
        }
        else if ((lp_glUpgrade == "GenetronGroundPlatingLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_47771247");
        }
        else if ((lp_glUpgrade == "GenetronGroundPlatingLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_69D8D8CA");
        }
        else if ((lp_glUpgrade == "GenetronHeavyWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A13FACDA");
        }
        else if ((lp_glUpgrade == "GenetronHeavyWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FD5C656B");
        }
        else if ((lp_glUpgrade == "GenetronHeavyWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_987FED60");
        }
        else if ((lp_glUpgrade == "GenetronAircraftPlatingLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_300A70D6");
        }
        else if ((lp_glUpgrade == "GenetronAircraftPlatingLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FD0EB713");
        }
        else if ((lp_glUpgrade == "GenetronAircraftPlatingLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_579B2AAC");
        }
        else if ((lp_glUpgrade == "GenetronAircraftWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_254F61FB");
        }
        else if ((lp_glUpgrade == "GenetronAircraftWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_13145B9D");
        }
        else if ((lp_glUpgrade == "GenetronAircraftWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_842FDE0F");
        }
        else if ((lp_glUpgrade == "CloakingGenerator")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7C54EA37");
        }
        else if ((lp_glUpgrade == "IntegratedOptics")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A038FC99");
        }
        else if ((lp_glUpgrade == "TrackingMunitions")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6CE8E720");
        }
        else if ((lp_glUpgrade == "CalibratedEngines")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DAF7A776");
        }
        else if ((lp_glUpgrade == "ReinforcedPlating")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_BC071EF1");
        }
        else if ((lp_glUpgrade == "FirewallShield")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_EDD6A058");
        }
        else if ((lp_glUpgrade == "RefittedNozzles")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E6200476");
        }
        else if ((lp_glUpgrade == "PhalanxReactor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FF13FE5F");
        }
        else if ((lp_glUpgrade == "EnhancedTargeting")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_79A4FBA1");
        }
        else if ((lp_glUpgrade == "SubterraneanSensors")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B99D72F2");
        }
        else if ((lp_glUpgrade == "SelffixProtocol")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_8AAC59FD");
        }
        else if ((lp_glUpgrade == "StealthSystems")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D4AEA5B3");
        }
        else if ((lp_glUpgrade == "VengeanceMissile")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B51CC255");
        }
        else if ((lp_glUpgrade == "ShapedHull")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_BF9A866B");
        }
        else if ((lp_glUpgrade == "AAMDefenseTurret")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_EF07080C");
        }
        else if ((lp_glUpgrade == "XayidGroundAttacksLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_23B9761C");
        }
        else if ((lp_glUpgrade == "XayidGroundAttacksLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D7751765");
        }
        else if ((lp_glUpgrade == "XayidGroundAttacksLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7CE8AF17");
        }
        else if ((lp_glUpgrade == "XayidGroundCarapaceLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_2FFE96CF");
        }
        else if ((lp_glUpgrade == "XayidGroundCarapaceLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4C83C975");
        }
        else if ((lp_glUpgrade == "XayidGroundCarapaceLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_1A2194E9");
        }
        else if ((lp_glUpgrade == "XayidFlyerCarapaceLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E532D74E");
        }
        else if ((lp_glUpgrade == "XayidFlyerCarapaceLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9A58E8A9");
        }
        else if ((lp_glUpgrade == "XayidFlyerCarapaceLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B3E9F96F");
        }
        else if ((lp_glUpgrade == "XayidFlyerAttacksLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6CF97331");
        }
        else if ((lp_glUpgrade == "XayidFlyerAttacksLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_96BB3A6A");
        }
        else if ((lp_glUpgrade == "XayidFlyerAttacksLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_5CD09102");
        }
        else if ((lp_glUpgrade == "OcularAcuity")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4085FD15");
        }
        else if ((lp_glUpgrade == "PiercingThrust")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B59E8DE9");
        }
        else if ((lp_glUpgrade == "ScorpaliskMetabolics")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D7E6BF9E");
        }
        else if ((lp_glUpgrade == "PersistentSpores")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F133FCFE");
        }
        else if ((lp_glUpgrade == "CalcifiedHusk")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_90FA66A3");
        }
        else if ((lp_glUpgrade == "BileDucts")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_163D1A24");
        }
        else if ((lp_glUpgrade == "BattleFrenzy")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B511BBF1");
        }
        else if ((lp_glUpgrade == "ResidualAcid")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B2C9E0C2");
        }
        else if ((lp_glUpgrade == "ProlongedSpores")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F53A77B8");
        }
        else if ((lp_glUpgrade == "CleavingSpores")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DB23C5FC");
        }
        else if ((lp_glUpgrade == "RefinedExcretion")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_5DCE7835");
        }
        else if ((lp_glUpgrade == "VolatileDischarge")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_BE06005C");
        }
        else if ((lp_glUpgrade == "KeironBioWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D6550654");
        }
        else if ((lp_glUpgrade == "KeironBioWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DA7F0ACC");
        }
        else if ((lp_glUpgrade == "KeironBioWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E8041BDF");
        }
        else if ((lp_glUpgrade == "KeironBioArmorLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_550B8C42");
        }
        else if ((lp_glUpgrade == "KeironBioArmorLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C728C2D3");
        }
        else if ((lp_glUpgrade == "KeironBioArmorLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_56286A9A");
        }
        else if ((lp_glUpgrade == "KeironMechWeaponsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FF9E50AB");
        }
        else if ((lp_glUpgrade == "KeironMechWeaponsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_84AB4709");
        }
        else if ((lp_glUpgrade == "KeironMechWeaponsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F9534798");
        }
        else if ((lp_glUpgrade == "KeironMechArmorLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AB68550C");
        }
        else if ((lp_glUpgrade == "KeironMechArmorLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_250BB99E");
        }
        else if ((lp_glUpgrade == "KeironMechArmorLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DDD0C67A");
        }
        else if ((lp_glUpgrade == "KeironShieldsLevel1")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4F9CF6BA");
        }
        else if ((lp_glUpgrade == "KeironShieldsLevel2")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_99754BDC");
        }
        else if ((lp_glUpgrade == "KeironShieldsLevel3")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E515A4D5");
        }
        else if ((lp_glUpgrade == "ModifiedGait")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_00DBFFE2");
        }
        else if ((lp_glUpgrade == "ExaltedShield")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_65BDEF95");
        }
        else if ((lp_glUpgrade == "LatentCharge")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A2FD7252");
        }
        else if ((lp_glUpgrade == "AmplifiedSphere")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_23CDA19F");
        }
        else if ((lp_glUpgrade == "PulsarDampener")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_23A9D179");
        }
        else if ((lp_glUpgrade == "MeridianConvergence")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_217F02FF");
        }
        else if ((lp_glUpgrade == "WraithChamber")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E9C364C0");
        }
        else if ((lp_glUpgrade == "ShieldCompulsion")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7063E3A0");
        }
        else if ((lp_glUpgrade == "AnisopteraWings")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_775A68A8");
        }
        else if ((lp_glUpgrade == "DissonanceProjector")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0DD75DFF");
        }
        else if ((lp_glUpgrade == "ApertureKeyhole")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_EEF25DF5");
        }
    }
    else {
        if ((lp_glUnitType == "Armory")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AAE8DA0C");
        }
        else if ((lp_glUnitType == "Assimilator")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F3B65D3D");
        }
        else if ((lp_glUnitType == "AutoTurret")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_980509D2");
        }
        else if ((lp_glUnitType == "BanelingNest")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3948BC8E");
        }
        else if ((lp_glUnitType == "Barracks")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0C2AC84D");
        }
        else if ((lp_glUnitType == "Bunker")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9820330A");
        }
        else if ((lp_glUnitType == "CommandCenter")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B5AD18A6");
        }
        else if ((lp_glUnitType == "CyberneticsCore")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_41571655");
        }
        else if ((lp_glUnitType == "DarkShrine")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_366AF8B5");
        }
        else if ((lp_glUnitType == "EngineeringBay")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_18A43E26");
        }
        else if ((lp_glUnitType == "EvolutionChamber")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FF967FB3");
        }
        else if ((lp_glUnitType == "Extractor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E44EFA8C");
        }
        else if ((lp_glUnitType == "Factory")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_470B218D");
        }
        else if ((lp_glUnitType == "FleetBeacon")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_5B888075");
        }
        else if ((lp_glUnitType == "Forge")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_01BEAC94");
        }
        else if ((lp_glUnitType == "FusionCore")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E021DEC4");
        }
        else if ((lp_glUnitType == "Gateway")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6458F206");
        }
        else if ((lp_glUnitType == "GhostAcademy")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_724F323E");
        }
        else if ((lp_glUnitType == "GreaterSpire")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AF04CE60");
        }
        else if ((lp_glUnitType == "Hatchery")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AD1692EB");
        }
        else if ((lp_glUnitType == "Hive")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D240C3A4");
        }
        else if ((lp_glUnitType == "HydraliskDen")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E407DB6B");
        }
        else if ((lp_glUnitType == "InfestationPit")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E2A28CDC");
        }
        else if ((lp_glUnitType == "Lair")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AA4DA362");
        }
        else if ((lp_glUnitType == "LurkerDenMP")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FAB5B2A9");
        }
        else if ((lp_glUnitType == "MissileTurret")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_815E3D4A");
        }
        else if ((lp_glUnitType == "Nexus")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AB02DC6F");
        }
        else if ((lp_glUnitType == "NydusNetwork")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F95BDA7A");
        }
        else if ((lp_glUnitType == "NydusCanal")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_49DB3465");
        }
        else if ((lp_glUnitType == "OrbitalCommand")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_74C9E3E4");
        }
        else if ((lp_glUnitType == "PhotonCannon")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C0D2DBBE");
        }
        else if ((lp_glUnitType == "PlanetaryFortress")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7D0D226E");
        }
        else if ((lp_glUnitType == "Pylon")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_24D94876");
        }
        else if (((lp_glUnitType == "Reactor") || (lp_glUnitType == "BarracksReactor") || (lp_glUnitType == "FactoryReactor") || (lp_glUnitType == "StarportReactor"))) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_86111ED1");
        }
        else if ((lp_glUnitType == "Refinery")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_30F691F3");
        }
        else if ((lp_glUnitType == "RoachWarren")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C0F8EF0D");
        }
        else if ((lp_glUnitType == "RoboticsBay")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_92839483");
        }
        else if ((lp_glUnitType == "RoboticsFacility")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9EC69C08");
        }
        else if ((lp_glUnitType == "SensorTower")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0293C432");
        }
        else if ((lp_glUnitType == "ShieldBattery")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D1943ADE");
        }
        else if ((lp_glUnitType == "SpawningPool")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_55B46F40");
        }
        else if ((lp_glUnitType == "SpineCrawler")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0F195DF3");
        }
        else if ((lp_glUnitType == "Spire")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_53F2B793");
        }
        else if ((lp_glUnitType == "SporeCrawler")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AD823811");
        }
        else if ((lp_glUnitType == "Stargate")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_15EE0267");
        }
        else if ((lp_glUnitType == "Starport")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B5E8A377");
        }
        else if ((lp_glUnitType == "SupplyDepot")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F4B6F696");
        }
        else if (((lp_glUnitType == "TechLab") || (lp_glUnitType == "BarracksTechLab") || (lp_glUnitType == "FactoryTechLab") || (lp_glUnitType == "StarportTechLab"))) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C90496C6");
        }
        else if ((lp_glUnitType == "TemplarArchive")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_181CAB09");
        }
        else if ((lp_glUnitType == "TwilightCouncil")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_2BF883F1");
        }
        else if ((lp_glUnitType == "UltraliskCavern")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9CF6FF68");
        }
        else if ((lp_glUnitType == "WarpGate")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F1DE8572");
        }
        else if ((lp_glUnitType == "Adept")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7BAF47F7");
        }
        else if ((lp_glUnitType == "Archon")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_8875212C");
        }
        else if ((lp_glUnitType == "Baneling")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_5BA4AA44");
        }
        else if ((lp_glUnitType == "Banshee")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_82173582");
        }
        else if ((lp_glUnitType == "Battlecruiser")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3AF0CA4A");
        }
        else if ((lp_glUnitType == "BroodLord")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D0B299CA");
        }
        else if ((lp_glUnitType == "Carrier")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4057133F");
        }
        else if ((lp_glUnitType == "Changeling")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_8271BE05");
        }
        else if ((lp_glUnitType == "Colossus")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_641A6CF6");
        }
        else if ((lp_glUnitType == "Corruptor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_109D4483");
        }
        else if ((lp_glUnitType == "CorsairMP")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7243B0A6");
        }
        else if ((lp_glUnitType == "Cyclone")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0D897C2C");
        }
        else if ((lp_glUnitType == "DarkTemplar")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_199DCE7C");
        }
        else if ((lp_glUnitType == "Disruptor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9B345298");
        }
        else if ((lp_glUnitType == "Drone")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C26B4371");
        }
        else if ((lp_glUnitType == "Ghost")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_1EC57F22");
        }
        else if ((lp_glUnitType == "HellionTank")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E8BA87A6");
        }
        else if ((lp_glUnitType == "Hellion")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A361C455");
        }
        else if ((lp_glUnitType == "HighTemplar")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A9895375");
        }
        else if ((lp_glUnitType == "Hydralisk")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_40552E4E");
        }
        else if ((lp_glUnitType == "Immortal")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F841BFA9");
        }
        else if ((lp_glUnitType == "Infestor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DB40EB2A");
        }
        else if ((lp_glUnitType == "Liberator")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D3288D73");
        }
        else if ((lp_glUnitType == "Marauder")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4E8561B4");
        }
        else if ((lp_glUnitType == "Marine")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F88F8306");
        }
        else if ((lp_glUnitType == "Medivac")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B78DF057");
        }
        else if ((lp_glUnitType == "Mothership")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9EE3CFED");
        }
        else if ((lp_glUnitType == "MothershipCore")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F1E61165");
        }
        else if ((lp_glUnitType == "MULE")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3617C2DE");
        }
        else if ((lp_glUnitType == "Mutalisk")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_887E185D");
        }
        else if ((lp_glUnitType == "Observer")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_10605720");
        }
        else if ((lp_glUnitType == "Oracle")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6B83A23A");
        }
        else if ((lp_glUnitType == "Overlord")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_8AF5C169");
        }
        else if ((lp_glUnitType == "Overseer")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D698774F");
        }
        else if ((lp_glUnitType == "Phoenix")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_78DEF6B7");
        }
        else if ((lp_glUnitType == "Probe")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3214F3CF");
        }
        else if ((lp_glUnitType == "Queen")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_0887D2F5");
        }
        else if ((lp_glUnitType == "Ravager")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_986AC5CC");
        }
        else if ((lp_glUnitType == "Raven")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_91EE2F55");
        }
        else if ((lp_glUnitType == "Reaper")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C3922A0D");
        }
        else if ((lp_glUnitType == "Replicant")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_60C4C73A");
        }
        else if ((lp_glUnitType == "Roach")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AB61B90D");
        }
        else if ((lp_glUnitType == "SCV")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_044EB43C");
        }
        else if ((lp_glUnitType == "Sentry")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_95C4DB9B");
        }
        else if ((lp_glUnitType == "SiegeTank")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_30416D02");
        }
        else if ((lp_glUnitType == "Stalker")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_696E923F");
        }
        else if ((lp_glUnitType == "OracleStasisTrap")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_16B04AD7");
        }
        else if ((lp_glUnitType == "SwarmHostMP")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F54F8A91");
        }
        else if ((lp_glUnitType == "Tempest")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D34E04CB");
        }
        else if ((lp_glUnitType == "Thor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_22620601");
        }
        else if ((lp_glUnitType == "Ultralisk")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_43645AD5");
        }
        else if ((lp_glUnitType == "VikingFighter")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C10E76E1");
        }
        else if ((lp_glUnitType == "Viper")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AA6AAD43");
        }
        else if ((lp_glUnitType == "VoidRay")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3D4F35D0");
        }
        else if ((lp_glUnitType == "WarHound")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_6133D250");
        }
        else if ((lp_glUnitType == "WarpPrism")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_355931FE");
        }
        else if ((lp_glUnitType == "WidowMine")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_9191EC50");
        }
        else if ((lp_glUnitType == "Zealot")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_43268023");
        }
        else if ((lp_glUnitType == "Zergling")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_8B718608");
        }
        else if ((lp_glUnitType == "ProcessingCore")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_5471D0D4");
        }
        else if ((lp_glUnitType == "FilteringPlant")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4CC399FA");
        }
        else if ((lp_glUnitType == "ProcessingNode")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C58D0DAE");
        }
        else if ((lp_glUnitType == "Repulsor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_208F8098");
        }
        else if ((lp_glUnitType == "Interdictor")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D62F0467");
        }
        else if ((lp_glUnitType == "Manufacturer")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_4467CFC3");
        }
        else if ((lp_glUnitType == "Fabricator")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AF9CF3A6");
        }
        else if ((lp_glUnitType == "AssemblyArray")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3754E686");
        }
        else if ((lp_glUnitType == "Uploader")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D89539A8");
        }
        else if ((lp_glUnitType == "OutfittingStation")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_53D5E515");
        }
        else if ((lp_glUnitType == "TechVault")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_012B549A");
        }
        else if ((lp_glUnitType == "AnalysisTerminal")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FC17AE4B");
        }
        else if ((lp_glUnitType == "ScavengerNest")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_ABFD4A3C");
        }
        else if ((lp_glUnitType == "Siphoner")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_17776FDC");
        }
        else if ((lp_glUnitType == "FeedingPool")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AFD87B48");
        }
        else if ((lp_glUnitType == "BilePit")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FFF2ACEF");
        }
        else if ((lp_glUnitType == "XayidDen")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_8EC79163");
        }
        else if ((lp_glUnitType == "BiomassHatchery")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_02AD0905");
        }
        else if ((lp_glUnitType == "AvianNest")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_AD3564D6");
        }
        else if ((lp_glUnitType == "CasnoliskDen")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_BDD70C61");
        }
        else if ((lp_glUnitType == "BiomassCavern")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E6AFA9B6");
        }
        else if ((lp_glUnitType == "MutagenChamber")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_FB5EE29E");
        }
        else if ((lp_glUnitType == "EvolutionPit")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_7119F0F5");
        }
        else if ((lp_glUnitType == "SunkenWarren")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_F439E92B");
        }
        else if (((lp_glUnitType == "Citadel") || (lp_glUnitType == "CitadelCharged"))) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_90C4E868");
        }
        else if ((lp_glUnitType == "Formulator")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_B08814C7");
        }
        else if ((lp_glUnitType == "Oculus")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_E31E5F0B");
        }
        else if ((lp_glUnitType == "Nullifier")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_DAC08227");
        }
        else if ((lp_glUnitType == "Stratus")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_1DDE3056");
        }
        else if ((lp_glUnitType == "Edifice")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_CD2A4DF1");
        }
        else if ((lp_glUnitType == "Sanctum")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3B5F35E0");
        }
        else if ((lp_glUnitType == "Foundry")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_3E9C50D9");
        }
        else if ((lp_glUnitType == "Elysium")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_66EDD08F");
        }
        else if ((lp_glUnitType == "Atrium")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_C08CEB3B");
        }
        else if ((lp_glUnitType == "Pantheon")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_5D4995B4");
        }
        else if ((lp_glUnitType == "Conduit")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A2F99DA3");
        }
        else if ((lp_glUnitType == "Outlet")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_EFB36E4E");
        }
        else if ((lp_glUnitType == "Empyrean")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_D3C3CCCA");
        }
        else if ((lp_glUnitType == "Zenith")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_1E3D74FE");
        }
        else if ((lp_glUnitType == "Reliquary")) {
            lv_txtIcon = StringExternal("Param/Value/lib_PEEP_A28DC9EF");
        }
    }
    return lv_txtIcon;
}

text libPEEP_gf_convertSecondsToTime (int lp_intTotalSeconds) {
    // Variable Declarations
    int lv_intHours;
    int lv_intMinutes;
    int lv_intSeconds;
    text lv_txtText;
    text lv_txtSeconds;
    text lv_txtMinutes;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intSeconds = lp_intTotalSeconds;
    if ((lv_intSeconds > 3600)) {
        lv_intHours = FloorI((IntToFixed(lv_intSeconds) / 3600.0));
        lv_intSeconds = ModI(lv_intSeconds, 3600);
    }

    lv_intMinutes = FloorI((IntToFixed(lv_intSeconds) / 60.0));
    lv_intSeconds = ModI(lv_intSeconds, 60);
    lv_txtMinutes = IntToText(lv_intMinutes);
    if (((lv_intHours > 0) && (lv_intMinutes < 10))) {
        lv_txtMinutes = (StringExternal("Param/Value/lib_PEEP_7943903F") + lv_txtMinutes);
    }

    lv_txtSeconds = IntToText(lv_intSeconds);
    if ((lv_intSeconds < 10)) {
        lv_txtSeconds = (StringExternal("Param/Value/lib_PEEP_B15F5BAD") + lv_txtSeconds);
    }

    lv_txtText = (StringToText("") + lv_txtMinutes + StringExternal("Param/Value/lib_PEEP_9EBF6E8C") + lv_txtSeconds + StringToText(""));
    if ((lv_intHours > 0)) {
        lv_txtText = (IntToText(lv_intHours) + StringExternal("Param/Value/lib_PEEP_AEF4E2F7") + lv_txtText);
    }

    return lv_txtText;
}

text libPEEP_gf_formatIntegerAsText (int lp_intInteger) {
    int init_i;

    // Variable Declarations
    string lv_strString;
    string[5] lv_strSubstrings;
    int lv_intIndex;
    int lv_intBackCount;
    text lv_txtText;

    // Automatic Variable Declarations
    const int autoE465DA70_ae = 4;
    const int autoE465DA70_ai = 1;
    const int autoED853139_ae = 4;
    const int autoED853139_ai = 1;

    // Variable Initialization
    lv_strString = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_strSubstrings[init_i] = "";
    }

    // Implementation
    lv_strString = IntToString(lp_intInteger);
    lv_intBackCount = (StringLength(lv_strString) + 1);
    lv_intIndex = 1;
    for ( ; ( (autoE465DA70_ai >= 0 && lv_intIndex <= autoE465DA70_ae) || (autoE465DA70_ai < 0 && lv_intIndex >= autoE465DA70_ae) ) ; lv_intIndex += autoE465DA70_ai ) {
        lv_intBackCount -= 3;
        if ((lv_intBackCount > 0)) {
            lv_strSubstrings[lv_intIndex] = StringSub(lv_strString, lv_intBackCount, (lv_intBackCount + 2));
        }
        else {
            lv_intBackCount += 3;
            lv_strSubstrings[lv_intIndex] = StringSub(lv_strString, 1, (lv_intBackCount - 1));
            break;
        }
    }
    lv_intIndex = 1;
    for ( ; ( (autoED853139_ai >= 0 && lv_intIndex <= autoED853139_ae) || (autoED853139_ai < 0 && lv_intIndex >= autoED853139_ae) ) ; lv_intIndex += autoED853139_ai ) {
        if ((StringLength(lv_strSubstrings[lv_intIndex]) > 0)) {
            if (((StringLength(lv_strSubstrings[lv_intIndex]) == 3) && (StringLength(lv_strSubstrings[(lv_intIndex + 1)]) > 0))) {
                lv_txtText = (StringExternal("Param/Value/lib_PEEP_B9986ADB") + StringToText(lv_strSubstrings[lv_intIndex]) + lv_txtText);
            }
            else {
                lv_txtText = (StringToText(lv_strSubstrings[lv_intIndex]) + lv_txtText);
            }
        }

    }
    return lv_txtText;
}

void libPEEP_gf_EnterCinematicModeforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intLogOffsetX;
    int lv_intBlizzUIOffsetY;
    int lv_intLogOffsetY;
    int lv_intObserverY;
    fixed lv_realTransparency;
    fixed lv_realFadeTime;

    // Automatic Variable Declarations
    const int auto4D3967B2_ae = 9;
    const int auto4D3967B2_ai = 1;
    int auto6F60DFB2_ae;
    const int auto6F60DFB2_ai = 1;

    // Variable Initialization
    lv_intLogOffsetX = -167;
    lv_intBlizzUIOffsetY = 80;
    lv_intObserverY = 5;
    lv_realTransparency = 70.0;
    lv_realFadeTime = 0.5;

    // Implementation
    UISetMode(PlayerGroupSingle(lp_intPlayer), c_uiModeFullscreen, 0.0);
    DialogControlSendAnimationEvent(libPEEP_gv_recUI.lv_diCinematicModeController, PlayerGroupSingle(lp_intPlayer), "Start");
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogReplacement, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogCinematic, PlayerGroupSingle(lp_intPlayer), true);
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged = true;
    UISetFrameVisible(PlayerGroupSingle(lp_intPlayer), c_syncFrameTypeMenuBar, true);
    libPEEP_gf_HideNavButtonsforPlayer(lp_intPlayer);
    UISetFrameVisible(PlayerGroupSingle(lp_intPlayer), c_syncFrameTypeStatusUI, true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dCinematicDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dClockReplacement, PlayerGroupSingle(lp_intPlayer), false);
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dMinimapDialog, PlayerGroupSingle(lp_intPlayer), true);
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dMinimapDialog, PlayerGroupSingle(lp_intPlayer), false);
    }
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverVisionPulldown, 1), 0);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomOut, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomOut, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomOutIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomOutIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomIn, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomIn, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomInIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomInIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diCinematicButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diCinematicButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diCinematicIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diCinematicIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diAutoCamCheckbox, 1), -2);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diAutoCamIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diAutoCamIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBlizzButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBlizzButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBlizzIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBlizzIcon, 1), 7);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLogsButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLogsButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLogsIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLogsIcon, 1), 7);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverStatsButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverStatsButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverStatsIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverStatsIcon, 1), 7);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBettingButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBettingButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBettingIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBettingIcon, 1), 7);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLeaderboardButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLeaderboardButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLeaderboardIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLeaderboardIcon, 1), 9);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomIn, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomInIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomOut, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomOutIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diCinematicButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diCinematicIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diAutoCamIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBlizzButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBlizzIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLogsButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLogsIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverStatsButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverStatsIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBettingButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBettingIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLeaderboardButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLeaderboardIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, lv_realTransparency);
    libPEEP_gf_HideAllLeftsideDialogsforPlayer(lp_intPlayer, true);
    libPEEP_gf_HideAllRightsideDialogsforPlayer(lp_intPlayer, true);
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedMinimap = true;
    libPEEP_gf_MoveBlizzardUItoCinematicforPlayer(lp_intPlayer);
    DialogSetVisible(libPEEP_gv_recUI.lv_dMatchHistoryDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diMatchLogMain, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, (DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diMatchLogMain, lp_intPlayer) + lv_intLogOffsetX), (DialogControlGetOffsetY(libPEEP_gv_recUI.lv_diMatchLogMain, lp_intPlayer) + lv_intLogOffsetY));
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchHistoryButton, PlayerGroupSingle(lp_intPlayer), false);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchHistoryImage, PlayerGroupSingle(lp_intPlayer), false);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogFiltersTitle1, PlayerGroupSingle(lp_intPlayer), false);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogFiltersTitle2, PlayerGroupSingle(lp_intPlayer), false);
    lv_intIndex = 1;
    for ( ; ( (auto4D3967B2_ai >= 0 && lv_intIndex <= auto4D3967B2_ae) || (auto4D3967B2_ai < 0 && lv_intIndex >= auto4D3967B2_ae) ) ; lv_intIndex += auto4D3967B2_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogClassFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
    }
    auto6F60DFB2_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto6F60DFB2_ai >= 0 && lv_intIndex <= auto6F60DFB2_ae) || (auto6F60DFB2_ai < 0 && lv_intIndex >= auto6F60DFB2_ae) ) ; lv_intIndex += auto6F60DFB2_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
    }
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLogs == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dMatchLogDialog, PlayerGroupSingle(lp_intPlayer), true);
    }

    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStats == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupSingle(lp_intPlayer), true);
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStatsBlizzard == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupSingle(lp_intPlayer), true);
        }

    }
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBlizzUI == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, PlayerGroupSingle(lp_intPlayer), true);
    }

}

void libPEEP_gf_ExitCinematicModeforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intLogOffsetX;
    int lv_intBlizzUIOffsetY;
    int lv_intLogOffsetY;
    int lv_intObserverY;
    fixed lv_realFadeTime;

    // Automatic Variable Declarations
    const int auto32AE7661_ae = 9;
    const int auto32AE7661_ai = 1;
    int auto2400BA96_ae;
    const int auto2400BA96_ai = 1;

    // Variable Initialization
    lv_intLogOffsetX = 167;
    lv_intBlizzUIOffsetY = 80;
    lv_intObserverY = 42;
    lv_realFadeTime = 0.5;

    // Implementation
    UISetMode(PlayerGroupSingle(lp_intPlayer), c_uiModeConsole, 0.0);
    DialogControlSendAnimationEvent(libPEEP_gv_recUI.lv_diCinematicModeController, PlayerGroupSingle(lp_intPlayer), "End");
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == true)) {
        libPEEP_gf_MoveBlizzardUItoNormalforPlayer(lp_intPlayer);
        DialogControlSetPosition(libPEEP_gv_recUI.lv_diMatchLogMain, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, (DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diMatchLogMain, lp_intPlayer) + lv_intLogOffsetX), (DialogControlGetOffsetY(libPEEP_gv_recUI.lv_diMatchLogMain, lp_intPlayer) + lv_intLogOffsetY));
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogFiltersTitle1, PlayerGroupSingle(lp_intPlayer), true);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogFiltersTitle2, PlayerGroupSingle(lp_intPlayer), true);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchHistoryButton, PlayerGroupSingle(lp_intPlayer), true);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchHistoryImage, PlayerGroupSingle(lp_intPlayer), true);
        lv_intIndex = 1;
        for ( ; ( (auto32AE7661_ai >= 0 && lv_intIndex <= auto32AE7661_ae) || (auto32AE7661_ai < 0 && lv_intIndex >= auto32AE7661_ae) ) ; lv_intIndex += auto32AE7661_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogClassFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
        auto2400BA96_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto2400BA96_ai >= 0 && lv_intIndex <= auto2400BA96_ae) || (auto2400BA96_ai < 0 && lv_intIndex >= auto2400BA96_ae) ) ; lv_intIndex += auto2400BA96_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
    }

    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged = false;
    libPEEP_gf_ShowNavButtonsforPlayer(lp_intPlayer);
    DialogSetVisible(libPEEP_gv_recUI.lv_dMinimapDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverVisionPulldown, 1), (lv_intObserverY - 5));
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomOut, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomOut, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomOutIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomOutIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomIn, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomIn, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diZoomInIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diZoomInIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diCinematicButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diCinematicButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diCinematicIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diCinematicIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diAutoCamCheckbox, 1), (lv_intObserverY - 8));
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diAutoCamIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diAutoCamIcon, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBlizzButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBlizzButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBlizzIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBlizzIcon, 1), 44);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLogsButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLogsButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLogsIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLogsIcon, 1), 44);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverStatsButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverStatsButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverStatsIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverStatsIcon, 1), 44);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBettingButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBettingButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverBettingIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverBettingIcon, 1), 44);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLeaderboardButton, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLeaderboardButton, 1), lv_intObserverY);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverLeaderboardIcon, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diObserverLeaderboardIcon, 1), 46);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomIn, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomInIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomOut, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diZoomOutIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diCinematicButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diCinematicIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diAutoCamIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBlizzButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBlizzIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLogsButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLogsIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverStatsButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverStatsIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBettingButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverBettingIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLeaderboardButton, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 0.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diObserverLeaderboardIcon, PlayerGroupSingle(lp_intPlayer), lv_realFadeTime, 20.0);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogReplacement, PlayerGroupSingle(lp_intPlayer), true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogCinematic, PlayerGroupSingle(lp_intPlayer), false);
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolFullscreenModeEngaged == false)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dClockReplacement, PlayerGroupSingle(lp_intPlayer), true);
        DialogSetVisible(libPEEP_gv_recUI.lv_dCinematicDialog, PlayerGroupSingle(lp_intPlayer), true);
    }

    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBetting == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lp_intPlayer), true);
    }

    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStats == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupSingle(lp_intPlayer), true);
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStatsBlizzard == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupSingle(lp_intPlayer), true);
        }

    }
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedHelp == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog, PlayerGroupSingle(lp_intPlayer), true);
        DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog2, PlayerGroupSingle(lp_intPlayer), true);
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStore == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStoreDialog, PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSelectItem(libPEEP_gv_recUI.lv_diStoreAislePulldown, PlayerGroupSingle(lp_intPlayer), 1);
        }
        else {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLeaderboard == true)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dLeaderboardDialog, PlayerGroupSingle(lp_intPlayer), true);
            }

        }
    }
}

void libPEEP_gf_TempExitCinematicModeforAllPlayers () {
    // Automatic Variable Declarations
    playergroup autoBA8A740C_g;
    int autoBA8A740C_var;

    // Implementation
    autoBA8A740C_g = PlayerGroupAll();
    autoBA8A740C_var = -1;
    while (true) {
        autoBA8A740C_var = PlayerGroupNextPlayer(autoBA8A740C_g, autoBA8A740C_var);
        if (autoBA8A740C_var < 0) { break; }
        if ((libPEEP_gv_recPlayers[autoBA8A740C_var].lv_boolCinematicModeEngaged == true)) {
            libPEEP_gf_ExitCinematicModeforPlayer(autoBA8A740C_var);
        }

    }
}

void libPEEP_gf_EnterMovieModeforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.1, c_timeGame);
    DialogSetVisible(libPEEP_gv_recUI.lv_dDashboardDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dRevealCountdownDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingLauncher, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatLogDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dNamePanel2Dialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogReplacement, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogCinematic, PlayerGroupSingle(lp_intPlayer), true);
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dCinematicDialog, PlayerGroupSingle(lp_intPlayer), false);
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dClockReplacement, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dObserverDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dMinimapDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lp_intPlayer), false);
    libPEEP_gf_HideResearchDialogsforPlayer(lp_intPlayer);
    libPEEP_gf_HideAllLeftsideDialogsforPlayer(lp_intPlayer, true);
    libPEEP_gf_HideAllCenterDialogsforPlayer(lp_intPlayer);
    libPEEP_gf_HideAllRightsideDialogsforPlayer(lp_intPlayer, true);
    libPEEP_gf_HideNavButtonsforPlayer(lp_intPlayer);
    libPEEP_gf_HideFairMessageLogButtonforPlayer(lp_intPlayer);
}

void libPEEP_gf_TempEnterCinematicModeforAllPlayers () {
    // Automatic Variable Declarations
    playergroup auto1B3B3439_g;
    int auto1B3B3439_var;

    // Implementation
    auto1B3B3439_g = PlayerGroupAll();
    auto1B3B3439_var = -1;
    while (true) {
        auto1B3B3439_var = PlayerGroupNextPlayer(auto1B3B3439_g, auto1B3B3439_var);
        if (auto1B3B3439_var < 0) { break; }
        if ((libPEEP_gv_recPlayers[auto1B3B3439_var].lv_boolCinematicModeEngaged == false)) {
            libPEEP_gf_EnterCinematicModeforPlayer(auto1B3B3439_var);
        }

    }
}

void libPEEP_gf_ExitMovieModeforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dObserverDialog, PlayerGroupSingle(lp_intPlayer), true);
    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, lp_intPlayer) == false)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dNamePanel2Dialog, PlayerGroupSingle(lp_intPlayer), true);
    }

    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lp_intPlayer), false);
    }

    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false)) {
        libPEEP_gf_ExitCinematicModeforPlayer(lp_intPlayer);
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedMinimap == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dMinimapDialog, PlayerGroupSingle(lp_intPlayer), true);
        }

        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStats == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupSingle(lp_intPlayer), true);
        }
        else {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStatsBlizzard == true)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupSingle(lp_intPlayer), true);
            }

        }
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBlizzUI == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, PlayerGroupSingle(lp_intPlayer), true);
        }

    }
    libPEEP_gf_ShowHidePeepModeUIforPlayer(lp_intPlayer);
}

void libPEEP_gf_HideAllLeftsideDialogsforPlayer (int lp_intPlayer, bool lp_boolRememberState) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dAvatarDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dCancelTeamDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsPersonalDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dMatchLogDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dMatchHistoryDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dInventoryDialog, PlayerGroupSingle(lp_intPlayer), false);
    if ((lp_boolRememberState == false)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedOptions = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLogs = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedBlizzUI = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedTeams = false;
    }

}

void libPEEP_gf_HideAllLeftsideDialogsExceptBlizzandLog (int lp_intPlayer, bool lp_boolRememberState) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dAvatarDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsPersonalDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dInventoryDialog, PlayerGroupSingle(lp_intPlayer), false);
    if ((lp_boolRememberState == false)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedOptions = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedTeams = false;
    }

}

void libPEEP_gf_HideAllRightsideDialogsforPlayer (int lp_intPlayer, bool lp_boolRememberState) {
    // Variable Declarations
    int lv_intAisle;

    // Automatic Variable Declarations
    int auto2E649840_ae;
    const int auto2E649840_ai = 1;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dLeaderboardDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog2, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dStoreDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, PlayerGroupSingle(lp_intPlayer), false);
    auto2E649840_ae = libPEEP_gv_recGlobals.lv_intNumStoreAisles;
    lv_intAisle = 1;
    for ( ; ( (auto2E649840_ai >= 0 && lv_intAisle <= auto2E649840_ae) || (auto2E649840_ai < 0 && lv_intAisle >= auto2E649840_ae) ) ; lv_intAisle += auto2E649840_ai ) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], PlayerGroupSingle(lp_intPlayer), false);
    }
    if ((lp_boolRememberState == false)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLeaderboard = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStats = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStatsBlizzard = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStore = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedHelp = false;
    }

}

void libPEEP_gf_HideAllRightsideDialogsExceptResourcePanels (int lp_intPlayer, bool lp_boolRememberState) {
    // Variable Declarations
    int lv_intAisle;

    // Automatic Variable Declarations
    int auto5F1DF002_ae;
    const int auto5F1DF002_ai = 1;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dLeaderboardDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog2, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dStoreDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, PlayerGroupSingle(lp_intPlayer), false);
    auto5F1DF002_ae = libPEEP_gv_recGlobals.lv_intNumStoreAisles;
    lv_intAisle = 1;
    for ( ; ( (auto5F1DF002_ai >= 0 && lv_intAisle <= auto5F1DF002_ae) || (auto5F1DF002_ai < 0 && lv_intAisle >= auto5F1DF002_ae) ) ; lv_intAisle += auto5F1DF002_ai ) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], PlayerGroupSingle(lp_intPlayer), false);
    }
    if ((lp_boolRememberState == false)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedLeaderboard = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedStore = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogDisplayedHelp = false;
    }

}

void libPEEP_gf_HideAllCenterDialogsforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatLogDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lp_intPlayer), false);
    libPEEP_gf_HideResearchDialogsforPlayer(lp_intPlayer);
    libPEEP_gf_HideStructureDialogsforPlayer(lp_intPlayer);
}

void libPEEP_gf_EnterFullscreenModeforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_dDialog;

    // Automatic Variable Declarations
    int auto237E2F49_ae;
    const int auto237E2F49_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolFullscreenModeEngaged == false)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolFullscreenModeEngaged = true;
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false)) {
            libPEEP_gf_HideNavButtonsforPlayer(lp_intPlayer);
        }

        auto237E2F49_ae = libPEEP_gv_recUI.lv_intDialogListCount;
        lv_intIndex = 1;
        for ( ; ( (auto237E2F49_ai >= 0 && lv_intIndex <= auto237E2F49_ae) || (auto237E2F49_ai < 0 && lv_intIndex >= auto237E2F49_ae) ) ; lv_intIndex += auto237E2F49_ai ) {
            if ((libPEEP_gv_recUI.lv_dDialogList[lv_intIndex] != c_invalidDialogId)) {
                lv_dDialog = libPEEP_gv_recUI.lv_dDialogList[lv_intIndex];
                libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogVisibilityList[lv_intIndex] = DialogIsVisible(lv_dDialog, lp_intPlayer);
                DialogSetVisible(lv_dDialog, PlayerGroupSingle(lp_intPlayer), false);
            }

        }
    }

}

void libPEEP_gf_ExitFullscreenModeforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_dDialog;

    // Automatic Variable Declarations
    int auto827D610A_ae;
    const int auto827D610A_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolFullscreenModeEngaged == true)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolFullscreenModeEngaged = false;
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false)) {
            libPEEP_gf_ShowNavButtonsforPlayer(lp_intPlayer);
        }

        auto827D610A_ae = libPEEP_gv_recUI.lv_intDialogListCount;
        lv_intIndex = 1;
        for ( ; ( (auto827D610A_ai >= 0 && lv_intIndex <= auto827D610A_ae) || (auto827D610A_ai < 0 && lv_intIndex >= auto827D610A_ae) ) ; lv_intIndex += auto827D610A_ai ) {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolDialogVisibilityList[lv_intIndex] == true)) {
                lv_dDialog = libPEEP_gv_recUI.lv_dDialogList[lv_intIndex];
                DialogSetVisible(lv_dDialog, PlayerGroupSingle(lp_intPlayer), true);
            }

        }
    }

    if ((libPEEP_gv_recGameState.lv_intCurrentGameState != 1)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dDashboardDialog, PlayerGroupSingle(lp_intPlayer), false);
    }

}

void libPEEP_gf_TogglePeepModeUIforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPeepModeControlsHidden == true)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPeepModeControlsHidden = false;
    }
    else {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPeepModeControlsHidden = true;
    }
    libPEEP_gf_ShowHidePeepModeUIforPlayer(lp_intPlayer);
}

void libPEEP_gf_ShowHidePeepModeUIforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intButtonNum;

    // Automatic Variable Declarations
    int auto3F02607E_ae;
    const int auto3F02607E_ai = 1;
    int auto43F508E1_ae;
    const int auto43F508E1_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPeepModeControlsHidden == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dObserverDialog, PlayerGroupSingle(lp_intPlayer), false);
        auto43F508E1_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS;
        lv_intButtonNum = 1;
        for ( ; ( (auto43F508E1_ai >= 0 && lv_intButtonNum <= auto43F508E1_ae) || (auto43F508E1_ai < 0 && lv_intButtonNum >= auto43F508E1_ae) ) ; lv_intButtonNum += auto43F508E1_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_recNavButtons[lv_intButtonNum].lv_diButton, PlayerGroupSingle(lp_intPlayer), false);
        }
        libPEEP_gf_MoveBlizzardUItoFullscreenforPlayer(lp_intPlayer);
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dObserverDialog, PlayerGroupSingle(lp_intPlayer), true);
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false)) {
            auto3F02607E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS;
            lv_intButtonNum = 1;
            for ( ; ( (auto3F02607E_ai >= 0 && lv_intButtonNum <= auto3F02607E_ae) || (auto3F02607E_ai < 0 && lv_intButtonNum >= auto3F02607E_ae) ) ; lv_intButtonNum += auto3F02607E_ai ) {
                DialogControlSetVisible(libPEEP_gv_recUI.lv_recNavButtons[lv_intButtonNum].lv_diButton, PlayerGroupSingle(lp_intPlayer), true);
            }
            libPEEP_gf_MoveBlizzardUItoNormalforPlayer(lp_intPlayer);
        }
        else {
            libPEEP_gf_MoveBlizzardUItoCinematicforPlayer(lp_intPlayer);
        }
    }
}

void libPEEP_gf_ActorShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}

void libPEEP_gf_ShowAllStructureActorsfromPlayertoPlayer (int lp_intPlayerFrom, int lp_intPlayerTo) {
    // Automatic Variable Declarations
    unitgroup autoCFC2BF07_g;
    int autoCFC2BF07_u;
    unit autoCFC2BF07_var;

    // Implementation
    autoCFC2BF07_g = UnitGroup(null, lp_intPlayerFrom, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCFC2BF07_u = UnitGroupCount(autoCFC2BF07_g, c_unitCountAll);
    for (;; autoCFC2BF07_u -= 1) {
        autoCFC2BF07_var = UnitGroupUnitFromEnd(autoCFC2BF07_g, autoCFC2BF07_u);
        if (autoCFC2BF07_var == null) { break; }
        libPEEP_gf_ActorShowHideActorForPlayerGroup(PlayerGroupSingle(lp_intPlayerTo), libNtve_gf_MainActorofUnit(autoCFC2BF07_var), true);
    }
}

void libPEEP_gf_SyncapplyVisionStructureActorsfromPlayertoPlayer (int lp_intPlayerFrom, int lp_intPlayerTo) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoFBD7038D_ae;
    const int autoFBD7038D_ai = 1;
    unitgroup autoD41724D9_g;
    int autoD41724D9_u;
    unit autoD41724D9_var;

    // Variable Initialization

    // Implementation
    autoFBD7038D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoFBD7038D_ai >= 0 && lv_intPlayer <= autoFBD7038D_ae) || (autoFBD7038D_ai < 0 && lv_intPlayer >= autoFBD7038D_ae) ) ; lv_intPlayer += autoFBD7038D_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (lv_intPlayer != lp_intPlayerFrom) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam != libPEEP_gv_recPlayers[lp_intPlayerFrom].lv_intCurrentTeam))) {
            autoD41724D9_g = UnitGroup(null, lv_intPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD41724D9_u = UnitGroupCount(autoD41724D9_g, c_unitCountAll);
            for (;; autoD41724D9_u -= 1) {
                autoD41724D9_var = UnitGroupUnitFromEnd(autoD41724D9_g, autoD41724D9_u);
                if (autoD41724D9_var == null) { break; }
                if ((UnitHasBehavior(autoD41724D9_var, "EnemyVision") == false)) {
                    libPEEP_gf_ActorShowHideActorForPlayerGroup(PlayerGroupSingle(lp_intPlayerTo), libNtve_gf_MainActorofUnit(autoD41724D9_var), false);
                }

            }
        }

    }
}

void libPEEP_gf_CreateHelpDialog () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoBD692AC2_ae;
    const int autoBD692AC2_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(700, 800, c_anchorTopRight, 0, 0, true);
    libPEEP_gv_recUI.lv_dHelpDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dHelpDialog, 500, 50, c_anchorTop, 0, 30, StringExternal("Param/Value/lib_PEEP_806B330A"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dHelpDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diHelpDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXHelpDialog, c_playerAny, libPEEP_gv_recUI.lv_diHelpDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dHelpDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dHelpDialog, 100, 50, c_anchorTopLeft, 200, 95, StringExternal("Param/Value/lib_PEEP_23DDB2CE"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    DialogControlCreate(libPEEP_gv_recUI.lv_dHelpDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diHelpPulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownSection, c_playerAny, libPEEP_gv_recUI.lv_diHelpPulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diHelpPulldown, PlayerGroupAll(), c_anchorTopLeft, 280, 80);
    autoBD692AC2_ae = libPEEP_gv_recGlobals.lv_intNumHelpTopics;
    lv_intIndex = 1;
    for ( ; ( (autoBD692AC2_ai >= 0 && lv_intIndex <= autoBD692AC2_ae) || (autoBD692AC2_ai < 0 && lv_intIndex >= autoBD692AC2_ae) ) ; lv_intIndex += autoBD692AC2_ai ) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diHelpPulldown, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intIndex].lv_txtTitle);
    }
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diHelpPulldown, PlayerGroupAll(), 1);
    DialogCreate(560, 510, c_anchorCenter, 0, 0, true);
    libPEEP_gv_recUI.lv_dHelpDialog2 = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetPositionRelative(libPEEP_gv_recUI.lv_dHelpDialog2, c_anchorTopLeft, libPEEP_gv_recUI.lv_dHelpDialog, c_anchorTopLeft, 80, 150);
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dHelpDialog2, false);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 560, 4000);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, -25);
    libPEEP_gv_recUI.lv_diHelpLabel = DialogControlLastCreated();
    DialogControlCreate(libPEEP_gv_recUI.lv_dHelpDialog, c_triggerControlTypeSlider);
    libPEEP_gv_recUI.lv_diHelpSlider = DialogControlLastCreated();
    DialogControlSetSize(libPEEP_gv_recUI.lv_diHelpSlider, PlayerGroupAll(), 400, 50);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diHelpSlider, PlayerGroupAll(), c_anchorBottom, 0, 50);
    libNtve_gf_SetDialogItemMaximumValue(libPEEP_gv_recUI.lv_diHelpSlider, 500.0, PlayerGroupAll());
}

void libPEEP_gf_SkipTutorialforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_intNumSkipped;

    // Automatic Variable Declarations
    int auto75DC799D_ae;
    const int auto75DC799D_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSkipTutorial = true;
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTutorialSkipButton, PlayerGroupSingle(lp_intPlayer), false);
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTutorialSkipButton, StringExternal("Param/Value/lib_PEEP_2244CA98"), PlayerGroupSingle(lp_intPlayer));
    auto75DC799D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto75DC799D_ai >= 0 && lv_intTmpPlayer <= auto75DC799D_ae) || (auto75DC799D_ai < 0 && lv_intTmpPlayer >= auto75DC799D_ae) ) ; lv_intTmpPlayer += auto75DC799D_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == true) || (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == true) || (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolSkipTutorial == true))) {
            lv_intNumSkipped += 1;
        }

    }
    if ((lv_intNumSkipped == libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS)) {
        TimerStart(libPEEP_gv_recGlobals.lv_timerTutorial, 1.0, false, c_timeGame);
    }

}

void libPEEP_gf_StartInitScreen () {
    // Automatic Variable Declarations
    // Implementation
    GameSetSpeedValue(c_gameSpeedNormal);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    DialogCreate(4000, 3000, c_anchorCenter, 0, 0, true);
    libPEEP_gv_recUI.lv_dInitDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetTransparency(DialogLastCreated(), 0.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 200, c_anchorCenter, 0, -160, (StringExternal("Param/Value/lib_PEEP_9B7D35F9") + TextWithColor(StringExternal("Param/Value/lib_PEEP_EA610F2C"), Color(33.33, 31.37, 16.86))), ColorWithAlpha(0,0,0,0), true, 1.0);
    libPEEP_gv_recUI.lv_diInitLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorCenter, 0, -400, StringExternal("Param/Value/lib_PEEP_3EED695B"), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diTutorialTitle = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 700, 700, c_anchorCenter, 0, 30, StringToText(""), Color(100,100,100), true, 2.0);
    libPEEP_gv_recUI.lv_diTutorialLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorCenter, 0, -10, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diTutorialCooldownLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 400, 50, c_anchorCenter, 0, 65, StringToText(""), StringExternal("Param/Value/lib_PEEP_A307B2B1"), "");
    libPEEP_gv_recUI.lv_diTutorialSkipButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonSkipTutorial, c_playerAny, libPEEP_gv_recUI.lv_diTutorialSkipButton, c_triggerControlEventTypeClick);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
}

void libPEEP_gf_StartTutorial () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoD515DF43_ae;
    const int autoD515DF43_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gf_KickUnregisteredPlayers();
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diInitLabel, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diTutorialTitle, PlayerGroupAll(), true);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialTitle, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialTitle, PlayerGroupAll(), 3.0, 0.0);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diTutorialLabel, PlayerGroupAll(), true);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialLabel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialLabel, PlayerGroupAll(), 3.0, 0.0);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diTutorialCooldownLabel, PlayerGroupAll(), true);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialCooldownLabel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialCooldownLabel, PlayerGroupAll(), 3.0, 0.0);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diTutorialSkipButton, PlayerGroupAll(), true);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialSkipButton, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTutorialSkipButton, PlayerGroupAll(), 5.0, 0.0);
    autoD515DF43_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoD515DF43_ai >= 0 && lv_intPlayer <= autoD515DF43_ae) || (autoD515DF43_ai < 0 && lv_intPlayer >= autoD515DF43_ae) ) ; lv_intPlayer += autoD515DF43_ai ) {
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTutorialLabel, StringExternal("Param/Value/lib_PEEP_97FE6A2F"), PlayerGroupSingle(lv_intPlayer));
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankGamesJoined > 1)) {
            libPEEP_gf_SkipTutorialforPlayer(lv_intPlayer);
        }

    }
    TimerStart(libPEEP_gv_recGlobals.lv_timerTutorial, 16.0, false, c_timeGame);
}

void libPEEP_gf_EndInitScreen () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dInitDialog, PlayerGroupAll(), false);
}

void libPEEP_gf_TurnKeyboradShurtkeyson () {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(libPEEP_gt_KeyShiftAltUUnits, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltTStructures, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltSSpending, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltRResources, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltMAPM, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltLUnitsLost, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltIIncome, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltGUpgrades, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltEEPM, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltDProduction, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltCEPMaswell, true);
    TriggerEnable(libPEEP_gt_KeyShiftAltAActiveForces, true);
    TriggerEnable(libPEEP_gt_KeyF9, true);
    TriggerEnable(libPEEP_gt_KeyF8, true);
    TriggerEnable(libPEEP_gt_KeyF12, true);
    TriggerEnable(libPEEP_gt_KeyF11, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftYDefaultAngle, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftUZoomOut, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftOZoomIn, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftLYawRight, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftKPitchDown, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftJYawLeft, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftIPitchUp, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShiftHDefaultView, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShift5AutoCamStyle5, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShift4AutoCamStyle4, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShift3AutoCamStyle3, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShift2AutoCamStyle2, true);
    TriggerEnable(libPEEP_gt_KeyCtrlShift1AutoCamStyle1, true);
    TriggerEnable(libPEEP_gt_KeyCtrlKKickaPlayer, true);
    TriggerEnable(libPEEP_gt_KeyCtrlF9, true);
    TriggerEnable(libPEEP_gt_KeyCtrlAltNCustomizeNamePanel, true);
    TriggerEnable(libPEEP_gt_KeyCtrlAltEHidePeepModeUI, true);
    TriggerEnable(libPEEP_gt_KeyAltZZoomOut, true);
    TriggerEnable(libPEEP_gt_KeyAltYStructuresPanel, true);
    TriggerEnable(libPEEP_gt_KeyAltXZoomIn, true);
    TriggerEnable(libPEEP_gt_KeyAltWAutoCam, true);
    TriggerEnable(libPEEP_gt_KeyAltVAPM, true);
    TriggerEnable(libPEEP_gt_KeyAltUResearchPanel, true);
    TriggerEnable(libPEEP_gt_KeyAltSResourcePanel, true);
    TriggerEnable(libPEEP_gt_KeyAltRUnitsKilled, true);
    TriggerEnable(libPEEP_gt_KeyAltQQuickPanel, true);
    TriggerEnable(libPEEP_gt_KeyAltPPen, true);
    TriggerEnable(libPEEP_gt_KeyAltOErasePen, true);
    TriggerEnable(libPEEP_gt_KeyAltNNamePanel, true);
    TriggerEnable(libPEEP_gt_KeyAltMAdvancedResourcePanel, true);
    TriggerEnable(libPEEP_gt_KeyAltLLeaderboard, true);
    TriggerEnable(libPEEP_gt_KeyAltKMapOverlay, true);
    TriggerEnable(libPEEP_gt_KeyAltJMapAnalysis, true);
    TriggerEnable(libPEEP_gt_KeyAltIResources, true);
    TriggerEnable(libPEEP_gt_KeyAltHLogs, true);
    TriggerEnable(libPEEP_gt_KeyAltEFullscreenMode, true);
    TriggerEnable(libPEEP_gt_KeyAltDBlizzardUI, true);
    TriggerEnable(libPEEP_gt_KeyAltCCinematicMode, true);
    TriggerEnable(libPEEP_gt_KeyAltBBetting, true);
    TriggerEnable(libPEEP_gt_KeyAltASupply, true);
    TriggerEnable(libPEEP_gt_KeyAlt9ObserveItem9, true);
    TriggerEnable(libPEEP_gt_KeyAlt8ObserveItem8, true);
    TriggerEnable(libPEEP_gt_KeyAlt7ObserveItem7, true);
    TriggerEnable(libPEEP_gt_KeyAlt6ObserveItem6, true);
    TriggerEnable(libPEEP_gt_KeyAlt5ObserveItem5, true);
    TriggerEnable(libPEEP_gt_KeyAlt4ObserveItem4, true);
    TriggerEnable(libPEEP_gt_KeyAlt3ObserveItem3, true);
    TriggerEnable(libPEEP_gt_KeyAlt2ObserveItem2, true);
    TriggerEnable(libPEEP_gt_KeyAlt1ObserveItem1, true);
    TriggerEnable(libPEEP_gt_KeyAlt0ObserveEveryone, true);
    TriggerEnable(libPEEP_gt_DebugSequenceStep1, true);
    TriggerEnable(libPEEP_gt_DebugSequenceStep2, true);
    TriggerEnable(libPEEP_gt_DebugSequenceStep3, true);
    TriggerEnable(libPEEP_gt_DebugSequenceStep4, true);
}

void libPEEP_gf_OpenBlizzUIPanelforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, PlayerGroupSingle(lp_intPlayer), true);
}

void libPEEP_gf_CreateLeaderboard () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intX;
    int lv_intY;
    int lv_intXGap;
    int lv_intYGap;
    int lv_intPlayerNameWidth;
    text[7] lv_txtColumnNames;
    string[7] lv_imageColumnIcons;
    int lv_intCellWidth;
    int lv_intCellHeight;
    int lv_intButtonHeight;
    int lv_intCol;
    int lv_intTmpWidth;
    int lv_intXOffset;
    int lv_intYOffset;

    // Automatic Variable Declarations
    const int auto2FE31B51_ae = 6;
    const int auto2FE31B51_ai = 1;
    const int auto6C217E32_ae = 14;
    const int auto6C217E32_ai = 1;
    const int autoC4D5BB1A_ae = 6;
    const int autoC4D5BB1A_ai = 1;

    // Variable Initialization
    lv_intPlayerNameWidth = 160;
    lv_intCellWidth = 70;
    lv_intCellHeight = 34;
    lv_intButtonHeight = 46;

    // Implementation
    lv_txtColumnNames[2] = StringExternal("Param/Value/lib_PEEP_63D488FD");
    lv_imageColumnIcons[2] = "Assets\\Textures\\peepmode_logo_medium.dds";
    lv_txtColumnNames[3] = StringExternal("Param/Value/lib_PEEP_CE7D9E23");
    lv_imageColumnIcons[3] = "Assets\\Textures\\league_master.dds";
    lv_txtColumnNames[4] = StringExternal("Param/Value/lib_PEEP_33BB197F");
    lv_imageColumnIcons[4] = "Assets\\Textures\\icon-supply.dds";
    lv_txtColumnNames[5] = StringExternal("Param/Value/lib_PEEP_63F9BA28");
    lv_imageColumnIcons[5] = "Assets\\Textures\\crown.dds";
    lv_txtColumnNames[6] = StringExternal("Param/Value/lib_PEEP_169424EE");
    lv_imageColumnIcons[6] = "Assets\\Textures\\chip.dds";
    DialogCreate(600, 700, c_anchorTopRight, 0, 0, true);
    libPEEP_gv_recUI.lv_dLeaderboardDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 58), (DialogGetHeight(DialogLastCreated()) - 58), c_anchorTopLeft, 29, 29, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diLeaderboardBackground1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 58), (DialogGetHeight(DialogLastCreated()) - 58), c_anchorTopRight, 29, 29, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diLeaderboardBackgroun2 = DialogControlLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 70);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 50, 28);
    libPEEP_gv_recUI.lv_diLeaderboardTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diLeaderboardTitle, "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dLeaderboardDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diLeaderboardDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXLeaderboard, c_playerAny, libPEEP_gv_recUI.lv_diLeaderboardDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLeaderboardDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 24, 24, c_anchorTopLeft, 46, 45, StringExternal("Param/Value/lib_PEEP_73A9F273"), "Assets\\Textures\\icon-time-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 76, 47);
    libPEEP_gv_recUI.lv_diGameClock = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 24, 24, c_anchorTopLeft, 46, 75, StringExternal("Param/Value/lib_PEEP_B52A74D2"), "Assets\\Textures\\chip.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 76, 77);
    libPEEP_gv_recUI.lv_diGameTotalChips = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 24, 24, c_anchorTopLeft, 46, 105, StringExternal("Param/Value/lib_PEEP_B24F4275"), "Assets\\Textures\\crown.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 76, 109);
    libPEEP_gv_recUI.lv_diGameTotalWins = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    lv_intX = (lv_intXGap + 40 + lv_intPlayerNameWidth);
    lv_intY = (lv_intYGap + 95);
    lv_intCol = 2;
    for ( ; ( (auto2FE31B51_ai >= 0 && lv_intCol <= auto2FE31B51_ae) || (auto2FE31B51_ai < 0 && lv_intCol >= auto2FE31B51_ae) ) ; lv_intCol += auto2FE31B51_ai ) {
        libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dLeaderboardDialog, lv_intButtonHeight, lv_intButtonHeight, c_anchorTopLeft, lv_intX, lv_intY, lv_txtColumnNames[lv_intCol], StringToText(""), "");
        libPEEP_gv_recUI.lv_diLeaderboardSortButtons[lv_intCol] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_ButtonsLeaderboardSort, c_playerAny, libPEEP_gv_recUI.lv_diLeaderboardSortButtons[lv_intCol], c_triggerControlEventTypeClick);
        if (((lv_intCol == 1) || (lv_intCol == 5))) {
            libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLeaderboardDialog, 32, 30, c_anchorTopLeft, (lv_intX + 8), (lv_intY + 7), StringToText(""), lv_imageColumnIcons[lv_intCol], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
            libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLeaderboardDialog, 32, 32, c_anchorTopLeft, (lv_intX + 7), (lv_intY + 7), StringToText(""), lv_imageColumnIcons[lv_intCol], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        lv_intX = (lv_intX + lv_intCellWidth + lv_intXGap);
    }
    lv_intY = (lv_intY + lv_intCellHeight + lv_intYGap + 20);
    lv_intPlayer = 1;
    for ( ; ( (auto6C217E32_ai >= 0 && lv_intPlayer <= auto6C217E32_ae) || (auto6C217E32_ai < 0 && lv_intPlayer >= auto6C217E32_ae) ) ; lv_intPlayer += auto6C217E32_ai ) {
        lv_intX = (lv_intXGap + 40);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intPlayerNameWidth, lv_intCellHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, (lv_intY + 5));
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
        libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intPlayer][1] = DialogControlLastCreated();
        lv_intX = (lv_intX + lv_intPlayerNameWidth + lv_intXGap);
        lv_intTmpWidth = lv_intCellWidth;
        lv_intXOffset = 0;
        lv_intCol = 2;
        for ( ; ( (autoC4D5BB1A_ai >= 0 && lv_intCol <= autoC4D5BB1A_ae) || (autoC4D5BB1A_ai < 0 && lv_intCol >= autoC4D5BB1A_ae) ) ; lv_intCol += autoC4D5BB1A_ai ) {
            lv_intYOffset = 0;
            if ((lv_intCol == 2)) {
                lv_intTmpWidth = 70;
                lv_intXOffset = -10;
                lv_intYOffset = 5;
            }
            else if ((lv_intCol == 3)) {
                lv_intXOffset = 2;
            }
            else if ((lv_intCol == 5)) {
                lv_intXOffset = 9;
            }
            else if ((lv_intCol == 6)) {
                lv_intTmpWidth = 120;
                lv_intXOffset = -9;
            }
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intTmpWidth, lv_intCellHeight);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX + lv_intXOffset + 7), (lv_intY + lv_intYOffset));
            libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intPlayer][lv_intCol] = DialogControlLastCreated();
            if ((lv_intCol >= 5)) {
                libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intPlayer][lv_intCol], "CreditsPanelLabel", PlayerGroupAll());
            }

            lv_intX = (lv_intX + lv_intCellWidth + lv_intXGap);
        }
        lv_intY = (lv_intY + lv_intCellHeight + lv_intYGap);
    }
}

void libPEEP_gf_RefreshLeaderboardforAllPlayers () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto78A6A1F9_ae;
    const int auto78A6A1F9_ai = 1;

    // Variable Initialization

    // Implementation
    auto78A6A1F9_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto78A6A1F9_ai >= 0 && lv_intPlayer <= auto78A6A1F9_ae) || (auto78A6A1F9_ai < 0 && lv_intPlayer >= auto78A6A1F9_ae) ) ; lv_intPlayer += auto78A6A1F9_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false)) {
            libPEEP_gf_RefreshLeaderboardforPlayer(lv_intPlayer, libPEEP_gv_recPlayers[lv_intPlayer].lv_intRankSortCol, false);
        }

    }
}

void libPEEP_gf_RefreshLeaderboardforPlayer (int lp_intPlayer, int lp_intSortColumn, bool lp_boolSortAsc) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_intTmp;
    int lv_intNumActivePlayers;
    int lv_intIndex;
    bool lv_boolSwapTookPlace;
    int[18][libPEEP_gv_rACES_COUNT + 1] lv_intLocalRankData;
    text lv_txtText;
    text lv_txtTmp;
    text lv_txtPlayerProfile;
    text lv_txtTitle;
    int lv_intTotalChips;
    int lv_intTotalWins;
    text lv_txtChips;
    text lv_txtTotalWins;

    // Automatic Variable Declarations
    int auto9AC40BB1_ae;
    const int auto9AC40BB1_ai = 1;
    int autoD5B437A8_ae;
    const int autoD5B437A8_ai = 1;
    const int autoFB3FB413_ae = 6;
    const int autoFB3FB413_ai = 1;
    int auto1B13D8B3_ae;
    const int auto1B13D8B3_ai = 1;
    const int auto42F613A5_ae = 6;
    const int auto42F613A5_ai = 1;
    const int auto67B6EF14_ae = 14;
    const int auto67B6EF14_ai = 1;
    const int autoB0337FDE_ae = 6;
    const int autoB0337FDE_ai = 1;

    // Variable Initialization
    lv_boolSwapTookPlace = true;

    // Implementation
    auto9AC40BB1_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto9AC40BB1_ai >= 0 && lv_intTmpPlayer <= auto9AC40BB1_ae) || (auto9AC40BB1_ai < 0 && lv_intTmpPlayer >= auto9AC40BB1_ae) ) ; lv_intTmpPlayer += auto9AC40BB1_ai ) {
        lv_intTotalWins += libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intWins;
        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false)) {
            lv_intNumActivePlayers += 1;
            lv_intTotalChips += libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intChips;
            lv_intLocalRankData[lv_intNumActivePlayers][1] = lv_intTmpPlayer;
            lv_intLocalRankData[lv_intNumActivePlayers][2] = FixedToInt(libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_realBankSonasRating);
            lv_intLocalRankData[lv_intNumActivePlayers][3] = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intBankLeague;
            lv_intLocalRankData[lv_intNumActivePlayers][4] = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intBankRace;
            lv_intLocalRankData[lv_intNumActivePlayers][5] = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intWins;
            lv_intLocalRankData[lv_intNumActivePlayers][6] = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intChips;
        }

    }
    lv_txtChips = (TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intTotalChips), libPEEP_gv_recGlobals.lv_coChipsColor));
    lv_txtTotalWins = (TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intTotalWins), (Color(100,100,100))));
    lv_txtTitle = (libPEEP_gf_formatIntegerAsText(lv_intNumActivePlayers) + StringExternal("Param/Value/lib_PEEP_F018F9D5"));
    if ((lv_intNumActivePlayers != 1)) {
        lv_txtTitle = (lv_txtTitle + StringExternal("Param/Value/lib_PEEP_B48A77A3"));
    }

    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardTitle, lv_txtTitle, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diGameTotalChips, lv_txtChips, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diGameTotalWins, lv_txtTotalWins, PlayerGroupAll());
    autoD5B437A8_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = (lv_intNumActivePlayers + 1);
    for ( ; ( (autoD5B437A8_ai >= 0 && lv_intTmpPlayer <= autoD5B437A8_ae) || (autoD5B437A8_ai < 0 && lv_intTmpPlayer >= autoD5B437A8_ae) ) ; lv_intTmpPlayer += autoD5B437A8_ai ) {
        lv_intIndex = 1;
        for ( ; ( (autoFB3FB413_ai >= 0 && lv_intIndex <= autoFB3FB413_ae) || (autoFB3FB413_ai < 0 && lv_intIndex >= autoFB3FB413_ae) ) ; lv_intIndex += autoFB3FB413_ai ) {
            lv_intLocalRankData[lv_intTmpPlayer][lv_intIndex] = 0;
        }
    }
    while ((lv_boolSwapTookPlace == true)) {
        lv_boolSwapTookPlace = false;
        auto1B13D8B3_ae = lv_intNumActivePlayers;
        lv_intTmpPlayer = 1;
        for ( ; ( (auto1B13D8B3_ai >= 0 && lv_intTmpPlayer <= auto1B13D8B3_ae) || (auto1B13D8B3_ai < 0 && lv_intTmpPlayer >= auto1B13D8B3_ae) ) ; lv_intTmpPlayer += auto1B13D8B3_ai ) {
            if ((((lv_intTmpPlayer + 1) <= lv_intNumActivePlayers) && (lv_intLocalRankData[lv_intTmpPlayer][lp_intSortColumn] < lv_intLocalRankData[(lv_intTmpPlayer + 1)][lp_intSortColumn]))) {
                lv_boolSwapTookPlace = true;
                lv_intIndex = 1;
                for ( ; ( (auto42F613A5_ai >= 0 && lv_intIndex <= auto42F613A5_ae) || (auto42F613A5_ai < 0 && lv_intIndex >= auto42F613A5_ae) ) ; lv_intIndex += auto42F613A5_ai ) {
                    lv_intTmp = lv_intLocalRankData[lv_intTmpPlayer][lv_intIndex];
                    lv_intLocalRankData[lv_intTmpPlayer][lv_intIndex] = lv_intLocalRankData[(lv_intTmpPlayer + 1)][lv_intIndex];
                    lv_intLocalRankData[(lv_intTmpPlayer + 1)][lv_intIndex] = lv_intTmp;
                }
            }

        }
    }
    DialogSetSize(libPEEP_gv_recUI.lv_dLeaderboardDialog, DialogGetWidth(libPEEP_gv_recUI.lv_dLeaderboardDialog), (185 + (lv_intNumActivePlayers * 35)));
    DialogControlSetSize(libPEEP_gv_recUI.lv_diLeaderboardBackground1, PlayerGroupAll(), (DialogGetWidth(libPEEP_gv_recUI.lv_dLeaderboardDialog) - 60), (DialogGetHeight(libPEEP_gv_recUI.lv_dLeaderboardDialog) - 60));
    DialogControlSetSize(libPEEP_gv_recUI.lv_diLeaderboardBackgroun2, PlayerGroupAll(), (DialogGetWidth(libPEEP_gv_recUI.lv_dLeaderboardDialog) - 60), (DialogGetHeight(libPEEP_gv_recUI.lv_dLeaderboardDialog) - 60));
    lv_intTmpPlayer = 1;
    for ( ; ( (auto67B6EF14_ai >= 0 && lv_intTmpPlayer <= auto67B6EF14_ae) || (auto67B6EF14_ai < 0 && lv_intTmpPlayer >= auto67B6EF14_ae) ) ; lv_intTmpPlayer += auto67B6EF14_ai ) {
        if ((lv_intLocalRankData[lv_intTmpPlayer][1] > 0)) {
            lv_txtPlayerProfile = libPEEP_gf_makePlayerProfileText(lv_intLocalRankData[lv_intTmpPlayer][1]);
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][1], TextWithColor(PlayerName(lv_intLocalRankData[lv_intTmpPlayer][1]), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intLocalRankData[lv_intTmpPlayer][1], false))), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][1], lv_txtPlayerProfile, PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][2], (StringExternal("Param/Value/lib_PEEP_912A6B18") + TextWithColor(IntToText(lv_intLocalRankData[lv_intTmpPlayer][2]), libPEEP_gv_recGlobals.lv_coRatingColor) + StringExternal("Param/Value/lib_PEEP_55930C44")), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][2], lv_txtPlayerProfile, PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][3], (StringExternal("Param/Value/lib_PEEP_ED383977") + libPEEP_gv_recGlobals.lv_recLeagues[lv_intLocalRankData[lv_intTmpPlayer][3]].lv_txtImageIconName + StringExternal("Param/Value/lib_PEEP_8235B1F5")), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][4], (StringExternal("Param/Value/lib_PEEP_7E3FBDF7") + libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[lv_intLocalRankData[lv_intTmpPlayer][4]] + StringExternal("Param/Value/lib_PEEP_B7E4984F")), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][5], IntToText(lv_intLocalRankData[lv_intTmpPlayer][5]), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][6], TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intLocalRankData[lv_intTmpPlayer][6]), libPEEP_gv_recGlobals.lv_coChipsColor), PlayerGroupSingle(lp_intPlayer));
        }
        else {
            lv_intIndex = 1;
            for ( ; ( (autoB0337FDE_ai >= 0 && lv_intIndex <= autoB0337FDE_ae) || (autoB0337FDE_ai < 0 && lv_intIndex >= autoB0337FDE_ae) ) ; lv_intIndex += autoB0337FDE_ai ) {
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diLeaderboardLabels[lv_intTmpPlayer][lv_intIndex], StringToText(""), PlayerGroupSingle(lp_intPlayer));
            }
        }
    }
}

void libPEEP_gf_CreateLoadingMatchDialog () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intTrueMatchMode;
    int lv_intBarWidth;
    int lv_intBarHeight;
    int lv_intXGap;
    int lv_intXGapFFA;
    int lv_intYGap;
    int lv_intPlayerNameXOffset;
    int lv_intPlayerNameYOffset;
    int lv_intX;
    int lv_intY;
    int lv_intNumPlayers;
    int lv_intIndex;
    int lv_intRace;
    int lv_intSideIndex;
    int lv_intNumTeams;
    int lv_intY2;
    int lv_intX2;
    text lv_txtText;
    text lv_txtImageTag;
    int lv_intX3;
    int lv_intX5;
    int lv_intY3;
    int lv_intX4;
    int lv_intY4;
    text lv_txtMatchTitle;
    int lv_intNumMatchPlayers;
    int lv_intTmp;
    int lv_intMatch;
    text lv_txtMessage;
    text lv_txtFavoredMessage;
    fixed lv_realExpectedScore1;
    fixed lv_realExpectedScore2;
    int lv_intRatingDelta;
    int lv_intBigVsImageWidth;
    int lv_intBigVsImageHeight;

    // Automatic Variable Declarations
    int auto14D5E772_ae;
    const int auto14D5E772_ai = 1;
    int auto271E2F96_ae;
    const int auto271E2F96_ai = 1;
    const int autoAE6AA579_ae = 2;
    const int autoAE6AA579_ai = 1;
    int auto13A848FC_ae;
    const int auto13A848FC_ai = 1;
    int auto8E77055C_ae;
    const int auto8E77055C_ai = 1;
    int auto431824F3_ae;
    const int auto431824F3_ai = 1;

    // Variable Initialization
    lv_intBarWidth = 472;
    lv_intBarHeight = 140;
    lv_intXGap = 50;
    lv_intXGapFFA = 120;
    lv_intYGap = 30;
    lv_intPlayerNameXOffset = 100;
    lv_intPlayerNameYOffset = 50;
    lv_intBigVsImageWidth = 400;
    lv_intBigVsImageHeight = 503;

    // Implementation
    auto14D5E772_ae = libPEEP_gv_recUI.lv_intVictoryElementCount;
    lv_intIndex = 1;
    for ( ; ( (auto14D5E772_ai >= 0 && lv_intIndex <= auto14D5E772_ae) || (auto14D5E772_ai < 0 && lv_intIndex >= auto14D5E772_ae) ) ; lv_intIndex += auto14D5E772_ai ) {
        libPEEP_gv_recUI.lv_diVictoryElementList[lv_intIndex] = c_invalidDialogControlId;
    }
    libPEEP_gv_recUI.lv_intVictoryElementCount = 0;
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    DialogCreate(2000, 1000, c_anchorCenter, 0, 0, true);
    libPEEP_gv_recUI.lv_dLoadingMatchDialog = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dLoadingMatchDialog, false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dLoadingMatchDialog, PlayerGroupAll(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 100);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 70);
    libPEEP_gv_recUI.lv_diChipAnnouncementLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, "HeaderCenterText", PlayerGroupAll());
    auto271E2F96_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto271E2F96_ai >= 0 && lv_intPlayer <= auto271E2F96_ae) || (auto271E2F96_ai < 0 && lv_intPlayer >= auto271E2F96_ae) ) ; lv_intPlayer += auto271E2F96_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == true)) {
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_743BC0BF");
            lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_2F964BC3"));
        }
        else {
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true)) {
                lv_txtMessage = StringToText("");
            }
            else {
                lv_txtMessage = StringExternal("Param/Value/lib_PEEP_53A4B878");
            }
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, TextWithColor(lv_txtMessage, (Color(254*100/255,138*100/255,14*100/255))), PlayerGroupSingle(lv_intPlayer));
    }
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, PlayerGroupAll(), 1.0, 0.0);
    libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
    libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
    lv_intTrueMatchMode = libPEEP_gv_recGameState.lv_intTrueMatchMode;
    if (((lv_intTrueMatchMode == 1) || (lv_intTrueMatchMode == 2))) {
        libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dLoadingMatchDialog, 200, 200, c_anchorCenter, 0, -85, TextWithColor(StringExternal("Param/Value/lib_PEEP_5F029A04"), (Color(100,100,100))), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeSet", PlayerGroupAll());
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
        libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
        libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 512, 512, c_anchorCenter, 0, -90, StringToText(""), "Assets\\Textures\\vortexwarp2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 50.0);
        libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
        libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
        libPEEP_gf_CalculateSonasRatings(libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[1], libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[2], 0, false);
        lv_realExpectedScore1 = libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[1]].lv_realSonasExpectedScore;
        lv_realExpectedScore2 = libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[2]].lv_realSonasExpectedScore;
        lv_intRatingDelta = AbsI((libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[1]].lv_intAverageRating - libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[2]].lv_intAverageRating));
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 200);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -30);
        libPEEP_gv_recUI.lv_diVictoryExpectedLabel = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
        libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
        libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
        if ((lv_intRatingDelta > 25)) {
            lv_txtFavoredMessage = StringExternal("Param/Value/lib_PEEP_79481F21");
            if ((lv_realExpectedScore1 > lv_realExpectedScore2)) {
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_E556EBAB") + lv_txtFavoredMessage + StringExternal("Param/Value/lib_PEEP_C0E9E745"));
            }
            else {
                if ((lv_realExpectedScore1 < lv_realExpectedScore2)) {
                    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_DB80F31D") + lv_txtFavoredMessage + StringExternal("Param/Value/lib_PEEP_3FE2DD31"));
                }

            }
        }
        else {
            lv_txtMessage = StringToText("");
        }
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextWithColor(lv_txtMessage, (Color(149*100/255,150*100/255,151*100/255))), PlayerGroupAll());
        lv_intSideIndex = 1;
        for ( ; ( (autoAE6AA579_ai >= 0 && lv_intSideIndex <= autoAE6AA579_ae) || (autoAE6AA579_ai < 0 && lv_intSideIndex >= autoAE6AA579_ae) ) ; lv_intSideIndex += autoAE6AA579_ai ) {
            lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intSideIndex];
            lv_intNumPlayers = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
            lv_intX = (lv_intBarWidth + lv_intXGap);
            lv_intX = (lv_intX - 100);
            if ((lv_intSideIndex == 1)) {
                lv_intX = (0 - lv_intX);
                lv_intX5 = (lv_intX - 140);
            }
            else {
                if ((lv_intTrueMatchMode == 1)) {
                    lv_intX5 = (lv_intX + 120);
                }
                else {
                    lv_intX5 = (lv_intX + 140);
                }
                lv_txtMatchTitle = (lv_txtMatchTitle + TextWithColor(StringExternal("Param/Value/lib_PEEP_60E8ACC7"), (Color(100,100,100))));
            }
            lv_intY = ((lv_intBarHeight + lv_intYGap) * lv_intNumPlayers);
            lv_intY = CeilingI((IntToFixed(lv_intY) / 2.0));
            lv_intY = (0 - lv_intY);
            auto13A848FC_ae = lv_intNumPlayers;
            lv_intIndex = 1;
            for ( ; ( (auto13A848FC_ai >= 0 && lv_intIndex <= auto13A848FC_ae) || (auto13A848FC_ai < 0 && lv_intIndex >= auto13A848FC_ae) ) ; lv_intIndex += auto13A848FC_ai ) {
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
                lv_intRace = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace;
                lv_txtMatchTitle = (lv_txtMatchTitle + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
                if ((lv_intIndex < lv_intNumPlayers)) {
                    lv_txtMatchTitle = (lv_txtMatchTitle + StringExternal("Param/Value/lib_PEEP_F8672059"));
                }

                lv_intNumMatchPlayers += 1;
                libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intNumMatchPlayers] = lv_intPlayer;
                if ((libPEEP_gv_recGameState.lv_intCurrentMatchMode == 1)) {
                    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLoadingMatchDialog, lv_intBigVsImageWidth, lv_intBigVsImageHeight, c_anchorCenter, lv_intX5, (lv_intY + 40), StringToText(""), libPEEP_gv_recGlobals.lv_imageLoadingVsImages[lv_intSideIndex][lv_intRace], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                else {
                    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLoadingMatchDialog, 140, lv_intBarHeight, c_anchorCenter, lv_intX5, lv_intY, StringToText(""), libPEEP_gv_recGlobals.lv_imageLoadingVsImages[lv_intSideIndex][lv_intRace], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                }
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
                libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
                libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
                if ((lv_intSideIndex == 1)) {
                    lv_intX2 = (lv_intX + 170);
                    lv_intX4 = (lv_intX - 80);
                }
                else {
                    lv_intX2 = (lv_intX + 10);
                    lv_intX4 = (lv_intX + 80);
                }
                lv_intY2 = (lv_intY + 62);
                lv_txtImageTag = (StringExternal("Param/Value/lib_PEEP_1DB37111") + libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[lv_intRace] + StringExternal("Param/Value/lib_PEEP_84CDA8FC"));
                lv_txtText = (StringExternal("Param/Value/lib_PEEP_0601A857") + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_DA0BBBEE") + lv_txtImageTag + libPEEP_gv_recGlobals.lv_txtRaceNames[lv_intRace] + StringExternal("Param/Value/lib_PEEP_95FDE9FF"));
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 200);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_intX2, lv_intY2);
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtText, PlayerGroupAll());
                libPEEP_gv_recUI.lv_diVictoryNameLabels[lv_intPlayer] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
                libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
                libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
                lv_intY = (lv_intY + lv_intBarHeight + lv_intYGap);
                lv_intY3 = (lv_intY - 175);
                lv_intX3 = (lv_intX2 - 240);
                libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLoadingMatchDialog, 60, 50, c_anchorCenter, lv_intX3, lv_intY3, StringToText(""), "Assets\\Textures\\crown.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libPEEP_gv_recGlobals.lv_diPlayerVictoryIcons[lv_intPlayer] = DialogControlLastCreated();
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            }
        }
    }
    else {
        auto8E77055C_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto8E77055C_ai >= 0 && lv_intIndex <= auto8E77055C_ae) || (auto8E77055C_ai < 0 && lv_intIndex >= auto8E77055C_ae) ) ; lv_intIndex += auto8E77055C_ai ) {
            if ((libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex] > 0)) {
                lv_intNumTeams += 1;
            }

        }
        lv_intY = ((lv_intBarHeight + lv_intYGap) * lv_intNumPlayers);
        lv_intY = CeilingI((IntToFixed(lv_intY) / 2.0));
        lv_intY = (0 - lv_intY - 300);
        lv_intX = (lv_intXGapFFA * lv_intNumPlayers);
        lv_intX = CeilingI((IntToFixed(lv_intX) / 2.0));
        lv_intX = (0 - lv_intX - 180);
        if ((lv_intNumTeams == 3)) {
            lv_intX = (lv_intX + 50);
            lv_intY = (lv_intY + 75);
        }
        else {
            lv_intY = (lv_intY + 60);
        }
        auto431824F3_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto431824F3_ai >= 0 && lv_intIndex <= auto431824F3_ae) || (auto431824F3_ai < 0 && lv_intIndex >= auto431824F3_ae) ) ; lv_intIndex += auto431824F3_ai ) {
            if ((libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex] > 0)) {
                lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex];
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
                lv_intRace = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace;
                lv_txtMatchTitle = (lv_txtMatchTitle + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
                if ((libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[(lv_intIndex + 1)] > 0)) {
                    lv_txtMatchTitle = (lv_txtMatchTitle + StringExternal("Param/Value/lib_PEEP_4CACE897"));
                }

                lv_intNumMatchPlayers += 1;
                libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intNumMatchPlayers] = lv_intPlayer;
                libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLoadingMatchDialog, 140, lv_intBarHeight, c_anchorCenter, (lv_intX - 125), lv_intY, StringToText(""), libPEEP_gv_recGlobals.lv_imageLoadingVsImages[1][lv_intRace], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
                libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
                libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
                lv_intX2 = (lv_intX + 165);
                lv_intY2 = (lv_intY + 65);
                lv_txtImageTag = (StringExternal("Param/Value/lib_PEEP_F3CE54AF") + libPEEP_gv_recGlobals.lv_txtRaceIconImageNames[lv_intRace] + StringExternal("Param/Value/lib_PEEP_AC31D067"));
                lv_txtText = (StringExternal("Param/Value/lib_PEEP_0951E20A") + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_266EC992") + lv_txtImageTag + libPEEP_gv_recGlobals.lv_txtRaceNames[lv_intRace] + StringExternal("Param/Value/lib_PEEP_F86B2E52"));
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 200);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_intX2, lv_intY2);
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtText, PlayerGroupAll());
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 0.0);
                libPEEP_gv_recUI.lv_intVictoryElementCount += 1;
                libPEEP_gv_recUI.lv_diVictoryElementList[libPEEP_gv_recUI.lv_intVictoryElementCount] = DialogControlLastCreated();
                lv_intY = (lv_intY + lv_intBarHeight + lv_intYGap);
                lv_intX = (lv_intX + lv_intXGapFFA);
                lv_intY3 = (lv_intY - 175);
                lv_intX3 = (lv_intX2 - 240);
                libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dLoadingMatchDialog, 60, 50, c_anchorCenter, lv_intX3, lv_intY3, StringToText(""), "Assets\\Textures\\crown.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libPEEP_gv_recGlobals.lv_diPlayerVictoryIcons[lv_intPlayer] = DialogControlLastCreated();
                DialogControlSetVisible(libPEEP_gv_recGlobals.lv_diPlayerVictoryIcons[lv_intPlayer], PlayerGroupAll(), false);
            }

        }
    }
    libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers = lv_intNumMatchPlayers;
    libPEEP_gv_recMatches[lv_intMatch].lv_txtMatchTitle = lv_txtMatchTitle;
    libPEEP_gv_recGameState.lv_boolLoadingScreenFired = true;
    TimerStart(libPEEP_gv_recGlobals.lv_timerBlinkTimer, 0.0, false, c_timeGame);
}

void libPEEP_gf_DestroyLoadingMatchDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogDestroy(libPEEP_gv_recUI.lv_dLoadingMatchDialog);
}

text libPEEP_gf_makeMatchDetailsText (int lp_intMatch) {
    // Variable Declarations
    text lv_txtTmp;
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_txtMessage = (lv_txtMessage + libPEEP_gf_formatIntegerAsText(lp_intMatch) + StringExternal("Param/Value/lib_PEEP_9160DED8"));
    lv_txtMessage = (lv_txtMessage + libPEEP_gv_recMatches[lp_intMatch].lv_txtPlayerList);
    if ((libPEEP_gv_recMatches[lp_intMatch].lv_intDuration > 0)) {
        lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_AF1846AC") + libPEEP_gv_recMatches[lp_intMatch].lv_txtOutcome);
        lv_txtTmp = (libPEEP_gf_convertSecondsToTime(libPEEP_gv_recMatches[lp_intMatch].lv_intDuration));
        lv_txtTmp = TextWithColor(lv_txtTmp, (Color(22*100/255,128*100/255,0)));
        lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_67F3556F") + lv_txtTmp);
    }
    else {
        lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_637BE14B"));
    }
    return lv_txtMessage;
}

void libPEEP_gf_CreateMatchHistoryDialog () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_intDividerXOffset;
    int lv_intYGap;
    int lv_intMatch;
    int lv_intX;
    int lv_intY;
    text lv_txtPlayer;

    // Automatic Variable Declarations
    int autoEA9B740A_ae;
    const int autoEA9B740A_ai = 1;

    // Variable Initialization
    lv_intDividerXOffset = 240;

    // Implementation
    DialogCreate(1100, 710, c_anchorTopLeft, 160, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dMatchHistoryDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dMatchHistoryDialog, 400, 50, c_anchorTop, 0, 30, StringExternal("Param/Value/lib_PEEP_53740433"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dMatchHistoryDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diMatchHistoryDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXMatchHistoryDialog, c_playerAny, libPEEP_gv_recUI.lv_diMatchHistoryDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dMatchHistoryDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dMatchHistoryDialog, 115, 50, c_anchorTopLeft, 50, 75, (StringExternal("Param/Value/lib_PEEP_2122D214") + libPEEP_gf_formatIntegerAsText(libPEEP_gv_recGlobals.lv_intNumLogItemsToSave) + StringExternal("Param/Value/lib_PEEP_AD57AAB0")), StringExternal("Param/Value/lib_PEEP_D211A2E3"), "");
    libPEEP_gv_recUI.lv_diRefreshMatchHistory = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonRefreshHistory, c_playerAny, libPEEP_gv_recUI.lv_diRefreshMatchHistory, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dMatchHistoryDialog, 600, 100, c_anchorTopLeft, 260, 55, StringExternal("Param/Value/lib_PEEP_F592DD80"), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diMatchHistoryTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
    lv_intY = 150;
    autoEA9B740A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 0;
    for ( ; ( (autoEA9B740A_ai >= 0 && lv_intPlayer <= autoEA9B740A_ae) || (autoEA9B740A_ai < 0 && lv_intPlayer >= autoEA9B740A_ae) ) ; lv_intPlayer += autoEA9B740A_ai ) {
        lv_intX = 36;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCheckBox);
        libPEEP_gv_recUI.lv_diHistoryPlayerCheckboxes[lv_intPlayer] = DialogControlLastCreated();
        if ((lv_intPlayer == 0)) {
            TriggerAddEventDialogControl(libPEEP_gt_CheckboxHistoryCheckAll, c_playerAny, libPEEP_gv_recUI.lv_diHistoryPlayerCheckboxes[lv_intPlayer], c_triggerControlEventTypeChecked);
            lv_txtPlayer = TextWithColor(StringExternal("Param/Value/lib_PEEP_ADCDA510"), (Color(100,100,100)));
        }
        else {
            lv_txtPlayer = TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false)));
        }
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, lv_intY);
        libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), true, PlayerGroupAll());
        lv_intX += 40;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 170, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, (lv_intY + 8));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtPlayer, PlayerGroupAll());
        if ((lv_intPlayer == 0)) {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
        }

        lv_intY += 35;
    }
    DialogControlCreate(libPEEP_gv_recUI.lv_dMatchHistoryDialog, c_triggerControlTypeListBox);
    libPEEP_gv_recUI.lv_diMatchHistorySelectListbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ListboxMatchSelection, c_playerAny, libPEEP_gv_recUI.lv_diMatchHistorySelectListbox, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 250, 135);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 535);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
    DialogControlCreate(libPEEP_gv_recUI.lv_dMatchHistoryDialog, c_triggerControlTypeListBox);
    libPEEP_gv_recUI.lv_diMatchHistoryLogListbox = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 660, 135);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 535);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
}

void libPEEP_gf_RefreshMatchHistoryListbox () {
    // Variable Declarations
    int lv_intMatch;

    // Automatic Variable Declarations
    int autoFC24400E_ae;
    const int autoFC24400E_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diMatchHistorySelectListbox, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchHistoryLogListbox, StringToText(""), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchHistoryTitle, StringExternal("Param/Value/lib_PEEP_B0433C07"), PlayerGroupAll());
    autoFC24400E_ae = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    lv_intMatch = 1;
    for ( ; ( (autoFC24400E_ai >= 0 && lv_intMatch <= autoFC24400E_ae) || (autoFC24400E_ai < 0 && lv_intMatch >= autoFC24400E_ae) ) ; lv_intMatch += autoFC24400E_ai ) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diMatchHistorySelectListbox, PlayerGroupAll(), libPEEP_gf_makeMatchDetailsText(lv_intMatch));
    }
}

void libPEEP_gf_HandleMatchEventLogChat (int lp_intPlayer, int lp_intEventClass, text lp_txtEventMessage, text lp_txtChatMessage, unit lp_uUnit) {
    // Variable Declarations
    text lv_txtChatLine;
    int lv_intTmpPlayer;
    int lv_intIndex;
    int lv_intMatch;
    int lv_intTmpPlayer2;
    int lv_intFilterIndex;
    text lv_txtTime;
    text lv_txtFullMessage;

    // Automatic Variable Declarations
    int autoDAFF7661_ae;
    const int autoDAFF7661_ai = 1;
    int auto392E5099_ae;
    const int auto392E5099_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    lv_intIndex = (ModI(libPEEP_gv_recMatches[lv_intMatch].lv_intNumLogItems, libPEEP_gv_recGlobals.lv_intNumLogItemsToSave) + 1);
    libPEEP_gv_recMatches[lv_intMatch].lv_intNumLogItems += 1;
    libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_intEventNum = libPEEP_gv_recMatches[lv_intMatch].lv_intNumLogItems;
    libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_intPlayer = lp_intPlayer;
    libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_intEventClass = lp_intEventClass;
    libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_intTimestamp = libPEEP_gv_recGameState.lv_intMatchSecondsElapsed;
    libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_txtEventMessage = lp_txtEventMessage;
    lv_txtTime = libPEEP_gf_convertSecondsToTime(FixedToInt((IntToFixed(libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_intTimestamp) * 0.75)));
    lv_intTmpPlayer = libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_intPlayer;
    lv_txtFullMessage = (TextWithColor(lv_txtTime, (Color(22*100/255,128*100/255,0))) + StringExternal("Param/Value/lib_PEEP_75694C0F") + TextWithColor(StringExternal("Param/Value/lib_PEEP_2B53F964"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false))) + StringExternal("Param/Value/lib_PEEP_2810B463") + TextWithColor(libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_txtEventMessage, libPEEP_gv_recGlobals.lv_coLogClassTextColor[libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_intEventClass]));
    libPEEP_gv_recMatchLogs[lv_intMatch][lv_intIndex].lv_txtFullMessage = lv_txtFullMessage;
    autoDAFF7661_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoDAFF7661_ai >= 0 && lv_intTmpPlayer <= autoDAFF7661_ae) || (autoDAFF7661_ai < 0 && lv_intTmpPlayer >= autoDAFF7661_ae) ) ; lv_intTmpPlayer += autoDAFF7661_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false)) {
            lv_intFilterIndex = 0;
            auto392E5099_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
            lv_intIndex = 1;
            for ( ; ( (auto392E5099_ai >= 0 && lv_intIndex <= auto392E5099_ae) || (auto392E5099_ai < 0 && lv_intIndex >= auto392E5099_ae) ) ; lv_intIndex += auto392E5099_ai ) {
                if ((libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex] == lp_intPlayer)) {
                    lv_intFilterIndex = lv_intIndex;
                }

            }
            libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intTmpPlayer, libPEEP_gv_recGameState.lv_intNumMatchesPlayed, false);
            if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intFilterIndex], lv_intTmpPlayer) == true) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diMatchLogClassFilters[lp_intEventClass], lv_intTmpPlayer) == true))) {
                if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionShowLogInChatCheckbox, lv_intTmpPlayer) == true) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == false))) {
                    lv_txtChatLine = (TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_1FDC4A9E") + TextWithColor(lp_txtChatMessage, libPEEP_gv_recGlobals.lv_coLogClassTextColor[lp_intEventClass]));
                    libPEEP_gf_CreateChatMessage(0, lv_txtChatLine, lv_intTmpPlayer, false, true);
                }

            }

        }

    }
}

text libPEEP_gf_AorAnPrefixForUnitType (string lp_utUnitType) {
    // Variable Declarations
    bool lv_boolMatched;
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoE63614E3_ae;
    const int autoE63614E3_ai = 1;

    // Variable Initialization

    // Implementation
    autoE63614E3_ae = libPEEP_gv_recGlobals.lv_intNumUnitTypesStartingWithVowel;
    lv_intIndex = 1;
    for ( ; ( (autoE63614E3_ai >= 0 && lv_intIndex <= autoE63614E3_ae) || (autoE63614E3_ai < 0 && lv_intIndex >= autoE63614E3_ae) ) ; lv_intIndex += autoE63614E3_ai ) {
        if (((lv_boolMatched == false) && (lp_utUnitType == libPEEP_gv_recGlobals.lv_utUnitTypesStartingWithVowel[lv_intIndex]))) {
            lv_boolMatched = true;
        }

    }
    if ((lv_boolMatched == true)) {
        return StringExternal("Param/Value/lib_PEEP_619D89CF");
    }
    else {
        return StringExternal("Param/Value/lib_PEEP_4C582B3E");
    }
}

void libPEEP_gf_CreateMatchLogDialog () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_intDividerXOffset;
    int lv_intYGap;
    int lv_intMatch;
    int lv_intX;
    int lv_intY;
    bool lv_presetChecked;
    text lv_txtDefault;

    // Automatic Variable Declarations
    int autoFCAEBA74_ae;
    const int autoFCAEBA74_ai = 1;
    const int auto14B1D128_ae = 9;
    const int auto14B1D128_ai = 1;

    // Variable Initialization
    lv_intDividerXOffset = 180;

    // Implementation
    DialogCreate(850, 900, c_anchorTopLeft, -8, 80, true);
    libPEEP_gv_recUI.lv_dMatchLogDialog = DialogLastCreated();
    DialogSetTransparency(DialogLastCreated(), 0.0);
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dMatchLogDialog, false);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dMatchLogDialog, 142, 50, c_anchorTopLeft, 10, 5, StringExternal("Param/Value/lib_PEEP_88FC4223"), StringExternal("Param/Value/lib_PEEP_CF565860"), "");
    libPEEP_gv_recUI.lv_diMatchHistoryButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonMatchHistory, c_playerAny, libPEEP_gv_recUI.lv_diMatchHistoryButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dMatchLogDialog, 24, 24, c_anchorTopLeft, 25, 14, StringToText(""), "Assets\\Textures\\btn-ability-terran-nuclearstrike.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diMatchHistoryImage = DialogControlLastCreated();
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diMatchHistoryImage, PlayerGroupAll(), 0.0, 20.0);
    lv_intX = 10;
    lv_intY = 75;
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 600);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intDividerXOffset, 60);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtDefault, PlayerGroupAll());
    libPEEP_gv_recUI.lv_diMatchLogMain = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dMatchLogDialog, 150, 50, c_anchorTopLeft, lv_intX, (lv_intY - 15), StringExternal("Param/Value/lib_PEEP_2DD44249"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libPEEP_gv_recUI.lv_diMatchLogFiltersTitle1 = DialogControlLastCreated();
    autoFCAEBA74_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoFCAEBA74_ai >= 0 && lv_intIndex <= autoFCAEBA74_ae) || (autoFCAEBA74_ai < 0 && lv_intIndex >= autoFCAEBA74_ae) ) ; lv_intIndex += autoFCAEBA74_ai ) {
        libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dMatchLogDialog, 50, 50, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), true);
        libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_CheckboxesLogFilters, c_playerAny, libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], c_triggerControlEventTypeChecked);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 30);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX + 50), (lv_intY + 13));
        libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], "ChallengeTitle", PlayerGroupAll());
        lv_intY = (lv_intY + lv_intYGap + 30);
    }
    lv_intY = (lv_intY + 50);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dMatchLogDialog, 150, 50, c_anchorTopLeft, lv_intX, (lv_intY - 15), StringExternal("Param/Value/lib_PEEP_E4BE1694"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libPEEP_gv_recUI.lv_diMatchLogFiltersTitle2 = DialogControlLastCreated();
    lv_intIndex = 1;
    for ( ; ( (auto14B1D128_ai >= 0 && lv_intIndex <= auto14B1D128_ae) || (auto14B1D128_ai < 0 && lv_intIndex >= auto14B1D128_ae) ) ; lv_intIndex += auto14B1D128_ai ) {
        if ((libPEEP_gv_recGlobals.lv_boolLogClassDefaultSelected[lv_intIndex] == true)) {
            lv_presetChecked = true;
        }
        else {
            lv_presetChecked = false;
        }
        libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dMatchLogDialog, 50, 50, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), lv_presetChecked);
        libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_CheckboxesLogFilters, c_playerAny, libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intIndex], c_triggerControlEventTypeChecked);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX + 50), (lv_intY + 15));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextWithColor(libPEEP_gv_recGlobals.lv_txtLogClasses[lv_intIndex], libPEEP_gv_recGlobals.lv_coLogClassTextColor[lv_intIndex]), PlayerGroupAll());
        libPEEP_gv_recUI.lv_diMatchLogClassFilterLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libPEEP_gv_recGlobals.lv_txtLogClassTooltips[lv_intIndex], PlayerGroupAll());
        lv_intY = (lv_intY + lv_intYGap + 30);
    }
}

void libPEEP_gf_RefreshMatchLogDialogforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intX;
    int lv_intY;
    int lv_intTmpPlayer;
    int lv_intMatch;

    // Automatic Variable Declarations
    int auto639044A3_ae;
    const int auto639044A3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    if ((lv_intMatch > 0)) {
        auto639044A3_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto639044A3_ai >= 0 && lv_intIndex <= auto639044A3_ae) || (auto639044A3_ai < 0 && lv_intIndex >= auto639044A3_ae) ) ; lv_intIndex += auto639044A3_ai ) {
            if ((libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex] > 0)) {
                lv_intTmpPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false))), PlayerGroupSingle(lp_intPlayer));
                if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false)) {
                    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
                    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
                }

            }
            else {
                DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
                DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            }
        }
        libPEEP_gf_RefreshMatchLogTextforPlayer(lp_intPlayer, libPEEP_gv_recGameState.lv_intNumMatchesPlayed, false);
    }

}

void libPEEP_gf_RefreshMatchLogTextforPlayer (int lp_intPlayer, int lp_intMatch, bool lp_boolHistoryUpdate) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intReverseIndex;
    int lv_intTmpPlayer;
    int lv_intEventClass;
    bool lv_boolPlayerFilterChecked;
    bool lv_boolClassFilterChecked;
    int lv_intPlayerIndex;
    text lv_txtLog;
    int lv_intNumLinesThatFitInDisplay;
    int lv_intNumLinesToDisplay;
    int lv_intThisIndex;
    int[1001] lv_intLogList;
    int lv_intLogListCount;

    // Automatic Variable Declarations
    int auto95F1C0E7_ae;
    const int auto95F1C0E7_ai = 1;
    int autoC2F69B8B_ae;
    const int autoC2F69B8B_ai = 1;
    int auto88DB3518_ae;
    const int auto88DB3518_ai = 1;

    // Variable Initialization
    lv_intNumLinesThatFitInDisplay = 30;

    // Implementation
    if ((lp_boolHistoryUpdate == true)) {
        if ((libPEEP_gv_recMatches[lp_intMatch].lv_intNumLogItems > libPEEP_gv_recGlobals.lv_intNumLogItemsToSave)) {
            lv_intNumLinesToDisplay = libPEEP_gv_recGlobals.lv_intNumLogItemsToSave;
        }
        else {
            lv_intNumLinesToDisplay = libPEEP_gv_recMatches[lp_intMatch].lv_intNumLogItems;
        }
    }
    else {
        if ((libPEEP_gv_recMatches[lp_intMatch].lv_intNumLogItems > lv_intNumLinesThatFitInDisplay)) {
            lv_intNumLinesToDisplay = lv_intNumLinesThatFitInDisplay;
        }
        else {
            lv_intNumLinesToDisplay = libPEEP_gv_recMatches[lp_intMatch].lv_intNumLogItems;
        }
    }
    auto95F1C0E7_ae = libPEEP_gv_recGlobals.lv_intNumLogItemsToSave;
    lv_intIndex = 1;
    for ( ; ( (auto95F1C0E7_ai >= 0 && lv_intIndex <= auto95F1C0E7_ae) || (auto95F1C0E7_ai < 0 && lv_intIndex >= auto95F1C0E7_ae) ) ; lv_intIndex += auto95F1C0E7_ai ) {
        lv_intReverseIndex = ((libPEEP_gv_recGlobals.lv_intNumLogItemsToSave - lv_intIndex) + 1);
        lv_intThisIndex = (ModI((lv_intReverseIndex - 1), libPEEP_gv_recGlobals.lv_intNumLogItemsToSave) + 1);
        if ((libPEEP_gv_recMatchLogs[lp_intMatch][lv_intThisIndex].lv_intEventClass > 0)) {
            lv_boolPlayerFilterChecked = false;
            lv_boolClassFilterChecked = false;
            lv_intEventClass = libPEEP_gv_recMatchLogs[lp_intMatch][lv_intThisIndex].lv_intEventClass;
            lv_intTmpPlayer = libPEEP_gv_recMatchLogs[lp_intMatch][lv_intThisIndex].lv_intPlayer;
            if ((lp_boolHistoryUpdate == true)) {
                if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diHistoryPlayerCheckboxes[lv_intTmpPlayer], lp_intPlayer) == true)) {
                    lv_boolPlayerFilterChecked = true;
                }

            }
            else {
                autoC2F69B8B_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
                lv_intIndex2 = 1;
                for ( ; ( (autoC2F69B8B_ai >= 0 && lv_intIndex2 <= autoC2F69B8B_ae) || (autoC2F69B8B_ai < 0 && lv_intIndex2 >= autoC2F69B8B_ae) ) ; lv_intIndex2 += autoC2F69B8B_ai ) {
                    if ((lv_intTmpPlayer == libPEEP_gv_recMatches[lp_intMatch].lv_intMatchPlayerList[lv_intIndex2])) {
                        lv_intPlayerIndex = lv_intIndex2;
                        break;
                    }

                }
                if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intPlayerIndex], lp_intPlayer) == true)) {
                    lv_boolPlayerFilterChecked = true;
                }

            }
            if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diMatchLogClassFilters[lv_intEventClass], lp_intPlayer) == true)) {
                lv_boolClassFilterChecked = true;
            }

            if (((lv_boolPlayerFilterChecked == true) && (lv_boolClassFilterChecked == true))) {
                lv_intLogListCount += 1;
                lv_intLogList[lv_intLogListCount] = lv_intThisIndex;
                if ((lv_intLogListCount >= lv_intNumLinesToDisplay)) {
                    break;
                }

            }

        }

    }
    if ((lp_boolHistoryUpdate == true)) {
        DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diMatchHistoryLogListbox, PlayerGroupSingle(lp_intPlayer));
    }

    auto88DB3518_ae = lv_intLogListCount;
    lv_intIndex = 1;
    for ( ; ( (auto88DB3518_ai >= 0 && lv_intIndex <= auto88DB3518_ae) || (auto88DB3518_ai < 0 && lv_intIndex >= auto88DB3518_ae) ) ; lv_intIndex += auto88DB3518_ai ) {
        lv_intReverseIndex = ((lv_intLogListCount - lv_intIndex) + 1);
        if ((lp_boolHistoryUpdate == true)) {
            DialogControlAddItem(libPEEP_gv_recUI.lv_diMatchHistoryLogListbox, PlayerGroupSingle(lp_intPlayer), libPEEP_gv_recMatchLogs[lp_intMatch][lv_intLogList[lv_intReverseIndex]].lv_txtFullMessage);
        }
        else {
            lv_txtLog = (lv_txtLog + libPEEP_gv_recMatchLogs[lp_intMatch][lv_intLogList[lv_intReverseIndex]].lv_txtFullMessage + StringExternal("Param/Value/lib_PEEP_6F37F277"));
        }
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchLogMain, StringToText(""), PlayerGroupSingle(lp_intPlayer));
    if ((lp_boolHistoryUpdate == false)) {
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchLogMain, lv_txtLog, PlayerGroupSingle(lp_intPlayer));
    }

}

void libPEEP_gf_DisableMatchLogPlayerFiltersforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoD7A03558_ae;
    const int autoD7A03558_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogFiltersTitle1, PlayerGroupSingle(lp_intPlayer), false);
    autoD7A03558_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoD7A03558_ai >= 0 && lv_intIndex <= autoD7A03558_ae) || (autoD7A03558_ai < 0 && lv_intIndex >= autoD7A03558_ae) ) ; lv_intIndex += autoD7A03558_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
    }
}

void libPEEP_gf_EnableMatchLogPlayerFiltersforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intX;
    int lv_intY;
    int lv_intTmpPlayer;
    int lv_intMatch;

    // Automatic Variable Declarations
    int auto8848BDA4_ae;
    const int auto8848BDA4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogFiltersTitle1, PlayerGroupSingle(lp_intPlayer), true);
    auto8848BDA4_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto8848BDA4_ai >= 0 && lv_intIndex <= auto8848BDA4_ae) || (auto8848BDA4_ai < 0 && lv_intIndex >= auto8848BDA4_ae) ) ; lv_intIndex += auto8848BDA4_ai ) {
        if ((libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex] > 0)) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
        else {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilters[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diMatchLogPlayerFilterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        }
    }
}

void libPEEP_gf_SetupMinimapUI () {
    // Variable Declarations
    int lv_intButtonNum;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogCreate(400, 500, c_anchorBottomLeft, -31, -139, true);
    libPEEP_gv_recUI.lv_dMinimapDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dMinimapDialog, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 175, 45, c_anchorTopLeft, 0, 26, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dMinimapDialog, 140, 50, c_anchorCenter, -90, -191, StringExternal("Param/Value/lib_PEEP_77F1D9B1"), Color(22*100/255,128*100/255,0), false, 2.0);
    libPEEP_gv_recUI.lv_diMinimapClock = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(libPEEP_gv_recUI.lv_diMinimapClock, "NamePanelPlayerRight", PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CinematicModeController");
    libPEEP_gv_recUI.lv_diCinematicModeController = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libPEEP_gf_CreateNamePanel () {
    // Variable Declarations
    int lv_intSideIndex;
    int lv_intRowIndex;
    int lv_intX;
    int lv_intY;
    int lv_intY2;
    string lv_styStyle;

    // Automatic Variable Declarations
    const int autoDD978F97_ae = 2;
    const int autoDD978F97_ai = 1;
    const int auto13440E62_ae = 2;
    const int auto13440E62_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(1000, 400, c_anchorTop, 0, 0, true);
    libPEEP_gv_recUI.lv_dNamePanel2Dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 124, 104, c_anchorTop, 0, 3, StringToText(""), "Assets\\Textures\\namepanel_orb.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diNamePanel2CenterOrb = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 124, 104, c_anchorTop, -1, 0, StringToText(""), "Assets\\Textures\\namepanel_title_vs.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60.0);
    libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 44, 72, c_anchorTop, 0, 16, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 124, 104, c_anchorTop, 0, 0, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diNamePanel2CenterButton = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\blank.dds", PlayerGroupAll());
    TriggerAddEventDialogControl(libPEEP_gt_ButtonQuickPanel, c_playerAny, libPEEP_gv_recUI.lv_diNamePanel2CenterButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 296, 44, c_anchorTop, -177, 34, StringToText(""), "Assets\\Textures\\namepanel_wing_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libPEEP_gv_recUI.lv_diNamePanel2Wings[1] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 296, 44, c_anchorTop, 178, 34, StringToText(""), "Assets\\Textures\\namepanel_wing_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
    libPEEP_gv_recUI.lv_diNamePanel2Wings[2] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 52, c_anchorTop, -38, 29, StringToText(""), "Assets\\Textures\\namepanel_color_red_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diNamePanel2ColorIcons[1] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 52, c_anchorTop, 39, 29, StringToText(""), "Assets\\Textures\\namepanel_color_blue_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diNamePanel2ColorIcons[2] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    lv_intSideIndex = 1;
    for ( ; ( (autoDD978F97_ai >= 0 && lv_intSideIndex <= autoDD978F97_ae) || (autoDD978F97_ai < 0 && lv_intSideIndex >= autoDD978F97_ae) ) ; lv_intSideIndex += autoDD978F97_ai ) {
        lv_intY = 33;
        lv_intY2 = 30;
        lv_intRowIndex = 1;
        for ( ; ( (auto13440E62_ai >= 0 && lv_intRowIndex <= auto13440E62_ae) || (auto13440E62_ai < 0 && lv_intRowIndex >= auto13440E62_ae) ) ; lv_intRowIndex += auto13440E62_ai ) {
            lv_intX = 300;
            if ((lv_intRowIndex == 2)) {
                lv_intX = (lv_intX - 5);
            }

            if ((lv_intSideIndex == 1)) {
                lv_intX = (0 - lv_intX);
            }
            else {
                lv_intY2 = (lv_intY + 20);
            }
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 40, c_anchorTop, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\namepanel_race_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libPEEP_gv_recUI.lv_diNamePanel2RaceIcons[lv_intSideIndex][lv_intRowIndex] = DialogControlLastCreated();
            libPEEP_gv_recUI.lv_intNumNamePanel2Elements += 1;
            libPEEP_gv_recUI.lv_diNamePanel2ElementList[libPEEP_gv_recUI.lv_intNumNamePanel2Elements] = DialogControlLastCreated();
            libPEEP_gv_recUI.lv_diNamePanel2ElementYStartList[libPEEP_gv_recUI.lv_intNumNamePanel2Elements] = DialogControlGetOffsetY(DialogControlLastCreated(), 1);
            lv_intX = 185;
            if ((lv_intRowIndex == 2)) {
                lv_intX = (lv_intX - 10);
            }

            if ((lv_intSideIndex == 1)) {
                lv_intX = (0 - lv_intX);
                lv_styStyle = "NamePanelPlayerRight";
            }
            else {
                lv_intY2 = (lv_intY2 + 20);
                lv_styStyle = "NamePanelPlayerLeft";
            }
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 185, 50, c_anchorTop, lv_intX, lv_intY2, StringExternal("Param/Value/lib_PEEP_AA29577C"), Color(100,100,100), false, 2.0);
            libPEEP_gv_recUI.lv_diNamePanel2PlayerLabels[lv_intSideIndex][lv_intRowIndex] = DialogControlLastCreated();
            libPEEP_gv_recUI.lv_intNumNamePanel2Elements += 1;
            libPEEP_gv_recUI.lv_diNamePanel2ElementList[libPEEP_gv_recUI.lv_intNumNamePanel2Elements] = DialogControlLastCreated();
            libPEEP_gv_recUI.lv_diNamePanel2ElementYStartList[libPEEP_gv_recUI.lv_intNumNamePanel2Elements] = DialogControlGetOffsetY(DialogControlLastCreated(), 1);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_styStyle, PlayerGroupAll());
        }
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTop, -90, 43, StringExternal("Param/Value/lib_PEEP_B7CEABE4"), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2ScoreLabels[1] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 50, c_anchorTop, 94, 43, StringExternal("Param/Value/lib_PEEP_DE417600"), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2ScoreLabels[2] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerRight", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 50, c_anchorTop, -150, 82, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[1] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 50, c_anchorTop, 150, 82, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[2] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerRight", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 50, c_anchorTop, -370, 34, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2PollLabels[1] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 50, c_anchorTop, 370, 34, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2PollLabels[2] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerRight", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 50, c_anchorTop, -210, 75, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2BettingLabels[1] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerRight", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 190, 50, c_anchorTop, 210, 75, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2BettingLabels[2] = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 60, c_anchorTop, 0, 94, TextWithColor(StringExternal("Param/Value/lib_PEEP_84F62589"), Color(76.08, 78.82, 72.16)), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diNamePanel2MessageLabel = DialogControlLastCreated();
    libPEEP_gf_AddNamePanelElementtoGlobalList(DialogControlLastCreated());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
}

void libPEEP_gf_AddNamePanelElementtoGlobalList (int lp_diDialogItem) {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gv_recUI.lv_intNumNamePanel2Elements += 1;
    libPEEP_gv_recUI.lv_diNamePanel2ElementList[libPEEP_gv_recUI.lv_intNumNamePanel2Elements] = lp_diDialogItem;
    libPEEP_gv_recUI.lv_diNamePanel2ElementYStartList[libPEEP_gv_recUI.lv_intNumNamePanel2Elements] = DialogControlGetOffsetY(lp_diDialogItem, 1);
}

void libPEEP_gf_RefreshNamePanelMain () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoE782B522_ae;
    const int autoE782B522_ai = 1;

    // Variable Initialization

    // Implementation
    autoE782B522_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoE782B522_ai >= 0 && lv_intPlayer <= autoE782B522_ae) || (autoE782B522_ai < 0 && lv_intPlayer >= autoE782B522_ae) ) ; lv_intPlayer += autoE782B522_ai ) {
        libPEEP_gf_RefreshNamePanelMainforPlayer(lv_intPlayer);
    }
}

void libPEEP_gf_RefreshNamePanelSupply () {
    // Variable Declarations
    int lv_intSupplyUsed;
    int lv_intSupplyBuilt;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intTeam;
    text lv_txtMessage;
    int lv_intTmpPlayer;
    color lv_coColor;
    int lv_intMaxSupply;

    // Automatic Variable Declarations
    const int auto063BE2A0_ae = 2;
    const int auto063BE2A0_ai = 1;
    const int auto0E911BE9_ae = 2;
    const int auto0E911BE9_ai = 1;
    int autoD0105854_ae;
    const int autoD0105854_ai = 1;

    // Variable Initialization
    lv_coColor = Color(0,0,0);

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intNumPlayingTeams != 2)) {
        lv_intIndex = 1;
        for ( ; ( (auto063BE2A0_ai >= 0 && lv_intIndex <= auto063BE2A0_ae) || (auto063BE2A0_ai < 0 && lv_intIndex >= auto063BE2A0_ae) ) ; lv_intIndex += auto063BE2A0_ai ) {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        }
    }
    else {
        lv_intIndex = 1;
        for ( ; ( (auto0E911BE9_ai >= 0 && lv_intIndex <= auto0E911BE9_ae) || (auto0E911BE9_ai < 0 && lv_intIndex >= auto0E911BE9_ae) ) ; lv_intIndex += auto0E911BE9_ai ) {
            lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex];
            lv_txtMessage = StringToText("");
            lv_intSupplyBuilt = 0;
            lv_intSupplyUsed = 0;
            lv_intMaxSupply = (libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers * 200);
            autoD0105854_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
            lv_intIndex2 = 1;
            for ( ; ( (autoD0105854_ai >= 0 && lv_intIndex2 <= autoD0105854_ae) || (autoD0105854_ai < 0 && lv_intIndex2 >= autoD0105854_ae) ) ; lv_intIndex2 += autoD0105854_ai ) {
                lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
                if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == true)) {
                    lv_intSupplyBuilt += PlayerGetPropertyInt(lv_intTmpPlayer, c_playerPropSuppliesMade);
                    lv_intSupplyUsed += PlayerGetPropertyInt(lv_intTmpPlayer, c_playerPropSuppliesUsed);
                }

            }
            if ((lv_intSupplyBuilt > lv_intMaxSupply)) {
                lv_intSupplyBuilt = lv_intMaxSupply;
            }

            if ((lv_intIndex == 1)) {
                lv_txtMessage = (IntToText(lv_intSupplyUsed) + StringExternal("Param/Value/lib_PEEP_7486533E") + IntToText(lv_intSupplyBuilt));
            }
            else {
                lv_txtMessage = (IntToText(lv_intSupplyUsed) + StringExternal("Param/Value/lib_PEEP_C46B66DC") + IntToText(lv_intSupplyBuilt));
            }
            if (((lv_intSupplyUsed >= lv_intSupplyBuilt) && (lv_intSupplyBuilt < lv_intMaxSupply))) {
                lv_coColor = Color(100.00, 0.00, 0.00);
            }
            else {
                lv_coColor = Color(100,100,100);
            }
            lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_9155ED18") + TextWithColor(lv_txtMessage, lv_coColor) + StringExternal("Param/Value/lib_PEEP_7AD479BF"));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[lv_intIndex], lv_txtMessage, PlayerGroupAll());
        }
    }
}

void libPEEP_gf_RefreshNamePanelExtras () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoD0C9F563_ae;
    const int autoD0C9F563_ai = 1;

    // Variable Initialization

    // Implementation
    autoD0C9F563_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoD0C9F563_ai >= 0 && lv_intPlayer <= autoD0C9F563_ae) || (autoD0C9F563_ai < 0 && lv_intPlayer >= autoD0C9F563_ae) ) ; lv_intPlayer += autoD0C9F563_ai ) {
        libPEEP_gf_RefreshNamePanelBettingforPlayer(lv_intPlayer);
        libPEEP_gf_RefreshNamePanelPollsforPlayer(lv_intPlayer);
        libPEEP_gf_RefreshNamePanelScoresforPlayer(lv_intPlayer);
    }
}

void libPEEP_gf_ClearNamePanel () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;

    // Automatic Variable Declarations
    const int auto888B9235_ae = 2;
    const int auto888B9235_ai = 1;
    const int auto7B812786_ae = 2;
    const int auto7B812786_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, "Assets\\Textures\\blank.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, "Assets\\Textures\\blank.dds", PlayerGroupAll());
    lv_intIndex = 1;
    for ( ; ( (auto888B9235_ai >= 0 && lv_intIndex <= auto888B9235_ae) || (auto888B9235_ai < 0 && lv_intIndex >= auto888B9235_ae) ) ; lv_intIndex += auto888B9235_ai ) {
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2ScoreLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2BettingLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2ColorIcons[lv_intIndex], "Assets\\Textures\\blank.dds", PlayerGroupAll());
        lv_intIndex2 = 1;
        for ( ; ( (auto7B812786_ai >= 0 && lv_intIndex2 <= auto7B812786_ae) || (auto7B812786_ai < 0 && lv_intIndex2 >= auto7B812786_ae) ) ; lv_intIndex2 += auto7B812786_ai ) {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2PlayerLabels[lv_intIndex][lv_intIndex2], StringToText(""), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2RaceIcons[lv_intIndex][lv_intIndex2], "Assets\\Textures\\blank.dds", PlayerGroupAll());
        }
    }
}

void libPEEP_gf_RefreshNamePanelMainforPlayer (int lp_intObserver) {
    int init_i;
    int init_j;

    // Variable Declarations
    int lv_intSideIndex;
    int lv_intRowIndex;
    text[3][3] lv_txtPlayerNames;
    text[3][3] lv_txtTooltips;
    string[3][3] lv_imgRaces;
    text lv_txtFont;
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intNumTeams;
    int lv_intMatchMode;
    string lv_imgCenterImage;
    int lv_intTeamIndex;
    text lv_txtTmp;
    int lv_intRaceIconWidth;
    int lv_intRaceIconHeight;
    int lv_intIndex;
    int lv_diThisDialogItem;
    int lv_intYStartPlayerName;
    int lv_intYStartRaceIcon;
    int lv_intYDelta;
    string lv_imgColorStrip;
    color lv_coNameColor;
    int[3][3] lv_intPlayerList;

    // Automatic Variable Declarations
    const int auto75DDC4D0_ae = 2;
    const int auto75DDC4D0_ai = 1;
    const int auto4286368E_ae = 2;
    const int auto4286368E_ai = 1;
    const int autoF80F3824_ae = 2;
    const int autoF80F3824_ai = 1;
    const int auto8D9101BA_ae = 2;
    const int auto8D9101BA_ai = 1;
    int auto269E4B65_ae;
    const int auto269E4B65_ai = 1;
    const int autoACEBC3D3_ae = 2;
    const int autoACEBC3D3_ai = 1;
    const int autoE74DF59D_ae = 2;
    const int autoE74DF59D_ai = 1;
    const int auto94DE8AB3_ae = 2;
    const int auto94DE8AB3_ai = 1;
    const int auto0FBCD7C2_ae = 2;
    const int auto0FBCD7C2_ai = 1;
    int auto39A46A24_ae;
    const int auto39A46A24_ai = 1;
    int autoADB977F8_ae;
    const int autoADB977F8_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lv_imgRaces[init_i][init_j] = "Assets\\Textures\\blank.dds";
        }
    }
    lv_diThisDialogItem = c_invalidDialogControlId;
    lv_intYDelta = 20;
    lv_coNameColor = Color(0,0,0);

    // Implementation
    libPEEP_gf_RefreshNamePanelItemVisibilityforPlayer(lp_intObserver);
    lv_intSideIndex = 1;
    for ( ; ( (auto75DDC4D0_ai >= 0 && lv_intSideIndex <= auto75DDC4D0_ae) || (auto75DDC4D0_ai < 0 && lv_intSideIndex >= auto75DDC4D0_ae) ) ; lv_intSideIndex += auto75DDC4D0_ai ) {
        lv_intRowIndex = 1;
        for ( ; ( (auto4286368E_ai >= 0 && lv_intRowIndex <= auto4286368E_ae) || (auto4286368E_ai < 0 && lv_intRowIndex >= auto4286368E_ae) ) ; lv_intRowIndex += auto4286368E_ai ) {
            lv_txtPlayerNames[lv_intSideIndex][lv_intRowIndex] = StringToText("");
        }
    }
    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, lp_intObserver) == true)) {
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diNamePanel2CenterButton, (StringExternal("Param/Value/lib_PEEP_62848455") + TextWithColor(StringExternal("Param/Value/lib_PEEP_05052E1A"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_F4D6CA97")), PlayerGroupSingle(lp_intObserver));
    }
    else {
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diNamePanel2CenterButton, StringToText(""), PlayerGroupSingle(lp_intObserver));
    }
    lv_intNumTeams = libPEEP_gv_recGameState.lv_intNumPlayingTeams;
    lv_intMatchMode = libPEEP_gv_recGameState.lv_intTrueMatchMode;
    if ((lv_intNumTeams == 0)) {
        libPEEP_gf_ClearNamePanel();
    }
    else {
        if ((lv_intMatchMode == 1)) {
            lv_intYStartPlayerName = 41;
            lv_intYStartRaceIcon = 34;
            lv_imgCenterImage = "Assets\\Textures\\namepanel_title_vs.dds";
            lv_txtFont = StringExternal("Param/Value/lib_PEEP_60CB762A");
            lv_intRaceIconWidth = 32;
            lv_intRaceIconHeight = 40;
            lv_intSideIndex = 1;
            for ( ; ( (autoF80F3824_ai >= 0 && lv_intSideIndex <= autoF80F3824_ae) || (autoF80F3824_ai < 0 && lv_intSideIndex >= autoF80F3824_ae) ) ; lv_intSideIndex += autoF80F3824_ai ) {
                lv_intTeamIndex += 1;
                lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intTeamIndex];
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
                lv_txtPlayerNames[lv_intSideIndex][1] = libPEEP_gf_getPlayerDisplayNameForPlayer(lv_intPlayer, lp_intObserver);
                lv_imgRaces[lv_intSideIndex][1] = libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace];
                lv_txtTooltips[lv_intSideIndex][1] = libPEEP_gf_makePlayerProfileText(lv_intPlayer);
                lv_intPlayerList[lv_intSideIndex][1] = lv_intPlayer;
            }
        }
        else if ((lv_intMatchMode == 2)) {
            lv_intYStartPlayerName = 30;
            lv_intYStartRaceIcon = 33;
            lv_imgCenterImage = "Assets\\Textures\\namepanel_title_vs.dds";
            lv_txtFont = StringExternal("Param/Value/lib_PEEP_C24006B1");
            lv_intRaceIconWidth = 20;
            lv_intRaceIconHeight = 25;
            lv_intSideIndex = 1;
            for ( ; ( (auto8D9101BA_ai >= 0 && lv_intSideIndex <= auto8D9101BA_ae) || (auto8D9101BA_ai < 0 && lv_intSideIndex >= auto8D9101BA_ae) ) ; lv_intSideIndex += auto8D9101BA_ai ) {
                lv_intTeamIndex += 1;
                lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intTeamIndex];
                auto269E4B65_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
                lv_intRowIndex = 1;
                for ( ; ( (auto269E4B65_ai >= 0 && lv_intRowIndex <= auto269E4B65_ae) || (auto269E4B65_ai < 0 && lv_intRowIndex >= auto269E4B65_ae) ) ; lv_intRowIndex += auto269E4B65_ai ) {
                    lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intRowIndex];
                    lv_txtPlayerNames[lv_intSideIndex][lv_intRowIndex] = libPEEP_gf_getPlayerDisplayNameForPlayer(lv_intPlayer, lp_intObserver);
                    lv_imgRaces[lv_intSideIndex][lv_intRowIndex] = libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace];
                    lv_txtTooltips[lv_intSideIndex][lv_intRowIndex] = libPEEP_gf_makePlayerProfileText(lv_intPlayer);
                    lv_intPlayerList[lv_intSideIndex][lv_intRowIndex] = lv_intPlayer;
                }
            }
        }
        else if ((lv_intMatchMode == 3)) {
            lv_intYStartPlayerName = 30;
            lv_intYStartRaceIcon = 33;
            lv_imgCenterImage = "Assets\\Textures\\namepanel_title_ffa.dds";
            lv_txtFont = StringExternal("Param/Value/lib_PEEP_F9A8EFA4");
            lv_intRaceIconWidth = 20;
            lv_intRaceIconHeight = 25;
            lv_intSideIndex = 1;
            for ( ; ( (autoACEBC3D3_ai >= 0 && lv_intSideIndex <= autoACEBC3D3_ae) || (autoACEBC3D3_ai < 0 && lv_intSideIndex >= autoACEBC3D3_ae) ) ; lv_intSideIndex += autoACEBC3D3_ai ) {
                lv_intRowIndex = 1;
                for ( ; ( (autoE74DF59D_ai >= 0 && lv_intRowIndex <= autoE74DF59D_ae) || (autoE74DF59D_ai < 0 && lv_intRowIndex >= autoE74DF59D_ae) ) ; lv_intRowIndex += autoE74DF59D_ai ) {
                    lv_intTeamIndex += 1;
                    lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intTeamIndex];
                    if (((lv_intTeamIndex <= libPEEP_gv_recGameState.lv_intNumPlayingTeams) && (lv_intTeam > 0))) {
                        lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
                        lv_txtPlayerNames[lv_intSideIndex][lv_intRowIndex] = libPEEP_gf_getPlayerDisplayNameForPlayer(lv_intPlayer, lp_intObserver);
                        lv_imgRaces[lv_intSideIndex][lv_intRowIndex] = libPEEP_gv_recGlobals.lv_imgRaceWhiteIcons[libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace];
                        lv_txtTooltips[lv_intSideIndex][lv_intRowIndex] = libPEEP_gf_makePlayerProfileText(lv_intPlayer);
                        lv_intPlayerList[lv_intSideIndex][lv_intRowIndex] = lv_intPlayer;
                    }

                }
            }
        }
        lv_intSideIndex = 1;
        for ( ; ( (auto94DE8AB3_ai >= 0 && lv_intSideIndex <= auto94DE8AB3_ae) || (auto94DE8AB3_ai < 0 && lv_intSideIndex >= auto94DE8AB3_ae) ) ; lv_intSideIndex += auto94DE8AB3_ai ) {
            lv_intRowIndex = 1;
            for ( ; ( (auto0FBCD7C2_ai >= 0 && lv_intRowIndex <= auto0FBCD7C2_ae) || (auto0FBCD7C2_ai < 0 && lv_intRowIndex >= auto0FBCD7C2_ae) ) ; lv_intRowIndex += auto0FBCD7C2_ai ) {
                lv_intPlayer = lv_intPlayerList[lv_intSideIndex][lv_intRowIndex];
                libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, lv_imgCenterImage, PlayerGroupSingle(lp_intObserver));
                if ((lv_intRowIndex == 1)) {
                    if ((lv_intSideIndex == 1)) {
                        lv_imgColorStrip = libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftColorStrip;
                    }
                    else {
                        lv_imgColorStrip = libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightColorStrip;
                    }
                    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2ColorIcons[lv_intSideIndex], lv_imgColorStrip, PlayerGroupSingle(lp_intObserver));
                }

                if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown, lp_intObserver) == 2)) {
                    lv_coNameColor = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false));
                }
                else {
                    lv_coNameColor = Color(100,100,100);
                }
                lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_AAC5CF6A") + lv_txtFont + StringExternal("Param/Value/lib_PEEP_A3C3DA2A") + TextWithColor(lv_txtPlayerNames[lv_intSideIndex][lv_intRowIndex], lv_coNameColor) + StringExternal("Param/Value/lib_PEEP_38D97D79"));
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2PlayerLabels[lv_intSideIndex][lv_intRowIndex], lv_txtTmp, PlayerGroupSingle(lp_intObserver));
                if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, lp_intObserver) == true)) {
                    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diNamePanel2PlayerLabels[lv_intSideIndex][lv_intRowIndex], lv_txtTooltips[lv_intSideIndex][lv_intRowIndex], PlayerGroupSingle(lp_intObserver));
                }
                else {
                    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diNamePanel2PlayerLabels[lv_intSideIndex][lv_intRowIndex], StringToText(""), PlayerGroupSingle(lp_intObserver));
                }
                DialogControlSetSize(libPEEP_gv_recUI.lv_diNamePanel2RaceIcons[lv_intSideIndex][lv_intRowIndex], PlayerGroupSingle(lp_intObserver), lv_intRaceIconWidth, lv_intRaceIconHeight);
                libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2RaceIcons[lv_intSideIndex][lv_intRowIndex], lv_imgRaces[lv_intSideIndex][lv_intRowIndex], PlayerGroupSingle(lp_intObserver));
                lv_diThisDialogItem = libPEEP_gv_recUI.lv_diNamePanel2PlayerLabels[lv_intSideIndex][lv_intRowIndex];
                auto39A46A24_ae = libPEEP_gv_recUI.lv_intNumNamePanel2Elements;
                lv_intIndex = 1;
                for ( ; ( (auto39A46A24_ai >= 0 && lv_intIndex <= auto39A46A24_ae) || (auto39A46A24_ai < 0 && lv_intIndex >= auto39A46A24_ae) ) ; lv_intIndex += auto39A46A24_ai ) {
                    if ((libPEEP_gv_recUI.lv_diNamePanel2ElementList[lv_intIndex] == lv_diThisDialogItem)) {
                        libPEEP_gv_recUI.lv_diNamePanel2ElementYStartList[lv_intIndex] = (lv_intYStartPlayerName + (lv_intYDelta * (lv_intRowIndex - 1)));
                        break;
                    }

                }
                lv_diThisDialogItem = libPEEP_gv_recUI.lv_diNamePanel2RaceIcons[lv_intSideIndex][lv_intRowIndex];
                autoADB977F8_ae = libPEEP_gv_recUI.lv_intNumNamePanel2Elements;
                lv_intIndex = 1;
                for ( ; ( (autoADB977F8_ai >= 0 && lv_intIndex <= autoADB977F8_ae) || (autoADB977F8_ai < 0 && lv_intIndex >= autoADB977F8_ae) ) ; lv_intIndex += autoADB977F8_ai ) {
                    if ((libPEEP_gv_recUI.lv_diNamePanel2ElementList[lv_intIndex] == lv_diThisDialogItem)) {
                        libPEEP_gv_recUI.lv_diNamePanel2ElementYStartList[lv_intIndex] = (lv_intYStartRaceIcon + (lv_intYDelta * (lv_intRowIndex - 1)));
                        break;
                    }

                }
            }
        }
        libPEEP_gf_RefreshNamePanelPositionforPlayer(lp_intObserver);
    }
}

void libPEEP_gf_RefreshNamePanelItemVisibilityforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intNumElements;
    bool lv_boolHideSupply;
    bool lv_boolHideScore;
    bool lv_boolHideBetting;
    bool lv_boolHidePoll;

    // Automatic Variable Declarations
    int autoC9CC8480_ae;
    const int autoC9CC8480_ai = 1;
    int auto4E473AFE_ae;
    const int auto4E473AFE_ai = 1;
    int auto2E7F66EE_ae;
    const int auto2E7F66EE_ai = 1;
    int auto83FCFAF7_ae;
    const int auto83FCFAF7_ai = 1;
    int autoC6A90086_ae;
    const int autoC6A90086_ai = 1;
    int autoC92D0048_ae;
    const int autoC92D0048_ai = 1;
    int autoB2BFE2D4_ae;
    const int autoB2BFE2D4_ai = 1;
    int autoA5C5BB14_ae;
    const int autoA5C5BB14_ai = 1;

    // Variable Initialization
    lv_intNumElements = 2;

    // Implementation
    if (((libPEEP_gv_recGameState.lv_intTrueMatchMode == 1) || (libPEEP_gv_recGameState.lv_intNumPlayingTeams == 2))) {
        lv_boolHideBetting = false;
        lv_boolHidePoll = false;
        lv_boolHideScore = false;
        lv_boolHideSupply = false;
    }
    else if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 2)) {
        lv_boolHideBetting = false;
        lv_boolHidePoll = true;
        lv_boolHideScore = false;
        lv_boolHideSupply = false;
    }
    else if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 3)) {
        lv_boolHideBetting = true;
        lv_boolHidePoll = true;
        lv_boolHideScore = true;
        lv_boolHideSupply = true;
    }
    if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, lp_intPlayer) == true) && (lv_boolHideSupply == false))) {
        auto4E473AFE_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (auto4E473AFE_ai >= 0 && lv_intIndex <= auto4E473AFE_ae) || (auto4E473AFE_ai < 0 && lv_intIndex >= auto4E473AFE_ae) ) ; lv_intIndex += auto4E473AFE_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
    }
    else {
        autoC9CC8480_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (autoC9CC8480_ai >= 0 && lv_intIndex <= autoC9CC8480_ae) || (autoC9CC8480_ai < 0 && lv_intIndex >= autoC9CC8480_ae) ) ; lv_intIndex += autoC9CC8480_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2SupplyLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        }
    }
    if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, lp_intPlayer) == true) && (lv_boolHideScore == false))) {
        auto83FCFAF7_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (auto83FCFAF7_ai >= 0 && lv_intIndex <= auto83FCFAF7_ae) || (auto83FCFAF7_ai < 0 && lv_intIndex >= auto83FCFAF7_ae) ) ; lv_intIndex += auto83FCFAF7_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2ScoreLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
    }
    else {
        auto2E7F66EE_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (auto2E7F66EE_ai >= 0 && lv_intIndex <= auto2E7F66EE_ae) || (auto2E7F66EE_ai < 0 && lv_intIndex >= auto2E7F66EE_ae) ) ; lv_intIndex += auto2E7F66EE_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2ScoreLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        }
    }
    if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, lp_intPlayer) == true) && (lv_boolHideBetting == false))) {
        autoC92D0048_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (autoC92D0048_ai >= 0 && lv_intIndex <= autoC92D0048_ae) || (autoC92D0048_ai < 0 && lv_intIndex >= autoC92D0048_ae) ) ; lv_intIndex += autoC92D0048_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2BettingLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
    }
    else {
        autoC6A90086_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (autoC6A90086_ai >= 0 && lv_intIndex <= autoC6A90086_ae) || (autoC6A90086_ai < 0 && lv_intIndex >= autoC6A90086_ae) ) ; lv_intIndex += autoC6A90086_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2BettingLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        }
    }
    if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, lp_intPlayer) == true) && (lv_boolHidePoll == false))) {
        autoA5C5BB14_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (autoA5C5BB14_ai >= 0 && lv_intIndex <= autoA5C5BB14_ae) || (autoA5C5BB14_ai < 0 && lv_intIndex >= autoA5C5BB14_ae) ) ; lv_intIndex += autoA5C5BB14_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2PollLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
    }
    else {
        autoB2BFE2D4_ae = lv_intNumElements;
        lv_intIndex = 1;
        for ( ; ( (autoB2BFE2D4_ai >= 0 && lv_intIndex <= autoB2BFE2D4_ae) || (autoB2BFE2D4_ai < 0 && lv_intIndex >= autoB2BFE2D4_ae) ) ; lv_intIndex += autoB2BFE2D4_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diNamePanel2PollLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        }
    }
}

void libPEEP_gf_RefreshNamePanelScoresforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intSum;
    int lv_intScore;
    int lv_intTeam;
    int lv_intNumPlayers;
    int lv_intTmpPlayer;
    int lv_intTmpVal;
    text lv_txtMessage;

    // Automatic Variable Declarations
    const int autoB748B245_ae = 2;
    const int autoB748B245_ai = 1;
    int auto3BADEC09_ae;
    const int auto3BADEC09_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    for ( ; ( (autoB748B245_ai >= 0 && lv_intIndex <= autoB748B245_ae) || (autoB748B245_ai < 0 && lv_intIndex >= autoB748B245_ae) ) ; lv_intIndex += autoB748B245_ai ) {
        lv_intSum = 0;
        lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex];
        lv_intNumPlayers = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        auto3BADEC09_ae = lv_intNumPlayers;
        lv_intIndex2 = 1;
        for ( ; ( (auto3BADEC09_ai >= 0 && lv_intIndex2 <= auto3BADEC09_ae) || (auto3BADEC09_ai < 0 && lv_intIndex2 >= auto3BADEC09_ae) ) ; lv_intIndex2 += auto3BADEC09_ai ) {
            lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
            lv_intTmpVal = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intWins;
            lv_intSum += lv_intTmpVal;
        }
        if ((libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[lv_intIndex], lp_intPlayer) != "")) {
            lv_intScore = StringToInt(libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[lv_intIndex], lp_intPlayer));
        }
        else {
            if ((lv_intNumPlayers == 0)) {
                lv_intScore = 0;
            }
            else {
                lv_intScore = FloorI((IntToFixed(lv_intSum) / IntToFixed(lv_intNumPlayers)));
            }
        }
        lv_txtMessage = (libPEEP_gf_formatIntegerAsText(lv_intScore));
        lv_txtMessage = (TextWithColor(lv_txtMessage, (Color(149*100/255,150*100/255,151*100/255))));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2ScoreLabels[lv_intIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
    }
}

void libPEEP_gf_RefreshNamePanelPollsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int[3] lv_intThisTeamBets;
    int lv_intTotalBets;
    int lv_intPollPercent;
    int lv_intPlayer;
    text lv_txtMessage;

    // Automatic Variable Declarations
    int auto4DBE8F42_ae;
    const int auto4DBE8F42_ai = 1;
    const int auto0D76AB0E_ae = 2;
    const int auto0D76AB0E_ai = 1;
    int auto36CC7AB7_ae;
    const int auto36CC7AB7_ai = 1;
    const int autoF4520BB1_ae = 2;
    const int autoF4520BB1_ai = 1;

    // Variable Initialization

    // Implementation
    auto4DBE8F42_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto4DBE8F42_ai >= 0 && lv_intPlayer <= auto4DBE8F42_ae) || (auto4DBE8F42_ai < 0 && lv_intPlayer >= auto4DBE8F42_ae) ) ; lv_intPlayer += auto4DBE8F42_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam > 0))) {
            lv_intTotalBets += 1;
        }

    }
    lv_intIndex = 1;
    for ( ; ( (auto0D76AB0E_ai >= 0 && lv_intIndex <= auto0D76AB0E_ae) || (auto0D76AB0E_ai < 0 && lv_intIndex >= auto0D76AB0E_ae) ) ; lv_intIndex += auto0D76AB0E_ai ) {
        auto36CC7AB7_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto36CC7AB7_ai >= 0 && lv_intPlayer <= auto36CC7AB7_ae) || (auto36CC7AB7_ai < 0 && lv_intPlayer >= auto36CC7AB7_ae) ) ; lv_intPlayer += auto36CC7AB7_ai ) {
            if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam == libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex]))) {
                lv_intThisTeamBets[lv_intIndex] += 1;
            }

        }
    }
    lv_intIndex = 1;
    for ( ; ( (autoF4520BB1_ai >= 0 && lv_intIndex <= autoF4520BB1_ae) || (autoF4520BB1_ai < 0 && lv_intIndex >= autoF4520BB1_ae) ) ; lv_intIndex += autoF4520BB1_ai ) {
        if ((libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[lv_intIndex], lp_intPlayer) != "")) {
            lv_txtMessage = (StringToText(libPEEP_gf_replaceSpecialChars(libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[lv_intIndex], lp_intPlayer))));
        }
        else {
            if ((lv_intTotalBets == 0)) {
                lv_intPollPercent = 0;
            }
            else {
                lv_intPollPercent = FloorI(((IntToFixed(lv_intThisTeamBets[lv_intIndex]) / IntToFixed(lv_intTotalBets)) * 100.0));
            }
            lv_txtMessage = (IntToText(lv_intPollPercent) + StringExternal("Param/Value/lib_PEEP_60D6AF59"));
        }
        lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_396357C2") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_54EF5975"));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2PollLabels[lv_intIndex], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
    }
}

void libPEEP_gf_RefreshNamePanelBettingforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int[3] lv_intThisTeamTotal;
    int lv_intPlayer;

    // Automatic Variable Declarations
    const int auto359E6FFB_ae = 2;
    const int auto359E6FFB_ai = 1;
    int auto77B216F2_ae;
    const int auto77B216F2_ai = 1;
    const int auto1567CBE4_ae = 2;
    const int auto1567CBE4_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    for ( ; ( (auto359E6FFB_ai >= 0 && lv_intIndex <= auto359E6FFB_ae) || (auto359E6FFB_ai < 0 && lv_intIndex >= auto359E6FFB_ae) ) ; lv_intIndex += auto359E6FFB_ai ) {
        auto77B216F2_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto77B216F2_ai >= 0 && lv_intPlayer <= auto77B216F2_ae) || (auto77B216F2_ai < 0 && lv_intPlayer >= auto77B216F2_ae) ) ; lv_intPlayer += auto77B216F2_ai ) {
            if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam == libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex]))) {
                lv_intThisTeamTotal[lv_intIndex] += libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount;
            }

        }
    }
    lv_intIndex = 1;
    for ( ; ( (auto1567CBE4_ai >= 0 && lv_intIndex <= auto1567CBE4_ae) || (auto1567CBE4_ai < 0 && lv_intIndex >= auto1567CBE4_ae) ) ; lv_intIndex += auto1567CBE4_ai ) {
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2BettingLabels[lv_intIndex], (StringExternal("Param/Value/lib_PEEP_9A7E503B") + libPEEP_gf_formatIntegerAsText(lv_intThisTeamTotal[lv_intIndex]) + StringExternal("Param/Value/lib_PEEP_D529CFA9")), PlayerGroupSingle(lp_intPlayer));
    }
}

void libPEEP_gf_RefreshNamePanelMessageforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int[3] lv_intThisTeamBets;
    int lv_intTotalBets;
    int lv_intPollPercent;
    int lv_intPlayer;
    text lv_txtMessage;

    // Automatic Variable Declarations
    const int auto250B9B45_ae = 2;
    const int auto250B9B45_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    for ( ; ( (auto250B9B45_ai >= 0 && lv_intIndex <= auto250B9B45_ae) || (auto250B9B45_ai < 0 && lv_intIndex >= auto250B9B45_ae) ) ; lv_intIndex += auto250B9B45_ai ) {
        if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, lp_intPlayer) == 1)) {
            lv_txtMessage = StringToText("");
        }
        else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, lp_intPlayer) == 2)) {
            lv_txtMessage = (StringToText(libPEEP_gf_replaceSpecialChars(libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox, lp_intPlayer))));
        }
        else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, lp_intPlayer) == 3)) {
            lv_txtMessage = (StringToText(StringCase(libPEEP_gv_recGlobals.lv_strMapName, true)));
        }
        else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, lp_intPlayer) == 4)) {
            lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_DFA91EB8") + IntToText(libPEEP_gv_recGameState.lv_intNumMatchesPlayed));
        }
        else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, lp_intPlayer) == 5)) {
            lv_txtMessage = (StringToText(StringCase(libPEEP_gv_recGlobals.lv_strMapName, true)) + StringExternal("Param/Value/lib_PEEP_104316DE"));
            lv_txtMessage = (lv_txtMessage + IntToText(libPEEP_gv_recGameState.lv_intNumMatchesPlayed));
        }
        lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_751BDEC4") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_DDBCE1C9"));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diNamePanel2MessageLabel, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
    }
}

void libPEEP_gf_RefreshNamePanelPositionforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intYDelta;
    int lv_intIndex;
    int lv_intY;
    int lv_intSelectedPosition;
    int lv_intHighCenterImagePosition;
    int lv_intMediumCenterImagePosition;
    int lv_intHighRotatingImagePosition;
    int lv_intMediumRotatingImagePosition;

    // Automatic Variable Declarations
    int auto9BEE958B_ae;
    const int auto9BEE958B_ai = 1;

    // Variable Initialization
    lv_intHighCenterImagePosition = -25;
    lv_intMediumCenterImagePosition = -18;
    lv_intHighRotatingImagePosition = -15;
    lv_intMediumRotatingImagePosition = -2;

    // Implementation
    lv_intSelectedPosition = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown, lp_intPlayer);
    lv_intYDelta = libPEEP_gv_recGlobals.lv_intNamePanelPositionOffsets[lv_intSelectedPosition];
    auto9BEE958B_ae = libPEEP_gv_recUI.lv_intNumNamePanel2Elements;
    lv_intIndex = 1;
    for ( ; ( (auto9BEE958B_ai >= 0 && lv_intIndex <= auto9BEE958B_ae) || (auto9BEE958B_ai < 0 && lv_intIndex >= auto9BEE958B_ae) ) ; lv_intIndex += auto9BEE958B_ai ) {
        lv_intY = (libPEEP_gv_recUI.lv_diNamePanel2ElementYStartList[lv_intIndex] + lv_intYDelta);
        DialogControlSetPosition(libPEEP_gv_recUI.lv_diNamePanel2ElementList[lv_intIndex], PlayerGroupSingle(lp_intPlayer), c_anchorTop, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diNamePanel2ElementList[lv_intIndex], lp_intPlayer), lv_intY);
    }
    if ((lv_intSelectedPosition == 1)) {
        DialogControlSetPosition(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, PlayerGroupSingle(lp_intPlayer), c_anchorTop, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, lp_intPlayer), lv_intHighCenterImagePosition);
        DialogControlSetPosition(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, PlayerGroupSingle(lp_intPlayer), c_anchorTop, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, lp_intPlayer), lv_intHighRotatingImagePosition);
    }
    else if ((lv_intSelectedPosition == 2)) {
        DialogControlSetPosition(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, PlayerGroupSingle(lp_intPlayer), c_anchorTop, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, lp_intPlayer), lv_intMediumCenterImagePosition);
        DialogControlSetPosition(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, PlayerGroupSingle(lp_intPlayer), c_anchorTop, DialogControlGetOffsetX(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, lp_intPlayer), lv_intMediumRotatingImagePosition);
    }
}

void libPEEP_gf_RefreshNamePanelStyleforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gf_RefreshNamePanelMainforPlayer(lp_intPlayer);
}

void libPEEP_gf_RefreshNamePanelMainGraphicforPlayer (int lp_intPlayer) {
    // Variable Declarations
    string lv_imgThisImage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_imgThisImage = "Assets\\Textures\\namepanel_title_vs.dds";
    if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 1)) {
        lv_imgThisImage = "Assets\\Textures\\namepanel_title_vs.dds";
    }
    else if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 2)) {
        lv_imgThisImage = "Assets\\Textures\\namepanel_title_vs.dds";
    }
    else if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 3)) {
        lv_imgThisImage = "Assets\\Textures\\namepanel_title_ffa.dds";
    }
    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, lv_imgThisImage, PlayerGroupSingle(lp_intPlayer));
}

void libPEEP_gf_InitializeNavButtons () {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gv_recUI.lv_recNavButtons[1].lv_txtLabel = StringExternal("Param/Value/lib_PEEP_B2FE1F6F");
    libPEEP_gv_recUI.lv_recNavButtons[1].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_D7871638") + TextWithColor(StringExternal("Param/Value/lib_PEEP_4CC9A8E5"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_85F097C9"));
    libPEEP_gv_recUI.lv_recNavButtons[2].lv_txtLabel = StringExternal("Param/Value/lib_PEEP_437DD1B1");
    libPEEP_gv_recUI.lv_recNavButtons[2].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_3A30F353") + TextWithColor(StringExternal("Param/Value/lib_PEEP_1A6E0B9D"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_717FB2D5"));
    libPEEP_gv_recUI.lv_recNavButtons[3].lv_txtLabel = StringExternal("Param/Value/lib_PEEP_EABE45C6");
    libPEEP_gv_recUI.lv_recNavButtons[3].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_D3C1552E") + TextWithColor(StringExternal("Param/Value/lib_PEEP_70D9D072"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_A08C2FA8"));
    libPEEP_gv_recUI.lv_recNavButtons[4].lv_txtLabel = StringExternal("Param/Value/lib_PEEP_7004C263");
    libPEEP_gv_recUI.lv_recNavButtons[4].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_74D03FEE") + TextWithColor(StringExternal("Param/Value/lib_PEEP_56E1C8F5"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_8522BA3C"));
    libPEEP_gv_recUI.lv_recNavButtons[5].lv_txtLabel = StringExternal("Param/Value/lib_PEEP_7B44C52D");
    libPEEP_gv_recUI.lv_recNavButtons[5].lv_txtTooltip = (StringExternal("Param/Value/lib_PEEP_99B1B715") + TextWithColor(StringExternal("Param/Value/lib_PEEP_214679D5"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_A8A0F18F"));
    libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS = 5;
}

void libPEEP_gf_CreateNavButtons () {
    // Variable Declarations
    int lv_intY;
    int lv_intX;
    int lv_intButtonNum;
    int lv_intPlayer;
    int lv_intThisButtonNum;

    // Automatic Variable Declarations
    int auto0B580C7C_ae;
    const int auto0B580C7C_ai = 1;
    int auto327505A3_ae;
    const int auto327505A3_ai = 1;
    int auto061441FA_ae;
    const int auto061441FA_ai = 1;

    // Variable Initialization
    lv_intY = 3;

    // Implementation
    lv_intX = 3;
    lv_intY = 3;
    auto0B580C7C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS;
    lv_intButtonNum = 1;
    for ( ; ( (auto0B580C7C_ai >= 0 && lv_intButtonNum <= auto0B580C7C_ae) || (auto0B580C7C_ai < 0 && lv_intButtonNum >= auto0B580C7C_ae) ) ; lv_intButtonNum += auto0B580C7C_ai ) {
        libNtve_gf_DisplayScreenButton(lv_intButtonNum, StringToText(""), libPEEP_gv_recGlobals.lv_intNavButtonWidth, libPEEP_gv_recGlobals.lv_intNavButtonHeight, c_anchorTopLeft, lv_intX, lv_intY, null);
        libPEEP_gv_recUI.lv_recNavButtons[lv_intButtonNum].lv_diButton = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_ButtonsNav, c_playerAny, libPEEP_gv_recUI.lv_recNavButtons[lv_intButtonNum].lv_diButton, c_triggerControlEventTypeClick);
        libNtve_gf_SetScreenButtonBorderImage(lv_intButtonNum, "Assets\\Textures\\ui_gamemenu_topbuttons_normalpressed.dds", "Assets\\Textures\\ui_gamemenu_topbuttons_normaloverpressedover.dds", c_triggerImageTypeEndCap);
        lv_intX += (libPEEP_gv_recGlobals.lv_intNavButtonWidth + libPEEP_gv_recGlobals.lv_intNavButtonPadding);
    }
    lv_intX = 814;
    lv_intY = 1;
    auto327505A3_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto327505A3_ai >= 0 && lv_intPlayer <= auto327505A3_ae) || (auto327505A3_ai < 0 && lv_intPlayer >= auto327505A3_ae) ) ; lv_intPlayer += auto327505A3_ai ) {
        auto061441FA_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS;
        lv_intButtonNum = 1;
        for ( ; ( (auto061441FA_ai >= 0 && lv_intButtonNum <= auto061441FA_ae) || (auto061441FA_ai < 0 && lv_intButtonNum >= auto061441FA_ae) ) ; lv_intButtonNum += auto061441FA_ai ) {
            libNtve_gf_SetDialogItemColor(libNtve_gf_ScreenButton(lv_intButtonNum), libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor, PlayerGroupSingle(lv_intPlayer));
            libNtve_gf_SetDialogItemText(libNtve_gf_ScreenButton(lv_intButtonNum), TextWithColor(libPEEP_gv_recUI.lv_recNavButtons[lv_intButtonNum].lv_txtLabel, libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceTextColor), PlayerGroupSingle(lv_intPlayer));
            libNtve_gf_SetDialogItemTooltip(libNtve_gf_ScreenButton(lv_intButtonNum), libPEEP_gv_recUI.lv_recNavButtons[lv_intButtonNum].lv_txtTooltip, PlayerGroupSingle(lv_intPlayer));
        }
    }
    libPEEP_gf_HideAllNavButtonsforAllPlayers();
}

void libPEEP_gf_HideAllNavButtonsforAllPlayers () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto0FA03955_ae;
    const int auto0FA03955_ai = 1;

    // Variable Initialization

    // Implementation
    auto0FA03955_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS;
    lv_intIndex = 1;
    for ( ; ( (auto0FA03955_ai >= 0 && lv_intIndex <= auto0FA03955_ae) || (auto0FA03955_ai < 0 && lv_intIndex >= auto0FA03955_ae) ) ; lv_intIndex += auto0FA03955_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_recNavButtons[lv_intIndex].lv_diButton, PlayerGroupAll(), false);
    }
}

void libPEEP_gf_ShowNavButtonsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto309D8C93_ae;
    const int auto309D8C93_ai = 1;

    // Variable Initialization

    // Implementation
    auto309D8C93_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS;
    lv_intIndex = 1;
    for ( ; ( (auto309D8C93_ai >= 0 && lv_intIndex <= auto309D8C93_ae) || (auto309D8C93_ai < 0 && lv_intIndex >= auto309D8C93_ae) ) ; lv_intIndex += auto309D8C93_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_recNavButtons[lv_intIndex].lv_diButton, PlayerGroupSingle(lp_intPlayer), true);
    }
}

void libPEEP_gf_HideNavButtonsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoCD8ABF28_ae;
    const int autoCD8ABF28_ai = 1;

    // Variable Initialization

    // Implementation
    autoCD8ABF28_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_NAV_BUTTONS;
    lv_intIndex = 1;
    for ( ; ( (autoCD8ABF28_ai >= 0 && lv_intIndex <= autoCD8ABF28_ae) || (autoCD8ABF28_ai < 0 && lv_intIndex >= autoCD8ABF28_ae) ) ; lv_intIndex += autoCD8ABF28_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_recNavButtons[lv_intIndex].lv_diButton, PlayerGroupSingle(lp_intPlayer), false);
    }
}

void libPEEP_gf_ShowFairMessageLogButtonforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diHideFairMessageLogCheckbox, lp_intPlayer) == false)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dFairMessageLogButtonDialog, PlayerGroupSingle(lp_intPlayer), true);
    }

}

void libPEEP_gf_HideFairMessageLogButtonforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dFairMessageLogButtonDialog, PlayerGroupSingle(lp_intPlayer), false);
}

void libPEEP_gf_ApplyZoomtoPlayerCam (int lp_intPlayer, fixed lp_realSpeed) {
    // Variable Declarations
    fixed lv_realCameraFOV;
    fixed lv_realMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realMultiplier = 4.5;

    // Implementation
    lv_realCameraFOV = (27.7998 + (IntToFixed(libPEEP_gv_recPlayers[lp_intPlayer].lv_intZoomIndex) * lv_realMultiplier));
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        lv_realCameraFOV = (lv_realCameraFOV / 4.0);
        lv_realCameraFOV = (lv_realCameraFOV + 10.0);
    }

    CameraSetValue(lp_intPlayer, c_cameraValueFieldOfView, lv_realCameraFOV, lp_realSpeed, -1, 10);
    libPEEP_gf_RefreshFloatingIconsforPlayer(lp_intPlayer);
}

void libPEEP_gf_RefreshObserverPulldown () {
    // Variable Declarations
    int lv_intTeam;
    int lv_intTmpPlayer;
    int lv_intPulldownIndex;
    bool lv_boolAtLeastOnePlayerInGame;
    int lv_intIndex;
    int lv_intIndex2;
    text lv_txtMessage;
    int lv_intMatch;

    // Automatic Variable Declarations
    const int autoCD3BD11E_ae = 20;
    const int autoCD3BD11E_ai = 1;
    int auto29B6FD16_ae;
    const int auto29B6FD16_ai = 1;
    int auto46670E7A_ae;
    const int auto46670E7A_ai = 1;
    int auto57175406_ae;
    const int auto57175406_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    lv_intIndex = 1;
    for ( ; ( (autoCD3BD11E_ai >= 0 && lv_intIndex <= autoCD3BD11E_ae) || (autoCD3BD11E_ai < 0 && lv_intIndex >= autoCD3BD11E_ae) ) ; lv_intIndex += autoCD3BD11E_ai ) {
        libPEEP_gv_recUI.lv_intObserverPulldownTeams[lv_intIndex] = 0;
        libPEEP_gv_recUI.lv_intObserverPulldownPlayers[lv_intIndex] = 0;
    }
    DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll());
    DialogControlAddItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_B1FB3088"));
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), 1);
    lv_intPulldownIndex = 2;
    auto29B6FD16_ae = libPEEP_gv_recGameState.lv_intNumPlayingTeams;
    lv_intIndex = 1;
    for ( ; ( (auto29B6FD16_ai >= 0 && lv_intIndex <= auto29B6FD16_ae) || (auto29B6FD16_ai < 0 && lv_intIndex >= auto29B6FD16_ae) ) ; lv_intIndex += auto29B6FD16_ai ) {
        lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex];
        lv_boolAtLeastOnePlayerInGame = false;
        auto46670E7A_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_intIndex2 = 1;
        for ( ; ( (auto46670E7A_ai >= 0 && lv_intIndex2 <= auto46670E7A_ae) || (auto46670E7A_ai < 0 && lv_intIndex2 >= auto46670E7A_ae) ) ; lv_intIndex2 += auto46670E7A_ai ) {
            if ((libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2]].lv_boolPlayingMatch == true)) {
                lv_boolAtLeastOnePlayerInGame = true;
                break;
            }

        }
        if ((lv_boolAtLeastOnePlayerInGame == true)) {
            libPEEP_gv_recUI.lv_intObserverPulldownTeams[lv_intPulldownIndex] = lv_intTeam;
            lv_intPulldownIndex += 1;
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 1)) {
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_3DC9A9A2") + libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_AE051BF8") + libPEEP_gf_makeTeamList(lv_intTeam) + StringExternal("Param/Value/lib_PEEP_A44E96B9"));
            }
            else {
                lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_6D6F02FE") + libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_txtPlayerName);
            }
            DialogControlAddItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), lv_txtMessage);
        }

    }
    libPEEP_gv_recUI.lv_intObserverPulldownFollowIndex = lv_intPulldownIndex;
    auto57175406_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto57175406_ai >= 0 && lv_intIndex <= auto57175406_ae) || (auto57175406_ai < 0 && lv_intIndex >= auto57175406_ae) ) ; lv_intIndex += auto57175406_ai ) {
        lv_intTmpPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == true)) {
            libPEEP_gv_recUI.lv_intObserverPulldownPlayers[lv_intPulldownIndex] = lv_intTmpPlayer;
            lv_intPulldownIndex += 1;
            lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_E4F60221") + libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_txtPlayerName);
            DialogControlAddItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), lv_txtMessage);
        }

    }
}

void libPEEP_gf_CreateObserverDialog () {
    // Variable Declarations
    int lv_intY;
    int lv_intX;
    text lv_txtMessage;
    fixed lv_rEALtMP;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intY = 42;

    // Implementation
    DialogCreate(1500, 250, c_anchorTopLeft, 0, 0, true);
    libPEEP_gv_recUI.lv_dObserverDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dObserverDialog, false);
    DialogControlCreate(libPEEP_gv_recUI.lv_dObserverDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diObserverVisionPulldown = DialogControlLastCreated();
    DialogControlSetSize(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), 200, 44);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), c_anchorTopLeft, 0, (lv_intY - 5));
    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diObserverVisionPulldown, (StringExternal("Param/Value/lib_PEEP_47ECC7C8") + TextWithColor(StringExternal("Param/Value/lib_PEEP_D6431CD9"), (Color(100,100,100))) + TextWithColor(StringExternal("Param/Value/lib_PEEP_58687822"), (Color(149*100/255,150*100/255,151*100/255))) + TextWithColor(StringExternal("Param/Value/lib_PEEP_308D6307"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_CC7EBB20")), PlayerGroupAll());
    lv_intX = 200;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_030682D5") + TextWithColor(StringExternal("Param/Value/lib_PEEP_61EDACF6"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_4DBAA9FE")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diCinematicButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\btn-ability-protoss-hallucination.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diCinematicIcon = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    lv_intX = (lv_intX + 31);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_E976FEA7") + TextWithColor(StringExternal("Param/Value/lib_PEEP_94924F20"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_854F3270"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_FF0E7FB6") + TextWithColor(StringExternal("Param/Value/lib_PEEP_E54A925A"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_04CA8C7F"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_28E2E85A") + TextWithColor(StringExternal("Param/Value/lib_PEEP_52FCF32F"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_81C8D8DA"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_DB217CF9") + TextWithColor(StringExternal("Param/Value/lib_PEEP_93B884E7"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_E2BFE41D"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_19B341BE") + TextWithColor(StringExternal("Param/Value/lib_PEEP_BCB85068"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_34FC11F9"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_3AA2D049") + TextWithColor(StringExternal("Param/Value/lib_PEEP_74BC2B72"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_40EAA231"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_20EAC59E") + TextWithColor(StringExternal("Param/Value/lib_PEEP_3D29DF75"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_AD754A19"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_D0AF2E0D") + TextWithColor(StringExternal("Param/Value/lib_PEEP_72670997"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_85B18927"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_15A011F5") + TextWithColor(StringExternal("Param/Value/lib_PEEP_5654013F"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_C8A897CC"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_txtMessage, PlayerGroupAll());
    libPEEP_gv_recUI.lv_diZoomOut = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\btn-ability-terran-liftoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diZoomOutIcon = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_intX = (lv_intX + 31);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_B2617B0C") + TextWithColor(StringExternal("Param/Value/lib_PEEP_3297A1F4"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_9D7C187F"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_AE1FC65C") + TextWithColor(StringExternal("Param/Value/lib_PEEP_F2FF2ACB"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_AB10CE71"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_9E21A7C6") + TextWithColor(StringExternal("Param/Value/lib_PEEP_8113868B"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_9DDA19AD"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_1F6446B0") + TextWithColor(StringExternal("Param/Value/lib_PEEP_1FFECED3"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_B880DC08"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_74A47CCA") + TextWithColor(StringExternal("Param/Value/lib_PEEP_E17B2873"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_8FFF0975"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_A05C9816") + TextWithColor(StringExternal("Param/Value/lib_PEEP_E0523771"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_D9C21233"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_E5A6DB9E") + TextWithColor(StringExternal("Param/Value/lib_PEEP_1326E473"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_B2F187F5"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_1D099B6E") + TextWithColor(StringExternal("Param/Value/lib_PEEP_08C02249"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_F7DE1858"));
    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_9F8C9611") + TextWithColor(StringExternal("Param/Value/lib_PEEP_1011B491"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_5689986E"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_txtMessage, PlayerGroupAll());
    libPEEP_gv_recUI.lv_diZoomIn = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\btn-ability-terran-land.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diZoomInIcon = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_intX = (lv_intX + 38);
    libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dObserverDialog, 50, 50, c_anchorTopLeft, lv_intX, (lv_intY - 8), StringToText(""), false);
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_2D3AE749") + TextWithColor(StringExternal("Param/Value/lib_PEEP_81919C8C"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_41D30052"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_txtMessage, PlayerGroupAll());
    libPEEP_gv_recUI.lv_diAutoCamCheckbox = DialogControlLastCreated();
    lv_intX = (lv_intX + 38);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 35, 35, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\ui_tutorial_cameraicon2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_8B8D7C7D") + TextWithColor(StringExternal("Param/Value/lib_PEEP_2A5F1870"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_ED4DA43E"));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_txtMessage, PlayerGroupAll());
    libPEEP_gv_recUI.lv_diAutoCamIcon = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_intX = (lv_intX + 38);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dObserverDialog, 800, 50, c_anchorTopLeft, lv_intX, 82, StringExternal("Param/Value/lib_PEEP_506B5D85"), Color(100,100,100), true, 3.0);
    libPEEP_gv_recUI.lv_diAutoCamAlertLabel = DialogControlLastCreated();
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diAutoCamAlertLabel, PlayerGroupAll(), false);
    lv_intX = 385;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_27573417") + TextWithColor(StringExternal("Param/Value/lib_PEEP_0A056F4B"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_F00BD4D8")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diObserverBlizzButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 28, 28, c_anchorTopLeft, (lv_intX + 2), (lv_intY + 2), StringToText(""), "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diObserverBlizzIcon = DialogControlLastCreated();
    lv_intX = (lv_intX + 31);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_FCCB7A88") + TextWithColor(StringExternal("Param/Value/lib_PEEP_B5B867CF"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_8E05245A")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diObserverLogsButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 28, 28, c_anchorTopLeft, (lv_intX + 2), (lv_intY + 2), StringToText(""), "Assets\\Textures\\btn-ability-terran-snipe-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diObserverLogsIcon = DialogControlLastCreated();
    lv_intX = (lv_intX + 31);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_4B0C5BA1") + TextWithColor(StringExternal("Param/Value/lib_PEEP_761049A4"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_DCFE04EA")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diObserverStatsButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 28, 28, c_anchorTopLeft, (lv_intX + 2), (lv_intY + 2), StringToText(""), "Assets\\Textures\\icon-mineral-nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diObserverStatsIcon = DialogControlLastCreated();
    lv_intX = (lv_intX + 47);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringExternal("Param/Value/lib_PEEP_AA704835"), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_E1604550") + TextWithColor(StringExternal("Param/Value/lib_PEEP_99A2F6B2"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_D88CFA6B")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diObserverBettingButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 28, 28, c_anchorTopLeft, (lv_intX + 3), (lv_intY + 3), StringToText(""), "Assets\\Textures\\btn-tips-credit.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diObserverBettingIcon = DialogControlLastCreated();
    lv_intX = (lv_intX + 31);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dObserverDialog, 34, 34, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_B6C158EC") + TextWithColor(StringExternal("Param/Value/lib_PEEP_C997FDD1"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_7357D5E0")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diObserverLeaderboardButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonLeaderboard, c_playerAny, libPEEP_gv_recUI.lv_diObserverLeaderboardButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dObserverDialog, 24, 24, c_anchorTopLeft, (lv_intX + 5), (lv_intY + 5), StringToText(""), "Assets\\Textures\\crown.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diObserverLeaderboardIcon = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownObserverVision, c_playerAny, libPEEP_gv_recUI.lv_diObserverVisionPulldown, c_triggerControlEventTypeSelectionChanged);
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxAutoCam, c_playerAny, libPEEP_gv_recUI.lv_diAutoCamCheckbox, c_triggerControlEventTypeChecked);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonZoomIn, c_playerAny, libPEEP_gv_recUI.lv_diZoomIn, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonZoomOut, c_playerAny, libPEEP_gv_recUI.lv_diZoomOut, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonCinematicMode, c_playerAny, libPEEP_gv_recUI.lv_diCinematicButton, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonBlizzUI, c_playerAny, libPEEP_gv_recUI.lv_diObserverBlizzButton, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonLogs, c_playerAny, libPEEP_gv_recUI.lv_diObserverLogsButton, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonStats, c_playerAny, libPEEP_gv_recUI.lv_diObserverStatsButton, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonBetting, c_playerAny, libPEEP_gv_recUI.lv_diObserverBettingButton, c_triggerControlEventTypeClick);
}

void libPEEP_gf_CameraYawLeftforPlayer (int lp_intPlayer) {
    // Variable Declarations
    fixed lv_realStep;
    fixed lv_realNewValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realStep = 22.5;

    // Implementation
    lv_realNewValue = (CameraGetYaw(lp_intPlayer) - lv_realStep);
    lv_realNewValue = libPEEP_gf_roundRealToNearestIncrement(lv_realNewValue, lv_realStep);
    CameraSetValue(lp_intPlayer, c_cameraValueYaw, lv_realNewValue, 1.0, -1, 10);
}

void libPEEP_gf_CameraYawRightforPlayer (int lp_intPlayer) {
    // Variable Declarations
    fixed lv_realStep;
    fixed lv_realNewValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realStep = 22.5;

    // Implementation
    lv_realNewValue = (CameraGetYaw(lp_intPlayer) + lv_realStep);
    lv_realNewValue = libPEEP_gf_roundRealToNearestIncrement(lv_realNewValue, lv_realStep);
    CameraSetValue(lp_intPlayer, c_cameraValueYaw, lv_realNewValue, 1.0, -1, 10);
}

void libPEEP_gf_CameraPitchUpforPlayer (int lp_intPlayer) {
    // Variable Declarations
    fixed lv_realCurrentPitch;
    fixed lv_realStep;
    fixed lv_realNewValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realStep = 15.0;

    // Implementation
    lv_realCurrentPitch = CameraGetPitch(lp_intPlayer);
    if ((lv_realCurrentPitch <= 76.0)) {
        lv_realNewValue = (CameraGetPitch(lp_intPlayer) + lv_realStep);
        lv_realNewValue = libPEEP_gf_roundRealToNearestIncrement(lv_realNewValue, lv_realStep);
        CameraSetValue(lp_intPlayer, c_cameraValuePitch, lv_realNewValue, 1.0, -1, 10);
    }

}

void libPEEP_gf_CameraPitchDownforPlayer (int lp_intPlayer) {
    // Variable Declarations
    fixed lv_realCurrentPitch;
    fixed lv_realStep;
    fixed lv_realNewValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realStep = 15.0;

    // Implementation
    lv_realCurrentPitch = CameraGetPitch(lp_intPlayer);
    if ((lv_realCurrentPitch >= 26.0)) {
        lv_realNewValue = (CameraGetPitch(lp_intPlayer) - lv_realStep);
        lv_realNewValue = libPEEP_gf_roundRealToNearestIncrement(lv_realNewValue, lv_realStep);
        CameraSetValue(lp_intPlayer, c_cameraValuePitch, lv_realNewValue, 1.0, -1, 10);
    }

}

void libPEEP_gf_ResetCameratoDefaultAngleforPlayer (int lp_intPlayer) {
    // Variable Declarations
    fixed lv_realCurrentPitch;
    fixed lv_realStep;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realStep = 20.0;

    // Implementation
    CameraSetValue(lp_intPlayer, c_cameraValueYaw, 90.0, 1.0, -1, 10);
    CameraSetValue(lp_intPlayer, c_cameraValuePitch, 56.0, 1.0, -1, 10);
}

void libPEEP_gf_ResetCameratoDefaultViewforPlayer (int lp_intPlayer) {
    // Variable Declarations
    fixed lv_realCurrentPitch;
    fixed lv_realStep;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realStep = 20.0;

    // Implementation
    CameraSetValue(lp_intPlayer, c_cameraValueYaw, 90.0, 1.0, -1, 10);
    CameraSetValue(lp_intPlayer, c_cameraValuePitch, 56.0, 1.0, -1, 10);
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intZoomIndex = 0;
    libPEEP_gf_ApplyZoomtoPlayerCam(lp_intPlayer, 1.0);
}

fixed libPEEP_gf_roundRealToNearestIncrement (fixed lp_realNumber, fixed lp_realIncrement) {
    // Variable Declarations
    fixed lv_realBase;
    fixed lv_realDifference;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_realBase = Floor((lp_realNumber / lp_realIncrement));
    lv_realDifference = (lp_realNumber - (lv_realBase * lp_realIncrement));
    if ((lv_realDifference >= (lp_realIncrement / 2.0))) {
        lv_realBase += 1.0;
    }

    return (lv_realBase * lp_realIncrement);
}

void libPEEP_gf_CreateChangePlayerNamesDialog () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intX;
    int lv_intY;
    int lv_intYDelta;
    int lv_intTmpMatchMode;
    int lv_intCurrentIndex;
    bool lv_boolDisabled;
    text lv_txtMessage;
    int lv_diTmpItem1;
    int lv_diTmpItem2;

    // Automatic Variable Declarations
    int auto32A7A78D_ae;
    const int auto32A7A78D_ai = 1;

    // Variable Initialization
    lv_intDialogWidth = 500;
    lv_intDialogHeight = 780;
    lv_intY = 55;
    lv_intYDelta = 35;
    lv_diTmpItem1 = c_invalidDialogControlId;
    lv_diTmpItem2 = c_invalidDialogControlId;

    // Implementation
    DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTopLeft, 230, 175, true);
    libPEEP_gv_recUI.lv_dChangePlayerValuesDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diChangePlayerValuesDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXChangePlayerNamesDialog, c_playerAny, libPEEP_gv_recUI.lv_diChangePlayerValuesDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, libPEEP_gv_recGlobals.lv_intDialogHeaderHeight, c_anchorTop, 0, lv_intY, StringExternal("Param/Value/lib_PEEP_1DF8BF2F"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    lv_intY -= 5;
    auto32A7A78D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intIndex = 1;
    for ( ; ( (auto32A7A78D_ai >= 0 && lv_intIndex <= auto32A7A78D_ae) || (auto32A7A78D_ai < 0 && lv_intIndex >= auto32A7A78D_ae) ) ; lv_intIndex += auto32A7A78D_ai ) {
        lv_intX = 50;
        lv_intY += 50;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 140, 50, c_anchorTopLeft, lv_intX, (lv_intY + 15), TextWithColor(PlayerName(lv_intIndex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intIndex, false))), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
        libPEEP_gv_recUI.lv_diChangePlayerNameLabels[lv_intIndex] = DialogControlLastCreated();
        lv_intX += 150;
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
        libPEEP_gv_recUI.lv_diChangePlayerNameChangeTextboxes[lv_intIndex] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_TextboxPlayerName, c_playerAny, libPEEP_gv_recUI.lv_diChangePlayerNameChangeTextboxes[lv_intIndex], c_triggerControlEventTypeTextChanged);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, lv_intY);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 260, 50);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    }
    DialogSetSize(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), (lv_intY + 95));
    DialogControlSetSize(lv_diTmpItem1, PlayerGroupAll(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60));
    DialogControlSetSize(lv_diTmpItem2, PlayerGroupAll(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60));
}

void libPEEP_gf_CreateNamePanelOptionsDialog () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intYOffset;
    int lv_intYDelta;
    int lv_intTmpMatchMode;
    int lv_intCurrentIndex;
    bool lv_boolDisabled;
    text lv_txtMessage;
    int lv_diTmpItem1;
    int lv_diTmpItem2;

    // Automatic Variable Declarations
    int autoAC758B98_ae;
    const int autoAC758B98_ai = 1;
    int auto2CDC583A_ae;
    const int auto2CDC583A_ai = 1;
    int auto278D4279_ae;
    const int auto278D4279_ai = 1;

    // Variable Initialization
    lv_intDialogWidth = 500;
    lv_intDialogHeight = 780;
    lv_intYOffset = 80;
    lv_intYDelta = 35;
    lv_diTmpItem1 = c_invalidDialogControlId;
    lv_diTmpItem2 = c_invalidDialogControlId;

    // Implementation
    DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTopLeft, 150, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dCustNamePanelDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diCustNamePanelDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXNamePanelOptionsDialog, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 450, libPEEP_gv_recGlobals.lv_intDialogHeaderHeight, c_anchorTop, 0, 44, StringExternal("Param/Value/lib_PEEP_23417A8C"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    lv_intYOffset += 10;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_675399E5"), StringExternal("Param/Value/lib_PEEP_75D2D8AB"), "");
    libPEEP_gv_recUI.lv_diCustNamePanelChangePlayerValsButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonChangePlayerValues, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelChangePlayerValsButton, c_triggerControlEventTypeClick);
    lv_intYOffset += 75;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_2F745E36"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownNamePanelPosition, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, (lv_intYOffset - 15));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 50);
    autoAC758B98_ae = libPEEP_gv_recGlobals.lv_intNumNamePanelPositionNames;
    lv_intIndex = 1;
    for ( ; ( (autoAC758B98_ai >= 0 && lv_intIndex <= autoAC758B98_ae) || (autoAC758B98_ai < 0 && lv_intIndex >= autoAC758B98_ae) ) ; lv_intIndex += autoAC758B98_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), libPEEP_gv_recGlobals.lv_txtNamePanelPositionNames[lv_intIndex]);
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 2);
    lv_intYOffset += 45;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_19EF3B0F"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownNamePanelStyle, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, (lv_intYOffset - 15));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 50);
    auto2CDC583A_ae = libPEEP_gv_recGlobals.lv_intNumNamePanelColorStyleNames;
    lv_intIndex = 1;
    for ( ; ( (auto2CDC583A_ai >= 0 && lv_intIndex <= auto2CDC583A_ae) || (auto2CDC583A_ai < 0 && lv_intIndex >= auto2CDC583A_ae) ) ; lv_intIndex += auto2CDC583A_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), libPEEP_gv_recGlobals.lv_txtNamePanelColorStyleNames[lv_intIndex]);
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    lv_intYOffset += 45;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_E2A5097D"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownNamePanelMessage, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, (lv_intYOffset - 15));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 50);
    auto278D4279_ae = libPEEP_gv_recGlobals.lv_intNumNamePanelMessageStyleNames;
    lv_intIndex = 1;
    for ( ; ( (auto278D4279_ai >= 0 && lv_intIndex <= auto278D4279_ae) || (auto278D4279_ai < 0 && lv_intIndex >= auto278D4279_ae) ) ; lv_intIndex += auto278D4279_ai ) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), libPEEP_gv_recGlobals.lv_txtNamePanelMessageStyleNames[lv_intIndex]);
    }
    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    lv_intYOffset += 49;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_13A5889D"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_TextboxCustomMessage, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox, c_triggerControlEventTypeTextChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, (lv_intYOffset - 15));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
    lv_intYOffset += 49;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_8EE4A7E5"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 115, 50);
    TriggerAddEventDialogControl(libPEEP_gt_TextboxCustomScores, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[1], c_triggerControlEventTypeTextChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, (lv_intYOffset - 15));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 115, 50);
    TriggerAddEventDialogControl(libPEEP_gt_TextboxCustomScores, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[2], c_triggerControlEventTypeTextChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 325, (lv_intYOffset - 15));
    lv_intYOffset += 49;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_2089FF80"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[1] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 115, 50);
    TriggerAddEventDialogControl(libPEEP_gt_TextboxCustomPolls, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[1], c_triggerControlEventTypeTextChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, (lv_intYOffset - 15));
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[2] = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 115, 50);
    TriggerAddEventDialogControl(libPEEP_gt_TextboxCustomPolls, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[2], c_triggerControlEventTypeTextChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 325, (lv_intYOffset - 15));
    lv_intYOffset += 40;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_A756CD00"), true);
    libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxShowSupply, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_5C371A48"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_EAFCDF4C"), true);
    libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxShowScores, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_178E53A2"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_F3A12554"), false);
    libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxShowPolls, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_D56846C3"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_B0C2B9ED"), true);
    libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxShowBettingAmounts, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_F9E35852"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_A7C6F33B"), true);
    libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxShowTooltips, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_BB0404A3"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_C9C60717"), true);
    libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxRotateLogos, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_BBF6DADA"), Color(100,100,100), false, 2.0);
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 2)) {
        lv_intYOffset += (lv_intYDelta + 20);
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_6ECC957C"), StringExternal("Param/Value/lib_PEEP_492A379F"), "");
        libPEEP_gv_recUI.lv_diCustNamePanelApplyAllButton = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_ButtonApplyNamePanelSettingstoAll, c_playerAny, libPEEP_gv_recUI.lv_diCustNamePanelApplyAllButton, c_triggerControlEventTypeClick);
    }

    DialogSetSize(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), (lv_intYOffset + 95));
    DialogControlSetSize(lv_diTmpItem1, PlayerGroupAll(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60));
    DialogControlSetSize(lv_diTmpItem2, PlayerGroupAll(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60));
}

void libPEEP_gf_ApplyNamePanelSettingsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intNumElements;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intNumElements = 2;

    // Implementation
    libPEEP_gf_RefreshNamePanelExtras();
    libPEEP_gf_RefreshNamePanelMainforPlayer(lp_intPlayer);
    libPEEP_gf_RefreshNamePanelPositionforPlayer(lp_intPlayer);
    libPEEP_gf_RefreshNamePanelMessageforPlayer(lp_intPlayer);
    libPEEP_gf_RefreshNamePanelItemVisibilityforPlayer(lp_intPlayer);
}

void libPEEP_gf_SyncNamePanelSettingsfromPlayertoPlayer (int lp_intSourcePlayer, int lp_intDestPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto8A6837C1_ae;
    const int auto8A6837C1_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_intDestPlayer != lp_intSourcePlayer)) {
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown, PlayerGroupSingle(lp_intDestPlayer), DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelPositionPulldown, lp_intSourcePlayer));
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown, PlayerGroupSingle(lp_intDestPlayer), DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelStylePulldown, lp_intSourcePlayer));
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, PlayerGroupSingle(lp_intDestPlayer), DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diCustNamePanelMessagePulldown, lp_intSourcePlayer));
        libNtve_gf_SetDialogItemEditorValue(libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox, libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelMessageTextbox, lp_intSourcePlayer), PlayerGroupSingle(lp_intDestPlayer));
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, lp_intSourcePlayer) == true)) {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, true, PlayerGroupSingle(lp_intDestPlayer));
        }
        else {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowSupplyCheckbox, false, PlayerGroupSingle(lp_intDestPlayer));
        }
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, lp_intSourcePlayer) == true)) {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, true, PlayerGroupSingle(lp_intDestPlayer));
        }
        else {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowScoreCheckbox, false, PlayerGroupSingle(lp_intDestPlayer));
        }
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, lp_intSourcePlayer) == true)) {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, true, PlayerGroupSingle(lp_intDestPlayer));
        }
        else {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowPollCheckbox, false, PlayerGroupSingle(lp_intDestPlayer));
        }
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, lp_intSourcePlayer) == true)) {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, true, PlayerGroupSingle(lp_intDestPlayer));
        }
        else {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowBettingCheckbox, false, PlayerGroupSingle(lp_intDestPlayer));
        }
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, lp_intSourcePlayer) == true)) {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, true, PlayerGroupSingle(lp_intDestPlayer));
        }
        else {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelShowTooltipCheckbox, false, PlayerGroupSingle(lp_intDestPlayer));
        }
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, lp_intSourcePlayer) == true)) {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, true, PlayerGroupSingle(lp_intDestPlayer));
        }
        else {
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, false, PlayerGroupSingle(lp_intDestPlayer));
        }
        auto8A6837C1_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intIndex = 1;
        for ( ; ( (auto8A6837C1_ai >= 0 && lv_intIndex <= auto8A6837C1_ae) || (auto8A6837C1_ai < 0 && lv_intIndex >= auto8A6837C1_ae) ) ; lv_intIndex += auto8A6837C1_ai ) {
            libNtve_gf_SetDialogItemEditorValue(libPEEP_gv_recUI.lv_diChangePlayerNameChangeTextboxes[lv_intIndex], libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diChangePlayerNameChangeTextboxes[lv_intIndex], lp_intSourcePlayer), PlayerGroupSingle(lp_intDestPlayer));
            libNtve_gf_SetDialogItemEditorValue(libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[lv_intIndex], libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelScoreTextboxes[lv_intIndex], lp_intSourcePlayer), PlayerGroupSingle(lp_intDestPlayer));
            libNtve_gf_SetDialogItemEditorValue(libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[lv_intIndex], libNtve_gf_DialogItemEditValue(libPEEP_gv_recUI.lv_diCustNamePanelPollTextboxes[lv_intIndex], lp_intSourcePlayer), PlayerGroupSingle(lp_intDestPlayer));
        }
        libPEEP_gf_ApplyNamePanelSettingsforPlayer(lp_intDestPlayer);
    }

}

void libPEEP_gf_RefreshKickPlayerDialogforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto8CCDB35A_ae;
    const int auto8CCDB35A_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diKickPlayerPulldown, PlayerGroupSingle(lp_intPlayer));
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diKickPlayerConfirmButton, PlayerGroupSingle(lp_intPlayer), false);
    if (((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsCommentator == false))) {
        lv_intIndex += 1;
        DialogControlAddItem(libPEEP_gv_recUI.lv_diKickPlayerPulldown, PlayerGroupSingle(lp_intPlayer), StringExternal("Param/Value/lib_PEEP_10B01251"));
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intPlayerKickList[lv_intIndex] = 0;
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diKickPlayerPulldown, StringExternal("Param/Value/lib_PEEP_C4148BE2"), PlayerGroupSingle(lp_intPlayer));
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diKickPlayerPulldown, PlayerGroupSingle(lp_intPlayer), 1);
    }
    else {
        lv_intIndex += 1;
        DialogControlAddItem(libPEEP_gv_recUI.lv_diKickPlayerPulldown, PlayerGroupSingle(lp_intPlayer), StringExternal("Param/Value/lib_PEEP_E71DC1F9"));
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intPlayerKickList[lv_intIndex] = 0;
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diKickPlayerPulldown, StringExternal("Param/Value/lib_PEEP_9234587F"), PlayerGroupSingle(lp_intPlayer));
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diKickPlayerPulldown, PlayerGroupSingle(lp_intPlayer), 1);
        auto8CCDB35A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intTmpPlayer = 1;
        for ( ; ( (auto8CCDB35A_ai >= 0 && lv_intTmpPlayer <= auto8CCDB35A_ae) || (auto8CCDB35A_ai < 0 && lv_intTmpPlayer >= auto8CCDB35A_ae) ) ; lv_intTmpPlayer += auto8CCDB35A_ai ) {
            if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayersIWantKicked[lv_intTmpPlayer] == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsCommentator == false) && (lp_intPlayer != lv_intTmpPlayer) && ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayingMatch == false) || (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == false)))) {
                lv_intIndex += 1;
                DialogControlAddItem(libPEEP_gv_recUI.lv_diKickPlayerPulldown, PlayerGroupSingle(lp_intPlayer), TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false))));
                libPEEP_gv_recPlayers[lp_intPlayer].lv_intPlayerKickList[lv_intIndex] = lv_intTmpPlayer;
            }

        }
    }
}

void libPEEP_gf_CreateKickPlayerDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(350, 240, c_anchorTopLeft, 150, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dKickPlayerDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diKickPlayerDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXKickPlayerDialog, c_playerAny, libPEEP_gv_recUI.lv_diKickPlayerDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTop, 0, 35, StringExternal("Param/Value/lib_PEEP_1C2E0F12"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diKickPlayerPulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownKickPlayer, c_playerAny, libPEEP_gv_recUI.lv_diKickPlayerPulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 80);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 40, StringToText(""), StringExternal("Param/Value/lib_PEEP_2ED5C1C2"), "");
    libPEEP_gv_recUI.lv_diKickPlayerConfirmButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonConfirmKickPlayer, c_playerAny, libPEEP_gv_recUI.lv_diKickPlayerConfirmButton, c_triggerControlEventTypeClick);
}

void libPEEP_gf_CreateOptionTabsDialog () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intY;
    int lv_intWidth;

    // Automatic Variable Declarations
    int autoADA64FB0_ae;
    const int autoADA64FB0_ai = 1;

    // Variable Initialization
    lv_intWidth = 140;

    // Implementation
    DialogCreate(lv_intWidth, 320, c_anchorTopLeft, 10, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dOptionTabsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), DialogGetHeight(DialogLastCreated()), c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    lv_intY = 10;
    autoADA64FB0_ae = libPEEP_gv_recGlobals.lv_intNumOptionTabs;
    lv_intIndex = 1;
    for ( ; ( (autoADA64FB0_ai >= 0 && lv_intIndex <= autoADA64FB0_ae) || (autoADA64FB0_ai < 0 && lv_intIndex >= autoADA64FB0_ae) ) ; lv_intIndex += autoADA64FB0_ai ) {
        if (((libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE == 2) || (lv_intIndex < 6))) {
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_intWidth, 45, c_anchorTop, 0, lv_intY, libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTooltip, (StringToText("") + libPEEP_gv_recGlobals.lv_recOptionTabs[lv_intIndex].lv_txtTitle), "");
            libPEEP_gv_recUI.lv_diOptionTabsButtons[lv_intIndex] = DialogControlLastCreated();
            TriggerAddEventDialogControl(libPEEP_gt_ButtonsOptionTabs, c_playerAny, libPEEP_gv_recUI.lv_diOptionTabsButtons[lv_intIndex], c_triggerControlEventTypeClick);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CommandTooltipRequirements", PlayerGroupAll());
            lv_intY += 45;
        }

    }
}

void libPEEP_gf_CreateVotableOptionsDialog () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intHeaderWidth;
    int lv_intYOffset;
    int lv_intYDelta;
    int lv_intTmpMode;
    int lv_intCurrentIndex;
    bool lv_boolDisabled;
    text lv_txtMessage;
    int lv_intIndex2;
    int lv_intNumModes;
    int lv_diTmpItem1;
    int lv_diTmpItem2;

    // Automatic Variable Declarations
    int auto4F390571_ae;
    const int auto4F390571_ai = 1;
    int auto283EBDF9_ae;
    const int auto283EBDF9_ai = 1;
    int autoE5E47B06_ae;
    const int autoE5E47B06_ai = 1;
    int autoFA5B7356_ae;
    const int autoFA5B7356_ai = 1;
    int autoD04B0B68_ae;
    const int autoD04B0B68_ai = 1;
    int autoEE42E683_ae;
    const int autoEE42E683_ai = 1;

    // Variable Initialization
    lv_intDialogWidth = 500;
    lv_intDialogHeight = 780;
    lv_intHeaderWidth = (lv_intDialogWidth - libPEEP_gv_recGlobals.lv_intDialogExtra);
    lv_intYOffset = 50;
    lv_intYDelta = 35;
    lv_diTmpItem1 = c_invalidDialogControlId;
    lv_diTmpItem2 = c_invalidDialogControlId;

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 2)) {
        auto4F390571_ae = libPEEP_gv_recGlobals.lv_intNumMatchModes;
        lv_intIndex = 1;
        for ( ; ( (auto4F390571_ai >= 0 && lv_intIndex <= auto4F390571_ae) || (auto4F390571_ai < 0 && lv_intIndex >= auto4F390571_ae) ) ; lv_intIndex += auto4F390571_ai ) {
            if ((libPEEP_gv_recGlobals.lv_intMatchModeOrderList[lv_intIndex] > 3)) {
                auto283EBDF9_ae = libPEEP_gv_recGlobals.lv_intNumMatchModes;
                lv_intIndex2 = lv_intIndex;
                for ( ; ( (auto283EBDF9_ai >= 0 && lv_intIndex2 <= auto283EBDF9_ae) || (auto283EBDF9_ai < 0 && lv_intIndex2 >= auto283EBDF9_ae) ) ; lv_intIndex2 += auto283EBDF9_ai ) {
                    libPEEP_gv_recGlobals.lv_intMatchModeOrderList[lv_intIndex2] = libPEEP_gv_recGlobals.lv_intMatchModeOrderList[(lv_intIndex2 + 1)];
                }
            }
            else {
                lv_intNumModes += 1;
            }
        }
        libPEEP_gv_recGlobals.lv_intNumMatchModes = lv_intNumModes;
    }

    if ((libPEEP_gv_recGameState.lv_intGameStyle == 2)) {
        autoE5E47B06_ae = libPEEP_gv_recGlobals.lv_intNumPlayerSelectModes;
        lv_intIndex = 1;
        for ( ; ( (autoE5E47B06_ai >= 0 && lv_intIndex <= autoE5E47B06_ae) || (autoE5E47B06_ai < 0 && lv_intIndex >= autoE5E47B06_ae) ) ; lv_intIndex += autoE5E47B06_ai ) {
            lv_intIndex2 = ((libPEEP_gv_recGlobals.lv_intNumPlayerSelectModes - lv_intIndex) + 1);
            libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[(lv_intIndex2 + 1)] = libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[lv_intIndex2];
        }
        libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[1] = 7;
        libPEEP_gv_recGlobals.lv_intNumPlayerSelectModes += 1;
    }

    DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTopLeft, 150, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dOptionsDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, lv_intHeaderWidth, libPEEP_gv_recGlobals.lv_intDialogHeaderHeight, c_anchorTop, 0, 44, StringExternal("Param/Value/lib_PEEP_E250DD57"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 2)) {
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_51B5573C"), PlayerGroupAll());
    }

    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dOptionsDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diOptionsDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXOptionsDialog, c_playerAny, libPEEP_gv_recUI.lv_diOptionsDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dOptionsDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_intYOffset += 50;
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_F58DC7B9"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    DialogControlCreate(libPEEP_gv_recUI.lv_dOptionsDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diVotingMatchModePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownMatchMode, c_playerAny, libPEEP_gv_recUI.lv_diVotingMatchModePulldown, c_triggerControlEventTypeSelectionChanged);
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 1)) {
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_07720D3F"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_400D9D74"), PlayerGroupAll());
    }
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), c_anchorTopLeft, 160, (lv_intYOffset - 15));
    DialogControlSetSize(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), 220, 50);
    autoFA5B7356_ae = libPEEP_gv_recGlobals.lv_intNumMatchModes;
    lv_intIndex = 1;
    for ( ; ( (autoFA5B7356_ai >= 0 && lv_intIndex <= autoFA5B7356_ae) || (autoFA5B7356_ai < 0 && lv_intIndex >= autoFA5B7356_ae) ) ; lv_intIndex += autoFA5B7356_ai ) {
        lv_intTmpMode = libPEEP_gv_recGlobals.lv_intMatchModeOrderList[lv_intIndex];
        DialogControlAddItem(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_txtMatchModeNames[lv_intTmpMode]);
        if ((lv_intTmpMode == libPEEP_gv_recGameState.lv_intCurrentMatchMode)) {
            lv_intCurrentIndex = lv_intIndex;
        }

    }
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), lv_intCurrentIndex);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, lv_intYOffset);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_B84AD5B0"), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diVotingMatchModeLabel = DialogControlLastCreated();
    lv_intYOffset += 50;
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_46794FEA"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    DialogControlCreate(libPEEP_gv_recUI.lv_dOptionsDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownPlayerSelect, c_playerAny, libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, c_triggerControlEventTypeSelectionChanged);
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 1)) {
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_B6B67889"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_8D35C6C5"), PlayerGroupAll());
    }
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 160, (lv_intYOffset - 15));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 220, 50);
    autoD04B0B68_ae = libPEEP_gv_recGlobals.lv_intNumPlayerSelectModes;
    lv_intIndex = 1;
    for ( ; ( (autoD04B0B68_ai >= 0 && lv_intIndex <= autoD04B0B68_ae) || (autoD04B0B68_ai < 0 && lv_intIndex >= autoD04B0B68_ae) ) ; lv_intIndex += autoD04B0B68_ai ) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_recPlayerSelectModes[libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[lv_intIndex]].lv_txtName);
    }
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, PlayerGroupAll(), 1);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, lv_intYOffset);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_0C602BEB"), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diVotingPlayerSelectModeLabel = DialogControlLastCreated();
    lv_intYOffset += 50;
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_11D5F8A4"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    DialogControlCreate(libPEEP_gv_recUI.lv_dOptionsDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diVotingColorSchemePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownColorScheme, c_playerAny, libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, c_triggerControlEventTypeSelectionChanged);
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 1)) {
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_F93B190E"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_7B00FC05"), PlayerGroupAll());
    }
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 160, (lv_intYOffset - 15));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 220, 50);
    autoEE42E683_ae = libPEEP_gv_recGlobals.lv_intNumColorSchemes;
    lv_intIndex = 1;
    for ( ; ( (autoEE42E683_ai >= 0 && lv_intIndex <= autoEE42E683_ae) || (autoEE42E683_ai < 0 && lv_intIndex >= autoEE42E683_ae) ) ; lv_intIndex += autoEE42E683_ai ) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intIndex].lv_txtName);
    }
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_intDefaultColorScheme);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, lv_intYOffset);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_B8137125"), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diVotingColorSchemeLabel = DialogControlLastCreated();
    Wait(libPEEP_gv_recGlobals.lv_realWaitTime, c_timeGame);
    lv_intYOffset += 10;
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dOptionsDialog, 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_551D9F75"), false);
    libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxAllowCooperative, c_playerAny, libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, c_triggerControlEventTypeChecked);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, (lv_intYOffset + 15));
    libPEEP_gv_recUI.lv_diVotingAllowCooperativeLabel = DialogControlLastCreated();
    if ((libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE == 1)) {
        lv_intYOffset -= lv_intYDelta;
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, PlayerGroupAll(), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diVotingAllowCooperativeLabel, PlayerGroupAll(), false);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), (StringExternal("Param/Value/lib_PEEP_9996C6E7") + StringToText("")), Color(100,100,100), false, 2.0);
    }
    lv_intYOffset += lv_intYDelta;
    if ((libPEEP_gv_recGlobals.lv_intMapSpawnStyle == 0)) {
        lv_boolDisabled = true;
    }
    else {
        lv_boolDisabled = false;
    }
    libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dOptionsDialog, 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_04D00934"), true);
    libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxEnforceCompetitiveSpawns, c_playerAny, libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox, c_triggerControlEventTypeChecked);
    if ((libPEEP_gv_recGlobals.lv_intMapSpawnStyle == 1)) {
        if ((libPEEP_gv_recGlobals.lv_strMapName == "Shakuras Plateau")) {
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_ADD24EB4");
        }
        else {
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_E9B94DF5");
        }
    }
    else {
        lv_txtMessage = StringExternal("Param/Value/lib_PEEP_F1AA3ECD");
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, (lv_intYOffset + 15));
    libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsLabel = DialogControlLastCreated();
    if ((lv_boolDisabled == true)) {
        lv_intYOffset -= lv_intYDelta;
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox, PlayerGroupAll(), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsLabel, PlayerGroupAll(), false);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), lv_txtMessage, Color(100,100,100), false, 2.0);
    }
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dOptionsDialog, 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_40D467B2"), false);
    libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxDisableBling, c_playerAny, libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), (StringExternal("Param/Value/lib_PEEP_73BCE583") + StringToText("")), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, (lv_intYOffset + 15));
    libPEEP_gv_recUI.lv_diVotingDisableBlingLabel = DialogControlLastCreated();
    lv_intYOffset += (lv_intYDelta + 25);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorTop, 0, lv_intYOffset, (StringExternal("Param/Value/lib_PEEP_26574A19") + TextWithColor(StringExternal("Param/Value/lib_PEEP_F9104428"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_5103AD3E")), StringExternal("Param/Value/lib_PEEP_A11FD09C"), "");
    libPEEP_gv_recUI.lv_diKickPlayerButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonKickPlayer, c_playerAny, libPEEP_gv_recUI.lv_diKickPlayerButton, c_triggerControlEventTypeClick);
    Wait(libPEEP_gv_recGlobals.lv_realWaitTime, c_timeGame);
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 1)) {
        lv_intYOffset += (lv_intYDelta + 40);
        libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, lv_intHeaderWidth, libPEEP_gv_recGlobals.lv_intDialogHeaderHeight, c_anchorTop, 0, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_31D7D672"), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
        lv_intYOffset += 25;
    }
    else {
        lv_intYOffset += lv_intYDelta;
    }
    libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dOptionsDialog, 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_2D4503A2"), false);
    libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxAllowChat, c_playerAny, libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), (StringExternal("Param/Value/lib_PEEP_7F8221AD") + StringToText("")), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, (lv_intYOffset + 15));
    libPEEP_gv_recUI.lv_diVotingAllowChatLabel = DialogControlLastCreated();
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dOptionsDialog, 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_82914F1C"), false);
    libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxEndMatch, c_playerAny, libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, c_triggerControlEventTypeChecked);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dOptionsDialog, 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), (StringExternal("Param/Value/lib_PEEP_AA1A516E") + StringToText("")), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 385, (lv_intYOffset + 15));
    libPEEP_gv_recUI.lv_diVotingEndMatchLabel = DialogControlLastCreated();
    DialogSetSize(libPEEP_gv_recUI.lv_dOptionsDialog, DialogGetWidth(libPEEP_gv_recUI.lv_dOptionsDialog), (lv_intYOffset + 95));
    DialogControlSetSize(lv_diTmpItem1, PlayerGroupAll(), (DialogGetWidth(libPEEP_gv_recUI.lv_dOptionsDialog) - 60), (DialogGetHeight(libPEEP_gv_recUI.lv_dOptionsDialog) - 60));
    DialogControlSetSize(lv_diTmpItem2, PlayerGroupAll(), (DialogGetWidth(libPEEP_gv_recUI.lv_dOptionsDialog) - 60), (DialogGetHeight(libPEEP_gv_recUI.lv_dOptionsDialog) - 60));
    Wait(libPEEP_gv_recGlobals.lv_realWaitTime, c_timeGame);
}

void libPEEP_gf_CreatePersonalOptionsDialog () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intHeaderWidth;
    int lv_intYOffset;
    int lv_intYDelta;
    int lv_intTmpMatchMode;
    int lv_intCurrentIndex;
    bool lv_boolDisabled;
    text lv_txtMessage;
    int lv_diTmpItem1;
    int lv_diTmpItem2;

    // Automatic Variable Declarations
    int auto61760214_ae;
    const int auto61760214_ai = 1;

    // Variable Initialization
    lv_intDialogWidth = 500;
    lv_intDialogHeight = 780;
    lv_intHeaderWidth = (lv_intDialogWidth - libPEEP_gv_recGlobals.lv_intDialogExtra);
    lv_intYOffset = 80;
    lv_intYDelta = 35;
    lv_diTmpItem1 = c_invalidDialogControlId;
    lv_diTmpItem2 = c_invalidDialogControlId;

    // Implementation
    DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTopLeft, 150, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dOptionsPersonalDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem1 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_diTmpItem2 = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), lv_intHeaderWidth, libPEEP_gv_recGlobals.lv_intDialogHeaderHeight, c_anchorTop, 0, 44, StringExternal("Param/Value/lib_PEEP_7070AFBA"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diPersonalOptionsDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXPersonalOptionsDialog, c_playerAny, libPEEP_gv_recUI.lv_diPersonalOptionsDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_intYOffset += 20;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_CE118653"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownAutoCamStyle, c_playerAny, libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 210, (lv_intYOffset - 15));
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 240, 50);
    auto61760214_ae = libPEEP_gv_recGlobals.lv_intNumAutoCamStyles;
    lv_intIndex = 1;
    for ( ; ( (auto61760214_ai >= 0 && lv_intIndex <= auto61760214_ae) || (auto61760214_ai < 0 && lv_intIndex >= auto61760214_ae) ) ; lv_intIndex += auto61760214_ai ) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_recAutoCamStyles[lv_intIndex].lv_txtName);
    }
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupAll(), 1);
    lv_intYOffset += 50;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 250, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_9D0677BB"), Color(100,100,100), false, 2.0);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeSlider);
    libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider = DialogControlLastCreated();
    DialogControlSetSize(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, PlayerGroupAll(), 130, 50);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, PlayerGroupAll(), c_anchorTopLeft, 260, (lv_intYOffset - 15));
    libNtve_gf_SetDialogItemMaximumValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, 10.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.5, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, 1.5, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, StringExternal("Param/Value/lib_PEEP_968146B5"), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 50, c_anchorTopLeft, 400, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_B07860CE"), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diOptionCameraIdleTimeLabel = DialogControlLastCreated();
    lv_intYOffset += 30;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_79155EF4"), true);
    libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_A7E7A51B"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_4D765698"), true);
    libPEEP_gv_recUI.lv_diOptionSilentChat = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_FE807F43"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_2187B572"), false);
    libPEEP_gv_recUI.lv_diOptionHideObserverChat = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_DAE57432"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_A9A37300"), true);
    libPEEP_gv_recUI.lv_diHideFairMessageLogCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_052F2C82"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_1CD929D6"), true);
    libPEEP_gv_recUI.lv_diOptionShowFloatingIcons = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxShowFloatingIcons, c_playerAny, libPEEP_gv_recUI.lv_diOptionShowFloatingIcons, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_4EB3D30E"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_30CD0678"), false);
    libPEEP_gv_recUI.lv_diOptionHideMatchPlayerChat = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringExternal("Param/Value/lib_PEEP_7D6EBB44"), false);
    libPEEP_gv_recUI.lv_diOptionShowLogInChatCheckbox = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_E58D1329"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, (StringExternal("Param/Value/lib_PEEP_AEE6B507") + TextWithColor(StringExternal("Param/Value/lib_PEEP_8F852D25"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_71D37160")), false);
    libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxAdvancedResourcePanel, c_playerAny, libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_69E94BD9"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, (StringExternal("Param/Value/lib_PEEP_81451450")), false);
    libPEEP_gv_recUI.lv_diOptionAdvancedAvatarSelection = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_6EA2A0B0"), Color(100,100,100), false, 2.0);
    lv_intYOffset += lv_intYDelta;
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), 50, 50, c_anchorTopLeft, 50, lv_intYOffset, (StringExternal("Param/Value/lib_PEEP_D45E7B53") + TextWithColor(StringExternal("Param/Value/lib_PEEP_5B253E9B"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_494EDEC3")), false);
    libPEEP_gv_recUI.lv_diOptionHideNamePanel = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxHideNamePanel, c_playerAny, libPEEP_gv_recUI.lv_diOptionHideNamePanel, c_triggerControlEventTypeChecked);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 50, c_anchorTopLeft, 100, (lv_intYOffset + 15), StringExternal("Param/Value/lib_PEEP_07AED374"), Color(100,100,100), false, 2.0);
    DialogSetSize(DialogLastCreated(), DialogGetWidth(DialogLastCreated()), (lv_intYOffset + 95));
    DialogControlSetSize(lv_diTmpItem1, PlayerGroupAll(), (DialogGetWidth(libPEEP_gv_recUI.lv_dOptionsPersonalDialog) - 60), (DialogGetHeight(libPEEP_gv_recUI.lv_dOptionsPersonalDialog) - 60));
    DialogControlSetSize(lv_diTmpItem2, PlayerGroupAll(), (DialogGetWidth(libPEEP_gv_recUI.lv_dOptionsPersonalDialog) - 60), (DialogGetHeight(libPEEP_gv_recUI.lv_dOptionsPersonalDialog) - 60));
}

void libPEEP_gf_HideAllOptionDialogsforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsPersonalDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dInventoryDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, PlayerGroupSingle(lp_intPlayer), false);
}

int libPEEP_gf_getMajorityOfVoters () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intMajority;
    int lv_intNumVoters;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 2)) {
        lv_intNumVoters = libPEEP_gv_recGlobals.lv_iNT_NUM_COMMENTATORS;
    }
    else {
        lv_intNumVoters = libPEEP_gv_recGlobals.lv_iNT_NUM_HUMAN_PLAYERS;
    }
    if ((ModI(lv_intNumVoters, 2) == 0)) {
        lv_intMajority = ((lv_intNumVoters / 2) + 1);
    }
    else {
        lv_intMajority = CeilingI((IntToFixed(lv_intNumVoters) / 2.0));
    }
    return lv_intMajority;
}

int libPEEP_gf_getTwoThirdsMajorityOfVoters () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTwoThirdsMajority;
    int lv_intNumVoters;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 2)) {
        lv_intNumVoters = libPEEP_gv_recGlobals.lv_iNT_NUM_COMMENTATORS;
    }
    else {
        lv_intNumVoters = libPEEP_gv_recGlobals.lv_iNT_NUM_HUMAN_PLAYERS;
    }
    lv_intTwoThirdsMajority = CeilingI((IntToFixed(lv_intNumVoters) * (2.0 / 3.0)));
    return lv_intTwoThirdsMajority;
}

int libPEEP_gf_getMajorityOfObserverVoters () {
    // Variable Declarations
    int lv_intObserverMajority;
    int lv_intPlayer;
    int lv_intNumObservers;

    // Automatic Variable Declarations
    int autoF8C3E9AA_ae;
    const int autoF8C3E9AA_ai = 1;

    // Variable Initialization

    // Implementation
    autoF8C3E9AA_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoF8C3E9AA_ai >= 0 && lv_intPlayer <= autoF8C3E9AA_ae) || (autoF8C3E9AA_ai < 0 && lv_intPlayer >= autoF8C3E9AA_ae) ) ; lv_intPlayer += autoF8C3E9AA_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsComputerControlled == false) && ((libPEEP_gv_recGameState.lv_intGameStyle != 2) || (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true)))) {
            lv_intNumObservers += 1;
        }

    }
    if ((ModI(lv_intNumObservers, 2) == 0)) {
        lv_intObserverMajority = ((lv_intNumObservers / 2) + 1);
    }
    else {
        lv_intObserverMajority = CeilingI((IntToFixed(lv_intNumObservers) / 2.0));
    }
    if ((lv_intObserverMajority == 0)) {
        lv_intObserverMajority = 1;
    }

    return lv_intObserverMajority;
}

void libPEEP_gf_RefreshAllVoting () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto07CD7CDD_ae;
    const int auto07CD7CDD_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gf_RefreshVotingMatchMode();
    libPEEP_gf_RefreshVotingPlayerSelectMode();
    libPEEP_gf_RefreshVotingColorScheme();
    libPEEP_gf_RefreshVotingBling();
    libPEEP_gf_RefreshVotingSpawning();
    libPEEP_gf_RefreshVotingCooperativeControl();
    libPEEP_gf_RefreshVotingEndMatch();
    libPEEP_gf_RefreshVotingAllowChat();
    if ((libPEEP_gv_recGameState.lv_intGameStyle == 2)) {
        auto07CD7CDD_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto07CD7CDD_ai >= 0 && lv_intPlayer <= auto07CD7CDD_ae) || (auto07CD7CDD_ai < 0 && lv_intPlayer >= auto07CD7CDD_ae) ) ; lv_intPlayer += auto07CD7CDD_ai ) {
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == false)) {
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox, PlayerGroupSingle(lv_intPlayer), false);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, PlayerGroupSingle(lv_intPlayer), false);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox, PlayerGroupSingle(lv_intPlayer), false);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, PlayerGroupSingle(lv_intPlayer), false);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox, PlayerGroupSingle(lv_intPlayer), false);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupSingle(lv_intPlayer), false);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, PlayerGroupSingle(lv_intPlayer), false);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, PlayerGroupSingle(lv_intPlayer), false);
            }

        }
    }

}

void libPEEP_gf_RefreshVotingMatchMode () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intTmpPlayer;
    int lv_intMajority;
    int[11] lv_intMatchModeTallies;
    int lv_intTmp;
    int lv_intChangeToMode;
    int lv_intTeam;
    int lv_intPreviousMaxTeamSize;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto896E1124_ae;
    const int auto896E1124_ai = 1;
    const int auto8685D53C_ae = 10;
    const int auto8685D53C_ai = 1;
    int auto35950542_ae;
    const int auto35950542_ai = 1;
    int auto2A13AE9E_ae;
    const int auto2A13AE9E_ai = 1;
    int auto4E718860_ae;
    const int auto4E718860_ai = 1;
    int auto1229FBC0_ae;
    const int auto1229FBC0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMajority = libPEEP_gf_getMajorityOfVoters();
    auto896E1124_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto896E1124_ai >= 0 && lv_intTmpPlayer <= auto896E1124_ae) || (auto896E1124_ai < 0 && lv_intTmpPlayer >= auto896E1124_ae) ) ; lv_intTmpPlayer += auto896E1124_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false))) {
            lv_intTmp = libPEEP_gv_recGlobals.lv_intMatchModeOrderList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, lv_intTmpPlayer)];
            lv_intMatchModeTallies[lv_intTmp] += 1;
        }

    }
    lv_intTmp = 1;
    for ( ; ( (auto8685D53C_ai >= 0 && lv_intTmp <= auto8685D53C_ae) || (auto8685D53C_ai < 0 && lv_intTmp >= auto8685D53C_ae) ) ; lv_intTmp += auto8685D53C_ai ) {
        if (((lv_intMatchModeTallies[lv_intTmp] >= lv_intMajority) && (lv_intTmp != libPEEP_gv_recGameState.lv_intCurrentMatchMode))) {
            lv_intChangeToMode = lv_intTmp;
            break;
        }

    }
    if (((libPEEP_gv_recGameState.lv_boolMatchModeVotingActive == true) && (lv_intChangeToMode > 0))) {
        lv_intPreviousMaxTeamSize = libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE;
        libPEEP_gv_recGameState.lv_intCurrentMatchMode = lv_intChangeToMode;
        libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE = libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[lv_intChangeToMode];
        libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_7E733E0E") + libPEEP_gv_recGlobals.lv_txtMatchModeNames[lv_intChangeToMode]), 0, false, false);
        if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && (libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE < lv_intPreviousMaxTeamSize))) {
            auto35950542_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
            lv_intTeam = 1;
            for ( ; ( (auto35950542_ai >= 0 && lv_intTeam <= auto35950542_ae) || (auto35950542_ai < 0 && lv_intTeam >= auto35950542_ae) ) ; lv_intTeam += auto35950542_ai ) {
                if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE)) {
                    auto2A13AE9E_ae = lv_intPreviousMaxTeamSize;
                    lv_intTmp = (libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE + 1);
                    for ( ; ( (auto2A13AE9E_ai >= 0 && lv_intTmp <= auto2A13AE9E_ae) || (auto2A13AE9E_ai < 0 && lv_intTmp >= auto2A13AE9E_ae) ) ; lv_intTmp += auto2A13AE9E_ai ) {
                        lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intTmp];
                        if ((lv_intTmpPlayer > 0)) {
                            libPEEP_gf_RemovePlayerfromTeam(lv_intTmpPlayer, true);
                            libPEEP_gf_AddPlayertoTeam(lv_intTmpPlayer, 0, true);
                            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_4314F30F") + libPEEP_gv_recTeams[lv_intTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_5BB8DCBF") + IntToText(libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE)), lv_intTmpPlayer, false, false);
                        }

                    }
                }

            }
        }

        if ((libPEEP_gv_recGlobals.lv_intMatchModeMaxTeamSizes[libPEEP_gv_recGameState.lv_intCurrentMatchMode] != lv_intPreviousMaxTeamSize)) {
            libPEEP_gf_CalculateTeamInfo();
            libPEEP_gf_RefreshFaceoff();
            auto4E718860_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
            lv_intTmpPlayer = 1;
            for ( ; ( (auto4E718860_ai >= 0 && lv_intTmpPlayer <= auto4E718860_ae) || (auto4E718860_ai < 0 && lv_intTmpPlayer >= auto4E718860_ae) ) ; lv_intTmpPlayer += auto4E718860_ai ) {
                libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intTmpPlayer);
            }
        }

    }

    auto1229FBC0_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto1229FBC0_ai >= 0 && lv_intTmpPlayer <= auto1229FBC0_ae) || (auto1229FBC0_ai < 0 && lv_intTmpPlayer >= auto1229FBC0_ae) ) ; lv_intTmpPlayer += auto1229FBC0_ai ) {
        lv_intTmp = libPEEP_gv_recGlobals.lv_intMatchModeOrderList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, lv_intTmpPlayer)];
        lv_intVotes = lv_intMatchModeTallies[lv_intTmp];
        lv_txtMessage = StringToText("");
        lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_E3247568") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_75CCE44B") + IntToText(lv_intMajority) + StringExternal("Param/Value/lib_PEEP_8534841A"));
        if ((lv_intTmp == libPEEP_gv_recGameState.lv_intCurrentMatchMode)) {
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
        }
        else {
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingMatchModeLabel, lv_txtMessage, PlayerGroupSingle(lv_intTmpPlayer));
    }
    lv_intTmp = libPEEP_gv_recGameState.lv_intCurrentMatchMode;
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_7C686C6B") + libPEEP_gv_recGlobals.lv_txtMatchModeNames[lv_intTmp]);
    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingPlayerSelectMode () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intTmpPlayer;
    int lv_intMajority;
    int[11] lv_intTallies;
    int lv_intTmp;
    int lv_intChangeToMode;
    int lv_intTeam;
    int lv_intPreviousMaxTeamSize;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto7D1C934E_ae;
    const int auto7D1C934E_ai = 1;
    const int auto4CB93F93_ae = 10;
    const int auto4CB93F93_ai = 1;
    int autoB9990734_ae;
    const int autoB9990734_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMajority = libPEEP_gf_getMajorityOfVoters();
    auto7D1C934E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto7D1C934E_ai >= 0 && lv_intTmpPlayer <= auto7D1C934E_ae) || (auto7D1C934E_ai < 0 && lv_intTmpPlayer >= auto7D1C934E_ae) ) ; lv_intTmpPlayer += auto7D1C934E_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false))) {
            lv_intTmp = libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, lv_intTmpPlayer)];
            lv_intTallies[lv_intTmp] += 1;
        }

    }
    lv_intTmp = 1;
    for ( ; ( (auto4CB93F93_ai >= 0 && lv_intTmp <= auto4CB93F93_ae) || (auto4CB93F93_ai < 0 && lv_intTmp >= auto4CB93F93_ae) ) ; lv_intTmp += auto4CB93F93_ai ) {
        if (((lv_intTallies[lv_intTmp] >= lv_intMajority) && (lv_intTmp != libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode))) {
            lv_intChangeToMode = lv_intTmp;
            break;
        }

    }
    if (((libPEEP_gv_recGameState.lv_boolMatchModeVotingActive == true) && (lv_intChangeToMode > 0))) {
        libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode = lv_intChangeToMode;
        if ((GameGetMissionTime() > 5.0)) {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_EB2359F3") + libPEEP_gv_recGlobals.lv_recPlayerSelectModes[lv_intChangeToMode].lv_txtName), 0, false, false);
        }

    }

    autoB9990734_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoB9990734_ai >= 0 && lv_intTmpPlayer <= autoB9990734_ae) || (autoB9990734_ai < 0 && lv_intTmpPlayer >= autoB9990734_ae) ) ; lv_intTmpPlayer += autoB9990734_ai ) {
        lv_intTmp = libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, lv_intTmpPlayer)];
        lv_intVotes = lv_intTallies[lv_intTmp];
        lv_txtMessage = StringToText("");
        lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_C455D824") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_91D6C87D") + IntToText(lv_intMajority) + StringExternal("Param/Value/lib_PEEP_654B5FA2"));
        if ((lv_intTmp == libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode)) {
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
        }
        else {
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingPlayerSelectModeLabel, lv_txtMessage, PlayerGroupSingle(lv_intTmpPlayer));
    }
    lv_intTmp = libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode;
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_263F2D42") + libPEEP_gv_recGlobals.lv_recPlayerSelectModes[lv_intTmp].lv_txtName + StringExternal("Param/Value/lib_PEEP_2A48AFDC") + libPEEP_gv_recGlobals.lv_recPlayerSelectModes[lv_intTmp].lv_txtDescription);
    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingColorScheme () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intTmpPlayer;
    int lv_intMajority;
    int[11] lv_intTallies;
    int lv_intTmp;
    int lv_intChangeToScheme;
    int lv_intTeam;
    int lv_intPreviousMaxTeamSize;
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoADD7B147_ae;
    const int autoADD7B147_ai = 1;
    const int auto5F0ED30B_ae = 10;
    const int auto5F0ED30B_ai = 1;
    int auto2DE33D86_ae;
    const int auto2DE33D86_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMajority = libPEEP_gf_getMajorityOfVoters();
    autoADD7B147_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoADD7B147_ai >= 0 && lv_intTmpPlayer <= autoADD7B147_ae) || (autoADD7B147_ai < 0 && lv_intTmpPlayer >= autoADD7B147_ae) ) ; lv_intTmpPlayer += autoADD7B147_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false))) {
            lv_intTallies[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, lv_intTmpPlayer)] += 1;
        }

    }
    lv_intTmp = 1;
    for ( ; ( (auto5F0ED30B_ai >= 0 && lv_intTmp <= auto5F0ED30B_ae) || (auto5F0ED30B_ai < 0 && lv_intTmp >= auto5F0ED30B_ae) ) ; lv_intTmp += auto5F0ED30B_ai ) {
        if (((lv_intTallies[lv_intTmp] >= lv_intMajority) && (lv_intTmp != libPEEP_gv_recGameState.lv_intCurrentColorScheme))) {
            lv_intChangeToScheme = lv_intTmp;
            break;
        }

    }
    if (((libPEEP_gv_recGameState.lv_boolMatchModeVotingActive == true) && (lv_intChangeToScheme > 0))) {
        libPEEP_gv_recGameState.lv_intCurrentColorScheme = lv_intChangeToScheme;
        if ((GameGetMissionTime() > 5.0)) {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_60A94722") + libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intChangeToScheme].lv_txtName), 0, false, false);
        }

    }

    auto2DE33D86_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto2DE33D86_ai >= 0 && lv_intTmpPlayer <= auto2DE33D86_ae) || (auto2DE33D86_ai < 0 && lv_intTmpPlayer >= auto2DE33D86_ae) ) ; lv_intTmpPlayer += auto2DE33D86_ai ) {
        lv_intVotes = lv_intTallies[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, lv_intTmpPlayer)];
        lv_txtMessage = StringToText("");
        lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_1CAF6423") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_C5DC9550") + IntToText(lv_intMajority) + StringExternal("Param/Value/lib_PEEP_2CD5CCA1"));
        if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, lv_intTmpPlayer) == libPEEP_gv_recGameState.lv_intCurrentColorScheme)) {
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
        }
        else {
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingColorSchemeLabel, lv_txtMessage, PlayerGroupSingle(lv_intTmpPlayer));
    }
    lv_intTmp = libPEEP_gv_recGameState.lv_intCurrentColorScheme;
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_08EBA050") + libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intTmp].lv_txtName + StringExternal("Param/Value/lib_PEEP_7CB7904E") + libPEEP_gv_recGlobals.lv_recColorSchemes[lv_intTmp].lv_txtDescription);
    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingSpawning () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intMajority;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int auto7D2F772A_ae;
    const int auto7D2F772A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMajority = libPEEP_gf_getMajorityOfVoters();
    lv_intVotes = 0;
    auto7D2F772A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto7D2F772A_ai >= 0 && lv_intTmpPlayer <= auto7D2F772A_ae) || (auto7D2F772A_ai < 0 && lv_intTmpPlayer >= auto7D2F772A_ae) ) ; lv_intTmpPlayer += auto7D2F772A_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox, lv_intTmpPlayer) == true))) {
            lv_intVotes += 1;
        }

    }
    lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_C5F42E47") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_A11480D3") + IntToText(lv_intMajority) + StringExternal("Param/Value/lib_PEEP_89F40824"));
    if (((lv_intVotes >= lv_intMajority) && (libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns == false))) {
        libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns = true;
        if ((libPEEP_gv_recGameState.lv_boolGameInitComplete == true)) {
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_C3D1F38C"), 0, false, false);
        }

    }
    else {
        if (((lv_intVotes < lv_intMajority) && (libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns == true))) {
            libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns = false;
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_E95ACDE1"), 0, false, false);
        }

    }
    if ((libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns == true)) {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
    }
    else {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsLabel, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingCooperativeControl () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intMajority;
    int lv_intObserverMajority;
    int lv_intTwoThirdsMajority;
    int lv_intTmpPlayer;
    int[11] lv_intMatchModeTallies;
    int lv_intIndex;
    int lv_intTmp;
    int lv_intChangeToMode;
    int lv_intTeam;
    int lv_intPreviousMaxTeamSize;
    fixed lv_realCamDistance;
    int lv_intNumObservers;

    // Automatic Variable Declarations
    int autoFC756B15_ae;
    const int autoFC756B15_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMajority = libPEEP_gf_getMajorityOfVoters();
    lv_intVotes = 0;
    autoFC756B15_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoFC756B15_ai >= 0 && lv_intTmpPlayer <= autoFC756B15_ae) || (autoFC756B15_ai < 0 && lv_intTmpPlayer >= autoFC756B15_ae) ) ; lv_intTmpPlayer += autoFC756B15_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, lv_intTmpPlayer) == true))) {
            lv_intVotes += 1;
        }

    }
    lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_4C05968C") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_E473E29D") + IntToText(lv_intMajority) + StringExternal("Param/Value/lib_PEEP_0F04AFC2"));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_7E982DAB"));
    if (((lv_intVotes >= lv_intMajority) && (libPEEP_gv_recGameState.lv_boolVotableAllowCooperativeUnitControl == false))) {
        libPEEP_gv_recGameState.lv_boolVotableAllowCooperativeUnitControl = true;
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_30986D0C"), 0, false, false);
    }
    else {
        if (((lv_intVotes < lv_intMajority) && (libPEEP_gv_recGameState.lv_boolVotableAllowCooperativeUnitControl == true))) {
            libPEEP_gv_recGameState.lv_boolVotableAllowCooperativeUnitControl = false;
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_5956E101"), 0, false, false);
        }

    }
    if ((libPEEP_gv_recGameState.lv_boolVotableAllowCooperativeUnitControl == true)) {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
    }
    else {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingAllowCooperativeLabel, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingBling () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intMajority;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int autoA8B88EFF_ae;
    const int autoA8B88EFF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intMajority = libPEEP_gf_getMajorityOfVoters();
    lv_intVotes = 0;
    autoA8B88EFF_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoA8B88EFF_ai >= 0 && lv_intTmpPlayer <= autoA8B88EFF_ae) || (autoA8B88EFF_ai < 0 && lv_intTmpPlayer >= autoA8B88EFF_ae) ) ; lv_intTmpPlayer += autoA8B88EFF_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolVoteBling == true))) {
            lv_intVotes += 1;
        }

    }
    lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_10DBAE23") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_A7D20702") + IntToText(lv_intMajority) + StringExternal("Param/Value/lib_PEEP_CC63AD5C"));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_3B327444"));
    if (((lv_intVotes >= lv_intMajority) && (libPEEP_gv_recGameState.lv_boolVotableDisableBling == false))) {
        libPEEP_gv_recGameState.lv_boolVotableDisableBling = true;
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_7AF06F1B"), 0, false, false);
    }
    else {
        if (((lv_intVotes < lv_intMajority) && (libPEEP_gv_recGameState.lv_boolVotableDisableBling == true))) {
            libPEEP_gv_recGameState.lv_boolVotableDisableBling = false;
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_2339FDF6"), 0, false, false);
        }

    }
    if ((libPEEP_gv_recGameState.lv_boolVotableDisableBling == true)) {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
    }
    else {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingDisableBlingLabel, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingZooming () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intMajority;
    int lv_intObserverMajority;
    int lv_intTwoThirdsMajority;
    int lv_intTmpPlayer;
    int[11] lv_intMatchModeTallies;
    int lv_intIndex;
    int lv_intTmp;
    int lv_intChangeToMode;
    int lv_intTeam;
    int lv_intPreviousMaxTeamSize;
    fixed lv_realCamDistance;
    int lv_intNumObservers;

    // Automatic Variable Declarations
    int auto9F45979D_ae;
    const int auto9F45979D_ai = 1;
    int auto247B3906_ae;
    const int auto247B3906_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intObserverMajority = libPEEP_gf_getMajorityOfObserverVoters();
    lv_intVotes = 0;
    auto9F45979D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto9F45979D_ai >= 0 && lv_intTmpPlayer <= auto9F45979D_ae) || (auto9F45979D_ai < 0 && lv_intTmpPlayer >= auto9F45979D_ae) ) ; lv_intTmpPlayer += auto9F45979D_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolVoteDisableZoom == true))) {
            lv_intVotes += 1;
        }

    }
    lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_01376339") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_33CA03F9") + IntToText(lv_intObserverMajority) + StringExternal("Param/Value/lib_PEEP_5284AD9E"));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_0C077569"));
    if (((lv_intVotes >= lv_intObserverMajority) && (libPEEP_gv_recGameState.lv_boolVotableDisableZoom == false))) {
        libPEEP_gv_recGameState.lv_boolVotableDisableZoom = true;
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_E1A50939"), 0, false, false);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diZoomIn, PlayerGroupAll(), false);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diZoomOut, PlayerGroupAll(), false);
        auto247B3906_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_HUMAN_PLAYERS;
        lv_intTmpPlayer = 1;
        for ( ; ( (auto247B3906_ai >= 0 && lv_intTmpPlayer <= auto247B3906_ae) || (auto247B3906_ai < 0 && lv_intTmpPlayer >= auto247B3906_ae) ) ; lv_intTmpPlayer += auto247B3906_ai ) {
            libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intZoomIndex = 0;
            libPEEP_gf_ApplyZoomtoPlayerCam(lv_intTmpPlayer, 1.0);
        }
    }
    else {
        if (((lv_intVotes < lv_intObserverMajority) && (libPEEP_gv_recGameState.lv_boolVotableDisableZoom == true))) {
            libPEEP_gv_recGameState.lv_boolVotableDisableZoom = false;
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_98BD7D78"), 0, false, false);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diZoomIn, PlayerGroupAll(), true);
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diZoomOut, PlayerGroupAll(), true);
        }

    }
    if ((libPEEP_gv_recGameState.lv_boolVotableDisableZoom == true)) {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
    }
    else {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingDisableZoomLabel, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingAllowChat () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intMajority;
    int lv_intObserverMajority;
    int lv_intTwoThirdsMajority;
    int lv_intTmpPlayer;
    int[11] lv_intMatchModeTallies;
    int lv_intIndex;
    int lv_intTmp;
    int lv_intChangeToMode;
    int lv_intTeam;
    int lv_intPreviousMaxTeamSize;
    fixed lv_realCamDistance;
    int lv_intNumObservers;

    // Automatic Variable Declarations
    int auto6F88DABE_ae;
    const int auto6F88DABE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intObserverMajority = libPEEP_gf_getMajorityOfObserverVoters();
    lv_intVotes = 0;
    auto6F88DABE_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto6F88DABE_ai >= 0 && lv_intTmpPlayer <= auto6F88DABE_ae) || (auto6F88DABE_ai < 0 && lv_intTmpPlayer >= auto6F88DABE_ae) ) ; lv_intTmpPlayer += auto6F88DABE_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolVoteChat == true))) {
            lv_intVotes += 1;
        }

    }
    lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_7225187D") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_89FFDA7B") + IntToText(lv_intObserverMajority) + StringExternal("Param/Value/lib_PEEP_B7928477"));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_53693DAB"));
    if (((lv_intVotes >= lv_intObserverMajority) && (libPEEP_gv_recGameState.lv_boolVotableAllowChat == false))) {
        libPEEP_gv_recGameState.lv_boolVotableAllowChat = true;
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_7C6D0F6D"), 0, false, false);
    }
    else {
        if (((lv_intVotes < lv_intObserverMajority) && (libPEEP_gv_recGameState.lv_boolVotableAllowChat == true))) {
            libPEEP_gv_recGameState.lv_boolVotableAllowChat = false;
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_FA7D28D8"), 0, false, false);
        }

    }
    if ((libPEEP_gv_recGameState.lv_boolVotableAllowChat == true)) {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(22*100/255,128*100/255,0))));
    }
    else {
        lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, (Color(100.00, 0.00, 0.00))));
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingAllowChatLabel, lv_txtMessage, PlayerGroupAll());
}

void libPEEP_gf_RefreshVotingEndMatch () {
    // Variable Declarations
    text lv_txtTallyText;
    text lv_txtMessage;
    int lv_intVotes;
    int lv_intObserverMajority;
    int lv_intTmpPlayer;
    color lv_coColor;

    // Automatic Variable Declarations
    int auto579444AC_ae;
    const int auto579444AC_ai = 1;

    // Variable Initialization
    lv_coColor = Color(0,0,0);

    // Implementation
    lv_intObserverMajority = libPEEP_gf_getMajorityOfObserverVoters();
    lv_intVotes = 0;
    auto579444AC_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto579444AC_ai >= 0 && lv_intTmpPlayer <= auto579444AC_ae) || (auto579444AC_ai < 0 && lv_intTmpPlayer >= auto579444AC_ae) ) ; lv_intTmpPlayer += auto579444AC_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsComputerControlled == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolVoteEndMatch == true)) {
            lv_intVotes += 1;
        }

    }
    lv_txtTallyText = (StringExternal("Param/Value/lib_PEEP_1B1E6804") + IntToText(lv_intVotes) + StringExternal("Param/Value/lib_PEEP_8FF11D72") + IntToText(lv_intObserverMajority) + StringExternal("Param/Value/lib_PEEP_87E360EB"));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_22F28734"));
    if ((lv_intVotes >= lv_intObserverMajority)) {
        lv_coColor = Color(22*100/255,128*100/255,0);
    }
    else {
        lv_coColor = Color(100.00, 0.00, 0.00);
    }
    lv_txtMessage = (StringToText("") + TextWithColor(lv_txtTallyText, lv_coColor));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVotingEndMatchLabel, lv_txtMessage, PlayerGroupAll());
    if ((lv_intVotes >= lv_intObserverMajority)) {
        libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_txtOutcome = StringExternal("Param/Value/lib_PEEP_89534160");
        libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_intDuration = libPEEP_gv_recGameState.lv_intMatchSecondsElapsed;
        libPEEP_gf_RefreshMatchHistoryListbox();
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_77C919A3"), 0, false, false);
        libPEEP_gf_ClearOutBetting();
        TimerStart(libPEEP_gv_recGlobals.lv_timerVictoryScreenTimer, 0.0, false, c_timeReal);
    }

}

void libPEEP_gf_CreateQuickDialog () {
    // Variable Declarations
    int lv_intX;
    int lv_intY;
    int lv_intButtonSize;
    int lv_intImageSize;
    int lv_intIndex;

    // Automatic Variable Declarations
    const int autoC3E102E1_ae = 2;
    const int autoC3E102E1_ai = 1;

    // Variable Initialization
    lv_intY = 70;
    lv_intButtonSize = 40;
    lv_intImageSize = 40;

    // Implementation
    DialogCreate(1000, 500, c_anchorTop, 0, 85, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libPEEP_gv_recUI.lv_dTOWDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    lv_intX = 355;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTOWDialog, lv_intButtonSize, lv_intButtonSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_59F99201") + TextWithColor(StringExternal("Param/Value/lib_PEEP_E30EB5AA"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_64E152CE")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diTOWButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, lv_intImageSize, lv_intImageSize, c_anchorTopLeft, (lv_intX + 0), (lv_intY + 0), StringToText(""), "Assets\\Textures\\btn-command-terran-buildadvancedstructure.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diTOWIcons[1] = DialogControlLastCreated();
    lv_intX += 50;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTOWDialog, lv_intButtonSize, lv_intButtonSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_5B123924") + TextWithColor(StringExternal("Param/Value/lib_PEEP_FB28A875"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_C9F67A1A")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diTOWButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, lv_intImageSize, lv_intImageSize, c_anchorTopLeft, (lv_intX + 0), (lv_intY + 0), StringToText(""), "Assets\\Textures\\btn-ability-terran-chronoriftdevice.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diTOWIcons[2] = DialogControlLastCreated();
    lv_intX += 50;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTOWDialog, lv_intButtonSize, lv_intButtonSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_1228050B") + TextWithColor(StringExternal("Param/Value/lib_PEEP_71F2B860"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_0E0E0CDB")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diTOWButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, lv_intImageSize, lv_intImageSize, c_anchorTopLeft, (lv_intX + 0), (lv_intY + 0), StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-microfusionreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diTOWIcons[3] = DialogControlLastCreated();
    lv_intX += 50;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTOWDialog, lv_intButtonSize, lv_intButtonSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_7C87CE88") + TextWithColor(StringExternal("Param/Value/lib_PEEP_EB010583"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_57B71613")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diTOWButtons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, lv_intImageSize, lv_intImageSize, c_anchorTopLeft, (lv_intX + 0), (lv_intY + 0), StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-shapedhull.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diTOWIcons[4] = DialogControlLastCreated();
    lv_intX += 50;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTOWDialog, lv_intButtonSize, lv_intButtonSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_07DBC002") + TextWithColor(StringExternal("Param/Value/lib_PEEP_580FB417"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_B9A2B1BF")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diTOWButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, lv_intImageSize, lv_intImageSize, c_anchorTopLeft, (lv_intX + 0), (lv_intY + 0), StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-nuclearstrike.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diTOWIcons[5] = DialogControlLastCreated();
    lv_intX += 50;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTOWDialog, lv_intButtonSize, lv_intButtonSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (StringExternal("Param/Value/lib_PEEP_81E26301") + TextWithColor(StringExternal("Param/Value/lib_PEEP_DB55F517"), (Color(100,100,100))) + StringExternal("Param/Value/lib_PEEP_BFEAA921")), PlayerGroupAll());
    libPEEP_gv_recUI.lv_diTOWButtons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, lv_intImageSize, lv_intImageSize, c_anchorTopLeft, (lv_intX + 0), (lv_intY + 0), StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-dualfusionwelders.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diTOWIcons[6] = DialogControlLastCreated();
    lv_intY = 110;
    lv_intIndex = 1;
    for ( ; ( (autoC3E102E1_ai >= 0 && lv_intIndex <= autoC3E102E1_ae) || (autoC3E102E1_ai < 0 && lv_intIndex >= autoC3E102E1_ae) ) ; lv_intIndex += autoC3E102E1_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 100);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, (lv_intY - 0));
        libPEEP_gv_recUI.lv_diTOWLabelCenter[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, -330, (lv_intY + 90));
        libPEEP_gv_recUI.lv_diTOWLabelLeft[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, 10, 10, c_anchorTopLeft, 10, 10, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diTOWImageLeft[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, 10, 10, c_anchorTopLeft, 10, 10, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diTOWImageRight[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTOWDialog, 60, 60, c_anchorTopLeft, 10, 10, StringToText(""), "Assets\\Textures\\ui_btn_aicommand_commandcard_assault.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diTOWImageCenter[lv_intIndex] = DialogControlLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 200, 80);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 330, (lv_intY + 90));
        libPEEP_gv_recUI.lv_diTOWLabelRight[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerRight", PlayerGroupAll());
        lv_intY += 140;
    }
    TriggerAddEventDialogControl(libPEEP_gt_ButtonStructures, c_playerAny, libPEEP_gv_recUI.lv_diTOWButtons[1], c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonResearch, c_playerAny, libPEEP_gv_recUI.lv_diTOWButtons[2], c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonResources, c_playerAny, libPEEP_gv_recUI.lv_diTOWButtons[3], c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonSupplies, c_playerAny, libPEEP_gv_recUI.lv_diTOWButtons[4], c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonKilled, c_playerAny, libPEEP_gv_recUI.lv_diTOWButtons[5], c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonAPM, c_playerAny, libPEEP_gv_recUI.lv_diTOWButtons[6], c_triggerControlEventTypeClick);
}

void libPEEP_gf_RefreshAllQuickDialogs () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto7EB56D62_ae;
    const int auto7EB56D62_ai = 1;

    // Variable Initialization

    // Implementation
    auto7EB56D62_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto7EB56D62_ai >= 0 && lv_intPlayer <= auto7EB56D62_ae) || (auto7EB56D62_ai < 0 && lv_intPlayer >= auto7EB56D62_ae) ) ; lv_intPlayer += auto7EB56D62_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true))) {
            libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
        }

    }
}

void libPEEP_gf_RefreshQuickDialogforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intLastButton;
    int[5] lv_intValueList;
    int[5] lv_intValueList2;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intTmpValue;
    int lv_intTmpValue2;
    int lv_intTmpPlayer;
    int lv_intTeam;
    text lv_txtMessage;
    text lv_txtTitle;
    text lv_txtTitle2;
    int[3] lv_intColorPlayer;
    text lv_txtNumber1;
    text lv_txtNumber2;

    // Automatic Variable Declarations
    const int auto8B85EB0B_ae = 6;
    const int auto8B85EB0B_ai = 1;
    const int autoD0891937_ae = 2;
    const int autoD0891937_ai = 1;
    int auto2D21F9DD_ae;
    const int auto2D21F9DD_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gf_HideAllCenterDialogsforPlayer(lp_intPlayer);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lp_intPlayer), true);
    lv_intLastButton = libPEEP_gv_recPlayers[lp_intPlayer].lv_intLastTOWButton;
    lv_intIndex = 1;
    for ( ; ( (auto8B85EB0B_ai >= 0 && lv_intIndex <= auto8B85EB0B_ae) || (auto8B85EB0B_ai < 0 && lv_intIndex >= auto8B85EB0B_ae) ) ; lv_intIndex += auto8B85EB0B_ai ) {
        if ((lv_intIndex == lv_intLastButton)) {
            DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTOWIcons[lv_intIndex], PlayerGroupSingle(lp_intPlayer), 0.2, 0.0);
        }
        else {
            DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diTOWIcons[lv_intIndex], PlayerGroupSingle(lp_intPlayer), 0.2, 75.0);
        }
    }
    if (((lv_intLastButton == 1) || (lv_intLastButton == 2))) {
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelLeft[1], StringToText(""), PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageLeft[1], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageCenter[1], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelLeft[2], StringToText(""), PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageLeft[2], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageCenter[2], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[1], StringToText(""), PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[2], StringToText(""), PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelRight[1], StringToText(""), PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageRight[1], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelRight[2], StringToText(""), PlayerGroupSingle(lp_intPlayer));
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageRight[2], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
        if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[1], StringExternal("Param/Value/lib_PEEP_8E5A2BAB"), PlayerGroupSingle(lp_intPlayer));
        }
        else {
            if ((lv_intLastButton == 1)) {
                libPEEP_gf_ShowStructureDialogsforPlayer(lp_intPlayer);
                libPEEP_gf_HideResearchDialogsforPlayer(lp_intPlayer);
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[1], StringExternal("Param/Value/lib_PEEP_CA67BA2B"), PlayerGroupSingle(lp_intPlayer));
            }
            else {
                if ((lv_intLastButton == 2)) {
                    libPEEP_gf_ShowResearchDialogsforPlayer(lp_intPlayer);
                    libPEEP_gf_HideStructureDialogsforPlayer(lp_intPlayer);
                    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[1], StringExternal("Param/Value/lib_PEEP_D85EFC61"), PlayerGroupSingle(lp_intPlayer));
                }

            }
        }
    }
    else {
        libPEEP_gf_HideResearchDialogsforPlayer(lp_intPlayer);
        libPEEP_gf_HideStructureDialogsforPlayer(lp_intPlayer);
        if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
            if ((libPEEP_gv_recGameState.lv_intNumPlayingTeams > 2)) {
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[1], StringExternal("Param/Value/lib_PEEP_1A20E7E1"), PlayerGroupSingle(lp_intPlayer));
            }
            else {
                lv_intIndex = 1;
                for ( ; ( (autoD0891937_ai >= 0 && lv_intIndex <= autoD0891937_ae) || (autoD0891937_ai < 0 && lv_intIndex >= autoD0891937_ae) ) ; lv_intIndex += autoD0891937_ai ) {
                    lv_intTmpValue = 0;
                    lv_intTmpValue2 = 0;
                    lv_intColorPlayer[lv_intIndex] = 0;
                    lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex];
                    auto2D21F9DD_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
                    lv_intIndex2 = 1;
                    for ( ; ( (auto2D21F9DD_ai >= 0 && lv_intIndex2 <= auto2D21F9DD_ae) || (auto2D21F9DD_ai < 0 && lv_intIndex2 >= auto2D21F9DD_ae) ) ; lv_intIndex2 += auto2D21F9DD_ai ) {
                        lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
                        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == true)) {
                            if ((lv_intColorPlayer[lv_intIndex] == 0)) {
                                lv_intColorPlayer[lv_intIndex] = lv_intTmpPlayer;
                            }

                            if ((lv_intLastButton == 3)) {
                                lv_intTmpValue += PlayerScoreValueGetAsInt(lv_intTmpPlayer, "MineralsCollectionRate");
                                lv_intTmpValue2 += PlayerScoreValueGetAsInt(lv_intTmpPlayer, "VespeneCollectionRate");
                                lv_txtTitle = StringExternal("Param/Value/lib_PEEP_5C2EEF11");
                                lv_txtTitle2 = StringExternal("Param/Value/lib_PEEP_E1145B90");
                            }
                            else if ((lv_intLastButton == 4)) {
                                lv_intTmpValue += PlayerScoreValueGetAsInt(lv_intTmpPlayer, "FoodUsedArmy");
                                lv_intTmpValue2 += PlayerScoreValueGetAsInt(lv_intTmpPlayer, "FoodUsedEconomy");
                                lv_txtTitle = StringExternal("Param/Value/lib_PEEP_5AA50367");
                                lv_txtTitle2 = StringExternal("Param/Value/lib_PEEP_6012F0E7");
                            }
                            else if ((lv_intLastButton == 5)) {
                                lv_intTmpValue += libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intUnitsKilled;
                                lv_intTmpValue2 += libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intWorkersKilled;
                                lv_txtTitle = StringExternal("Param/Value/lib_PEEP_3749E0B2");
                                lv_txtTitle2 = StringExternal("Param/Value/lib_PEEP_3A3E165B");
                            }
                            else if ((lv_intLastButton == 6)) {
                                lv_intTmpValue += PlayerScoreValueGetAsInt(lv_intTmpPlayer, "APM");
                                lv_intTmpValue2 += libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intAverageAPM;
                                lv_txtTitle = StringExternal("Param/Value/lib_PEEP_F5108215");
                                lv_txtTitle2 = StringExternal("Param/Value/lib_PEEP_0AD8842A");
                            }
                        }

                    }
                    lv_intValueList[lv_intIndex] = lv_intTmpValue;
                    lv_intValueList2[lv_intIndex] = lv_intTmpValue2;
                }
                lv_txtMessage = (lv_txtTitle);
                lv_txtNumber1 = IntToText(lv_intValueList[1]);
                lv_txtNumber2 = IntToText(lv_intValueList[2]);
                if ((lv_intValueList[1] > lv_intValueList[2])) {
                    lv_txtNumber1 = TextWithColor(lv_txtNumber1, (Color(150*100/255,150*100/255,30*100/255)));
                }
                else {
                    if ((lv_intValueList[1] < lv_intValueList[2])) {
                        lv_txtNumber2 = TextWithColor(lv_txtNumber2, (Color(150*100/255,150*100/255,30*100/255)));
                    }

                }
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelLeft[1], lv_txtNumber1, PlayerGroupSingle(lp_intPlayer));
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[1], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelRight[1], lv_txtNumber2, PlayerGroupSingle(lp_intPlayer));
                libPEEP_gf_UpdateTOWModule(lv_intValueList[1], lv_intValueList[2], lv_intColorPlayer[1], lv_intColorPlayer[2], 1, lp_intPlayer);
                lv_txtMessage = (lv_txtTitle2);
                lv_txtNumber1 = IntToText(lv_intValueList2[1]);
                lv_txtNumber2 = IntToText(lv_intValueList2[2]);
                if ((lv_intValueList2[1] > lv_intValueList2[2])) {
                    lv_txtNumber1 = TextWithColor(lv_txtNumber1, (Color(150*100/255,150*100/255,30*100/255)));
                }
                else {
                    if ((lv_intValueList2[1] < lv_intValueList2[2])) {
                        lv_txtNumber2 = TextWithColor(lv_txtNumber2, (Color(150*100/255,150*100/255,30*100/255)));
                    }

                }
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelLeft[2], lv_txtNumber1, PlayerGroupSingle(lp_intPlayer));
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[2], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelRight[2], lv_txtNumber2, PlayerGroupSingle(lp_intPlayer));
                libPEEP_gf_UpdateTOWModule(lv_intValueList2[1], lv_intValueList2[2], lv_intColorPlayer[1], lv_intColorPlayer[2], 2, lp_intPlayer);
            }
        }
        else {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelLeft[1], StringToText(""), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageLeft[1], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageCenter[1], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelLeft[2], StringToText(""), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageLeft[2], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageCenter[2], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelRight[1], StringToText(""), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageRight[1], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelRight[2], StringToText(""), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageRight[2], "Assets\\Textures\\blank.dds", PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[1], StringExternal("Param/Value/lib_PEEP_C82AC6CD"), PlayerGroupSingle(lp_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTOWLabelCenter[2], StringToText(""), PlayerGroupSingle(lp_intPlayer));
        }
    }
}

void libPEEP_gf_UpdateTOWModule (int lp_intLeftValue, int lp_intRightValue, int lp_intLeftPlayer, int lp_intRightPlayer, int lp_intRowNum, int lp_intPlayer) {
    // Variable Declarations
    int lv_intLeftWidth;
    int lv_intRightWidth;
    text lv_txtLeftImage;
    text lv_txtRightImage;
    int lv_intTotal;
    int lv_intX;
    int lv_intY;
    int lv_intOverallWidth;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_txtLeftImage = StringExternal("Param/Value/lib_PEEP_9E74FA65");
    lv_txtRightImage = StringExternal("Param/Value/lib_PEEP_75B25EA9");
    lv_intOverallWidth = 440;

    // Implementation
    lv_intY = (194 + ((lp_intRowNum - 1) * 140));
    lv_intTotal = (lp_intLeftValue + lp_intRightValue);
    if ((lv_intTotal > 0)) {
        lv_intLeftWidth = FixedToInt(((IntToFixed(lp_intLeftValue) / IntToFixed(lv_intTotal)) * IntToFixed(lv_intOverallWidth)));
        lv_intRightWidth = FixedToInt(((IntToFixed(lp_intRightValue) / IntToFixed(lv_intTotal)) * IntToFixed(lv_intOverallWidth)));
    }
    else {
        lv_intLeftWidth = (lv_intOverallWidth / 2);
        lv_intRightWidth = (lv_intOverallWidth / 2);
    }
    if ((lv_intLeftWidth == 0)) {
        lv_intLeftWidth = 10;
        lv_intRightWidth = (lv_intOverallWidth - 10);
    }

    if ((lv_intRightWidth == 0)) {
        lv_intRightWidth = 10;
        lv_intLeftWidth = (lv_intOverallWidth - 10);
    }

    lv_intX = ((DialogGetWidth(libPEEP_gv_recUI.lv_dTOWDialog) - lv_intOverallWidth) / 2);
    DialogControlSetSize(libPEEP_gv_recUI.lv_diTOWImageLeft[lp_intRowNum], PlayerGroupSingle(lp_intPlayer), lv_intLeftWidth, 35);
    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageLeft[lp_intRowNum], libPEEP_gv_recPlayers[lp_intLeftPlayer].lv_imgLeftTOWImage, PlayerGroupSingle(lp_intPlayer));
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diTOWImageLeft[lp_intRowNum], PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, lv_intX, lv_intY);
    lv_intX = (lv_intX + (lv_intLeftWidth + 0));
    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageCenter[lp_intRowNum], "Assets\\Textures\\ui_btn_aicommand_commandcard_assault.dds", PlayerGroupSingle(lp_intPlayer));
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diTOWImageCenter[lp_intRowNum], PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, (lv_intX - (DialogControlGetWidth(libPEEP_gv_recUI.lv_diTOWImageCenter[lp_intRowNum], lp_intPlayer) / 2)), (lv_intY - 13));
    DialogControlSetSize(libPEEP_gv_recUI.lv_diTOWImageRight[lp_intRowNum], PlayerGroupSingle(lp_intPlayer), lv_intRightWidth, 35);
    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diTOWImageRight[lp_intRowNum], libPEEP_gv_recPlayers[lp_intRightPlayer].lv_imgRightTOWImage, PlayerGroupSingle(lp_intPlayer));
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diTOWImageRight[lp_intRowNum], PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, lv_intX, lv_intY);
}

void libPEEP_gf_CreateResearchPanels () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_intMatch;
    int lv_intRace;
    int lv_intIconSize;
    int lv_intIconGap;
    int lv_intDialogGap;
    int lv_intRowHeight;
    int lv_intRowGap;
    int lv_intXForDialogs;
    int lv_intYForDialogs;
    int lv_intX;
    int lv_intY;
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intNumDialogs;
    int lv_intRow;
    int lv_intCol;
    int lv_intLabelWidth;
    text lv_txtRowTitle;
    int lv_intIconLevel;
    text lv_txtImageName;
    fixed lv_realMultiplier;
    int lv_intLabelOffset;

    // Automatic Variable Declarations
    int autoE948E75D_ae;
    const int autoE948E75D_ai = 1;
    int auto4BD3E32D_ae;
    const int auto4BD3E32D_ai = 1;
    const int autoFD9E3E61_ae = 5;
    const int autoFD9E3E61_ai = 1;
    const int auto8A907110_ae = 10;
    const int auto8A907110_ai = 1;

    // Variable Initialization
    lv_intIconSize = 36;
    lv_intIconGap = 6;
    lv_intDialogGap = 20;
    lv_intRowHeight = 44;
    lv_intRowGap = 20;
    lv_intYForDialogs = 235;
    lv_intDialogWidth = 366;
    lv_intDialogHeight = 273;
    lv_intLabelWidth = 100;
    lv_intLabelOffset = 13;

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intNumMatchPlayers == 2)) {
        lv_realMultiplier = 1.4;
        lv_intDialogHeight = 357;
        lv_intLabelOffset = 27;
    }
    else {
        lv_realMultiplier = 1.0;
        lv_intDialogHeight = 273;
        lv_intLabelOffset = 13;
    }
    lv_intDialogWidth = FixedToInt((IntToFixed(lv_intDialogWidth) * lv_realMultiplier));
    lv_intIconSize = FixedToInt((IntToFixed(lv_intIconSize) * lv_realMultiplier));
    lv_intIconGap = FixedToInt((IntToFixed(lv_intIconGap) * lv_realMultiplier));
    lv_intRowHeight = FixedToInt((IntToFixed(lv_intRowHeight) * lv_realMultiplier));
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    autoE948E75D_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoE948E75D_ai >= 0 && lv_intIndex <= autoE948E75D_ae) || (autoE948E75D_ai < 0 && lv_intIndex >= autoE948E75D_ae) ) ; lv_intIndex += autoE948E75D_ai ) {
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            lv_intNumDialogs += 1;
        }

    }
    lv_intXForDialogs = (0 - (((lv_intDialogWidth * lv_intNumDialogs) + (lv_intDialogGap * (lv_intNumDialogs - 1))) / 2));
    lv_intXForDialogs = (lv_intXForDialogs + (lv_intDialogWidth / 2));
    auto4BD3E32D_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto4BD3E32D_ai >= 0 && lv_intIndex <= auto4BD3E32D_ae) || (auto4BD3E32D_ai < 0 && lv_intIndex >= auto4BD3E32D_ae) ) ; lv_intIndex += auto4BD3E32D_ai ) {
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            lv_intRace = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace;
            DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTop, lv_intXForDialogs, lv_intYForDialogs, true);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_dResearchDialog = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intDialogWidth - 80), lv_intDialogHeight, c_anchorTopLeft, 110, 47, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            lv_txtRowTitle = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 130, 10);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtRowTitle, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerRight", PlayerGroupAll());
            lv_intY = 54;
            lv_intRow = 1;
            for ( ; ( (autoFD9E3E61_ai >= 0 && lv_intRow <= autoFD9E3E61_ae) || (autoFD9E3E61_ai < 0 && lv_intRow >= autoFD9E3E61_ae) ) ; lv_intRow += autoFD9E3E61_ai ) {
                lv_intX = 0;
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intLabelWidth, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, lv_intY);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
                lv_txtRowTitle = (StringExternal("Param/Value/lib_PEEP_267ADEFC") + libPEEP_gv_recGlobals.lv_txtResearchRowNames[lv_intRow] + StringExternal("Param/Value/lib_PEEP_AF7B9F83"));
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtRowTitle, PlayerGroupAll());
                lv_intX += (lv_intLabelWidth + 18);
                lv_intCol = 1;
                for ( ; ( (auto8A907110_ai >= 0 && lv_intCol <= auto8A907110_ae) || (auto8A907110_ai < 0 && lv_intCol >= auto8A907110_ae) ) ; lv_intCol += auto8A907110_ai ) {
                    if ((libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][1].lv_upUpgrade != null)) {
                        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diResearchBackgrounds[lv_intRow][lv_intCol] = DialogControlLastCreated();
                        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
                        if ((libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][0].lv_imgIcon != null)) {
                            lv_intIconLevel = 0;
                        }
                        else {
                            lv_intIconLevel = 1;
                        }
                        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, libPEEP_gf_makeResearchTooltip(lv_intRace, lv_intRow, lv_intCol, 0, libPEEP_gv_recPlayers[lv_intPlayer].lv_boolResearchInProgressList[lv_intRow][lv_intCol]), libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intIconLevel].lv_imgIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diResearchIcons[lv_intRow][lv_intCol] = DialogControlLastCreated();
                        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
                        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
                        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 44, 44);
                        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_intX + lv_intLabelOffset), (lv_intY + lv_intLabelOffset));
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diResarchLevelLabels[lv_intRow][lv_intCol] = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
                        lv_intX += (lv_intIconSize + lv_intIconGap);
                    }
                    else {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diResearchIcons[lv_intRow][lv_intCol] = c_invalidDialogControlId;
                    }
                }
                lv_intY += lv_intRowHeight;
            }
            lv_intXForDialogs += (lv_intDialogWidth + lv_intDialogGap);
        }

    }
}

void libPEEP_gf_DestroyResearchPanels () {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_dDialog;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;

    // Automatic Variable Declarations
    int auto4271042F_ae;
    const int auto4271042F_ai = 1;
    const int auto0C92E339_ae = 7;
    const int auto0C92E339_ai = 1;
    const int autoB033C7DD_ae = 10;
    const int autoB033C7DD_ai = 1;
    const int autoEDDB6299_ae = 4;
    const int autoEDDB6299_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    auto4271042F_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto4271042F_ai >= 0 && lv_intTmpPlayer <= auto4271042F_ae) || (auto4271042F_ai < 0 && lv_intTmpPlayer >= auto4271042F_ae) ) ; lv_intTmpPlayer += auto4271042F_ai ) {
        lv_dDialog = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dResearchDialog;
        if ((lv_dDialog != c_invalidDialogId)) {
            DialogDestroy(lv_dDialog);
            libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dResearchDialog = c_invalidDialogId;
            lv_intRow = 1;
            for ( ; ( (auto0C92E339_ai >= 0 && lv_intRow <= auto0C92E339_ae) || (auto0C92E339_ai < 0 && lv_intRow >= auto0C92E339_ae) ) ; lv_intRow += auto0C92E339_ai ) {
                lv_intCol = 1;
                for ( ; ( (autoB033C7DD_ai >= 0 && lv_intCol <= autoB033C7DD_ae) || (autoB033C7DD_ai < 0 && lv_intCol >= autoB033C7DD_ae) ) ; lv_intCol += autoB033C7DD_ai ) {
                    lv_intLevel = 1;
                    for ( ; ( (autoEDDB6299_ai >= 0 && lv_intLevel <= autoEDDB6299_ae) || (autoEDDB6299_ai < 0 && lv_intLevel >= autoEDDB6299_ae) ) ; lv_intLevel += autoEDDB6299_ai ) {
                        libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_diResearchIcons[lv_intRow][lv_intCol] = c_invalidDialogControlId;
                        libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_diResearchBackgrounds[lv_intRow][lv_intCol] = c_invalidDialogControlId;
                    }
                }
            }
        }

    }
}

void libPEEP_gf_UpdateResearchIcon (int lp_intPlayer, int lp_intRow, int lp_intCol) {
    // Variable Declarations
    int lv_intRace;
    text lv_txtMessage;
    color lv_coColor;
    int lv_intLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coColor = Color(0,0,0);

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchIcons[lp_intRow][lp_intCol] != c_invalidDialogControlId)) {
        lv_intRace = libPEEP_gv_recPlayers[lp_intPlayer].lv_intTrueRace;
        lv_intLevel = libPEEP_gv_recPlayers[lp_intPlayer].lv_intResearchCompleteList[lp_intRow][lp_intCol];
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchIcons[lp_intRow][lp_intCol], libPEEP_gf_makeResearchTooltip(lv_intRace, lp_intRow, lp_intCol, lv_intLevel, libPEEP_gv_recPlayers[lp_intPlayer].lv_boolResearchInProgressList[lp_intRow][lp_intCol]), PlayerGroupAll());
        if ((lv_intLevel > 0)) {
            if ((lp_intRow == 1)) {
                if ((lv_intLevel == 1)) {
                    lv_coColor = Color(32.16, 68.63, 31.37);
                    lv_txtMessage = (TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intLevel), lv_coColor));
                }
                else if ((lv_intLevel == 2)) {
                    lv_coColor = Color(39.22, 100.00, 39.22);
                    lv_txtMessage = (TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intLevel), lv_coColor));
                }
                else if ((lv_intLevel == 3)) {
                    lv_coColor = Color(80.00, 100.00, 80.00);
                    lv_txtMessage = (TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intLevel), lv_coColor));
                }
                libNtve_gf_SetDialogItemText(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResarchLevelLabels[lp_intRow][lp_intCol], lv_txtMessage, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemText(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResarchLevelLabels[lp_intRow][lp_intCol], StringToText(""), PlayerGroupAll());
            }
        }
        else {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResarchLevelLabels[lp_intRow][lp_intCol], StringToText(""), PlayerGroupAll());
        }
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolResearchInProgressList[lp_intRow][lp_intCol] == true)) {
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchBackgrounds[lp_intRow][lp_intCol], "Assets\\Textures\\towbar_left_yellow.dds", PlayerGroupAll());
            DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchBackgrounds[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 20.0);
            DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchIcons[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 40.0);
        }
        else {
            if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intResearchCompleteList[lp_intRow][lp_intCol] > 0)) {
                libNtve_gf_SetDialogItemImage(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchBackgrounds[lp_intRow][lp_intCol], "Assets\\Textures\\buildingplane_green1.dds", PlayerGroupAll());
                DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchBackgrounds[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 20.0);
                DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchIcons[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 0.0);
            }
            else {
                libNtve_gf_SetDialogItemImage(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchBackgrounds[lp_intRow][lp_intCol], "Assets\\Textures\\blank.dds", PlayerGroupAll());
                DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diResearchIcons[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 75.0);
            }
        }
    }

}

void libPEEP_gf_RefreshAllResearchPanels () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;

    // Automatic Variable Declarations
    int autoD1FA186E_ae;
    const int autoD1FA186E_ai = 1;
    const int auto0360EDC3_ae = 5;
    const int auto0360EDC3_ai = 1;
    const int auto8CF6AD69_ae = 10;
    const int auto8CF6AD69_ai = 1;

    // Variable Initialization

    // Implementation
    autoD1FA186E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoD1FA186E_ai >= 0 && lv_intPlayer <= autoD1FA186E_ae) || (autoD1FA186E_ai < 0 && lv_intPlayer >= autoD1FA186E_ae) ) ; lv_intPlayer += autoD1FA186E_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_dResearchDialog != c_invalidDialogId)) {
            lv_intRow = 1;
            for ( ; ( (auto0360EDC3_ai >= 0 && lv_intRow <= auto0360EDC3_ae) || (auto0360EDC3_ai < 0 && lv_intRow >= auto0360EDC3_ae) ) ; lv_intRow += auto0360EDC3_ai ) {
                lv_intCol = 1;
                for ( ; ( (auto8CF6AD69_ai >= 0 && lv_intCol <= auto8CF6AD69_ae) || (auto8CF6AD69_ai < 0 && lv_intCol >= auto8CF6AD69_ae) ) ; lv_intCol += auto8CF6AD69_ai ) {
                    libPEEP_gf_UpdateResearchIcon(lv_intPlayer, lv_intRow, lv_intCol);
                }
            }
        }

    }
}

void libPEEP_gf_ResetResearchPanels () {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gf_DestroyResearchPanels();
    libPEEP_gf_CreateResearchPanels();
    libPEEP_gf_RefreshAllResearchPanels();
}

void libPEEP_gf_ShowResearchDialogsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_dDialog;

    // Automatic Variable Declarations
    int autoF3FB2362_ae;
    const int autoF3FB2362_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    autoF3FB2362_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoF3FB2362_ai >= 0 && lv_intTmpPlayer <= autoF3FB2362_ae) || (autoF3FB2362_ai < 0 && lv_intTmpPlayer >= autoF3FB2362_ae) ) ; lv_intTmpPlayer += autoF3FB2362_ai ) {
        lv_dDialog = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dResearchDialog;
        if ((lv_dDialog != c_invalidDialogId)) {
            DialogSetVisible(lv_dDialog, PlayerGroupSingle(lp_intPlayer), true);
        }

    }
}

void libPEEP_gf_HideResearchDialogsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_dDialog;

    // Automatic Variable Declarations
    int autoE297EA53_ae;
    const int autoE297EA53_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    autoE297EA53_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoE297EA53_ai >= 0 && lv_intTmpPlayer <= autoE297EA53_ae) || (autoE297EA53_ai < 0 && lv_intTmpPlayer >= autoE297EA53_ae) ) ; lv_intTmpPlayer += autoE297EA53_ai ) {
        lv_dDialog = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dResearchDialog;
        if ((lv_dDialog != c_invalidDialogId)) {
            DialogSetVisible(lv_dDialog, PlayerGroupSingle(lp_intPlayer), false);
        }

    }
}

text libPEEP_gf_makeResearchTooltip (int lp_intRace, int lp_intRow, int lp_intCol, int lp_intLevel, bool lp_boolInProgress) {
    // Variable Declarations
    text lv_txtMessage;
    text lv_txtTmp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_intRow > 1)) {
        lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_E6D8309D") + libPEEP_gv_recResearch[lp_intRace][lp_intRow][lp_intCol][1].lv_txtName + StringExternal("Param/Value/lib_PEEP_37A62C98"));
        lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_0519FBE2") + libPEEP_gv_recResearch[lp_intRace][lp_intRow][lp_intCol][1].lv_txtDescription);
        if ((lp_boolInProgress == true)) {
            lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_EE4CC11A"));
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTmp, (Color(150*100/255,150*100/255,30*100/255))));
        }
        else {
            if ((lp_intLevel == 0)) {
                lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_5440AFFE"));
                lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTmp, (Color(149*100/255,150*100/255,151*100/255))));
            }
            else {
                lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_281ADC3F"));
                lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTmp, (Color(22*100/255,128*100/255,0))));
            }
        }
    }
    else {
        lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_437B78CC") + libPEEP_gv_recResearch[lp_intRace][lp_intRow][lp_intCol][lp_intLevel].lv_txtName + StringExternal("Param/Value/lib_PEEP_F6B65690"));
        lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_3DD55454") + libPEEP_gv_recResearch[lp_intRace][lp_intRow][lp_intCol][lp_intLevel].lv_txtDescription);
        if ((lp_boolInProgress == true)) {
            lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_5A557952") + libPEEP_gf_formatIntegerAsText((lp_intLevel + 1)) + StringExternal("Param/Value/lib_PEEP_142A8509"));
            lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTmp, (Color(150*100/255,150*100/255,30*100/255))));
        }

    }
    return lv_txtMessage;
}

void libPEEP_gf_HandleResearchEvent (int lp_intPlayer, string lp_upUpgrade, unit lp_uUnit, int lp_intResearchStatus) {
    // Variable Declarations
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;
    int lv_intRace;
    text lv_txtCommentary;
    text lv_txtNameOfUpgrade;
    bool lv_boolMatched;
    text lv_txtLogVerb;
    int lv_intStatus;
    int lv_intMatchRow;
    int lv_intMatchCol;
    int lv_intMatchLevel;

    // Automatic Variable Declarations
    const int autoA30FFE8A_ae = 5;
    const int autoA30FFE8A_ai = 1;
    const int auto63026C0A_ae = 10;
    const int auto63026C0A_ai = 1;
    const int autoA175F630_ae = 3;
    const int autoA175F630_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intRace = libPEEP_gv_recPlayers[lp_intPlayer].lv_intTrueRace;
    lv_intRow = 1;
    for ( ; ( (autoA30FFE8A_ai >= 0 && lv_intRow <= autoA30FFE8A_ae) || (autoA30FFE8A_ai < 0 && lv_intRow >= autoA30FFE8A_ae) ) ; lv_intRow += autoA30FFE8A_ai ) {
        lv_intCol = 1;
        for ( ; ( (auto63026C0A_ai >= 0 && lv_intCol <= auto63026C0A_ae) || (auto63026C0A_ai < 0 && lv_intCol >= auto63026C0A_ae) ) ; lv_intCol += auto63026C0A_ai ) {
            lv_intLevel = 1;
            for ( ; ( (autoA175F630_ai >= 0 && lv_intLevel <= autoA175F630_ae) || (autoA175F630_ai < 0 && lv_intLevel >= autoA175F630_ae) ) ; lv_intLevel += autoA175F630_ai ) {
                if ((lp_upUpgrade == libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_upUpgrade)) {
                    lv_boolMatched = true;
                    lv_intMatchRow = lv_intRow;
                    lv_intMatchCol = lv_intCol;
                    lv_intMatchLevel = lv_intLevel;
                    lv_txtNameOfUpgrade = libPEEP_gv_recResearch[lv_intRace][lv_intRow][lv_intCol][lv_intLevel].lv_txtName;
                    break;
                }

            }
        }
    }
    if ((lv_boolMatched == true)) {
        if ((lp_intResearchStatus == 0)) {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolResearchInProgressList[lv_intMatchRow][lv_intMatchCol] = true;
        }
        else if ((lp_intResearchStatus == 1)) {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intResearchCompleteList[lv_intMatchRow][lv_intMatchCol] = lv_intMatchLevel;
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolResearchInProgressList[lv_intMatchRow][lv_intMatchCol] = false;
            lv_txtLogVerb = StringExternal("Param/Value/lib_PEEP_28CA36DA");
            lv_txtCommentary = (lv_txtLogVerb + lv_txtNameOfUpgrade);
            libPEEP_gf_HandleMatchEventLogChat(lp_intPlayer, 6, lv_txtNameOfUpgrade, lv_txtCommentary, lp_uUnit);
        }
        else if ((lp_intResearchStatus == 2)) {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolResearchInProgressList[lv_intMatchRow][lv_intMatchCol] = false;
        }
        libPEEP_gf_UpdateResearchIcon(lp_intPlayer, lv_intMatchRow, lv_intMatchCol);
    }

}

void libPEEP_gf_ClearAllResearchMemory () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRow;
    int lv_intCol;

    // Automatic Variable Declarations
    int autoBD4175FD_ae;
    const int autoBD4175FD_ai = 1;
    const int auto59C5021A_ae = 6;
    const int auto59C5021A_ai = 1;
    const int auto369F1E71_ae = 10;
    const int auto369F1E71_ai = 1;

    // Variable Initialization

    // Implementation
    autoBD4175FD_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoBD4175FD_ai >= 0 && lv_intPlayer <= autoBD4175FD_ae) || (autoBD4175FD_ai < 0 && lv_intPlayer >= autoBD4175FD_ae) ) ; lv_intPlayer += autoBD4175FD_ai ) {
        lv_intRow = 1;
        for ( ; ( (auto59C5021A_ai >= 0 && lv_intRow <= auto59C5021A_ae) || (auto59C5021A_ai < 0 && lv_intRow >= auto59C5021A_ae) ) ; lv_intRow += auto59C5021A_ai ) {
            lv_intCol = 1;
            for ( ; ( (auto369F1E71_ai >= 0 && lv_intCol <= auto369F1E71_ae) || (auto369F1E71_ai < 0 && lv_intCol >= auto369F1E71_ae) ) ; lv_intCol += auto369F1E71_ai ) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intResearchCompleteList[lv_intRow][lv_intCol] = 0;
                libPEEP_gv_recPlayers[lv_intPlayer].lv_boolResearchInProgressList[lv_intRow][lv_intCol] = false;
            }
        }
    }
}

void libPEEP_gf_ToggleSimpleStatsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;

    // Automatic Variable Declarations
    int auto43401938_ae;
    const int auto43401938_ai = 1;
    int auto5F95F422_ae;
    const int auto5F95F422_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSimpleStats == false)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSimpleStats = true;
        DialogControlSetSize(libPEEP_gv_recUI.lv_dStatsDialogBackground, PlayerGroupSingle(lp_intPlayer), DialogControlGetWidth(libPEEP_gv_recUI.lv_dStatsDialogBackground, 1), 182);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsToggleImage, "Assets\\Textures\\btn-ability-terran-land.dds", PlayerGroupSingle(lp_intPlayer));
        auto5F95F422_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
        lv_intIndex = 0;
        for ( ; ( (auto5F95F422_ai >= 0 && lv_intIndex <= auto5F95F422_ae) || (auto5F95F422_ai < 0 && lv_intIndex >= auto5F95F422_ae) ) ; lv_intIndex += auto5F95F422_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsAPMLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsArmyValueLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsArmyValueLostLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsMineralsRateLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsVespeneRateLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsHarvesterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        }
    }
    else {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSimpleStats = false;
        DialogControlSetSize(libPEEP_gv_recUI.lv_dStatsDialogBackground, PlayerGroupSingle(lp_intPlayer), DialogControlGetWidth(libPEEP_gv_recUI.lv_dStatsDialogBackground, 1), 374);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsToggleImage, "Assets\\Textures\\btn-ability-terran-liftoff.dds", PlayerGroupSingle(lp_intPlayer));
        auto43401938_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
        lv_intIndex = 0;
        for ( ; ( (auto43401938_ai >= 0 && lv_intIndex <= auto43401938_ae) || (auto43401938_ai < 0 && lv_intIndex >= auto43401938_ae) ) ; lv_intIndex += auto43401938_ai ) {
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsAPMLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsArmyValueLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsArmyValueLostLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsMineralsRateLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsVespeneRateLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
            DialogControlSetVisible(libPEEP_gv_recUI.lv_diStatsHarvesterLabels[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
        }
    }
}

void libPEEP_gf_ResetResourcePanelsforFaceoff () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoE2CECFC4_ae;
    const int autoE2CECFC4_ai = 1;

    // Variable Initialization

    // Implementation
    autoE2CECFC4_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoE2CECFC4_ai >= 0 && lv_intIndex <= autoE2CECFC4_ae) || (autoE2CECFC4_ai < 0 && lv_intIndex >= autoE2CECFC4_ae) ) ; lv_intIndex += autoE2CECFC4_ai ) {
        DialogSetSize(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, DialogGetWidth(libPEEP_gv_recUI.lv_dStatsBlizzardDialog), 40);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardRaceIcons[lv_intIndex], "Assets\\Textures\\blank.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsBlizzardMineralsLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsBlizzardVespeneLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsBlizzardSupplyLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        DialogSetSize(libPEEP_gv_recUI.lv_dStatsDialog, 65, DialogGetHeight(libPEEP_gv_recUI.lv_dStatsDialog));
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsRaceIcons[lv_intIndex], "Assets\\Textures\\blank.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsMineralsLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsMineralsRateLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsVespeneLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsVespeneRateLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsHarvesterLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsSupplyLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsArmyValueLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsArmyValueLostLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsAPMLabels[lv_intIndex], StringToText(""), PlayerGroupAll());
    }
}

void libPEEP_gf_CreateBlizzardResourceDialog () {
    // Variable Declarations
    int lv_intWidth;
    int lv_intHeight;
    int lv_intGapX;
    int lv_intGapX2;
    int lv_intGapY;
    int lv_intX;
    int lv_intY;
    int lv_intLabelWidth;
    int lv_intLabelHeight;
    int lv_intIndex;
    int lv_intIconSize;
    int lv_intLabelYOffset;
    fixed lv_realFadeValue;

    // Automatic Variable Declarations
    int autoE7F40ED8_ae;
    const int autoE7F40ED8_ai = 1;

    // Variable Initialization
    lv_intWidth = 450;
    lv_intHeight = 300;
    lv_intGapX = 5;
    lv_intGapX2 = 85;
    lv_intGapY = 5;
    lv_intLabelWidth = 90;
    lv_intLabelHeight = 30;
    lv_intIconSize = 30;
    lv_intLabelYOffset = 5;
    lv_realFadeValue = 30.0;

    // Implementation
    DialogCreate(lv_intWidth, lv_intHeight, c_anchorTopRight, 0, 0, true);
    libPEEP_gv_recUI.lv_dStatsBlizzardDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    lv_intY = 5;
    autoE7F40ED8_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoE7F40ED8_ai >= 0 && lv_intIndex <= autoE7F40ED8_ae) || (autoE7F40ED8_ai < 0 && lv_intIndex >= autoE7F40ED8_ae) ) ; lv_intIndex += autoE7F40ED8_ai ) {
        lv_intX = 30;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgLeftTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardRaceIconBackgrounds[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgRightTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardRaceIconBackgrounds2[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intIconSize - 4), (lv_intIconSize - 4), c_anchorTopLeft, (lv_intX + 2), (lv_intY + 2), StringToText(""), "Assets\\Textures\\zergblankportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\icon-1v1-zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardRaceIcons[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_9C13EF57"), PlayerGroupAll());
        lv_intX += (lv_intIconSize + 7);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgLeftTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardMineralsIconBackgrounds[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgRightTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardMineralsIconBackgrounds2[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intIconSize - 4), (lv_intIconSize - 4), c_anchorTopLeft, (lv_intX + 2), (lv_intY + 2), StringToText(""), "Assets\\Textures\\zergblankportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\icon-mineral-nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_09BD8DAC"), PlayerGroupAll());
        lv_intX += (lv_intIconSize + lv_intGapX);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intLabelWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, (lv_intY + lv_intLabelYOffset));
        libPEEP_gv_recUI.lv_diStatsBlizzardMineralsLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Header18", PlayerGroupAll());
        lv_intX += lv_intGapX2;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgLeftTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardVespeneIconBackgrounds[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgRightTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardVespeneIconBackgrounds2[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intIconSize - 4), (lv_intIconSize - 4), c_anchorTopLeft, (lv_intX + 2), (lv_intY + 2), StringToText(""), "Assets\\Textures\\zergblankportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\icon-gas-terran-nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_B70CB949"), PlayerGroupAll());
        lv_intX += (lv_intIconSize + lv_intGapX);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intLabelWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, (lv_intY + lv_intLabelYOffset));
        libPEEP_gv_recUI.lv_diStatsBlizzardVespeneLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Header18", PlayerGroupAll());
        lv_intX += lv_intGapX2;
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgLeftTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIconBackgrounds[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgRightTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIconBackgrounds2[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intIconSize - 4), (lv_intIconSize - 4), c_anchorTopLeft, (lv_intX + 2), (lv_intY + 2), StringToText(""), "Assets\\Textures\\zergblankportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\icon-supply-terran_nobg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIcons[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_PEEP_5DBF5DCA"), PlayerGroupAll());
        lv_intX += (lv_intIconSize + lv_intGapX);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lv_intLabelWidth + 20), lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, (lv_intY + lv_intLabelYOffset));
        libPEEP_gv_recUI.lv_diStatsBlizzardSupplyLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Header18", PlayerGroupAll());
        lv_intY += (lv_intIconSize + lv_intGapY);
    }
}

void libPEEP_gf_CreateAdvancedResourceDialog () {
    // Variable Declarations
    int lv_intWidth;
    int lv_intHeight;
    int lv_intGapX;
    int lv_intGapY;
    int lv_intX;
    int lv_intY;
    int lv_intColumnWidth;
    int lv_intLabelHeight;
    int lv_intIndex;
    int lv_intXForIcons;
    int lv_intYOffsetForIcons;
    int lv_intIconSize;
    int lv_intPlayer;
    int lv_intX2;
    int lv_intY2;
    int lv_intStartX;
    fixed lv_realFadeValue;

    // Automatic Variable Declarations
    int autoA48DB80C_ae;
    const int autoA48DB80C_ai = 1;
    int auto01930A2F_ae;
    const int auto01930A2F_ai = 1;
    int autoD3482DB5_ae;
    const int autoD3482DB5_ai = 1;
    int autoCD4A105B_ae;
    const int autoCD4A105B_ai = 1;
    int auto661F99B5_ae;
    const int auto661F99B5_ai = 1;
    int auto86D7F507_ae;
    const int auto86D7F507_ai = 1;
    int auto840C2A34_ae;
    const int auto840C2A34_ai = 1;
    int auto4B6C4815_ae;
    const int auto4B6C4815_ai = 1;
    int auto8F8A1375_ae;
    const int auto8F8A1375_ai = 1;
    int autoB2CC1875_ae;
    const int autoB2CC1875_ai = 1;

    // Variable Initialization
    lv_intWidth = 2000;
    lv_intHeight = 374;
    lv_intGapX = 5;
    lv_intGapY = 2;
    lv_intColumnWidth = 80;
    lv_intLabelHeight = 30;
    lv_intXForIcons = 21;
    lv_intYOffsetForIcons = 30;
    lv_intIconSize = 30;
    lv_intStartX = 60;
    lv_realFadeValue = 30.0;

    // Implementation
    DialogCreate(lv_intWidth, lv_intHeight, c_anchorTopRight, -10, -33, true);
    libPEEP_gv_recUI.lv_dStatsDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dStatsDialog, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 320, DialogGetHeight(DialogLastCreated()), c_anchorTopRight, 0, 0, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_dStatsDialogBackground = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dStatsDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, 18, 37, StringExternal("Param/Value/lib_PEEP_EF5F21C2"), StringToText(""), "");
    libPEEP_gv_recUI.lv_diStatsToggleSimple = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonToggleSimpleStats, c_playerAny, libPEEP_gv_recUI.lv_diStatsToggleSimple, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, 18, 37, StringToText(""), "Assets\\Textures\\btn-ability-terran-liftoff.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsToggleImage = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    lv_intY = 50;
    lv_intX = lv_intStartX;
    autoA48DB80C_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoA48DB80C_ai >= 0 && lv_intIndex <= autoA48DB80C_ae) || (autoA48DB80C_ai < 0 && lv_intIndex >= autoA48DB80C_ae) ) ; lv_intIndex += autoA48DB80C_ai ) {
        lv_intX2 = (lv_intX + lv_intColumnWidth);
        lv_intX2 = (lv_intX2 - lv_intIconSize);
        lv_intY2 = (lv_intY - 4);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intX2, lv_intY2, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgLeftTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsRaceIconBackgrounds[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intX2, lv_intY2, StringToText(""), libPEEP_gv_recPlayers[1].lv_imgRightTOWImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsRaceIconBackgrounds2[lv_intIndex] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, lv_realFadeValue);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intIconSize - 4), (lv_intIconSize - 4), c_anchorTopRight, (lv_intX2 + 2), (lv_intY2 + 2), StringToText(""), "Assets\\Textures\\zergblankportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intX2, lv_intY2, StringToText(""), "Assets\\Textures\\icon-1v1-zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diStatsRaceIcons[lv_intIndex] = DialogControlLastCreated();
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_F1647A05"), "Assets\\Textures\\icon-supply-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsSupplyLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    auto01930A2F_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto01930A2F_ai >= 0 && lv_intIndex <= auto01930A2F_ae) || (auto01930A2F_ai < 0 && lv_intIndex >= auto01930A2F_ae) ) ; lv_intIndex += auto01930A2F_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsSupplyLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_54C75E69"), "Assets\\Textures\\icon-mineral-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsMineralsLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    autoD3482DB5_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoD3482DB5_ai >= 0 && lv_intIndex <= autoD3482DB5_ae) || (autoD3482DB5_ai < 0 && lv_intIndex >= autoD3482DB5_ae) ) ; lv_intIndex += autoD3482DB5_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsMineralsLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_1BB499BA"), "Assets\\Textures\\icon-gas-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsVespeneLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    autoCD4A105B_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoCD4A105B_ai >= 0 && lv_intIndex <= autoCD4A105B_ae) || (autoCD4A105B_ai < 0 && lv_intIndex >= autoCD4A105B_ae) ) ; lv_intIndex += autoCD4A105B_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsVespeneLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_B7095A82"), "Assets\\Textures\\icon-energy-zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsHarvesterLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    auto661F99B5_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto661F99B5_ai >= 0 && lv_intIndex <= auto661F99B5_ae) || (auto661F99B5_ai < 0 && lv_intIndex >= auto661F99B5_ae) ) ; lv_intIndex += auto661F99B5_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsHarvesterLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_64D3737C"), "Assets\\Textures\\icon-highyieldmineral-zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsMineralsRateLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    auto86D7F507_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto86D7F507_ai >= 0 && lv_intIndex <= auto86D7F507_ae) || (auto86D7F507_ai < 0 && lv_intIndex >= auto86D7F507_ae) ) ; lv_intIndex += auto86D7F507_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsMineralsRateLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_8215528A"), "Assets\\Textures\\icon-gas-zerg.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsVespeneRateLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    auto840C2A34_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto840C2A34_ai >= 0 && lv_intIndex <= auto840C2A34_ae) || (auto840C2A34_ai < 0 && lv_intIndex >= auto840C2A34_ae) ) ; lv_intIndex += auto840C2A34_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsVespeneRateLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_769EFBAE"), "Assets\\Textures\\ui_chatbaricons_zerg_allies.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsArmyValueLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    auto4B6C4815_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto4B6C4815_ai >= 0 && lv_intIndex <= auto4B6C4815_ae) || (auto4B6C4815_ai < 0 && lv_intIndex >= auto4B6C4815_ae) ) ; lv_intIndex += auto4B6C4815_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsArmyValueLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_2D96CE9B"), "Assets\\Textures\\ui_chatbaricons_protoss_allies.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsArmyValueLostLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    auto8F8A1375_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto8F8A1375_ai >= 0 && lv_intIndex <= auto8F8A1375_ae) || (auto8F8A1375_ai < 0 && lv_intIndex >= auto8F8A1375_ae) ) ; lv_intIndex += auto8F8A1375_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsArmyValueLostLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStatsDialog, lv_intIconSize, lv_intIconSize, c_anchorTopRight, lv_intXForIcons, (lv_intY + lv_intYOffsetForIcons), StringExternal("Param/Value/lib_PEEP_3E671E65"), "Assets\\Textures\\icon-time-protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diStatsAPMLabels[0] = DialogControlLastCreated();
    lv_intX = lv_intStartX;
    lv_intY = (lv_intLabelHeight + lv_intGapY + lv_intY);
    autoB2CC1875_ae = libPEEP_gv_recGlobals.lv_intMaxMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoB2CC1875_ai >= 0 && lv_intIndex <= autoB2CC1875_ae) || (autoB2CC1875_ai < 0 && lv_intIndex >= autoB2CC1875_ae) ) ; lv_intIndex += autoB2CC1875_ai ) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intColumnWidth, lv_intLabelHeight);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, lv_intX, lv_intY);
        libPEEP_gv_recUI.lv_diStatsAPMLabels[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BattleReportPanelListBoxText", PlayerGroupAll());
        lv_intX = (lv_intX + lv_intColumnWidth + lv_intGapX);
    }
}

void libPEEP_gf_RefreshResourcePanels () {
    int init_i;

    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intIndex;
    int lv_intColumnIndex;
    text lv_txtText;
    int lv_intHarvesters;
    color lv_coColor;
    int lv_intSuppliesMade;
    int lv_intSuppliesUsed;
    int lv_intIndex2;
    int lv_intNumIndexes;
    fixed lv_realAverageAPM;
    fixed lv_realTmpSum;
    color[18] lv_coMineralRateColors;
    color[18] lv_coVespeneRateColors;
    color[18] lv_coHarvesterColors;
    color[18] lv_coArmyValueColors;
    fixed lv_realBestMineralRate;
    fixed lv_realBestVespeneRate;
    int lv_intBestHarvesters;
    fixed lv_realBestArmyValue;
    bool lv_boolMineralRatesUnique;
    bool lv_boolVespeneRatesUnique;
    bool lv_boolHarvestersUnique;
    bool lv_boolArmyValueUnique;
    int lv_intIndex3;
    int lv_intMatch;
    int lv_intIndex4;
    int lv_intMineralBestCount;
    int lv_intVespeneBestCount;
    int lv_intHarvestersBestCount;
    int lv_intArmyValueBestCount;
    int lv_intNumActivePlayers;
    string lv_imgRaceImage;
    string lv_imgSupplyImage;

    // Automatic Variable Declarations
    int autoDA1709DF_ae;
    const int autoDA1709DF_ai = 1;
    int autoEAAFAE14_ae;
    const int autoEAAFAE14_ai = 1;
    int auto8C152213_ae;
    const int auto8C152213_ai = 1;
    int auto893F482A_ae;
    const int auto893F482A_ai = 1;
    int auto36C5957E_ae;
    const int auto36C5957E_ai = 1;

    // Variable Initialization
    lv_coColor = Color(0,0,0);
    for (init_i = 0; init_i <= 17; init_i += 1) {
        lv_coMineralRateColors[init_i] = Color(100,100,100);
    }
    for (init_i = 0; init_i <= 17; init_i += 1) {
        lv_coVespeneRateColors[init_i] = Color(100,100,100);
    }
    for (init_i = 0; init_i <= 17; init_i += 1) {
        lv_coHarvesterColors[init_i] = Color(100,100,100);
    }
    for (init_i = 0; init_i <= 17; init_i += 1) {
        lv_coArmyValueColors[init_i] = Color(100,100,100);
    }

    // Implementation
    libPEEP_gv_recGlobals.lv_intAPMIndex = ModI((libPEEP_gv_recGlobals.lv_intAPMIndex + 1), 30);
    lv_intColumnIndex = 1;
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    autoDA1709DF_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex4 = 1;
    for ( ; ( (autoDA1709DF_ai >= 0 && lv_intIndex4 <= autoDA1709DF_ae) || (autoDA1709DF_ai < 0 && lv_intIndex4 >= autoDA1709DF_ae) ) ; lv_intIndex4 += autoDA1709DF_ai ) {
        lv_intIndex = ((libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers - lv_intIndex4) + 1);
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            if ((PlayerScoreValueGetAsFixed(lv_intPlayer, "MineralsCollectionRate") > lv_realBestMineralRate)) {
                lv_realBestMineralRate = PlayerScoreValueGetAsFixed(lv_intPlayer, "MineralsCollectionRate");
            }

            if ((PlayerScoreValueGetAsFixed(lv_intPlayer, "VespeneCollectionRate") > lv_realBestVespeneRate)) {
                lv_realBestVespeneRate = PlayerScoreValueGetAsFixed(lv_intPlayer, "VespeneCollectionRate");
            }

            lv_intHarvesters = (TechTreeUnitCount(lv_intPlayer, "SCV", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Drone", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "DroneBurrowed", c_techCountQueuedOrBetter) + TechTreeUnitCount(lv_intPlayer, "Probe", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "ACR", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Scavenger", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Converter", c_techCountCompleteOnly));
            if ((lv_intHarvesters > lv_intBestHarvesters)) {
                lv_intBestHarvesters = lv_intHarvesters;
            }

            if ((PlayerScoreValueGetAsFixed(lv_intPlayer, "ResourceValueArmySampled") > lv_realBestArmyValue)) {
                lv_realBestArmyValue = PlayerScoreValueGetAsFixed(lv_intPlayer, "ResourceValueArmySampled");
            }

        }

    }
    autoEAAFAE14_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex4 = 1;
    for ( ; ( (autoEAAFAE14_ai >= 0 && lv_intIndex4 <= autoEAAFAE14_ae) || (autoEAAFAE14_ai < 0 && lv_intIndex4 >= autoEAAFAE14_ae) ) ; lv_intIndex4 += autoEAAFAE14_ai ) {
        lv_intIndex = ((libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers - lv_intIndex4) + 1);
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            if ((PlayerScoreValueGetAsFixed(lv_intPlayer, "MineralsCollectionRate") == lv_realBestMineralRate)) {
                lv_intMineralBestCount += 1;
            }

            if ((PlayerScoreValueGetAsFixed(lv_intPlayer, "VespeneCollectionRate") == lv_realBestVespeneRate)) {
                lv_intVespeneBestCount += 1;
            }

            lv_intHarvesters = (TechTreeUnitCount(lv_intPlayer, "SCV", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Drone", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "DroneBurrowed", c_techCountQueuedOrBetter) + TechTreeUnitCount(lv_intPlayer, "Probe", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "ACR", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Scavenger", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Converter", c_techCountCompleteOnly));
            if ((lv_intHarvesters == lv_intBestHarvesters)) {
                lv_intHarvestersBestCount += 1;
            }

            if ((PlayerScoreValueGetAsFixed(lv_intPlayer, "ResourceValueArmySampled") == lv_realBestArmyValue)) {
                lv_intArmyValueBestCount += 1;
            }

        }

    }
    auto8C152213_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex4 = 1;
    for ( ; ( (auto8C152213_ai >= 0 && lv_intIndex4 <= auto8C152213_ae) || (auto8C152213_ai < 0 && lv_intIndex4 >= auto8C152213_ae) ) ; lv_intIndex4 += auto8C152213_ai ) {
        lv_intIndex = ((libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers - lv_intIndex4) + 1);
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            if (((PlayerScoreValueGetAsFixed(lv_intPlayer, "MineralsCollectionRate") == lv_realBestMineralRate) && (lv_intMineralBestCount == 1))) {
                lv_coMineralRateColors[lv_intPlayer] = Color(28*100/255,167*100/255,234*100/255);
            }

            if (((PlayerScoreValueGetAsFixed(lv_intPlayer, "VespeneCollectionRate") == lv_realBestVespeneRate) && (lv_intVespeneBestCount == 1))) {
                lv_coVespeneRateColors[lv_intPlayer] = Color(22*100/255,128*100/255,0);
            }

            lv_intHarvesters = (TechTreeUnitCount(lv_intPlayer, "SCV", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Drone", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "DroneBurrowed", c_techCountQueuedOrBetter) + TechTreeUnitCount(lv_intPlayer, "Probe", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "ACR", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Scavenger", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Converter", c_techCountCompleteOnly));
            if (((lv_intHarvesters == lv_intBestHarvesters) && (lv_intHarvestersBestCount == 1))) {
                lv_coHarvesterColors[lv_intPlayer] = Color(20*100/255,134*100/255,107*100/255);
            }

            if (((PlayerScoreValueGetAsFixed(lv_intPlayer, "ResourceValueArmySampled") == lv_realBestArmyValue) && (lv_intArmyValueBestCount == 1))) {
                lv_coArmyValueColors[lv_intPlayer] = Color(254*100/255,138*100/255,14*100/255);
            }

        }

    }
    lv_intColumnIndex = 1;
    auto893F482A_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex4 = 1;
    for ( ; ( (auto893F482A_ai >= 0 && lv_intIndex4 <= auto893F482A_ae) || (auto893F482A_ai < 0 && lv_intIndex4 >= auto893F482A_ae) ) ; lv_intIndex4 += auto893F482A_ai ) {
        lv_intIndex = ((libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers - lv_intIndex4) + 1);
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            lv_intNumActivePlayers += 1;
            if ((PlayerGetPropertyInt(lv_intPlayer, c_playerPropMinerals) >= 1000)) {
                lv_coColor = Color(150*100/255,150*100/255,30*100/255);
            }
            else {
                lv_coColor = Color(149*100/255,150*100/255,151*100/255);
            }
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsMineralsLabels[lv_intColumnIndex], TextWithColor(IntToText(PlayerGetPropertyInt(lv_intPlayer, c_playerPropMinerals)), lv_coColor), PlayerGroupAll());
            if ((PlayerGetPropertyInt(lv_intPlayer, c_playerPropVespene) >= 1000)) {
                lv_coColor = Color(150*100/255,150*100/255,30*100/255);
            }
            else {
                lv_coColor = Color(149*100/255,150*100/255,151*100/255);
            }
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsVespeneLabels[lv_intColumnIndex], TextWithColor(IntToText(PlayerGetPropertyInt(lv_intPlayer, c_playerPropVespene)), lv_coColor), PlayerGroupAll());
            lv_intSuppliesMade = PlayerGetPropertyInt(lv_intPlayer, c_playerPropSuppliesMade);
            if ((lv_intSuppliesMade > 200)) {
                lv_intSuppliesMade = 200;
            }

            lv_intSuppliesUsed = PlayerGetPropertyInt(lv_intPlayer, c_playerPropSuppliesUsed);
            if (((lv_intSuppliesUsed >= lv_intSuppliesMade) && (lv_intSuppliesMade < 200))) {
                lv_coColor = Color(100.00, 0.00, 0.00);
            }
            else {
                if (((lv_intSuppliesUsed >= (lv_intSuppliesMade - 2)) && (lv_intSuppliesMade < 200))) {
                    lv_coColor = Color(150*100/255,150*100/255,30*100/255);
                }
                else {
                    lv_coColor = Color(100,100,100);
                }
            }
            lv_txtText = (IntToText(lv_intSuppliesUsed) + StringExternal("Param/Value/lib_PEEP_2694DC4C") + IntToText(lv_intSuppliesMade));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsSupplyLabels[lv_intColumnIndex], TextWithColor(lv_txtText, lv_coColor), PlayerGroupAll());
            lv_intHarvesters = (TechTreeUnitCount(lv_intPlayer, "SCV", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Drone", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "DroneBurrowed", c_techCountQueuedOrBetter) + TechTreeUnitCount(lv_intPlayer, "Probe", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "ACR", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Scavenger", c_techCountCompleteOnly) + TechTreeUnitCount(lv_intPlayer, "Converter", c_techCountCompleteOnly));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsHarvesterLabels[lv_intColumnIndex], TextWithColor(IntToText(lv_intHarvesters), lv_coHarvesterColors[lv_intPlayer]), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsMineralsRateLabels[lv_intColumnIndex], TextWithColor(FixedToText(PlayerScoreValueGetAsFixed(lv_intPlayer, "MineralsCollectionRate"), 0), lv_coMineralRateColors[lv_intPlayer]), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsVespeneRateLabels[lv_intColumnIndex], TextWithColor(FixedToText(PlayerScoreValueGetAsFixed(lv_intPlayer, "VespeneCollectionRate"), 0), lv_coVespeneRateColors[lv_intPlayer]), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsArmyValueLabels[lv_intColumnIndex], TextWithColor(FixedToText(PlayerScoreValueGetAsFixed(lv_intPlayer, "ResourceValueArmySampled"), 0), lv_coArmyValueColors[lv_intPlayer]), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsArmyValueLostLabels[lv_intColumnIndex], IntToText(PlayerScoreValueGetAsInt(lv_intPlayer, "ResourceLostArmy")), PlayerGroupAll());
            libPEEP_gv_recPlayers[lv_intPlayer].lv_realAPMHistory[libPEEP_gv_recGlobals.lv_intAPMIndex] = PlayerScoreValueGetAsFixed(lv_intPlayer, "APM");
            if ((libPEEP_gv_recGameState.lv_intMatchSecondsElapsed < 90)) {
                lv_intNumIndexes = (libPEEP_gv_recGameState.lv_intMatchSecondsElapsed / 3);
            }
            else {
                lv_intNumIndexes = 30;
            }
            if ((lv_intNumIndexes == 0)) {
                lv_intNumIndexes = 1;
            }

            lv_realTmpSum = 0.0;
            lv_intIndex3 = 0;
            while ((lv_intIndex3 < lv_intNumIndexes)) {
                lv_intIndex2 = (libPEEP_gv_recGlobals.lv_intAPMIndex - lv_intIndex3);
                if ((lv_intIndex2 < 0)) {
                    lv_intIndex2 = (30 + lv_intIndex2);
                }

                lv_realTmpSum += libPEEP_gv_recPlayers[lv_intPlayer].lv_realAPMHistory[lv_intIndex2];
                lv_intIndex3 += 1;
            }
            lv_realAverageAPM = (lv_realTmpSum / IntToFixed(lv_intNumIndexes));
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intAverageAPM = FixedToInt(lv_realAverageAPM);
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsAPMLabels[lv_intColumnIndex], (FixedToText(PlayerScoreValueGetAsFixed(lv_intPlayer, "APM"), 0) + StringExternal("Param/Value/lib_PEEP_4796CBD7") + FixedToText(lv_realAverageAPM, 0)), PlayerGroupAll());
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace == 2)) {
                lv_imgRaceImage = "Assets\\Textures\\icon-1v1-terran.dds";
                lv_imgSupplyImage = "Assets\\Textures\\icon-supply-terran_nobg.dds";
            }
            else if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace == 3)) {
                lv_imgRaceImage = "Assets\\Textures\\icon-1v1-zerg.dds";
                lv_imgSupplyImage = "Assets\\Textures\\icon-supply-zerg_nobg.dds";
            }
            else if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace == 4)) {
                lv_imgRaceImage = "Assets\\Textures\\icon-1v1-protoss.dds";
                lv_imgSupplyImage = "Assets\\Textures\\icon-supply-protoss_nobg.dds";
            }
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsRaceIconBackgrounds[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsRaceIconBackgrounds2[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsRaceIcons[lv_intColumnIndex], lv_imgRaceImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diStatsRaceIcons[lv_intColumnIndex], libPEEP_gf_makePlayerProfileText(lv_intPlayer), PlayerGroupAll());
            lv_intColumnIndex += 1;
        }

    }
    lv_intColumnIndex = 1;
    auto36C5957E_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto36C5957E_ai >= 0 && lv_intIndex <= auto36C5957E_ae) || (auto36C5957E_ai < 0 && lv_intIndex >= auto36C5957E_ae) ) ; lv_intIndex += auto36C5957E_ai ) {
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsBlizzardMineralsLabels[lv_intColumnIndex], IntToText(PlayerGetPropertyInt(lv_intPlayer, c_playerPropMinerals)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsBlizzardVespeneLabels[lv_intColumnIndex], IntToText(PlayerGetPropertyInt(lv_intPlayer, c_playerPropVespene)), PlayerGroupAll());
            lv_intSuppliesMade = PlayerGetPropertyInt(lv_intPlayer, c_playerPropSuppliesMade);
            if ((lv_intSuppliesMade > 200)) {
                lv_intSuppliesMade = 200;
            }

            lv_intSuppliesUsed = PlayerGetPropertyInt(lv_intPlayer, c_playerPropSuppliesUsed);
            if (((lv_intSuppliesUsed >= lv_intSuppliesMade) && (lv_intSuppliesMade < 200))) {
                lv_coColor = Color(100.00, 0.00, 0.00);
            }
            else {
                if (((lv_intSuppliesUsed >= (lv_intSuppliesMade - 2)) && (lv_intSuppliesMade < 200))) {
                    lv_coColor = Color(150*100/255,150*100/255,30*100/255);
                }
                else {
                    lv_coColor = Color(100,100,100);
                }
            }
            lv_txtText = (IntToText(lv_intSuppliesUsed) + StringExternal("Param/Value/lib_PEEP_3ADC47B9") + IntToText(lv_intSuppliesMade));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStatsBlizzardSupplyLabels[lv_intColumnIndex], TextWithColor(lv_txtText, lv_coColor), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardRaceIconBackgrounds[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardRaceIconBackgrounds2[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardMineralsIconBackgrounds[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardMineralsIconBackgrounds2[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardVespeneIconBackgrounds[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardVespeneIconBackgrounds2[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIconBackgrounds[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftTOWImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIconBackgrounds2[lv_intColumnIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgRightTOWImage, PlayerGroupAll());
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace == 2)) {
                lv_imgRaceImage = "Assets\\Textures\\icon-1v1-terran.dds";
                lv_imgSupplyImage = "Assets\\Textures\\icon-supply-terran_nobg.dds";
            }
            else if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace == 3)) {
                lv_imgRaceImage = "Assets\\Textures\\icon-1v1-zerg.dds";
                lv_imgSupplyImage = "Assets\\Textures\\icon-supply-zerg_nobg.dds";
            }
            else if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace == 4)) {
                lv_imgRaceImage = "Assets\\Textures\\icon-1v1-protoss.dds";
                lv_imgSupplyImage = "Assets\\Textures\\icon-supply-protoss_nobg.dds";
            }
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardRaceIcons[lv_intColumnIndex], lv_imgRaceImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diStatsBlizzardSupplyIcons[lv_intColumnIndex], lv_imgSupplyImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diStatsBlizzardRaceIcons[lv_intColumnIndex], libPEEP_gf_makePlayerProfileText(lv_intPlayer), PlayerGroupAll());
            lv_intColumnIndex += 1;
        }

    }
    DialogSetSize(libPEEP_gv_recUI.lv_dStatsDialog, (65 + (90 * lv_intNumActivePlayers)), DialogGetHeight(libPEEP_gv_recUI.lv_dStatsDialog));
    if ((lv_intNumActivePlayers == 0)) {
        lv_intNumActivePlayers = 1;
    }

    DialogSetSize(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, DialogGetWidth(libPEEP_gv_recUI.lv_dStatsBlizzardDialog), (5 + (35 * lv_intNumActivePlayers)));
}

void libPEEP_gf_RefreshResourceTradingDialogforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intNumMinerals;
    int lv_intNumVespene;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intNumMinerals = libPEEP_gv_recPlayers[lp_intPlayer].lv_intNumMineralsToTrade;
    lv_intNumVespene = libPEEP_gv_recPlayers[lp_intPlayer].lv_intNumVespeneToTrade;
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diResourceTradingMineralLabel, IntToText(lv_intNumMinerals), PlayerGroupSingle(lp_intPlayer));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diResourceTradingVespeneLabel, IntToText(lv_intNumVespene), PlayerGroupSingle(lp_intPlayer));
    if ((((lv_intNumMinerals > 0) || (lv_intNumVespene > 0)) && (libPEEP_gv_recPlayers[libPEEP_gv_recPlayers[lp_intPlayer].lv_intTeammateList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, lp_intPlayer)]].lv_boolPlayingMatch == true) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerResourceTrading) <= 0.0))) {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diResourceSend, PlayerGroupSingle(lp_intPlayer), true);
    }
    else {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diResourceSend, PlayerGroupSingle(lp_intPlayer), false);
    }
}

void libPEEP_gf_CreateResourceTradingDialog () {
    // Variable Declarations
    int lv_intY;
    int lv_intX;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoB3A8CFC0_ae;
    const int autoB3A8CFC0_ai = 1;

    // Variable Initialization
    lv_intY = 100;

    // Implementation
    DialogCreate(100, 100, c_anchorTopRight, 459, 0, true);
    libPEEP_gv_recUI.lv_dResourceTradingLauncher = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogSetImageVisible(libPEEP_gv_recUI.lv_dResourceTradingLauncher, false);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dResourceTradingLauncher, 32, 32, c_anchorTopRight, 5, 5, StringExternal("Param/Value/lib_PEEP_A86B3B54"), StringToText(""), "");
    libPEEP_gv_recUI.lv_diResourceTradingButton = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dResourceTradingLauncher, 32, 32, c_anchorTopRight, 5, 5, StringToText(""), "Assets\\Textures\\resource_trading_terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 35.0);
    autoB3A8CFC0_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoB3A8CFC0_ai >= 0 && lv_intPlayer <= autoB3A8CFC0_ae) || (autoB3A8CFC0_ai < 0 && lv_intPlayer >= autoB3A8CFC0_ae) ) ; lv_intPlayer += autoB3A8CFC0_ai ) {
        if (((PlayerRace(lv_intPlayer) == "Terr") || (PlayerRace(lv_intPlayer) == "Gen") || (PlayerRace(lv_intPlayer) == "UED"))) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\resource_trading_terran.dds", PlayerGroupAll());
        }
        else if (((PlayerRace(lv_intPlayer) == "Zerg") || (PlayerRace(lv_intPlayer) == "Xayi") || (PlayerRace(lv_intPlayer) == "Dragon"))) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\resource_trading_zerg.dds", PlayerGroupAll());
        }
        else if (((PlayerRace(lv_intPlayer) == "Prot") || (PlayerRace(lv_intPlayer) == "Keir") || (PlayerRace(lv_intPlayer) == "NHbr"))) {
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\resource_trading_protoss.dds", PlayerGroupAll());
        }
    }
    DialogCreate(850, 200, c_anchorTopRight, 0, 50, true);
    libPEEP_gv_recUI.lv_dResourceTradingDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dResourceTradingDialog, 500, 50, c_anchorTop, 0, 30, StringExternal("Param/Value/lib_PEEP_FD9F14FF"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dResourceTradingDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diResourceTradingDialogX = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dResourceTradingDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    DialogControlCreate(libPEEP_gv_recUI.lv_dResourceTradingDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diResourcePlayerPulldown = DialogControlLastCreated();
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, PlayerGroupAll(), c_anchorTopLeft, 50, 83);
    lv_intX = 325;
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dResourceTradingDialog, 40, 40, c_anchorTopLeft, lv_intX, (lv_intY - 10), StringExternal("Param/Value/lib_PEEP_62B74159"), "Assets\\Textures\\icon-mineral.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_intX += 50;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dResourceTradingDialog, 40, 40, c_anchorTopLeft, lv_intX, (lv_intY - 22), StringToText(""), StringExternal("Param/Value/lib_PEEP_EDEFBC42"), "");
    libPEEP_gv_recUI.lv_diResourceMineralMore = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dResourceTradingDialog, 40, 40, c_anchorTopLeft, lv_intX, (lv_intY + 14), StringToText(""), StringExternal("Param/Value/lib_PEEP_FFB9ABE7"), "");
    libPEEP_gv_recUI.lv_diResourceMineralLess = DialogControlLastCreated();
    lv_intX += 50;
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dResourceTradingDialog, 70, 50, c_anchorTopLeft, lv_intX, lv_intY, StringExternal("Param/Value/lib_PEEP_1C52011C"), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diResourceTradingMineralLabel = DialogControlLastCreated();
    lv_intX = 500;
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dResourceTradingDialog, 40, 40, c_anchorTopLeft, lv_intX, (lv_intY - 10), StringExternal("Param/Value/lib_PEEP_962824FE"), "Assets\\Textures\\icon-gas-terran.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_intX += 50;
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dResourceTradingDialog, 40, 40, c_anchorTopLeft, lv_intX, (lv_intY - 22), StringToText(""), StringExternal("Param/Value/lib_PEEP_B3455782"), "");
    libPEEP_gv_recUI.lv_diResourceVespeneMore = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dResourceTradingDialog, 40, 40, c_anchorTopLeft, lv_intX, (lv_intY + 14), StringToText(""), StringExternal("Param/Value/lib_PEEP_26653CD4"), "");
    libPEEP_gv_recUI.lv_diResourceVespeneLess = DialogControlLastCreated();
    lv_intX += 50;
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dResourceTradingDialog, 70, 50, c_anchorTopLeft, lv_intX, lv_intY, StringExternal("Param/Value/lib_PEEP_C0D03909"), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diResourceTradingVespeneLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dResourceTradingDialog, 100, 50, c_anchorRight, 50, 0, StringExternal("Param/Value/lib_PEEP_3ED5B3FC"), StringExternal("Param/Value/lib_PEEP_8A4CC0C8"), "");
    libPEEP_gv_recUI.lv_diResourceSend = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXResourceTrading, c_playerAny, libPEEP_gv_recUI.lv_diResourceTradingDialogX, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonLaunchResourceTrading, c_playerAny, libPEEP_gv_recUI.lv_diResourceTradingButton, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonSendResources, c_playerAny, libPEEP_gv_recUI.lv_diResourceSend, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonMoreMinerals, c_playerAny, libPEEP_gv_recUI.lv_diResourceMineralMore, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonLessMinerals, c_playerAny, libPEEP_gv_recUI.lv_diResourceMineralLess, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonMoreVespene, c_playerAny, libPEEP_gv_recUI.lv_diResourceVespeneMore, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libPEEP_gt_ButtonLessVespene, c_playerAny, libPEEP_gv_recUI.lv_diResourceVespeneLess, c_triggerControlEventTypeClick);
}

void libPEEP_gf_CreatePurchaseConfirmationDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(400, 300, c_anchorTopRight, 445, 72, true);
    libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 350, 250);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 15, 50);
    libPEEP_gv_recUI.lv_diPurchaseConfirmationLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, 150, 50, c_anchorBottom, -80, 40, StringToText(""), StringExternal("Param/Value/lib_PEEP_474D7F41"), "");
    libPEEP_gv_recUI.lv_diPurchaseYes = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonConfirmPurchase, c_playerAny, libPEEP_gv_recUI.lv_diPurchaseYes, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, 150, 50, c_anchorBottom, 80, 40, StringToText(""), StringExternal("Param/Value/lib_PEEP_52E0C6C1"), "");
    libPEEP_gv_recUI.lv_diPurchaseNo = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonDeclinePurchase, c_playerAny, libPEEP_gv_recUI.lv_diPurchaseNo, c_triggerControlEventTypeClick);
}

void libPEEP_gf_InitializeStore () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intIndex = 0;
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_1FD316C1");
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_0A9EEA92");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_C9D7A4D4");
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D86F44A1");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_BA5562A8");
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_16AA0BB4");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_16BB775B");
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4769E711");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_8C85E0E9");
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2BE4BEE6");
    lv_intIndex += 1;
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_D919D182");
    libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_D2197155");
    libPEEP_gv_recGlobals.lv_intNumStoreAisles = lv_intIndex;
    libPEEP_gv_recGlobals.lv_recStoreAisles[1].lv_intFirstItemID = 1;
    libPEEP_gv_recGlobals.lv_recStoreAisles[1].lv_intNumItems = 10;
    libPEEP_gv_recStoreItems[1].lv_txtName = StringExternal("Param/Value/lib_PEEP_94A3E788");
    libPEEP_gv_recStoreItems[1].lv_fIcon = "Assets\\Textures\\btn-unit-terran-vikingassault.dds";
    libPEEP_gv_recStoreItems[1].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_FC06C9A0");
    libPEEP_gv_recStoreItems[1].lv_intPrice = 10000;
    libPEEP_gv_recStoreItems[2].lv_txtName = StringExternal("Param/Value/lib_PEEP_FECE233A");
    libPEEP_gv_recStoreItems[2].lv_fIcon = "Assets\\Textures\\btn-unit-terran-medivac.dds";
    libPEEP_gv_recStoreItems[2].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_DE1D59CD");
    libPEEP_gv_recStoreItems[2].lv_intPrice = 20000;
    libPEEP_gv_recStoreItems[3].lv_txtName = StringExternal("Param/Value/lib_PEEP_1C205B3A");
    libPEEP_gv_recStoreItems[3].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-hightemplar.dds";
    libPEEP_gv_recStoreItems[3].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_60B52944");
    libPEEP_gv_recStoreItems[3].lv_intPrice = 30000;
    libPEEP_gv_recStoreItems[4].lv_txtName = StringExternal("Param/Value/lib_PEEP_BD7C7397");
    libPEEP_gv_recStoreItems[4].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-interceptor.dds";
    libPEEP_gv_recStoreItems[4].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_1C03C8E6");
    libPEEP_gv_recStoreItems[4].lv_intPrice = 40000;
    libPEEP_gv_recStoreItems[5].lv_txtName = StringExternal("Param/Value/lib_PEEP_D8FDA620");
    libPEEP_gv_recStoreItems[5].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-infestedmarine.dds";
    libPEEP_gv_recStoreItems[5].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4C42FA40");
    libPEEP_gv_recStoreItems[5].lv_intPrice = 50000;
    libPEEP_gv_recStoreItems[6].lv_txtName = StringExternal("Param/Value/lib_PEEP_53D55C8B");
    libPEEP_gv_recStoreItems[6].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-queen.dds";
    libPEEP_gv_recStoreItems[6].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_12A26E69");
    libPEEP_gv_recStoreItems[6].lv_intPrice = 75000;
    libPEEP_gv_recStoreItems[7].lv_txtName = StringExternal("Param/Value/lib_PEEP_970291C4");
    libPEEP_gv_recStoreItems[7].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-phoenix.dds";
    libPEEP_gv_recStoreItems[7].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_83543309");
    libPEEP_gv_recStoreItems[7].lv_intPrice = 75000;
    libPEEP_gv_recStoreItems[8].lv_txtName = StringExternal("Param/Value/lib_PEEP_7A4D38D4");
    libPEEP_gv_recStoreItems[8].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-viper.dds";
    libPEEP_gv_recStoreItems[8].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_523ACCB1");
    libPEEP_gv_recStoreItems[8].lv_intPrice = 85000;
    libPEEP_gv_recStoreItems[9].lv_txtName = StringExternal("Param/Value/lib_PEEP_CF9CE4E2");
    libPEEP_gv_recStoreItems[9].lv_fIcon = "Assets\\Textures\\btn-unit-terran-widowmine.dds";
    libPEEP_gv_recStoreItems[9].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E91CF664");
    libPEEP_gv_recStoreItems[9].lv_intPrice = 85000;
    libPEEP_gv_recStoreItems[10].lv_txtName = StringExternal("Param/Value/lib_PEEP_F2D8D7C6");
    libPEEP_gv_recStoreItems[10].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-oracle.dds";
    libPEEP_gv_recStoreItems[10].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_8F608A84");
    libPEEP_gv_recStoreItems[10].lv_intPrice = 85000;
    libPEEP_gv_recGlobals.lv_recStoreAisles[2].lv_intFirstItemID = 80;
    libPEEP_gv_recGlobals.lv_recStoreAisles[2].lv_intNumItems = 3;
    lv_intIndex = 79;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_80441AAB");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\btn-unit-terran-mule.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 100000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_804A25E3");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\btn-unit-zerg-mutalisk.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 110000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_C02D0062");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\btn-unit-protoss-mothershipcore.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 120000;
    libPEEP_gv_recGlobals.lv_recStoreAisles[3].lv_intFirstItemID = 20;
    libPEEP_gv_recGlobals.lv_recStoreAisles[3].lv_intNumItems = 16;
    libPEEP_gv_recStoreItems[20].lv_txtName = StringExternal("Param/Value/lib_PEEP_82019DD1");
    libPEEP_gv_recStoreItems[20].lv_fIcon = "Assets\\Textures\\wireframe-critter-sheep.dds";
    libPEEP_gv_recStoreItems[20].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_EA5CF1DE");
    libPEEP_gv_recStoreItems[20].lv_intPrice = 10000;
    libPEEP_gv_recStoreItems[21].lv_txtName = StringExternal("Param/Value/lib_PEEP_6F1CFAE9");
    libPEEP_gv_recStoreItems[21].lv_fIcon = "Assets\\Textures\\wireframe-critter-cow.dds";
    libPEEP_gv_recStoreItems[21].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C7C3ABF4");
    libPEEP_gv_recStoreItems[21].lv_intPrice = 15000;
    libPEEP_gv_recStoreItems[22].lv_txtName = StringExternal("Param/Value/lib_PEEP_DB4487C7");
    libPEEP_gv_recStoreItems[22].lv_fIcon = "Assets\\Textures\\wireframe-critter-dog.dds";
    libPEEP_gv_recStoreItems[22].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_EEA3BCFC");
    libPEEP_gv_recStoreItems[22].lv_intPrice = 20000;
    libPEEP_gv_recStoreItems[23].lv_txtName = StringExternal("Param/Value/lib_PEEP_B39F07FB");
    libPEEP_gv_recStoreItems[23].lv_fIcon = "Assets\\Textures\\wireframe-critter-karakfemale.dds";
    libPEEP_gv_recStoreItems[23].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_F892E742");
    libPEEP_gv_recStoreItems[23].lv_intPrice = 25000;
    libPEEP_gv_recStoreItems[24].lv_txtName = StringExternal("Param/Value/lib_PEEP_A29852A8");
    libPEEP_gv_recStoreItems[24].lv_fIcon = "Assets\\Textures\\wireframe-critter-karakmale.dds";
    libPEEP_gv_recStoreItems[24].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_69FB44D5");
    libPEEP_gv_recStoreItems[24].lv_intPrice = 25000;
    libPEEP_gv_recStoreItems[25].lv_txtName = StringExternal("Param/Value/lib_PEEP_93732FB2");
    libPEEP_gv_recStoreItems[25].lv_fIcon = "Assets\\Textures\\wireframe-critter-ursadakfemale.dds";
    libPEEP_gv_recStoreItems[25].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E4562EF0");
    libPEEP_gv_recStoreItems[25].lv_intPrice = 30000;
    libPEEP_gv_recStoreItems[26].lv_txtName = StringExternal("Param/Value/lib_PEEP_7BDB09D1");
    libPEEP_gv_recStoreItems[26].lv_fIcon = "Assets\\Textures\\wireframe-critter-ursadakmale.dds";
    libPEEP_gv_recStoreItems[26].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_5897F486");
    libPEEP_gv_recStoreItems[26].lv_intPrice = 30000;
    libPEEP_gv_recStoreItems[27].lv_txtName = StringExternal("Param/Value/lib_PEEP_E0718C05");
    libPEEP_gv_recStoreItems[27].lv_fIcon = "Assets\\Textures\\wireframe-critter-lavacritter.dds";
    libPEEP_gv_recStoreItems[27].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_9ED9AD56");
    libPEEP_gv_recStoreItems[27].lv_intPrice = 40000;
    libPEEP_gv_recStoreItems[28].lv_txtName = StringExternal("Param/Value/lib_PEEP_631C80DB");
    libPEEP_gv_recStoreItems[28].lv_fIcon = "Assets\\Textures\\wireframe-critter-scantipede.dds";
    libPEEP_gv_recStoreItems[28].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_17C91B83");
    libPEEP_gv_recStoreItems[28].lv_intPrice = 45000;
    libPEEP_gv_recStoreItems[29].lv_txtName = StringExternal("Param/Value/lib_PEEP_4575584F");
    libPEEP_gv_recStoreItems[29].lv_fIcon = "Assets\\Textures\\wireframe-critter-carrionbird.dds";
    libPEEP_gv_recStoreItems[29].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_4FB45864");
    libPEEP_gv_recStoreItems[29].lv_intPrice = 50000;
    libPEEP_gv_recStoreItems[30].lv_txtName = StringExternal("Param/Value/lib_PEEP_6D808BB8");
    libPEEP_gv_recStoreItems[30].lv_fIcon = "Assets\\Textures\\wireframe-critter-utilitybot.dds";
    libPEEP_gv_recStoreItems[30].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_2B7BC8A3");
    libPEEP_gv_recStoreItems[30].lv_intPrice = 60000;
    libPEEP_gv_recStoreItems[31].lv_txtName = StringExternal("Param/Value/lib_PEEP_07D9325A");
    libPEEP_gv_recStoreItems[31].lv_fIcon = "Assets\\Textures\\wireframe-critter-lyotemale.dds";
    libPEEP_gv_recStoreItems[31].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C0094AEC");
    libPEEP_gv_recStoreItems[31].lv_intPrice = 75000;
    libPEEP_gv_recStoreItems[32].lv_txtName = StringExternal("Param/Value/lib_PEEP_E5EA7D44");
    libPEEP_gv_recStoreItems[32].lv_fIcon = "Assets\\Textures\\wireframe-critter-thornlizard.dds";
    libPEEP_gv_recStoreItems[32].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_BDE4355F");
    libPEEP_gv_recStoreItems[32].lv_intPrice = 80000;
    libPEEP_gv_recStoreItems[33].lv_txtName = StringExternal("Param/Value/lib_PEEP_8FBC10B0");
    libPEEP_gv_recStoreItems[33].lv_fIcon = "Assets\\Textures\\wireframe-critter-artosilope.dds";
    libPEEP_gv_recStoreItems[33].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_EE60A34C");
    libPEEP_gv_recStoreItems[33].lv_intPrice = 85000;
    libPEEP_gv_recStoreItems[34].lv_txtName = StringExternal("Param/Value/lib_PEEP_86E3F02B");
    libPEEP_gv_recStoreItems[34].lv_fIcon = "Assets\\Textures\\wireframe-critter-labbot.dds";
    libPEEP_gv_recStoreItems[34].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_E8921B1C");
    libPEEP_gv_recStoreItems[34].lv_intPrice = 90000;
    libPEEP_gv_recStoreItems[35].lv_txtName = StringExternal("Param/Value/lib_PEEP_AA5C9998");
    libPEEP_gv_recStoreItems[35].lv_fIcon = "Assets\\Textures\\wireframe-critter-crabeetle.dds";
    libPEEP_gv_recStoreItems[35].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_CC38A2F8");
    libPEEP_gv_recStoreItems[35].lv_intPrice = 95000;
    libPEEP_gv_recGlobals.lv_recStoreAisles[4].lv_intFirstItemID = 40;
    libPEEP_gv_recGlobals.lv_recStoreAisles[4].lv_intNumItems = 16;
    lv_intIndex = 39;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_26213BD4");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0000_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 15000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_94A96610");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0022_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 15000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_4B03AE2A");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0009_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 15000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_E5A61160");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0013_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 20000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_5A9FBB0A");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0013_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 20000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_13E8F8C0");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0013_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 20000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_6313AA18");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0013_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 20000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_8F70C04F");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0015_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 30000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_536B32C2");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0015_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 30000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_AAD28C29");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0015_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 30000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_588D66DF");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0015_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 30000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_F8BC4D03");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0015_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 30000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_C6AADCF0");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0004_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 40000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_70B4EB26");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0004_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 40000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_A2A87E12");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0004_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 40000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_0BA087BA");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0004_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 40000;
    libPEEP_gv_recGlobals.lv_recStoreAisles[5].lv_intFirstItemID = 120;
    libPEEP_gv_recGlobals.lv_recStoreAisles[5].lv_intNumItems = 16;
    lv_intIndex = 119;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_E8CC5958");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0008_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 40000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_08FC0854");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0047_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 40000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_09013D35");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0011_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 40000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_32DEB7BA");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0014_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 45000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_F7B02A3E");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0018_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 45000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_A706BEC4");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0004_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 45000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_FE70AECC");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0052_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 50000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_4847D945");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0013_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 50000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_9BA4C1A9");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0027_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 55000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_85C15582");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0034_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 55000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_A62B79E8");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0048_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 55000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_748793C5");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0044_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 55000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_87D6D198");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0025_02.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 60000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_7326AAB7");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0031_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 60000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_ED89F04B");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0059_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 65000;
    lv_intIndex += 1;
    libPEEP_gv_recStoreItems[lv_intIndex].lv_txtName = StringExternal("Param/Value/lib_PEEP_A3756FB7");
    libPEEP_gv_recStoreItems[lv_intIndex].lv_fIcon = "Assets\\Textures\\decal_terran_0037_01.dds";
    libPEEP_gv_recStoreItems[lv_intIndex].lv_intPrice = 70000;
    libPEEP_gv_recGlobals.lv_recStoreAisles[6].lv_intFirstItemID = 100;
    libPEEP_gv_recGlobals.lv_recStoreAisles[6].lv_intNumItems = 3;
    libPEEP_gv_recStoreItems[100].lv_txtName = StringExternal("Param/Value/lib_PEEP_2E76B8DA");
    libPEEP_gv_recStoreItems[100].lv_fIcon = "Assets\\Textures\\wireframe-critter-dog.dds";
    libPEEP_gv_recStoreItems[100].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_C89D38CF");
    libPEEP_gv_recStoreItems[100].lv_intPrice = 50000;
    libPEEP_gv_recStoreItems[101].lv_txtName = StringExternal("Param/Value/lib_PEEP_C4C4B658");
    libPEEP_gv_recStoreItems[101].lv_fIcon = "Assets\\Textures\\decal_terran_0009_01.dds";
    libPEEP_gv_recStoreItems[101].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_093E92F4");
    libPEEP_gv_recStoreItems[101].lv_intPrice = 50000;
    libPEEP_gv_recStoreItems[102].lv_txtName = StringExternal("Param/Value/lib_PEEP_B11781BC");
    libPEEP_gv_recStoreItems[102].lv_fIcon = "Assets\\Textures\\decal_terran_0036_01.dds";
    libPEEP_gv_recStoreItems[102].lv_txtDescription = StringExternal("Param/Value/lib_PEEP_28D941C5");
    libPEEP_gv_recStoreItems[102].lv_intPrice = 80000;
}

void libPEEP_gf_CreateStoreDialog () {
    // Variable Declarations
    int lv_intItemID;
    int lv_intIndex;
    int lv_intAisle;
    int lv_intCount;
    int lv_intRow;
    int lv_intCol;
    int lv_intX;
    int lv_intY;
    int lv_intNumRows;
    int lv_intNumCols;
    int lv_intButtonSize;
    int lv_intIconSize;
    int lv_intButtonPlusGap;

    // Automatic Variable Declarations
    int autoACD27751_ae;
    const int autoACD27751_ai = 1;
    int auto5EAE075C_ae;
    const int auto5EAE075C_ai = 1;
    int autoA14A8215_ae;
    const int autoA14A8215_ai = 1;
    int auto47F04859_ae;
    const int auto47F04859_ai = 1;

    // Variable Initialization
    lv_intX = libPEEP_gv_recGlobals.lv_intDialogBorder;
    lv_intY = 10;
    lv_intNumCols = 4;
    lv_intButtonSize = 100;
    lv_intIconSize = 90;
    lv_intButtonPlusGap = (lv_intButtonSize + libPEEP_gv_recGlobals.lv_intTeamButtonGap);

    // Implementation
    DialogCreate(490, 800, c_anchorTopRight, 0, 0, true);
    libPEEP_gv_recUI.lv_dStoreDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dStoreDialog, 400, 50, c_anchorTopLeft, 30, 30, StringExternal("Param/Value/lib_PEEP_B9950465"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dStoreDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diStoreDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXStoreDialog, c_playerAny, libPEEP_gv_recUI.lv_diStoreDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStoreDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopRight, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dStoreDialog, 100, 50, c_anchorTopLeft, 92, 95, StringExternal("Param/Value/lib_PEEP_1EBC2FFB"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    DialogControlCreate(libPEEP_gv_recUI.lv_dStoreDialog, c_triggerControlTypePulldown);
    libPEEP_gv_recUI.lv_diStoreAislePulldown = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_PulldownAisle, c_playerAny, libPEEP_gv_recUI.lv_diStoreAislePulldown, c_triggerControlEventTypeSelectionChanged);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diStoreAislePulldown, PlayerGroupAll(), c_anchorTopLeft, 190, 80);
    autoACD27751_ae = libPEEP_gv_recGlobals.lv_intNumStoreAisles;
    lv_intIndex = 1;
    for ( ; ( (autoACD27751_ai >= 0 && lv_intIndex <= autoACD27751_ae) || (autoACD27751_ai < 0 && lv_intIndex >= autoACD27751_ae) ) ; lv_intIndex += autoACD27751_ai ) {
        DialogControlAddItem(libPEEP_gv_recUI.lv_diStoreAislePulldown, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intIndex].lv_txtName);
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 380, 250);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 15, 145);
    libPEEP_gv_recUI.lv_diStoreDescriptionLabel = DialogControlLastCreated();
    auto5EAE075C_ae = libPEEP_gv_recGlobals.lv_intNumStoreAisles;
    lv_intAisle = 1;
    for ( ; ( (auto5EAE075C_ai >= 0 && lv_intAisle <= auto5EAE075C_ae) || (auto5EAE075C_ai < 0 && lv_intAisle >= auto5EAE075C_ae) ) ; lv_intAisle += auto5EAE075C_ai ) {
        DialogCreate(500, 420, c_anchorCenter, 0, 0, true);
        libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle] = DialogLastCreated();
        libPEEP_gv_recUI.lv_intDialogListCount += 1;
        libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
        DialogSetImageVisible(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], false);
        DialogSetPositionRelative(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], c_anchorTop, libPEEP_gv_recUI.lv_dStoreDialog, c_anchorTop, 10, 200);
        lv_intNumRows = CeilingI((IntToFixed(libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intAisle].lv_intNumItems) / IntToFixed(lv_intNumCols)));
        lv_intCount = 0;
        lv_intY = 10;
        autoA14A8215_ae = lv_intNumRows;
        lv_intRow = 1;
        for ( ; ( (autoA14A8215_ai >= 0 && lv_intRow <= autoA14A8215_ae) || (autoA14A8215_ai < 0 && lv_intRow >= autoA14A8215_ae) ) ; lv_intRow += autoA14A8215_ai ) {
            lv_intX = libPEEP_gv_recGlobals.lv_intDialogBorder;
            auto47F04859_ae = lv_intNumCols;
            lv_intCol = 1;
            for ( ; ( (auto47F04859_ai >= 0 && lv_intCol <= auto47F04859_ae) || (auto47F04859_ai < 0 && lv_intCol >= auto47F04859_ae) ) ; lv_intCol += auto47F04859_ai ) {
                lv_intItemID = (lv_intCount + libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intAisle].lv_intFirstItemID);
                if (((lv_intCount + 1) <= libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intAisle].lv_intNumItems)) {
                    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], lv_intButtonSize, lv_intButtonSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), StringToText(""), "");
                    libPEEP_gv_recUI.lv_diStoreButtons[lv_intItemID] = DialogControlLastCreated();
                    TriggerAddEventDialogControl(libPEEP_gt_ButtonPurchaseItem, c_playerAny, libPEEP_gv_recUI.lv_diStoreButtons[lv_intItemID], c_triggerControlEventTypeClick);
                    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], lv_intIconSize, lv_intIconSize, c_anchorTopLeft, (lv_intX + 5), (lv_intY + 5), StringToText(""), libPEEP_gv_recStoreItems[lv_intItemID].lv_fIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libPEEP_gv_recUI.lv_diStoreIcons[lv_intItemID] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], 100, 100, c_anchorTopLeft, (lv_intX + 5), (lv_intY + 5), StringToText(""), Color(100,100,100), false, 2.0);
                    libPEEP_gv_recUI.lv_diStoreLabels[lv_intItemID] = DialogControlLastCreated();
                    lv_intX += lv_intButtonPlusGap;
                    lv_intCount += 1;
                }

            }
            lv_intY += lv_intButtonPlusGap;
        }
    }
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 300, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, 65, 90);
    libPEEP_gv_recUI.lv_diStoreBalanceLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dStoreDialog, 300, 50, c_anchorBottomLeft, 50, 50, StringExternal("Param/Value/lib_PEEP_72976B04"), StringExternal("Param/Value/lib_PEEP_9A58A16A"), "");
    libPEEP_gv_recUI.lv_diCashChipsButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonCashMyChips, c_playerAny, libPEEP_gv_recUI.lv_diCashChipsButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dStoreDialog, 70, 70, c_anchorBottomRight, 45, 45, StringExternal("Param/Value/lib_PEEP_8F753E2C"), StringToText(""), "");
    libPEEP_gv_recUI.lv_diInventoryButton3 = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonsInventory, c_playerAny, libPEEP_gv_recUI.lv_diInventoryButton3, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dStoreDialog, 70, 70, c_anchorBottomRight, 45, 45, StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-combatshield.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
}

void libPEEP_gf_RefreshStoreDialogforPlayer (int lp_intPlayer) {
    // Variable Declarations
    text lv_txtMessage;
    text lv_txtMessage2;
    int lv_intTmp;
    int lv_intAisle;
    int lv_intItemID;
    bool lv_boolOwned;
    color lv_color;

    // Automatic Variable Declarations
    int auto9ABCE3A7_ae;
    const int auto9ABCE3A7_ai = 1;
    int auto4C6BB387_ae;
    const int auto4C6BB387_ai = 1;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    lv_intTmp = (libPEEP_gv_recPlayers[lp_intPlayer].lv_intChips - 1000);
    if (((lv_intTmp <= 0) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount > 0))) {
        lv_intTmp = 0;
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCashChipsButton, PlayerGroupSingle(lp_intPlayer), false);
    }
    else {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCashChipsButton, PlayerGroupSingle(lp_intPlayer), true);
    }
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_4DB48C9C") + libPEEP_gf_formatIntegerAsText(lv_intTmp) + StringExternal("Param/Value/lib_PEEP_38C06277"));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCashChipsButton, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_16EA3D47") + TextWithColor(StringExternal("Param/Value/lib_PEEP_BDEB2109"), (Color(22*100/255,128*100/255,0))) + TextWithColor(libPEEP_gf_formatIntegerAsText(libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount), (Color(22*100/255,128*100/255,0))));
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_263C9CB9") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_84B7413C"));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStoreBalanceLabel, lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
    auto9ABCE3A7_ae = libPEEP_gv_recGlobals.lv_intNumStoreAisles;
    lv_intAisle = 1;
    for ( ; ( (auto9ABCE3A7_ai >= 0 && lv_intAisle <= auto9ABCE3A7_ae) || (auto9ABCE3A7_ai < 0 && lv_intAisle >= auto9ABCE3A7_ae) ) ; lv_intAisle += auto9ABCE3A7_ai ) {
        lv_intTmp = 0;
        auto4C6BB387_ae = (libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intAisle].lv_intFirstItemID + (libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intAisle].lv_intNumItems - 1));
        lv_intItemID = libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intAisle].lv_intFirstItemID;
        for ( ; ( (auto4C6BB387_ai >= 0 && lv_intItemID <= auto4C6BB387_ae) || (auto4C6BB387_ai < 0 && lv_intItemID >= auto4C6BB387_ae) ) ; lv_intItemID += auto4C6BB387_ai ) {
            lv_boolOwned = libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[lv_intItemID];
            if ((lv_boolOwned == true)) {
                lv_color = Color(149*100/255,150*100/255,151*100/255);
                lv_txtMessage2 = (StringExternal("Param/Value/lib_PEEP_BF756A61"));
                DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diStoreIcons[lv_intItemID], PlayerGroupSingle(lp_intPlayer), 0.0, 25.0);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diStoreButtons[lv_intItemID], PlayerGroupSingle(lp_intPlayer), false);
            }
            else {
                if ((libPEEP_gv_recStoreItems[lv_intItemID].lv_intPrice > libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount)) {
                    lv_color = Color(100.00, 0.00, 0.00);
                }
                else {
                    lv_color = Color(22*100/255,128*100/255,0);
                }
                lv_txtMessage2 = (libPEEP_gv_recStoreItems[lv_intItemID].lv_txtDescription);
                DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diStoreIcons[lv_intItemID], PlayerGroupSingle(lp_intPlayer), 0.0, 0.0);
                DialogControlSetEnabled(libPEEP_gv_recUI.lv_diStoreButtons[lv_intItemID], PlayerGroupSingle(lp_intPlayer), true);
            }
            lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_33E135E8") + libPEEP_gv_recStoreItems[lv_intItemID].lv_txtName + StringExternal("Param/Value/lib_PEEP_DD9A01F0") + TextWithColor(StringExternal("Param/Value/lib_PEEP_475714D2"), lv_color) + TextWithColor(libPEEP_gf_formatIntegerAsText(libPEEP_gv_recStoreItems[lv_intItemID].lv_intPrice), lv_color) + StringExternal("Param/Value/lib_PEEP_0ECB12CE") + lv_txtMessage2);
            libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diStoreButtons[lv_intItemID], lv_txtMessage, PlayerGroupSingle(lp_intPlayer));
        }
    }
}

void libPEEP_gf_PurchaseItemforPlayer (int lp_intItemID, int lp_intPlayer) {
    // Variable Declarations
    int lv_intPrice;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intPrice = libPEEP_gv_recStoreItems[lp_intItemID].lv_intPrice;
    if ((lv_intPrice > libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount)) {
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_4B873F3F"), lp_intPlayer, false, false);
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[lp_intItemID] == true)) {
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_552E3205"), lp_intPlayer, false, false);
        }
        else {
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount -= lv_intPrice;
            libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBankOwnsStoreItem[lp_intItemID] = true;
            libPEEP_gf_SaveBankforPlayer(lp_intPlayer);
            libPEEP_gf_RefreshStoreDialogforPlayer(lp_intPlayer);
            libPEEP_gf_RefreshAvatarButtonsforPlayer(lp_intPlayer);
            libPEEP_gf_RefreshPetUIforPlayer(lp_intPlayer);
            libPEEP_gf_RefreshTurfMarkerUIforPlayer(lp_intPlayer);
            libPEEP_gf_RefreshTurfSymbolUIforPlayer(lp_intPlayer);
            libPEEP_gf_RefreshDashboardforPlayer(lp_intPlayer);
        }
    }
}

void libPEEP_gf_CashChipsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intExtraChips;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intExtraChips = (libPEEP_gv_recPlayers[lp_intPlayer].lv_intChips - 1000);
    if ((lv_intExtraChips <= 0)) {
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_0F9309C3"), lp_intPlayer, false, false);
    }
    else {
        if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentBetAmount > 0)) {
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_60B4D7ED"), lp_intPlayer, false, false);
        }
        else {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_917EF46E") + libPEEP_gf_formatIntegerAsText(lv_intExtraChips) + StringExternal("Param/Value/lib_PEEP_A673FFB9")), lp_intPlayer, false, false);
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intChips = 1000;
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsInAccount += lv_intExtraChips;
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankChipsCashed += lv_intExtraChips;
            libPEEP_gf_SaveBankforPlayer(lp_intPlayer);
            libPEEP_gf_RefreshStoreDialogforPlayer(lp_intPlayer);
        }
    }
}

void libPEEP_gf_CreateTeamRestrictionDialog () {
    // Variable Declarations
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intGap;
    int lv_intYOffset;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoB55F6479_ae;
    const int autoB55F6479_ai = 1;

    // Variable Initialization
    lv_intDialogWidth = (libPEEP_gv_recGlobals.lv_intDialogExtra + ((libPEEP_gv_recGlobals.lv_intTeamButtonSize + libPEEP_gv_recGlobals.lv_intTeamButtonGap) * libPEEP_gv_recGlobals.lv_intNumButtonTeamCols));
    lv_intDialogHeight = (235 + (libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS * 32));
    lv_intGap = 30;

    // Implementation
    DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTopLeft, 150, libPEEP_gv_recGlobals.lv_intDialogYStart, true);
    libPEEP_gv_recUI.lv_dTeamRestrictionDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopLeft, 30, 30, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (DialogGetWidth(DialogLastCreated()) - 60), (DialogGetHeight(DialogLastCreated()) - 60), c_anchorTopRight, 30, 30, StringToText(""), "Assets\\Textures\\fade_left.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, 300, libPEEP_gv_recGlobals.lv_intDialogHeaderHeight, c_anchorTop, 0, libPEEP_gv_recGlobals.lv_intDialogBorder, StringExternal("Param/Value/lib_PEEP_8510D796"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderCenterText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, 255, 100, c_anchorTop, 0, 35, StringExternal("Param/Value/lib_PEEP_A5DB566D"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeScore", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), StringToText(""), "");
    libPEEP_gv_recUI.lv_diTeamRestrictionDialogX = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonXTeamRestrictionDialog, c_playerAny, libPEEP_gv_recUI.lv_diTeamRestrictionDialogX, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemImage(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, libPEEP_gv_recUI.lv_intXButtonWidth, libPEEP_gv_recUI.lv_intXButtonHeight, c_anchorTopLeft, libPEEP_gv_recUI.lv_intXButtonXOffset, libPEEP_gv_recUI.lv_intXButtonYOffset, StringToText(""), libPEEP_gv_recUI.lv_imageXButtonImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20.0);
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, 250, 100, c_anchorTopLeft, 100, 165, StringExternal("Param/Value/lib_PEEP_AC4CB2BF"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, 50, 50, c_anchorTopLeft, 50, 150, StringExternal("Param/Value/lib_PEEP_CB8F8C28"), true);
    Wait(libPEEP_gv_recGlobals.lv_realWaitTime, c_timeGame);
    libPEEP_gv_recUI.lv_diTeamRestrictionCheckAll = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_CheckboxCheckAll, c_playerAny, libPEEP_gv_recUI.lv_diTeamRestrictionCheckAll, c_triggerControlEventTypeChecked);
    lv_intYOffset = 200;
    autoB55F6479_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoB55F6479_ai >= 0 && lv_intPlayer <= autoB55F6479_ae) || (autoB55F6479_ai < 0 && lv_intPlayer >= autoB55F6479_ae) ) ; lv_intPlayer += autoB55F6479_ai ) {
        libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, 250, 50, c_anchorTopLeft, 100, (lv_intYOffset + 18), PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false)), false, 2.0);
        libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intPlayer] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemCheckBox(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, 50, 50, c_anchorTopLeft, 50, lv_intYOffset, StringToText(""), true);
        Wait(libPEEP_gv_recGlobals.lv_realWaitTime, c_timeGame);
        libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intPlayer] = DialogControlLastCreated();
        TriggerAddEventDialogControl(libPEEP_gt_CheckboxesPlayerRestrictions, c_playerAny, libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intPlayer], c_triggerControlEventTypeChecked);
        lv_intYOffset += lv_intGap;
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intPlayer], PlayerGroupSingle(lv_intPlayer), false);
    }
}

void libPEEP_gf_UsePen (int lp_intPlayer, int lp_intX, int lp_intY) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPenX;
    int lv_intPenY;
    int lv_intCursorX;
    int lv_intCursorY;
    int lv_intIndex;
    fixed lv_realMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_realMultiplier = 1.7;

    // Implementation
    lv_intPenX = FixedToInt((IntToFixed(lp_intX) * lv_realMultiplier));
    lv_intPenY = FixedToInt((IntToFixed(lp_intY) * lv_realMultiplier));
    lv_intCursorX = (lv_intPenX - (DialogControlGetWidth(libPEEP_gv_recUI.lv_diSketchCursor, 1) / 2));
    lv_intCursorY = (lv_intPenY - (DialogControlGetWidth(libPEEP_gv_recUI.lv_diSketchCursor, 1) / 2));
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diSketchCursor, PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, lv_intCursorX, lv_intCursorY);
    if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPenIsDrawing == true) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_intPenTrailCount < libPEEP_gv_recGlobals.lv_intMaxPenTrail))) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intPenTrailCount += 1;
        lv_intIndex = libPEEP_gv_recPlayers[lv_intPlayer].lv_intPenTrailCount;
        lv_intPenX -= (DialogControlGetWidth(libPEEP_gv_recUI.lv_diPenTrail[1], 1) / 2);
        lv_intPenY -= (DialogControlGetWidth(libPEEP_gv_recUI.lv_diPenTrail[1], 1) / 2);
        DialogControlSetPosition(libPEEP_gv_recUI.lv_diPenTrail[lv_intIndex], PlayerGroupSingle(lp_intPlayer), c_anchorTopLeft, lv_intPenX, lv_intPenY);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diPenTrail[lv_intIndex], PlayerGroupSingle(lp_intPlayer), true);
    }

}

void libPEEP_gf_CreateSketchDialog () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intMapWidth;
    int lv_intMapHeight;
    fixed lv_realScaleFactor;
    int lv_intMaxHeight;

    // Automatic Variable Declarations
    const int auto28A8727E_ae = 50;
    const int auto28A8727E_ai = 1;
    int auto6E08E613_ae;
    const int auto6E08E613_ai = 1;

    // Variable Initialization
    lv_intMaxHeight = 1050;

    // Implementation
    DialogCreate(2500, 1350, c_anchorTop, 0, -30, true);
    libPEEP_gv_recUI.lv_dSketchDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2500, 2000, c_anchorTop, 0, 0, StringToText(""), "Assets\\Textures\\zergblankportrait_static.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diSketchpadBackground = DialogControlLastCreated();
    lv_intMapWidth = libPEEP_gv_recGlobals.lv_intMapOverlayWidth;
    lv_intMapHeight = libPEEP_gv_recGlobals.lv_intMapOverlayHeight;
    lv_realScaleFactor = (IntToFixed(lv_intMaxHeight) / IntToFixed(lv_intMapHeight));
    lv_intMapWidth = FixedToInt((IntToFixed(lv_intMapWidth) * lv_realScaleFactor));
    lv_intMapHeight = FixedToInt((IntToFixed(lv_intMapHeight) * lv_realScaleFactor));
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intMapWidth, lv_intMapHeight, c_anchorBottom, 0, 150, StringToText(""), "Assets\\Textures\\map_overlay.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diSketchMapImage = DialogControlLastCreated();
    lv_intIndex = 1;
    for ( ; ( (auto28A8727E_ai >= 0 && lv_intIndex <= auto28A8727E_ae) || (auto28A8727E_ai < 0 && lv_intIndex >= auto28A8727E_ae) ) ; lv_intIndex += auto28A8727E_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diSketchTownhallBackgrounds[lv_intIndex] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diSketchTownhallIcons[lv_intIndex] = DialogControlLastCreated();
    }
    auto6E08E613_ae = libPEEP_gv_recGlobals.lv_intMaxPenTrail;
    lv_intIndex = 1;
    for ( ; ( (auto6E08E613_ai >= 0 && lv_intIndex <= auto6E08E613_ae) || (auto6E08E613_ai < 0 && lv_intIndex >= auto6E08E613_ae) ) ; lv_intIndex += auto6E08E613_ai ) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 15, 15, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\yellow_circle.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libPEEP_gv_recUI.lv_diPenTrail[lv_intIndex] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 100, c_anchorTop, 0, 150, libPEEP_gv_recGlobals.lv_txtMapName, Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeSet", PlayerGroupAll());
    libPEEP_gv_recUI.lv_diSketchMapTitle = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\cursor-target-allied.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libPEEP_gv_recUI.lv_diSketchCursor = DialogControlLastCreated();
}

void libPEEP_gf_EngageSketchpadforPlayer (int lp_intPlayer, bool lp_boolShowMapOveraly) {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gf_HideAllCenterDialogsforPlayer(lp_intPlayer);
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPenModeEngaged = true;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intPenTrailCount = 1;
    DialogSetVisible(libPEEP_gv_recUI.lv_dSketchDialog, PlayerGroupSingle(lp_intPlayer), true);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchCursor, PlayerGroupSingle(lp_intPlayer), true);
    UISetCursorVisible(PlayerGroupSingle(lp_intPlayer), false);
    UISetDragSelectEnabled(PlayerGroupSingle(lp_intPlayer), false);
    if ((lp_boolShowMapOveraly == true)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolMapOverlayEngaged = true;
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchpadBackground, PlayerGroupSingle(lp_intPlayer), true);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchMapTitle, PlayerGroupSingle(lp_intPlayer), true);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchMapImage, PlayerGroupSingle(lp_intPlayer), true);
    }
    else {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolMapOverlayEngaged = false;
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchpadBackground, PlayerGroupSingle(lp_intPlayer), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchMapTitle, PlayerGroupSingle(lp_intPlayer), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchMapImage, PlayerGroupSingle(lp_intPlayer), false);
    }
    libPEEP_gf_RefreshSketchpadTownhallIcons();
}

void libPEEP_gf_DisengageSketchpadforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolMapOverlayEngaged = false;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPenModeEngaged = false;
    DialogSetVisible(libPEEP_gv_recUI.lv_dSketchDialog, PlayerGroupSingle(lp_intPlayer), false);
    UISetCursorVisible(PlayerGroupSingle(lp_intPlayer), true);
    UISetDragSelectEnabled(PlayerGroupSingle(lp_intPlayer), true);
    libPEEP_gf_ErasePenTrailforPlayer(lp_intPlayer);
}

void libPEEP_gf_ErasePenTrailforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto05136951_ae;
    const int auto05136951_ai = 1;

    // Variable Initialization

    // Implementation
    auto05136951_ae = libPEEP_gv_recGlobals.lv_intMaxPenTrail;
    lv_intIndex = 1;
    for ( ; ( (auto05136951_ai >= 0 && lv_intIndex <= auto05136951_ae) || (auto05136951_ai < 0 && lv_intIndex >= auto05136951_ae) ) ; lv_intIndex += auto05136951_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diPenTrail[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
    }
}

void libPEEP_gf_RefreshSketchpadTownhallIcons () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;
    int lv_intIndex;
    string lv_imgImage;
    int lv_intMapStartX;
    int lv_intMapStartY;
    int lv_intX;
    int lv_intY;
    fixed lv_realMultiplier;
    int lv_intIconSize;

    // Automatic Variable Declarations
    int auto468B6A7C_ae;
    const int auto468B6A7C_ai = 1;
    int auto33883096_ae;
    const int auto33883096_ai = 1;
    unitgroup auto91111DE4_g;
    int auto91111DE4_u;
    unit auto91111DE4_var;
    int auto3B4F61F5_ae;
    const int auto3B4F61F5_ai = 1;

    // Variable Initialization
    lv_realMultiplier = 1.0;
    lv_intIconSize = 52;

    // Implementation
    lv_realMultiplier = (IntToFixed(DialogControlGetWidth(libPEEP_gv_recUI.lv_diSketchMapImage, 1)) / libPEEP_gv_recGlobals.lv_realMapMaxXCoordinate);
    lv_intMapStartX = ((DialogGetWidth(libPEEP_gv_recUI.lv_dSketchDialog) / 2) - (DialogControlGetWidth(libPEEP_gv_recUI.lv_diSketchMapImage, 1) / 2));
    lv_intMapStartY = DialogControlGetOffsetY(libPEEP_gv_recUI.lv_diSketchMapImage, 1);
    lv_intIndex = 0;
    auto468B6A7C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto468B6A7C_ai >= 0 && lv_intPlayer <= auto468B6A7C_ae) || (auto468B6A7C_ai < 0 && lv_intPlayer >= auto468B6A7C_ae) ) ; lv_intPlayer += auto468B6A7C_ai ) {
        libPEEP_gf_HideTownhallIconsforPlayer(lv_intPlayer);
    }
    auto33883096_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto33883096_ai >= 0 && lv_intPlayer <= auto33883096_ae) || (auto33883096_ai < 0 && lv_intPlayer >= auto33883096_ae) ) ; lv_intPlayer += auto33883096_ai ) {
        libPEEP_gf_HideTownhallIconsforPlayer(lv_intPlayer);
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            auto91111DE4_g = UnitGroup(null, lv_intPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
            auto91111DE4_u = UnitGroupCount(auto91111DE4_g, c_unitCountAll);
            for (;; auto91111DE4_u -= 1) {
                auto91111DE4_var = UnitGroupUnitFromEnd(auto91111DE4_g, auto91111DE4_u);
                if (auto91111DE4_var == null) { break; }
                if (((UnitGetType(auto91111DE4_var) == "CommandCenter") || (UnitGetType(auto91111DE4_var) == "OrbitalCommand") || (UnitGetType(auto91111DE4_var) == "PlanetaryFortress") || (UnitGetType(auto91111DE4_var) == "Hatchery") || (UnitGetType(auto91111DE4_var) == "Lair") || (UnitGetType(auto91111DE4_var) == "Hive") || (UnitGetType(auto91111DE4_var) == "Nexus") || (UnitGetType(auto91111DE4_var) == "ProcessingCore") || (UnitGetType(auto91111DE4_var) == "ScavengerNest") || (UnitGetType(auto91111DE4_var) == "Citadel") || (UnitGetType(auto91111DE4_var) == "CitadelCharged"))) {
                    if ((UnitGetType(auto91111DE4_var) == "CommandCenter")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-terran-commandcenter.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "OrbitalCommand")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-terran-surveillancestation.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "PlanetaryFortress")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-terran-planetaryfortress.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "Hatchery")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-zerg-hatchery.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "Lair")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-zerg-lair.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "Hive")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-zerg-lair.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "Nexus")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-protoss-nexus.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "ProcessingCore")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-genetron-processingcore.dds";
                    }
                    else if ((UnitGetType(auto91111DE4_var) == "ScavengerNest")) {
                        lv_imgImage = "Assets\\Textures\\btn-building-xayid-scavengernest.dds";
                    }
                    else if (((UnitGetType(auto91111DE4_var) == "Citadel") || (UnitGetType(auto91111DE4_var) == "CitadelCharged"))) {
                        lv_imgImage = "Assets\\Textures\\btn-building-keiron-citadel.dds";
                    }
                    lv_intX = FixedToInt((PointGetX(UnitGetPosition(auto91111DE4_var)) * lv_realMultiplier));
                    lv_intY = FixedToInt((PointGetY(UnitGetPosition(auto91111DE4_var)) * lv_realMultiplier));
                    lv_intX = (lv_intMapStartX + lv_intX);
                    lv_intY = (lv_intMapStartY + lv_intY);
                    lv_intX = (lv_intX - (lv_intIconSize / 2));
                    lv_intY = (lv_intY - (lv_intIconSize / 2));
                    lv_intIndex += 1;
                    DialogControlSetSize(libPEEP_gv_recUI.lv_diSketchTownhallBackgrounds[lv_intIndex], PlayerGroupAll(), lv_intIconSize, lv_intIconSize);
                    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diSketchTownhallBackgrounds[lv_intIndex], libPEEP_gv_recPlayers[lv_intPlayer].lv_imgLeftTOWImage, PlayerGroupAll());
                    DialogControlSetPosition(libPEEP_gv_recUI.lv_diSketchTownhallBackgrounds[lv_intIndex], PlayerGroupAll(), c_anchorBottomLeft, lv_intX, lv_intY);
                    DialogControlSetSize(libPEEP_gv_recUI.lv_diSketchTownhallIcons[lv_intIndex], PlayerGroupAll(), lv_intIconSize, lv_intIconSize);
                    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diSketchTownhallIcons[lv_intIndex], lv_imgImage, PlayerGroupAll());
                    DialogControlSetPosition(libPEEP_gv_recUI.lv_diSketchTownhallIcons[lv_intIndex], PlayerGroupAll(), c_anchorBottomLeft, lv_intX, lv_intY);
                    auto3B4F61F5_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_HUMAN_PLAYERS;
                    lv_intTmpPlayer = 1;
                    for ( ; ( (auto3B4F61F5_ai >= 0 && lv_intTmpPlayer <= auto3B4F61F5_ae) || (auto3B4F61F5_ai < 0 && lv_intTmpPlayer >= auto3B4F61F5_ae) ) ; lv_intTmpPlayer += auto3B4F61F5_ai ) {
                        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolMapOverlayEngaged == true)) {
                            DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchTownhallBackgrounds[lv_intIndex], PlayerGroupSingle(lv_intTmpPlayer), true);
                            DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchTownhallIcons[lv_intIndex], PlayerGroupSingle(lv_intTmpPlayer), true);
                        }

                    }
                }

            }
        }

    }
}

void libPEEP_gf_HideTownhallIconsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    const int autoB3DFA4ED_ae = 20;
    const int autoB3DFA4ED_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    for ( ; ( (autoB3DFA4ED_ai >= 0 && lv_intIndex <= autoB3DFA4ED_ae) || (autoB3DFA4ED_ai < 0 && lv_intIndex >= autoB3DFA4ED_ae) ) ; lv_intIndex += autoB3DFA4ED_ai ) {
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchTownhallBackgrounds[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diSketchTownhallIcons[lv_intIndex], PlayerGroupSingle(lp_intPlayer), false);
    }
}

text libPEEP_gf_makeStructureTooltip (int lp_intRace, int lp_intRow, int lp_intCol, int lp_intCount, int lp_intInProgressCount) {
    // Variable Declarations
    text lv_txtMessage;
    text lv_txtTmp;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_3408BF37") + UnitTypeGetName(libPEEP_gv_recStructures[lp_intRace][lp_intRow][lp_intCol].lv_utUnitType) + StringExternal("Param/Value/lib_PEEP_45645547"));
    if ((lp_intCount == 0)) {
        lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_4C00EB6F"));
        lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTmp, (Color(149*100/255,150*100/255,151*100/255))));
    }
    else {
        lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_FE4F7709") + libPEEP_gf_formatIntegerAsText(lp_intCount) + StringExternal("Param/Value/lib_PEEP_ECE19FD4"));
        lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTmp, (Color(22*100/255,128*100/255,0))));
    }
    if ((lp_intInProgressCount > 0)) {
        lv_txtTmp = (StringExternal("Param/Value/lib_PEEP_936557D5") + libPEEP_gf_formatIntegerAsText(lp_intInProgressCount) + StringExternal("Param/Value/lib_PEEP_E744C803"));
        lv_txtMessage = (lv_txtMessage + TextWithColor(lv_txtTmp, (Color(150*100/255,150*100/255,30*100/255))));
    }

    return lv_txtMessage;
}

void libPEEP_gf_CreateStructurePanels () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_intMatch;
    int lv_intRace;
    int lv_intIconSize;
    int lv_intIconGap;
    int lv_intDialogGap;
    int lv_intRowHeight;
    int lv_intRowGap;
    int lv_intXForDialogs;
    int lv_intYForDialogs;
    int lv_intX;
    int lv_intY;
    int lv_intDialogWidth;
    int lv_intDialogHeight;
    int lv_intNumDialogs;
    int lv_intRow;
    int lv_intCol;
    int lv_intLabelWidth;
    text lv_txtRowTitle;
    int lv_intIconLevel;
    text lv_txtImageName;
    fixed lv_realMultiplier;
    int lv_intLabelOffsetX;
    int lv_intLabelOffsetY;
    string lv_imgImage;

    // Automatic Variable Declarations
    int autoE0E4F1E8_ae;
    const int autoE0E4F1E8_ai = 1;
    int autoECBE0836_ae;
    const int autoECBE0836_ai = 1;
    const int autoA30AA730_ae = 4;
    const int autoA30AA730_ai = 1;
    const int autoA1D4E8EB_ae = 10;
    const int autoA1D4E8EB_ai = 1;

    // Variable Initialization
    lv_intIconSize = 36;
    lv_intIconGap = 6;
    lv_intDialogGap = 20;
    lv_intRowHeight = 44;
    lv_intRowGap = 20;
    lv_intYForDialogs = 235;
    lv_intDialogWidth = 366;
    lv_intDialogHeight = 273;
    lv_intLabelWidth = 100;
    lv_intLabelOffsetY = 13;

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intNumMatchPlayers == 2)) {
        lv_realMultiplier = 1.4;
        lv_intDialogHeight = 357;
        lv_intLabelOffsetX = 5;
        lv_intLabelOffsetY = 23;
        lv_intRowGap = 31;
    }
    else {
        lv_realMultiplier = 1.0;
        lv_intDialogHeight = 273;
        lv_intLabelOffsetX = -7;
        lv_intLabelOffsetY = 10;
        lv_intRowGap = 21;
    }
    lv_intDialogWidth = FixedToInt((IntToFixed(lv_intDialogWidth) * lv_realMultiplier));
    lv_intIconSize = FixedToInt((IntToFixed(lv_intIconSize) * lv_realMultiplier));
    lv_intIconGap = FixedToInt((IntToFixed(lv_intIconGap) * lv_realMultiplier));
    lv_intRowHeight = FixedToInt((IntToFixed(lv_intRowHeight) * lv_realMultiplier));
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    autoE0E4F1E8_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoE0E4F1E8_ai >= 0 && lv_intIndex <= autoE0E4F1E8_ae) || (autoE0E4F1E8_ai < 0 && lv_intIndex >= autoE0E4F1E8_ae) ) ; lv_intIndex += autoE0E4F1E8_ai ) {
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            lv_intNumDialogs += 1;
        }

    }
    lv_intXForDialogs = (0 - (((lv_intDialogWidth * lv_intNumDialogs) + (lv_intDialogGap * (lv_intNumDialogs - 1))) / 2));
    lv_intXForDialogs = (lv_intXForDialogs + (lv_intDialogWidth / 2));
    autoECBE0836_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoECBE0836_ai >= 0 && lv_intIndex <= autoECBE0836_ae) || (autoECBE0836_ai < 0 && lv_intIndex >= autoECBE0836_ae) ) ; lv_intIndex += autoECBE0836_ai ) {
        lv_intPlayer = libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            lv_intRace = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTrueRace;
            DialogCreate(lv_intDialogWidth, lv_intDialogHeight, c_anchorTop, lv_intXForDialogs, lv_intYForDialogs, true);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_dStructureDialog = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv_intDialogWidth - FixedToInt((100.0 * lv_realMultiplier))), lv_intDialogHeight, c_anchorTopLeft, 110, 47, StringToText(""), "Assets\\Textures\\fade_right.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            lv_txtRowTitle = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 250, 50);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 130, 10);
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtRowTitle, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerRight", PlayerGroupAll());
            lv_intY = 54;
            lv_intRow = 1;
            for ( ; ( (autoA30AA730_ai >= 0 && lv_intRow <= autoA30AA730_ae) || (autoA30AA730_ai < 0 && lv_intRow >= autoA30AA730_ae) ) ; lv_intRow += autoA30AA730_ai ) {
                lv_intX = 0;
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_intLabelWidth, 50);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_intX, lv_intY);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
                lv_txtRowTitle = (StringExternal("Param/Value/lib_PEEP_FE354118") + libPEEP_gv_recGlobals.lv_txtStructureRowNames[lv_intRow] + StringExternal("Param/Value/lib_PEEP_189FE9FA"));
                libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_txtRowTitle, PlayerGroupAll());
                lv_intX += (lv_intLabelWidth + 18);
                lv_intCol = 1;
                for ( ; ( (autoA1D4E8EB_ai >= 0 && lv_intCol <= autoA1D4E8EB_ae) || (autoA1D4E8EB_ai < 0 && lv_intCol >= autoA1D4E8EB_ae) ) ; lv_intCol += autoA1D4E8EB_ai ) {
                    if ((libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType != null)) {
                        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, StringToText(""), "Assets\\Textures\\blank.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diStructureBackgrounds[lv_intRow][lv_intCol] = DialogControlLastCreated();
                        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
                        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_intIconSize, lv_intIconSize, c_anchorTopLeft, lv_intX, lv_intY, libPEEP_gf_makeStructureTooltip(lv_intRace, lv_intRow, lv_intCol, 0, 0), libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_imgIcon, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diStructureIcons[lv_intRow][lv_intCol] = DialogControlLastCreated();
                        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 75.0);
                        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 44, 44, c_anchorTopLeft, (lv_intX + lv_intLabelOffsetX), (lv_intY + lv_intLabelOffsetY), StringToText(""), Color(100,100,100), false, 2.0);
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diStructureLevelLabels[lv_intRow][lv_intCol] = DialogControlLastCreated();
                        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "NamePanelPlayerLeft", PlayerGroupAll());
                        lv_intX += (lv_intIconSize + lv_intIconGap);
                    }
                    else {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_diStructureIcons[lv_intRow][lv_intCol] = c_invalidDialogControlId;
                    }
                }
                lv_intY += lv_intRowHeight;
                if (((lv_intRow == 1) || (lv_intRow == 2))) {
                    lv_intY += lv_intRowGap;
                }
            }
            lv_intXForDialogs += (lv_intDialogWidth + lv_intDialogGap);
        }

    }
}

void libPEEP_gf_UpdateStructureIcon (int lp_intPlayer, int lp_intRow, int lp_intCol) {
    // Variable Declarations
    int lv_intRace;
    text lv_txtMessage;
    color lv_coColor;
    int lv_intStructureCount;
    int lv_intInProgressCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coColor = Color(0,0,0);

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureIcons[lp_intRow][lp_intCol] != c_invalidDialogControlId)) {
        lv_intRace = libPEEP_gv_recPlayers[lp_intPlayer].lv_intTrueRace;
        lv_intStructureCount = libPEEP_gv_recPlayers[lp_intPlayer].lv_intStructureCompleteList[lp_intRow][lp_intCol];
        lv_intInProgressCount = libPEEP_gv_recPlayers[lp_intPlayer].lv_intStructureInProgressList[lp_intRow][lp_intCol];
        libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureIcons[lp_intRow][lp_intCol], libPEEP_gf_makeStructureTooltip(lv_intRace, lp_intRow, lp_intCol, lv_intStructureCount, lv_intInProgressCount), PlayerGroupAll());
        if ((lv_intStructureCount > 0)) {
            if ((lv_intStructureCount >= 1)) {
                lv_coColor = Color(100,100,100);
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_9B17F846") + TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intStructureCount), lv_coColor) + StringExternal("Param/Value/lib_PEEP_E3029C3A"));
            }
            else {
                lv_txtMessage = StringToText("");
            }
            libNtve_gf_SetDialogItemText(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureLevelLabels[lp_intRow][lp_intCol], lv_txtMessage, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureLevelLabels[lp_intRow][lp_intCol], StringToText(""), PlayerGroupAll());
        }
        if ((lv_intInProgressCount > 0)) {
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureBackgrounds[lp_intRow][lp_intCol], "Assets\\Textures\\towbar_left_yellow.dds", PlayerGroupAll());
            DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureBackgrounds[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 20.0);
            DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureBackgrounds[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 40.0);
        }
        else {
            if ((lv_intStructureCount > 0)) {
                libNtve_gf_SetDialogItemImage(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureBackgrounds[lp_intRow][lp_intCol], "Assets\\Textures\\buildingplane_green1.dds", PlayerGroupAll());
                DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureBackgrounds[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 20.0);
                DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureIcons[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 0.0);
            }
            else {
                libNtve_gf_SetDialogItemImage(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureBackgrounds[lp_intRow][lp_intCol], "Assets\\Textures\\blank.dds", PlayerGroupAll());
                DialogControlFadeTransparency(libPEEP_gv_recPlayers[lp_intPlayer].lv_diStructureIcons[lp_intRow][lp_intCol], PlayerGroupAll(), 0.0, 75.0);
            }
        }
    }

}

void libPEEP_gf_RefreshAllStructurePanels () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRace;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;

    // Automatic Variable Declarations
    int auto11CFEB62_ae;
    const int auto11CFEB62_ai = 1;
    const int auto0AD50755_ae = 4;
    const int auto0AD50755_ai = 1;
    const int auto02B72940_ae = 10;
    const int auto02B72940_ai = 1;

    // Variable Initialization

    // Implementation
    auto11CFEB62_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto11CFEB62_ai >= 0 && lv_intPlayer <= auto11CFEB62_ae) || (auto11CFEB62_ai < 0 && lv_intPlayer >= auto11CFEB62_ae) ) ; lv_intPlayer += auto11CFEB62_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_dStructureDialog != c_invalidDialogId) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true))) {
            lv_intRow = 1;
            for ( ; ( (auto0AD50755_ai >= 0 && lv_intRow <= auto0AD50755_ae) || (auto0AD50755_ai < 0 && lv_intRow >= auto0AD50755_ae) ) ; lv_intRow += auto0AD50755_ai ) {
                lv_intCol = 1;
                for ( ; ( (auto02B72940_ai >= 0 && lv_intCol <= auto02B72940_ae) || (auto02B72940_ai < 0 && lv_intCol >= auto02B72940_ae) ) ; lv_intCol += auto02B72940_ai ) {
                    libPEEP_gf_UpdateStructureIcon(lv_intPlayer, lv_intRow, lv_intCol);
                }
            }
        }

    }
}

void libPEEP_gf_ResetStructurePanels () {
    // Automatic Variable Declarations
    // Implementation
    libPEEP_gf_DestroyStructurePanels();
    libPEEP_gf_CreateStructurePanels();
    libPEEP_gf_RefreshAllStructurePanels();
}

void libPEEP_gf_DestroyStructurePanels () {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_dDialog;
    int lv_intRow;
    int lv_intCol;
    int lv_intLevel;

    // Automatic Variable Declarations
    int auto4625AEFD_ae;
    const int auto4625AEFD_ai = 1;
    const int autoF699ACC3_ae = 7;
    const int autoF699ACC3_ai = 1;
    const int auto22FF31A4_ae = 10;
    const int auto22FF31A4_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    auto4625AEFD_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto4625AEFD_ai >= 0 && lv_intTmpPlayer <= auto4625AEFD_ae) || (auto4625AEFD_ai < 0 && lv_intTmpPlayer >= auto4625AEFD_ae) ) ; lv_intTmpPlayer += auto4625AEFD_ai ) {
        lv_dDialog = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dStructureDialog;
        if ((lv_dDialog != c_invalidDialogId)) {
            DialogDestroy(lv_dDialog);
            libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dStructureDialog = c_invalidDialogId;
            lv_intRow = 1;
            for ( ; ( (autoF699ACC3_ai >= 0 && lv_intRow <= autoF699ACC3_ae) || (autoF699ACC3_ai < 0 && lv_intRow >= autoF699ACC3_ae) ) ; lv_intRow += autoF699ACC3_ai ) {
                lv_intCol = 1;
                for ( ; ( (auto22FF31A4_ai >= 0 && lv_intCol <= auto22FF31A4_ae) || (auto22FF31A4_ai < 0 && lv_intCol >= auto22FF31A4_ae) ) ; lv_intCol += auto22FF31A4_ai ) {
                    libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_diStructureIcons[lv_intRow][lv_intCol] = c_invalidDialogControlId;
                    libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_diStructureBackgrounds[lv_intRow][lv_intCol] = c_invalidDialogControlId;
                }
            }
        }

    }
}

void libPEEP_gf_ShowStructureDialogsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_dDialog;

    // Automatic Variable Declarations
    int autoF76ED5B0_ae;
    const int autoF76ED5B0_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    autoF76ED5B0_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoF76ED5B0_ai >= 0 && lv_intTmpPlayer <= autoF76ED5B0_ae) || (autoF76ED5B0_ai < 0 && lv_intTmpPlayer >= autoF76ED5B0_ae) ) ; lv_intTmpPlayer += autoF76ED5B0_ai ) {
        lv_dDialog = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dStructureDialog;
        if ((lv_dDialog != c_invalidDialogId)) {
            DialogSetVisible(lv_dDialog, PlayerGroupSingle(lp_intPlayer), true);
        }

    }
}

void libPEEP_gf_HideStructureDialogsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_dDialog;

    // Automatic Variable Declarations
    int autoCE62C7D4_ae;
    const int autoCE62C7D4_ai = 1;

    // Variable Initialization
    lv_dDialog = c_invalidDialogId;

    // Implementation
    autoCE62C7D4_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoCE62C7D4_ai >= 0 && lv_intTmpPlayer <= autoCE62C7D4_ae) || (autoCE62C7D4_ai < 0 && lv_intTmpPlayer >= autoCE62C7D4_ae) ) ; lv_intTmpPlayer += autoCE62C7D4_ai ) {
        lv_dDialog = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_dStructureDialog;
        if ((lv_dDialog != c_invalidDialogId)) {
            DialogSetVisible(lv_dDialog, PlayerGroupSingle(lp_intPlayer), false);
        }

    }
}

void libPEEP_gf_RefreshStructureCountsforPlayerUnitType (int lp_intPlayer, string lp_utUnitType) {
    // Variable Declarations
    int lv_intRow;
    int lv_intCol;
    int lv_intRace;
    bool lv_boolMatched;
    int lv_intMatchRow;
    int lv_intMatchCol;
    unit lv_uTmpUnit;
    int lv_intInProgressCount;

    // Automatic Variable Declarations
    const int autoDEF8949D_ae = 5;
    const int autoDEF8949D_ai = 1;
    const int autoF8A795E1_ae = 10;
    const int autoF8A795E1_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intRace = libPEEP_gv_recPlayers[lp_intPlayer].lv_intTrueRace;
    lv_intRow = 1;
    for ( ; ( (autoDEF8949D_ai >= 0 && lv_intRow <= autoDEF8949D_ae) || (autoDEF8949D_ai < 0 && lv_intRow >= autoDEF8949D_ae) ) ; lv_intRow += autoDEF8949D_ai ) {
        lv_intCol = 1;
        for ( ; ( (autoF8A795E1_ai >= 0 && lv_intCol <= autoF8A795E1_ae) || (autoF8A795E1_ai < 0 && lv_intCol >= autoF8A795E1_ae) ) ; lv_intCol += autoF8A795E1_ai ) {
            if ((lp_utUnitType == libPEEP_gv_recStructures[lv_intRace][lv_intRow][lv_intCol].lv_utUnitType)) {
                lv_boolMatched = true;
                lv_intMatchRow = lv_intRow;
                lv_intMatchCol = lv_intCol;
                break;
            }

        }
    }
    if ((lv_boolMatched == true)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intStructureInProgressList[lv_intMatchRow][lv_intMatchCol] = TechTreeUnitCount(lp_intPlayer, lp_utUnitType, c_techCountIncompleteOnly);
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intStructureCompleteList[lv_intMatchRow][lv_intMatchCol] = TechTreeUnitCount(lp_intPlayer, lp_utUnitType, c_techCountCompleteOnly);
        libPEEP_gf_UpdateStructureIcon(lp_intPlayer, lv_intMatchRow, lv_intMatchCol);
    }

}

void libPEEP_gf_ClearAllStructureMemory () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRow;
    int lv_intCol;

    // Automatic Variable Declarations
    int auto53FD2611_ae;
    const int auto53FD2611_ai = 1;
    const int auto300A6404_ae = 6;
    const int auto300A6404_ai = 1;
    const int auto6C13053A_ae = 10;
    const int auto6C13053A_ai = 1;

    // Variable Initialization

    // Implementation
    auto53FD2611_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto53FD2611_ai >= 0 && lv_intPlayer <= auto53FD2611_ae) || (auto53FD2611_ai < 0 && lv_intPlayer >= auto53FD2611_ae) ) ; lv_intPlayer += auto53FD2611_ai ) {
        lv_intRow = 1;
        for ( ; ( (auto300A6404_ai >= 0 && lv_intRow <= auto300A6404_ae) || (auto300A6404_ai < 0 && lv_intRow >= auto300A6404_ae) ) ; lv_intRow += auto300A6404_ai ) {
            lv_intCol = 1;
            for ( ; ( (auto6C13053A_ai >= 0 && lv_intCol <= auto6C13053A_ae) || (auto6C13053A_ai < 0 && lv_intCol >= auto6C13053A_ae) ) ; lv_intCol += auto6C13053A_ai ) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intStructureCompleteList[lv_intRow][lv_intCol] = 0;
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intStructureInProgressList[lv_intRow][lv_intCol] = 0;
            }
        }
    }
}

void libPEEP_gf_CreateSurrenderDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 230, c_anchorTop, 0, 300, true);
    libPEEP_gv_recUI.lv_dSurrenderDialog = DialogLastCreated();
    libPEEP_gv_recUI.lv_intDialogListCount += 1;
    libPEEP_gv_recUI.lv_dDialogList[libPEEP_gv_recUI.lv_intDialogListCount] = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(libPEEP_gv_recUI.lv_dSurrenderDialog, 400, 50, c_anchorTop, 30, 50, StringExternal("Param/Value/lib_PEEP_3E08B8A6"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dSurrenderDialog, 100, 50, c_anchorBottom, -50, 50, StringToText(""), StringExternal("Param/Value/lib_PEEP_55A1971D"), "");
    libPEEP_gv_recUI.lv_diSurrenderConfirmButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonSurrenderConfirm, c_playerAny, libPEEP_gv_recUI.lv_diSurrenderConfirmButton, c_triggerControlEventTypeClick);
    libNtve_gf_CreateDialogItemButton(libPEEP_gv_recUI.lv_dSurrenderDialog, 100, 50, c_anchorBottom, 50, 50, StringToText(""), StringExternal("Param/Value/lib_PEEP_35BD6F90"), "");
    libPEEP_gv_recUI.lv_diSurrenderDeclineButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(libPEEP_gt_ButtonSurrenderDecline, c_playerAny, libPEEP_gv_recUI.lv_diSurrenderDeclineButton, c_triggerControlEventTypeClick);
}

void libPEEP_gf_InitializeSlowRotationforPlayer (int lp_intPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSlowRotationCamIsClockwise == true)) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSlowRotationCamIsClockwise = false;
    }
    else {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolSlowRotationCamIsClockwise = true;
    }
    CameraSetValue(lp_intPlayer, c_cameraValuePitch, libPEEP_gv_recGlobals.lv_realSlowRotationPitch, 1.0, -1, 10);
}

void libPEEP_gf_RefreshAutoCams () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPlayer2;
    int lv_intIndex;
    unitgroup lv_ugUnitGroup;

    // Automatic Variable Declarations
    int auto811BD469_ae;
    const int auto811BD469_ai = 1;
    unitgroup auto777B9263_g;
    int auto777B9263_u;
    unit auto777B9263_var;

    // Variable Initialization
    lv_ugUnitGroup = UnitGroupEmpty();

    // Implementation
    auto811BD469_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto811BD469_ai >= 0 && lv_intPlayer <= auto811BD469_ae) || (auto811BD469_ai < 0 && lv_intPlayer >= auto811BD469_ae) ) ; lv_intPlayer += auto811BD469_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolAutoCamEngaged == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerAutoCamIdler) <= 0.0) && (TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerAutoCamIdler2) <= 0.0) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit != libPEEP_gv_recPlayers[libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastCameraPlayer].lv_recCamEvent.lv_uUnit) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit != null))) {
            TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerAutoCamIdler, libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, lv_intPlayer), false, c_timeGame);
            TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerAutoCamIdler2, libPEEP_gv_recGlobals.lv_realCamEventCooldowns[libPEEP_gv_recPlayers[libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastCameraPlayer].lv_recCamEvent.lv_intInterestIndex], false, c_timeGame);
            CameraFollowUnitGroup(lv_intPlayer, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), false, false);
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCurrentCameraUnitOverrides == true)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCurrentCameraUnitOverrides = false;
            }
            else {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit = libPEEP_gv_recPlayers[libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastCameraPlayer].lv_recCamEvent.lv_uUnit;
            }
            TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerCameraIdleExpiration, libPEEP_gv_recGlobals.lv_realCameraIdleCooldown, false, c_timeGame);
            if ((((UnitTypeTestAttribute(UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), c_unitAttributeStructure) == true) && (libPEEP_gv_recPlayers[libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastCameraPlayer].lv_recCamEvent.lv_intInterestIndex == 2)) || ((UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "SCV") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Drone") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Probe") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "ACR") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Scavenger") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Converter") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Observer") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Overseer") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Overlord") || (UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit) == "Raven")))) {
                lv_ugUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit);
            }
            else {
                lv_ugUnitGroup = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto777B9263_g = lv_ugUnitGroup;
                auto777B9263_u = UnitGroupCount(auto777B9263_g, c_unitCountAll);
                for (;; auto777B9263_u -= 1) {
                    auto777B9263_var = UnitGroupUnitFromEnd(auto777B9263_g, auto777B9263_u);
                    if (auto777B9263_var == null) { break; }
                    if (((UnitGetOwner(auto777B9263_var) == 0) || (UnitGetType(auto777B9263_var) == "Overlord") || (UnitGetType(auto777B9263_var) == "Interceptor"))) {
                        UnitGroupRemove(lv_ugUnitGroup, auto777B9263_var);
                    }

                }
            }
            if ((UnitTypeTestAttribute(UnitGetType(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), c_unitAttributeStructure) == true)) {
                if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 1)) {
                    CameraPan(lv_intPlayer, UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), 0.6, -1, 50, false);
                    Wait(1.5, c_timeReal);
                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
                else if (((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 2) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 4) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 5))) {
                    if ((DistanceBetweenPoints(CameraGetTarget(lv_intPlayer), UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit)) > 20.0)) {
                        CameraPan(lv_intPlayer, UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), 0.0, -1, 50, false);
                    }

                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
                else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 3)) {
                    CameraSetValue(lv_intPlayer, c_cameraValueYaw, RandomFixed((CameraGetYaw(lv_intPlayer) - 45.0), (CameraGetYaw(lv_intPlayer) + 45.0)), 1.0, -1, 10);
                    CameraSetValue(lv_intPlayer, c_cameraValuePitch, RandomFixed(30.0, 56.0), 1.0, -1, 10);
                    CameraPan(lv_intPlayer, UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), 0.6, -1, 50, false);
                    Wait(1.5, c_timeReal);
                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
            }
            else {
                if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 1)) {
                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
                else if (((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 2) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 4) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 5))) {
                    if ((DistanceBetweenPoints(CameraGetTarget(lv_intPlayer), UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit)) > 20.0)) {
                        CameraPan(lv_intPlayer, UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), 0.0, -1, 50, false);
                    }

                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
                else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 3)) {
                    CameraSetValue(lv_intPlayer, c_cameraValueYaw, RandomFixed((CameraGetYaw(lv_intPlayer) - 45.0), (CameraGetYaw(lv_intPlayer) + 45.0)), 1.0, -1, 10);
                    CameraSetValue(lv_intPlayer, c_cameraValuePitch, RandomFixed(30.0, 56.0), 1.0, -1, 10);
                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
            }
        }

    }
}

void libPEEP_gf_HandleCamEvent (int lp_intPlayer, int lp_intTimestamp, int lp_intInterestIndex, unit lp_uUnit) {
    // Variable Declarations
    int lv_intTmpPlayer;
    bool lv_boolPlayerBeingWatched;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto90A51C63_ae;
    const int auto90A51C63_ai = 1;
    int auto15EC0539_ae;
    const int auto15EC0539_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_intInterestIndex >= libPEEP_gv_recPlayers[lp_intPlayer].lv_recCamEvent.lv_intInterestIndex) || ((libPEEP_gv_recGameState.lv_intMatchSecondsElapsed - FixedToInt(libPEEP_gv_recGlobals.lv_realCamEventCooldowns[lp_intInterestIndex])) > libPEEP_gv_recPlayers[lp_intPlayer].lv_recCamEvent.lv_intTimestamp))) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_recCamEvent.lv_intTimestamp = lp_intTimestamp;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_recCamEvent.lv_intInterestIndex = lp_intInterestIndex;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_recCamEvent.lv_uUnit = lp_uUnit;
        auto90A51C63_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intTmpPlayer = 1;
        for ( ; ( (auto90A51C63_ai >= 0 && lv_intTmpPlayer <= auto90A51C63_ae) || (auto90A51C63_ai < 0 && lv_intTmpPlayer >= auto90A51C63_ae) ) ; lv_intTmpPlayer += auto90A51C63_ai ) {
            lv_boolPlayerBeingWatched = false;
            auto15EC0539_ae = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intNumPlayersImObserving;
            lv_intIndex = 1;
            for ( ; ( (auto15EC0539_ai >= 0 && lv_intIndex <= auto15EC0539_ae) || (auto15EC0539_ai < 0 && lv_intIndex >= auto15EC0539_ae) ) ; lv_intIndex += auto15EC0539_ai ) {
                if ((lp_intPlayer == libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intPlayersImObserving[lv_intIndex])) {
                    lv_boolPlayerBeingWatched = true;
                    break;
                }

            }
            if ((lv_boolPlayerBeingWatched == true)) {
                libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intLastCameraPlayer = lp_intPlayer;
            }

        }
        libPEEP_gf_RefreshAutoCams();
    }

}

void libPEEP_gf_RunPrankfromPlayer (int lp_intPlayer, int lp_intPrankID) {
    // Variable Declarations
    text lv_txtPrankName;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libPEEP_gv_recGlobals.lv_intDebugPlayer == lp_intPlayer) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && (lp_intPrankID <= libPEEP_gv_recGlobals.lv_intNumPranks))) {
        if ((libPEEP_gv_recGameState.lv_boolPrankPulled == true)) {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_E1712237")), lp_intPlayer, false, false);
        }
        else {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_3B8D4555") + StringExternal("Param/Value/lib_PEEP_C856D733") + libPEEP_gv_recPranks[lp_intPrankID].lv_txtName + StringExternal("Param/Value/lib_PEEP_6F7B9E0B")), 0, false, false);
            libPEEP_gv_recGameState.lv_boolPrankPulled = true;
            if ((lp_intPrankID == 1)) {
                libPEEP_gf_PrankZerglingParty();
            }
            else if ((lp_intPrankID == 2)) {
                libPEEP_gf_PrankGameShow();
            }
            else if ((lp_intPrankID == 3)) {
                libPEEP_gf_PrankAllWorkandNoPlay();
            }
            else if ((lp_intPrankID == 4)) {
                libPEEP_gf_PrankConfusedSCVs();
            }
            else if ((lp_intPrankID == 5)) {
                libPEEP_gf_PrankForestClearing();
            }
            else if ((lp_intPrankID == 6)) {
                libPEEP_gf_PrankRunZerglingRun();
            }
            else if ((lp_intPrankID == 7)) {
                libPEEP_gf_PrankDrinkMe();
            }
            else if ((lp_intPrankID == 8)) {
                libPEEP_gf_PrankFunhouse();
            }
            else if ((lp_intPrankID == 9)) {
                libPEEP_gf_PrankZenGarden();
            }
            else if ((lp_intPrankID == 10)) {
                libPEEP_gf_PrankBowBeforeMengsk();
            }
            else if ((lp_intPrankID == 11)) {
                libPEEP_gf_PrankCrystalAltar();
            }
            else if ((lp_intPrankID == 12)) {
                libPEEP_gf_PrankMothershipVortex();
            }
        }
    }

}

void libPEEP_gf_ClearAllPrankEntities () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoA62DB14A_ae;
    const int autoA62DB14A_ai = 1;
    unitgroup auto65374AC4_g;
    int auto65374AC4_u;
    unit auto65374AC4_var;
    int auto9C771D74_ae;
    const int auto9C771D74_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gv_recGameState.lv_boolPrankPulled = false;
    libPEEP_gv_recGlobals.lv_boolPrankLesserSelves = false;
    libPEEP_gv_recGlobals.lv_boolPrankLittleGuys = false;
    libPEEP_gv_recGlobals.lv_boolPrankFunhouse = false;
    autoA62DB14A_ae = libPEEP_gv_recGlobals.lv_intNumPrankActors;
    lv_intIndex = 1;
    for ( ; ( (autoA62DB14A_ai >= 0 && lv_intIndex <= autoA62DB14A_ae) || (autoA62DB14A_ai < 0 && lv_intIndex >= autoA62DB14A_ae) ) ; lv_intIndex += autoA62DB14A_ai ) {
        ActorScopeKill(ActorScopeFromActor(libPEEP_gv_recGlobals.lv_aPrankActorList[lv_intIndex]));
    }
    libPEEP_gv_recGlobals.lv_intNumPrankActors = 0;
    auto65374AC4_g = libPEEP_gv_recGlobals.lv_ugPrankUnitGroup;
    auto65374AC4_u = UnitGroupCount(auto65374AC4_g, c_unitCountAll);
    for (;; auto65374AC4_u -= 1) {
        auto65374AC4_var = UnitGroupUnitFromEnd(auto65374AC4_g, auto65374AC4_u);
        if (auto65374AC4_var == null) { break; }
        UnitRemove(auto65374AC4_var);
    }
    auto9C771D74_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto9C771D74_ai >= 0 && lv_intPlayer <= auto9C771D74_ae) || (auto9C771D74_ai < 0 && lv_intPlayer >= auto9C771D74_ae) ) ; lv_intPlayer += auto9C771D74_ai ) {
        libPEEP_gf_PrankMakePlayersFaceoffUnitNormal(lv_intPlayer);
    }
}

void libPEEP_gf_PrankAllWorkandNoPlay () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;
    unit lv_uUnit;

    // Automatic Variable Declarations
    int auto998B33B0_ae;
    const int auto998B33B0_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        libPEEP_gv_recGlobals.lv_boolPrankLesserSelves = true;
        auto998B33B0_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto998B33B0_ai >= 0 && lv_intPlayer <= auto998B33B0_ae) || (auto998B33B0_ai < 0 && lv_intPlayer >= auto998B33B0_ae) ) ; lv_intPlayer += auto998B33B0_ai ) {
            lv_uUnit = libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit;
            if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false) && (lv_uUnit != null))) {
                lv_pPosition = UnitGetPosition(lv_uUnit);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, lv_pPosition);
                libPEEP_gf_PrankSwapPlayersFaceoffUnittoWorker(lv_intPlayer);
            }

        }
    }

}

void libPEEP_gf_PrankSwapPlayersFaceoffUnittoWorker (int lp_intPlayer) {
    // Variable Declarations
    int lv_intTeam;
    unit lv_uUnit;
    int lv_intRace;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intTeam = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam;
    lv_uUnit = libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit;
    if ((lv_uUnit != null)) {
        lv_intRace = libPEEP_gv_recTeams[lv_intTeam].lv_intRace;
        if ((lv_intRace == 2)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "ModelSwap SCV");
        }
        else if ((lv_intRace == 3)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "ModelSwap Drone");
        }
        else if ((lv_intRace == 4)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "ModelSwap Probe");
        }
    }

}

void libPEEP_gf_PrankZerglingParty () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intCount;

    // Automatic Variable Declarations
    const int autoF0483D17_ae = 10;
    const int autoF0483D17_ai = 1;
    int auto3A593C87_ae;
    const int auto3A593C87_ai = 1;
    const int auto3013010B_ae = 100;
    const int auto3013010B_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        TimerStart(libPEEP_gv_recGlobals.lv_timerPrankZerglingTimer, 4.0, false, c_timeGame);
        lv_intCount = 1;
        for ( ; ( (autoF0483D17_ai >= 0 && lv_intCount <= autoF0483D17_ae) || (autoF0483D17_ai < 0 && lv_intCount >= autoF0483D17_ae) ) ; lv_intCount += autoF0483D17_ai ) {
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
                auto3A593C87_ae = RandomInt(1, 4);
                lv_intIndex = 1;
                for ( ; ( (auto3A593C87_ai >= 0 && lv_intIndex <= auto3A593C87_ae) || (auto3A593C87_ai < 0 && lv_intIndex >= auto3A593C87_ae) ) ; lv_intIndex += auto3A593C87_ai ) {
                    UnitCreate(1, "Zergling", 0, 0, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity");
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity 0.600000 0.300000");
                    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
                    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
                    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                    lv_intIndex2 = 1;
                    for ( ; ( (auto3013010B_ai >= 0 && lv_intIndex2 <= auto3013010B_ae) || (auto3013010B_ai < 0 && lv_intIndex2 >= auto3013010B_ae) ) ; lv_intIndex2 += auto3013010B_ai ) {
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(-10.0, 10.0), RandomFixed(-10.0, 10.0))), c_orderQueueAddToEnd);
                    }
                    if ((RandomInt(1, 2) == 2)) {
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Dance", 0, c_animTimeDefault);
                    }
                    else {
                        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Victory", 0, c_animTimeDefault);
                    }
                    if ((RandomInt(1, 2) == 2)) {
                        libNtve_gf_CreateActorAtPoint("Fireworks", PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(0.0, 5.0), libNtve_gf_RandomAngle()));
                        libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
                        libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
                    }

                }
                Wait(RandomFixed(0.2, 0.7), c_timeGame);
            }

        }
    }

}

void libPEEP_gf_PrankConfusedSCVs () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intRand;
    string lv_utUnitType;
    abilcmd lv_abAbilityCommand;

    // Automatic Variable Declarations
    int auto3F4C6D9E_ae;
    const int auto3F4C6D9E_ai = 1;
    const int autoAAD4BE99_ae = 100;
    const int autoAAD4BE99_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        PlayerModifyPropertyInt(0, c_playerPropMinerals, c_playerPropOperSetTo, 10000);
        UnitCreate(1, "CommandCenter", 0, 0, libPEEP_gv_recGlobals.lv_pStartingPointGroups[0][0], 270.0);
        UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetVisibility");
        auto3F4C6D9E_ae = RandomInt(15, 30);
        lv_intIndex = 1;
        for ( ; ( (auto3F4C6D9E_ai >= 0 && lv_intIndex <= auto3F4C6D9E_ae) || (auto3F4C6D9E_ai < 0 && lv_intIndex >= auto3F4C6D9E_ae) ) ; lv_intIndex += auto3F4C6D9E_ai ) {
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
                UnitCreate(1, "SCV", 0, 0, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 270.0);
                UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
                UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
                UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
                UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity");
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity 0.600000 0.300000");
                lv_intRand = RandomInt(1, 7);
                if ((lv_intRand == 1)) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("TerranBuild", 1), PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(0.0, 7.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                else if (((lv_intRand >= 2) && (lv_intRand <= 5))) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, c_unitCountAlive)), c_orderQueueReplace);
                }
                lv_intIndex2 = 1;
                for ( ; ( (autoAAD4BE99_ai >= 0 && lv_intIndex2 <= autoAAD4BE99_ae) || (autoAAD4BE99_ai < 0 && lv_intIndex2 >= autoAAD4BE99_ae) ) ; lv_intIndex2 += autoAAD4BE99_ai ) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffset(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(-10.0, 10.0), RandomFixed(-10.0, 10.0))), c_orderQueueAddToEnd);
                }
                Wait(RandomFixed(0.2, 0.7), c_timeGame);
            }

        }
    }

}

void libPEEP_gf_PrankMothershipVortex () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        UnitCreate(1, "Mothership", 0, 0, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetVisibility");
        UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, 200.0);
        Wait(2.0, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("Vortex", 0), libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint), c_orderQueueReplace);
    }

}

void libPEEP_gf_PrankBowBeforeMengsk () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPoint;
    int lv_intIndex;
    int lv_intRand;
    string lv_aActor;
    fixed lv_realAngle;
    int lv_intSteps;

    // Automatic Variable Declarations
    int auto957810FD_ae;
    const int auto957810FD_ai = 1;

    // Variable Initialization
    lv_intSteps = 30;

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        lv_aActor = "MengskStatueAloneDoodad";
        libNtve_gf_CreateActorAtPoint(lv_aActor, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.550000 3.000000");
        libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
        libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
        auto957810FD_ae = lv_intSteps;
        lv_intIndex = 1;
        for ( ; ( (auto957810FD_ai >= 0 && lv_intIndex <= auto957810FD_ae) || (auto957810FD_ai < 0 && lv_intIndex >= auto957810FD_ae) ) ; lv_intIndex += auto957810FD_ai ) {
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
                lv_realAngle += (360.0 / IntToFixed(lv_intSteps));
                lv_pPoint = PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 5.2, lv_realAngle);
                libNtve_gf_CreateActorAtPoint("FireMedium", lv_pPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.300000 1.000000");
                libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
                libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
                lv_pPoint = PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 6.0, (lv_realAngle + ((360.0 / IntToFixed(lv_intSteps)) / 2.0)));
                libNtve_gf_CreateActorAtPoint("FireMedium", lv_pPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.200000 1.000000");
                libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
                libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
                Wait(0.1, c_timeGame);
            }

        }
    }

}

void libPEEP_gf_PrankForestClearing () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;
    int lv_intIndex;
    int lv_intRand;
    string lv_aActor;
    fixed lv_realAngle;

    // Automatic Variable Declarations
    int autoC74D3FAA_ae;
    const int autoC74D3FAA_ai = 1;
    int auto3A4E85F3_ae;
    const int auto3A4E85F3_ai = 1;

    // Variable Initialization

    // Implementation
    autoC74D3FAA_ae = RandomInt(5, 8);
    lv_intIndex = 1;
    for ( ; ( (autoC74D3FAA_ai >= 0 && lv_intIndex <= autoC74D3FAA_ae) || (autoC74D3FAA_ai < 0 && lv_intIndex >= autoC74D3FAA_ae) ) ; lv_intIndex += autoC74D3FAA_ai ) {
        libNtve_gf_CreateActorAtPoint("FogMist", PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(8.0, 14.0), lv_realAngle));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 1.000000 5.000000");
        libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
        libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
        lv_realAngle += RandomFixed(30.0, 100.0);
    }
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        auto3A4E85F3_ae = RandomInt(100, 250);
        lv_intIndex = 1;
        for ( ; ( (auto3A4E85F3_ai >= 0 && lv_intIndex <= auto3A4E85F3_ae) || (auto3A4E85F3_ai < 0 && lv_intIndex >= auto3A4E85F3_ae) ) ; lv_intIndex += auto3A4E85F3_ai ) {
            lv_intRand = RandomInt(1, 7);
            if ((lv_intRand == 1)) {
                lv_aActor = "AgriaTree";
            }
            else if ((lv_intRand == 2)) {
                lv_aActor = "AiurTree";
            }
            else if ((lv_intRand == 3)) {
                lv_aActor = "BelShirTree";
            }
            else if ((lv_intRand == 4)) {
                lv_aActor = "HavenTree";
            }
            else if ((lv_intRand == 5)) {
                lv_aActor = "TarsonisTree";
            }
            else if ((lv_intRand == 6)) {
                lv_aActor = "TyphonTree";
            }
            else if ((lv_intRand == 7)) {
                lv_aActor = "WreckedMule";
            }
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
                libNtve_gf_CreateActorAtPoint(lv_aActor, PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(6.0, 20.0), libNtve_gf_RandomAngle()));
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.900000 2.000000");
                libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
                libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
            }

        }
    }

}

void libPEEP_gf_PrankRunZerglingRun () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intCount;
    unit lv_uTmpUnit;

    // Automatic Variable Declarations
    const int auto2652C3E5_ae = 1000;
    const int auto2652C3E5_ai = 1;
    int auto05B01BAC_ae;
    const int auto05B01BAC_ai = 1;
    int auto9D51CB51_ae;
    const int auto9D51CB51_ai = 1;
    const int auto77779A59_ae = 100;
    const int auto77779A59_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        UnitCreate(1, "Zergling", c_unitCreateIgnorePlacement, 1, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 270.0);
        UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        lv_intIndex2 = 1;
        for ( ; ( (auto2652C3E5_ai >= 0 && lv_intIndex2 <= auto2652C3E5_ae) || (auto2652C3E5_ai < 0 && lv_intIndex2 >= auto2652C3E5_ae) ) ; lv_intIndex2 += auto2652C3E5_ai ) {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(0.0, 6.0), libNtve_gf_RandomAngle())), c_orderQueueAddToEnd);
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 100000.0);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 100000.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity");
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity 0.700000 0.100000");
        lv_uTmpUnit = UnitLastCreated();
        auto05B01BAC_ae = RandomInt(4, 7);
        lv_intCount = 1;
        for ( ; ( (auto05B01BAC_ai >= 0 && lv_intCount <= auto05B01BAC_ae) || (auto05B01BAC_ai < 0 && lv_intCount >= auto05B01BAC_ae) ) ; lv_intCount += auto05B01BAC_ai ) {
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
                auto9D51CB51_ae = RandomInt(2, 4);
                lv_intIndex = 1;
                for ( ; ( (auto9D51CB51_ai >= 0 && lv_intIndex <= auto9D51CB51_ae) || (auto9D51CB51_ai < 0 && lv_intIndex >= auto9D51CB51_ae) ) ; lv_intIndex += auto9D51CB51_ai ) {
                    UnitCreate(1, "Interceptor", 0, 0, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, libNtve_gf_RandomAngle());
                    UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
                    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
                    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
                    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity");
                    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "SetOpacity 0.900000 1.000000");
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_uTmpUnit), c_orderQueueReplace);
                    lv_intIndex2 = 1;
                    for ( ; ( (auto77779A59_ai >= 0 && lv_intIndex2 <= auto77779A59_ae) || (auto77779A59_ai < 0 && lv_intIndex2 >= auto77779A59_ae) ) ; lv_intIndex2 += auto77779A59_ai ) {
                        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(0.0, 10.0), libNtve_gf_RandomAngle())), c_orderQueueAddToEnd);
                    }
                }
                Wait(RandomFixed(0.2, 1.0), c_timeGame);
            }

        }
    }

}

void libPEEP_gf_PrankDrinkMe () {
    // Variable Declarations
    int lv_intPlayer;
    unit lv_uFaceoffUnit;

    // Automatic Variable Declarations
    int auto5AB2D24C_ae;
    const int auto5AB2D24C_ai = 1;

    // Variable Initialization

    // Implementation
    auto5AB2D24C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto5AB2D24C_ai >= 0 && lv_intPlayer <= auto5AB2D24C_ae) || (auto5AB2D24C_ai < 0 && lv_intPlayer >= auto5AB2D24C_ae) ) ; lv_intPlayer += auto5AB2D24C_ai ) {
        lv_uFaceoffUnit = libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit;
        if ((lv_uFaceoffUnit != null)) {
            libPEEP_gv_recGlobals.lv_boolPrankLittleGuys = true;
            libPEEP_gf_PrankMakePlayersFaceoffUnitLittle(lv_intPlayer);
        }

    }
}

void libPEEP_gf_PrankMakePlayersFaceoffUnitLittle (int lp_intPlayer) {
    // Variable Declarations
    unit lv_uUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_uUnit = libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit;
    if ((lv_uUnit != null)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "SetScale 0.600000");
        ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "GlowStart");
    }

}

void libPEEP_gf_PrankMakePlayersFaceoffUnitNormal (int lp_intPlayer) {
    // Variable Declarations
    unit lv_uUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_uUnit = libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit;
    if ((lv_uUnit != null)) {
        ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "SetScale");
        ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "GlowStop");
    }

}

void libPEEP_gf_PrankFunhouse () {
    // Variable Declarations
    int lv_intPlayer;
    unit lv_uFaceoffUnit;

    // Automatic Variable Declarations
    int auto80B9D055_ae;
    const int auto80B9D055_ai = 1;

    // Variable Initialization

    // Implementation
    auto80B9D055_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto80B9D055_ai >= 0 && lv_intPlayer <= auto80B9D055_ae) || (auto80B9D055_ai < 0 && lv_intPlayer >= auto80B9D055_ae) ) ; lv_intPlayer += auto80B9D055_ai ) {
        lv_uFaceoffUnit = libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit;
        if ((lv_uFaceoffUnit != null)) {
            libPEEP_gv_recGlobals.lv_boolPrankFunhouse = true;
            libPEEP_gf_PrankMakePlayersFaceoffUnitStretch(lv_intPlayer);
        }

    }
}

void libPEEP_gf_PrankMakePlayersFaceoffUnitStretch (int lp_intPlayer) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intRand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_uUnit = libPEEP_gv_recPlayers[lp_intPlayer].lv_uFaceoffUnit;
    if ((lv_uUnit != null)) {
        lv_intRand = RandomInt(1, 5);
        if ((lv_intRand == 1)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "SetScale 0.900000,3.000000,0.300000");
        }
        else if ((lv_intRand == 2)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "SetScale 3.000000,1.700000,0.800000");
        }
        else if ((lv_intRand == 3)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "SetScale 0.500000,1.500000,2.000000");
        }
        else if ((lv_intRand == 4)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "SetScale 0.200000,3.000000,1.600000");
        }
        else if ((lv_intRand == 5)) {
            ActorSend(libNtve_gf_MainActorofUnit(lv_uUnit), "SetScale 1.700000,0.400000,2.300000");
        }
    }

}

void libPEEP_gf_PrankZenGarden () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;
    int lv_intIndex;
    int lv_intRand;
    string lv_aActor;
    fixed lv_realAngle;

    // Automatic Variable Declarations
    int auto04D40B6D_ae;
    const int auto04D40B6D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        auto04D40B6D_ae = RandomInt(350, 600);
        lv_intIndex = 1;
        for ( ; ( (auto04D40B6D_ai >= 0 && lv_intIndex <= auto04D40B6D_ae) || (auto04D40B6D_ai < 0 && lv_intIndex >= auto04D40B6D_ae) ) ; lv_intIndex += auto04D40B6D_ai ) {
            lv_intRand = RandomInt(1, 30);
            if (((lv_intRand >= 1) && (lv_intRand <= 5))) {
                lv_aActor = "BelShirFoliage";
            }
            else if (((lv_intRand >= 6) && (lv_intRand <= 10))) {
                lv_aActor = "AgriaFoliage";
            }
            else if (((lv_intRand >= 11) && (lv_intRand <= 15))) {
                lv_aActor = "RedstonePlant";
            }
            else if (((lv_intRand >= 16) && (lv_intRand <= 20))) {
                lv_aActor = "AiurFoliage";
            }
            else if (((lv_intRand >= 21) && (lv_intRand <= 27))) {
                lv_aActor = "HavenFoliage";
            }
            else if (((lv_intRand >= 28) && (lv_intRand <= 29))) {
                lv_aActor = "FogGrey";
            }
            else if ((lv_intRand == 30)) {
                lv_aActor = "Waterfall";
            }
            libNtve_gf_CreateActorAtPoint(lv_aActor, PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(5.0, 20.0), libNtve_gf_RandomAngle()));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.900000 1.000000");
            libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
            libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
        }
    }

}

void libPEEP_gf_PrankGameShow () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPosition;
    int lv_intIndex;
    int lv_intRand;
    string lv_aActor;
    fixed lv_realAngle;
    int lv_intRound;

    // Automatic Variable Declarations
    int auto328394B7_ae;
    const int auto328394B7_ai = 1;
    int autoD7DDF271_ae;
    const int autoD7DDF271_ai = 1;
    const int auto89EB8A0A_ae = 35;
    const int auto89EB8A0A_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        UnitCreate(1, "ShapeCashLarge", 0, 0, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, libNtve_gf_RandomAngle());
        UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
        auto328394B7_ae = RandomInt(10, 20);
        lv_intIndex = 1;
        for ( ; ( (auto328394B7_ai >= 0 && lv_intIndex <= auto328394B7_ae) || (auto328394B7_ai < 0 && lv_intIndex >= auto328394B7_ae) ) ; lv_intIndex += auto328394B7_ai ) {
            UnitGroupAdd(libPEEP_gv_recGlobals.lv_ugPrankUnitGroup, UnitLastCreated());
        }
        while ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && (libPEEP_gv_recGameState.lv_boolPrankPulled == true)) {
            autoD7DDF271_ae = libPEEP_gv_recGlobals.lv_intNumPrankActors;
            lv_intIndex = 1;
            for ( ; ( (autoD7DDF271_ai >= 0 && lv_intIndex <= autoD7DDF271_ae) || (autoD7DDF271_ai < 0 && lv_intIndex >= autoD7DDF271_ae) ) ; lv_intIndex += autoD7DDF271_ai ) {
                ActorScopeKill(ActorScopeFromActor(libPEEP_gv_recGlobals.lv_aPrankActorList[lv_intIndex]));
            }
            libPEEP_gv_recGlobals.lv_intNumPrankActors = 0;
            lv_intIndex = 1;
            for ( ; ( (auto89EB8A0A_ai >= 0 && lv_intIndex <= auto89EB8A0A_ae) || (auto89EB8A0A_ai < 0 && lv_intIndex >= auto89EB8A0A_ae) ) ; lv_intIndex += auto89EB8A0A_ai ) {
                lv_intRand = RandomInt(1, 28);
                if (((lv_intRand >= 1) && (lv_intRand <= 4))) {
                    lv_aActor = "LightOmniRedLarge";
                }
                else if (((lv_intRand >= 5) && (lv_intRand <= 13))) {
                    lv_aActor = "LightOmniRed";
                }
                else if (((lv_intRand >= 14) && (lv_intRand <= 17))) {
                    lv_aActor = "LightOmniBlue";
                }
                else if (((lv_intRand >= 18) && (lv_intRand <= 20))) {
                    lv_aActor = "LightOmniGreen";
                }
                else if (((lv_intRand >= 21) && (lv_intRand <= 23))) {
                    lv_aActor = "LightOmniCyan";
                }
                else if (((lv_intRand >= 24) && (lv_intRand <= 25))) {
                    lv_aActor = "LightOmniOrange";
                }
                else if ((lv_intRand == 26)) {
                    lv_aActor = "LightOmniYellowLarge";
                }
                else if ((lv_intRand == 27)) {
                    lv_aActor = "LightOmniPurpleLarge";
                }
                else if ((lv_intRand == 28)) {
                    lv_aActor = "LightOmniOrangeLarge";
                }
                libNtve_gf_CreateActorAtPoint(lv_aActor, PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(0.0, 10.0), libNtve_gf_RandomAngle()));
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 1.000000 3.000000");
                libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
                libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
            }
            Wait(0.8, c_timeGame);
        }
    }

}

void libPEEP_gf_PrankCrystalAltar () {
    // Variable Declarations
    int lv_intPlayer;
    point lv_pPoint;
    int lv_intIndex;
    int lv_intRand;
    string lv_aActor;
    fixed lv_realAngle;
    int lv_intSteps;

    // Automatic Variable Declarations
    int auto6AC91E8B_ae;
    const int auto6AC91E8B_ai = 1;

    // Variable Initialization
    lv_intSteps = 12;

    // Implementation
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        auto6AC91E8B_ae = lv_intSteps;
        lv_intIndex = 1;
        for ( ; ( (auto6AC91E8B_ai >= 0 && lv_intIndex <= auto6AC91E8B_ae) || (auto6AC91E8B_ai < 0 && lv_intIndex >= auto6AC91E8B_ae) ) ; lv_intIndex += auto6AC91E8B_ai ) {
            if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
                lv_realAngle += (360.0 / IntToFixed(lv_intSteps));
                lv_pPoint = PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 5.8, lv_realAngle);
                libNtve_gf_CreateActorAtPoint("ShakurasRockColumn", lv_pPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.750000 1.000000");
                libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
                libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
                libNtve_gf_CreateActorAtPoint("FogBlue", lv_pPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.750000 1.000000");
                libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
                libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
            }

        }
        lv_intRand = RandomInt(1, 2);
        if (((lv_intRand >= 1) && (lv_intRand <= 1))) {
            lv_aActor = "CharCrystal";
        }
        else if (((lv_intRand >= 2) && (lv_intRand <= 2))) {
            lv_aActor = "CharCrystalLarge";
        }
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Protoss, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
        libNtve_gf_CreateActorAtPoint(lv_aActor, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.550000 1.000000");
        libPEEP_gv_recGlobals.lv_intNumPrankActors += 1;
        libPEEP_gv_recGlobals.lv_aPrankActorList[libPEEP_gv_recGlobals.lv_intNumPrankActors] = libNtve_gf_ActorLastCreated();
    }

}

void libPEEP_gf_GhostCloak (unit lp_uUnit) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetPropertyFixed(lp_uUnit, c_unitPropEnergy, 100.0);
    UnitIssueOrder(lp_uUnit, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
}

void libPEEP_gf_MedivacDropMarines (unit lp_uUnit) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    int lv_intRand;
    int lv_intIndex;
    string lv_uUnitType;
    int lv_intIndex2;

    // Automatic Variable Declarations
    const int auto22AF753E_ae = 4;
    const int auto22AF753E_ai = 1;
    const int autoC2C39A06_ae = 100;
    const int autoC2C39A06_ai = 1;

    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();

    // Implementation
    lv_intIndex = 1;
    for ( ; ( (auto22AF753E_ai >= 0 && lv_intIndex <= auto22AF753E_ae) || (auto22AF753E_ai < 0 && lv_intIndex >= auto22AF753E_ae) ) ; lv_intIndex += auto22AF753E_ai ) {
        lv_intRand = RandomInt(0, 3);
        if ((lv_intRand == 1)) {
            lv_uUnitType = "Marauder";
        }
        else {
            lv_uUnitType = "Marine";
        }
        UnitCreate(1, lv_uUnitType, 0, UnitGetOwner(lp_uUnit), UnitGetPosition(lp_uUnit), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint), c_orderQueueReplace);
        lv_intIndex2 = 1;
        for ( ; ( (autoC2C39A06_ai >= 0 && lv_intIndex2 <= autoC2C39A06_ae) || (autoC2C39A06_ai < 0 && lv_intIndex2 >= autoC2C39A06_ae) ) ; lv_intIndex2 += autoC2C39A06_ai ) {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(0.0, 6.0), libNtve_gf_RandomAngle())), c_orderQueueAddToEnd);
        }
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    }
}

void libPEEP_gf_PhoenixLift (unit lp_uUnit) {
    // Variable Declarations
    unit lv_uEnemyUnit;

    // Automatic Variable Declarations
    playergroup auto6D2A64A7_g;
    int auto6D2A64A7_var;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(lp_uUnit, c_unitPropEnergy, 1000.0);
    auto6D2A64A7_g = PlayerGroupAll();
    auto6D2A64A7_var = -1;
    while (true) {
        auto6D2A64A7_var = PlayerGroupNextPlayer(auto6D2A64A7_g, auto6D2A64A7_var);
        if (auto6D2A64A7_var < 0) { break; }
        if (((UnitGetOwner(lp_uUnit) != auto6D2A64A7_var) && (libPEEP_gv_recPlayers[auto6D2A64A7_var].lv_boolSelectedForMatch == true))) {
            lv_uEnemyUnit = libPEEP_gv_recPlayers[auto6D2A64A7_var].lv_uFaceoffUnit;
            UnitSetOwner(lv_uEnemyUnit, auto6D2A64A7_var, false);
            UnitIssueOrder(lp_uUnit, OrderTargetingUnit(AbilityCommand("GravitonBeam", 0), lv_uEnemyUnit), c_orderQueueReplace);
            UnitIssueOrder(lp_uUnit, OrderTargetingPoint(AbilityCommand("attack", 0), libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint), c_orderQueueAddToEnd);
            break;
        }

    }
}

void libPEEP_gf_OracleAttack (unit lp_uUnit) {
    // Variable Declarations
    unit lv_uEnemyUnit;

    // Automatic Variable Declarations
    playergroup auto06D9BF8E_g;
    int auto06D9BF8E_var;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(lp_uUnit, c_unitPropEnergy, 1000.0);
    UnitIssueOrder(lp_uUnit, Order(AbilityCommand("OracleWeapon", 0)), c_orderQueueReplace);
    auto06D9BF8E_g = PlayerGroupAll();
    auto06D9BF8E_var = -1;
    while (true) {
        auto06D9BF8E_var = PlayerGroupNextPlayer(auto06D9BF8E_g, auto06D9BF8E_var);
        if (auto06D9BF8E_var < 0) { break; }
        if (((UnitGetOwner(lp_uUnit) != auto06D9BF8E_var) && (libPEEP_gv_recPlayers[auto06D9BF8E_var].lv_boolSelectedForMatch == true))) {
            lv_uEnemyUnit = libPEEP_gv_recPlayers[auto06D9BF8E_var].lv_uFaceoffUnit;
            UnitSetOwner(lv_uEnemyUnit, auto06D9BF8E_var, false);
            UnitIssueOrder(lp_uUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_uEnemyUnit), c_orderQueueReplace);
            break;
        }

    }
}

void libPEEP_gf_CreateFaceoff () {
    // Variable Declarations
    int lv_intObserverUnitTypeIndex;
    int lv_intTeam;
    int lv_intPlayer;
    unit lv_uUnit;

    // Automatic Variable Declarations
    int autoEDD371F8_ae;
    const int autoEDD371F8_ai = 1;

    // Variable Initialization

    // Implementation
    autoEDD371F8_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (autoEDD371F8_ai >= 0 && lv_intTeam <= autoEDD371F8_ae) || (autoEDD371F8_ai < 0 && lv_intTeam >= autoEDD371F8_ae) ) ; lv_intTeam += autoEDD371F8_ai ) {
        TextTagCreate(StringToText(""), 28, libNtve_gf_CenterOfUnitGroup(libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup), 1.8, true, false, PlayerGroupAll());
        libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag = TextTagLastCreated();
        TextTagSetTextAlignment(TextTagLastCreated(), c_alignCenter, c_alignCenter);
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagCreate(StringToText(""), 28, libNtve_gf_CenterOfUnitGroup(libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup), 1.0, true, false, PlayerGroupAll());
        libPEEP_gv_recTeams[lv_intTeam].lv_ttFaceoffTextTag = TextTagLastCreated();
        TextTagSetTextAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
        TextTagSetFontSize(TextTagLastCreated(), 32);
    }
}

void libPEEP_gf_InitializeFaceoff () {
    // Variable Declarations
    int lv_intObserverUnitTypeIndex;
    int lv_intTeam;
    int lv_intPlayer;
    unit lv_uUnit;
    int lv_intTmpTeam;
    int lv_intRand;
    int lv_intIndex;
    fixed lv_realVolume;

    // Automatic Variable Declarations
    unitgroup auto07AAA47E_g;
    int auto07AAA47E_u;
    unit auto07AAA47E_var;
    int autoA6882FE3_ae;
    const int autoA6882FE3_ai = 1;
    int auto745C283B_ae;
    const int auto745C283B_ai = 1;
    int autoA05143FC_ae;
    const int autoA05143FC_ai = 1;
    const int autoF01A1204_ae = 15;
    const int autoF01A1204_ai = 1;
    int auto6BCAADEC_ae;
    const int auto6BCAADEC_ai = 1;
    const int autoA31822B7_ae = 14;
    const int autoA31822B7_ai = 1;
    unitgroup auto64641857_g;
    int auto64641857_u;
    unit auto64641857_var;
    int auto102DC8C8_ae;
    const int auto102DC8C8_ai = 1;
    int autoDDF92384_ae;
    const int autoDDF92384_ai = 1;
    int auto600F803F_ae;
    const int auto600F803F_ai = 1;

    // Variable Initialization
    lv_realVolume = 70.0;

    // Implementation
    libPEEP_gf_DestroyAllFloatingIcons();
    CameraSetBounds(PlayerGroupAll(), RegionEntireMap(), true);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diInfoPaneCargoBlockerButton, PlayerGroupAll(), false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "PeepModeSoundtrack", 0, c_soundtrackIndexAny, false);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTeamNewbButton, PlayerGroupAll(), true);
    libPEEP_gf_KickUnregisteredPlayers();
    auto07AAA47E_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto07AAA47E_u = UnitGroupCount(auto07AAA47E_g, c_unitCountAll);
    for (;; auto07AAA47E_u -= 1) {
        auto07AAA47E_var = UnitGroupUnitFromEnd(auto07AAA47E_g, auto07AAA47E_u);
        if (auto07AAA47E_var == null) { break; }
        UnitSetState(auto07AAA47E_var, c_unitStateSelectable, false);
        UnitSetState(auto07AAA47E_var, c_unitStateHighlightable, false);
        UnitSetState(auto07AAA47E_var, c_unitStateCursorable, false);
    }
    libPEEP_gf_EndInitScreen();
    libPEEP_gf_ClearAllPrankEntities();
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 1.0);
    DialogControlRemoveAllItems(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll());
    DialogControlAddItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), StringExternal("Param/Value/lib_PEEP_780043DE"));
    autoA6882FE3_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoA6882FE3_ai >= 0 && lv_intPlayer <= autoA6882FE3_ae) || (autoA6882FE3_ai < 0 && lv_intPlayer >= autoA6882FE3_ae) ) ; lv_intPlayer += autoA6882FE3_ai ) {
        MeleeSetOption(lv_intPlayer, c_meleeOptionReveal, false);
        VisRevealArea(lv_intPlayer, RegionCircle(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 20.0), 0.1, false);
        PlayerScoreValueEnable(lv_intPlayer, "APM", false);
        libNtve_gf_SetDialogItemColor(libPEEP_gv_recUI.lv_diMinimapClock, libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor, PlayerGroupSingle(lv_intPlayer));
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), 1);
    }
    libPEEP_gv_recGlobals.lv_intCameraYawCounter = 0;
    libPEEP_gv_recGameState.lv_intCurrentGameState = 1;
    libPEEP_gv_recGameState.lv_boolLoadingScreenFired = false;
    auto745C283B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto745C283B_ai >= 0 && lv_intTeam <= auto745C283B_ae) || (auto745C283B_ai < 0 && lv_intTeam >= auto745C283B_ae) ) ; lv_intTeam += auto745C283B_ai ) {
        TextTagShow(libPEEP_gv_recTeams[lv_intTeam].lv_ttFaceoffTextTag, PlayerGroupAll(), true);
        TextTagShow(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, PlayerGroupAll(), true);
    }
    GameSetSpeedValue(c_gameSpeedNormal);
    UISetCommandAllowed(PlayerGroupAll(), c_uiCommandAllowPings, false);
    libPEEP_gf_TempExitCinematicModeforAllPlayers();
    DialogSetVisible(libPEEP_gv_recUI.lv_dCinematicDialog, PlayerGroupAll(), false);
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dClockReplacement, PlayerGroupAll(), false);
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diAutoCamAlertLabel, PlayerGroupAll(), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dAnnouncementDialog, PlayerGroupAll(), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dMinimapDialog, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMinimapClock, StringToText(""), PlayerGroupAll());
    libPEEP_gv_recGameState.lv_intBettingRound = 0;
    libPEEP_gf_ResetResourcePanelsforFaceoff();
    libPEEP_gf_DisableBettingControls();
    libPEEP_gf_ClearNamePanel();
    DialogSetVisible(libPEEP_gv_recUI.lv_dNamePanel2Dialog, PlayerGroupAll(), false);
    autoA05143FC_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 0;
    for ( ; ( (autoA05143FC_ai >= 0 && lv_intPlayer <= autoA05143FC_ae) || (autoA05143FC_ai < 0 && lv_intPlayer >= autoA05143FC_ae) ) ; lv_intPlayer += autoA05143FC_ai ) {
        PlayerGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_pgObserversFollowingMe);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lv_intPlayer), true);
        DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogReplacement, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogCinematic, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gf_HideFairMessageLogButtonforPlayer(lv_intPlayer);
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCinematicModeEngaged == false)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dObserverDialog, PlayerGroupSingle(lv_intPlayer), true);
            libPEEP_gf_ShowNavButtonsforPlayer(lv_intPlayer);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedTeams = true;
        }

        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == false)) {
            libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, true);
            DialogSetVisible(libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog, PlayerGroupSingle(lv_intPlayer), true);
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dCancelTeamDialog, PlayerGroupSingle(lv_intPlayer), true);
            }

        }

        libNtve_gf_SetAlliance(0, lv_intPlayer, libNtve_ge_AllianceSetting_Neutral);
    }
    lv_intPlayer = 0;
    for ( ; ( (autoF01A1204_ai >= 0 && lv_intPlayer <= autoF01A1204_ae) || (autoF01A1204_ai < 0 && lv_intPlayer >= autoF01A1204_ae) ) ; lv_intPlayer += autoF01A1204_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "Charge", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "NeuralParasite", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "BlinkTech", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "Stimpack", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "StrikeCannons", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "HighCapacityBarrels", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "haltech", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "AnionPulseCrystals", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "zerglingmovementspeed", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "zerglingattackspeed", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "CentrificalHooks", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "Burrow", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "hydraliskspeed", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "ExtendedThermalLance", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "PunisherGrenades", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "ShieldWall", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "ReaperSpeed", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "GlialReconstitution", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "OrganicCarapace", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "AnabolicSynthesis", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "ChitinousPlating", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "haltech", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "PersonalCloaking", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "PsiStormTech", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "BattlecruiserBehemothReactor", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "BattlecruiserEnableSpecializations", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, "BattlecruiserEnableSpecializations", 1);
    }
    lv_intRand = RandomInt(1, libPEEP_gv_recGlobals.lv_intNumFaceoffPoints);
    libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint = libPEEP_gv_recGlobals.lv_pFaceoffPoints[lv_intRand];
    libPEEP_gv_recGlobals.lv_realCameraYaw = libNtve_gf_RandomAngle();
    libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset = ModF((libPEEP_gv_recGlobals.lv_realCameraYaw + 90.0), 360.0);
    TimerRestart(libPEEP_gv_recGlobals.lv_timerCameraYaw);
    libPEEP_gf_InitializeWeather();
    if ((libPEEP_gv_recGlobals.lv_boolFaceoffPointGetsBeacon[lv_intRand] == true)) {
        UnitCreate(1, "CustomDecalMuta", 0, 1, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 270.0);
        libPEEP_gv_recGlobals.lv_uFaceoffAnchor = UnitLastCreated();
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        libPEEP_gf_SetDecalTexture(UnitLastCreated(), 500);
        libPEEP_gf_CreateFaceoffDecals();
    }
    else {
        libPEEP_gv_recGlobals.lv_uFaceoffAnchor = null;
    }
    lv_intRand = RandomInt(0, 1);
    if ((lv_intRand == 1)) {
        libPEEP_gv_recGlobals.lv_boolFaceoffClockwise = true;
    }
    else {
        libPEEP_gv_recGlobals.lv_boolFaceoffClockwise = false;
    }
    if ((libPEEP_gv_recGameState.lv_intNumMatchesPlayed > 0)) {
        lv_intObserverUnitTypeIndex = RandomInt(0, libPEEP_gv_recGlobals.lv_intFaceoffObserverUnitTypeCount);
    }
    else {
        lv_intObserverUnitTypeIndex = 0;
    }
    UnitCreate(1, "Medivac", 0, 0, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 270.0);
    libPEEP_gv_recGlobals.lv_uObserver = UnitLastCreated();
    Wait(libPEEP_gv_recGlobals.lv_realWaitTime, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(libPEEP_gv_recGlobals.lv_uObserver), "SetVisibility");
    UnitSetState(libPEEP_gv_recGlobals.lv_uObserver, c_unitStateSelectable, false);
    UnitSetState(libPEEP_gv_recGlobals.lv_uObserver, c_unitStateHighlightable, false);
    UnitSetState(libPEEP_gv_recGlobals.lv_uObserver, c_unitStateStatusBar, false);
    UnitSetState(libPEEP_gv_recGlobals.lv_uObserver, c_unitStateCursorable, false);
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchLogMain, StringToText(""), PlayerGroupAll());
    auto6BCAADEC_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto6BCAADEC_ai >= 0 && lv_intPlayer <= auto6BCAADEC_ae) || (auto6BCAADEC_ai < 0 && lv_intPlayer >= auto6BCAADEC_ae) ) ; lv_intPlayer += auto6BCAADEC_ai ) {
        if (((libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE > 1) && ((libPEEP_gv_recGameState.lv_intGameStyle != 2) || (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true)))) {
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, PlayerGroupAll(), true);
        }

        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        PlayerSetState(lv_intPlayer, c_playerStateDisplayInLeaderPanel, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lv_intPlayer), false);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedBetting = false;
        libNtve_gf_ShareVisionofUnit(libPEEP_gv_recGlobals.lv_uObserver, true, lv_intPlayer);
        lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam;
        if ((lv_intTeam > 0)) {
            libPEEP_gf_RemovePlayerfromTeam(lv_intPlayer, false);
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers >= libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE)) {
                lv_intTeam += 1;
                if ((lv_intTeam >= libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX)) {
                    lv_intTeam = 1;
                }

            }

            libPEEP_gf_AddPlayertoTeam(lv_intPlayer, lv_intTeam, true);
        }

    }
    lv_intPlayer = 1;
    for ( ; ( (autoA31822B7_ai >= 0 && lv_intPlayer <= autoA31822B7_ae) || (autoA31822B7_ai < 0 && lv_intPlayer >= autoA31822B7_ae) ) ; lv_intPlayer += autoA31822B7_ai ) {
        PlayerSetState(lv_intPlayer, c_playerStateDisplayInLeaderPanel, false);
    }
    CinematicFade(true, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 100.0, false);
    libPEEP_gf_InitializeFaceoffCamera();
    TimerStart(libPEEP_gv_recGlobals.lv_timerFaceoffPointOffsetChange, 7.0, true, c_timeReal);
    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, false, PlayerGroupAll());
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, PlayerGroupAll(), false);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupAll(), true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupAll(), true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diZoomIn, PlayerGroupAll(), true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diZoomOut, PlayerGroupAll(), true);
    libPEEP_gf_CreateDummyPlayers();
    auto64641857_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
    auto64641857_u = UnitGroupCount(auto64641857_g, c_unitCountAll);
    for (;; auto64641857_u -= 1) {
        auto64641857_var = UnitGroupUnitFromEnd(auto64641857_g, auto64641857_u);
        if (auto64641857_var == null) { break; }
        auto102DC8C8_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto102DC8C8_ai >= 0 && lv_intPlayer <= auto102DC8C8_ae) || (auto102DC8C8_ai < 0 && lv_intPlayer >= auto102DC8C8_ae) ) ; lv_intPlayer += auto102DC8C8_ai ) {
            libNtve_gf_ShareVisionofUnit(auto64641857_var, false, lv_intPlayer);
        }
    }
    libPEEP_gf_CalculateTeamInfo();
    autoDDF92384_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoDDF92384_ai >= 0 && lv_intPlayer <= autoDDF92384_ae) || (autoDDF92384_ai < 0 && lv_intPlayer >= autoDDF92384_ae) ) ; lv_intPlayer += autoDDF92384_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false)) {
            libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intPlayer);
        }

    }
    libPEEP_gf_RefreshLeaderboardforAllPlayers();
    libPEEP_gf_RefreshDashboardsforAllPlayers();
    auto600F803F_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto600F803F_ai >= 0 && lv_intPlayer <= auto600F803F_ae) || (auto600F803F_ai < 0 && lv_intPlayer >= auto600F803F_ae) ) ; lv_intPlayer += auto600F803F_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == false)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dDashboardDialog, PlayerGroupAll(), true);
        }

    }
    DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupAll(), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupAll(), false);
    libPEEP_gf_RefreshFaceoff();
    DialogSetVisible(libPEEP_gv_recUI.lv_dCinematicDialog, PlayerGroupAll(), false);
}

void libPEEP_gf_CreateDummyPlayers () {
    // Variable Declarations
    int lv_intTeam;
    int lv_intPlayer;
    unit lv_uUnit;

    // Automatic Variable Declarations
    const int autoA6CE098A_ae = 3;
    const int autoA6CE098A_ai = 1;
    int autoF514F4D8_ae;
    const int autoF514F4D8_ai = 1;
    unitgroup autoB8CF641F_g;
    int autoB8CF641F_u;
    int autoAEA3F7EA_ae;
    const int autoAEA3F7EA_ai = 1;
    int autoB3244BBA_ae;
    const int autoB3244BBA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGlobals.lv_boolDebugMode == true)) {
        if ((libPEEP_gv_recGameState.lv_intNumMatchesPlayed > 0)) {
            lv_intPlayer = 2;
            for ( ; ( (autoA6CE098A_ai >= 0 && lv_intPlayer <= autoA6CE098A_ae) || (autoA6CE098A_ai < 0 && lv_intPlayer >= autoA6CE098A_ae) ) ; lv_intPlayer += autoA6CE098A_ai ) {
                if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
                    libPEEP_gf_MakeDummy(lv_intPlayer, lv_intPlayer, false);
                }

            }
        }
        else {
            libPEEP_gv_recPlayers[2].lv_boolWinnerToken = true;
            libPEEP_gv_recPlayers[2].lv_intWins = 1;
            libPEEP_gv_recPlayers[2].lv_intMatchesPlayedThisGame = 9;
            libPEEP_gv_recPlayers[3].lv_intMatchesPlayedThisGame = 2;
            libPEEP_gv_recPlayers[4].lv_intMatchesPlayedThisGame = 2;
            libPEEP_gv_recPlayers[2].lv_intBankRace = 2;
            libPEEP_gv_recPlayers[3].lv_intBankRace = 1;
            libPEEP_gv_recPlayers[4].lv_intBankRace = 1;
            if ((libPEEP_gv_recPlayers[2].lv_boolInactive == false)) {
                libPEEP_gf_MakeDummy(2, 2, true);
            }

            if ((libPEEP_gv_recPlayers[3].lv_boolInactive == false)) {
                libPEEP_gf_MakeDummy(3, 3, true);
            }

            if ((libPEEP_gv_recPlayers[4].lv_boolInactive == false)) {
                libPEEP_gf_MakeDummy(4, 4, true);
            }

        }
        autoF514F4D8_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
        lv_intTeam = 1;
        for ( ; ( (autoF514F4D8_ai >= 0 && lv_intTeam <= autoF514F4D8_ae) || (autoF514F4D8_ai < 0 && lv_intTeam >= autoF514F4D8_ae) ) ; lv_intTeam += autoF514F4D8_ai ) {
            autoB8CF641F_g = libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup;
            autoB8CF641F_u = UnitGroupCount(autoB8CF641F_g, c_unitCountAll);
            for (;; autoB8CF641F_u -= 1) {
                lv_uUnit = UnitGroupUnitFromEnd(autoB8CF641F_g, autoB8CF641F_u);
                if (lv_uUnit == null) { break; }
                autoAEA3F7EA_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                lv_intPlayer = 1;
                for ( ; ( (autoAEA3F7EA_ai >= 0 && lv_intPlayer <= autoAEA3F7EA_ae) || (autoAEA3F7EA_ai < 0 && lv_intPlayer >= autoAEA3F7EA_ae) ) ; lv_intPlayer += autoAEA3F7EA_ai ) {
                    libNtve_gf_ShareVisionofUnit(lv_uUnit, true, lv_intPlayer);
                }
            }
        }
    }

    libPEEP_gf_CalculateTeamInfo();
    autoB3244BBA_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoB3244BBA_ai >= 0 && lv_intPlayer <= autoB3244BBA_ae) || (autoB3244BBA_ai < 0 && lv_intPlayer >= autoB3244BBA_ae) ) ; lv_intPlayer += autoB3244BBA_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false)) {
            libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intPlayer);
        }

    }
}

void libPEEP_gf_CalculateFaceoffPoints () {
    // Variable Declarations
    int lv_intIndex;
    fixed lv_realDegreeStep;
    fixed lv_realDegrees;
    int lv_intTeam;

    // Automatic Variable Declarations
    int autoEB0A87E2_ae;
    const int autoEB0A87E2_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recGlobals.lv_intNumFaceoffTeams > 1)) {
        lv_realDegreeStep = (360.0 / IntToFixed(libPEEP_gv_recGlobals.lv_intNumFaceoffTeams));
    }
    else {
        lv_realDegreeStep = 0.0;
    }
    lv_realDegrees = libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset;
    autoEB0A87E2_ae = libPEEP_gv_recGlobals.lv_intNumFaceoffTeams;
    lv_intIndex = 1;
    for ( ; ( (autoEB0A87E2_ai >= 0 && lv_intIndex <= autoEB0A87E2_ae) || (autoEB0A87E2_ai < 0 && lv_intIndex >= autoEB0A87E2_ae) ) ; lv_intIndex += autoEB0A87E2_ai ) {
        lv_intTeam = libPEEP_gv_recGlobals.lv_intFaceoffTeams[lv_intIndex];
        libPEEP_gv_recTeams[lv_intTeam].lv_realFaceoffAngle = ModF(lv_realDegrees, 360.0);
        libPEEP_gv_recTeams[lv_intTeam].lv_pFaceoffPoint = PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 4.0, lv_realDegrees);
        lv_realDegrees += lv_realDegreeStep;
    }
}

void libPEEP_gf_StartMinibattle () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;
    unit lv_uUnit;
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoE77E1E07_ae;
    const int autoE77E1E07_ai = 1;
    const int auto34D69FCD_ae = 100;
    const int auto34D69FCD_ai = 1;

    // Variable Initialization

    // Implementation
    TimerStart(libPEEP_gv_recGlobals.lv_timerFaceoffTransitionEnd, 4.0, false, c_timeReal);
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, StringToText(""), PlayerGroupAll());
    libPEEP_gf_SetTeamAlliancesVision();
    autoE77E1E07_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoE77E1E07_ai >= 0 && lv_intPlayer <= autoE77E1E07_ae) || (autoE77E1E07_ai < 0 && lv_intPlayer >= autoE77E1E07_ae) ) ; lv_intPlayer += autoE77E1E07_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit != null)) {
            lv_uUnit = libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit;
            UnitSetOwner(lv_uUnit, lv_intPlayer, true);
            UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("attack", 0), libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint), c_orderQueueReplace);
            if ((UnitGetType(lv_uUnit) != "Changeling")) {
                lv_intIndex = 1;
                for ( ; ( (auto34D69FCD_ai >= 0 && lv_intIndex <= auto34D69FCD_ae) || (auto34D69FCD_ai < 0 && lv_intIndex >= auto34D69FCD_ae) ) ; lv_intIndex += auto34D69FCD_ai ) {
                    UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 4.0, libNtve_gf_RandomAngle())), c_orderQueueAddToEnd);
                }
            }

            if ((UnitGetType(lv_uUnit) == "Medivac")) {
                libPEEP_gf_MedivacDropMarines(lv_uUnit);
            }
            else if ((UnitGetType(lv_uUnit) == "Ghost")) {
                libPEEP_gf_GhostCloak(lv_uUnit);
            }
            else if ((UnitGetType(lv_uUnit) == "Phoenix")) {
                libPEEP_gf_PhoenixLift(lv_uUnit);
            }
            else if ((UnitGetType(lv_uUnit) == "Oracle")) {
                libPEEP_gf_OracleAttack(lv_uUnit);
            }
            else if ((UnitGetType(lv_uUnit) == "WidowMine")) {
                UnitIssueOrder(lv_uUnit, Order(AbilityCommand("WidowMineBurrow", 0)), c_orderQueueReplace);
            }
            else if ((UnitGetType(lv_uUnit) == "SiegeTank")) {
                UnitIssueOrder(lv_uUnit, Order(AbilityCommand("SiegeMode", 0)), c_orderQueueReplace);
            }
        }

    }
}

void libPEEP_gf_InitializeWeather () {
    // Variable Declarations
    int lv_intRand;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(1, 2) == 1)) {
        lv_intRand = RandomInt(1, 10);
        if (((lv_intRand >= 1) && (lv_intRand <= 5))) {
            libNtve_gf_CreateActorAtPoint("RainSprinkle", libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
        }
        else {
            if ((lv_intRand == 6)) {
                libNtve_gf_CreateActorAtPoint("WindEmitterBrownMedium", libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
            }
            else {
                if ((lv_intRand == 7)) {
                    libNtve_gf_CreateActorAtPoint("WindEmitterBrownSmall", libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
                }
                else {
                    if ((lv_intRand == 8)) {
                        libNtve_gf_CreateActorAtPoint("WindEmitterMedium", libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
                    }
                    else {
                        if ((lv_intRand == 9)) {
                            libNtve_gf_CreateActorAtPoint("WindRough", libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
                        }
                        else {
                            if ((lv_intRand == 10)) {
                                libNtve_gf_CreateActorAtPoint("CharAshWeather", libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
                            }

                        }
                    }
                }
            }
        }
    }

    libPEEP_gv_recGlobals.lv_aFaceoffWeatherActer = libNtve_gf_ActorLastCreated();
}

void libPEEP_gf_InitializeFaceoffCamera () {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoCE3C1C74_ae;
    const int autoCE3C1C74_ai = 1;
    int autoD846A888_ae;
    const int autoD846A888_ai = 1;

    // Variable Initialization

    // Implementation
    autoCE3C1C74_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoCE3C1C74_ai >= 0 && lv_intPlayer <= autoCE3C1C74_ae) || (autoCE3C1C74_ai < 0 && lv_intPlayer >= autoCE3C1C74_ae) ) ; lv_intPlayer += autoCE3C1C74_ai ) {
        CameraLockInput(lv_intPlayer, true);
        CameraPan(lv_intPlayer, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 0.0, -1, 10, false);
        CameraSetValue(lv_intPlayer, c_cameraValueFieldOfView, 27.7996, 0.0, -1, 10);
        CameraSetValue(lv_intPlayer, c_cameraValueDepthOfField, 0.0, 0.0, -1, 10);
        CameraSetValue(lv_intPlayer, c_cameraValuePitch, 56.0, 0.0, -1, 10);
        CameraSetValue(lv_intPlayer, c_cameraValueDistance, 34.0, 0.0, -1, 10);
        CameraSetValue(lv_intPlayer, c_cameraValueYaw, RandomFixed(0.0, 360.0), 0.0, -1, 10);
    }
    Wait(0.1, c_timeGame);
    autoD846A888_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoD846A888_ai >= 0 && lv_intPlayer <= autoD846A888_ae) || (autoD846A888_ai < 0 && lv_intPlayer >= autoD846A888_ae) ) ; lv_intPlayer += autoD846A888_ai ) {
        CameraSetValue(lv_intPlayer, c_cameraValuePitch, 25.0, 2.0, -1, 10);
        libPEEP_gf_ApplyZoomtoPlayerCam(lv_intPlayer, 2.0);
    }
}

void libPEEP_gf_RefreshFaceoff () {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intTeam;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto5B0D6329_ae;
    const int auto5B0D6329_ai = 1;
    unitgroup auto289F4903_g;
    int auto289F4903_u;
    int autoFD1D377E_ae;
    const int autoFD1D377E_ai = 1;

    // Variable Initialization

    // Implementation
    auto5B0D6329_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto5B0D6329_ai >= 0 && lv_intTeam <= auto5B0D6329_ae) || (auto5B0D6329_ai < 0 && lv_intTeam >= auto5B0D6329_ae) ) ; lv_intTeam += auto5B0D6329_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers > 0)) {
            TextTagSetText(libPEEP_gv_recTeams[lv_intTeam].lv_ttFaceoffTextTag, libPEEP_gv_recTeams[lv_intTeam].lv_txtPlayerList);
            TextTagAttachToUnit(libPEEP_gv_recTeams[lv_intTeam].lv_ttFaceoffTextTag, UnitGroupUnit(libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup, 1), 1.5);
            TextTagSetText(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, libPEEP_gv_recTeams[lv_intTeam].lv_txtSpecialTextTag);
            if ((libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers == 1)) {
                TextTagAttachToUnit(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, UnitGroupUnit(libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup, 1), 2.15);
            }
            else {
                TextTagAttachToUnit(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, UnitGroupUnit(libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup, 1), 2.4);
            }
            auto289F4903_g = libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup;
            auto289F4903_u = UnitGroupCount(auto289F4903_g, c_unitCountAll);
            for (;; auto289F4903_u -= 1) {
                lv_uUnit = UnitGroupUnitFromEnd(auto289F4903_g, auto289F4903_u);
                if (lv_uUnit == null) { break; }
                if (((DistanceBetweenPoints(UnitGetPosition(lv_uUnit), libPEEP_gv_recTeams[lv_intTeam].lv_pFaceoffPoint) > 0.5) && (UnitOrder(lv_uUnit, 0) != OrderTargetingPoint(AbilityCommand("move", 0), libPEEP_gv_recTeams[lv_intTeam].lv_pFaceoffPoint)))) {
                    UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("move", 0), libPEEP_gv_recTeams[lv_intTeam].lv_pFaceoffPoint), c_orderQueueReplace);
                    autoFD1D377E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                    lv_intPlayer = 1;
                    for ( ; ( (autoFD1D377E_ai >= 0 && lv_intPlayer <= autoFD1D377E_ae) || (autoFD1D377E_ai < 0 && lv_intPlayer >= autoFD1D377E_ae) ) ; lv_intPlayer += autoFD1D377E_ai ) {
                        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit == lv_uUnit)) {
                            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolFaceoffUnitAtRest = false;
                        }

                    }
                }

            }
        }
        else {
            TextTagSetText(libPEEP_gv_recTeams[lv_intTeam].lv_ttFaceoffTextTag, StringToText(""));
            TextTagSetText(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, StringToText(""));
        }
    }
}

void libPEEP_gf_CreateFaceoffDecals () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;
    fixed lv_realScale;
    fixed lv_realMaxDistance;

    // Automatic Variable Declarations
    const int autoA772132D_ae = 504;
    const int autoA772132D_ai = 1;

    // Variable Initialization
    lv_realScale = 11.0;
    lv_realMaxDistance = 1.2;

    // Implementation
    if ((RandomInt(1, 2) == 1)) {
        lv_intIndex = 501;
        for ( ; ( (autoA772132D_ai >= 0 && lv_intIndex <= autoA772132D_ae) || (autoA772132D_ai < 0 && lv_intIndex >= autoA772132D_ae) ) ; lv_intIndex += autoA772132D_ai ) {
            if ((RandomInt(1, 2) == 1)) {
                UnitCreate(1, "CustomDecalMuta", 0, 0, PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 1.1, libNtve_gf_RandomAngle()), 270.0);
                libPEEP_gv_recGlobals.lv_intNumFaceoffDecals += 1;
                libPEEP_gv_recGlobals.lv_uFaceoffDecalUnitList[libPEEP_gv_recGlobals.lv_intNumFaceoffDecals] = UnitLastCreated();
                libPEEP_gf_SetDecalTexture(UnitLastCreated(), lv_intIndex);
                UnitSetScale(UnitLastCreated(), lv_realScale, lv_realScale, 100.0);
                UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            }

        }
    }

}

void libPEEP_gf_DestroyFaceoffDecals () {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto9DBF2CAF_ae;
    const int auto9DBF2CAF_ai = 1;

    // Variable Initialization

    // Implementation
    auto9DBF2CAF_ae = libPEEP_gv_recGlobals.lv_intNumFaceoffDecals;
    lv_intIndex = 1;
    for ( ; ( (auto9DBF2CAF_ai >= 0 && lv_intIndex <= auto9DBF2CAF_ae) || (auto9DBF2CAF_ai < 0 && lv_intIndex >= auto9DBF2CAF_ae) ) ; lv_intIndex += auto9DBF2CAF_ai ) {
        UnitRemove(libPEEP_gv_recGlobals.lv_uFaceoffDecalUnitList[lv_intIndex]);
        libPEEP_gv_recGlobals.lv_uFaceoffDecalUnitList[lv_intIndex] = null;
    }
    libPEEP_gv_recGlobals.lv_intNumFaceoffDecals = 0;
}

void libPEEP_gf_CreateRevealCountdownDialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(350, 150, c_anchorTopRight, 100, 100, true);
    libPEEP_gv_recUI.lv_dRevealCountdownDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorTopLeft, 50, 65, StringToText(""), Color(100,100,100), false, 2.0);
    libPEEP_gv_recUI.lv_diRevealCountdownLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ChallengeTitle", PlayerGroupAll());
}

void libPEEP_gf_RefreshRevealStateforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intNumTownhalls;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_intNumTownhalls = libPEEP_gf_countPlayerTownhalls(lp_intPlayer);
    if (((lv_intNumTownhalls > 0) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolWillBeRevealed == true))) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolWillBeRevealed = false;
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolBeingRevealed = false;
        DialogSetVisible(libPEEP_gv_recUI.lv_dRevealCountdownDialog, PlayerGroupSingle(lp_intPlayer), false);
        TimerPause(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerRevealCountdown, true);
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_AE72152F")));
    }
    else if (((UnitGroupCount(UnitGroup(null, lp_intPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolWillBeRevealed == false) && (lv_intNumTownhalls == 0))) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_boolWillBeRevealed = true;
        DialogSetVisible(libPEEP_gv_recUI.lv_dRevealCountdownDialog, PlayerGroupSingle(lp_intPlayer), true);
        TimerStart(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerRevealCountdown, 26.0, false, c_timeReal);
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_0556C5F0")));
    }
}

int libPEEP_gf_countPlayerTownhalls (int lp_intPlayer) {
    // Variable Declarations
    int lv_intNumTownhalls;

    // Automatic Variable Declarations
    unitgroup auto3F011CCD_g;
    int auto3F011CCD_u;
    unit auto3F011CCD_var;

    // Variable Initialization

    // Implementation
    auto3F011CCD_g = UnitGroup(null, lp_intPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    auto3F011CCD_u = UnitGroupCount(auto3F011CCD_g, c_unitCountAll);
    for (;; auto3F011CCD_u -= 1) {
        auto3F011CCD_var = UnitGroupUnitFromEnd(auto3F011CCD_g, auto3F011CCD_u);
        if (auto3F011CCD_var == null) { break; }
        if (((UnitGetType(auto3F011CCD_var) == "CommandCenter") || (UnitGetType(auto3F011CCD_var) == "CommandCenterFlying") || (UnitGetType(auto3F011CCD_var) == "OrbitalCommand") || (UnitGetType(auto3F011CCD_var) == "OrbitalCommandFlying") || (UnitGetType(auto3F011CCD_var) == "PlanetaryFortress") || (UnitGetType(auto3F011CCD_var) == "Hatchery") || (UnitGetType(auto3F011CCD_var) == "Lair") || (UnitGetType(auto3F011CCD_var) == "Hive") || (UnitGetType(auto3F011CCD_var) == "Nexus") || (UnitGetType(auto3F011CCD_var) == "ProcessingCore") || (UnitGetType(auto3F011CCD_var) == "ScavengerNest") || (UnitGetType(auto3F011CCD_var) == "Citadel") || (UnitGetType(auto3F011CCD_var) == "CitadelCharged"))) {
            lv_intNumTownhalls += 1;
        }

    }
    return lv_intNumTownhalls;
}

void libPEEP_gf_SyncControlGroupsfromPlayertoPlayer (int lp_intPlayerSource, int lp_intPlayerDestination) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    const int auto4F87DE2D_ae = 9;
    const int auto4F87DE2D_ai = 1;

    // Variable Initialization

    // Implementation
    libPEEP_gf_ClearControlGroupsforPlayer(lp_intPlayerDestination);
    lv_intIndex = 0;
    for ( ; ( (auto4F87DE2D_ai >= 0 && lv_intIndex <= auto4F87DE2D_ae) || (auto4F87DE2D_ai < 0 && lv_intIndex >= auto4F87DE2D_ae) ) ; lv_intIndex += auto4F87DE2D_ai ) {
        UnitControlGroupClear(lp_intPlayerDestination, lv_intIndex);
        if ((UnitGroupCount(libPEEP_gv_recPlayers[lp_intPlayerSource].lv_ugControlGroups[lv_intIndex], c_unitCountAlive) > 0)) {
            UnitControlGroupAddUnits(lp_intPlayerDestination, lv_intIndex, libPEEP_gv_recPlayers[lp_intPlayerSource].lv_ugControlGroups[lv_intIndex]);
            UnitGroupClear(libPEEP_gv_recPlayers[lp_intPlayerDestination].lv_ugControlGroups[lv_intIndex]);
            UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lp_intPlayerDestination].lv_ugControlGroups[lv_intIndex], libPEEP_gv_recPlayers[lp_intPlayerSource].lv_ugControlGroups[lv_intIndex]);
        }

    }
}

void libPEEP_gf_ClearControlGroupsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;

    // Automatic Variable Declarations
    const int auto7174D37C_ae = 9;
    const int auto7174D37C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intIndex = 0;
    for ( ; ( (auto7174D37C_ai >= 0 && lv_intIndex <= auto7174D37C_ae) || (auto7174D37C_ai < 0 && lv_intIndex >= auto7174D37C_ae) ) ; lv_intIndex += auto7174D37C_ai ) {
        UnitGroupClear(libPEEP_gv_recPlayers[lp_intPlayer].lv_ugControlGroups[lv_intIndex]);
        UnitControlGroupClear(lp_intPlayer, lv_intIndex);
    }
}

void libPEEP_gf_InitializeMatch () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTargetPlayer;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intTeam;
    text lv_txtMatchPlayerDetails;
    string lv_entry;
    int lv_intMatch;

    // Automatic Variable Declarations
    unitgroup auto4BC8265B_g;
    int auto4BC8265B_u;
    unit auto4BC8265B_var;
    const int auto8066926D_ae = 4;
    const int auto8066926D_ai = 1;
    int auto7FE956CC_ae;
    const int auto7FE956CC_ai = 1;
    const int auto85C6D2C2_ae = 14;
    const int auto85C6D2C2_ai = 1;
    int auto04988CE6_ae;
    const int auto04988CE6_ai = 1;
    int auto79417B20_ae;
    const int auto79417B20_ai = 1;
    int auto10E4E3F6_ae;
    const int auto10E4E3F6_ai = 1;
    int auto072B1C96_catalog;
    int auto072B1C96_i;
    int autoEBD57F62_ae;
    const int autoEBD57F62_ai = 1;
    int auto15904064_ae;
    const int auto15904064_ai = 1;
    int auto3C916C95_ae;
    const int auto3C916C95_ai = 1;
    int auto5250CA1B_ae;
    const int auto5250CA1B_ai = 1;

    // Variable Initialization

    // Implementation
    UISetMode(PlayerGroupAll(), c_uiModeConsole, c_transitionDurationImmediate);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diTeamNewbButton, PlayerGroupAll(), false);
    libPEEP_gf_KickUnregisteredPlayers();
    auto4BC8265B_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BC8265B_u = UnitGroupCount(auto4BC8265B_g, c_unitCountAll);
    for (;; auto4BC8265B_u -= 1) {
        auto4BC8265B_var = UnitGroupUnitFromEnd(auto4BC8265B_g, auto4BC8265B_u);
        if (auto4BC8265B_var == null) { break; }
        UnitSetState(auto4BC8265B_var, c_unitStateSelectable, true);
        UnitSetState(auto4BC8265B_var, c_unitStateHighlightable, true);
        UnitSetState(auto4BC8265B_var, c_unitStateCursorable, true);
    }
    libPEEP_gv_recGlobals.lv_boolNamePanelImageFadedIn = false;
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, StringToText(""), PlayerGroupAll());
    lv_intIndex = 1;
    for ( ; ( (auto8066926D_ai >= 0 && lv_intIndex <= auto8066926D_ae) || (auto8066926D_ai < 0 && lv_intIndex >= auto8066926D_ae) ) ; lv_intIndex += auto8066926D_ai ) {
        lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex];
        if ((lv_intTeam > 0)) {
            if ((lv_intIndex > 1)) {
                lv_txtMatchPlayerDetails = (lv_txtMatchPlayerDetails + StringExternal("Param/Value/lib_PEEP_F58F9AFE"));
            }

            auto7FE956CC_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
            lv_intIndex2 = 1;
            for ( ; ( (auto7FE956CC_ai >= 0 && lv_intIndex2 <= auto7FE956CC_ae) || (auto7FE956CC_ai < 0 && lv_intIndex2 >= auto7FE956CC_ae) ) ; lv_intIndex2 += auto7FE956CC_ai ) {
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
                lv_txtMatchPlayerDetails = (lv_txtMatchPlayerDetails + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
                if ((lv_intIndex2 < libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers)) {
                    lv_txtMatchPlayerDetails = (lv_txtMatchPlayerDetails + StringExternal("Param/Value/lib_PEEP_3772CA6B"));
                }

            }
        }

    }
    libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_txtPlayerList = lv_txtMatchPlayerDetails;
    TimerStart(libPEEP_gv_recGlobals.lv_timerCommitMatchPlayers, IntToFixed(libPEEP_gv_recGlobals.lv_intMinimumMatchSeconds), false, c_timeReal);
    TimerStart(libPEEP_gv_recGlobals.lv_timerResourceTrading, libPEEP_gv_recGlobals.lv_realResourceTradingCountdown, false, c_timeReal);
    TimerStart(libPEEP_gv_recGlobals.lv_timerSpawnMatchPets, 5.0, false, c_timeGame);
    TimerStart(libPEEP_gv_recGlobals.lv_timerPetExclamationTimer, 10.0, true, c_timeGame);
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, StringToText(""), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diSubMatchCountdown, StringToText(""), PlayerGroupAll());
    libPEEP_gv_recGlobals.lv_intAPMIndex += 1;
    libPEEP_gv_recGlobals.lv_intAPMIndex = 0;
    libPEEP_gv_recGameState.lv_boolMatchInitComplete = false;
    libPEEP_gv_recGameState.lv_intCurrentGameState = 3;
    libPEEP_gv_recGameState.lv_intMatchSecondsElapsed = 0;
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMinimapClock, StringExternal("Param/Value/lib_PEEP_E21BAB7B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diClockReplacement, StringExternal("Param/Value/lib_PEEP_397D8BAF"), PlayerGroupAll());
    libPEEP_gf_InitializeBettingforMatch();
    libPEEP_gf_RefreshMatchHistoryListbox();
    lv_intPlayer = 1;
    for ( ; ( (auto85C6D2C2_ai >= 0 && lv_intPlayer <= auto85C6D2C2_ae) || (auto85C6D2C2_ai < 0 && lv_intPlayer >= auto85C6D2C2_ae) ) ; lv_intPlayer += auto85C6D2C2_ai ) {
        PlayerSetState(lv_intPlayer, c_playerStateDisplayInLeaderPanel, false);
    }
    auto04988CE6_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto04988CE6_ai >= 0 && lv_intPlayer <= auto04988CE6_ae) || (auto04988CE6_ai < 0 && lv_intPlayer >= auto04988CE6_ae) ) ; lv_intPlayer += auto04988CE6_ai ) {
        PlayerModifyPropertyInt(lv_intPlayer, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(lv_intPlayer, c_playerPropVespene, c_playerPropOperSetTo, 0);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolLastWinnerToken = libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken = false;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intAverageAPM = 0;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intUnitsKilled = 0;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intWorkersKilled = 0;
        libPEEP_gf_ClearControlGroupsforPlayer(lv_intPlayer);
    }
    auto79417B20_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 0;
    for ( ; ( (auto79417B20_ai >= 0 && lv_intPlayer <= auto79417B20_ae) || (auto79417B20_ai < 0 && lv_intPlayer >= auto79417B20_ae) ) ; lv_intPlayer += auto79417B20_ai ) {
        lv_intTargetPlayer = 0;
        auto10E4E3F6_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intTargetPlayer = 0;
        for ( ; ( (auto10E4E3F6_ai >= 0 && lv_intTargetPlayer <= auto10E4E3F6_ae) || (auto10E4E3F6_ai < 0 && lv_intTargetPlayer >= auto10E4E3F6_ae) ) ; lv_intTargetPlayer += auto10E4E3F6_ai ) {
            PlayerSetAlliance(lv_intPlayer, c_allianceIdControl, lv_intTargetPlayer, false);
        }
        PlayerSetAlliance(lv_intPlayer, c_allianceIdControl, lv_intPlayer, true);
        auto072B1C96_catalog = c_gameCatalogUpgrade;
        auto072B1C96_i = 1;
        for ( ; auto072B1C96_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto072B1C96_i += 1 ) {
            lv_entry = CatalogEntryGet(auto072B1C96_catalog, auto072B1C96_i);
            libNtve_gf_SetUpgradeLevelForPlayer(lv_intPlayer, lv_entry, 0);
        }
    }
    libPEEP_gv_recGameState.lv_boolMatchModeVotingActive = true;
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, PlayerGroupAll(), true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, PlayerGroupAll(), true);
    libPEEP_gf_UnshareVisionofLoweredDepots();
    libPEEP_gf_EnableBettingControls();
    autoEBD57F62_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoEBD57F62_ai >= 0 && lv_intPlayer <= autoEBD57F62_ae) || (autoEBD57F62_ai < 0 && lv_intPlayer >= autoEBD57F62_ae) ) ; lv_intPlayer += autoEBD57F62_ai ) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dAvatarDialog, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, PlayerGroupSingle(lv_intPlayer), false);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedTeams = false;
        libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intPlayer);
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolAutoCamEngaged == false)) {
            CameraLockInput(lv_intPlayer, false);
        }

        CameraSetValue(lv_intPlayer, c_cameraValueYaw, 90.0, 0.1, -1, 10);
        CameraSetValue(lv_intPlayer, c_cameraValuePitch, 56.0, 0.1, -1, 10);
        CameraSetValue(lv_intPlayer, c_cameraValueDistance, 34.0, 0.1, -1, 10);
        CameraSetValue(lv_intPlayer, c_cameraValueDepthOfField, 0.0, 0.1, -1, 10);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch = libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch;
    }
    auto15904064_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto15904064_ai >= 0 && lv_intPlayer <= auto15904064_ae) || (auto15904064_ai < 0 && lv_intPlayer >= auto15904064_ae) ) ; lv_intPlayer += auto15904064_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            libPEEP_gf_InitializeMatchforPlayer(lv_intPlayer);
            CinematicFade(true, 0.1, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        }

    }
    auto3C916C95_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto3C916C95_ai >= 0 && lv_intPlayer <= auto3C916C95_ae) || (auto3C916C95_ai < 0 && lv_intPlayer >= auto3C916C95_ae) ) ; lv_intPlayer += auto3C916C95_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false)) {
            libPEEP_gf_InitializeMatchforObserver(lv_intPlayer);
            CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
        }

    }
    libPEEP_gv_recGameState.lv_intMatchSecondsElapsed = 0;
    libPEEP_gv_recGameState.lv_boolMatchInitComplete = true;
    CameraSetBounds(PlayerGroupAll(), RegionPlayableMap(), true);
    libPEEP_gf_RefreshObserverPulldown();
    libPEEP_gf_RefreshAllVoting();
    libPEEP_gf_RefreshNamePanelMain();
    libPEEP_gf_RefreshNamePanelSupply();
    libPEEP_gf_RefreshNamePanelExtras();
    libPEEP_gf_CreateResearchPanels();
    libPEEP_gf_CreateStructurePanels();
    libPEEP_gf_RefreshBlizzardUIPanel();
    auto5250CA1B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto5250CA1B_ai >= 0 && lv_intPlayer <= auto5250CA1B_ae) || (auto5250CA1B_ai < 0 && lv_intPlayer >= auto5250CA1B_ae) ) ; lv_intPlayer += auto5250CA1B_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CommandCenter");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Hatchery");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Nexus");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "ProcessingCore");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "ScavengerNest");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Citadel");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "OperationHeadquarters");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "DenizenoftheDeep");
            libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "NHbrTemple");
        }

    }
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    libPEEP_gf_CheckforMatchEndAssignWinners();
}

void libPEEP_gf_ClearAllUnitsExploration () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_untitledVariable001;

    // Automatic Variable Declarations
    int auto4F6AB42D_ae;
    const int auto4F6AB42D_ai = 1;
    unitgroup auto4A9D5130_g;
    int auto4A9D5130_u;
    unit auto4A9D5130_var;
    int autoA5D282D4_ae;
    const int autoA5D282D4_ai = 1;
    int autoC93747EE_ae;
    const int autoC93747EE_ai = 1;

    // Variable Initialization

    // Implementation
    auto4F6AB42D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 0;
    for ( ; ( (auto4F6AB42D_ai >= 0 && lv_intPlayer <= auto4F6AB42D_ae) || (auto4F6AB42D_ai < 0 && lv_intPlayer >= auto4F6AB42D_ae) ) ; lv_intPlayer += auto4F6AB42D_ai ) {
        libPEEP_gf_DestroyPlayerPets(lv_intPlayer);
        libPEEP_gf_DestroyPlayerTurfMarkers(lv_intPlayer);
        libPEEP_gf_DestroyPlayerTurfSymbols(lv_intPlayer);
        auto4A9D5130_g = UnitGroup(null, lv_intPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto4A9D5130_u = UnitGroupCount(auto4A9D5130_g, c_unitCountAll);
        for (;; auto4A9D5130_u -= 1) {
            auto4A9D5130_var = UnitGroupUnitFromEnd(auto4A9D5130_g, auto4A9D5130_u);
            if (auto4A9D5130_var == null) { break; }
            if ((UnitGetType(auto4A9D5130_var) == "MonobattlePlayer")) {
                continue;
            }

            if (((UnitGetType(auto4A9D5130_var) == "Edifice") || (UnitGetType(auto4A9D5130_var) == "Sanctum") || (UnitGetType(auto4A9D5130_var) == "Foundry") || (UnitGetType(auto4A9D5130_var) == "Atrium") || (UnitGetType(auto4A9D5130_var) == "Pantheon") || (UnitGetType(auto4A9D5130_var) == "Conduit") || (UnitGetType(auto4A9D5130_var) == "Empyrean") || (UnitGetType(auto4A9D5130_var) == "Zenith") || (UnitGetType(auto4A9D5130_var) == "Outlet") || (UnitGetType(auto4A9D5130_var) == "Elysium"))) {
                UnitKill(auto4A9D5130_var);
            }
            else {
                if (((UnitGetType(auto4A9D5130_var) != "XelNagaTower") && (UnitGetType(auto4A9D5130_var) != "MineralField450") && (UnitGetType(auto4A9D5130_var) != "InhibitorZoneLarge") && (UnitGetType(auto4A9D5130_var) != "InhibitorZoneMedium") && (UnitGetType(auto4A9D5130_var) != "InhibitorZoneSmall"))) {
                    UnitRemove(auto4A9D5130_var);
                }

            }
        }
    }
    Wait(0.1, c_timeGame);
    CreepModify(RegionGetCenter(RegionEntireMap()), 1000.0, false, false);
    autoA5D282D4_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoA5D282D4_ai >= 0 && lv_intPlayer <= autoA5D282D4_ae) || (autoA5D282D4_ai < 0 && lv_intPlayer >= autoA5D282D4_ae) ) ; lv_intPlayer += autoA5D282D4_ai ) {
        VisRevealArea(lv_intPlayer, RegionEntireMap(), 0.1, false);
    }
    Wait(0.2, c_timeGame);
    autoC93747EE_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 0;
    for ( ; ( (autoC93747EE_ai >= 0 && lv_intPlayer <= autoC93747EE_ae) || (autoC93747EE_ai < 0 && lv_intPlayer >= autoC93747EE_ae) ) ; lv_intPlayer += autoC93747EE_ai ) {
        VisExploreArea(lv_intPlayer, RegionEntireMap(), false, false);
    }
}

void libPEEP_gf_RemovePlayerfromMatch (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    bool lv_boolPlayerFound;
    int lv_intIndex2;
    int lv_intTeam;
    int lv_intTmpPlayer;
    int lv_intNumRemainingTeammates;
    int[18] lv_intRemainingTeammateList;
    int lv_intMineralRation;
    int lv_intVespeneRation;
    int lv_intNumActivePlayers;

    // Automatic Variable Declarations
    int autoFBFA2908_ae;
    const int autoFBFA2908_ai = 1;
    int auto66A0419C_ae;
    const int auto66A0419C_ai = 1;
    int auto566C484E_ae;
    const int auto566C484E_ai = 1;
    int auto2A477CFD_ae;
    const int auto2A477CFD_ai = 1;
    int auto2BBF66FF_ae;
    const int auto2BBF66FF_ai = 1;
    int autoDF66390E_ae;
    const int autoDF66390E_ai = 1;
    unitgroup autoA9F4A265_g;
    int autoA9F4A265_u;
    unit autoA9F4A265_var;
    int autoE0BBA552_ae;
    const int autoE0BBA552_ai = 1;
    unitgroup auto1B3A94DD_g;
    int auto1B3A94DD_u;
    unit auto1B3A94DD_var;
    int auto6080E061_ae;
    const int auto6080E061_ai = 1;

    // Variable Initialization

    // Implementation
    PlayerScoreValueEnable(lp_intPlayer, "APM", false);
    libPEEP_gv_recPlayers[lp_intPlayer].lv_boolPlayingMatch = false;
    PlayerSetState(lp_intPlayer, c_playerStateDisplayInLeaderPanel, false);
    autoFBFA2908_ae = libPEEP_gv_recGameState.lv_intNumMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoFBFA2908_ai >= 0 && lv_intIndex <= autoFBFA2908_ae) || (autoFBFA2908_ai < 0 && lv_intIndex >= autoFBFA2908_ae) ) ; lv_intIndex += autoFBFA2908_ai ) {
        if ((libPEEP_gv_recGameState.lv_intMatchPlayerList[lv_intIndex] == lp_intPlayer)) {
            break;
        }

    }
    auto66A0419C_ae = libPEEP_gv_recGameState.lv_intNumMatchPlayers;
    lv_intIndex2 = lv_intIndex;
    for ( ; ( (auto66A0419C_ai >= 0 && lv_intIndex2 <= auto66A0419C_ae) || (auto66A0419C_ai < 0 && lv_intIndex2 >= auto66A0419C_ae) ) ; lv_intIndex2 += auto66A0419C_ai ) {
        libPEEP_gv_recGameState.lv_intMatchPlayerList[lv_intIndex2] = libPEEP_gv_recGameState.lv_intMatchPlayerList[(lv_intIndex2 + 1)];
    }
    libPEEP_gv_recGameState.lv_intNumMatchPlayers -= 1;
    lv_intTeam = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam;
    auto566C484E_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto566C484E_ai >= 0 && lv_intIndex <= auto566C484E_ae) || (auto566C484E_ai < 0 && lv_intIndex >= auto566C484E_ae) ) ; lv_intIndex += auto566C484E_ai ) {
        lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == true)) {
            lv_boolPlayerFound = true;
            break;
        }

    }
    if ((lv_boolPlayerFound == false)) {
        auto2A477CFD_ae = libPEEP_gv_recGameState.lv_intNumPlayingTeams;
        lv_intIndex = 1;
        for ( ; ( (auto2A477CFD_ai >= 0 && lv_intIndex <= auto2A477CFD_ae) || (auto2A477CFD_ai < 0 && lv_intIndex >= auto2A477CFD_ae) ) ; lv_intIndex += auto2A477CFD_ai ) {
            if ((libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex] == lv_intTeam)) {
                break;
            }

        }
        auto2BBF66FF_ae = libPEEP_gv_recGameState.lv_intNumPlayingTeams;
        lv_intIndex2 = lv_intIndex;
        for ( ; ( (auto2BBF66FF_ai >= 0 && lv_intIndex2 <= auto2BBF66FF_ae) || (auto2BBF66FF_ai < 0 && lv_intIndex2 >= auto2BBF66FF_ae) ) ; lv_intIndex2 += auto2BBF66FF_ai ) {
            libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex2] = libPEEP_gv_recGameState.lv_intPlayingTeamList[(lv_intIndex2 + 1)];
        }
        libPEEP_gv_recGameState.lv_intNumPlayingTeams -= 1;
    }

    libPEEP_gf_DestroyPlayerPets(lp_intPlayer);
    libPEEP_gf_CheckforMatchEndAssignWinners();
    if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recGameState.lv_intNumPlayingTeams > 1))) {
        libPEEP_gf_ResetResearchPanels();
        libPEEP_gf_ResetStructurePanels();
        libPEEP_gf_RefreshNamePanelMain();
        libPEEP_gf_RefreshNamePanelExtras();
        lv_intTeam = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam;
        lv_intNumRemainingTeammates = 0;
        lv_intIndex2 = 0;
        autoDF66390E_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_intIndex = 1;
        for ( ; ( (autoDF66390E_ai >= 0 && lv_intIndex <= autoDF66390E_ae) || (autoDF66390E_ai < 0 && lv_intIndex >= autoDF66390E_ae) ) ; lv_intIndex += autoDF66390E_ai ) {
            lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
            if (((lv_intTmpPlayer != lp_intPlayer) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == true))) {
                lv_intIndex2 += 1;
                lv_intRemainingTeammateList[lv_intIndex2] = lv_intTmpPlayer;
                libPEEP_gf_CreateChatMessage(0, (TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_D2F440C2")), lv_intTmpPlayer, false, false);
            }

        }
        if ((lv_intIndex2 > 0)) {
            if ((lv_intIndex2 == 1)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingLauncher, PlayerGroupSingle(lv_intRemainingTeammateList[lv_intIndex2]), false);
            }

            lv_intMineralRation = (PlayerGetPropertyInt(lp_intPlayer, c_playerPropMinerals) / lv_intIndex2);
            lv_intVespeneRation = (PlayerGetPropertyInt(lp_intPlayer, c_playerPropVespene) / lv_intIndex2);
            autoE0BBA552_ae = lv_intIndex2;
            lv_intIndex = 1;
            for ( ; ( (autoE0BBA552_ai >= 0 && lv_intIndex <= autoE0BBA552_ae) || (autoE0BBA552_ai < 0 && lv_intIndex >= autoE0BBA552_ae) ) ; lv_intIndex += autoE0BBA552_ai ) {
                lv_intTmpPlayer = lv_intRemainingTeammateList[lv_intIndex];
                PlayerModifyPropertyInt(lv_intTmpPlayer, c_playerPropMinerals, c_playerPropOperAdd, lv_intMineralRation);
                PlayerModifyPropertyInt(lv_intTmpPlayer, c_playerPropVespene, c_playerPropOperAdd, lv_intVespeneRation);
                PlayerModifyPropertyInt(lv_intTmpPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 400);
                auto1B3A94DD_g = UnitGroup(null, lp_intPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
                auto1B3A94DD_u = UnitGroupCount(auto1B3A94DD_g, c_unitCountAll);
                for (;; auto1B3A94DD_u -= 1) {
                    auto1B3A94DD_var = UnitGroupUnitFromEnd(auto1B3A94DD_g, auto1B3A94DD_u);
                    if (auto1B3A94DD_var == null) { break; }
                    UnitSetOwner(auto1B3A94DD_var, lv_intTmpPlayer, false);
                }
            }
        }
        else {
            autoA9F4A265_g = UnitGroup(null, lp_intPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            autoA9F4A265_u = UnitGroupCount(autoA9F4A265_g, c_unitCountAll);
            for (;; autoA9F4A265_u -= 1) {
                autoA9F4A265_var = UnitGroupUnitFromEnd(autoA9F4A265_g, autoA9F4A265_u);
                if (autoA9F4A265_var == null) { break; }
                libNtve_gf_PauseUnit(autoA9F4A265_var, true);
                UnitSetOwner(autoA9F4A265_var, 0, false);
            }
        }
        PlayerModifyPropertyInt(lp_intPlayer, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        PlayerModifyPropertyInt(lp_intPlayer, c_playerPropVespene, c_playerPropOperSetTo, 0);
        auto6080E061_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intTmpPlayer = 1;
        for ( ; ( (auto6080E061_ai >= 0 && lv_intTmpPlayer <= auto6080E061_ae) || (auto6080E061_ai < 0 && lv_intTmpPlayer >= auto6080E061_ae) ) ; lv_intTmpPlayer += auto6080E061_ai ) {
            PlayerSetAlliance(lv_intTmpPlayer, c_allianceIdControl, lp_intPlayer, false);
        }
        DialogSetVisible(libPEEP_gv_recUI.lv_dObserverDialog, PlayerGroupSingle(lp_intPlayer), true);
        libPEEP_gf_InitializeMatchforObserver(lp_intPlayer);
        UISetFrameVisible(PlayerGroupSingle(lp_intPlayer), c_syncFrameTypeResourcePanel, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingLauncher, PlayerGroupSingle(lp_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingDialog, PlayerGroupSingle(lp_intPlayer), false);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupSingle(lp_intPlayer), false);
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diBettingCurrentBetLabel, TextWithColor(StringExternal("Param/Value/lib_PEEP_E2C73610"), (Color(149*100/255,150*100/255,151*100/255))), PlayerGroupSingle(lp_intPlayer));
        libPEEP_gf_HideFairMessageLogButtonforPlayer(lp_intPlayer);
        libPEEP_gf_ShowNavButtonsforPlayer(lp_intPlayer);
        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_D3FFFBFB"), lp_intPlayer, false, false);
        libPEEP_gf_RefreshObserverPulldown();
        libPEEP_gf_RefreshAllVoting();
    }

}

void libPEEP_gf_AssignStartPositions () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intCounter;
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intRand;
    int lv_intGroupIndex;
    int lv_intLastGroupIndex;
    int lv_intPointIndex;
    bool[11] lv_boolGroupUsed;
    int lv_intNumUnusedGroups;
    bool[11] lv_boolPointUsed;
    int lv_intNumUnusedPoints;
    int lv_intGroupSelectionCounter;
    bool lv_boolDisableCloseSpawning;

    // Automatic Variable Declarations
    int auto42FB207C_ae;
    const int auto42FB207C_ai = 1;
    int autoFCBAD62B_ae;
    const int autoFCBAD62B_ai = 1;
    int autoC7CCB880_ae;
    const int autoC7CCB880_ai = 1;
    int autoA9CD944C_ae;
    const int autoA9CD944C_ai = 1;
    int auto2E06589A_ae;
    const int auto2E06589A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intNumUnusedGroups = libPEEP_gv_recGlobals.lv_intNumStartingPointGroups;
    lv_boolDisableCloseSpawning = libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns;
    auto42FB207C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto42FB207C_ai >= 0 && lv_intTeam <= auto42FB207C_ae) || (auto42FB207C_ai < 0 && lv_intTeam >= auto42FB207C_ae) ) ; lv_intTeam += auto42FB207C_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_boolSelectedForMatch == true)) {
            if (((libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns == false) || (libPEEP_gv_recGlobals.lv_intMapSpawnStyle != 2) || (libPEEP_gv_recGameState.lv_intTrueMatchMode == 3) || (ModI(lv_intGroupSelectionCounter, 2) == 0))) {
                lv_intGroupIndex = 0;
                while (((lv_intGroupIndex == 0) || ((libPEEP_gv_recGlobals.lv_intMapSpawnStyle == 1) && (libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns == true) && (libPEEP_gv_recGlobals.lv_pStartingPointGroups[lv_intGroupIndex][1] == libPEEP_gv_recGlobals.lv_pCloseByGroundPointGroups[lv_intLastGroupIndex][1])))) {
                    lv_intRand = RandomInt(1, lv_intNumUnusedGroups);
                    lv_intCounter = 0;
                    autoFCBAD62B_ae = libPEEP_gv_recGlobals.lv_intNumStartingPointGroups;
                    lv_intIndex = 1;
                    for ( ; ( (autoFCBAD62B_ai >= 0 && lv_intIndex <= autoFCBAD62B_ae) || (autoFCBAD62B_ai < 0 && lv_intIndex >= autoFCBAD62B_ae) ) ; lv_intIndex += autoFCBAD62B_ai ) {
                        if ((lv_boolGroupUsed[lv_intIndex] == false)) {
                            lv_intCounter += 1;
                        }

                        if ((lv_intCounter == lv_intRand)) {
                            lv_intGroupIndex = lv_intIndex;
                            break;
                        }

                    }
                }
            }
            else {
                if (((libPEEP_gv_recGlobals.lv_intMapSpawnStyle == 2) && (libPEEP_gv_recGameState.lv_boolVotableEnforceCompetitiveSpawns == true))) {
                    lv_intGroupIndex += 2;
                    if ((lv_intGroupIndex != libPEEP_gv_recGlobals.lv_intNumStartingPointGroups)) {
                        lv_intGroupIndex = ModI(lv_intGroupIndex, libPEEP_gv_recGlobals.lv_intNumStartingPointGroups);
                    }

                }

            }
            lv_intLastGroupIndex = lv_intGroupIndex;
            lv_boolGroupUsed[lv_intGroupIndex] = true;
            lv_intNumUnusedGroups -= 1;
            lv_intGroupSelectionCounter += 1;
            lv_intNumUnusedPoints = libPEEP_gv_recGlobals.lv_intStartingPointGroupSize;
            autoC7CCB880_ae = libPEEP_gv_recGlobals.lv_intStartingPointGroupSize;
            lv_intIndex = 1;
            for ( ; ( (autoC7CCB880_ai >= 0 && lv_intIndex <= autoC7CCB880_ae) || (autoC7CCB880_ai < 0 && lv_intIndex >= autoC7CCB880_ae) ) ; lv_intIndex += autoC7CCB880_ai ) {
                lv_boolPointUsed[lv_intIndex] = false;
            }
            autoA9CD944C_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
            lv_intIndex2 = 1;
            for ( ; ( (autoA9CD944C_ai >= 0 && lv_intIndex2 <= autoA9CD944C_ae) || (autoA9CD944C_ai < 0 && lv_intIndex2 >= autoA9CD944C_ae) ) ; lv_intIndex2 += autoA9CD944C_ai ) {
                lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
                lv_intRand = RandomInt(1, lv_intNumUnusedPoints);
                lv_intCounter = 0;
                auto2E06589A_ae = libPEEP_gv_recGlobals.lv_intStartingPointGroupSize;
                lv_intIndex = 1;
                for ( ; ( (auto2E06589A_ai >= 0 && lv_intIndex <= auto2E06589A_ae) || (auto2E06589A_ai < 0 && lv_intIndex >= auto2E06589A_ae) ) ; lv_intIndex += auto2E06589A_ai ) {
                    if ((lv_boolPointUsed[lv_intIndex] == false)) {
                        lv_intCounter += 1;
                    }

                    if ((lv_intCounter == lv_intRand)) {
                        lv_intPointIndex = lv_intIndex;
                        break;
                    }

                }
                lv_boolPointUsed[lv_intPointIndex] = true;
                lv_intNumUnusedPoints -= 1;
                libPEEP_gv_recPlayers[lv_intPlayer].lv_pStartingPoint = libPEEP_gv_recGlobals.lv_pStartingPointGroups[lv_intGroupIndex][lv_intPointIndex];
                libPEEP_gv_recPlayers[lv_intPlayer].lv_pBaseBuildPoint = libPEEP_gv_recGlobals.lv_pBasePointGroups[lv_intGroupIndex][lv_intPointIndex];
                libPEEP_gv_recPlayers[lv_intPlayer].lv_pWelcomePoint = libPEEP_gv_recGlobals.lv_pWelcomePointGroups[lv_intGroupIndex][lv_intPointIndex];
                libPEEP_gv_recPlayers[lv_intPlayer].lv_pNaturalPoint = libPEEP_gv_recGlobals.lv_pNaturalPointGroups[lv_intGroupIndex][lv_intPointIndex];
            }
        }

    }
}

void libPEEP_gf_SortTeamsbyStartPosition () {
    // Variable Declarations
    int lv_intPlayer;
    int[18] lv_intTeamList;
    fixed[18] lv_realAvgXList;
    fixed[18] lv_realAvgYList;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intTeamCount;
    bool lv_boolSwapTookPlace;
    fixed lv_realXSum;
    fixed lv_realYSum;
    int lv_intTmp;
    int lv_intMatch;
    int lv_intTeam;
    fixed lv_realTmp;

    // Automatic Variable Declarations
    int auto3007541F_ae;
    const int auto3007541F_ai = 1;
    int autoAD5FD056_ae;
    const int autoAD5FD056_ai = 1;
    int auto9A6E4D98_ae;
    const int auto9A6E4D98_ai = 1;
    int auto675911E5_ae;
    const int auto675911E5_ai = 1;
    int auto1901AD86_ae;
    const int auto1901AD86_ai = 1;
    int auto36ECBC8C_ae;
    const int auto36ECBC8C_ai = 1;
    int auto9585F89C_ae;
    const int auto9585F89C_ai = 1;

    // Variable Initialization
    lv_boolSwapTookPlace = true;

    // Implementation
    auto3007541F_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intIndex = 1;
    for ( ; ( (auto3007541F_ai >= 0 && lv_intIndex <= auto3007541F_ae) || (auto3007541F_ai < 0 && lv_intIndex >= auto3007541F_ae) ) ; lv_intIndex += auto3007541F_ai ) {
        if ((libPEEP_gv_recTeams[lv_intIndex].lv_boolSelectedForMatch == true)) {
            lv_intTeamCount += 1;
            lv_intTeamList[lv_intTeamCount] = lv_intIndex;
            lv_realXSum = 0.0;
            lv_realYSum = 0.0;
            autoAD5FD056_ae = libPEEP_gv_recTeams[lv_intIndex].lv_intNumPlayers;
            lv_intIndex2 = 1;
            for ( ; ( (autoAD5FD056_ai >= 0 && lv_intIndex2 <= autoAD5FD056_ae) || (autoAD5FD056_ai < 0 && lv_intIndex2 >= autoAD5FD056_ae) ) ; lv_intIndex2 += autoAD5FD056_ai ) {
                lv_intPlayer = libPEEP_gv_recTeams[lv_intIndex].lv_intPlayerList[lv_intIndex2];
                lv_realXSum += PointGetX(libPEEP_gv_recPlayers[lv_intPlayer].lv_pStartingPoint);
                lv_realYSum += PointGetY(libPEEP_gv_recPlayers[lv_intPlayer].lv_pStartingPoint);
            }
            lv_realAvgXList[lv_intTeamCount] = (lv_realXSum / IntToFixed(libPEEP_gv_recTeams[lv_intIndex].lv_intNumPlayers));
            lv_realAvgYList[lv_intTeamCount] = (lv_realYSum / IntToFixed(libPEEP_gv_recTeams[lv_intIndex].lv_intNumPlayers));
        }

    }
    while ((lv_boolSwapTookPlace == true)) {
        lv_boolSwapTookPlace = false;
        auto9A6E4D98_ae = lv_intTeamCount;
        lv_intIndex = 2;
        for ( ; ( (auto9A6E4D98_ai >= 0 && lv_intIndex <= auto9A6E4D98_ae) || (auto9A6E4D98_ai < 0 && lv_intIndex >= auto9A6E4D98_ae) ) ; lv_intIndex += auto9A6E4D98_ai ) {
            if (((lv_realAvgXList[lv_intIndex] < lv_realAvgXList[(lv_intIndex - 1)]) || ((lv_realAvgXList[lv_intIndex] == lv_realAvgXList[(lv_intIndex - 1)]) && (lv_realAvgYList[lv_intIndex] > lv_realAvgYList[(lv_intIndex - 1)])))) {
                lv_boolSwapTookPlace = true;
                lv_intTmp = lv_intTeamList[lv_intIndex];
                lv_intTeamList[lv_intIndex] = lv_intTeamList[(lv_intIndex - 1)];
                lv_intTeamList[(lv_intIndex - 1)] = lv_intTmp;
                lv_realTmp = lv_realAvgXList[lv_intIndex];
                lv_realAvgXList[lv_intIndex] = lv_realAvgXList[(lv_intIndex - 1)];
                lv_realAvgXList[(lv_intIndex - 1)] = lv_realTmp;
                lv_realTmp = lv_realAvgYList[lv_intIndex];
                lv_realAvgYList[lv_intIndex] = lv_realAvgYList[(lv_intIndex - 1)];
                lv_realAvgYList[(lv_intIndex - 1)] = lv_realTmp;
            }

        }
    }
    lv_intMatch = libPEEP_gv_recGameState.lv_intNumMatchesPlayed;
    auto675911E5_ae = libPEEP_gv_recMatches[lv_intMatch].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto675911E5_ai >= 0 && lv_intIndex <= auto675911E5_ae) || (auto675911E5_ai < 0 && lv_intIndex >= auto675911E5_ae) ) ; lv_intIndex += auto675911E5_ai ) {
        libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intIndex] = 0;
    }
    auto1901AD86_ae = libPEEP_gv_recGameState.lv_intNumPlayingTeams;
    lv_intIndex = 1;
    for ( ; ( (auto1901AD86_ai >= 0 && lv_intIndex <= auto1901AD86_ae) || (auto1901AD86_ai < 0 && lv_intIndex >= auto1901AD86_ae) ) ; lv_intIndex += auto1901AD86_ai ) {
        libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex] = 0;
    }
    lv_intTmp = 0;
    auto36ECBC8C_ae = lv_intTeamCount;
    lv_intIndex = 1;
    for ( ; ( (auto36ECBC8C_ai >= 0 && lv_intIndex <= auto36ECBC8C_ae) || (auto36ECBC8C_ai < 0 && lv_intIndex >= auto36ECBC8C_ae) ) ; lv_intIndex += auto36ECBC8C_ai ) {
        lv_intTeam = lv_intTeamList[lv_intIndex];
        libPEEP_gv_recGameState.lv_intPlayingTeamList[lv_intIndex] = lv_intTeam;
        auto9585F89C_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_intIndex2 = 1;
        for ( ; ( (auto9585F89C_ai >= 0 && lv_intIndex2 <= auto9585F89C_ae) || (auto9585F89C_ai < 0 && lv_intIndex2 >= auto9585F89C_ae) ) ; lv_intIndex2 += auto9585F89C_ai ) {
            lv_intTmp += 1;
            libPEEP_gv_recMatches[lv_intMatch].lv_intMatchPlayerList[lv_intTmp] = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
        }
    }
}

void libPEEP_gf_InitializeMapObjectsResources () {
    // Variable Declarations
    int lv_intIndex;
    int lv_intTypeNum;
    int lv_intPlayer;
    string lv_utActualUnitType;

    // Automatic Variable Declarations
    int auto9E87E35C_ae;
    const int auto9E87E35C_ai = 1;
    unitgroup auto09743B53_g;
    int auto09743B53_u;
    unit auto09743B53_var;
    int auto618BEDBD_ae;
    const int auto618BEDBD_ai = 1;
    int auto0D182FFD_ae;
    const int auto0D182FFD_ai = 1;

    // Variable Initialization

    // Implementation
    auto9E87E35C_ae = libPEEP_gv_recGlobals.lv_intNumMapUnitTypes;
    lv_intTypeNum = 1;
    for ( ; ( (auto9E87E35C_ai >= 0 && lv_intTypeNum <= auto9E87E35C_ae) || (auto9E87E35C_ai < 0 && lv_intTypeNum >= auto9E87E35C_ae) ) ; lv_intTypeNum += auto9E87E35C_ai ) {
        auto09743B53_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto09743B53_u = UnitGroupCount(auto09743B53_g, c_unitCountAll);
        for (;; auto09743B53_u -= 1) {
            auto09743B53_var = UnitGroupUnitFromEnd(auto09743B53_g, auto09743B53_u);
            if (auto09743B53_var == null) { break; }
            if ((UnitGetType(auto09743B53_var) == libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intTypeNum])) {
                UnitRemove(auto09743B53_var);
            }

        }
        auto618BEDBD_ae = libPEEP_gv_recGlobals.lv_intMapUnitPositionCounts[lv_intTypeNum];
        lv_intIndex = 1;
        for ( ; ( (auto618BEDBD_ai >= 0 && lv_intIndex <= auto618BEDBD_ae) || (auto618BEDBD_ai < 0 && lv_intIndex >= auto618BEDBD_ae) ) ; lv_intIndex += auto618BEDBD_ai ) {
            lv_utActualUnitType = libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intTypeNum];
            UnitCreate(1, libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intTypeNum], c_unitCreateIgnorePlacement, 0, libPEEP_gv_recGlobals.lv_pMapUnitPositionList[lv_intTypeNum][lv_intIndex], libPEEP_gv_recGlobals.lv_realMapUnitAngleList[lv_intTypeNum][lv_intIndex]);
            if ((libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intTypeNum] == "SupplyDepotLowered")) {
                auto0D182FFD_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                lv_intPlayer = 1;
                for ( ; ( (auto0D182FFD_ai >= 0 && lv_intPlayer <= auto0D182FFD_ae) || (auto0D182FFD_ai < 0 && lv_intPlayer >= auto0D182FFD_ae) ) ; lv_intPlayer += auto0D182FFD_ai ) {
                    libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, lv_intPlayer);
                }
            }
            else if (((libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intTypeNum] == "LabMineralField"))) {
                if ((libPEEP_gv_recGlobals.lv_boolMapIsFRB == true)) {
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, 2000.0);
                }

            }
            else if (((libPEEP_gv_recGlobals.lv_utMapUnitTypeList[lv_intTypeNum] == "RichVespeneGeyser"))) {
                if ((libPEEP_gv_recGlobals.lv_boolMapIsFRB == true)) {
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropResources, 5000.0);
                }

            }
        }
    }
}

void libPEEP_gf_UnshareVisionofLoweredDepots () {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    unitgroup auto34D48B7F_g;
    int auto34D48B7F_u;
    unit auto34D48B7F_var;
    int auto363DF7DE_ae;
    const int auto363DF7DE_ai = 1;
    int autoED5FFE71_ae;
    const int autoED5FFE71_ai = 1;

    // Variable Initialization

    // Implementation
    auto34D48B7F_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto34D48B7F_u = UnitGroupCount(auto34D48B7F_g, c_unitCountAll);
    for (;; auto34D48B7F_u -= 1) {
        auto34D48B7F_var = UnitGroupUnitFromEnd(auto34D48B7F_g, auto34D48B7F_u);
        if (auto34D48B7F_var == null) { break; }
        auto363DF7DE_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto363DF7DE_ai >= 0 && lv_intPlayer <= auto363DF7DE_ae) || (auto363DF7DE_ai < 0 && lv_intPlayer >= auto363DF7DE_ae) ) ; lv_intPlayer += auto363DF7DE_ai ) {
            libNtve_gf_ShareVisionofUnit(auto34D48B7F_var, false, lv_intPlayer);
        }
    }
    Wait(0.1, c_timeGame);
    autoED5FFE71_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoED5FFE71_ai >= 0 && lv_intPlayer <= autoED5FFE71_ae) || (autoED5FFE71_ai < 0 && lv_intPlayer >= autoED5FFE71_ae) ) ; lv_intPlayer += autoED5FFE71_ai ) {
        VisExploreArea(lv_intPlayer, RegionEntireMap(), false, false);
    }
}

void libPEEP_gf_InitializeMatchforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intRaceIndex;
    int lv_intIndex;
    int lv_intTmpPlayer;
    int lv_intIndex2;
    int lv_intTeam;
    point lv_pPanPoint;

    // Automatic Variable Declarations
    int autoA9C75FFE_ae;
    const int autoA9C75FFE_ai = 1;
    int autoB08DA06D_ae;
    const int autoB08DA06D_ai = 1;
    const int autoD14D5724_ae = 30;
    const int autoD14D5724_ai = 1;

    // Variable Initialization

    // Implementation
    MeleeSetOption(lp_intPlayer, c_meleeOptionReveal, true);
    UIUnitColorStyleOverride(PlayerGroupSingle(lp_intPlayer), c_unitColorStyleOverrideWorld);
    UIUnitColorStyleClearOverride(PlayerGroupSingle(lp_intPlayer));
    DialogSetVisible(libPEEP_gv_recUI.lv_dCinematicDialog, PlayerGroupSingle(lp_intPlayer), false);
    PlayerModifyPropertyInt(lp_intPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
    PlayerModifyPropertyInt(lp_intPlayer, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    PlayerModifyPropertyInt(lp_intPlayer, c_playerPropMineralsCollected, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_intPlayer, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_intPlayer, c_playerPropVespeneCollected, c_playerPropOperSetTo, 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "UnitsLostCount", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "ResourceLostArmy", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "UnitsLostValue", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "MineralsLostArmy", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "VespeneLostArmy", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "ArmySpendingTotal", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "EconomySpendingTotal", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "UpgradeSpendingSampled", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "UpgradeSpendingTotal", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "ResourceValueArmySampled", 0);
    PlayerScoreValueSetFromInt(lp_intPlayer, "APM", 0);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowButtons, true);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowHotkeys, true);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowSmartClick, true);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowMinimap, true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCinematicButton2, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dNamePanel2Dialog, PlayerGroupSingle(lp_intPlayer), false);
    libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox, false, PlayerGroupSingle(lp_intPlayer));
    PlayerSetState(lp_intPlayer, c_playerStateDisplayInLeaderPanel, true);
    lv_intTeam = libPEEP_gv_recPlayers[lp_intPlayer].lv_intCurrentTeam;
    autoA9C75FFE_ae = libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE;
    lv_intIndex = 1;
    for ( ; ( (autoA9C75FFE_ai >= 0 && lv_intIndex <= autoA9C75FFE_ae) || (autoA9C75FFE_ai < 0 && lv_intIndex >= autoA9C75FFE_ae) ) ; lv_intIndex += autoA9C75FFE_ai ) {
        DialogControlRemoveItem(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, PlayerGroupSingle(lp_intPlayer), lv_intIndex);
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intTeammateList[lv_intIndex] = 0;
    }
    lv_intIndex2 = 0;
    autoB08DA06D_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoB08DA06D_ai >= 0 && lv_intIndex <= autoB08DA06D_ae) || (autoB08DA06D_ai < 0 && lv_intIndex >= autoB08DA06D_ae) ) ; lv_intIndex += autoB08DA06D_ai ) {
        lv_intTmpPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
        if ((lv_intTmpPlayer != lp_intPlayer)) {
            lv_intIndex2 += 1;
            libPEEP_gv_recPlayers[lp_intPlayer].lv_intTeammateList[lv_intIndex2] = lv_intTmpPlayer;
            DialogControlAddItem(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, PlayerGroupSingle(lp_intPlayer), PlayerName(lv_intTmpPlayer));
        }

    }
    if ((lv_intIndex2 > 0)) {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, PlayerGroupSingle(lp_intPlayer), true);
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, PlayerGroupSingle(lp_intPlayer), 1);
    }
    else {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, PlayerGroupSingle(lp_intPlayer), false);
    }
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intNumMineralsToTrade = 0;
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intNumVespeneToTrade = 0;
    libPEEP_gf_RefreshResourceTradingDialogforPlayer(lp_intPlayer);
    CameraLockInput(lp_intPlayer, false);
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intValueOfUnitsLostOffset = PlayerScoreValueGetAsInt(lp_intPlayer, "ResourceLostArmy");
    PlayerScoreValueEnable(lp_intPlayer, "APM", true);
    lv_intIndex = 1;
    for ( ; ( (autoD14D5724_ai >= 0 && lv_intIndex <= autoD14D5724_ae) || (autoD14D5724_ai < 0 && lv_intIndex >= autoD14D5724_ae) ) ; lv_intIndex += autoD14D5724_ai ) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_realAPMHistory[lv_intIndex] = 0.0;
    }
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == true)) {
        libPEEP_gf_ExitCinematicModeforPlayer(lp_intPlayer);
    }

    libPEEP_gf_HideAllLeftsideDialogsforPlayer(lp_intPlayer, true);
    libPEEP_gf_HideAllRightsideDialogsforPlayer(lp_intPlayer, true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dObserverDialog, PlayerGroupSingle(lp_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogReplacement, PlayerGroupSingle(lp_intPlayer), true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatDialogCinematic, PlayerGroupSingle(lp_intPlayer), false);
    libPEEP_gv_recGameState.lv_intNumMatchPlayers += 1;
    libPEEP_gv_recGameState.lv_intMatchPlayerList[libPEEP_gv_recGameState.lv_intNumMatchPlayers] = lp_intPlayer;
    if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 2)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingLauncher, PlayerGroupSingle(lp_intPlayer), true);
    }

    UISetFrameVisible(PlayerGroupSingle(lp_intPlayer), c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_intPlayer), c_syncFrameTypeSupply, true);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowPings, true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dClockReplacement, PlayerGroupSingle(lp_intPlayer), true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lp_intPlayer), false);
    libPEEP_gf_HideNavButtonsforPlayer(lp_intPlayer);
    libPEEP_gf_ShowFairMessageLogButtonforPlayer(lp_intPlayer);
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intZoomIndex = 0;
    libPEEP_gf_ApplyZoomtoPlayerCam(lp_intPlayer, 0.0);
    lv_pPanPoint = UnitGroupCenterOfGroup(UnitGroup(null, lp_intPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_pPanPoint = PointWithOffset(lv_pPanPoint, 0.0, -1.5);
    CameraPan(lp_intPlayer, lv_pPanPoint, 0.0, -1, 10, false);
    CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "Speed", lp_intPlayer, "2.25");
    CatalogFieldValueSet(c_gameCatalogUnit, "Hydralisk", "SpeedMultiplierCreep", lp_intPlayer, "1.5");
    CatalogFieldValueSet(c_gameCatalogUnit, "Overlord", "Speed", lp_intPlayer, "0.6445");
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 1)) {
        if ((RandomInt(0, 9) == 0)) {
            if ((RandomInt(0, 1) == 0)) {
                libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_2C1C1AA7")));
            }
            else {
                libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_4DC41F82")));
            }
        }
        else {
            libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_CAFBC8BF")));
        }
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 2)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_5EB0DD4E")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 3)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_AA53DA0F")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 4)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_DE533392")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 5)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_4FA146E1")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 6)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_5264DE29")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 7)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_AB2C0E64")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 8)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_D469FE19")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 9)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_5A203C2C")));
    }
    else if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 10)) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lp_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_34A47546")));
    }
    if ((libPEEP_gv_recGameState.lv_boolVotableDisableBling == false)) {
        libPEEP_gf_CreateTurfMarkersforPlayer(lp_intPlayer);
        libPEEP_gf_CreateTurfSymbolsforPlayer(lp_intPlayer);
    }

}

void libPEEP_gf_PrepareStaringUnitsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intRaceIndex;
    unit lv_uHatchery;
    int lv_intRand;
    int lv_intIndex;
    int lv_intIndex2;
    fixed lv_realDistance;
    fixed lv_realAngle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace == 1)) {
        lv_intRaceIndex = RandomInt(2, libPEEP_gv_rACES_COUNT);
    }
    else {
        lv_intRaceIndex = libPEEP_gv_recPlayers[lp_intPlayer].lv_intBankRace;
    }
    libPEEP_gv_recPlayers[lp_intPlayer].lv_intTrueRace = lv_intRaceIndex;
    PlayerSetAlliance(lp_intPlayer, c_allianceIdVision, lp_intPlayer, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ApplyVision", c_unitCreateIgnorePlacement, lp_intPlayer, libPEEP_gv_recPlayers[lp_intPlayer].lv_pStartingPoint);
}

void libPEEP_gf_CreateStartingUnitsforPlayer (int lp_intPlayer) {
    // Variable Declarations
    int lv_intRaceIndex;
    unit lv_uHatchery;
    int lv_intRand;
    int lv_intIndex;
    int lv_intIndex2;
    fixed lv_realDistance;
    fixed lv_realAngle;
    point lv_point;

    // Automatic Variable Declarations
    int auto012ECBBD_val;

    // Variable Initialization
    lv_point = PlayerStartLocation(1);

    // Implementation
    auto012ECBBD_val = libPEEP_gv_recPlayers[lp_intPlayer].lv_intTrueRace;
    if (auto012ECBBD_val == 2) {
        PlayerSetRace(lp_intPlayer, "Terr");
    }
    else if (auto012ECBBD_val == 3) {
        PlayerSetRace(lp_intPlayer, "Zerg");
    }
    else if (auto012ECBBD_val == 4) {
        PlayerSetRace(lp_intPlayer, "Prot");
    }
    else if (auto012ECBBD_val == 5) {
        PlayerSetRace(lp_intPlayer, "Gen");
    }
    else if (auto012ECBBD_val == 6) {
        PlayerSetRace(lp_intPlayer, "Xayi");
    }
    else if (auto012ECBBD_val == 7) {
        PlayerSetRace(lp_intPlayer, "Keir");
    }
    else if (auto012ECBBD_val == 8) {
        PlayerSetRace(lp_intPlayer, "UED");
    }
    else if (auto012ECBBD_val == 9) {
        PlayerSetRace(lp_intPlayer, "Dragon");
    }
    else if (auto012ECBBD_val == 10) {
        PlayerSetRace(lp_intPlayer, "NHbr");
    }
    else {
    }
    UIAlertPoint("StartLocation", lp_intPlayer, StringToText(""), null, libPEEP_gv_recPlayers[lp_intPlayer].lv_pStartingPoint);
}

void libPEEP_gf_InitializeMatchforObserver (int lp_intPlayer) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intTmpPlayer;
    int lv_intTeam;
    int lv_intStartIndex;
    int lv_boolPlayerFound;
    fixed lv_realIdleCamStart;
    point lv_pPoint;

    // Automatic Variable Declarations
    int auto75170ABD_ae;
    const int auto75170ABD_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeSaved == true)) {
        Wait(0.1, c_timeGame);
        libPEEP_gf_EnterCinematicModeforPlayer(lp_intPlayer);
    }

    DialogControlSetVisible(libPEEP_gv_recUI.lv_diInfoPaneCargoBlockerButton, PlayerGroupSingle(lp_intPlayer), true);
    libPEEP_gf_RefreshNamePanelMessageforPlayer(lp_intPlayer);
    UIUnitColorStyleOverride(PlayerGroupSingle(lp_intPlayer), c_unitColorStyleNormal);
    if (((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false) && (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolFullscreenModeEngaged == false))) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dCinematicDialog, PlayerGroupSingle(lp_intPlayer), true);
    }

    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowButtons, false);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowHotkeys, false);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowSmartClick, false);
    UISetCommandAllowed(PlayerGroupSingle(lp_intPlayer), c_uiCommandAllowMinimap, false);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diCinematicButton2, PlayerGroupSingle(lp_intPlayer), true);
    libPEEP_gf_ExitMovieModeforPlayer(lp_intPlayer);
    SoundChannelMute(PlayerGroupSingle(lp_intPlayer), c_soundCategoryAlert, true);
    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, lp_intPlayer) == false)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dNamePanel2Dialog, PlayerGroupSingle(lp_intPlayer), true);
    }

    libPEEP_gv_recPlayers[lp_intPlayer].lv_intNumPlayersImObserving = libPEEP_gv_recGameState.lv_intNumMatchPlayers;
    auto75170ABD_ae = libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_intNumPlayers;
    lv_intIndex = 1;
    for ( ; ( (auto75170ABD_ai >= 0 && lv_intIndex <= auto75170ABD_ae) || (auto75170ABD_ai < 0 && lv_intIndex >= auto75170ABD_ae) ) ; lv_intIndex += auto75170ABD_ai ) {
        libPEEP_gv_recPlayers[lp_intPlayer].lv_intPlayersImObserving[lv_intIndex] = libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_intMatchPlayerList[lv_intIndex];
    }
    libPEEP_gv_recGameState.lv_intNumObservers += 1;
    libPEEP_gv_recGameState.lv_intObserverList[libPEEP_gv_recGameState.lv_intNumObservers] = lp_intPlayer;
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lp_intPlayer), true);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lp_intPlayer), 1);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lp_intPlayer), true);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lp_intPlayer), true);
    if (((libPEEP_gv_recGameState.lv_intGameStyle != 2) || (libPEEP_gv_recPlayers[lp_intPlayer].lv_boolIsCommentator == true))) {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, PlayerGroupSingle(lp_intPlayer), true);
    }

    libPEEP_gf_ApplyZoomtoPlayerCam(lp_intPlayer, 1.0);
    lv_intTmpPlayer = libPEEP_gv_recGameState.lv_intMatchPlayerList[RandomInt(1, libPEEP_gv_recGameState.lv_intNumMatchPlayers)];
    lv_pPoint = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_pStartingPoint;
    if ((libPEEP_gv_recPlayers[lp_intPlayer].lv_boolCinematicModeEngaged == false)) {
        lv_pPoint = PointWithOffsetPolar(lv_pPoint, 1.75, 270.0);
    }

    CameraPan(lp_intPlayer, lv_pPoint, 1.0, -1, 10, false);
    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, lp_intPlayer) == true)) {
        lv_realIdleCamStart = libPEEP_gv_recGlobals.lv_realCameraIdleCooldown;
        TimerStart(libPEEP_gv_recPlayers[lp_intPlayer].lv_timerCameraIdleExpiration, lv_realIdleCamStart, false, c_timeGame);
        CameraLockInput(lp_intPlayer, true);
        if (((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lp_intPlayer) == 4) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lp_intPlayer) == 5))) {
            libPEEP_gf_InitializeSlowRotationforPlayer(lp_intPlayer);
        }

    }

}

void libPEEP_gf_SetTeamAlliancesVision () {
    // Variable Declarations
    int lv_intRaceIndex;
    int lv_intTeam;
    int lv_intTeam2;
    int lv_intIndex;
    int lv_intPlayer2;
    int lv_intIndex2;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto998ABCD9_ae;
    const int auto998ABCD9_ai = 1;
    int autoDC58D28C_ae;
    const int autoDC58D28C_ai = 1;

    // Variable Initialization

    // Implementation
    auto998ABCD9_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto998ABCD9_ai >= 0 && lv_intPlayer <= auto998ABCD9_ae) || (auto998ABCD9_ai < 0 && lv_intPlayer >= auto998ABCD9_ae) ) ; lv_intPlayer += auto998ABCD9_ai ) {
        VisExploreArea(lv_intPlayer, RegionEntireMap(), false, false);
        lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam;
        autoDC58D28C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer2 = 1;
        for ( ; ( (autoDC58D28C_ai >= 0 && lv_intPlayer2 <= autoDC58D28C_ae) || (autoDC58D28C_ai < 0 && lv_intPlayer2 >= autoDC58D28C_ae) ) ; lv_intPlayer2 += autoDC58D28C_ai ) {
            if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == true) || (libPEEP_gv_recPlayers[lv_intPlayer2].lv_boolInactive == true))) {
                libNtve_gf_SetAlliance(lv_intPlayer, lv_intPlayer2, libNtve_ge_AllianceSetting_Neutral);
            }
            else {
                lv_intTeam2 = libPEEP_gv_recPlayers[lv_intPlayer2].lv_intCurrentTeam;
                if ((lv_intPlayer != lv_intPlayer2)) {
                    PlayerSetAlliance(lv_intPlayer, c_allianceIdControl, lv_intPlayer2, false);
                    PlayerSetAlliance(lv_intPlayer2, c_allianceIdControl, lv_intPlayer, false);
                    PlayerSetAlliance(lv_intPlayer, c_allianceIdSpend, lv_intPlayer2, false);
                    PlayerSetAlliance(lv_intPlayer2, c_allianceIdSpend, lv_intPlayer, false);
                    PlayerModifyPropertyInt(lv_intPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
                    if (((lv_intTeam == 0) && (lv_intTeam2 > 0))) {
                        libNtve_gf_SetAllianceOneWay(lv_intPlayer2, lv_intPlayer, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                    }
                    else {
                        if (((lv_intTeam2 == 0) && (lv_intTeam > 0))) {
                            libNtve_gf_SetAllianceOneWay(lv_intPlayer, lv_intPlayer2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                        }
                        else {
                            if (((lv_intTeam == lv_intTeam2) && (lv_intTeam > 0))) {
                                libNtve_gf_SetAlliance(lv_intPlayer, lv_intPlayer2, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                                if ((libPEEP_gv_recGameState.lv_boolVotableAllowCooperativeUnitControl == true)) {
                                    PlayerSetAlliance(lv_intPlayer, c_allianceIdControl, lv_intPlayer2, true);
                                    PlayerSetAlliance(lv_intPlayer2, c_allianceIdControl, lv_intPlayer, true);
                                    PlayerSetAlliance(lv_intPlayer, c_allianceIdSpend, lv_intPlayer2, true);
                                    PlayerSetAlliance(lv_intPlayer2, c_allianceIdSpend, lv_intPlayer, true);
                                }

                            }
                            else {
                                libNtve_gf_SetAlliance(lv_intPlayer, lv_intPlayer2, libNtve_ge_AllianceSetting_Enemy);
                            }
                        }
                    }
                }

            }
        }
    }
}

void libPEEP_gf_SavePlayerBanksAsIfLosing () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intTmpWinStreak;
    int lv_intTmpLossStreak;
    int lv_intTmpWorstStreak;

    // Automatic Variable Declarations
    const int auto3DBBBF80_ae = 2;
    const int auto3DBBBF80_ai = 1;
    int autoBC2DCBEF_ae;
    const int autoBC2DCBEF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intIndex = 1;
    for ( ; ( (auto3DBBBF80_ai >= 0 && lv_intIndex <= auto3DBBBF80_ae) || (auto3DBBBF80_ai < 0 && lv_intIndex >= auto3DBBBF80_ae) ) ; lv_intIndex += auto3DBBBF80_ai ) {
        lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex];
        autoBC2DCBEF_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
        lv_intIndex2 = 1;
        for ( ; ( (autoBC2DCBEF_ai >= 0 && lv_intIndex2 <= autoBC2DCBEF_ae) || (autoBC2DCBEF_ai < 0 && lv_intIndex2 >= autoBC2DCBEF_ae) ) ; lv_intIndex2 += autoBC2DCBEF_ai ) {
            lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex2];
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesPlayed[libPEEP_gv_recGameState.lv_intTrueMatchMode] += 1;
            if ((lv_intIndex == 1)) {
                libPEEP_gf_CalculateSonasRatings(libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[1], libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[2], 2, false);
            }
            else {
                libPEEP_gf_CalculateSonasRatings(libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[1], libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[2], 1, false);
            }
            libPEEP_gv_recPlayers[lv_intPlayer].lv_realBankSonasRating += libPEEP_gv_recPlayers[lv_intPlayer].lv_realSonasRatingChange;
            lv_intTmpWinStreak = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWinStreak;
            lv_intTmpLossStreak = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak;
            lv_intTmpWorstStreak = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWorstStreak;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWinStreak = 0;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak += 1;
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak > libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWorstStreak)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWorstStreak = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak;
            }

            libPEEP_gf_SaveBankforPlayer(lv_intPlayer);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_realBankSonasRating -= libPEEP_gv_recPlayers[lv_intPlayer].lv_realSonasRatingChange;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesPlayed[libPEEP_gv_recGameState.lv_intTrueMatchMode] -= 1;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWinStreak = lv_intTmpWinStreak;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak = lv_intTmpLossStreak;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWorstStreak = lv_intTmpWorstStreak;
        }
    }
}

void libPEEP_gf_CheckforMatchEndAssignWinners () {
    // Variable Declarations
    int lv_intTeam;
    int lv_intPlayer;
    int lv_intNumPlayingTeams;
    int lv_intIndex;
    bool lv_boolMatched;
    text lv_txtMessage;
    int lv_intExtraChips;

    // Automatic Variable Declarations
    int auto3916EC47_ae;
    const int auto3916EC47_ai = 1;
    int auto9D2D1695_ae;
    const int auto9D2D1695_ai = 1;
    int auto3C78181C_ae;
    const int auto3C78181C_ai = 1;
    int auto2AE72854_ae;
    const int auto2AE72854_ai = 1;

    // Variable Initialization

    // Implementation
    lv_intNumPlayingTeams = libPEEP_gv_recGameState.lv_intNumPlayingTeams;
    if (((lv_intNumPlayingTeams == 0) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/lib_PEEP_4763E813"));
        libPEEP_gf_RunVictoryScreen();
    }
    else {
        if ((lv_intNumPlayingTeams == 1)) {
            libPEEP_gv_recGameState.lv_intCurrentGameState = 4;
            DialogSetVisible(libPEEP_gv_recUI.lv_dSurrenderDialog, PlayerGroupAll(), false);
            if ((libPEEP_gv_recGameState.lv_intMatchSecondsElapsed < libPEEP_gv_recGlobals.lv_intMinimumMatchSeconds)) {
                auto3916EC47_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                lv_intPlayer = 1;
                for ( ; ( (auto3916EC47_ai >= 0 && lv_intPlayer <= auto3916EC47_ae) || (auto3916EC47_ai < 0 && lv_intPlayer >= auto3916EC47_ae) ) ; lv_intPlayer += auto3916EC47_ai ) {
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken = libPEEP_gv_recPlayers[lv_intPlayer].lv_boolLastWinnerToken;
                }
                libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_txtOutcome = StringExternal("Param/Value/lib_PEEP_673A5BFA");
                libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_intDuration = libPEEP_gv_recGameState.lv_intMatchSecondsElapsed;
                libPEEP_gf_RefreshMatchHistoryListbox();
                libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_2C963487") + libPEEP_gf_convertSecondsToTime(libPEEP_gv_recGlobals.lv_intMinimumMatchSeconds) + StringExternal("Param/Value/lib_PEEP_695B5BC2")), 0, false, false);
                libPEEP_gf_ClearOutBetting();
                TimerStart(libPEEP_gv_recGlobals.lv_timerVictoryScreenTimer, 0.0, false, c_timeReal);
            }
            else {
                lv_intTeam = libPEEP_gv_recGameState.lv_intPlayingTeamList[1];
                auto9D2D1695_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
                lv_intIndex = 1;
                for ( ; ( (auto9D2D1695_ai >= 0 && lv_intIndex <= auto9D2D1695_ae) || (auto9D2D1695_ai < 0 && lv_intIndex >= auto9D2D1695_ae) ) ; lv_intIndex += auto9D2D1695_ai ) {
                    lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex];
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken = true;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intWins += 1;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesWon[libPEEP_gv_recGameState.lv_intTrueMatchMode] += 1;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWinStreak += 1;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak = 0;
                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWinStreak > libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankBestStreak)) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankBestStreak = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWinStreak;
                    }

                }
                auto3C78181C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                lv_intPlayer = 1;
                for ( ; ( (auto3C78181C_ai >= 0 && lv_intPlayer <= auto3C78181C_ae) || (auto3C78181C_ai < 0 && lv_intPlayer >= auto3C78181C_ae) ) ; lv_intPlayer += auto3C78181C_ai ) {
                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0)) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesPlayed[libPEEP_gv_recGameState.lv_intTrueMatchMode] += 1;
                    }

                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == false)) {
                        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == true)) {
                            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWinStreak = 0;
                            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak += 1;
                            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak > libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWorstStreak)) {
                                libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankWorstStreak = libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLossStreak;
                            }

                        }
                        else {
                            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesObserved += 1;
                        }
                    }

                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesPlayed[libPEEP_gv_recGameState.lv_intTrueMatchMode] > libPEEP_gv_recGlobals.lv_intMaxWins)) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesPlayed[libPEEP_gv_recGameState.lv_intTrueMatchMode] = libPEEP_gv_recGlobals.lv_intMaxWins;
                    }

                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesWon[libPEEP_gv_recGameState.lv_intTrueMatchMode] > libPEEP_gv_recGlobals.lv_intMaxWins)) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesWon[libPEEP_gv_recGameState.lv_intTrueMatchMode] = libPEEP_gv_recGlobals.lv_intMaxWins;
                    }

                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesObserved > libPEEP_gv_recGlobals.lv_intMaxWins)) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankMatchesObserved = libPEEP_gv_recGlobals.lv_intMaxWins;
                    }

                }
                libPEEP_gf_AwardBettersatEndofMatch();
                DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, PlayerGroupAll(), 0.5, 0.0);
                auto2AE72854_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                lv_intPlayer = 1;
                for ( ; ( (auto2AE72854_ai >= 0 && lv_intPlayer <= auto2AE72854_ae) || (auto2AE72854_ai < 0 && lv_intPlayer >= auto2AE72854_ae) ) ; lv_intPlayer += auto2AE72854_ai ) {
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips += 100;
                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0)) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intMatchesPlayedThisGame += 1;
                        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == true)) {
                            libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips += 900;
                            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, TextWithColor(StringExternal("Param/Value/lib_PEEP_8C3DA69E"), (Color(20*100/255,134*100/255,107*100/255))), PlayerGroupSingle(lv_intPlayer));
                        }
                        else {
                            libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips += 200;
                            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, TextWithColor(StringExternal("Param/Value/lib_PEEP_64F14A9F"), (Color(20*100/255,134*100/255,107*100/255))), PlayerGroupSingle(lv_intPlayer));
                        }
                    }

                    libPEEP_gf_RefreshStoreDialogforPlayer(lv_intPlayer);
                }
                libPEEP_gf_ClearOutBetting();
                libPEEP_gf_RunVictoryScreen();
            }
        }

    }
}

void libPEEP_gf_RunVictoryScreen () {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intOpponent;
    int lv_intIndex;
    text lv_txtAnnouncement;
    int lv_intWinningTeam;
    text lv_txtWinnerList;
    int[18] lv_intTeamList;
    int lv_intTeam;
    int lv_intTeamCount;
    text lv_txtMessage;
    int lv_diDialogItem;
    int[18] lv_intExtraChipsList;
    int lv_intRace;

    // Automatic Variable Declarations
    int auto0F1FB97D_ae;
    const int auto0F1FB97D_ai = 1;
    int auto4850A47A_ae;
    const int auto4850A47A_ai = 1;
    int autoFE678F75_ae;
    const int autoFE678F75_ai = 1;
    int auto9BA6A8D7_ae;
    const int auto9BA6A8D7_ai = 1;
    const int auto49B477B4_ae = 2;
    const int auto49B477B4_ai = 1;
    int auto149E9C7B_ae;
    const int auto149E9C7B_ai = 1;
    int auto3924191A_ae;
    const int auto3924191A_ai = 1;
    int auto34270202_ae;
    const int auto34270202_ai = 1;
    int auto6106A12C_ae;
    const int auto6106A12C_ai = 1;
    int auto0E7DDCF6_ae;
    const int auto0E7DDCF6_ai = 1;

    // Variable Initialization
    lv_diDialogItem = c_invalidDialogControlId;

    // Implementation
    libPEEP_gf_TempExitCinematicModeforAllPlayers();
    UISetMode(PlayerGroupAll(), c_uiModeFullscreen, c_transitionDurationImmediate);
    auto0F1FB97D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto0F1FB97D_ai >= 0 && lv_intPlayer <= auto0F1FB97D_ae) || (auto0F1FB97D_ai < 0 && lv_intPlayer >= auto0F1FB97D_ae) ) ; lv_intPlayer += auto0F1FB97D_ai ) {
        TimerPause(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerRevealCountdown, true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWillBeRevealed = false;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolBeingRevealed = false;
    }
    DialogSetVisible(libPEEP_gv_recUI.lv_dRevealCountdownDialog, PlayerGroupAll(), false);
    SoundPlay(SoundLink("CommandCenter_Movement2", -1), PlayerGroupAll(), 100.0, 0.0);
    libPEEP_gv_recGlobals.lv_sVictorySound = SoundLastPlayed();
    TimerStart(libPEEP_gv_recGlobals.lv_timerStopVictorySound, 3.0, false, c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 5.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 5.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, 5.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, 5.0);
    CinematicFade(false, 4.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 50.0, false);
    auto4850A47A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto4850A47A_ai >= 0 && lv_intPlayer <= auto4850A47A_ae) || (auto4850A47A_ai < 0 && lv_intPlayer >= auto4850A47A_ae) ) ; lv_intPlayer += auto4850A47A_ai ) {
        libPEEP_gf_EnterMovieModeforPlayer(lv_intPlayer);
        libPEEP_gf_RefreshLeaderboardforPlayer(lv_intPlayer, libPEEP_gv_recPlayers[lv_intPlayer].lv_intRankSortCol, false);
        CameraLockInput(lv_intPlayer, true);
        VisRevealArea(lv_intPlayer, RegionEntireMap(), 5.0, false);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWillBeRevealed = false;
    }
    autoFE678F75_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoFE678F75_ai >= 0 && lv_intPlayer <= autoFE678F75_ae) || (autoFE678F75_ai < 0 && lv_intPlayer >= autoFE678F75_ae) ) ; lv_intPlayer += autoFE678F75_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == true)) {
            lv_intWinningTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam;
        }

    }
    DialogControlSetVisible(libPEEP_gv_recUI.lv_diVictoryExpectedLabel, PlayerGroupAll(), false);
    if (((libPEEP_gv_recGameState.lv_intTrueMatchMode == 1) || (libPEEP_gv_recGameState.lv_intTrueMatchMode == 2))) {
        libPEEP_gf_CalculateSonasRatings(libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[1], libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[2], lv_intWinningTeam, true);
        auto9BA6A8D7_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (auto9BA6A8D7_ai >= 0 && lv_intPlayer <= auto9BA6A8D7_ae) || (auto9BA6A8D7_ai < 0 && lv_intPlayer >= auto9BA6A8D7_ae) ) ; lv_intPlayer += auto9BA6A8D7_ai ) {
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == true)) {
                DialogControlSetVisible(libPEEP_gv_recUI.lv_diVictoryNameLabels[lv_intPlayer], PlayerGroupAll(), true);
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_FBEA8AC6"));
                if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_realSonasRatingChange < 0.0)) {
                    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_207B60C3") + lv_txtMessage + TextWithColor(FixedToText(libPEEP_gv_recPlayers[lv_intPlayer].lv_realSonasRatingChange, 1), (Color(100.00, 0.00, 0.00))) + StringExternal("Param/Value/lib_PEEP_29E53EA4"));
                }
                else {
                    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_7B56FEC1") + lv_txtMessage + TextWithColor(StringExternal("Param/Value/lib_PEEP_261A4701"), (Color(22*100/255,128*100/255,0))) + TextWithColor(FixedToText(libPEEP_gv_recPlayers[lv_intPlayer].lv_realSonasRatingChange, 1), (Color(22*100/255,128*100/255,0))) + StringExternal("Param/Value/lib_PEEP_23CA4E8E"));
                }
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diVictoryNameLabels[lv_intPlayer], (StringExternal("Param/Value/lib_PEEP_EC7F4A74") + TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_05BE20E8") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_5B61B411")), PlayerGroupAll());
            }

        }
    }

    if ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 1)) {
        lv_intIndex = 1;
        for ( ; ( (auto49B477B4_ai >= 0 && lv_intIndex <= auto49B477B4_ae) || (auto49B477B4_ai < 0 && lv_intIndex >= auto49B477B4_ae) ) ; lv_intIndex += auto49B477B4_ai ) {
            lv_intTeam = libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[lv_intIndex];
            lv_intPlayer = libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[1];
            if ((lv_intIndex == 1)) {
                lv_intOpponent = libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[2]].lv_intPlayerList[1];
            }
            else {
                lv_intOpponent = libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intTeamsSelectedForMatch[1]].lv_intPlayerList[1];
            }
            lv_intRace = libPEEP_gv_recPlayers[lv_intOpponent].lv_intTrueRace;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBank1v1sPlayedByRace[lv_intRace] = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intBank1v1sPlayedByRace[lv_intRace] + 1);
            if ((lv_intWinningTeam == lv_intTeam)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intBank1v1sWonByRace[lv_intRace] = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intBank1v1sWonByRace[lv_intRace] + 1);
            }

        }
    }

    if ((libPEEP_gv_recTeams[lv_intWinningTeam].lv_intNumPlayers > 1)) {
        lv_intPlayer = libPEEP_gv_recTeams[lv_intWinningTeam].lv_intPlayerList[1];
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_intWins <= 5) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips < 11000))) {
            auto149E9C7B_ae = libPEEP_gv_recTeams[lv_intWinningTeam].lv_intNumPlayers;
            lv_intIndex = 1;
            for ( ; ( (auto149E9C7B_ai >= 0 && lv_intIndex <= auto149E9C7B_ae) || (auto149E9C7B_ai < 0 && lv_intIndex >= auto149E9C7B_ae) ) ; lv_intIndex += auto149E9C7B_ai ) {
                libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_3BE40BE4")), libPEEP_gv_recTeams[lv_intWinningTeam].lv_intPlayerList[lv_intIndex], false, false);
            }
        }

        lv_txtAnnouncement = (libPEEP_gv_recTeams[lv_intWinningTeam].lv_txtTeamName + StringExternal("Param/Value/lib_PEEP_E1093920"));
        auto3924191A_ae = libPEEP_gv_recTeams[lv_intWinningTeam].lv_intNumPlayers;
        lv_intIndex = 1;
        for ( ; ( (auto3924191A_ai >= 0 && lv_intIndex <= auto3924191A_ae) || (auto3924191A_ai < 0 && lv_intIndex >= auto3924191A_ae) ) ; lv_intIndex += auto3924191A_ai ) {
            lv_intPlayer = libPEEP_gv_recTeams[lv_intWinningTeam].lv_intPlayerList[lv_intIndex];
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSpecialTeamsUnlocked = true;
            lv_txtWinnerList = (lv_txtWinnerList + TextWithColor(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPlayerName, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))));
            if ((libPEEP_gv_recTeams[lv_intWinningTeam].lv_intPlayerList[(lv_intIndex + 1)] > 0)) {
                lv_txtWinnerList = (lv_txtWinnerList + StringExternal("Param/Value/lib_PEEP_446B0DD2"));
            }

        }
    }
    else {
        lv_intPlayer = libPEEP_gv_recTeams[lv_intWinningTeam].lv_intPlayerList[1];
        lv_txtWinnerList = TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false)));
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_intWins <= 5) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips < 11000))) {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_2C16295A")), lv_intPlayer, false, false);
        }

        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSpecialTeamsUnlocked = true;
        lv_txtAnnouncement = (libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPlayerName + StringExternal("Param/Value/lib_PEEP_47BA8F55"));
        lv_txtAnnouncement = TextWithColor(lv_txtAnnouncement, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false)));
    }
    libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_intDuration = libPEEP_gv_recGameState.lv_intMatchSecondsElapsed;
    libPEEP_gv_recMatches[libPEEP_gv_recGameState.lv_intNumMatchesPlayed].lv_txtOutcome = (StringExternal("Param/Value/lib_PEEP_073A2352") + lv_txtWinnerList);
    libPEEP_gf_RefreshMatchHistoryListbox();
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diAnnouncement, (StringExternal("Param/Value/lib_PEEP_A957EEC8") + lv_txtAnnouncement + StringExternal("Param/Value/lib_PEEP_5673EC6C")), PlayerGroupAll());
    DialogSetVisible(libPEEP_gv_recUI.lv_dLoadingMatchDialog, PlayerGroupAll(), true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dAnnouncementDialog, PlayerGroupAll(), true);
    TimerStart(libPEEP_gv_recGlobals.lv_timerVictoryScreenTimer, 5.0, false, c_timeReal);
    auto34270202_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto34270202_ai >= 0 && lv_intPlayer <= auto34270202_ae) || (auto34270202_ai < 0 && lv_intPlayer >= auto34270202_ae) ) ; lv_intPlayer += auto34270202_ai ) {
        lv_intExtraChipsList[lv_intPlayer] = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips - 1000);
        if ((lv_intExtraChipsList[lv_intPlayer] > 0)) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsCashed += lv_intExtraChipsList[lv_intPlayer];
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsInAccount += lv_intExtraChipsList[lv_intPlayer];
        }

    }
    libPEEP_gf_SaveAllPlayerBanks();
    auto6106A12C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto6106A12C_ai >= 0 && lv_intPlayer <= auto6106A12C_ae) || (auto6106A12C_ai < 0 && lv_intPlayer >= auto6106A12C_ae) ) ; lv_intPlayer += auto6106A12C_ai ) {
        if ((lv_intExtraChipsList[lv_intPlayer] > 0)) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsCashed -= lv_intExtraChipsList[lv_intPlayer];
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsInAccount -= lv_intExtraChipsList[lv_intPlayer];
        }

    }
    auto0E7DDCF6_ae = libPEEP_gv_recUI.lv_intVictoryElementCount;
    lv_intIndex = 1;
    for ( ; ( (auto0E7DDCF6_ai >= 0 && lv_intIndex <= auto0E7DDCF6_ae) || (auto0E7DDCF6_ai < 0 && lv_intIndex >= auto0E7DDCF6_ae) ) ; lv_intIndex += auto0E7DDCF6_ai ) {
        lv_diDialogItem = libPEEP_gv_recUI.lv_diVictoryElementList[lv_intIndex];
        DialogControlFadeTransparency(lv_diDialogItem, PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_diDialogItem, PlayerGroupAll(), 2.0, 0.0);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Every Game Second
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicEveryGameSecond_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_realSeconds;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recGameState.lv_boolGameInitComplete == false)) {
        TriggerExecute(libPEEP_gt_PeriodicTutorialCooldown, true, false);
    }
    else {
        TriggerExecute(libPEEP_gt_PeriodicRotateCamera, true, false);
        TriggerExecute(libPEEP_gt_PeriodicTeamCooldown, true, false);
        TriggerExecute(libPEEP_gt_PeriodicNewbTeamCooldown, true, false);
        TriggerExecute(libPEEP_gt_PeriodicMatchCountdown, true, false);
        TriggerExecute(libPEEP_gt_PeriodicCommentatorChoiceCountdown, true, false);
        TriggerExecute(libPEEP_gt_Player1CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player2CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player3CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player4CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player5CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player6CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player7CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player8CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player9CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player10CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player11CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player12CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player13CameraMoves, true, false);
        TriggerExecute(libPEEP_gt_Player14CameraMoves, true, false);
        lv_realSeconds = GameGetMissionTime();
        if ((ModF(lv_realSeconds, 2.0) == 0.0)) {
            TriggerExecute(libPEEP_gt_PeriodicUpdateChat, false, false);
        }

        if ((ModF(lv_realSeconds, 3.0) == 0.0)) {
            TriggerExecute(libPEEP_gt_PeriodicRefreshStats, false, false);
            TriggerExecute(libPEEP_gt_PeriodicAutoCamRotation, true, false);
        }

        if ((ModF(lv_realSeconds, 5.0) == 0.0)) {
            TriggerExecute(libPEEP_gt_MoveFaceoffDecals, true, false);
        }

        if ((ModF(lv_realSeconds, 30.0) == 0.0)) {
            TriggerExecute(libPEEP_gt_FadeInNamePanelGraphic, true, false);
            libPEEP_gf_MoveTurfMarkers();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicEveryGameSecond_Init () {
    libPEEP_gt_PeriodicEveryGameSecond = TriggerCreate("libPEEP_gt_PeriodicEveryGameSecond_Func");
    TriggerEnable(libPEEP_gt_PeriodicEveryGameSecond, false);
    TriggerAddEventTimePeriodic(libPEEP_gt_PeriodicEveryGameSecond, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Every Real Second
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicEveryRealSecond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_PeriodicRefreshGameClocks, false, false);
    TriggerExecute(libPEEP_gt_PeriodicBettingCountdowns, false, false);
    TriggerExecute(libPEEP_gt_PeriodicRevealCountdown, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicEveryRealSecond_Init () {
    libPEEP_gt_PeriodicEveryRealSecond = TriggerCreate("libPEEP_gt_PeriodicEveryRealSecond_Func");
    TriggerEnable(libPEEP_gt_PeriodicEveryRealSecond, false);
    TriggerAddEventTimePeriodic(libPEEP_gt_PeriodicEveryRealSecond, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fixendgame
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_fixendgame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int auto468DBF21_ae;
    const int auto468DBF21_ai = 1;
    unitgroup auto6A30C0E4_g;
    int auto6A30C0E4_u;
    unit auto6A30C0E4_var;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && ((libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer) || (libPEEP_gv_recGlobals.lv_boolDebugMode == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_C3CABD7B"), lv_intPlayer, false, false);
    auto468DBF21_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto468DBF21_ai >= 0 && lv_intTmpPlayer <= auto468DBF21_ae) || (auto468DBF21_ai < 0 && lv_intTmpPlayer >= auto468DBF21_ae) ) ; lv_intTmpPlayer += auto468DBF21_ai ) {
        PlayerSetAlliance(0, c_allianceIdVision, lv_intTmpPlayer, true);
    }
    auto6A30C0E4_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A30C0E4_u = UnitGroupCount(auto6A30C0E4_g, c_unitCountAll);
    for (;; auto6A30C0E4_u -= 1) {
        auto6A30C0E4_var = UnitGroupUnitFromEnd(auto6A30C0E4_g, auto6A30C0E4_u);
        if (auto6A30C0E4_var == null) { break; }
        if ((UnitGetType(auto6A30C0E4_var) == "Medivac")) {
            libNtve_gf_SendActorMessageToUnit(auto6A30C0E4_var, "SetVisibility 1");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_fixendgame_Init () {
    libPEEP_gt_fixendgame = TriggerCreate("libPEEP_gt_fixendgame_Func");
    TriggerEnable(libPEEP_gt_fixendgame, false);
    TriggerAddEventChatMessage(libPEEP_gt_fixendgame, c_playerAny, ".fixendgame", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Spawn Match Pets
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerSpawnMatchPets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoF162A81B_ae;
    const int autoF162A81B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolVotableDisableBling == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF162A81B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoF162A81B_ai >= 0 && lv_intPlayer <= autoF162A81B_ae) || (autoF162A81B_ai < 0 && lv_intPlayer >= autoF162A81B_ae) ) ; lv_intPlayer += autoF162A81B_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsComputerControlled == false))) {
            libPEEP_gf_CreateMatchPetsforPlayer(lv_intPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerSpawnMatchPets_Init () {
    libPEEP_gt_TimerSpawnMatchPets = TriggerCreate("libPEEP_gt_TimerSpawnMatchPets_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerSpawnMatchPets, libPEEP_gv_recGlobals.lv_timerSpawnMatchPets);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Spawn Faceoff Pets
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerSpawnFaceoffPets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto7AF8D12E_ae;
    const int auto7AF8D12E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolVotableDisableBling == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7AF8D12E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto7AF8D12E_ai >= 0 && lv_intPlayer <= auto7AF8D12E_ae) || (auto7AF8D12E_ai < 0 && lv_intPlayer >= auto7AF8D12E_ae) ) ; lv_intPlayer += auto7AF8D12E_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0)) {
            libPEEP_gf_CreateFaceoffPetsforPlayer(lv_intPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerSpawnFaceoffPets_Init () {
    libPEEP_gt_TimerSpawnFaceoffPets = TriggerCreate("libPEEP_gt_TimerSpawnFaceoffPets_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerSpawnFaceoffPets, libPEEP_gv_recGlobals.lv_timerSpawnFaceoffPets);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 1
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto72974F7A_ae;
    const int auto72974F7A_ai = 1;

    // Variable Initialization
    lv_intPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto72974F7A_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto72974F7A_ai >= 0 && lv_intPetIndex <= auto72974F7A_ae) || (auto72974F7A_ai < 0 && lv_intPetIndex >= auto72974F7A_ae) ) ; lv_intPetIndex += auto72974F7A_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer1_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer1 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer1_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer1, libPEEP_gv_recPlayers[1].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 2
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto51290AA4_ae;
    const int auto51290AA4_ai = 1;

    // Variable Initialization
    lv_intPlayer = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    auto51290AA4_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto51290AA4_ai >= 0 && lv_intPetIndex <= auto51290AA4_ae) || (auto51290AA4_ai < 0 && lv_intPetIndex >= auto51290AA4_ae) ) ; lv_intPetIndex += auto51290AA4_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer2_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer2 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer2_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer2, libPEEP_gv_recPlayers[2].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 3
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto1F07DFA3_ae;
    const int auto1F07DFA3_ai = 1;

    // Variable Initialization
    lv_intPlayer = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1F07DFA3_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto1F07DFA3_ai >= 0 && lv_intPetIndex <= auto1F07DFA3_ae) || (auto1F07DFA3_ai < 0 && lv_intPetIndex >= auto1F07DFA3_ae) ) ; lv_intPetIndex += auto1F07DFA3_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer3_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer3 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer3_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer3, libPEEP_gv_recPlayers[3].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 4
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int autoC44BC9FD_ae;
    const int autoC44BC9FD_ai = 1;

    // Variable Initialization
    lv_intPlayer = 4;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC44BC9FD_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (autoC44BC9FD_ai >= 0 && lv_intPetIndex <= autoC44BC9FD_ae) || (autoC44BC9FD_ai < 0 && lv_intPetIndex >= autoC44BC9FD_ae) ) ; lv_intPetIndex += autoC44BC9FD_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer4_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer4 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer4_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer4, libPEEP_gv_recPlayers[4].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 5
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto97AA6F3B_ae;
    const int auto97AA6F3B_ai = 1;

    // Variable Initialization
    lv_intPlayer = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    auto97AA6F3B_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto97AA6F3B_ai >= 0 && lv_intPetIndex <= auto97AA6F3B_ae) || (auto97AA6F3B_ai < 0 && lv_intPetIndex >= auto97AA6F3B_ae) ) ; lv_intPetIndex += auto97AA6F3B_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer5_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer5 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer5_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer5, libPEEP_gv_recPlayers[5].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 6
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto889A5D3A_ae;
    const int auto889A5D3A_ai = 1;

    // Variable Initialization
    lv_intPlayer = 6;

    // Actions
    if (!runActions) {
        return true;
    }

    auto889A5D3A_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto889A5D3A_ai >= 0 && lv_intPetIndex <= auto889A5D3A_ae) || (auto889A5D3A_ai < 0 && lv_intPetIndex >= auto889A5D3A_ae) ) ; lv_intPetIndex += auto889A5D3A_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer6_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer6 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer6_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer6, libPEEP_gv_recPlayers[6].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 7
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto1ED56905_ae;
    const int auto1ED56905_ai = 1;

    // Variable Initialization
    lv_intPlayer = 7;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1ED56905_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto1ED56905_ai >= 0 && lv_intPetIndex <= auto1ED56905_ae) || (auto1ED56905_ai < 0 && lv_intPetIndex >= auto1ED56905_ae) ) ; lv_intPetIndex += auto1ED56905_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer7_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer7 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer7_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer7, libPEEP_gv_recPlayers[7].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 8
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int autoD3363C62_ae;
    const int autoD3363C62_ai = 1;

    // Variable Initialization
    lv_intPlayer = 8;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD3363C62_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (autoD3363C62_ai >= 0 && lv_intPetIndex <= autoD3363C62_ae) || (autoD3363C62_ai < 0 && lv_intPetIndex >= autoD3363C62_ae) ) ; lv_intPetIndex += autoD3363C62_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer8_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer8 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer8_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer8, libPEEP_gv_recPlayers[8].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 9
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto036E1E31_ae;
    const int auto036E1E31_ai = 1;

    // Variable Initialization
    lv_intPlayer = 9;

    // Actions
    if (!runActions) {
        return true;
    }

    auto036E1E31_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto036E1E31_ai >= 0 && lv_intPetIndex <= auto036E1E31_ae) || (auto036E1E31_ai < 0 && lv_intPetIndex >= auto036E1E31_ae) ) ; lv_intPetIndex += auto036E1E31_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer9_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer9 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer9_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer9, libPEEP_gv_recPlayers[9].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 10
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto062D0075_ae;
    const int auto062D0075_ai = 1;

    // Variable Initialization
    lv_intPlayer = 10;

    // Actions
    if (!runActions) {
        return true;
    }

    auto062D0075_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto062D0075_ai >= 0 && lv_intPetIndex <= auto062D0075_ae) || (auto062D0075_ai < 0 && lv_intPetIndex >= auto062D0075_ae) ) ; lv_intPetIndex += auto062D0075_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer10_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer10 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer10_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer10, libPEEP_gv_recPlayers[10].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 11
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto92A44093_ae;
    const int auto92A44093_ai = 1;

    // Variable Initialization
    lv_intPlayer = 11;

    // Actions
    if (!runActions) {
        return true;
    }

    auto92A44093_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto92A44093_ai >= 0 && lv_intPetIndex <= auto92A44093_ae) || (auto92A44093_ai < 0 && lv_intPetIndex >= auto92A44093_ae) ) ; lv_intPetIndex += auto92A44093_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer11_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer11 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer11_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer11, libPEEP_gv_recPlayers[11].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 12
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto10A1117E_ae;
    const int auto10A1117E_ai = 1;

    // Variable Initialization
    lv_intPlayer = 12;

    // Actions
    if (!runActions) {
        return true;
    }

    auto10A1117E_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto10A1117E_ai >= 0 && lv_intPetIndex <= auto10A1117E_ae) || (auto10A1117E_ai < 0 && lv_intPetIndex >= auto10A1117E_ae) ) ; lv_intPetIndex += auto10A1117E_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer12_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer12 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer12_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer12, libPEEP_gv_recPlayers[12].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 13
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto3A56762F_ae;
    const int auto3A56762F_ai = 1;

    // Variable Initialization
    lv_intPlayer = 13;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3A56762F_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto3A56762F_ai >= 0 && lv_intPetIndex <= auto3A56762F_ae) || (auto3A56762F_ai < 0 && lv_intPetIndex >= auto3A56762F_ae) ) ; lv_intPetIndex += auto3A56762F_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer13_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer13 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer13_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer13, libPEEP_gv_recPlayers[13].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Pet Utterances Player 14
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ClearPetUtterancesPlayer14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPetIndex;

    // Automatic Variable Declarations
    int auto3FC80488_ae;
    const int auto3FC80488_ai = 1;

    // Variable Initialization
    lv_intPlayer = 14;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3FC80488_ae = libPEEP_gv_recGlobals.lv_intNumMaxPets;
    lv_intPetIndex = 1;
    for ( ; ( (auto3FC80488_ai >= 0 && lv_intPetIndex <= auto3FC80488_ae) || (auto3FC80488_ai < 0 && lv_intPetIndex >= auto3FC80488_ae) ) ; lv_intPetIndex += auto3FC80488_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uPetUnits[lv_intPetIndex] != null)) {
            TextTagSetText(libPEEP_gv_recPlayers[lv_intPlayer].lv_txtPetTags[lv_intPetIndex], StringToText(""));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ClearPetUtterancesPlayer14_Init () {
    libPEEP_gt_ClearPetUtterancesPlayer14 = TriggerCreate("libPEEP_gt_ClearPetUtterancesPlayer14_Func");
    TriggerAddEventTimer(libPEEP_gt_ClearPetUtterancesPlayer14, libPEEP_gv_recPlayers[14].lv_timerPetUtteranceDisplay);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Callback for Player Leaving Game
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CallbackforPlayerLeavingGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayerExitProcessed == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HandlePlayerLeavingGame(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CallbackforPlayerLeavingGame_Init () {
    libPEEP_gt_CallbackforPlayerLeavingGame = TriggerCreate("libPEEP_gt_CallbackforPlayerLeavingGame_Func");
    TriggerEnable(libPEEP_gt_CallbackforPlayerLeavingGame, false);
    TriggerAddEventPlayerLeft(libPEEP_gt_CallbackforPlayerLeavingGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: League
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownLeague_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankLeague = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        libPEEP_gf_CalculateTeamInfo();
    }

    libPEEP_gf_RefreshLeaderboardforAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownLeague_Init () {
    libPEEP_gt_PulldownLeague = TriggerCreate("libPEEP_gt_PulldownLeague_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Race
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownRace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRaceIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intRaceIndex = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intRaceIndex = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankRace = lv_intRaceIndex;
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        libPEEP_gf_CalculateTeamInfo();
    }

    libPEEP_gf_RefreshLeaderboardforAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownRace_Init () {
    libPEEP_gt_PulldownRace = TriggerCreate("libPEEP_gt_PulldownRace_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Newb Team Cooldown
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicNewbTeamCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtNewbText;

    // Automatic Variable Declarations
    int auto502D7B5A_ae;
    const int auto502D7B5A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto502D7B5A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto502D7B5A_ai >= 0 && lv_intPlayer <= auto502D7B5A_ae) || (auto502D7B5A_ai < 0 && lv_intPlayer >= auto502D7B5A_ae) ) ; lv_intPlayer += auto502D7B5A_ai ) {
        if (((TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerTeamSelectionCooldown) > 0.0) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam == 0))) {
            lv_txtNewbText = (TextWithColor(StringExternal("Param/Value/lib_PEEP_8B147145"), (Color(150*100/255,150*100/255,30*100/255))) + TextWithColor(FixedToText(TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerTeamSelectionCooldown), 0), (Color(150*100/255,150*100/255,30*100/255))));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTeamNewbButton, lv_txtNewbText, PlayerGroupSingle(lv_intPlayer));
        }
        else {
            lv_txtNewbText = StringExternal("Param/Value/lib_PEEP_39B85089");
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTeamNewbButton, lv_txtNewbText, PlayerGroupSingle(lv_intPlayer));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicNewbTeamCooldown_Init () {
    libPEEP_gt_PeriodicNewbTeamCooldown = TriggerCreate("libPEEP_gt_PeriodicNewbTeamCooldown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Newb Team Selection
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonNewbTeamSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0) || (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSpecialTeamsUnlocked == true) || (libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionAdvancedAvatarSelection, lv_intPlayer) == true) || ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 2) || (libPEEP_gv_recGameState.lv_intTrueMatchMode == 4) || (libPEEP_gv_recGameState.lv_intTrueMatchMode == 5)))) {
        if ((DialogIsVisible(libPEEP_gv_recUI.lv_dAvatarDialog, lv_intPlayer) == true)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dAvatarDialog, PlayerGroupSingle(lv_intPlayer), false);
        }
        else {
            libPEEP_gf_RefreshAvatarDialogPageforPlayer(lv_intPlayer);
            DialogSetVisible(libPEEP_gv_recUI.lv_dAvatarDialog, PlayerGroupSingle(lv_intPlayer), true);
        }
    }
    else {
        if ((((TimerIsPaused(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerTeamSelectionCooldown) == true) || (TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerTeamSelectionCooldown) <= 0.0)) && ((TimerIsPaused(libPEEP_gv_recGlobals.lv_timerMatchCountdown) == true) || (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) >= 3.0) || (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) <= 0.0)))) {
            libPEEP_gf_SelectRandomTeamforPlayer(lv_intPlayer);
            DialogSetVisible(libPEEP_gv_recUI.lv_dCancelTeamDialog, PlayerGroupSingle(lv_intPlayer), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonNewbTeamSelection_Init () {
    libPEEP_gt_ButtonNewbTeamSelection = TriggerCreate("libPEEP_gt_ButtonNewbTeamSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Cancel Team
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonCancelTeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((TimerIsPaused(libPEEP_gv_recGlobals.lv_timerMatchCountdown) == true) || (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) >= 1.0) || (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) <= 0.0))) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTeamSelection = 0;
        libPEEP_gf_TrytoAddPlayertoTeam(lv_intPlayer, 0);
        DialogSetVisible(libPEEP_gv_recUI.lv_dCancelTeamDialog, PlayerGroupAll(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonCancelTeam_Init () {
    libPEEP_gt_ButtonCancelTeam = TriggerCreate("libPEEP_gt_ButtonCancelTeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Decline Join
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonDeclineJoin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTeamSelection = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonDeclineJoin_Init () {
    libPEEP_gt_ButtonDeclineJoin = TriggerCreate("libPEEP_gt_ButtonDeclineJoin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Confirm Join
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonConfirmJoin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTeamConfirmation = libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTeamSelection;
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gf_TrytoAddPlayertoTeam(lv_intPlayer, libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTeamConfirmation);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonConfirmJoin_Init () {
    libPEEP_gt_ButtonConfirmJoin = TriggerCreate("libPEEP_gt_ButtonConfirmJoin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Team Cooldown
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicTeamCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;

    // Automatic Variable Declarations
    int auto9AB79DA7_ae;
    const int auto9AB79DA7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9AB79DA7_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto9AB79DA7_ai >= 0 && lv_intPlayer <= auto9AB79DA7_ae) || (auto9AB79DA7_ai < 0 && lv_intPlayer >= auto9AB79DA7_ae) ) ; lv_intPlayer += auto9AB79DA7_ai ) {
        if ((TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerTeamSelectionCooldown) > 0.0)) {
            lv_txtMessage = (TextWithColor(StringExternal("Param/Value/lib_PEEP_F4D75776"), (Color(150*100/255,150*100/255,30*100/255))) + TextWithColor(FixedToText(TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerTeamSelectionCooldown), 0), (Color(150*100/255,150*100/255,30*100/255))));
        }
        else {
            if ((libPEEP_gv_recGlobals.lv_iNT_MAX_TEAM_SIZE == 2)) {
                lv_txtMessage = StringExternal("Param/Value/lib_PEEP_04EAFD81");
            }
            else {
                lv_txtMessage = StringExternal("Param/Value/lib_PEEP_AE0B80FC");
            }
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diAvatarsTitle, lv_txtMessage, PlayerGroupSingle(lv_intPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicTeamCooldown_Init () {
    libPEEP_gt_PeriodicTeamCooldown = TriggerCreate("libPEEP_gt_PeriodicTeamCooldown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Team Cooldown End
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerTeamCooldownEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto9E7276D2_ae;
    const int auto9E7276D2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E7276D2_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto9E7276D2_ai >= 0 && lv_intPlayer <= auto9E7276D2_ae) || (auto9E7276D2_ai < 0 && lv_intPlayer >= auto9E7276D2_ae) ) ; lv_intPlayer += auto9E7276D2_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_timerTeamSelectionCooldown == EventTimer())) {
            libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerTeamCooldownEnd_Init () {
    libPEEP_gt_TimerTeamCooldownEnd = TriggerCreate("libPEEP_gt_TimerTeamCooldownEnd_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[1].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[2].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[3].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[4].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[5].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[6].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[7].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[8].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[9].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[10].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[11].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[12].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[13].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[14].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[15].lv_timerTeamSelectionCooldown);
    TriggerAddEventTimer(libPEEP_gt_TimerTeamCooldownEnd, libPEEP_gv_recPlayers[16].lv_timerTeamSelectionCooldown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buttons: Team Selection
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonsTeamSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;

    // Automatic Variable Declarations
    int auto37A63AB4_ae;
    const int auto37A63AB4_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lv_intPlayer), false);
    auto37A63AB4_ae = (libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS + 1);
    lv_intTeam = 0;
    for ( ; ( (auto37A63AB4_ai >= 0 && lv_intTeam <= auto37A63AB4_ae) || (auto37A63AB4_ai < 0 && lv_intTeam >= auto37A63AB4_ae) ) ; lv_intTeam += auto37A63AB4_ai ) {
        if (((EventDialogControl() == libPEEP_gv_recUI.lv_diTeamSelectionButtons[lv_intTeam]) && ((lv_intTeam > 0) || (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) <= 0.0) || (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) >= 3.0) || (TimerIsPaused(libPEEP_gv_recGlobals.lv_timerMatchCountdown) == true)))) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTeamSelection = lv_intTeam;
            libPEEP_gf_TrytoAddPlayertoTeam(lv_intPlayer, lv_intTeam);
            DialogSetVisible(libPEEP_gv_recUI.lv_dAvatarDialog, PlayerGroupSingle(lv_intPlayer), false);
            DialogSetVisible(libPEEP_gv_recUI.lv_dCancelTeamDialog, PlayerGroupSingle(lv_intPlayer), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonsTeamSelection_Init () {
    libPEEP_gt_ButtonsTeamSelection = TriggerCreate("libPEEP_gt_ButtonsTeamSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Avatars Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXAvatarsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dAvatarDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedTeams = false;
    if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionAdvancedAvatarSelection, lv_intPlayer) == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog, PlayerGroupSingle(lv_intPlayer), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXAvatarsDialog_Init () {
    libPEEP_gt_ButtonXAvatarsDialog = TriggerCreate("libPEEP_gt_ButtonXAvatarsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Avatars Next Page
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonAvatarsNextPage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPage;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intPage = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentAvatarPage;
    if ((lv_intPage == 0)) {
        lv_intPage = 1;
    }

    lv_intPage += 1;
    if ((lv_intPage > libPEEP_gv_recGlobals.lv_intNumAvatarPages)) {
        lv_intPage = 1;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentAvatarPage = lv_intPage;
    libPEEP_gf_RefreshAvatarDialogPageforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonAvatarsNextPage_Init () {
    libPEEP_gt_ButtonAvatarsNextPage = TriggerCreate("libPEEP_gt_ButtonAvatarsNextPage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Avatars Previous Page
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonAvatarsPreviousPage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPage;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intPage = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentAvatarPage;
    if ((lv_intPage == 0)) {
        lv_intPage = 1;
    }

    lv_intPage -= 1;
    if ((lv_intPage < 1)) {
        lv_intPage = libPEEP_gv_recGlobals.lv_intNumAvatarPages;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentAvatarPage = lv_intPage;
    libPEEP_gf_RefreshAvatarDialogPageforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonAvatarsPreviousPage_Init () {
    libPEEP_gt_ButtonAvatarsPreviousPage = TriggerCreate("libPEEP_gt_ButtonAvatarsPreviousPage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Betting Countdowns
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicBettingCountdowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_txtText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recUI.lv_diBettingCountdownLabel == c_invalidDialogControlId)) {
        return true;
    }

    if ((TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerBettingPeriodTimer) > 0.0)) {
        lv_txtText = (libPEEP_gf_convertSecondsToTime(FixedToInt(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerBettingPeriodTimer))));
    }
    else {
        lv_txtText = (libPEEP_gf_convertSecondsToTime(FixedToInt(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerBettingIntervalTimer))));
    }
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        lv_txtText = TextWithColor(lv_txtText, (Color(149*100/255,150*100/255,151*100/255)));
    }
    else {
        if ((TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerBettingPeriodTimer) > 0.0)) {
            lv_txtText = TextWithColor(lv_txtText, Color(66.67, 100.00, 66.67));
        }
        else {
            lv_txtText = TextWithColor(lv_txtText, Color(100.00, 53.33, 54.51));
        }
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diBettingCountdownLabel, lv_txtText, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicBettingCountdowns_Init () {
    libPEEP_gt_PeriodicBettingCountdowns = TriggerCreate("libPEEP_gt_PeriodicBettingCountdowns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Betting Interval
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerBettingInterval_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoABCEA03B_ae;
    const int autoABCEA03B_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recGameState.lv_boolBettingActive = true;
    TimerStart(libPEEP_gv_recGlobals.lv_timerBettingIntervalTimer, 270.0, false, c_timeReal);
    TimerStart(libPEEP_gv_recGlobals.lv_timerBettingPeriodTimer, 30.0, false, c_timeReal);
    autoABCEA03B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoABCEA03B_ai >= 0 && lv_intPlayer <= autoABCEA03B_ae) || (autoABCEA03B_ai < 0 && lv_intPlayer >= autoABCEA03B_ae) ) ; lv_intPlayer += autoABCEA03B_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == false))) {
            libPEEP_gf_NewBettingPeriodforPlayer(lv_intPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerBettingInterval_Init () {
    libPEEP_gt_TimerBettingInterval = TriggerCreate("libPEEP_gt_TimerBettingInterval_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerBettingInterval, libPEEP_gv_recGlobals.lv_timerBettingIntervalTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Betting Period
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerBettingPeriod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto1A111D73_ae;
    const int auto1A111D73_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_StopFlashingScreenButton(5);
    libPEEP_gv_recGameState.lv_boolBettingActive = false;
    auto1A111D73_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto1A111D73_ai >= 0 && lv_intPlayer <= auto1A111D73_ae) || (auto1A111D73_ai < 0 && lv_intPlayer >= auto1A111D73_ae) ) ; lv_intPlayer += auto1A111D73_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false)) {
            TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerBettingCloseTimer, 1.0, false, c_timeGame);
        }

    }
    libPEEP_gf_DisableBettingControls();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerBettingPeriod_Init () {
    libPEEP_gt_TimerBettingPeriod = TriggerCreate("libPEEP_gt_TimerBettingPeriod_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerBettingPeriod, libPEEP_gv_recGlobals.lv_timerBettingPeriodTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Betting Close
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerBettingClose_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto24BB431C_ae;
    const int auto24BB431C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto24BB431C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto24BB431C_ai >= 0 && lv_intPlayer <= auto24BB431C_ae) || (auto24BB431C_ai < 0 && lv_intPlayer >= auto24BB431C_ae) ) ; lv_intPlayer += auto24BB431C_ai ) {
        if (((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox, lv_intPlayer) == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_timerBettingCloseTimer == EventTimer()))) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lv_intPlayer), false);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedBetting = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerBettingClose_Init () {
    libPEEP_gt_TimerBettingClose = TriggerCreate("libPEEP_gt_TimerBettingClose_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[1].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[2].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[3].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[4].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[5].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[6].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[7].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[8].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[9].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[10].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[11].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[12].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[13].lv_timerBettingCloseTimer);
    TriggerAddEventTimer(libPEEP_gt_TimerBettingClose, libPEEP_gv_recPlayers[14].lv_timerBettingCloseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slider: Change Potential Bet
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_SliderChangePotentialBet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolBettingActive == true) && (EventDialogControl() == libPEEP_gv_recUI.lv_diBettingSlider)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshBettingPayoutsForPlayer(lv_intPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_SliderChangePotentialBet_Init () {
    libPEEP_gt_SliderChangePotentialBet = TriggerCreate("libPEEP_gt_SliderChangePotentialBet_Func");
    TriggerEnable(libPEEP_gt_SliderChangePotentialBet, false);
    TriggerAddEventDialogControl(libPEEP_gt_SliderChangePotentialBet, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Team to Win
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownTeamtoWin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diBettingPulldown, lv_intPlayer) > 1) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == false))) {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupSingle(lv_intPlayer), true);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPlaceBetButton, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gf_RefreshBettingPayoutsForPlayer(lv_intPlayer, true);
    }
    else {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupSingle(lv_intPlayer), false);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPlaceBetButton, PlayerGroupSingle(lv_intPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownTeamtoWin_Init () {
    libPEEP_gt_PulldownTeamtoWin = TriggerCreate("libPEEP_gt_PulldownTeamtoWin_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Betting Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXBettingDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedBetting = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXBettingDialog_Init () {
    libPEEP_gt_ButtonXBettingDialog = TriggerCreate("libPEEP_gt_ButtonXBettingDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Place Bet
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonPlaceBet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSpecifiedBet;
    int lv_intSpecifiedTeam;
    int lv_intPlayer;
    int lv_intSelectedIndex;
    int lv_intAvailableChips;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int autoE4078CA0_ae;
    const int autoE4078CA0_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolBettingActive == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSpecifiedBet = FixedToInt(libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diBettingSlider, lv_intPlayer));
    lv_intSelectedIndex = DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diBettingPulldown, lv_intPlayer);
    lv_intSpecifiedTeam = libPEEP_gv_recGlobals.lv_intBettingPulldownTeamIDs[lv_intSelectedIndex];
    if (((lv_intSpecifiedBet > 0) && (lv_intSpecifiedTeam > 0))) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount += lv_intSpecifiedBet;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetTeam = lv_intSpecifiedTeam;
        libNtve_gf_SetDialogItemCurrentValue(libPEEP_gv_recUI.lv_diBettingSlider, 0.0, PlayerGroupSingle(lv_intPlayer));
        autoE4078CA0_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intTmpPlayer = 1;
        for ( ; ( (autoE4078CA0_ai >= 0 && lv_intTmpPlayer <= autoE4078CA0_ae) || (autoE4078CA0_ai < 0 && lv_intTmpPlayer >= autoE4078CA0_ae) ) ; lv_intTmpPlayer += autoE4078CA0_ai ) {
            libPEEP_gf_RefreshBettingPayoutsForPlayer(lv_intTmpPlayer, false);
        }
        libPEEP_gf_RefreshPotLabel();
        lv_intAvailableChips = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips - libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentBetAmount);
        libNtve_gf_SetDialogItemCurrentValue(libPEEP_gv_recUI.lv_diBettingSlider, 0.0, PlayerGroupSingle(lv_intPlayer));
        libNtve_gf_SetDialogItemMaximumValue(libPEEP_gv_recUI.lv_diBettingSlider, IntToFixed(lv_intAvailableChips), PlayerGroupSingle(lv_intPlayer));
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diBettingMaxSliderLabel, libPEEP_gf_formatIntegerAsText(lv_intAvailableChips), PlayerGroupSingle(lv_intPlayer));
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPulldown, PlayerGroupSingle(lv_intPlayer), false);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingSlider, PlayerGroupSingle(lv_intPlayer), false);
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diBettingPlaceBetButton, PlayerGroupSingle(lv_intPlayer), false);
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diBettingAutoOpenCheckbox, lv_intPlayer) == true)) {
            TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerBettingCloseTimer, 0.0, false, c_timeGame);
        }

    }

    libPEEP_gf_RefreshNamePanelExtras();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonPlaceBet_Init () {
    libPEEP_gt_ButtonPlaceBet = TriggerCreate("libPEEP_gt_ButtonPlaceBet_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Inventory Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXInventoryDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dInventoryDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXInventoryDialog_Init () {
    libPEEP_gt_ButtonXInventoryDialog = TriggerCreate("libPEEP_gt_ButtonXInventoryDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buttons: Inventory
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonsInventory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dInventoryDialog, PlayerGroupSingle(lv_intPlayer), true);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonsInventory_Init () {
    libPEEP_gt_ButtonsInventory = TriggerCreate("libPEEP_gt_ButtonsInventory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buttons: Store
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonsStore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HideAllRightsideDialogsExceptResourcePanels(lv_intPlayer, false);
    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dStoreDialog, lv_intPlayer) == false)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStoreDialog, PlayerGroupSingle(lv_intPlayer), true);
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diStoreAislePulldown, PlayerGroupSingle(lv_intPlayer), 1);
        DialogSetVisible(libPEEP_gv_recUI.lv_dStoreAisleDialogs[1], PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStore = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonsStore_Init () {
    libPEEP_gt_ButtonsStore = TriggerCreate("libPEEP_gt_ButtonsStore_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldowns: Pet Type
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownsPetType_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libPEEP_gv_recUI.lv_diPetTypePulldowns[1])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankPetTypeSelections[1] = libPEEP_gv_recPlayers[lv_intPlayer].lv_intPetTypeIndexList[DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer)];
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_diPetTypePulldowns[2])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankPetTypeSelections[2] = libPEEP_gv_recPlayers[lv_intPlayer].lv_intPetTypeIndexList[DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer)];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownsPetType_Init () {
    libPEEP_gt_PulldownsPetType = TriggerCreate("libPEEP_gt_PulldownsPetType_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldowns: Pet Spawn
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownsPetSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libPEEP_gv_recUI.lv_diPetSpawnPulldowns[1])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankPetSpawnSelections[1] = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_diPetSpawnPulldowns[2])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankPetSpawnSelections[2] = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownsPetSpawn_Init () {
    libPEEP_gt_PulldownsPetSpawn = TriggerCreate("libPEEP_gt_PulldownsPetSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldowns: Turf Marker Type
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownsTurfMarkerType_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[1])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfMarkerTypeSelections[1] = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTurfMarkerTypeIndexList[DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer)];
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfMarkerTypePulldowns[2])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfMarkerTypeSelections[2] = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTurfMarkerTypeIndexList[DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer)];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownsTurfMarkerType_Init () {
    libPEEP_gt_PulldownsTurfMarkerType = TriggerCreate("libPEEP_gt_PulldownsTurfMarkerType_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldowns: Turf Marker Spawn
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownsTurfMarkerSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[1])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfMarkerSpawnSelections[1] = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfMarkerSpawnPulldowns[2])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfMarkerSpawnSelections[2] = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownsTurfMarkerSpawn_Init () {
    libPEEP_gt_PulldownsTurfMarkerSpawn = TriggerCreate("libPEEP_gt_PulldownsTurfMarkerSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldowns: Turf Symbol Type
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownsTurfSymbolType_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[1])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfSymbolTypeSelections[1] = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTurfSymbolTypeIndexList[DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer)];
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfSymbolTypePulldowns[2])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfSymbolTypeSelections[2] = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTurfSymbolTypeIndexList[DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer)];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownsTurfSymbolType_Init () {
    libPEEP_gt_PulldownsTurfSymbolType = TriggerCreate("libPEEP_gt_PulldownsTurfSymbolType_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldowns: Turf Symbol Spawn
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownsTurfSymbolSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[1])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfSymbolSpawnSelections[1] = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_diTurfSymbolSpawnPulldowns[2])) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankTurfSymbolSpawnSelections[2] = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownsTurfSymbolSpawn_Init () {
    libPEEP_gt_PulldownsTurfSymbolSpawn = TriggerCreate("libPEEP_gt_PulldownsTurfSymbolSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Update Chat
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicUpdateChat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshChat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicUpdateChat_Init () {
    libPEEP_gt_PeriodicUpdateChat = TriggerCreate("libPEEP_gt_PeriodicUpdateChat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat: Any message
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ChatAnymessage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_boolSpecialCommandEntered;
    int lv_intPlayer;
    string lv_strChatString;
    text lv_txtMessage;
    text lv_txtTemp;
    string lv_strChar;
    string lv_strPetName;
    int lv_intPetIndex;
    string lv_strFirstChars;
    string lv_strFirstChars2;
    bool lv_boolError;
    bool lv_boolValidCommand;
    int lv_intTmpPlayer;
    int lv_intStartPosition;
    int lv_intTmpVal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_strChatString = EventChatMessage(false);
    lv_strChar = "";
    lv_strPetName = "";
    lv_strFirstChars = "";
    lv_strFirstChars2 = "";

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringReplaceWord(lv_strChatString, " ", "", c_stringReplaceAll, c_stringNoCase) != "")) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSilenced == true) && (lv_intPlayer != libPEEP_gv_recGlobals.lv_intDebugPlayer))) {
            libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_26E07A0E")), lv_intPlayer, false, false);
        }
        else {
            if ((StringSub(lv_strChatString, 1, 1) == "@")) {
                lv_boolSpecialCommandEntered = true;
                lv_intTmpPlayer = StringToInt(StringSub(lv_strChatString, 2, 3));
                if ((lv_intTmpPlayer >= 10)) {
                    lv_intStartPosition = 5;
                }
                else {
                    lv_intStartPosition = 4;
                }
                lv_txtMessage = StringToText(libPEEP_gf_replaceSpecialChars(StringSub(lv_strChatString, lv_intStartPosition, 255)));
                if (((lv_intTmpPlayer <= 0) || (lv_intTmpPlayer == lv_intPlayer) || (lv_intTmpPlayer > libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS) || (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolInactive == true))) {
                    libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_6F20922E"), lv_intPlayer, false, false);
                }
                else {
                    if (((libPEEP_gv_recGameState.lv_boolVotableAllowChat == true) || (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == false) || (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) || (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer))) {
                        libPEEP_gf_CreateChatMessage(lv_intPlayer, lv_txtMessage, lv_intTmpPlayer, false, false);
                    }
                    else {
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_CE5A01DD"), lv_intPlayer, false, false);
                    }
                }
            }
            else {
                if (((StringSub(lv_strChatString, 1, 1) == ".") && (StringSub(lv_strChatString, 2, 2) != "."))) {
                    lv_boolSpecialCommandEntered = true;
                    lv_strFirstChars = StringSub(lv_strChatString, 1, 9);
                    lv_strFirstChars2 = StringSub(lv_strChatString, 1, 8);
                    if (((StringSub(lv_strChatString, 1, 5) == ".all ") || (StringSub(lv_strChatString, 1, 5) == ".ALL ") || (StringSub(lv_strChatString, 1, 3) == ".a "))) {
                        lv_boolValidCommand = true;
                        lv_txtMessage = StringToText(StringSub(lv_strChatString, 6, 255));
                        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
                            libPEEP_gf_CreateChatMessage(lv_intPlayer, lv_txtMessage, 0, true, false);
                        }
                        else {
                            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_A924C787"), lv_intPlayer, false, false);
                        }
                    }
                    else if (((lv_strChatString == ".pethome") || (lv_strChatString == ".PETHOME"))) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_MakePetsReturnHomeforPlayer(lv_intPlayer);
                    }
                    else if (((StringSub(lv_strChatString, 1, 10) == ".petspeak ") || (StringSub(lv_strChatString, 1, 10) == ".PETSPEAK "))) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_MakePetUtterXforPlayer(lv_intPlayer, StringSub(lv_strChatString, 11, 255));
                    }
                    else if (((lv_strFirstChars == ".petname1") || (lv_strFirstChars == ".PETNAME1") || (lv_strFirstChars == ".petname2") || (lv_strFirstChars == ".PETNAME2"))) {
                        lv_boolValidCommand = true;
                        lv_intPetIndex = StringToInt(StringSub(lv_strChatString, 9, 9));
                        if (((lv_intPetIndex <= 0) || (lv_intPetIndex > 2))) {
                            lv_intPetIndex = 1;
                        }

                        lv_strPetName = StringSub(lv_strChatString, 11, 24);
                        libPEEP_gf_RenamePlayerPet(lv_intPlayer, lv_intPetIndex, lv_strPetName);
                    }
                    else if (((lv_strFirstChars2 == ".petname") || (lv_strFirstChars2 == ".PETNAME"))) {
                        lv_boolValidCommand = true;
                        lv_intPetIndex = 1;
                        lv_strPetName = StringSub(lv_strChatString, 10, 23);
                        libPEEP_gf_RenamePlayerPet(lv_intPlayer, lv_intPetIndex, lv_strPetName);
                    }
                    else if ((lv_strChatString == ".dance")) {
                        lv_boolValidCommand = true;
                        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit != null)) {
                            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit), c_animNameDefault, "Dance", 0, c_animTimeDefault);
                        }

                    }
                    else if ((lv_strChatString == ".cheer")) {
                        lv_boolValidCommand = true;
                        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit != null)) {
                            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit), c_animNameDefault, "Victory", 0, c_animTimeDefault);
                        }

                    }
                    else if ((lv_strChatString == ".savebank")) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_SaveBankforPlayer(lv_intPlayer);
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_D4A3A0C6"), lv_intPlayer, false, false);
                    }
                    else if ((lv_strChatString == ".loadbank")) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_LoadBankforPlayer(lv_intPlayer);
                        libPEEP_gf_RefreshLeaderboardforPlayer(lv_intPlayer, 2, false);
                        libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intPlayer);
                        libPEEP_gf_RefreshStoreDialogforPlayer(lv_intPlayer);
                        libPEEP_gf_RefreshPetUIforPlayer(lv_intPlayer);
                        libPEEP_gf_RefreshTurfMarkerUIforPlayer(lv_intPlayer);
                        libPEEP_gf_RefreshTurfSymbolUIforPlayer(lv_intPlayer);
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_E127751D"), lv_intPlayer, false, false);
                    }
                    else if ((lv_strChatString == ".nodebug")) {
                        lv_boolValidCommand = true;
                        libPEEP_gv_recGlobals.lv_intDebugPlayer = -1;
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_F5F1C6A9"), lv_intPlayer, false, false);
                    }
                    else if ((lv_strChatString == ".shutofflogevents")) {
                        lv_boolValidCommand = true;
                        libPEEP_gv_recGlobals.lv_boolDebugShutoffLogEvents = true;
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_365E1103"), lv_intPlayer, false, false);
                    }
                    else if ((lv_strChatString == ".turnonlogevents")) {
                        lv_boolValidCommand = true;
                        libPEEP_gv_recGlobals.lv_boolDebugShutoffLogEvents = false;
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_3DC17836"), lv_intPlayer, false, false);
                    }
                    else if ((lv_strChatString == ".shutoffcamevents")) {
                        lv_boolValidCommand = true;
                        libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents = true;
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_4ED94DBB"), lv_intPlayer, false, false);
                    }
                    else if ((lv_strChatString == ".turnoncamevents")) {
                        lv_boolValidCommand = true;
                        libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents = false;
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_56050BE0"), lv_intPlayer, false, false);
                    }
                    else if (((StringSub(lv_strChatString, 1, 6) == ".prank") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_RunPrankfromPlayer(lv_intPlayer, StringToInt(StringSub(lv_strChatString, 7, 10)));
                    }
                    else if (((lv_strChatString == ".cp") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_ClearAllPrankEntities();
                    }
                    else if (((StringSub(lv_strChatString, 1, 9) == ".peepcash") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        lv_intTmpVal = StringToInt(StringSub(lv_strChatString, 11, 30));
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsInAccount += lv_intTmpVal;
                        libPEEP_gf_RefreshStoreDialogforPlayer(lv_intPlayer);
                        libPEEP_gf_RefreshDashboardforPlayer(lv_intPlayer);
                        libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_5058FBCD") + libPEEP_gf_formatIntegerAsText(lv_intTmpVal)), lv_intPlayer, false, false);
                    }
                    else if (((lv_strChatString == ".peepchips") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        TriggerExecute(libPEEP_gt_DEVETSTMorechips, true, false);
                    }
                    else if (((lv_strChatString == ".dummies") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_CreateDummyPlayers();
                    }
                    else if (((StringSub(lv_strChatString, 1, 6) == ".kick ") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        lv_intTmpPlayer = StringToInt(StringSub(lv_strChatString, 7, 9));
                        libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolKicked = true;
                        GameOver(lv_intTmpPlayer, c_gameOverTie, false, true);
                        libPEEP_gf_CreateChatMessage(0, (TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false))) + StringExternal("Param/Value/lib_PEEP_CFF1DABD")), 0, false, false);
                    }
                    else if (((StringSub(lv_strChatString, 1, 6) == ".kill ") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_RemovePlayerfromMatch(StringToInt(StringSub(lv_strChatString, 7, 9)));
                    }
                    else if (((lv_strChatString == ".alliance") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_1F8CE425"), lv_intPlayer, false, false);
                        libPEEP_gf_SetTeamAlliancesVision();
                    }
                    else if (((StringSub(lv_strChatString, 1, 9) == ".silence ") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        lv_intTmpPlayer = StringToInt(StringSub(lv_strChatString, 10, 12));
                        libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolSilenced = true;
                        libPEEP_gf_CreateChatMessage(0, (TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false))) + StringExternal("Param/Value/lib_PEEP_C66DC141")), lv_intPlayer, false, false);
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_A2A421C7"), lv_intTmpPlayer, false, false);
                    }
                    else if (((StringSub(lv_strChatString, 1, 11) == ".unsilence ") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        lv_intTmpPlayer = StringToInt(StringSub(lv_strChatString, 12, 14));
                        libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolSilenced = false;
                        libPEEP_gf_CreateChatMessage(0, (TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false))) + StringExternal("Param/Value/lib_PEEP_5C6974CE")), lv_intPlayer, false, false);
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_CBCC7331"), lv_intTmpPlayer, false, false);
                    }
                    else if (((StringSub(lv_strChatString, 1, 7) == ".prove ") && ((libPEEP_gv_recGlobals.lv_boolDebugMode == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer)))) {
                        lv_boolValidCommand = true;
                        lv_intTmpPlayer = StringToInt(StringSub(lv_strChatString, 8, 10));
                        libPEEP_gf_CreateChatMessage(0, (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_E2336247")), lv_intTmpPlayer, false, false);
                        libPEEP_gf_CreateChatMessage(0, (TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false))) + StringExternal("Param/Value/lib_PEEP_A052839B")), lv_intTmpPlayer, false, false);
                    }
                    else if ((((StringSub(lv_strChatString, 1, 8) == ".ignore ") && (StringToInt(StringSub(lv_strChatString, 9, 11)) < 17) && (StringToInt(StringSub(lv_strChatString, 9, 11)) > 0)))) {
                        lv_boolValidCommand = true;
                        lv_intTmpPlayer = StringToInt(StringSub(lv_strChatString, 9, 11));
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayerIsIgnored[lv_intTmpPlayer] = true;
                        libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_DC05A876") + TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false)))), lv_intTmpPlayer, false, false);
                    }
                    else if ((((StringSub(lv_strChatString, 1, 10) == ".unignore ") && (StringToInt(StringSub(lv_strChatString, 11, 13)) < 17) && (StringToInt(StringSub(lv_strChatString, 11, 13)) > 0)))) {
                        lv_boolValidCommand = true;
                        lv_intTmpPlayer = StringToInt(StringSub(lv_strChatString, 11, 13));
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayerIsIgnored[lv_intTmpPlayer] = false;
                        libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_E1D9B220") + TextWithColor(PlayerName(lv_intTmpPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intTmpPlayer, false)))), lv_intTmpPlayer, false, false);
                    }
                    else if ((lv_strChatString == ".disablef11")) {
                        lv_boolValidCommand = true;
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDisableF11 = true;
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_611EC250"), lv_intPlayer, false, false);
                    }
                    if ((lv_boolValidCommand == false)) {
                        libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_74DF15ED"), lv_intPlayer, false, false);
                    }

                }
                else {
                    if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (StringCase(lv_strChatString, false) == "gg"))) {
                        DialogSetVisible(libPEEP_gv_recUI.lv_dSurrenderDialog, PlayerGroupSingle(lv_intPlayer), true);
                    }
                    else {
                        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (StringCase(lv_strChatString, false) == "ggs"))) {
                            lv_boolSpecialCommandEntered = true;
                            DialogSetVisible(libPEEP_gv_recUI.lv_dSurrenderDialog, PlayerGroupSingle(lv_intPlayer), true);
                        }

                    }
                }
            }
            if ((lv_boolSpecialCommandEntered == false)) {
                lv_txtMessage = StringToText(libPEEP_gf_replaceSpecialChars(lv_strChatString));
                libPEEP_gf_CreateChatMessage(lv_intPlayer, lv_txtMessage, 0, false, false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ChatAnymessage_Init () {
    libPEEP_gt_ChatAnymessage = TriggerCreate("libPEEP_gt_ChatAnymessage_Func");
    TriggerEnable(libPEEP_gt_ChatAnymessage, false);
    TriggerAddEventChatMessage(libPEEP_gt_ChatAnymessage, c_playerAny, "", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Chat Help Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXChatHelpDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXChatHelpDialog_Init () {
    libPEEP_gt_ButtonXChatHelpDialog = TriggerCreate("libPEEP_gt_ButtonXChatHelpDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Chat Log Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXChatLogDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dChatLogDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXChatLogDialog_Init () {
    libPEEP_gt_ButtonXChatLogDialog = TriggerCreate("libPEEP_gt_ButtonXChatLogDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Chat Refresh
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonChatRefresh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshChatLogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonChatRefresh_Init () {
    libPEEP_gt_ButtonChatRefresh = TriggerCreate("libPEEP_gt_ButtonChatRefresh_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Chat Help
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonChatHelp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, lv_intPlayer) == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lv_intPlayer), false);
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lv_intPlayer), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonChatHelp_Init () {
    libPEEP_gt_ButtonChatHelp = TriggerCreate("libPEEP_gt_ButtonChatHelp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Chat Log Check All
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxChatLogCheckAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    bool lv_chChecked;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int auto91EB1D05_ae;
    const int auto91EB1D05_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diChatLogPlayerCheckAll, lv_intPlayer) == true)) {
        lv_chChecked = true;
    }
    else {
        lv_chChecked = false;
    }
    auto91EB1D05_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 0;
    for ( ; ( (auto91EB1D05_ai >= 0 && lv_intTmpPlayer <= auto91EB1D05_ae) || (auto91EB1D05_ai < 0 && lv_intTmpPlayer >= auto91EB1D05_ae) ) ; lv_intTmpPlayer += auto91EB1D05_ai ) {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diChatLogPlayerCheckboxes[lv_intTmpPlayer], lv_chChecked, PlayerGroupSingle(lv_intPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxChatLogCheckAll_Init () {
    libPEEP_gt_CheckboxChatLogCheckAll = TriggerCreate("libPEEP_gt_CheckboxChatLogCheckAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buttons: Commentator Team Vote
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonsCommentatorTeamVote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intTeamVotedFor;
    int lv_intPlayer;
    text lv_txtText;

    // Automatic Variable Declarations
    int autoEE0E2E43_ae;
    const int autoEE0E2E43_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoEE0E2E43_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intIndex = 1;
    for ( ; ( (autoEE0E2E43_ai >= 0 && lv_intIndex <= autoEE0E2E43_ae) || (autoEE0E2E43_ai < 0 && lv_intIndex >= autoEE0E2E43_ae) ) ; lv_intIndex += autoEE0E2E43_ai ) {
        if ((EventDialogControl() == libPEEP_gv_recUI.lv_diCommentatorChoiceTeamButtons[lv_intIndex])) {
            lv_intTeamVotedFor = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCommentatorChoiceTeamList[lv_intIndex];
            libPEEP_gv_recTeams[lv_intTeamVotedFor].lv_intCommentatorVotes += 1;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intCommentatorChoiceNumTeamsSelected += 1;
            DialogControlSetEnabled(EventDialogControl(), PlayerGroupSingle(lv_intPlayer), false);
            lv_txtText = (IntToText(libPEEP_gv_recTeams[lv_intTeamVotedFor].lv_intCommentatorVotes) + StringExternal("Param/Value/lib_PEEP_2846690E"));
            if ((libPEEP_gv_recTeams[lv_intTeamVotedFor].lv_intCommentatorVotes != 1)) {
                lv_txtText = (lv_txtText + StringExternal("Param/Value/lib_PEEP_0A04F8B5"));
            }

            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCommentatorChoiceTeamVotesLabels[lv_intIndex], lv_txtText, PlayerGroupAll());
            break;
        }

    }
    libPEEP_gf_RefreshCommentatorChoiceControls();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonsCommentatorTeamVote_Init () {
    libPEEP_gt_ButtonsCommentatorTeamVote = TriggerCreate("libPEEP_gt_ButtonsCommentatorTeamVote_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Commentator Defer Vote
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonCommentatorDeferVote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intCommentatorChoiceNumTeamsSelected = libPEEP_gv_recGlobals.lv_intMaxTeamsForNextMatch;
    libPEEP_gf_RefreshCommentatorChoiceControls();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonCommentatorDeferVote_Init () {
    libPEEP_gt_ButtonCommentatorDeferVote = TriggerCreate("libPEEP_gt_ButtonCommentatorDeferVote_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Commentator Choice Ends
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerCommentatorChoiceEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    DialogSetVisible(libPEEP_gv_recUI.lv_dCommentatorChoiceDialog, PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, StringToText(""), PlayerGroupAll());
    libPEEP_gf_RefreshTeamSelectionList();
    libPEEP_gf_CalculateTeamSelections(libPEEP_gv_recGameState.lv_intCurrentMatchMode, true);
    TimerStart(libPEEP_gv_recGlobals.lv_timerFaceoffTransitionStart, 0.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerCommentatorChoiceEnds_Init () {
    libPEEP_gt_TimerCommentatorChoiceEnds = TriggerCreate("libPEEP_gt_TimerCommentatorChoiceEnds_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerCommentatorChoiceEnds, libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Commentator Choice Countdown
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicCommentatorChoiceCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_txtText;
    int lv_intTeam;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoC2AB89D6_ae;
    const int autoC2AB89D6_ai = 1;
    int auto9C9B8B2C_ae;
    const int auto9C9B8B2C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer) > 0.0) && (TimerIsPaused(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer) == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_txtText = (StringExternal("Param/Value/lib_PEEP_17B03585") + TextWithColor(libPEEP_gf_formatIntegerAsText(FixedToInt(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer))), (Color(100.00, 0.00, 0.00))));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diCommentatorChoiceCountdownLabel, lv_txtText, PlayerGroupAll());
    libPEEP_gf_RefreshCommentatorChoiceControls();
    autoC2AB89D6_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (autoC2AB89D6_ai >= 0 && lv_intTeam <= autoC2AB89D6_ae) || (autoC2AB89D6_ai < 0 && lv_intTeam >= autoC2AB89D6_ae) ) ; lv_intTeam += autoC2AB89D6_ai ) {
        if ((libPEEP_gv_recTeams[lv_intTeam].lv_boolEligibleForMatch == true)) {
            auto9C9B8B2C_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
            lv_intPlayer = 1;
            for ( ; ( (auto9C9B8B2C_ai >= 0 && lv_intPlayer <= auto9C9B8B2C_ae) || (auto9C9B8B2C_ai < 0 && lv_intPlayer >= auto9C9B8B2C_ae) ) ; lv_intPlayer += auto9C9B8B2C_ai ) {
                UnitFlashSelection(libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intPlayer]].lv_uFaceoffUnit, 0.5);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicCommentatorChoiceCountdown_Init () {
    libPEEP_gt_PeriodicCommentatorChoiceCountdown = TriggerCreate("libPEEP_gt_PeriodicCommentatorChoiceCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Floating Icons - Unit Production (Create)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_FloatingIconsUnitProductionCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    unit lv_uUnit;
    string lv_glTrainee;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_uUnit = EventUnit();
    lv_glTrainee = libNtve_gf_TriggeringProgressUnitType();

    // Conditions
    if (testConds) {
        if (!((lv_glTrainee != "Baneling"))) {
            return false;
        }

        if (!((lv_glTrainee != "Interceptor"))) {
            return false;
        }

        if (!((lv_glTrainee != "Broodling"))) {
            return false;
        }

        if (!((lv_glTrainee != "BroodlingEscort"))) {
            return false;
        }

        if (!((lv_glTrainee != "LocustMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, lv_glTrainee, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_FloatingIconsUnitProductionCreate_Init () {
    libPEEP_gt_FloatingIconsUnitProductionCreate = TriggerCreate("libPEEP_gt_FloatingIconsUnitProductionCreate_Func");
    TriggerEnable(libPEEP_gt_FloatingIconsUnitProductionCreate, false);
    TriggerAddEventUnitTrainProgress(libPEEP_gt_FloatingIconsUnitProductionCreate, null, c_unitProgressStageStart);
    TriggerAddEventUnitArmMagazineProgress(libPEEP_gt_FloatingIconsUnitProductionCreate, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(libPEEP_gt_FloatingIconsUnitProductionCreate, null, c_unitProgressStageResume);
    TriggerAddEventUnitArmMagazineProgress(libPEEP_gt_FloatingIconsUnitProductionCreate, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Floating Icons - Unit Production (Destroy)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_FloatingIconsUnitProductionDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    unit lv_uUnit;
    string lv_glTrainee;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_uUnit = EventUnit();
    lv_glTrainee = libNtve_gf_TriggeringProgressUnitType();

    // Conditions
    if (testConds) {
        if (!((lv_glTrainee != "Baneling"))) {
            return false;
        }

        if (!((lv_glTrainee != "Interceptor"))) {
            return false;
        }

        if (!((lv_glTrainee != "CreepTumor"))) {
            return false;
        }

        if (!((lv_glTrainee != "LocustMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, lv_glTrainee, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_FloatingIconsUnitProductionDestroy_Init () {
    libPEEP_gt_FloatingIconsUnitProductionDestroy = TriggerCreate("libPEEP_gt_FloatingIconsUnitProductionDestroy_Func");
    TriggerEnable(libPEEP_gt_FloatingIconsUnitProductionDestroy, false);
    TriggerAddEventUnitTrainProgress(libPEEP_gt_FloatingIconsUnitProductionDestroy, null, c_unitProgressStageCancel);
    TriggerAddEventUnitTrainProgress(libPEEP_gt_FloatingIconsUnitProductionDestroy, null, c_unitProgressStageComplete);
    TriggerAddEventUnitTrainProgress(libPEEP_gt_FloatingIconsUnitProductionDestroy, null, c_unitProgressStagePause);
    TriggerAddEventUnitArmMagazineProgress(libPEEP_gt_FloatingIconsUnitProductionDestroy, null, c_unitProgressStageComplete);
    TriggerAddEventUnitArmMagazineProgress(libPEEP_gt_FloatingIconsUnitProductionDestroy, null, c_unitProgressStagePause);
    TriggerAddEventUnitArmMagazineProgress(libPEEP_gt_FloatingIconsUnitProductionDestroy, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Floating Icons - Research (Create)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_FloatingIconsResearchCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    unit lv_uUnit;
    string lv_glResearch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_uUnit = EventUnit();
    lv_glResearch = libNtve_gf_TriggeringProgressUpgrade();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, null, lv_glResearch);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_FloatingIconsResearchCreate_Init () {
    libPEEP_gt_FloatingIconsResearchCreate = TriggerCreate("libPEEP_gt_FloatingIconsResearchCreate_Func");
    TriggerEnable(libPEEP_gt_FloatingIconsResearchCreate, false);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_FloatingIconsResearchCreate, null, c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_FloatingIconsResearchCreate, null, c_unitProgressStageResume);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Floating Icons - Research (Destroy)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_FloatingIconsResearchDestroy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_glResearch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_glResearch = libNtve_gf_TriggeringProgressUpgrade();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, null, lv_glResearch);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_FloatingIconsResearchDestroy_Init () {
    libPEEP_gt_FloatingIconsResearchDestroy = TriggerCreate("libPEEP_gt_FloatingIconsResearchDestroy_Func");
    TriggerEnable(libPEEP_gt_FloatingIconsResearchDestroy, false);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_FloatingIconsResearchDestroy, null, c_unitProgressStageCancel);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_FloatingIconsResearchDestroy, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_FloatingIconsResearchDestroy, null, c_unitProgressStagePause);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Show Fair Message Log
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonShowFairMessageLog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonShowFairMessageLog_Init () {
    libPEEP_gt_ButtonShowFairMessageLog = TriggerCreate("libPEEP_gt_ButtonShowFairMessageLog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Section
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownSection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intPlayer;
    int lv_intSelection;
    text lv_txtMessage;

    // Automatic Variable Declarations
    const int auto19CF538A_ae = 10;
    const int auto19CF538A_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSelection = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diHelpLabel, StringToText(""), PlayerGroupSingle(lv_intPlayer));
    libNtve_gf_SetDialogItemCurrentValue(libPEEP_gv_recUI.lv_diHelpSlider, 0.0, PlayerGroupSingle(lv_intPlayer));
    lv_intIndex = 1;
    for ( ; ( (auto19CF538A_ai >= 0 && lv_intIndex <= auto19CF538A_ae) || (auto19CF538A_ai < 0 && lv_intIndex >= auto19CF538A_ae) ) ; lv_intIndex += auto19CF538A_ai ) {
        lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_142E25FB") + libPEEP_gv_recGlobals.lv_recHelpTopics[lv_intSelection].lv_txtContent[lv_intIndex] + StringExternal("Param/Value/lib_PEEP_2A3CA693"));
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diHelpLabel, lv_txtMessage, PlayerGroupSingle(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownSection_Init () {
    libPEEP_gt_PulldownSection = TriggerCreate("libPEEP_gt_PulldownSection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slider: Help Scroll
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_SliderHelpScroll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libPEEP_gv_recUI.lv_diHelpSlider))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intY = (FixedToInt(libNtve_gf_DialogItemMaximumValue(libPEEP_gv_recUI.lv_diHelpSlider, lv_intPlayer)) - FixedToInt(libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diHelpSlider, lv_intPlayer)));
    lv_intY = (lv_intY - 500);
    lv_intY = FixedToInt((IntToFixed(lv_intY) * libPEEP_gv_recGlobals.lv_recHelpTopics[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diHelpPulldown, lv_intPlayer)].lv_realHeightMultiplier));
    lv_intY = (lv_intY - 30);
    DialogControlSetPosition(libPEEP_gv_recUI.lv_diHelpLabel, PlayerGroupSingle(lv_intPlayer), c_anchorTopLeft, 0, lv_intY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_SliderHelpScroll_Init () {
    libPEEP_gt_SliderHelpScroll = TriggerCreate("libPEEP_gt_SliderHelpScroll_Func");
    TriggerEnable(libPEEP_gt_SliderHelpScroll, false);
    TriggerAddEventDialogControl(libPEEP_gt_SliderHelpScroll, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Help Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXHelpDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog2, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedHelp = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXHelpDialog_Init () {
    libPEEP_gt_ButtonXHelpDialog = TriggerCreate("libPEEP_gt_ButtonXHelpDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Skip Tutorial
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonSkipTutorial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_SkipTutorialforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonSkipTutorial_Init () {
    libPEEP_gt_ButtonSkipTutorial = TriggerCreate("libPEEP_gt_ButtonSkipTutorial_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: End Tutorial
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerEndTutorial_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_GameInitAfterTutorial();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerEndTutorial_Init () {
    libPEEP_gt_TimerEndTutorial = TriggerCreate("libPEEP_gt_TimerEndTutorial_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerEndTutorial, libPEEP_gv_recGlobals.lv_timerTutorial);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Tutorial Cooldown
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicTutorialCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_D20BF93C") + TextWithColor(libPEEP_gf_formatIntegerAsText(FixedToInt(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerTutorial))), (Color(100.00, 0.00, 0.00))));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diTutorialCooldownLabel, lv_txtMessage, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicTutorialCooldown_Init () {
    libPEEP_gt_PeriodicTutorialCooldown = TriggerCreate("libPEEP_gt_PeriodicTutorialCooldown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-N (Name Panel)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltNNamePanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, lv_intPlayer) == true)) {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, false, PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, true, PlayerGroupSingle(lv_intPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltNNamePanel_Init () {
    libPEEP_gt_KeyAltNNamePanel = TriggerCreate("libPEEP_gt_KeyAltNNamePanel_Func");
    TriggerEnable(libPEEP_gt_KeyAltNNamePanel, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltNNamePanel, c_playerAny, c_keyN, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Alt-N (Customize Name Panel)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlAltNCustomizeNamePanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonCustomizeNamePanel, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlAltNCustomizeNamePanel_Init () {
    libPEEP_gt_KeyCtrlAltNCustomizeNamePanel = TriggerCreate("libPEEP_gt_KeyCtrlAltNCustomizeNamePanel_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlAltNCustomizeNamePanel, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlAltNCustomizeNamePanel, c_playerAny, c_keyN, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-Q (Quick Panel)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltQQuickPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonQuickPanel, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltQQuickPanel_Init () {
    libPEEP_gt_KeyAltQQuickPanel = TriggerCreate("libPEEP_gt_KeyAltQQuickPanel_Func");
    TriggerEnable(libPEEP_gt_KeyAltQQuickPanel, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltQQuickPanel, c_playerAny, c_keyQ, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-Y (Structures Panel)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltYStructuresPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton == 1))) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb.dds", PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb_glow.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), true);
        TriggerExecute(libPEEP_gt_ButtonStructures, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltYStructuresPanel_Init () {
    libPEEP_gt_KeyAltYStructuresPanel = TriggerCreate("libPEEP_gt_KeyAltYStructuresPanel_Func");
    TriggerEnable(libPEEP_gt_KeyAltYStructuresPanel, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltYStructuresPanel, c_playerAny, c_keyY, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-U (Research Panel)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltUResearchPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton == 2))) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb.dds", PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb_glow.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), true);
        TriggerExecute(libPEEP_gt_ButtonResearch, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltUResearchPanel_Init () {
    libPEEP_gt_KeyAltUResearchPanel = TriggerCreate("libPEEP_gt_KeyAltUResearchPanel_Func");
    TriggerEnable(libPEEP_gt_KeyAltUResearchPanel, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltUResearchPanel, c_playerAny, c_keyU, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-I (Resources)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltIResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton == 3))) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb.dds", PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb_glow.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), true);
        TriggerExecute(libPEEP_gt_ButtonResources, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltIResources_Init () {
    libPEEP_gt_KeyAltIResources = TriggerCreate("libPEEP_gt_KeyAltIResources_Func");
    TriggerEnable(libPEEP_gt_KeyAltIResources, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltIResources, c_playerAny, c_keyI, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-A (Supply)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltASupply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton == 4))) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb.dds", PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb_glow.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), true);
        TriggerExecute(libPEEP_gt_ButtonSupplies, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltASupply_Init () {
    libPEEP_gt_KeyAltASupply = TriggerCreate("libPEEP_gt_KeyAltASupply_Func");
    TriggerEnable(libPEEP_gt_KeyAltASupply, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltASupply, c_playerAny, c_keyA, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-R (Units Killed)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltRUnitsKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton == 5))) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb.dds", PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb_glow.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), true);
        TriggerExecute(libPEEP_gt_ButtonKilled, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltRUnitsKilled_Init () {
    libPEEP_gt_KeyAltRUnitsKilled = TriggerCreate("libPEEP_gt_KeyAltRUnitsKilled_Func");
    TriggerEnable(libPEEP_gt_KeyAltRUnitsKilled, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltRUnitsKilled, c_playerAny, c_keyR, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-V (APM)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltVAPM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton == 6))) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb.dds", PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb_glow.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), true);
        TriggerExecute(libPEEP_gt_ButtonAPM, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltVAPM_Init () {
    libPEEP_gt_KeyAltVAPM = TriggerCreate("libPEEP_gt_KeyAltVAPM_Func");
    TriggerEnable(libPEEP_gt_KeyAltVAPM, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltVAPM, c_playerAny, c_keyV, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-0 (Observe Everyone)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt0ObserveEveryone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt0ObserveEveryone_Init () {
    libPEEP_gt_KeyAlt0ObserveEveryone = TriggerCreate("libPEEP_gt_KeyAlt0ObserveEveryone_Func");
    TriggerEnable(libPEEP_gt_KeyAlt0ObserveEveryone, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt0ObserveEveryone, c_playerAny, c_key0, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-1 (Observe Item 1)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt1ObserveItem1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 1;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt1ObserveItem1_Init () {
    libPEEP_gt_KeyAlt1ObserveItem1 = TriggerCreate("libPEEP_gt_KeyAlt1ObserveItem1_Func");
    TriggerEnable(libPEEP_gt_KeyAlt1ObserveItem1, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt1ObserveItem1, c_playerAny, c_key1, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-2 (Observe Item 2)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt2ObserveItem2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 2;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt2ObserveItem2_Init () {
    libPEEP_gt_KeyAlt2ObserveItem2 = TriggerCreate("libPEEP_gt_KeyAlt2ObserveItem2_Func");
    TriggerEnable(libPEEP_gt_KeyAlt2ObserveItem2, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt2ObserveItem2, c_playerAny, c_key2, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-3 (Observe Item 3)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt3ObserveItem3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 3;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt3ObserveItem3_Init () {
    libPEEP_gt_KeyAlt3ObserveItem3 = TriggerCreate("libPEEP_gt_KeyAlt3ObserveItem3_Func");
    TriggerEnable(libPEEP_gt_KeyAlt3ObserveItem3, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt3ObserveItem3, c_playerAny, c_key3, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-4 (Observe Item 4)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt4ObserveItem4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 4;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt4ObserveItem4_Init () {
    libPEEP_gt_KeyAlt4ObserveItem4 = TriggerCreate("libPEEP_gt_KeyAlt4ObserveItem4_Func");
    TriggerEnable(libPEEP_gt_KeyAlt4ObserveItem4, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt4ObserveItem4, c_playerAny, c_key4, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-5 (Observe Item 5)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt5ObserveItem5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 5;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt5ObserveItem5_Init () {
    libPEEP_gt_KeyAlt5ObserveItem5 = TriggerCreate("libPEEP_gt_KeyAlt5ObserveItem5_Func");
    TriggerEnable(libPEEP_gt_KeyAlt5ObserveItem5, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt5ObserveItem5, c_playerAny, c_key5, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-6 (Observe Item 6)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt6ObserveItem6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 6;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt6ObserveItem6_Init () {
    libPEEP_gt_KeyAlt6ObserveItem6 = TriggerCreate("libPEEP_gt_KeyAlt6ObserveItem6_Func");
    TriggerEnable(libPEEP_gt_KeyAlt6ObserveItem6, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt6ObserveItem6, c_playerAny, c_key6, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-7 (Observe Item 7)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt7ObserveItem7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 7;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt7ObserveItem7_Init () {
    libPEEP_gt_KeyAlt7ObserveItem7 = TriggerCreate("libPEEP_gt_KeyAlt7ObserveItem7_Func");
    TriggerEnable(libPEEP_gt_KeyAlt7ObserveItem7, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt7ObserveItem7, c_playerAny, c_key7, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-8 (Observe Item 8)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt8ObserveItem8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 8;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt8ObserveItem8_Init () {
    libPEEP_gt_KeyAlt8ObserveItem8 = TriggerCreate("libPEEP_gt_KeyAlt8ObserveItem8_Func");
    TriggerEnable(libPEEP_gt_KeyAlt8ObserveItem8, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt8ObserveItem8, c_playerAny, c_key8, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-9 (Observe Item 9)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAlt9ObserveItem9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intSelection;
    int lv_intPlayer;
    int lv_intKeyNum;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intKeyNum = 9;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelection = (lv_intKeyNum + 1);
    DialogControlSelectItem(libPEEP_gv_recUI.lv_diObserverVisionPulldown, PlayerGroupSingle(lv_intPlayer), lv_intSelection);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAlt9ObserveItem9_Init () {
    libPEEP_gt_KeyAlt9ObserveItem9 = TriggerCreate("libPEEP_gt_KeyAlt9ObserveItem9_Func");
    TriggerEnable(libPEEP_gt_KeyAlt9ObserveItem9, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAlt9ObserveItem9, c_playerAny, c_key9, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-R (Resources)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltRResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltRResources_Init () {
    libPEEP_gt_KeyShiftAltRResources = TriggerCreate("libPEEP_gt_KeyShiftAltRResources_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltRResources, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltRResources, c_playerAny, c_keyR, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-I (Income)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltIIncome_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltIIncome_Init () {
    libPEEP_gt_KeyShiftAltIIncome = TriggerCreate("libPEEP_gt_KeyShiftAltIIncome_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltIIncome, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltIIncome, c_playerAny, c_keyI, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-S (Spending)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltSSpending_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltSSpending_Init () {
    libPEEP_gt_KeyShiftAltSSpending = TriggerCreate("libPEEP_gt_KeyShiftAltSSpending_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltSSpending, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltSSpending, c_playerAny, c_keyS, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-U (Units)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltUUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltUUnits_Init () {
    libPEEP_gt_KeyShiftAltUUnits = TriggerCreate("libPEEP_gt_KeyShiftAltUUnits_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltUUnits, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltUUnits, c_playerAny, c_keyU, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-T (Structures)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltTStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltTStructures_Init () {
    libPEEP_gt_KeyShiftAltTStructures = TriggerCreate("libPEEP_gt_KeyShiftAltTStructures_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltTStructures, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltTStructures, c_playerAny, c_keyT, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-L (Units Lost)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltLUnitsLost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltLUnitsLost_Init () {
    libPEEP_gt_KeyShiftAltLUnitsLost = TriggerCreate("libPEEP_gt_KeyShiftAltLUnitsLost_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltLUnitsLost, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltLUnitsLost, c_playerAny, c_keyL, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-D (Production)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltDProduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltDProduction_Init () {
    libPEEP_gt_KeyShiftAltDProduction = TriggerCreate("libPEEP_gt_KeyShiftAltDProduction_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltDProduction, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltDProduction, c_playerAny, c_keyD, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-G (Upgrades)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltGUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltGUpgrades_Init () {
    libPEEP_gt_KeyShiftAltGUpgrades = TriggerCreate("libPEEP_gt_KeyShiftAltGUpgrades_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltGUpgrades, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltGUpgrades, c_playerAny, c_keyG, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-A (Active Forces)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltAActiveForces_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltAActiveForces_Init () {
    libPEEP_gt_KeyShiftAltAActiveForces = TriggerCreate("libPEEP_gt_KeyShiftAltAActiveForces_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltAActiveForces, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltAActiveForces, c_playerAny, c_keyA, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-M (APM)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltMAPM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltMAPM_Init () {
    libPEEP_gt_KeyShiftAltMAPM = TriggerCreate("libPEEP_gt_KeyShiftAltMAPM_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltMAPM, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltMAPM, c_playerAny, c_keyM, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-E (EPM)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltEEPM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltEEPM_Init () {
    libPEEP_gt_KeyShiftAltEEPM = TriggerCreate("libPEEP_gt_KeyShiftAltEEPM_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltEEPM, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltEEPM, c_playerAny, c_keyE, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Shift-Alt-C (EPM as well)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyShiftAltCEPMaswell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_OpenBlizzUIPanelforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyShiftAltCEPMaswell_Init () {
    libPEEP_gt_KeyShiftAltCEPMaswell = TriggerCreate("libPEEP_gt_KeyShiftAltCEPMaswell_Func");
    TriggerEnable(libPEEP_gt_KeyShiftAltCEPMaswell, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyShiftAltCEPMaswell, c_playerAny, c_keyC, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-W (Auto Cam)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltWAutoCam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, lv_intPlayer) == true)) {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, false, PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, true, PlayerGroupSingle(lv_intPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltWAutoCam_Init () {
    libPEEP_gt_KeyAltWAutoCam = TriggerCreate("libPEEP_gt_KeyAltWAutoCam_Func");
    TriggerEnable(libPEEP_gt_KeyAltWAutoCam, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltWAutoCam, c_playerAny, c_keyW, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-C (Cinematic Mode)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltCCinematicMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolFullscreenModeEngaged == false) && ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonCinematicMode, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltCCinematicMode_Init () {
    libPEEP_gt_KeyAltCCinematicMode = TriggerCreate("libPEEP_gt_KeyAltCCinematicMode_Func");
    TriggerEnable(libPEEP_gt_KeyAltCCinematicMode, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltCCinematicMode, c_playerAny, c_keyC, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-H (Logs)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltHLogs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonLogs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltHLogs_Init () {
    libPEEP_gt_KeyAltHLogs = TriggerCreate("libPEEP_gt_KeyAltHLogs_Func");
    TriggerEnable(libPEEP_gt_KeyAltHLogs, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltHLogs, c_playerAny, c_keyH, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-D (Blizzard UI)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltDBlizzardUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonBlizzUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltDBlizzardUI_Init () {
    libPEEP_gt_KeyAltDBlizzardUI = TriggerCreate("libPEEP_gt_KeyAltDBlizzardUI_Func");
    TriggerEnable(libPEEP_gt_KeyAltDBlizzardUI, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltDBlizzardUI, c_playerAny, c_keyD, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-B (Betting)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltBBetting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonBetting, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltBBetting_Init () {
    libPEEP_gt_KeyAltBBetting = TriggerCreate("libPEEP_gt_KeyAltBBetting_Func");
    TriggerEnable(libPEEP_gt_KeyAltBBetting, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltBBetting, c_playerAny, c_keyB, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-L (Leaderboard)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltLLeaderboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonLeaderboard, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltLLeaderboard_Init () {
    libPEEP_gt_KeyAltLLeaderboard = TriggerCreate("libPEEP_gt_KeyAltLLeaderboard_Func");
    TriggerEnable(libPEEP_gt_KeyAltLLeaderboard, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltLLeaderboard, c_playerAny, c_keyL, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-S (ResourcePanel)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltSResourcePanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonStats, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltSResourcePanel_Init () {
    libPEEP_gt_KeyAltSResourcePanel = TriggerCreate("libPEEP_gt_KeyAltSResourcePanel_Func");
    TriggerEnable(libPEEP_gt_KeyAltSResourcePanel, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltSResourcePanel, c_playerAny, c_keyS, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-M (Advanced Resource Panel)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltMAdvancedResourcePanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, lv_intPlayer) == true)) {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, false, PlayerGroupSingle(lv_intPlayer));
    }
    else {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, true, PlayerGroupSingle(lv_intPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltMAdvancedResourcePanel_Init () {
    libPEEP_gt_KeyAltMAdvancedResourcePanel = TriggerCreate("libPEEP_gt_KeyAltMAdvancedResourcePanel_Func");
    TriggerEnable(libPEEP_gt_KeyAltMAdvancedResourcePanel, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltMAdvancedResourcePanel, c_playerAny, c_keyM, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-Z (Zoom Out)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltZZoomOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonZoomOut, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltZZoomOut_Init () {
    libPEEP_gt_KeyAltZZoomOut = TriggerCreate("libPEEP_gt_KeyAltZZoomOut_Func");
    TriggerEnable(libPEEP_gt_KeyAltZZoomOut, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltZZoomOut, c_playerAny, c_keyZ, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-X (Zoom In)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltXZoomIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonZoomIn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltXZoomIn_Init () {
    libPEEP_gt_KeyAltXZoomIn = TriggerCreate("libPEEP_gt_KeyAltXZoomIn_Func");
    TriggerEnable(libPEEP_gt_KeyAltXZoomIn, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltXZoomIn, c_playerAny, c_keyX, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-U (Zoom Out)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftUZoomOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonZoomOut, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftUZoomOut_Init () {
    libPEEP_gt_KeyCtrlShiftUZoomOut = TriggerCreate("libPEEP_gt_KeyCtrlShiftUZoomOut_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftUZoomOut, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftUZoomOut, c_playerAny, c_keyU, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-O (Zoom In)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftOZoomIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonZoomIn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftOZoomIn_Init () {
    libPEEP_gt_KeyCtrlShiftOZoomIn = TriggerCreate("libPEEP_gt_KeyCtrlShiftOZoomIn_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftOZoomIn, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftOZoomIn, c_playerAny, c_keyO, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-J (Yaw Left)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftJYawLeft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CameraYawLeftforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftJYawLeft_Init () {
    libPEEP_gt_KeyCtrlShiftJYawLeft = TriggerCreate("libPEEP_gt_KeyCtrlShiftJYawLeft_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftJYawLeft, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftJYawLeft, c_playerAny, c_keyJ, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-L (Yaw Right)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftLYawRight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CameraYawRightforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftLYawRight_Init () {
    libPEEP_gt_KeyCtrlShiftLYawRight = TriggerCreate("libPEEP_gt_KeyCtrlShiftLYawRight_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftLYawRight, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftLYawRight, c_playerAny, c_keyL, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-I (Pitch Up)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftIPitchUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CameraPitchUpforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftIPitchUp_Init () {
    libPEEP_gt_KeyCtrlShiftIPitchUp = TriggerCreate("libPEEP_gt_KeyCtrlShiftIPitchUp_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftIPitchUp, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftIPitchUp, c_playerAny, c_keyI, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-K (Pitch Down)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftKPitchDown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CameraPitchDownforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftKPitchDown_Init () {
    libPEEP_gt_KeyCtrlShiftKPitchDown = TriggerCreate("libPEEP_gt_KeyCtrlShiftKPitchDown_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftKPitchDown, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftKPitchDown, c_playerAny, c_keyK, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-Y (Default Angle)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftYDefaultAngle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ResetCameratoDefaultAngleforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftYDefaultAngle_Init () {
    libPEEP_gt_KeyCtrlShiftYDefaultAngle = TriggerCreate("libPEEP_gt_KeyCtrlShiftYDefaultAngle_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftYDefaultAngle, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftYDefaultAngle, c_playerAny, c_keyY, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-H (Default View)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShiftHDefaultView_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ResetCameratoDefaultViewforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShiftHDefaultView_Init () {
    libPEEP_gt_KeyCtrlShiftHDefaultView = TriggerCreate("libPEEP_gt_KeyCtrlShiftHDefaultView_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShiftHDefaultView, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShiftHDefaultView, c_playerAny, c_keyH, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-1 (Auto Cam Style 1)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShift1AutoCamStyle1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupSingle(lv_intPlayer), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShift1AutoCamStyle1_Init () {
    libPEEP_gt_KeyCtrlShift1AutoCamStyle1 = TriggerCreate("libPEEP_gt_KeyCtrlShift1AutoCamStyle1_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShift1AutoCamStyle1, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShift1AutoCamStyle1, c_playerAny, c_key1, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-2 (Auto Cam Style 2)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShift2AutoCamStyle2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupSingle(lv_intPlayer), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShift2AutoCamStyle2_Init () {
    libPEEP_gt_KeyCtrlShift2AutoCamStyle2 = TriggerCreate("libPEEP_gt_KeyCtrlShift2AutoCamStyle2_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShift2AutoCamStyle2, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShift2AutoCamStyle2, c_playerAny, c_key2, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-3 (Auto Cam Style 3)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShift3AutoCamStyle3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupSingle(lv_intPlayer), 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShift3AutoCamStyle3_Init () {
    libPEEP_gt_KeyCtrlShift3AutoCamStyle3 = TriggerCreate("libPEEP_gt_KeyCtrlShift3AutoCamStyle3_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShift3AutoCamStyle3, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShift3AutoCamStyle3, c_playerAny, c_key3, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-4 (Auto Cam Style 4)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShift4AutoCamStyle4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupSingle(lv_intPlayer), 4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShift4AutoCamStyle4_Init () {
    libPEEP_gt_KeyCtrlShift4AutoCamStyle4 = TriggerCreate("libPEEP_gt_KeyCtrlShift4AutoCamStyle4_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShift4AutoCamStyle4, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShift4AutoCamStyle4, c_playerAny, c_key4, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Shift-5 (Auto Cam Style 5)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlShift5AutoCamStyle5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, PlayerGroupSingle(lv_intPlayer), 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlShift5AutoCamStyle5_Init () {
    libPEEP_gt_KeyCtrlShift5AutoCamStyle5 = TriggerCreate("libPEEP_gt_KeyCtrlShift5AutoCamStyle5_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlShift5AutoCamStyle5, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlShift5AutoCamStyle5, c_playerAny, c_key5, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-J (Map Analysis)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltJMapAnalysis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dSketchDialog, lv_intPlayer) == true)) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolMapAnalysisEngaged == false)) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolMapAnalysisEngaged = true;
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diSketchMapImage, "Assets\\Textures\\_base_extrastuff_col.dds", PlayerGroupAll());
            libPEEP_gf_HideTownhallIconsforPlayer(lv_intPlayer);
        }
        else {
            libPEEP_gf_DisengageSketchpadforPlayer(lv_intPlayer);
        }
    }
    else {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolMapAnalysisEngaged = true;
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diSketchMapImage, "Assets\\Textures\\_base_extrastuff_col.dds", PlayerGroupAll());
        libPEEP_gf_EngageSketchpadforPlayer(lv_intPlayer, true);
        libPEEP_gf_HideTownhallIconsforPlayer(lv_intPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltJMapAnalysis_Init () {
    libPEEP_gt_KeyAltJMapAnalysis = TriggerCreate("libPEEP_gt_KeyAltJMapAnalysis_Func");
    TriggerEnable(libPEEP_gt_KeyAltJMapAnalysis, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltJMapAnalysis, c_playerAny, c_keyJ, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-K (Map Overlay)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltKMapOverlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dSketchDialog, lv_intPlayer) == true)) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolMapAnalysisEngaged == true)) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolMapAnalysisEngaged = false;
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diSketchMapImage, "Assets\\Textures\\map_overlay.dds", PlayerGroupAll());
            libPEEP_gf_RefreshSketchpadTownhallIcons();
        }
        else {
            libPEEP_gf_DisengageSketchpadforPlayer(lv_intPlayer);
        }
    }
    else {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolMapAnalysisEngaged = false;
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diSketchMapImage, "Assets\\Textures\\map_overlay.dds", PlayerGroupAll());
        libPEEP_gf_EngageSketchpadforPlayer(lv_intPlayer, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltKMapOverlay_Init () {
    libPEEP_gt_KeyAltKMapOverlay = TriggerCreate("libPEEP_gt_KeyAltKMapOverlay_Func");
    TriggerEnable(libPEEP_gt_KeyAltKMapOverlay, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltKMapOverlay, c_playerAny, c_keyK, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-P (Pen)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltPPen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dSketchDialog, lv_intPlayer) == true)) {
        libPEEP_gf_DisengageSketchpadforPlayer(lv_intPlayer);
    }
    else {
        libPEEP_gf_EngageSketchpadforPlayer(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltPPen_Init () {
    libPEEP_gt_KeyAltPPen = TriggerCreate("libPEEP_gt_KeyAltPPen_Func");
    TriggerEnable(libPEEP_gt_KeyAltPPen, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltPPen, c_playerAny, c_keyP, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-O (Erase Pen)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltOErasePen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true) || (libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intPlayer))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ErasePenTrailforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltOErasePen_Init () {
    libPEEP_gt_KeyAltOErasePen = TriggerCreate("libPEEP_gt_KeyAltOErasePen_Func");
    TriggerEnable(libPEEP_gt_KeyAltOErasePen, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltOErasePen, c_playerAny, c_keyO, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Alt-E (Fullscreen Mode)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyAltEFullscreenMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolFullscreenModeEngaged == false)) {
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyAltEFullscreenMode_Init () {
    libPEEP_gt_KeyAltEFullscreenMode = TriggerCreate("libPEEP_gt_KeyAltEFullscreenMode_Func");
    TriggerEnable(libPEEP_gt_KeyAltEFullscreenMode, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyAltEFullscreenMode, c_playerAny, c_keyE, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-Alt-E (Hide PeepMode UI)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlAltEHidePeepModeUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_TogglePeepModeUIforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlAltEHidePeepModeUI_Init () {
    libPEEP_gt_KeyCtrlAltEHidePeepModeUI = TriggerCreate("libPEEP_gt_KeyCtrlAltEHidePeepModeUI_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlAltEHidePeepModeUI, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlAltEHidePeepModeUI, c_playerAny, c_keyE, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-K (Kick a Player)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlKKickaPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonKickPlayer, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlKKickaPlayer_Init () {
    libPEEP_gt_KeyCtrlKKickaPlayer = TriggerCreate("libPEEP_gt_KeyCtrlKKickaPlayer_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlKKickaPlayer, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlKKickaPlayer, c_playerAny, c_keyK, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: F8
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyF8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonTeams, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyF8_Init () {
    libPEEP_gt_KeyF8 = TriggerCreate("libPEEP_gt_KeyF8_Func");
    TriggerEnable(libPEEP_gt_KeyF8, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyF8, c_playerAny, c_keyF8, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: F9
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyF9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonOptions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyF9_Init () {
    libPEEP_gt_KeyF9 = TriggerCreate("libPEEP_gt_KeyF9_Func");
    TriggerEnable(libPEEP_gt_KeyF9, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyF9, c_playerAny, c_keyF9, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: Ctrl-F9
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyCtrlF9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonPersonalOptions, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyCtrlF9_Init () {
    libPEEP_gt_KeyCtrlF9 = TriggerCreate("libPEEP_gt_KeyCtrlF9_Func");
    TriggerEnable(libPEEP_gt_KeyCtrlF9, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyCtrlF9, c_playerAny, c_keyF9, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: F11
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyF11_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDisableF11 == false) && ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonChat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyF11_Init () {
    libPEEP_gt_KeyF11 = TriggerCreate("libPEEP_gt_KeyF11_Func");
    TriggerEnable(libPEEP_gt_KeyF11, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyF11, c_playerAny, c_keyF11, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Key: F12
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_KeyF12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libPEEP_gt_ButtonHelp, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_KeyF12_Init () {
    libPEEP_gt_KeyF12 = TriggerCreate("libPEEP_gt_KeyF12_Func");
    TriggerEnable(libPEEP_gt_KeyF12, false);
    TriggerAddEventKeyPressed(libPEEP_gt_KeyF12, c_playerAny, c_keyF12, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Sequence: Step 1
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_DebugSequenceStep1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intPlayer;
    int lv_intNumStrokesEntered;
    bool lv_boolPrecedingStrokesFound;
    int lv_intStep;

    // Automatic Variable Declarations
    int auto82159283_ae;
    const int auto82159283_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_boolPrecedingStrokesFound = true;
    lv_intStep = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerDebugSequence, 3.0, false, c_timeGame);
    auto82159283_ae = (lv_intStep - 1);
    lv_intIndex = 1;
    for ( ; ( (auto82159283_ai >= 0 && lv_intIndex <= auto82159283_ae) || (auto82159283_ai < 0 && lv_intIndex >= auto82159283_ae) ) ; lv_intIndex += auto82159283_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intIndex] == false)) {
            lv_boolPrecedingStrokesFound = false;
        }

    }
    if ((lv_boolPrecedingStrokesFound == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intStep] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_DebugSequenceStep1_Init () {
    libPEEP_gt_DebugSequenceStep1 = TriggerCreate("libPEEP_gt_DebugSequenceStep1_Func");
    TriggerEnable(libPEEP_gt_DebugSequenceStep1, false);
    TriggerAddEventKeyPressed(libPEEP_gt_DebugSequenceStep1, c_playerAny, c_keyUp, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Sequence: Step 2
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_DebugSequenceStep2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intPlayer;
    int lv_intNumStrokesEntered;
    bool lv_boolPrecedingStrokesFound;
    int lv_intStep;

    // Automatic Variable Declarations
    int auto22C71FBA_ae;
    const int auto22C71FBA_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_boolPrecedingStrokesFound = true;
    lv_intStep = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    auto22C71FBA_ae = (lv_intStep - 1);
    lv_intIndex = 1;
    for ( ; ( (auto22C71FBA_ai >= 0 && lv_intIndex <= auto22C71FBA_ae) || (auto22C71FBA_ai < 0 && lv_intIndex >= auto22C71FBA_ae) ) ; lv_intIndex += auto22C71FBA_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intIndex] == false)) {
            lv_boolPrecedingStrokesFound = false;
        }

    }
    if ((lv_boolPrecedingStrokesFound == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intStep] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_DebugSequenceStep2_Init () {
    libPEEP_gt_DebugSequenceStep2 = TriggerCreate("libPEEP_gt_DebugSequenceStep2_Func");
    TriggerEnable(libPEEP_gt_DebugSequenceStep2, false);
    TriggerAddEventKeyPressed(libPEEP_gt_DebugSequenceStep2, c_playerAny, c_keyDown, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Sequence: Step 3
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_DebugSequenceStep3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intPlayer;
    int lv_intNumStrokesEntered;
    bool lv_boolPrecedingStrokesFound;
    int lv_intStep;

    // Automatic Variable Declarations
    int auto3E2BD464_ae;
    const int auto3E2BD464_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_boolPrecedingStrokesFound = true;
    lv_intStep = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3E2BD464_ae = (lv_intStep - 1);
    lv_intIndex = 1;
    for ( ; ( (auto3E2BD464_ai >= 0 && lv_intIndex <= auto3E2BD464_ae) || (auto3E2BD464_ai < 0 && lv_intIndex >= auto3E2BD464_ae) ) ; lv_intIndex += auto3E2BD464_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intIndex] == false)) {
            lv_boolPrecedingStrokesFound = false;
        }

    }
    if ((lv_boolPrecedingStrokesFound == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intStep] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_DebugSequenceStep3_Init () {
    libPEEP_gt_DebugSequenceStep3 = TriggerCreate("libPEEP_gt_DebugSequenceStep3_Func");
    TriggerEnable(libPEEP_gt_DebugSequenceStep3, false);
    TriggerAddEventKeyPressed(libPEEP_gt_DebugSequenceStep3, c_playerAny, c_keyComma, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug Sequence: Step 4
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_DebugSequenceStep4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intPlayer;
    int lv_intNumStrokesEntered;
    bool lv_boolPrecedingStrokesFound;
    int lv_intStep;

    // Automatic Variable Declarations
    int auto6BBC6A17_ae;
    const int auto6BBC6A17_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_boolPrecedingStrokesFound = true;
    lv_intStep = 4;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6BBC6A17_ae = (lv_intStep - 1);
    lv_intIndex = 1;
    for ( ; ( (auto6BBC6A17_ai >= 0 && lv_intIndex <= auto6BBC6A17_ae) || (auto6BBC6A17_ai < 0 && lv_intIndex >= auto6BBC6A17_ae) ) ; lv_intIndex += auto6BBC6A17_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intIndex] == false)) {
            lv_boolPrecedingStrokesFound = false;
        }

    }
    if ((lv_boolPrecedingStrokesFound == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intStep] = true;
        if ((libPEEP_gv_recGlobals.lv_intDebugPlayer == -1)) {
        }
        else {
            libPEEP_gv_recGlobals.lv_intDebugPlayer = -1;
            libPEEP_gf_CreateChatMessage(0, StringExternal("Param/Value/lib_PEEP_57A83BB3"), lv_intPlayer, false, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_DebugSequenceStep4_Init () {
    libPEEP_gt_DebugSequenceStep4 = TriggerCreate("libPEEP_gt_DebugSequenceStep4_Func");
    TriggerEnable(libPEEP_gt_DebugSequenceStep4, false);
    TriggerAddEventKeyPressed(libPEEP_gt_DebugSequenceStep4, c_playerAny, c_keyPeriod, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Debug Sequence Expires
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerDebugSequenceExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;

    // Automatic Variable Declarations
    const int autoFC9685BC_ae = 14;
    const int autoFC9685BC_ai = 1;
    int auto8D246312_ae;
    const int auto8D246312_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intPlayer = 1;
    for ( ; ( (autoFC9685BC_ai >= 0 && lv_intPlayer <= autoFC9685BC_ae) || (autoFC9685BC_ai < 0 && lv_intPlayer >= autoFC9685BC_ae) ) ; lv_intPlayer += autoFC9685BC_ai ) {
        if ((EventTimer() == libPEEP_gv_recPlayers[lv_intPlayer].lv_timerDebugSequence)) {
            break;
        }

    }
    auto8D246312_ae = libPEEP_gv_recGlobals.lv_intNumDebugSequences;
    lv_intIndex = 1;
    for ( ; ( (auto8D246312_ai >= 0 && lv_intIndex <= auto8D246312_ae) || (auto8D246312_ai < 0 && lv_intIndex >= auto8D246312_ae) ) ; lv_intIndex += auto8D246312_ai ) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDebugSequence[lv_intIndex] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerDebugSequenceExpires_Init () {
    libPEEP_gt_TimerDebugSequenceExpires = TriggerCreate("libPEEP_gt_TimerDebugSequenceExpires_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[1].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[2].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[3].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[4].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[5].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[6].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[7].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[8].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[9].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[10].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[11].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[12].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[13].lv_timerDebugSequence);
    TriggerAddEventTimer(libPEEP_gt_TimerDebugSequenceExpires, libPEEP_gv_recPlayers[14].lv_timerDebugSequence);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Leaderboard
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXLeaderboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dLeaderboardDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedLeaderboard = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXLeaderboard_Init () {
    libPEEP_gt_ButtonXLeaderboard = TriggerCreate("libPEEP_gt_ButtonXLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buttons: Leaderboard Sort
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonsLeaderboardSort_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intCol;
    int lv_intPlayer;

    // Automatic Variable Declarations
    const int autoCE48C26F_ae = 6;
    const int autoCE48C26F_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intCol = 2;
    for ( ; ( (autoCE48C26F_ai >= 0 && lv_intCol <= autoCE48C26F_ae) || (autoCE48C26F_ai < 0 && lv_intCol >= autoCE48C26F_ae) ) ; lv_intCol += autoCE48C26F_ai ) {
        if ((EventDialogControl() == libPEEP_gv_recUI.lv_diLeaderboardSortButtons[lv_intCol])) {
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intRankSortCol = lv_intCol;
            libPEEP_gf_RefreshLeaderboardforPlayer(lv_intPlayer, lv_intCol, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonsLeaderboardSort_Init () {
    libPEEP_gt_ButtonsLeaderboardSort = TriggerCreate("libPEEP_gt_ButtonsLeaderboardSort_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Blinking Subtitle
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerBlinkingSubtitle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_realSpeed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_realSpeed = 1.3;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (libPEEP_gv_recGameState.lv_boolLoadingScreenFired == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, PlayerGroupAll(), lv_realSpeed, 0.0);
    Wait(lv_realSpeed, c_timeReal);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diChipAnnouncementLabel, PlayerGroupAll(), lv_realSpeed, 100.0);
    TimerStart(libPEEP_gv_recGlobals.lv_timerBlinkTimer, lv_realSpeed, false, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerBlinkingSubtitle_Init () {
    libPEEP_gt_TimerBlinkingSubtitle = TriggerCreate("libPEEP_gt_TimerBlinkingSubtitle_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerBlinkingSubtitle, libPEEP_gv_recGlobals.lv_timerBlinkTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Listbox: Match Selection
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ListboxMatchSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSelectedMatch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSelectedMatch = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);

    // Conditions
    if (testConds) {
        if (!((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diMatchHistorySelectListbox, lv_intPlayer) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intPlayer, lv_intSelectedMatch, true);
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchHistoryTitle, libPEEP_gf_makeMatchDetailsText(lv_intSelectedMatch), PlayerGroupSingle(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ListboxMatchSelection_Init () {
    libPEEP_gt_ListboxMatchSelection = TriggerCreate("libPEEP_gt_ListboxMatchSelection_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Match History Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXMatchHistoryDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dMatchHistoryDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gf_EnableMatchLogPlayerFiltersforPlayer(lv_intPlayer);
    libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intPlayer, libPEEP_gv_recGameState.lv_intNumMatchesPlayed, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXMatchHistoryDialog_Init () {
    libPEEP_gt_ButtonXMatchHistoryDialog = TriggerCreate("libPEEP_gt_ButtonXMatchHistoryDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Refresh History
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonRefreshHistory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intPlayer, DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diMatchHistorySelectListbox, lv_intPlayer), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonRefreshHistory_Init () {
    libPEEP_gt_ButtonRefreshHistory = TriggerCreate("libPEEP_gt_ButtonRefreshHistory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: History Check All
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxHistoryCheckAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    bool lv_chChecked;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int autoD3279CDE_ae;
    const int autoD3279CDE_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diHistoryPlayerCheckboxes[0], lv_intPlayer) == true)) {
        lv_chChecked = true;
    }
    else {
        lv_chChecked = false;
    }
    autoD3279CDE_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoD3279CDE_ai >= 0 && lv_intTmpPlayer <= autoD3279CDE_ae) || (autoD3279CDE_ai < 0 && lv_intTmpPlayer >= autoD3279CDE_ae) ) ; lv_intTmpPlayer += autoD3279CDE_ai ) {
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diHistoryPlayerCheckboxes[lv_intTmpPlayer], lv_chChecked, PlayerGroupSingle(lv_intPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxHistoryCheckAll_Init () {
    libPEEP_gt_CheckboxHistoryCheckAll = TriggerCreate("libPEEP_gt_CheckboxHistoryCheckAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Match History
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonMatchHistory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dMatchHistoryDialog, lv_intPlayer) == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dMatchHistoryDialog, PlayerGroupSingle(lv_intPlayer), false);
        libPEEP_gf_EnableMatchLogPlayerFiltersforPlayer(lv_intPlayer);
    }
    else {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dMatchHistoryDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gf_DisableMatchLogPlayerFiltersforPlayer(lv_intPlayer);
        libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intPlayer, DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diMatchHistorySelectListbox, lv_intPlayer), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonMatchHistory_Init () {
    libPEEP_gt_ButtonMatchHistory = TriggerCreate("libPEEP_gt_ButtonMatchHistory_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkboxes: Log Filters
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxesLogFilters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intNumMatchesPlayed > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intPlayer, libPEEP_gv_recGameState.lv_intNumMatchesPlayed, false);
    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dMatchHistoryDialog, lv_intPlayer) == true)) {
        libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intPlayer, libPEEP_gv_recGameState.lv_intNumMatchesPlayed, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxesLogFilters_Init () {
    libPEEP_gt_CheckboxesLogFilters = TriggerCreate("libPEEP_gt_CheckboxesLogFilters_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Minimap
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXMinimap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dMinimapDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedMinimap = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXMinimap_Init () {
    libPEEP_gt_ButtonXMinimap = TriggerCreate("libPEEP_gt_ButtonXMinimap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Quick Panel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonQuickPanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dTOWDialog, lv_intPlayer) == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), false);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideResearchDialogsforPlayer(lv_intPlayer);
        libPEEP_gf_HideStructureDialogsforPlayer(lv_intPlayer);
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dTOWDialog, PlayerGroupSingle(lv_intPlayer), true);
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterOrb, "Assets\\Textures\\namepanel_orb_glow.dds", PlayerGroupSingle(lv_intPlayer));
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonQuickPanel_Init () {
    libPEEP_gt_ButtonQuickPanel = TriggerCreate("libPEEP_gt_ButtonQuickPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fade In Name Panel Graphic
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_FadeInNamePanelGraphic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intSum;
    int[21] lv_intWeightTopIntegerList;
    int lv_intThisWeight;
    int lv_intRand;
    int lv_intChosenIndex;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoD0B8866C_ae;
    const int autoD0B8866C_ai = 1;
    int auto320B47A7_ae;
    const int auto320B47A7_ai = 1;
    int auto77D6321A_ae;
    const int auto77D6321A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD0B8866C_ae = libPEEP_gv_recGlobals.lv_intNumNamePanelImages;
    lv_intIndex = 1;
    for ( ; ( (autoD0B8866C_ai >= 0 && lv_intIndex <= autoD0B8866C_ae) || (autoD0B8866C_ai < 0 && lv_intIndex >= autoD0B8866C_ae) ) ; lv_intIndex += autoD0B8866C_ai ) {
        lv_intThisWeight = libPEEP_gv_recGlobals.lv_recNamePanelImages[lv_intIndex].lv_intWeighting;
        lv_intSum += lv_intThisWeight;
        lv_intWeightTopIntegerList[lv_intIndex] = lv_intSum;
    }
    lv_intRand = RandomInt(1, lv_intSum);
    auto320B47A7_ae = libPEEP_gv_recGlobals.lv_intNumNamePanelImages;
    lv_intIndex = 1;
    for ( ; ( (auto320B47A7_ai >= 0 && lv_intIndex <= auto320B47A7_ae) || (auto320B47A7_ai < 0 && lv_intIndex >= auto320B47A7_ae) ) ; lv_intIndex += auto320B47A7_ai ) {
        if ((((lv_intIndex == 1) && (lv_intRand <= lv_intWeightTopIntegerList[lv_intIndex])) || ((lv_intIndex > 1) && (lv_intRand > lv_intWeightTopIntegerList[(lv_intIndex - 1)]) && (lv_intRand <= lv_intWeightTopIntegerList[lv_intIndex])))) {
            libPEEP_gv_recGlobals.lv_intCurrentNamePanelImage = lv_intIndex;
            break;
        }

    }
    libPEEP_gv_recGlobals.lv_boolNamePanelImageFadedIn = true;
    libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, libPEEP_gv_recGlobals.lv_recNamePanelImages[libPEEP_gv_recGlobals.lv_intCurrentNamePanelImage].lv_imgImage, PlayerGroupAll());
    DialogControlSetSize(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, PlayerGroupAll(), libPEEP_gv_recGlobals.lv_recNamePanelImages[libPEEP_gv_recGlobals.lv_intCurrentNamePanelImage].lv_intWidth, libPEEP_gv_recGlobals.lv_recNamePanelImages[libPEEP_gv_recGlobals.lv_intCurrentNamePanelImage].lv_intHeight);
    auto77D6321A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto77D6321A_ai >= 0 && lv_intPlayer <= auto77D6321A_ae) || (auto77D6321A_ai < 0 && lv_intPlayer >= auto77D6321A_ae) ) ; lv_intPlayer += auto77D6321A_ai ) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diCustNamePanelRotateLogosCheckbox, lv_intPlayer) == true)) {
            DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, PlayerGroupSingle(lv_intPlayer), 2.0, 30.0);
            DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, PlayerGroupSingle(lv_intPlayer), 2.0, 100.0);
        }

    }
    TimerStart(libPEEP_gv_recGlobals.lv_timerNamePanelGraphic, 8.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_FadeInNamePanelGraphic_Init () {
    libPEEP_gt_FadeInNamePanelGraphic = TriggerCreate("libPEEP_gt_FadeInNamePanelGraphic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fade Out Name Panel Graphic
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_FadeOutNamePanelGraphic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recGlobals.lv_boolNamePanelImageFadedIn == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diNamePanel2CenterImageMain, PlayerGroupAll(), 2.0, 60.0);
    DialogControlFadeTransparency(libPEEP_gv_recUI.lv_diNamePanel2CenterImageRotating, PlayerGroupAll(), 2.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_FadeOutNamePanelGraphic_Init () {
    libPEEP_gt_FadeOutNamePanelGraphic = TriggerCreate("libPEEP_gt_FadeOutNamePanelGraphic_Func");
    TriggerAddEventTimer(libPEEP_gt_FadeOutNamePanelGraphic, libPEEP_gv_recGlobals.lv_timerNamePanelGraphic);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buttons: Nav
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonsNav_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libPEEP_gv_recUI.lv_recNavButtons[1].lv_diButton)) {
        TriggerExecute(libPEEP_gt_ButtonTeams, true, false);
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_recNavButtons[2].lv_diButton)) {
        TriggerExecute(libPEEP_gt_ButtonOptions, true, false);
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_recNavButtons[3].lv_diButton)) {
        TriggerExecute(libPEEP_gt_ButtonMenu, true, false);
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_recNavButtons[4].lv_diButton)) {
        TriggerExecute(libPEEP_gt_ButtonChat, true, false);
    }
    else if ((EventDialogControl() == libPEEP_gv_recUI.lv_recNavButtons[5].lv_diButton)) {
        TriggerExecute(libPEEP_gt_ButtonHelp, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonsNav_Init () {
    libPEEP_gt_ButtonsNav = TriggerCreate("libPEEP_gt_ButtonsNav_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Teams
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonTeams_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllLeftsideDialogsExceptBlizzandLog(lv_intPlayer, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTeamNewbSelectionDialog, PlayerGroupSingle(lv_intPlayer), true);
        if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0))) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dCancelTeamDialog, PlayerGroupSingle(lv_intPlayer), true);
        }

    }
    else {
        libPEEP_gf_HideAllLeftsideDialogsExceptBlizzandLog(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonTeams_Init () {
    libPEEP_gt_ButtonTeams = TriggerCreate("libPEEP_gt_ButtonTeams_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Options
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dOptionsDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), true);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = true;
    }
    else {
        libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonOptions_Init () {
    libPEEP_gt_ButtonOptions = TriggerCreate("libPEEP_gt_ButtonOptions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Menu
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonMenu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtTitle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCustomMenuItemVisible(PlayerGroupSingle(lv_intPlayer), c_gameMenuDialogOptionsButton, true);
    UISetCustomMenuItemVisible(PlayerGroupSingle(lv_intPlayer), c_gameMenuDialogQuitButton, true);
    UISetCustomMenuItemVisible(PlayerGroupSingle(lv_intPlayer), c_gameMenuDialogReturnToGameplayButton, true);
    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
        lv_txtTitle = StringExternal("Param/Value/lib_PEEP_CD8311DF");
    }
    else {
        lv_txtTitle = StringExternal("Param/Value/lib_PEEP_64114DE7");
    }
    UIShowCustomMenu(PlayerGroupSingle(lv_intPlayer), lv_txtTitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonMenu_Init () {
    libPEEP_gt_ButtonMenu = TriggerCreate("libPEEP_gt_ButtonMenu_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Chat
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonChat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dChatLogDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dChatLogDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gf_RefreshChatLogforPlayer(lv_intPlayer);
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dChatLogDialog, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dChatHelpDialog, PlayerGroupSingle(lv_intPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonChat_Init () {
    libPEEP_gt_ButtonChat = TriggerCreate("libPEEP_gt_ButtonChat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Help
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonHelp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dHelpDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllRightsideDialogsExceptResourcePanels(lv_intPlayer, false);
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog, PlayerGroupSingle(lv_intPlayer), true);
        DialogSetVisible(libPEEP_gv_recUI.lv_dHelpDialog2, PlayerGroupSingle(lv_intPlayer), true);
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diHelpPulldown, PlayerGroupSingle(lv_intPlayer), 1);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedHelp = true;
    }
    else {
        libPEEP_gf_HideAllRightsideDialogsExceptResourcePanels(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonHelp_Init () {
    libPEEP_gt_ButtonHelp = TriggerCreate("libPEEP_gt_ButtonHelp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Observer Vision
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownObserverVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSelectedPlayer;
    int lv_intTmpPlayer;
    int lv_intTmpTeam;
    int lv_intVisionIndex;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto55240C37_ae;
    const int auto55240C37_ai = 1;
    int autoFF71912B_ae;
    const int autoFF71912B_ai = 1;
    int autoDFC89946_ae;
    const int autoDFC89946_ai = 1;
    int autoE94AE574_ae;
    const int autoE94AE574_ai = 1;
    int auto811BDA81_ae;
    const int auto811BDA81_ai = 1;
    int autoA49FB8AB_ae;
    const int autoA49FB8AB_ai = 1;
    int auto2596A0D4_ae;
    const int auto2596A0D4_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intVisionIndex = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_intPlayer, false);
    CameraLockInput(lv_intPlayer, false);
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lv_intPlayer), true);
    libPEEP_gf_ClearControlGroupsforPlayer(lv_intPlayer);
    auto55240C37_ae = libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving;
    lv_intIndex = 1;
    for ( ; ( (auto55240C37_ai >= 0 && lv_intIndex <= auto55240C37_ae) || (auto55240C37_ai < 0 && lv_intIndex >= auto55240C37_ae) ) ; lv_intIndex += auto55240C37_ai ) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayersImObserving[lv_intIndex] = 0;
    }
    autoFF71912B_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intSelectedPlayer = 1;
    for ( ; ( (autoFF71912B_ai >= 0 && lv_intSelectedPlayer <= autoFF71912B_ae) || (autoFF71912B_ai < 0 && lv_intSelectedPlayer >= autoFF71912B_ae) ) ; lv_intSelectedPlayer += autoFF71912B_ai ) {
        PlayerGroupRemove(libPEEP_gv_recPlayers[lv_intSelectedPlayer].lv_pgObserversFollowingMe, lv_intPlayer);
    }
    libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving = 0;
    autoDFC89946_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intSelectedPlayer = 1;
    for ( ; ( (autoDFC89946_ai >= 0 && lv_intSelectedPlayer <= autoDFC89946_ae) || (autoDFC89946_ai < 0 && lv_intSelectedPlayer >= autoDFC89946_ae) ) ; lv_intSelectedPlayer += autoDFC89946_ai ) {
        PlayerSetAlliance(lv_intSelectedPlayer, c_allianceIdVision, lv_intPlayer, false);
    }
    autoE94AE574_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoE94AE574_ai >= 0 && lv_intTmpPlayer <= autoE94AE574_ae) || (autoE94AE574_ai < 0 && lv_intTmpPlayer >= autoE94AE574_ae) ) ; lv_intTmpPlayer += autoE94AE574_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == true)) {
            libPEEP_gf_ShowAllStructureActorsfromPlayertoPlayer(lv_intTmpPlayer, lv_intPlayer);
        }

    }
    if ((lv_intVisionIndex == 1)) {
        auto2596A0D4_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intSelectedPlayer = 1;
        for ( ; ( (auto2596A0D4_ai >= 0 && lv_intSelectedPlayer <= auto2596A0D4_ae) || (auto2596A0D4_ai < 0 && lv_intSelectedPlayer >= auto2596A0D4_ae) ) ; lv_intSelectedPlayer += auto2596A0D4_ai ) {
            if ((libPEEP_gv_recPlayers[lv_intSelectedPlayer].lv_boolPlayingMatch == true)) {
                PlayerSetAlliance(lv_intSelectedPlayer, c_allianceIdVision, lv_intPlayer, true);
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving += 1;
                libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayersImObserving[libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving] = lv_intSelectedPlayer;
            }

        }
    }
    else {
        lv_intSelectedPlayer = libPEEP_gv_recUI.lv_intObserverPulldownPlayers[lv_intVisionIndex];
        if (((lv_intSelectedPlayer > 0) && (libPEEP_gv_recPlayers[lv_intSelectedPlayer].lv_boolPlayingMatch == true))) {
            libPEEP_gf_SyncapplyVisionStructureActorsfromPlayertoPlayer(lv_intSelectedPlayer, lv_intPlayer);
            libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diAutoCamCheckbox, false, PlayerGroupSingle(lv_intPlayer));
            DialogControlSetEnabled(libPEEP_gv_recUI.lv_diAutoCamCheckbox, PlayerGroupSingle(lv_intPlayer), false);
            PlayerGroupAdd(libPEEP_gv_recPlayers[lv_intSelectedPlayer].lv_pgObserversFollowingMe, lv_intPlayer);
            PlayerSetAlliance(lv_intSelectedPlayer, c_allianceIdVision, lv_intPlayer, true);
            Wait(0.1, c_timeGame);
            CameraFollowUnitGroup(lv_intPlayer, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
            CameraPan(lv_intPlayer, CameraGetTarget(lv_intSelectedPlayer), 0.0, -1, 10, false);
            CameraLockInput(lv_intPlayer, true);
            libPEEP_gf_SyncControlGroupsfromPlayertoPlayer(lv_intSelectedPlayer, lv_intPlayer);
        }
        else {
            auto811BDA81_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
            lv_intTmpPlayer = 1;
            for ( ; ( (auto811BDA81_ai >= 0 && lv_intTmpPlayer <= auto811BDA81_ae) || (auto811BDA81_ai < 0 && lv_intTmpPlayer >= auto811BDA81_ae) ) ; lv_intTmpPlayer += auto811BDA81_ai ) {
                lv_intTmpTeam = libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_intCurrentTeam;
                if (((lv_intTmpTeam > 0) && (lv_intTmpTeam == libPEEP_gv_recUI.lv_intObserverPulldownTeams[lv_intVisionIndex]) && (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == true))) {
                    autoA49FB8AB_ae = libPEEP_gv_recTeams[lv_intTmpTeam].lv_intNumPlayers;
                    lv_intIndex = 1;
                    for ( ; ( (autoA49FB8AB_ai >= 0 && lv_intIndex <= autoA49FB8AB_ae) || (autoA49FB8AB_ai < 0 && lv_intIndex >= autoA49FB8AB_ae) ) ; lv_intIndex += autoA49FB8AB_ai ) {
                        libPEEP_gf_SyncapplyVisionStructureActorsfromPlayertoPlayer(libPEEP_gv_recTeams[lv_intTmpTeam].lv_intPlayerList[lv_intIndex], lv_intPlayer);
                    }
                    PlayerSetAlliance(lv_intTmpPlayer, c_allianceIdVision, lv_intPlayer, true);
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving += 1;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayersImObserving[libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving] = lv_intTmpPlayer;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastCameraPlayer = lv_intTmpPlayer;
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastIdleCamPlayer = lv_intTmpPlayer;
                    libPEEP_gf_SyncControlGroupsfromPlayertoPlayer(lv_intTmpPlayer, lv_intPlayer);
                }

            }
        }
    }
    Wait(0.1, c_timeGame);
    VisExploreArea(lv_intPlayer, RegionEntireMap(), false, false);
    if ((libPEEP_gv_recGameState.lv_intMatchSecondsElapsed > 5)) {
        TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerCameraIdleExpiration, 0.5, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownObserverVision_Init () {
    libPEEP_gt_PulldownObserverVision = TriggerCreate("libPEEP_gt_PulldownObserverVision_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Auto Cam
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxAutoCam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_intPlayer) == true)) {
        if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 4)) {
            if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSlowRotationCamIsClockwise == true)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSlowRotationCamIsClockwise = false;
            }
            else {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSlowRotationCamIsClockwise = true;
            }
            CameraSetValue(lv_intPlayer, c_cameraValuePitch, libPEEP_gv_recGlobals.lv_realSlowRotationPitch, 1.0, -1, 10);
        }

        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolAutoCamEngaged = true;
        DialogControlSetVisible(libPEEP_gv_recUI.lv_diAutoCamAlertLabel, PlayerGroupSingle(lv_intPlayer), false);
        if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
            TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerCameraIdleExpiration, 0.5, false, c_timeGame);
            CameraLockInput(lv_intPlayer, true);
        }

    }
    else {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolAutoCamEngaged = false;
        if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
            CameraFollowUnitGroup(lv_intPlayer, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
            libPEEP_gf_ResetCameratoDefaultAngleforPlayer(lv_intPlayer);
            CameraLockInput(lv_intPlayer, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxAutoCam_Init () {
    libPEEP_gt_CheckboxAutoCam = TriggerCreate("libPEEP_gt_CheckboxAutoCam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Zoom In
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonZoomIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    fixed lv_realCameraDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolVotableDisableZoom == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intZoomIndex > 0)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intZoomIndex -= 1;
        libPEEP_gf_ApplyZoomtoPlayerCam(lv_intPlayer, 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonZoomIn_Init () {
    libPEEP_gt_ButtonZoomIn = TriggerCreate("libPEEP_gt_ButtonZoomIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Zoom Out
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonZoomOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    fixed lv_realCameraDistance;
    fixed lv_realCameraPitch;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolVotableDisableZoom == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intZoomIndex < libPEEP_gv_recGlobals.lv_intMaxZoomIndex)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intZoomIndex += 1;
        libPEEP_gf_ApplyZoomtoPlayerCam(lv_intPlayer, 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonZoomOut_Init () {
    libPEEP_gt_ButtonZoomOut = TriggerCreate("libPEEP_gt_ButtonZoomOut_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Cinematic Mode
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonCinematicMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCinematicModeEngaged == true)) {
        libPEEP_gf_ExitCinematicModeforPlayer(lv_intPlayer);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCinematicModeSaved = false;
    }
    else {
        libPEEP_gf_EnterCinematicModeforPlayer(lv_intPlayer);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCinematicModeSaved = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonCinematicMode_Init () {
    libPEEP_gt_ButtonCinematicMode = TriggerCreate("libPEEP_gt_ButtonCinematicMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Blizz UI
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonBlizzUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dBlizzardUIDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedBlizzUI = true;
    }
    else {
        libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonBlizzUI_Init () {
    libPEEP_gt_ButtonBlizzUI = TriggerCreate("libPEEP_gt_ButtonBlizzUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Logs
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonLogs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dMatchLogDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dMatchLogDialog, PlayerGroupSingle(lv_intPlayer), true);
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCinematicModeEngaged == false)) {
            libPEEP_gf_EnableMatchLogPlayerFiltersforPlayer(lv_intPlayer);
            libPEEP_gf_RefreshMatchLogTextforPlayer(lv_intPlayer, libPEEP_gv_recGameState.lv_intNumMatchesPlayed, false);
        }

        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedLogs = true;
    }
    else {
        libPEEP_gf_HideAllLeftsideDialogsforPlayer(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonLogs_Init () {
    libPEEP_gt_ButtonLogs = TriggerCreate("libPEEP_gt_ButtonLogs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Stats
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((DialogIsVisible(libPEEP_gv_recUI.lv_dStatsDialog, lv_intPlayer) == false) && (DialogIsVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, lv_intPlayer) == false))) {
        libPEEP_gf_HideAllRightsideDialogsforPlayer(lv_intPlayer, false);
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, lv_intPlayer) == false)) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupSingle(lv_intPlayer), true);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStatsBlizzard = true;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStats = false;
        }
        else {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupSingle(lv_intPlayer), true);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStats = true;
            libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStatsBlizzard = false;
        }
    }
    else {
        libPEEP_gf_HideAllRightsideDialogsforPlayer(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonStats_Init () {
    libPEEP_gt_ButtonStats = TriggerCreate("libPEEP_gt_ButtonStats_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Betting
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonBetting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dBettingDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllCenterDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedBetting = true;
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dBettingDialog, PlayerGroupSingle(lv_intPlayer), false);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedBetting = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonBetting_Init () {
    libPEEP_gt_ButtonBetting = TriggerCreate("libPEEP_gt_ButtonBetting_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Leaderboard
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonLeaderboard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dLeaderboardDialog, lv_intPlayer) == false)) {
        libPEEP_gf_HideAllRightsideDialogsExceptResourcePanels(lv_intPlayer, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dLeaderboardDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedLeaderboard = true;
    }
    else {
        libPEEP_gf_HideAllRightsideDialogsExceptResourcePanels(lv_intPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonLeaderboard_Init () {
    libPEEP_gt_ButtonLeaderboard = TriggerCreate("libPEEP_gt_ButtonLeaderboard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Change Player Names Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXChangePlayerNamesDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXChangePlayerNamesDialog_Init () {
    libPEEP_gt_ButtonXChangePlayerNamesDialog = TriggerCreate("libPEEP_gt_ButtonXChangePlayerNamesDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Textbox: Player Name
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TextboxPlayerName_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelMainforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TextboxPlayerName_Init () {
    libPEEP_gt_TextboxPlayerName = TriggerCreate("libPEEP_gt_TextboxPlayerName_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Name Panel Options Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXNamePanelOptionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXNamePanelOptionsDialog_Init () {
    libPEEP_gt_ButtonXNamePanelOptionsDialog = TriggerCreate("libPEEP_gt_ButtonXNamePanelOptionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Apply Name Panel Settings
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonApplyNamePanelSettings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intPlayer);
    DialogSetVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonApplyNamePanelSettings_Init () {
    libPEEP_gt_ButtonApplyNamePanelSettings = TriggerCreate("libPEEP_gt_ButtonApplyNamePanelSettings_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Apply Name Panel Settings to All
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonApplyNamePanelSettingstoAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int auto062B5681_ae;
    const int auto062B5681_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto062B5681_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto062B5681_ai >= 0 && lv_intTmpPlayer <= auto062B5681_ae) || (auto062B5681_ai < 0 && lv_intTmpPlayer >= auto062B5681_ae) ) ; lv_intTmpPlayer += auto062B5681_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolIsCommentator == true)) {
            libPEEP_gf_SyncNamePanelSettingsfromPlayertoPlayer(lv_intPlayer, lv_intTmpPlayer);
            libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intTmpPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonApplyNamePanelSettingstoAll_Init () {
    libPEEP_gt_ButtonApplyNamePanelSettingstoAll = TriggerCreate("libPEEP_gt_ButtonApplyNamePanelSettingstoAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Change Player Values
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonChangePlayerValues_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, lv_intPlayer) == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, PlayerGroupSingle(lv_intPlayer), false);
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dChangePlayerValuesDialog, PlayerGroupSingle(lv_intPlayer), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonChangePlayerValues_Init () {
    libPEEP_gt_ButtonChangePlayerValues = TriggerCreate("libPEEP_gt_ButtonChangePlayerValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Textbox: Custom Message
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TextboxCustomMessage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelMessageforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TextboxCustomMessage_Init () {
    libPEEP_gt_TextboxCustomMessage = TriggerCreate("libPEEP_gt_TextboxCustomMessage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Textbox: Custom Scores
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TextboxCustomScores_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelScoresforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TextboxCustomScores_Init () {
    libPEEP_gt_TextboxCustomScores = TriggerCreate("libPEEP_gt_TextboxCustomScores_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Textbox: Custom Polls
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TextboxCustomPolls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelPollsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TextboxCustomPolls_Init () {
    libPEEP_gt_TextboxCustomPolls = TriggerCreate("libPEEP_gt_TextboxCustomPolls_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Name Panel Position
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownNamePanelPosition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelPositionforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownNamePanelPosition_Init () {
    libPEEP_gt_PulldownNamePanelPosition = TriggerCreate("libPEEP_gt_PulldownNamePanelPosition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Name Panel Style
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownNamePanelStyle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelStyleforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownNamePanelStyle_Init () {
    libPEEP_gt_PulldownNamePanelStyle = TriggerCreate("libPEEP_gt_PulldownNamePanelStyle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Name Panel Message
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownNamePanelMessage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelMessageforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownNamePanelMessage_Init () {
    libPEEP_gt_PulldownNamePanelMessage = TriggerCreate("libPEEP_gt_PulldownNamePanelMessage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Show Supply
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxShowSupply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxShowSupply_Init () {
    libPEEP_gt_CheckboxShowSupply = TriggerCreate("libPEEP_gt_CheckboxShowSupply_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Show Scores
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxShowScores_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxShowScores_Init () {
    libPEEP_gt_CheckboxShowScores = TriggerCreate("libPEEP_gt_CheckboxShowScores_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Show Polls
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxShowPolls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxShowPolls_Init () {
    libPEEP_gt_CheckboxShowPolls = TriggerCreate("libPEEP_gt_CheckboxShowPolls_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Show Betting Amounts
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxShowBettingAmounts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxShowBettingAmounts_Init () {
    libPEEP_gt_CheckboxShowBettingAmounts = TriggerCreate("libPEEP_gt_CheckboxShowBettingAmounts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Show Tooltips
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxShowTooltips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshNamePanelMainforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxShowTooltips_Init () {
    libPEEP_gt_CheckboxShowTooltips = TriggerCreate("libPEEP_gt_CheckboxShowTooltips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Rotate Logos
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxRotateLogos_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ApplyNamePanelSettingsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxRotateLogos_Init () {
    libPEEP_gt_CheckboxRotateLogos = TriggerCreate("libPEEP_gt_CheckboxRotateLogos_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Kick Player Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXKickPlayerDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXKickPlayerDialog_Init () {
    libPEEP_gt_ButtonXKickPlayerDialog = TriggerCreate("libPEEP_gt_ButtonXKickPlayerDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Kick Player
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonKickPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, lv_intPlayer) == true)) {
        libPEEP_gf_HideAllOptionDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    }
    else {
        libPEEP_gf_HideAllOptionDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dTeamJoinConfirmationDialog, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gf_RefreshKickPlayerDialogforPlayer(lv_intPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonKickPlayer_Init () {
    libPEEP_gt_ButtonKickPlayer = TriggerCreate("libPEEP_gt_ButtonKickPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Kick Player
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownKickPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSelectedPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelectedPlayer = libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayerKickList[DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer)];
    if ((lv_intSelectedPlayer > 0)) {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diKickPlayerConfirmButton, PlayerGroupSingle(lv_intPlayer), true);
    }
    else {
        DialogControlSetEnabled(libPEEP_gv_recUI.lv_diKickPlayerConfirmButton, PlayerGroupSingle(lv_intPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownKickPlayer_Init () {
    libPEEP_gt_PulldownKickPlayer = TriggerCreate("libPEEP_gt_PulldownKickPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Confirm Kick Player
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonConfirmKickPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSelectedPlayer;
    int lv_intMinimumVotes;
    int lv_intVotesRemaining;
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intSelectedPlayer = libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayerKickList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diKickPlayerPulldown, lv_intPlayer)];
    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayersIWantKicked[lv_intSelectedPlayer] == false)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayersIWantKicked[lv_intSelectedPlayer] = true;
        libPEEP_gv_recPlayers[lv_intSelectedPlayer].lv_intKickVotesAgainstMe += 1;
        lv_intMinimumVotes = libPEEP_gf_getMajorityOfVoters();
        if ((lv_intMinimumVotes > 4)) {
            lv_intMinimumVotes = 4;
        }

        lv_intVotesRemaining = (lv_intMinimumVotes - libPEEP_gv_recPlayers[lv_intSelectedPlayer].lv_intKickVotesAgainstMe);
        if ((lv_intVotesRemaining == 0)) {
            if ((libPEEP_gv_recGlobals.lv_intDebugPlayer == lv_intSelectedPlayer)) {
                lv_txtMessage = (TextWithColor(PlayerName(lv_intSelectedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intSelectedPlayer, false))) + StringExternal("Param/Value/lib_PEEP_D8DE6B39"));
                libPEEP_gf_CreateForcedSystemMessage(lv_txtMessage);
            }
            else {
                libPEEP_gv_recPlayers[lv_intSelectedPlayer].lv_boolKicked = true;
                GameOver(lv_intSelectedPlayer, c_gameOverTie, false, true);
                lv_txtMessage = (TextWithColor(PlayerName(lv_intSelectedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intSelectedPlayer, false))) + StringExternal("Param/Value/lib_PEEP_ACD4F955"));
                libPEEP_gf_CreateForcedSystemMessage(lv_txtMessage);
            }
        }
        else {
            if ((lv_intVotesRemaining > 0)) {
                lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_A3742653") + TextWithColor(PlayerName(lv_intSelectedPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intSelectedPlayer, false))) + StringExternal("Param/Value/lib_PEEP_97FF0E98") + libPEEP_gf_formatIntegerAsText(lv_intVotesRemaining) + StringExternal("Param/Value/lib_PEEP_A170DA18"));
                if ((lv_intVotesRemaining > 1)) {
                    lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_DBCB92FC"));
                }

                lv_txtMessage = (lv_txtMessage + StringExternal("Param/Value/lib_PEEP_F28A6428"));
                libPEEP_gf_CreateForcedSystemMessage(lv_txtMessage);
            }

        }
        DialogSetVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonConfirmKickPlayer_Init () {
    libPEEP_gt_ButtonConfirmKickPlayer = TriggerCreate("libPEEP_gt_ButtonConfirmKickPlayer_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Options Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXOptionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dKickPlayerDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXOptionsDialog_Init () {
    libPEEP_gt_ButtonXOptionsDialog = TriggerCreate("libPEEP_gt_ButtonXOptionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Personal Options Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXPersonalOptionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsPersonalDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXPersonalOptionsDialog_Init () {
    libPEEP_gt_ButtonXPersonalOptionsDialog = TriggerCreate("libPEEP_gt_ButtonXPersonalOptionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Personal Options
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonPersonalOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dOptionsPersonalDialog, lv_intPlayer) == false)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = false;
        libPEEP_gf_HideAllOptionDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), true);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsPersonalDialog, PlayerGroupSingle(lv_intPlayer), true);
    }
    else {
        libPEEP_gf_HideAllOptionDialogsforPlayer(lv_intPlayer);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonPersonalOptions_Init () {
    libPEEP_gt_ButtonPersonalOptions = TriggerCreate("libPEEP_gt_ButtonPersonalOptions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Votable Options
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonVotableOptions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HideAllLeftsideDialogsExceptBlizzandLog(lv_intPlayer, false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsDialog, PlayerGroupSingle(lv_intPlayer), true);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonVotableOptions_Init () {
    libPEEP_gt_ButtonVotableOptions = TriggerCreate("libPEEP_gt_ButtonVotableOptions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Customize Name Panel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonCustomizeNamePanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, lv_intPlayer) == true)) {
        libPEEP_gf_HideAllLeftsideDialogsExceptBlizzandLog(lv_intPlayer, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, PlayerGroupSingle(lv_intPlayer), false);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = false;
    }
    else {
        libPEEP_gf_HideAllLeftsideDialogsExceptBlizzandLog(lv_intPlayer, false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), true);
        DialogSetVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedOptions = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonCustomizeNamePanel_Init () {
    libPEEP_gt_ButtonCustomizeNamePanel = TriggerCreate("libPEEP_gt_ButtonCustomizeNamePanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Match Mode
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownMatchMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0) && (libPEEP_gv_recGameState.lv_boolMatchModeVotingActive == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, lv_intPlayer));
    }

    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_540419CD") + libPEEP_gv_recGlobals.lv_txtMatchModeNames[libPEEP_gv_recGlobals.lv_intMatchModeOrderList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, lv_intPlayer)]]);
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    libPEEP_gf_RefreshVotingMatchMode();
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        libPEEP_gf_CalculateTeamInfo();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownMatchMode_Init () {
    libPEEP_gt_PulldownMatchMode = TriggerCreate("libPEEP_gt_PulldownMatchMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Player Select
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownPlayerSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0) && (libPEEP_gv_recGameState.lv_boolMatchModeVotingActive == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, PlayerGroupAll(), DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, lv_intPlayer));
    }

    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_9C184699") + libPEEP_gv_recGlobals.lv_recPlayerSelectModes[libPEEP_gv_recGlobals.lv_intPlayerSelectModeOrderList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, lv_intPlayer)]].lv_txtName);
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    libPEEP_gf_RefreshVotingPlayerSelectMode();
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        libPEEP_gf_CalculateTeamInfo();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownPlayerSelect_Init () {
    libPEEP_gt_PulldownPlayerSelect = TriggerCreate("libPEEP_gt_PulldownPlayerSelect_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Color Scheme
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownColorScheme_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_boolGameInitComplete == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState > 0) && (libPEEP_gv_recGameState.lv_boolMatchModeVotingActive == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        DialogControlSelectItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, PlayerGroupAll(), DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, lv_intPlayer));
    }

    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_ABBF5815") + libPEEP_gv_recGlobals.lv_recColorSchemes[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, lv_intPlayer)].lv_txtName);
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    libPEEP_gf_RefreshVotingColorScheme();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownColorScheme_Init () {
    libPEEP_gt_PulldownColorScheme = TriggerCreate("libPEEP_gt_PulldownColorScheme_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Enforce Competitive Spawns
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxEnforceCompetitiveSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;
    bool lv_chCheckedOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox, lv_intPlayer) == true)) {
            lv_chCheckedOption = true;
        }
        else {
            lv_chCheckedOption = false;
        }
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox, lv_chCheckedOption, PlayerGroupAll());
    }

    libPEEP_gf_RefreshVotingSpawning();
    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingEnforceCompetitiveSpawnsCheckbox, lv_intPlayer) == true)) {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_60BBCD77"));
        }
        else {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_D84F071D"));
        }
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxEnforceCompetitiveSpawns_Init () {
    libPEEP_gt_CheckboxEnforceCompetitiveSpawns = TriggerCreate("libPEEP_gt_CheckboxEnforceCompetitiveSpawns_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Disable Bling
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxDisableBling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;
    bool lv_chCheckedOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox, lv_intPlayer) == true)) {
            lv_chCheckedOption = true;
        }
        else {
            lv_chCheckedOption = false;
        }
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox, lv_chCheckedOption, PlayerGroupAll());
    }

    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox, lv_intPlayer) == true)) {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_8774B952"));
        }
        else {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_9E7C1195"));
        }
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingDisableBlingCheckbox, lv_intPlayer) == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteBling = true;
    }
    else {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteBling = false;
    }
    libPEEP_gf_RefreshVotingBling();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxDisableBling_Init () {
    libPEEP_gt_CheckboxDisableBling = TriggerCreate("libPEEP_gt_CheckboxDisableBling_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Disable Zoom
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxDisableZoom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;
    bool lv_chCheckedOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingDisableZoomCheckbox, lv_intPlayer) == true)) {
            lv_chCheckedOption = true;
        }
        else {
            lv_chCheckedOption = false;
        }
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingDisableZoomCheckbox, lv_chCheckedOption, PlayerGroupAll());
    }

    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingDisableZoomCheckbox, lv_intPlayer) == true)) {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_E98CF301"));
        }
        else {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_CDD3C492"));
        }
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingDisableZoomCheckbox, lv_intPlayer) == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteDisableZoom = true;
    }
    else {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteDisableZoom = false;
    }
    libPEEP_gf_RefreshVotingZooming();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxDisableZoom_Init () {
    libPEEP_gt_CheckboxDisableZoom = TriggerCreate("libPEEP_gt_CheckboxDisableZoom_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Allow Chat
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxAllowChat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;
    bool lv_chCheckedOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox, lv_intPlayer) == true)) {
            lv_chCheckedOption = true;
        }
        else {
            lv_chCheckedOption = false;
        }
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox, lv_chCheckedOption, PlayerGroupAll());
    }

    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox, lv_intPlayer) == true)) {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_BAFDD71C"));
        }
        else {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_E837E566"));
        }
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingAllowChatCheckbox, lv_intPlayer) == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteChat = true;
    }
    else {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteChat = false;
    }
    libPEEP_gf_RefreshVotingAllowChat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxAllowChat_Init () {
    libPEEP_gt_CheckboxAllowChat = TriggerCreate("libPEEP_gt_CheckboxAllowChat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Allow Cooperative
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxAllowCooperative_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;
    bool lv_chCheckedOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, lv_intPlayer) == true)) {
            lv_chCheckedOption = true;
        }
        else {
            lv_chCheckedOption = false;
        }
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, lv_chCheckedOption, PlayerGroupAll());
    }

    if ((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, lv_intPlayer) == true)) {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_AC15BEEA"));
        }
        else {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_B289FD99"));
        }
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    libPEEP_gf_RefreshVotingCooperativeControl();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxAllowCooperative_Init () {
    libPEEP_gt_CheckboxAllowCooperative = TriggerCreate("libPEEP_gt_CheckboxAllowCooperative_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: End Match
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxEndMatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    text lv_txtMessage;
    bool lv_chCheckedOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_intPlayer == libPEEP_gv_recGlobals.lv_intDebugPlayer)) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, lv_intPlayer) == true)) {
            lv_chCheckedOption = true;
        }
        else {
            lv_chCheckedOption = false;
        }
        libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, lv_chCheckedOption, PlayerGroupAll());
    }

    if (((libPEEP_gv_recGlobals.lv_boolAnnounceVotingChanges == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
        if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, lv_intPlayer) == true)) {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_24C30D44"));
        }
        else {
            lv_txtMessage = (TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_2CF70AE0"));
        }
        libPEEP_gf_CreateChatMessage(0, lv_txtMessage, 0, false, false);
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diVotingEndMatchCheckbox, lv_intPlayer) == true)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteEndMatch = true;
    }
    else {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolVoteEndMatch = false;
    }
    libPEEP_gf_RefreshVotingEndMatch();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxEndMatch_Init () {
    libPEEP_gt_CheckboxEndMatch = TriggerCreate("libPEEP_gt_CheckboxEndMatch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Hide Name Panel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxHideNamePanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionHideNamePanel, lv_intPlayer) == false)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dNamePanel2Dialog, PlayerGroupSingle(lv_intPlayer), true);
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dNamePanel2Dialog, PlayerGroupSingle(lv_intPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxHideNamePanel_Init () {
    libPEEP_gt_CheckboxHideNamePanel = TriggerCreate("libPEEP_gt_CheckboxHideNamePanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Show Floating Icons
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxShowFloatingIcons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshFloatingIconsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxShowFloatingIcons_Init () {
    libPEEP_gt_CheckboxShowFloatingIcons = TriggerCreate("libPEEP_gt_CheckboxShowFloatingIcons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Advanced Resource Panel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxAdvancedResourcePanel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((DialogIsVisible(libPEEP_gv_recUI.lv_dStatsDialog, lv_intPlayer) == true) || (DialogIsVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, lv_intPlayer) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diOptionAdvancedResourcePanel, lv_intPlayer) == true)) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStats = true;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStatsBlizzard = false;
    }
    else {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStatsDialog, PlayerGroupSingle(lv_intPlayer), false);
        DialogSetVisible(libPEEP_gv_recUI.lv_dStatsBlizzardDialog, PlayerGroupSingle(lv_intPlayer), true);
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStats = false;
        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStatsBlizzard = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxAdvancedResourcePanel_Init () {
    libPEEP_gt_CheckboxAdvancedResourcePanel = TriggerCreate("libPEEP_gt_CheckboxAdvancedResourcePanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slider: Smart Cam idle time
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_SliderSmartCamidletime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diOptionCameraIdleTimeLabel, FixedToText(libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, lv_intPlayer), 1), PlayerGroupSingle(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_SliderSmartCamidletime_Init () {
    libPEEP_gt_SliderSmartCamidletime = TriggerCreate("libPEEP_gt_SliderSmartCamidletime_Func");
    TriggerEnable(libPEEP_gt_SliderSmartCamidletime, false);
    TriggerAddEventDialogControl(libPEEP_gt_SliderSmartCamidletime, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Auto Cam Style
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownAutoCamStyle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemTooltip(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, libPEEP_gv_recGlobals.lv_recAutoCamStyles[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, 1)].lv_txtDescription, PlayerGroupSingle(lv_intPlayer));
    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 3)) {
        if (((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 4) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 5))) {
            libPEEP_gf_InitializeSlowRotationforPlayer(lv_intPlayer);
        }
        else {
            CameraSetValue(lv_intPlayer, c_cameraValueYaw, 90.0, 0.6, -1, 10);
            CameraSetValue(lv_intPlayer, c_cameraValuePitch, 56.0, 0.6, -1, 10);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownAutoCamStyle_Init () {
    libPEEP_gt_PulldownAutoCamStyle = TriggerCreate("libPEEP_gt_PulldownAutoCamStyle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buttons: Option Tabs
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonsOptionTabs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_diDialogItem;
    int lv_intPlayer;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto77BF773A_ae;
    const int auto77BF773A_ai = 1;

    // Variable Initialization
    lv_diDialogItem = EventDialogControl();
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HideAllOptionDialogsforPlayer(lv_intPlayer);
    auto77BF773A_ae = libPEEP_gv_recGlobals.lv_intNumOptionTabs;
    lv_intIndex = 1;
    for ( ; ( (auto77BF773A_ai >= 0 && lv_intIndex <= auto77BF773A_ae) || (auto77BF773A_ai < 0 && lv_intIndex >= auto77BF773A_ae) ) ; lv_intIndex += auto77BF773A_ai ) {
        if ((libPEEP_gv_recUI.lv_diOptionTabsButtons[lv_intIndex] == lv_diDialogItem)) {
            if ((lv_intIndex == 1)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsDialog, PlayerGroupSingle(lv_intPlayer), true);
            }
            else if ((lv_intIndex == 2)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dOptionsPersonalDialog, PlayerGroupSingle(lv_intPlayer), true);
            }
            else if ((lv_intIndex == 3)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dCustNamePanelDialog, PlayerGroupSingle(lv_intPlayer), true);
            }
            else if ((lv_intIndex == 4)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dInventoryDialog, PlayerGroupSingle(lv_intPlayer), true);
            }
            else if ((lv_intIndex == 5)) {
                DialogSetVisible(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, PlayerGroupSingle(lv_intPlayer), true);
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonsOptionTabs_Init () {
    libPEEP_gt_ButtonsOptionTabs = TriggerCreate("libPEEP_gt_ButtonsOptionTabs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Structures
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonStructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton = 1;
    libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonStructures_Init () {
    libPEEP_gt_ButtonStructures = TriggerCreate("libPEEP_gt_ButtonStructures_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Research
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonResearch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton = 2;
    libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonResearch_Init () {
    libPEEP_gt_ButtonResearch = TriggerCreate("libPEEP_gt_ButtonResearch_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Resources
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton = 3;
    libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonResources_Init () {
    libPEEP_gt_ButtonResources = TriggerCreate("libPEEP_gt_ButtonResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Supplies
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonSupplies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton = 4;
    libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonSupplies_Init () {
    libPEEP_gt_ButtonSupplies = TriggerCreate("libPEEP_gt_ButtonSupplies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Killed
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton = 5;
    libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonKilled_Init () {
    libPEEP_gt_ButtonKilled = TriggerCreate("libPEEP_gt_ButtonKilled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: APM
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonAPM_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastTOWButton = 6;
    libPEEP_gf_RefreshQuickDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonAPM_Init () {
    libPEEP_gt_ButtonAPM = TriggerCreate("libPEEP_gt_ButtonAPM_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Refresh Stats
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicRefreshStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshResourcePanels();
    libPEEP_gf_RefreshAllQuickDialogs();
    if ((libPEEP_gv_recGameState.lv_intMatchSecondsElapsed > 3)) {
        libPEEP_gf_RefreshNamePanelSupply();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicRefreshStats_Init () {
    libPEEP_gt_PeriodicRefreshStats = TriggerCreate("libPEEP_gt_PeriodicRefreshStats_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Toggle Simple Stats
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonToggleSimpleStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_ToggleSimpleStatsforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonToggleSimpleStats_Init () {
    libPEEP_gt_ButtonToggleSimpleStats = TriggerCreate("libPEEP_gt_ButtonToggleSimpleStats_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer Expire
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerExpire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto9357B166_ae;
    const int auto9357B166_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9357B166_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto9357B166_ai >= 0 && lv_intPlayer <= auto9357B166_ae) || (auto9357B166_ai < 0 && lv_intPlayer >= auto9357B166_ae) ) ; lv_intPlayer += auto9357B166_ai ) {
        libPEEP_gf_RefreshResourceTradingDialogforPlayer(lv_intPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerExpire_Init () {
    libPEEP_gt_TimerExpire = TriggerCreate("libPEEP_gt_TimerExpire_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerExpire, libPEEP_gv_recGlobals.lv_timerResourceTrading);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Resource Trading
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXResourceTrading_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXResourceTrading_Init () {
    libPEEP_gt_ButtonXResourceTrading = TriggerCreate("libPEEP_gt_ButtonXResourceTrading_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Launch Resource Trading
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonLaunchResourceTrading_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingDialog, PlayerGroupSingle(lv_intPlayer), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonLaunchResourceTrading_Init () {
    libPEEP_gt_ButtonLaunchResourceTrading = TriggerCreate("libPEEP_gt_ButtonLaunchResourceTrading_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Send Resources
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonSendResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intPlayer2;
    int lv_intNumMineralsToSend;
    int lv_intNumVespeneToSend;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerResourceTrading) <= 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intPlayer2 = libPEEP_gv_recPlayers[lv_intPlayer].lv_intTeammateList[DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diResourcePlayerPulldown, lv_intPlayer)];
    lv_intNumMineralsToSend = libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumMineralsToTrade;
    if ((lv_intNumMineralsToSend > PlayerGetPropertyInt(lv_intPlayer, c_playerPropMinerals))) {
        lv_intNumMineralsToSend = PlayerGetPropertyInt(lv_intPlayer, c_playerPropMinerals);
    }

    lv_intNumVespeneToSend = libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumMineralsToTrade;
    if ((lv_intNumVespeneToSend > PlayerGetPropertyInt(lv_intPlayer, c_playerPropVespene))) {
        lv_intNumVespeneToSend = PlayerGetPropertyInt(lv_intPlayer, c_playerPropVespene);
    }

    if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recPlayers[lv_intPlayer2].lv_boolPlayingMatch == true))) {
        PlayerModifyPropertyInt(lv_intPlayer, c_playerPropMinerals, c_playerPropOperSubtract, lv_intNumMineralsToSend);
        PlayerModifyPropertyInt(lv_intPlayer, c_playerPropVespene, c_playerPropOperSubtract, lv_intNumVespeneToSend);
        PlayerModifyPropertyInt(lv_intPlayer2, c_playerPropMinerals, c_playerPropOperAdd, lv_intNumMineralsToSend);
        PlayerModifyPropertyInt(lv_intPlayer2, c_playerPropVespene, c_playerPropOperAdd, lv_intNumVespeneToSend);
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumMineralsToTrade = 0;
    libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumVespeneToTrade = 0;
    libPEEP_gf_RefreshResourceTradingDialogforPlayer(lv_intPlayer);
    DialogSetVisible(libPEEP_gv_recUI.lv_dResourceTradingDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonSendResources_Init () {
    libPEEP_gt_ButtonSendResources = TriggerCreate("libPEEP_gt_ButtonSendResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: More Minerals
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonMoreMinerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intNewAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intNewAmount = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumMineralsToTrade + 50);
    if ((lv_intNewAmount <= PlayerGetPropertyInt(lv_intPlayer, c_playerPropMinerals))) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumMineralsToTrade += 50;
    }

    libPEEP_gf_RefreshResourceTradingDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonMoreMinerals_Init () {
    libPEEP_gt_ButtonMoreMinerals = TriggerCreate("libPEEP_gt_ButtonMoreMinerals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Less Minerals
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonLessMinerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intNewAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intNewAmount = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumMineralsToTrade - 50);
    if ((lv_intNewAmount >= 0)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumMineralsToTrade -= 50;
    }

    libPEEP_gf_RefreshResourceTradingDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonLessMinerals_Init () {
    libPEEP_gt_ButtonLessMinerals = TriggerCreate("libPEEP_gt_ButtonLessMinerals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: More Vespene
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonMoreVespene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intNewAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intNewAmount = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumVespeneToTrade + 50);
    if ((lv_intNewAmount <= PlayerGetPropertyInt(lv_intPlayer, c_playerPropVespene))) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumVespeneToTrade += 50;
    }

    libPEEP_gf_RefreshResourceTradingDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonMoreVespene_Init () {
    libPEEP_gt_ButtonMoreVespene = TriggerCreate("libPEEP_gt_ButtonMoreVespene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Less Vespene
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonLessVespene_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intNewAmount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intNewAmount = (libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumVespeneToTrade - 50);
    if ((lv_intNewAmount >= 0)) {
        libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumVespeneToTrade -= 50;
    }

    libPEEP_gf_RefreshResourceTradingDialogforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonLessVespene_Init () {
    libPEEP_gt_ButtonLessVespene = TriggerCreate("libPEEP_gt_ButtonLessVespene_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Confirm Purchase
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonConfirmPurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gf_PurchaseItemforPlayer(libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastStoreSelection, lv_intPlayer);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastStoreSelection = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonConfirmPurchase_Init () {
    libPEEP_gt_ButtonConfirmPurchase = TriggerCreate("libPEEP_gt_ButtonConfirmPurchase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Decline Purchase
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonDeclinePurchase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastStoreSelection = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonDeclinePurchase_Init () {
    libPEEP_gt_ButtonDeclinePurchase = TriggerCreate("libPEEP_gt_ButtonDeclinePurchase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEVETST: Morechips
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_DEVETSTMorechips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intAmount;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intAmount = 10000;
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_intChips += lv_intAmount;
    libPEEP_gf_RefreshStoreDialogforPlayer(lv_intPlayer);
    libPEEP_gf_CreateChatMessage(0, (StringExternal("Param/Value/lib_PEEP_05ED054F") + libPEEP_gf_formatIntegerAsText(lv_intAmount) + StringExternal("Param/Value/lib_PEEP_B86CDE11")), lv_intPlayer, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_DEVETSTMorechips_Init () {
    libPEEP_gt_DEVETSTMorechips = TriggerCreate("libPEEP_gt_DEVETSTMorechips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulldown: Aisle
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PulldownAisle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intAisle;
    int lv_intPlayer;
    int lv_intSelection;
    text lv_txtMessage;
    text lv_txtComingSoon;

    // Automatic Variable Declarations
    int autoAD9B4BE0_ae;
    const int autoAD9B4BE0_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSelection = DialogControlGetSelectedItem(EventDialogControl(), lv_intPlayer);

    // Actions
    if (!runActions) {
        return true;
    }

    autoAD9B4BE0_ae = libPEEP_gv_recGlobals.lv_intNumStoreAisles;
    lv_intAisle = 1;
    for ( ; ( (autoAD9B4BE0_ai >= 0 && lv_intAisle <= autoAD9B4BE0_ae) || (autoAD9B4BE0_ai < 0 && lv_intAisle >= autoAD9B4BE0_ae) ) ; lv_intAisle += autoAD9B4BE0_ai ) {
        if (((lv_intAisle == lv_intSelection) && (DialogIsVisible(libPEEP_gv_recUI.lv_dStoreDialog, lv_intPlayer) == true))) {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], PlayerGroupSingle(lv_intPlayer), true);
        }
        else {
            DialogSetVisible(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], PlayerGroupSingle(lv_intPlayer), false);
        }
    }
    if ((libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intSelection].lv_intNumItems == 0)) {
        lv_txtComingSoon = StringExternal("Param/Value/lib_PEEP_50B5E6A5");
    }

    lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_93FEB4A2") + libPEEP_gv_recGlobals.lv_recStoreAisles[lv_intSelection].lv_txtDescription + lv_txtComingSoon + StringExternal("Param/Value/lib_PEEP_8582FE79"));
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diStoreDescriptionLabel, lv_txtMessage, PlayerGroupSingle(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PulldownAisle_Init () {
    libPEEP_gt_PulldownAisle = TriggerCreate("libPEEP_gt_PulldownAisle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Store Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXStoreDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intAisle;

    // Automatic Variable Declarations
    int autoB9A2215B_ae;
    const int autoB9A2215B_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dStoreDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolDialogDisplayedStore = false;
    autoB9A2215B_ae = libPEEP_gv_recGlobals.lv_intNumStoreAisles;
    lv_intAisle = 1;
    for ( ; ( (autoB9A2215B_ai >= 0 && lv_intAisle <= autoB9A2215B_ae) || (autoB9A2215B_ai < 0 && lv_intAisle >= autoB9A2215B_ae) ) ; lv_intAisle += autoB9A2215B_ai ) {
        DialogSetVisible(libPEEP_gv_recUI.lv_dStoreAisleDialogs[lv_intAisle], PlayerGroupSingle(lv_intPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXStoreDialog_Init () {
    libPEEP_gt_ButtonXStoreDialog = TriggerCreate("libPEEP_gt_ButtonXStoreDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Cash My Chips
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonCashMyChips_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CashChipsforPlayer(lv_intPlayer);
    libPEEP_gf_RefreshLeaderboardforAllPlayers();
    libPEEP_gf_RefreshDashboardforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonCashMyChips_Init () {
    libPEEP_gt_ButtonCashMyChips = TriggerCreate("libPEEP_gt_ButtonCashMyChips_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Purchase Item
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonPurchaseItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intItemID;
    text lv_txtMessage;
    int lv_intPrice;

    // Automatic Variable Declarations
    const int auto28570D13_ae = 200;
    const int auto28570D13_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intItemID = 1;
    for ( ; ( (auto28570D13_ai >= 0 && lv_intItemID <= auto28570D13_ae) || (auto28570D13_ai < 0 && lv_intItemID >= auto28570D13_ae) ) ; lv_intItemID += auto28570D13_ai ) {
        if ((EventDialogControl() == libPEEP_gv_recUI.lv_diStoreButtons[lv_intItemID])) {
            lv_intPrice = libPEEP_gv_recStoreItems[lv_intItemID].lv_intPrice;
            if ((lv_intPrice > libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsInAccount)) {
                lv_txtMessage = (TextWithColor(StringExternal("Param/Value/lib_PEEP_17EFD3DC"), (Color(100.00, 0.00, 0.00))) + StringExternal("Param/Value/lib_PEEP_679A2F00") + libPEEP_gv_recStoreItems[lv_intItemID].lv_txtName + StringExternal("Param/Value/lib_PEEP_C28FFA15") + TextWithColor(StringExternal("Param/Value/lib_PEEP_27CD678C"), (Color(100.00, 0.00, 0.00))) + TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intPrice), (Color(100.00, 0.00, 0.00))) + StringExternal("Param/Value/lib_PEEP_5ADEA2B2") + TextWithColor(StringExternal("Param/Value/lib_PEEP_D30EE6B4"), (Color(150*100/255,150*100/255,30*100/255))) + TextWithColor(libPEEP_gf_formatIntegerAsText((lv_intPrice - libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsInAccount)), (Color(150*100/255,150*100/255,30*100/255))) + StringExternal("Param/Value/lib_PEEP_969F98ED"));
                DialogControlSetVisible(libPEEP_gv_recUI.lv_diPurchaseYes, PlayerGroupSingle(lv_intPlayer), false);
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diPurchaseNo, StringExternal("Param/Value/lib_PEEP_08577CAB"), PlayerGroupSingle(lv_intPlayer));
            }
            else {
                lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_0392D40E") + libPEEP_gv_recStoreItems[lv_intItemID].lv_txtName + StringExternal("Param/Value/lib_PEEP_916678F8") + TextWithColor(StringExternal("Param/Value/lib_PEEP_0A52DE57"), (Color(150*100/255,150*100/255,30*100/255))) + TextWithColor(libPEEP_gf_formatIntegerAsText(lv_intPrice), (Color(150*100/255,150*100/255,30*100/255))) + StringExternal("Param/Value/lib_PEEP_0D33B96B") + TextWithColor(StringExternal("Param/Value/lib_PEEP_76DC6107"), (Color(22*100/255,128*100/255,0))) + TextWithColor(libPEEP_gf_formatIntegerAsText((libPEEP_gv_recPlayers[lv_intPlayer].lv_intBankChipsInAccount - lv_intPrice)), (Color(22*100/255,128*100/255,0))) + StringExternal("Param/Value/lib_PEEP_11E522A4"));
                DialogControlSetVisible(libPEEP_gv_recUI.lv_diPurchaseYes, PlayerGroupSingle(lv_intPlayer), true);
                libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diPurchaseNo, StringExternal("Param/Value/lib_PEEP_E7C78932"), PlayerGroupSingle(lv_intPlayer));
            }
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diPurchaseConfirmationLabel, lv_txtMessage, PlayerGroupSingle(lv_intPlayer));
            DialogSetVisible(libPEEP_gv_recUI.lv_dPurchaseConfirmationDialog, PlayerGroupSingle(lv_intPlayer), true);
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastStoreSelection = lv_intItemID;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonPurchaseItem_Init () {
    libPEEP_gt_ButtonPurchaseItem = TriggerCreate("libPEEP_gt_ButtonPurchaseItem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: X Team Restriction Dialog
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonXTeamRestrictionDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dOptionTabsDialog, PlayerGroupSingle(lv_intPlayer), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dTeamRestrictionDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonXTeamRestrictionDialog_Init () {
    libPEEP_gt_ButtonXTeamRestrictionDialog = TriggerCreate("libPEEP_gt_ButtonXTeamRestrictionDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkbox: Check All
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxCheckAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;
    int lv_intIndex;
    int lv_intTeam;

    // Automatic Variable Declarations
    int auto1B7B45BE_ae;
    const int auto1B7B45BE_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_boolGameInitComplete == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1B7B45BE_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (auto1B7B45BE_ai >= 0 && lv_intTmpPlayer <= auto1B7B45BE_ae) || (auto1B7B45BE_ai < 0 && lv_intTmpPlayer >= auto1B7B45BE_ae) ) ; lv_intTmpPlayer += auto1B7B45BE_ai ) {
        if ((lv_intPlayer != lv_intTmpPlayer)) {
            if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diTeamRestrictionCheckAll, lv_intPlayer) == true)) {
                libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intTmpPlayer], true, PlayerGroupSingle(lv_intPlayer));
            }
            else {
                libNtve_gf_SetDialogItemChecked(libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intTmpPlayer], false, PlayerGroupSingle(lv_intPlayer));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxCheckAll_Init () {
    libPEEP_gt_CheckboxCheckAll = TriggerCreate("libPEEP_gt_CheckboxCheckAll_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Checkboxes: Player Restrictions
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckboxesPlayerRestrictions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intTmpPlayer;
    int lv_intTeam;
    int lv_intIndex;
    int lv_intPlayer;
    bool lv_boolTriggered;

    // Automatic Variable Declarations
    int autoF3483F5F_ae;
    const int autoF3483F5F_ai = 1;
    int auto5299C40B_ae;
    const int auto5299C40B_ai = 1;

    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    autoF3483F5F_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intTmpPlayer = 1;
    for ( ; ( (autoF3483F5F_ai >= 0 && lv_intTmpPlayer <= autoF3483F5F_ae) || (autoF3483F5F_ai < 0 && lv_intTmpPlayer >= autoF3483F5F_ae) ) ; lv_intTmpPlayer += autoF3483F5F_ai ) {
        if (((EventDialogControl() == libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intTmpPlayer]) && (lv_intPlayer != lv_intTmpPlayer))) {
            lv_boolTriggered = true;
            if ((libNtve_gf_DialogItemIsChecked(libPEEP_gv_recUI.lv_diTeamRestrictionCheckboxes[lv_intTmpPlayer], lv_intPlayer) == true)) {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_boolTeamAllowanceList[lv_intTmpPlayer] = true;
            }
            else {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_boolTeamAllowanceList[lv_intTmpPlayer] = false;
                lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam;
                if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && (lv_intTeam > 0) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsTeamLeader == true))) {
                    auto5299C40B_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
                    lv_intIndex = 1;
                    for ( ; ( (auto5299C40B_ai >= 0 && lv_intIndex <= auto5299C40B_ae) || (auto5299C40B_ai < 0 && lv_intIndex >= auto5299C40B_ae) ) ; lv_intIndex += auto5299C40B_ai ) {
                        if (((lv_intTmpPlayer != lv_intPlayer) && (lv_intTmpPlayer == libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex]))) {
                            libPEEP_gf_KickPlayerOffTeam(lv_intPlayer, lv_intTmpPlayer, lv_intTeam);
                        }

                    }
                }

            }
        }

        if (((lv_boolTriggered == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            libPEEP_gf_RefreshAvatarButtonsforPlayer(lv_intTmpPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckboxesPlayerRestrictions_Init () {
    libPEEP_gt_CheckboxesPlayerRestrictions = TriggerCreate("libPEEP_gt_CheckboxesPlayerRestrictions_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Move: Pen
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MouseMovePen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intMouseX;
    int lv_intMouseY;
    int lv_intPenX;
    int lv_intPenY;
    int lv_intCursorX;
    int lv_intCursorY;
    int lv_intIndex;
    fixed lv_realMultiplier;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intMouseX = EventMouseMovedPosXUI();
    lv_intMouseY = EventMouseMovedPosYUI();
    lv_realMultiplier = 1.7;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPenModeEngaged == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_UsePen(lv_intPlayer, lv_intMouseX, lv_intMouseY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MouseMovePen_Init () {
    libPEEP_gt_MouseMovePen = TriggerCreate("libPEEP_gt_MouseMovePen_Func");
    TriggerAddEventMouseMoved(libPEEP_gt_MouseMovePen, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Down: Engage Pen
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MouseDownEngagePen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intMouseX;
    int lv_intMouseY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intMouseX = EventMouseClickedPosXUI();
    lv_intMouseY = EventMouseClickedPosYUI();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPenModeEngaged == true) && (libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPenIsDrawing = true;
    libPEEP_gf_UsePen(lv_intPlayer, lv_intMouseX, lv_intMouseY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MouseDownEngagePen_Init () {
    libPEEP_gt_MouseDownEngagePen = TriggerCreate("libPEEP_gt_MouseDownEngagePen_Func");
    TriggerAddEventMouseClicked(libPEEP_gt_MouseDownEngagePen, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mouse Up: Disengage Pen
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MouseUpDisengagePen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intGameStyle == 2) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolIsCommentator == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPenIsDrawing = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MouseUpDisengagePen_Init () {
    libPEEP_gt_MouseUpDisengagePen = TriggerCreate("libPEEP_gt_MouseUpDisengagePen_Func");
    TriggerAddEventMouseClicked(libPEEP_gt_MouseUpDisengagePen, c_playerAny, c_mouseButtonLeft, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Surrender Decline
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonSurrenderDecline_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dSurrenderDialog, PlayerGroupSingle(lv_intPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonSurrenderDecline_Init () {
    libPEEP_gt_ButtonSurrenderDecline = TriggerCreate("libPEEP_gt_ButtonSurrenderDecline_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Button: Surrender Confirm
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ButtonSurrenderConfirm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 9, StringExternal("Param/Value/lib_PEEP_BF78463C"), StringExternal("Param/Value/lib_PEEP_48BA934E"), (null));
    DialogSetVisible(libPEEP_gv_recUI.lv_dSurrenderDialog, PlayerGroupSingle(lv_intPlayer), false);
    libPEEP_gf_RemovePlayerfromMatch(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ButtonSurrenderConfirm_Init () {
    libPEEP_gt_ButtonSurrenderConfirm = TriggerCreate("libPEEP_gt_ButtonSurrenderConfirm_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scouting
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Scouting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    order lv_oOrder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = EventPlayer();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_oOrder = EventUnitOrder();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown) <= 0.0) && ((lv_utUnitType == "SCV") || (lv_utUnitType == "Probe") || (lv_utUnitType == "Drone") || (lv_utUnitType == "DroneBurrowed") || (lv_utUnitType == "ACR") || (lv_utUnitType == "Scavenger") || (lv_utUnitType == "Converter") || (lv_utUnitType == "Overlord") || (lv_utUnitType == "Overseer") || (lv_utUnitType == "Observer") || (lv_utUnitType == "Raven"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown, libPEEP_gv_recGlobals.lv_realGlobalEventCooldown, false, c_timeGame);
    libPEEP_gf_HandleCamEvent(lv_intPlayer, libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 1, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Scouting_Init () {
    libPEEP_gt_Scouting = TriggerCreate("libPEEP_gt_Scouting_Func");
    TriggerEnable(libPEEP_gt_Scouting, false);
    TriggerAddEventUnitOrder(libPEEP_gt_Scouting, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(libPEEP_gt_Scouting, null, AbilityCommand("attack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Builds Structure
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_BuildsStructure_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnitProgressUnit();
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown) <= 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_uUnit), c_unitAttributeStructure) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown, libPEEP_gv_recGlobals.lv_realGlobalEventCooldown, false, c_timeGame);
    libPEEP_gf_HandleCamEvent(lv_intPlayer, libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 2, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_BuildsStructure_Init () {
    libPEEP_gt_BuildsStructure = TriggerCreate("libPEEP_gt_BuildsStructure_Func");
    TriggerEnable(libPEEP_gt_BuildsStructure, false);
    TriggerAddEventUnitConstructProgress(libPEEP_gt_BuildsStructure, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enhances Structure
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_EnhancesStructure_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown) <= 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown, libPEEP_gv_recGlobals.lv_realGlobalEventCooldown, false, c_timeGame);
    libPEEP_gf_HandleCamEvent(lv_intPlayer, libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 2, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_EnhancesStructure_Init () {
    libPEEP_gt_EnhancesStructure = TriggerCreate("libPEEP_gt_EnhancesStructure_Func");
    TriggerEnable(libPEEP_gt_EnhancesStructure, false);
    TriggerAddEventUnitAbility(libPEEP_gt_EnhancesStructure, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libPEEP_gt_EnhancesStructure, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libPEEP_gt_EnhancesStructure, null, AbilityCommand("UpgradeToWarpGate", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libPEEP_gt_EnhancesStructure, null, AbilityCommand("UpgradeToLair", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libPEEP_gt_EnhancesStructure, null, AbilityCommand("UpgradeToHive", 255), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libPEEP_gt_EnhancesStructure, null, AbilityCommand("UpgradeToGreaterSpire", 255), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancels Structure
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CancelsStructure_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown) <= 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_uUnit), c_unitAttributeStructure) == true) && (EventUnitDamageDeathCheck(c_deathTypeCancel) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown, libPEEP_gv_recGlobals.lv_realGlobalEventCooldown, false, c_timeGame);
    libPEEP_gf_HandleCamEvent(lv_intPlayer, libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 2, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CancelsStructure_Init () {
    libPEEP_gt_CancelsStructure = TriggerCreate("libPEEP_gt_CancelsStructure_Func");
    TriggerEnable(libPEEP_gt_CancelsStructure, false);
    TriggerAddEventUnitDied(libPEEP_gt_CancelsStructure, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Ordered to Move/Attack
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_UnitOrderedtoMoveAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    order lv_oOrder;
    int lv_intStructureCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = EventPlayer();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_oOrder = EventUnitOrder();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown) <= 0.0) && (lv_utUnitType != "SCV") && (lv_utUnitType != "Probe") && (lv_utUnitType != "Drone") && (lv_utUnitType != "DroneBurrowed") && (lv_utUnitType != "ACR") && (lv_utUnitType != "Scavenger") && (lv_utUnitType != "Converter") && (lv_utUnitType != "Overlord") && (lv_utUnitType != "Overseer") && (lv_utUnitType != "Observer") && (lv_utUnitType != "Raven")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown, libPEEP_gv_recGlobals.lv_realGlobalEventCooldown, false, c_timeGame);
    libPEEP_gf_HandleCamEvent(lv_intPlayer, libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 3, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_UnitOrderedtoMoveAttack_Init () {
    libPEEP_gt_UnitOrderedtoMoveAttack = TriggerCreate("libPEEP_gt_UnitOrderedtoMoveAttack_Func");
    TriggerEnable(libPEEP_gt_UnitOrderedtoMoveAttack, false);
    TriggerAddEventUnitOrder(libPEEP_gt_UnitOrderedtoMoveAttack, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(libPEEP_gt_UnitOrderedtoMoveAttack, null, AbilityCommand("attack", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit is Attacked
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_UnitisAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnitAttacked;
    unit lv_uUnitAttacker;
    int lv_intPlayer;
    unitgroup lv_ugUnitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnitAttacked = EventUnit();
    lv_uUnitAttacker = EventUnitTarget();
    lv_intPlayer = UnitGetOwner(EventUnit());
    lv_ugUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown) <= 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gv_recGameState.lv_realLastAttackTime = GameGetMissionTime();
    TimerStart(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown, libPEEP_gv_recGlobals.lv_realGlobalEventCooldown, false, c_timeGame);
    UnitGroupAdd(lv_ugUnitGroup, lv_uUnitAttacked);
    UnitGroupAdd(lv_ugUnitGroup, lv_uUnitAttacker);
    libPEEP_gf_HandleCamEvent(lv_intPlayer, libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 4, lv_uUnitAttacker);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_UnitisAttacked_Init () {
    libPEEP_gt_UnitisAttacked = TriggerCreate("libPEEP_gt_UnitisAttacked_Func");
    TriggerEnable(libPEEP_gt_UnitisAttacked, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_UnitisAttacked, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Razed
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_BuildingRazed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnitKiller;
    unit lv_uUnitKilled;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnitKiller = libNtve_gf_KillingUnit();
    lv_uUnitKilled = EventUnit();
    lv_intPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffCameraEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown) <= 0.0) && (UnitTypeTestAttribute(UnitGetType(lv_uUnitKilled), c_unitAttributeStructure) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recGlobals.lv_timerGlobalEventCooldown, libPEEP_gv_recGlobals.lv_realGlobalEventCooldown, false, c_timeGame);
    if ((lv_uUnitKiller != null)) {
        libPEEP_gf_HandleCamEvent(lv_intPlayer, libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 5, lv_uUnitKiller);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_BuildingRazed_Init () {
    libPEEP_gt_BuildingRazed = TriggerCreate("libPEEP_gt_BuildingRazed_Func");
    TriggerEnable(libPEEP_gt_BuildingRazed, false);
    TriggerAddEventUnitDied(libPEEP_gt_BuildingRazed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 1 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player1CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto971F4C31_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[1].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto971F4C31_g = libPEEP_gv_recPlayers[1].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto971F4C31_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(1), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player1CameraMoves_Init () {
    libPEEP_gt_Player1CameraMoves = TriggerCreate("libPEEP_gt_Player1CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 2 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player2CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto38BB348D_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[2].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto38BB348D_g = libPEEP_gv_recPlayers[2].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto38BB348D_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(2), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player2CameraMoves_Init () {
    libPEEP_gt_Player2CameraMoves = TriggerCreate("libPEEP_gt_Player2CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 3 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player3CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup autoF22C909B_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[3].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF22C909B_g = libPEEP_gv_recPlayers[3].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(autoF22C909B_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(3), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player3CameraMoves_Init () {
    libPEEP_gt_Player3CameraMoves = TriggerCreate("libPEEP_gt_Player3CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 4 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player4CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto03F5DC9A_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[4].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto03F5DC9A_g = libPEEP_gv_recPlayers[4].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto03F5DC9A_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(4), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player4CameraMoves_Init () {
    libPEEP_gt_Player4CameraMoves = TriggerCreate("libPEEP_gt_Player4CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 5 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player5CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto5CF4838F_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[5].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5CF4838F_g = libPEEP_gv_recPlayers[5].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto5CF4838F_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(5), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player5CameraMoves_Init () {
    libPEEP_gt_Player5CameraMoves = TriggerCreate("libPEEP_gt_Player5CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 6 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player6CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto913C4214_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[6].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto913C4214_g = libPEEP_gv_recPlayers[6].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto913C4214_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(6), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player6CameraMoves_Init () {
    libPEEP_gt_Player6CameraMoves = TriggerCreate("libPEEP_gt_Player6CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 7 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player7CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup autoC53962F8_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[7].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC53962F8_g = libPEEP_gv_recPlayers[7].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(autoC53962F8_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(7), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player7CameraMoves_Init () {
    libPEEP_gt_Player7CameraMoves = TriggerCreate("libPEEP_gt_Player7CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 8 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player8CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup autoCD3C810E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[8].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCD3C810E_g = libPEEP_gv_recPlayers[8].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(autoCD3C810E_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(8), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player8CameraMoves_Init () {
    libPEEP_gt_Player8CameraMoves = TriggerCreate("libPEEP_gt_Player8CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 9 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player9CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto7AE2452E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[9].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7AE2452E_g = libPEEP_gv_recPlayers[9].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto7AE2452E_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(9), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player9CameraMoves_Init () {
    libPEEP_gt_Player9CameraMoves = TriggerCreate("libPEEP_gt_Player9CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 10 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player10CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto74DDE2BC_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[10].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto74DDE2BC_g = libPEEP_gv_recPlayers[10].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto74DDE2BC_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(10), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player10CameraMoves_Init () {
    libPEEP_gt_Player10CameraMoves = TriggerCreate("libPEEP_gt_Player10CameraMoves_Func");
    TriggerAddEventCameraMove(libPEEP_gt_Player10CameraMoves, 10, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 11 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player11CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto75C6AEFF_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[11].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto75C6AEFF_g = libPEEP_gv_recPlayers[11].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto75C6AEFF_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(11), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player11CameraMoves_Init () {
    libPEEP_gt_Player11CameraMoves = TriggerCreate("libPEEP_gt_Player11CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 12 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player12CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup autoFE0250EF_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[12].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFE0250EF_g = libPEEP_gv_recPlayers[12].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(autoFE0250EF_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(12), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player12CameraMoves_Init () {
    libPEEP_gt_Player12CameraMoves = TriggerCreate("libPEEP_gt_Player12CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 13 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player13CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto85F3F435_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[13].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto85F3F435_g = libPEEP_gv_recPlayers[13].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto85F3F435_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(13), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player13CameraMoves_Init () {
    libPEEP_gt_Player13CameraMoves = TriggerCreate("libPEEP_gt_Player13CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player 14 Camera Moves
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_Player14CameraMoves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto471C5771_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recPlayers[14].lv_boolPlayingMatch == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto471C5771_g = libPEEP_gv_recPlayers[14].lv_pgObserversFollowingMe;
    lv_intPlayer = -1;
    while (true) {
        lv_intPlayer = PlayerGroupNextPlayer(auto471C5771_g, lv_intPlayer);
        if (lv_intPlayer < 0) { break; }
        CameraPan(lv_intPlayer, CameraGetTarget(14), 0.0, -1, 10, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_Player14CameraMoves_Init () {
    libPEEP_gt_Player14CameraMoves = TriggerCreate("libPEEP_gt_Player14CameraMoves_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Auto Cam Rotation
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicAutoCamRotation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRand;
    fixed lv_realYaw;

    // Automatic Variable Declarations
    int auto8EDEAB71_ae;
    const int auto8EDEAB71_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8EDEAB71_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto8EDEAB71_ai >= 0 && lv_intPlayer <= auto8EDEAB71_ae) || (auto8EDEAB71_ai < 0 && lv_intPlayer >= auto8EDEAB71_ae) ) ; lv_intPlayer += auto8EDEAB71_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolAutoCamEngaged == true) && ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 4) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 5)))) {
            if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 4)) {
                if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSlowRotationCamIsClockwise == true)) {
                    lv_realYaw = ModF((CameraGetYaw(lv_intPlayer) + 13.5), 360.0);
                }
                else {
                    lv_realYaw = ModF((CameraGetYaw(lv_intPlayer) - 13.5), 360.0);
                }
            }
            else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 5)) {
                if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSlowRotationCamIsClockwise == true)) {
                    lv_realYaw = ModF((CameraGetYaw(lv_intPlayer) + 35.0), 360.0);
                }
                else {
                    lv_realYaw = ModF((CameraGetYaw(lv_intPlayer) - 35.0), 360.0);
                }
            }
            CameraSetValue(lv_intPlayer, c_cameraValueYaw, lv_realYaw, 5.0, -1, 10);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicAutoCamRotation_Init () {
    libPEEP_gt_PeriodicAutoCamRotation = TriggerCreate("libPEEP_gt_PeriodicAutoCamRotation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cycle Idle Cam
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CycleIdleCam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;
    int lv_intIndex;
    int lv_intIndex2;
    int lv_intPlayerToWatch;
    fixed lv_realCooldownTime;
    unitgroup lv_ugUnitGroup;
    unit lv_uTmpUnit;
    bool lv_boolNoUnitFound;
    fixed lv_realPlayerTimeout;
    point lv_pPoint;

    // Automatic Variable Declarations
    int auto9F9C768E_ae;
    const int auto9F9C768E_ai = 1;
    int auto24816169_ae;
    const int auto24816169_ai = 1;

    // Variable Initialization
    lv_ugUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F9C768E_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto9F9C768E_ai >= 0 && lv_intPlayer <= auto9F9C768E_ae) || (auto9F9C768E_ai < 0 && lv_intPlayer >= auto9F9C768E_ae) ) ; lv_intPlayer += auto9F9C768E_ai ) {
        if (((TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerAutoCamIdler) <= 0.0) && (TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerCameraIdleExpiration) <= 0.0) && (TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerAutoCamIdler2) <= 0.0) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolAutoCamEngaged == true) && (libPEEP_gv_recGameState.lv_realLastAttackTime < (GameGetMissionTime() - 5.0)))) {
            lv_intTmpPlayer = libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastIdleCamPlayer;
            if (((lv_intTmpPlayer == 0) || (libPEEP_gv_recPlayers[lv_intTmpPlayer].lv_boolPlayingMatch == false))) {
                lv_intIndex2 = 1;
            }
            else {
                auto24816169_ae = libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving;
                lv_intIndex = 1;
                for ( ; ( (auto24816169_ai >= 0 && lv_intIndex <= auto24816169_ae) || (auto24816169_ai < 0 && lv_intIndex >= auto24816169_ae) ) ; lv_intIndex += auto24816169_ai ) {
                    if ((lv_intTmpPlayer == libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayersImObserving[lv_intIndex])) {
                        if (((lv_intIndex + 1) > libPEEP_gv_recPlayers[lv_intPlayer].lv_intNumPlayersImObserving)) {
                            lv_intIndex2 = 1;
                        }
                        else {
                            lv_intIndex2 = (lv_intIndex + 1);
                        }
                        break;
                    }

                }
            }
            lv_intPlayerToWatch = libPEEP_gv_recPlayers[lv_intPlayer].lv_intPlayersImObserving[lv_intIndex2];
            libPEEP_gv_recPlayers[lv_intPlayer].lv_intLastIdleCamPlayer = lv_intPlayerToWatch;
            if ((libPEEP_gv_recGlobals.lv_realCameraIdleCooldown < libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, lv_intPlayer))) {
                lv_realCooldownTime = libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, lv_intPlayer);
            }
            else {
                lv_realCooldownTime = libPEEP_gv_recGlobals.lv_realCameraIdleCooldown;
            }
            if ((((libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_recCamEvent.lv_intTimestamp + FixedToInt(libPEEP_gv_recGlobals.lv_realCameraIdleCooldown) + 2) <= libPEEP_gv_recGameState.lv_intMatchSecondsElapsed) || (UnitGetPropertyFixed(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_recCamEvent.lv_uUnit, c_unitPropLife, c_unitPropCurrent) <= 0.0) || (libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_recCamEvent.lv_uUnit == null) || (libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit == libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_recCamEvent.lv_uUnit) || (PointGetX(UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_recCamEvent.lv_uUnit)) <= 0.0) || (PointGetY(UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_recCamEvent.lv_uUnit)) <= 0.0))) {
                lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("CommandCenter", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                if ((lv_uTmpUnit == null)) {
                    lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("CommandCenterFlying", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                    if ((lv_uTmpUnit == null)) {
                        lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("Hatchery", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                        if ((lv_uTmpUnit == null)) {
                            lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("Hive", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                            if ((lv_uTmpUnit == null)) {
                                lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("Lair", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                if ((lv_uTmpUnit == null)) {
                                    lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("OrbitalCommand", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                    if ((lv_uTmpUnit == null)) {
                                        lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("OrbitalCommandFlying", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                        if ((lv_uTmpUnit == null)) {
                                            lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("ProcessingCore", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                            if ((lv_uTmpUnit == null)) {
                                                lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("PlanetaryFortress", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                                if ((lv_uTmpUnit == null)) {
                                                    lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("ScavengerNest", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                                    if ((lv_uTmpUnit == null)) {
                                                        lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("Citadel", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                                        if ((lv_uTmpUnit == null)) {
                                                            lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("CitadelCharged", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                                            if ((lv_uTmpUnit == null)) {
                                                                lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("Nexus", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                                                if ((lv_uTmpUnit == null)) {
                                                                    lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup(null, lv_intPlayerToWatch, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0));
                                                                    if ((lv_uTmpUnit == null)) {
                                                                        lv_uTmpUnit = libNtve_gf_ClosestUnitToPoint(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_pStartingPoint, UnitGroup("CommandCenterFlying", lv_intPlayerToWatch, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
                                                                        if ((lv_uTmpUnit == null)) {
                                                                            lv_boolNoUnitFound = true;
                                                                        }

                                                                    }

                                                                }

                                                            }

                                                        }

                                                    }

                                                }

                                            }

                                        }

                                    }

                                }

                            }

                        }

                    }

                }

                if ((lv_uTmpUnit == null)) {
                    lv_boolNoUnitFound = true;
                }

                if ((lv_boolNoUnitFound == false)) {
                    libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit = lv_uTmpUnit;
                    lv_ugUnitGroup = libNtve_gf_ConvertUnitToUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit);
                }

            }
            else {
                libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit = libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_recCamEvent.lv_uUnit;
                lv_ugUnitGroup = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayer].lv_uCurrentCameraUnit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            }
            if ((lv_boolNoUnitFound == false)) {
                lv_realPlayerTimeout = libNtve_gf_DialogItemValue(libPEEP_gv_recUI.lv_diOptionAutoCamCooldownSlider, lv_intPlayer);
                TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerAutoCamIdler, lv_realPlayerTimeout, false, c_timeGame);
                if ((lv_realPlayerTimeout < 3.0)) {
                    lv_realPlayerTimeout = 3.0;
                }

                TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerCameraIdleExpiration, lv_realCooldownTime, false, c_timeGame);
                CameraFollowUnitGroup(lv_intPlayer, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), false, false);
                if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 1)) {
                    lv_pPoint = UnitGetPosition(libPEEP_gv_recPlayers[lv_intPlayerToWatch].lv_uCurrentCameraUnit);
                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolCinematicModeEngaged == false)) {
                        lv_pPoint = PointWithOffsetPolar(lv_pPoint, 1.75, 270.0);
                    }

                    CameraPan(lv_intPlayer, lv_pPoint, 0.6, -1, 50, true);
                    Wait(1.5, c_timeReal);
                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
                else if (((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 2) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 4) || (DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 5))) {
                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
                else if ((DialogControlGetSelectedItem(libPEEP_gv_recUI.lv_diOptionAutoCamStylePulldown, lv_intPlayer) == 3)) {
                    CameraSetValue(lv_intPlayer, c_cameraValueYaw, RandomFixed((CameraGetYaw(lv_intPlayer) - 45.0), (CameraGetYaw(lv_intPlayer) + 45.0)), 1.0, -1, 10);
                    CameraSetValue(lv_intPlayer, c_cameraValuePitch, RandomFixed(30.0, 56.0), 1.0, -1, 10);
                    CameraPan(lv_intPlayer, lv_pPoint, 0.6, -1, 50, false);
                    Wait(1.5, c_timeReal);
                    CameraFollowUnitGroup(lv_intPlayer, lv_ugUnitGroup, true, false);
                }
            }
            else {
                TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerCameraIdleExpiration, lv_realCooldownTime, false, c_timeGame);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CycleIdleCam_Init () {
    libPEEP_gt_CycleIdleCam = TriggerCreate("libPEEP_gt_CycleIdleCam_Func");
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[1].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[2].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[3].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[4].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[5].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[6].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[7].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[8].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[9].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[10].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[11].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[12].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[13].lv_timerCameraIdleExpiration);
    TriggerAddEventTimer(libPEEP_gt_CycleIdleCam, libPEEP_gv_recPlayers[14].lv_timerCameraIdleExpiration);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Zergling Cheer
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerZerglingCheer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intRand;

    // Automatic Variable Declarations
    unitgroup auto02990E7F_g;
    int auto02990E7F_u;
    unit auto02990E7F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recGlobals.lv_timerPrankZerglingTimer, 2.0, false, c_timeGame);
    auto02990E7F_g = libPEEP_gv_recGlobals.lv_ugPrankUnitGroup;
    auto02990E7F_u = UnitGroupCount(auto02990E7F_g, c_unitCountAll);
    for (;; auto02990E7F_u -= 1) {
        auto02990E7F_var = UnitGroupUnitFromEnd(auto02990E7F_g, auto02990E7F_u);
        if (auto02990E7F_var == null) { break; }
        lv_intRand = RandomInt(1, 7);
        if ((lv_intRand == 1)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto02990E7F_var), c_animNameDefault, "Victory", 0, c_animTimeDefault);
        }
        else if ((lv_intRand == 2)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(auto02990E7F_var), c_animNameDefault, "Dance", 0, c_animTimeDefault);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerZerglingCheer_Init () {
    libPEEP_gt_TimerZerglingCheer = TriggerCreate("libPEEP_gt_TimerZerglingCheer_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerZerglingCheer, libPEEP_gv_recGlobals.lv_timerPrankZerglingTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Marine: Stimpack
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MarineStimpack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    unit lv_uUnit;
    int lv_intRand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(lv_uUnit) == "Marine") && (TimerGetElapsed(libPEEP_gv_recPlayers[UnitGetOwner(lv_uUnit)].lv_timerFaceoffUnitSpecialAction) <= 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recPlayers[UnitGetOwner(lv_uUnit)].lv_timerFaceoffUnitSpecialAction, 20.0, false, c_timeReal);
    UnitSetPropertyFixed(lv_uUnit, c_unitPropEnergy, 100.0);
    UnitIssueOrder(lv_uUnit, Order(AbilityCommand("Stimpack", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MarineStimpack_Init () {
    libPEEP_gt_MarineStimpack = TriggerCreate("libPEEP_gt_MarineStimpack_Func");
    TriggerEnable(libPEEP_gt_MarineStimpack, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_MarineStimpack, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thor: Strike Cannons
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ThorStrikeCannons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    unit lv_uUnit;
    int lv_intRand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(lv_uUnit) == "Thor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intRand = RandomInt(1, 2);
    if ((lv_intRand == 1)) {
        UnitSetPropertyFixed(lv_uUnit, c_unitPropEnergy, 100.0);
        UnitIssueOrder(lv_uUnit, OrderTargetingUnit(AbilityCommand("250mmStrikeCannons", 0), lv_uAttackingUnit), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ThorStrikeCannons_Init () {
    libPEEP_gt_ThorStrikeCannons = TriggerCreate("libPEEP_gt_ThorStrikeCannons_Func");
    TriggerEnable(libPEEP_gt_ThorStrikeCannons, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_ThorStrikeCannons, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stalker: Blink
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StalkerBlink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    unit lv_uUnit;
    int lv_intRand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(lv_uUnit) == "Stalker") && (TimerGetElapsed(libPEEP_gv_recPlayers[UnitGetOwner(lv_uUnit)].lv_timerFaceoffUnitSpecialAction) <= 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recPlayers[UnitGetOwner(lv_uUnit)].lv_timerFaceoffUnitSpecialAction, 6.0, false, c_timeReal);
    lv_intRand = RandomInt(1, 2);
    if (((lv_intRand == 1) && (UnitGetType(lv_uAttackingUnit) != "Baneling"))) {
        UnitSetPropertyFixed(lv_uUnit, c_unitPropEnergy, 100.0);
        UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("Blink", 0), PointWithOffsetPolar(UnitGetPosition(lv_uAttackingUnit), RandomFixed(3.0, 5.0), libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StalkerBlink_Init () {
    libPEEP_gt_StalkerBlink = TriggerCreate("libPEEP_gt_StalkerBlink_Func");
    TriggerEnable(libPEEP_gt_StalkerBlink, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_StalkerBlink, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry: Guardian Shield / Hallucination
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_SentryGuardianShieldHallucination_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    unit lv_uUnit;
    int lv_intRand;

    // Automatic Variable Declarations
    unitgroup auto2D614EC0_g;
    int auto2D614EC0_u;
    unit auto2D614EC0_var;

    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(lv_uUnit) == "Sentry") && (UnitGetType(lv_uAttackingUnit) != "Baneling") && (TimerGetElapsed(libPEEP_gv_recPlayers[UnitGetOwner(lv_uUnit)].lv_timerFaceoffUnitSpecialAction) <= 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recPlayers[UnitGetOwner(lv_uUnit)].lv_timerFaceoffUnitSpecialAction, 20.0, false, c_timeReal);
    UnitSetPropertyFixed(lv_uUnit, c_unitPropEnergy, 100.0);
    lv_intRand = RandomInt(1, 5);
    if (((lv_intRand >= 1) && (lv_intRand <= 2))) {
        lv_intRand = RandomInt(1, 10);
        if ((lv_intRand == 1)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationArchon", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 2)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationColossus", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 3)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationHighTemplar", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 4)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationImmortal", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 5)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationPhoenix", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 6)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationProbe", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 7)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationStalker", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 8)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationVoidRay", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 9)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationWarpPrism", 0)), c_orderQueueReplace);
        }
        else if ((lv_intRand == 10)) {
            UnitIssueOrder(lv_uUnit, Order(AbilityCommand("HallucinationZealot", 0)), c_orderQueueReplace);
        }
        auto2D614EC0_g = UnitGroup(null, UnitGetOwner(lv_uUnit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2D614EC0_u = UnitGroupCount(auto2D614EC0_g, c_unitCountAll);
        for (;; auto2D614EC0_u -= 1) {
            auto2D614EC0_var = UnitGroupUnitFromEnd(auto2D614EC0_g, auto2D614EC0_u);
            if (auto2D614EC0_var == null) { break; }
            if ((UnitGetType(auto2D614EC0_var) != "Sentry")) {
                UnitIssueOrder(auto2D614EC0_var, OrderTargetingPoint(AbilityCommand("attack", 0), libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint), c_orderQueueReplace);
            }

        }
    }
    else {
        UnitIssueOrder(lv_uUnit, Order(AbilityCommand("GuardianShield", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_SentryGuardianShieldHallucination_Init () {
    libPEEP_gt_SentryGuardianShieldHallucination = TriggerCreate("libPEEP_gt_SentryGuardianShieldHallucination_Func");
    TriggerEnable(libPEEP_gt_SentryGuardianShieldHallucination, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_SentryGuardianShieldHallucination, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Baneling: Annihilation
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_BanelingAnnihilation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    bool lv_boolSpecialTeamsUnit;
    int lv_intTeam;

    // Automatic Variable Declarations
    int autoC20E6EE8_ae;
    const int autoC20E6EE8_ai = 1;

    // Variable Initialization
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(EventUnitTarget()) == "Baneling")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC20E6EE8_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = libPEEP_gv_recGlobals.lv_iNT_TEAM_WINNER_INDEX;
    for ( ; ( (autoC20E6EE8_ai >= 0 && lv_intTeam <= autoC20E6EE8_ae) || (autoC20E6EE8_ai < 0 && lv_intTeam >= autoC20E6EE8_ae) ) ; lv_intTeam += autoC20E6EE8_ai ) {
        if ((UnitGetType(lv_uUnit) == libPEEP_gv_recTeams[lv_intTeam].lv_utSpawnUnit)) {
            lv_boolSpecialTeamsUnit = true;
        }

    }
    if ((lv_boolSpecialTeamsUnit == false)) {
        UnitKill(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_BanelingAnnihilation_Init () {
    libPEEP_gt_BanelingAnnihilation = TriggerCreate("libPEEP_gt_BanelingAnnihilation_Func");
    TriggerEnable(libPEEP_gt_BanelingAnnihilation, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_BanelingAnnihilation, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor: Infested Terran / Fungal / Neural Parasite
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    unit lv_uUnit;
    int lv_intRand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(lv_uUnit) == "Infestor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_uUnit, c_unitPropEnergy, 100.0);
    UnitIssueOrder(lv_uUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    lv_intRand = RandomInt(1, 4);
    if ((lv_intRand == 1)) {
        UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("InfestedTerrans", 0), PointWithOffset(UnitGetPosition(lv_uAttackingUnit), 1.0, 1.0)), c_orderQueueReplace);
    }
    else if ((lv_intRand == 2)) {
        UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("FungalGrowth", 0), UnitGetPosition(lv_uAttackingUnit)), c_orderQueueReplace);
    }
    else if ((lv_intRand == 3)) {
        UnitIssueOrder(lv_uUnit, OrderTargetingUnit(AbilityCommand("NeuralParasite", 0), lv_uAttackingUnit), c_orderQueueReplace);
    }
    else if ((lv_intRand == 4)) {
        UnitIssueOrder(lv_uUnit, Order(AbilityCommand("BurrowInfestorDown", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite_Init () {
    libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite = TriggerCreate("libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite_Func");
    TriggerEnable(libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: High Templar: Psionic Storm
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_HighTemplarPsionicStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    unit lv_uUnit;
    int lv_intRand;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(lv_uUnit) == "HighTemplar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_uUnit, c_unitPropEnergy, 100.0);
    UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("move", 0), libPEEP_gv_recTeams[libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam].lv_pFaceoffPoint), c_orderQueueReplace);
    UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), UnitGetPosition(lv_uAttackingUnit)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_HighTemplarPsionicStorm_Init () {
    libPEEP_gt_HighTemplarPsionicStorm = TriggerCreate("libPEEP_gt_HighTemplarPsionicStorm_Func");
    TriggerEnable(libPEEP_gt_HighTemplarPsionicStorm, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_HighTemplarPsionicStorm, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Probe: Warp In
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ProbeWarpIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uAttackingUnit;
    unit lv_uUnit;
    int lv_intRand;
    int lv_intPlayer;
    int lv_intIndex;

    // Automatic Variable Declarations
    int auto2D311792_ae;
    const int auto2D311792_ai = 1;

    // Variable Initialization
    lv_uAttackingUnit = EventUnitTarget();
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 2) && (UnitGetType(lv_uUnit) == "Probe") && (TimerGetElapsed(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerFaceoffUnitSpecialAction) <= 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerFaceoffUnitSpecialAction, 20.0, false, c_timeReal);
    if ((RandomInt(1, 2) == 1)) {
        PlayerScoreValueSetFromInt(lv_intPlayer, "MineralsCurrent", 1000);
        UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("move", 0), libPEEP_gv_recTeams[libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam].lv_pFaceoffPoint), c_orderQueueReplace);
        UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 1), UnitGetPosition(lv_uUnit)), c_orderQueueAddToEnd);
        auto2D311792_ae = RandomInt(0, 3);
        lv_intIndex = 1;
        for ( ; ( (auto2D311792_ai >= 0 && lv_intIndex <= auto2D311792_ae) || (auto2D311792_ai < 0 && lv_intIndex >= auto2D311792_ae) ) ; lv_intIndex += auto2D311792_ai ) {
            UnitIssueOrder(lv_uUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 1), PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, RandomFixed(0.0, 5.0), libNtve_gf_RandomAngle())), c_orderQueueAddToEnd);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ProbeWarpIn_Init () {
    libPEEP_gt_ProbeWarpIn = TriggerCreate("libPEEP_gt_ProbeWarpIn_Func");
    TriggerEnable(libPEEP_gt_ProbeWarpIn, false);
    TriggerAddEventUnitAttacked(libPEEP_gt_ProbeWarpIn, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Rotate Camera
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicRotateCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intRand;

    // Automatic Variable Declarations
    int auto1C943AA7_ae;
    const int auto1C943AA7_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recGameState.lv_intCurrentGameState == 1)) {
        if ((libPEEP_gv_recGlobals.lv_boolFaceoffClockwise == true)) {
            libPEEP_gv_recGlobals.lv_realCameraYaw = ModF((libPEEP_gv_recGlobals.lv_realCameraYaw + 2.5), 360.0);
        }
        else {
            libPEEP_gv_recGlobals.lv_realCameraYaw = ModF((libPEEP_gv_recGlobals.lv_realCameraYaw - 2.5), 360.0);
        }
    }
    else {
        libPEEP_gv_recGlobals.lv_intCameraYawCounter += 1;
        if ((libPEEP_gv_recGlobals.lv_boolFaceoffClockwise == true)) {
            libPEEP_gv_recGlobals.lv_realCameraYaw = ModF((libPEEP_gv_recGlobals.lv_realCameraYaw + (0.0 + (IntToFixed(libPEEP_gv_recGlobals.lv_intCameraYawCounter) * 5.2))), 360.0);
        }
        else {
            libPEEP_gv_recGlobals.lv_realCameraYaw = ModF((libPEEP_gv_recGlobals.lv_realCameraYaw + (0.0 - (IntToFixed(libPEEP_gv_recGlobals.lv_intCameraYawCounter) * 5.2))), 360.0);
        }
    }
    auto1C943AA7_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto1C943AA7_ai >= 0 && lv_intPlayer <= auto1C943AA7_ae) || (auto1C943AA7_ai < 0 && lv_intPlayer >= auto1C943AA7_ae) ) ; lv_intPlayer += auto1C943AA7_ai ) {
        CameraSetValue(lv_intPlayer, c_cameraValueYaw, libPEEP_gv_recGlobals.lv_realCameraYaw, 2.0, -1, 10);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicRotateCamera_Init () {
    libPEEP_gt_PeriodicRotateCamera = TriggerCreate("libPEEP_gt_PeriodicRotateCamera_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Move Teams in Circle
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicMoveTeamsinCircle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intRace;
    int lv_intNumActiveTeams;
    fixed lv_realDegreeStep;
    fixed lv_realDegrees;
    fixed lv_realDegreeBaseOffset;
    text lv_txtPlayerList;
    int lv_intTeam;
    int lv_intTeam2;
    int lv_intPlayer;
    bool lv_boolPlayerSet;
    bool lv_boolCommonerOnTeam;
    int lv_intRand;
    text lv_txtImageTag;
    int lv_intNumMatchesPlayed;
    bool lv_boolDisplayCrown;
    bool lv_boolDisplayMatchCount;
    text lv_txtMessage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recGlobals.lv_boolFaceoffClockwise == true)) {
        libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset = ModF((libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset - 30.0), 360.0);
    }
    else {
        libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset = ModF((libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset + 30.0), 360.0);
    }
    libPEEP_gf_CalculateFaceoffPoints();
    libPEEP_gf_RefreshFaceoff();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicMoveTeamsinCircle_Init () {
    libPEEP_gt_PeriodicMoveTeamsinCircle = TriggerCreate("libPEEP_gt_PeriodicMoveTeamsinCircle_Func");
    TriggerAddEventTimer(libPEEP_gt_PeriodicMoveTeamsinCircle, libPEEP_gv_recGlobals.lv_timerFaceoffPointOffsetChange);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Match Countdown
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicMatchCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_txtMessage;
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoDB7EEB10_ae;
    const int autoDB7EEB10_ai = 1;
    int autoD352D8A6_ae;
    const int autoD352D8A6_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) && (TimerIsPaused(libPEEP_gv_recGlobals.lv_timerMatchCountdown) == false) && (TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) > 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libPEEP_gv_recGameState.lv_intNumMatchesPlayed >= libPEEP_gv_recGlobals.lv_intMaxMatches)) {
        lv_txtMessage = TextWithColor(StringExternal("Param/Value/lib_PEEP_230F9018"), (Color(100.00, 0.00, 0.00)));
        lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_AEE52D15") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_1879EA34"));
    }
    else {
        if ((libPEEP_gv_recGameState.lv_boolAllCommentatorsLeft == true)) {
            TimerPause(libPEEP_gv_recGlobals.lv_timerMatchCountdown, true);
            lv_txtMessage = TextWithColor(StringExternal("Param/Value/lib_PEEP_933F7879"), (Color(100.00, 0.00, 0.00)));
            lv_txtMessage = (StringExternal("Param/Value/lib_PEEP_293235C4") + lv_txtMessage + StringExternal("Param/Value/lib_PEEP_42BFF434"));
        }
        else {
            autoDB7EEB10_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
            lv_intTeam = 1;
            for ( ; ( (autoDB7EEB10_ai >= 0 && lv_intTeam <= autoDB7EEB10_ae) || (autoDB7EEB10_ai < 0 && lv_intTeam >= autoDB7EEB10_ae) ) ; lv_intTeam += autoDB7EEB10_ai ) {
                if ((libPEEP_gv_recTeams[lv_intTeam].lv_boolEligibleForMatch == true)) {
                    autoD352D8A6_ae = libPEEP_gv_recTeams[lv_intTeam].lv_intNumPlayers;
                    lv_intIndex = 1;
                    for ( ; ( (autoD352D8A6_ai >= 0 && lv_intIndex <= autoD352D8A6_ae) || (autoD352D8A6_ai < 0 && lv_intIndex >= autoD352D8A6_ae) ) ; lv_intIndex += autoD352D8A6_ai ) {
                        UnitFlashSelection(libPEEP_gv_recPlayers[libPEEP_gv_recTeams[lv_intTeam].lv_intPlayerList[lv_intIndex]].lv_uFaceoffUnit, 0.5);
                    }
                }

            }
            lv_txtMessage = StringExternal("Param/Value/lib_PEEP_D9A31D92");
            if ((TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown) < 11.0)) {
                lv_txtMessage = (lv_txtMessage + TextWithColor(FixedToText(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown), 0), (Color(100.00, 0.00, 0.00))) + StringExternal("Param/Value/lib_PEEP_2472981A"));
                SoundPlay(SoundLink("UI_BnetCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
                if ((FixedToInt(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown)) == 10)) {
                    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingMatchModePulldown, PlayerGroupAll(), false);
                    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingPlayerSelectPulldown, PlayerGroupAll(), false);
                    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingColorSchemePulldown, PlayerGroupAll(), false);
                    libPEEP_gv_recGameState.lv_boolMatchModeVotingActive = false;
                    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diSubMatchCountdown, (StringExternal("Param/Value/lib_PEEP_10BC4B8D") + libPEEP_gv_recGlobals.lv_txtMatchModeNames[libPEEP_gv_recGameState.lv_intCurrentMatchMode] + StringExternal("Param/Value/lib_PEEP_3BA24FF7") + libPEEP_gv_recGlobals.lv_recPlayerSelectModes[libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode].lv_txtName + StringExternal("Param/Value/lib_PEEP_3E49869F")), PlayerGroupAll());
                    libNtve_gf_CreateActorAtPoint("LavaSplash", libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
                    libPEEP_gv_recGlobals.lv_asMatchCountdownActors[1] = libNtve_gf_ActorLastCreated();
                }
            }
            else {
                lv_txtMessage = (lv_txtMessage + FixedToText(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerMatchCountdown), 0));
            }
        }
    }
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, lv_txtMessage, PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicMatchCountdown_Init () {
    libPEEP_gt_PeriodicMatchCountdown = TriggerCreate("libPEEP_gt_PeriodicMatchCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Idle Units: Face Center of Faceoff
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_IdleUnitsFaceCenterofFaceoff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uTmpUnit;
    unit lv_uUnit;
    int lv_intTeam;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto0592A545_ae;
    const int auto0592A545_ai = 1;
    unitgroup autoC4C1F823_g;
    int autoC4C1F823_u;
    int auto44A45CBA_ae;
    const int auto44A45CBA_ai = 1;

    // Variable Initialization
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 1) || (libPEEP_gv_recGameState.lv_intCurrentGameState == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0592A545_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (auto0592A545_ai >= 0 && lv_intTeam <= auto0592A545_ae) || (auto0592A545_ai < 0 && lv_intTeam >= auto0592A545_ae) ) ; lv_intTeam += auto0592A545_ai ) {
        autoC4C1F823_g = libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup;
        autoC4C1F823_u = UnitGroupCount(autoC4C1F823_g, c_unitCountAll);
        for (;; autoC4C1F823_u -= 1) {
            lv_uTmpUnit = UnitGroupUnitFromEnd(autoC4C1F823_g, autoC4C1F823_u);
            if (lv_uTmpUnit == null) { break; }
            if ((lv_uUnit == lv_uTmpUnit)) {
                UnitSetFacing(lv_uUnit, ModF((libPEEP_gv_recTeams[lv_intTeam].lv_realFaceoffAngle + 180.0), 360.0), 0.3);
                auto44A45CBA_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
                lv_intPlayer = 1;
                for ( ; ( (auto44A45CBA_ai >= 0 && lv_intPlayer <= auto44A45CBA_ae) || (auto44A45CBA_ai < 0 && lv_intPlayer >= auto44A45CBA_ae) ) ; lv_intPlayer += auto44A45CBA_ai ) {
                    if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit == lv_uUnit)) {
                        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolFaceoffUnitAtRest = true;
                    }

                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_IdleUnitsFaceCenterofFaceoff_Init () {
    libPEEP_gt_IdleUnitsFaceCenterofFaceoff = TriggerCreate("libPEEP_gt_IdleUnitsFaceCenterofFaceoff_Func");
    TriggerEnable(libPEEP_gt_IdleUnitsFaceCenterofFaceoff, false);
    TriggerAddEventUnitBecomesIdle(libPEEP_gt_IdleUnitsFaceCenterofFaceoff, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Match Countdown
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerMatchCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto26C2FE23_ae;
    const int auto26C2FE23_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intNumMatchesPlayed < libPEEP_gv_recGlobals.lv_intMaxMatches) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libPEEP_gv_recUI.lv_dDashboardDialog, PlayerGroupAll(), false);
    libPEEP_gv_recGameState.lv_intCurrentGameState = 2;
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, StringToText(""), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diSubMatchCountdown, StringToText(""), PlayerGroupAll());
    auto26C2FE23_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto26C2FE23_ai >= 0 && lv_intPlayer <= auto26C2FE23_ae) || (auto26C2FE23_ai < 0 && lv_intPlayer >= auto26C2FE23_ae) ) ; lv_intPlayer += auto26C2FE23_ai ) {
        libPEEP_gf_EnterMovieModeforPlayer(lv_intPlayer);
    }
    if ((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode == 7)) {
        if ((libPEEP_gv_recGlobals.lv_intNumActiveTeams <= libPEEP_gv_recGlobals.lv_intMaxTeamsForNextMatch)) {
            TimerPause(libPEEP_gv_recGlobals.lv_timerCommentatorChoiceTimer, true);
            libPEEP_gf_CalculateTeamSelections(libPEEP_gv_recGameState.lv_intCurrentMatchMode, true);
            TimerStart(libPEEP_gv_recGlobals.lv_timerFaceoffTransitionStart, 0.0, false, c_timeGame);
        }
        else {
            libPEEP_gf_LaunchCommentatorChoice();
        }
    }
    else {
        libPEEP_gf_CalculateTeamSelections(libPEEP_gv_recGameState.lv_intCurrentMatchMode, true);
        TimerStart(libPEEP_gv_recGlobals.lv_timerFaceoffTransitionStart, 0.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerMatchCountdown_Init () {
    libPEEP_gt_TimerMatchCountdown = TriggerCreate("libPEEP_gt_TimerMatchCountdown_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerMatchCountdown, libPEEP_gv_recGlobals.lv_timerMatchCountdown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Start Minibattle
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerStartMinibattle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_StartMinibattle();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerStartMinibattle_Init () {
    libPEEP_gt_TimerStartMinibattle = TriggerCreate("libPEEP_gt_TimerStartMinibattle_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerStartMinibattle, libPEEP_gv_recGlobals.lv_timerStartMinibattle);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faceoff Transition Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_FaceoffTransitionStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_intTrueMatchMode;
    text lv_txtMatchType;
    int lv_intTeam;

    // Automatic Variable Declarations
    int auto8D96997E_ae;
    const int auto8D96997E_ai = 1;
    int auto61DB69A9_ae;
    const int auto61DB69A9_ai = 1;
    int autoFEA4ACE6_ae;
    const int autoFEA4ACE6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_AssignStartPositions();
    DialogControlSetEnabled(libPEEP_gv_recUI.lv_diVotingAllowCooperativeCheckbox, PlayerGroupAll(), false);
    lv_intTrueMatchMode = libPEEP_gv_recGameState.lv_intTrueMatchMode;
    lv_txtMatchType = libPEEP_gv_recGlobals.lv_txtMatchModeNames[lv_intTrueMatchMode];
    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diAnnouncement, (StringExternal("Param/Value/lib_PEEP_5651A371") + lv_txtMatchType + StringExternal("Param/Value/lib_PEEP_FDAB6F1F")), PlayerGroupAll());
    DialogSetVisible(libPEEP_gv_recUI.lv_dAnnouncementDialog, PlayerGroupAll(), true);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint);
    if ((libPEEP_gv_recGlobals.lv_uFaceoffAnchor != null)) {
        UnitRemove(libPEEP_gv_recGlobals.lv_uFaceoffAnchor);
    }

    libPEEP_gf_DestroyFaceoffDecals();
    auto8D96997E_ae = libPEEP_gv_recGlobals.lv_intNumCountdownActors;
    lv_intIndex = 1;
    for ( ; ( (auto8D96997E_ai >= 0 && lv_intIndex <= auto8D96997E_ae) || (auto8D96997E_ai < 0 && lv_intIndex >= auto8D96997E_ae) ) ; lv_intIndex += auto8D96997E_ai ) {
        ActorScopeKill(ActorScopeFromActor(libPEEP_gv_recGlobals.lv_asMatchCountdownActors[lv_intIndex]));
    }
    auto61DB69A9_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto61DB69A9_ai >= 0 && lv_intPlayer <= auto61DB69A9_ae) || (auto61DB69A9_ai < 0 && lv_intPlayer >= auto61DB69A9_ae) ) ; lv_intPlayer += auto61DB69A9_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            libPEEP_gf_RemovePlayerfromTeam(lv_intPlayer, true);
            libPEEP_gf_AddPlayertoTeam(lv_intPlayer, 0, false);
        }

    }
    libPEEP_gv_recGlobals.lv_realCurrentFaceoffPointOffset = libPEEP_gv_recTeams[libPEEP_gv_recGlobals.lv_intFaceoffTeams[1]].lv_realFaceoffAngle;
    if (((libPEEP_gv_recGameState.lv_intTrueMatchMode == 1) || (libPEEP_gv_recGameState.lv_intTrueMatchMode == 2))) {
        libPEEP_gf_SetPlayerColorstoColorScheme();
    }

    libPEEP_gf_CalculateTeamInfo();
    libPEEP_gf_RefreshFaceoff();
    autoFEA4ACE6_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_TEAMS;
    lv_intTeam = 1;
    for ( ; ( (autoFEA4ACE6_ai >= 0 && lv_intTeam <= autoFEA4ACE6_ae) || (autoFEA4ACE6_ai < 0 && lv_intTeam >= autoFEA4ACE6_ae) ) ; lv_intTeam += autoFEA4ACE6_ai ) {
        libPEEP_gv_recTeams[lv_intTeam].lv_txtSpecialTextTag = StringToText("");
        TextTagSetText(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, StringToText(""));
    }
    TimerStart(libPEEP_gv_recGlobals.lv_timerStartMinibattle, 2.0, false, c_timeReal);
    TimerStart(libPEEP_gv_recGlobals.lv_timerSpawnFaceoffPets, 0.0, false, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_FaceoffTransitionStart_Init () {
    libPEEP_gt_FaceoffTransitionStart = TriggerCreate("libPEEP_gt_FaceoffTransitionStart_Func");
    TriggerAddEventTimer(libPEEP_gt_FaceoffTransitionStart, libPEEP_gv_recGlobals.lv_timerFaceoffTransitionStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Faceoff Decals
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MoveFaceoffDecals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intIndex;
    int lv_intIndex2;
    fixed lv_realMaxDistance;

    // Automatic Variable Declarations
    int autoAD8E6A7D_ae;
    const int autoAD8E6A7D_ai = 1;

    // Variable Initialization
    lv_realMaxDistance = 1.2;

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAD8E6A7D_ae = libPEEP_gv_recGlobals.lv_intNumFaceoffDecals;
    lv_intIndex = 1;
    for ( ; ( (autoAD8E6A7D_ai >= 0 && lv_intIndex <= autoAD8E6A7D_ae) || (autoAD8E6A7D_ai < 0 && lv_intIndex >= autoAD8E6A7D_ae) ) ; lv_intIndex += autoAD8E6A7D_ai ) {
        UnitIssueOrder(libPEEP_gv_recGlobals.lv_uFaceoffDecalUnitList[lv_intIndex], OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(libPEEP_gv_recGlobals.lv_pCurrentFaceoffPoint, 1.1, libNtve_gf_RandomAngle())), c_orderQueueAddToEnd);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MoveFaceoffDecals_Init () {
    libPEEP_gt_MoveFaceoffDecals = TriggerCreate("libPEEP_gt_MoveFaceoffDecals_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Loading Screen
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ShowLoadingScreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intIndex;

    // Automatic Variable Declarations
    int autoEDB9CA3C_ae;
    const int autoEDB9CA3C_ai = 1;
    int auto21ABF0FE_ae;
    const int auto21ABF0FE_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMatchCountdown, StringToText(""), PlayerGroupAll());
    if (((libPEEP_gv_recGameState.lv_intNumMatchesPlayed + 1) > libPEEP_gv_recGlobals.lv_intNumMatchesToSave)) {
        libPEEP_gv_recGameState.lv_intNumMatchesPlayed = libPEEP_gv_recGlobals.lv_intNumMatchesToSave;
    }
    else {
        libPEEP_gv_recGameState.lv_intNumMatchesPlayed += 1;
    }
    Wait(0.7, c_timeReal);
    ActorScopeKill(ActorScopeFromActor(libPEEP_gv_recGlobals.lv_aFaceoffWeatherActer));
    libPEEP_gf_CreateLoadingMatchDialog();
    libPEEP_gf_SortTeamsbyStartPosition();
    GameSetSpeedValue(c_gameSpeedFaster);
    TimerStart(libPEEP_gv_recGlobals.lv_timerPrepareStartingUnits, 6.5, false, c_timeReal);
    TimerStart(libPEEP_gv_recGlobals.lv_timerMatchInitTimer, 8.0, false, c_timeReal);
    autoEDB9CA3C_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoEDB9CA3C_ai >= 0 && lv_intPlayer <= autoEDB9CA3C_ae) || (autoEDB9CA3C_ai < 0 && lv_intPlayer >= autoEDB9CA3C_ae) ) ; lv_intPlayer += autoEDB9CA3C_ai ) {
        CameraSetValue(lv_intPlayer, c_cameraValueDepthOfField, 4.5, 2.0, -1, 10);
    }
    CinematicFade(false, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 100.0, true);
    UnitRemove(libPEEP_gv_recGlobals.lv_uObserver);
    libPEEP_gf_ClearAllPrankEntities();
    auto21ABF0FE_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto21ABF0FE_ai >= 0 && lv_intPlayer <= auto21ABF0FE_ae) || (auto21ABF0FE_ai < 0 && lv_intPlayer >= auto21ABF0FE_ae) ) ; lv_intPlayer += auto21ABF0FE_ai ) {
        lv_intTeam = libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam;
        if ((lv_intTeam > 0)) {
            UnitGroupRemove(libPEEP_gv_recTeams[lv_intTeam].lv_ugFaceoffGroup, libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit);
            UnitRemove(libPEEP_gv_recPlayers[lv_intPlayer].lv_uFaceoffUnit);
            TextTagSetText(libPEEP_gv_recTeams[lv_intTeam].lv_ttFaceoffTextTag, StringToText(""));
            TextTagSetText(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, StringToText(""));
            TextTagShow(libPEEP_gv_recTeams[lv_intTeam].lv_ttFaceoffTextTag, PlayerGroupAll(), false);
            TextTagShow(libPEEP_gv_recTeams[lv_intTeam].lv_ttSpecialTextTag, PlayerGroupAll(), false);
        }

    }
    libPEEP_gf_ClearAllUnitsExploration();
    libPEEP_gf_InitializeMapObjectsResources();
    libPEEP_gf_SetTeamAlliancesVision();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ShowLoadingScreen_Init () {
    libPEEP_gt_ShowLoadingScreen = TriggerCreate("libPEEP_gt_ShowLoadingScreen_Func");
    TriggerAddEventTimer(libPEEP_gt_ShowLoadingScreen, libPEEP_gv_recGlobals.lv_timerFaceoffTransitionEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Reveal Countdown
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicRevealCountdown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int auto8AA5F35D_ae;
    const int auto8AA5F35D_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8AA5F35D_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto8AA5F35D_ai >= 0 && lv_intPlayer <= auto8AA5F35D_ae) || (auto8AA5F35D_ai < 0 && lv_intPlayer >= auto8AA5F35D_ae) ) ; lv_intPlayer += auto8AA5F35D_ai ) {
        if (((TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerRevealCountdown) > 0.0) && (TimerIsPaused(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerRevealCountdown) == false))) {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diRevealCountdownLabel, (StringExternal("Param/Value/lib_PEEP_65793D2F") + FixedToText(TimerGetRemaining(libPEEP_gv_recPlayers[lv_intPlayer].lv_timerRevealCountdown), 0)), PlayerGroupAll());
            DialogSetVisible(libPEEP_gv_recUI.lv_dRevealCountdownDialog, PlayerGroupSingle(lv_intPlayer), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicRevealCountdown_Init () {
    libPEEP_gt_PeriodicRevealCountdown = TriggerCreate("libPEEP_gt_PeriodicRevealCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer: Reveal Player
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_TimerRevealPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    int autoE0775E69_ae;
    const int autoE0775E69_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE0775E69_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoE0775E69_ai >= 0 && lv_intPlayer <= autoE0775E69_ae) || (autoE0775E69_ai < 0 && lv_intPlayer >= autoE0775E69_ae) ) ; lv_intPlayer += autoE0775E69_ai ) {
        if ((EventTimer() == libPEEP_gv_recPlayers[lv_intPlayer].lv_timerRevealCountdown)) {
            break;
        }

    }
    libPEEP_gv_recPlayers[lv_intPlayer].lv_boolBeingRevealed = true;
    if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true) && (libPEEP_gf_countPlayerTownhalls(lv_intPlayer) == 0))) {
        libPEEP_gf_CreateForcedSystemMessage((TextWithColor(PlayerName(lv_intPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_intPlayer, false))) + StringExternal("Param/Value/lib_PEEP_2BD46C66")));
        DialogSetVisible(libPEEP_gv_recUI.lv_dRevealCountdownDialog, PlayerGroupSingle(lv_intPlayer), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_TimerRevealPlayer_Init () {
    libPEEP_gt_TimerRevealPlayer = TriggerCreate("libPEEP_gt_TimerRevealPlayer_Func");
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[1].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[2].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[3].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[4].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[5].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[6].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[7].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[8].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[9].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[10].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[11].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[12].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[13].lv_timerRevealCountdown);
    TriggerAddEventTimer(libPEEP_gt_TimerRevealPlayer, libPEEP_gv_recPlayers[14].lv_timerRevealCountdown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-0
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl0_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl0_Init () {
    libPEEP_gt_ControlGroupControl0 = TriggerCreate("libPEEP_gt_ControlGroupControl0_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl0, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl0, c_playerAny, c_key0, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-0
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift0_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift0_Init () {
    libPEEP_gt_ControlGroupShift0 = TriggerCreate("libPEEP_gt_ControlGroupShift0_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift0, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift0, c_playerAny, c_key0, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-1
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 1;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl1_Init () {
    libPEEP_gt_ControlGroupControl1 = TriggerCreate("libPEEP_gt_ControlGroupControl1_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl1, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl1, c_playerAny, c_key1, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-1
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 1;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift1_Init () {
    libPEEP_gt_ControlGroupShift1 = TriggerCreate("libPEEP_gt_ControlGroupShift1_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift1, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift1, c_playerAny, c_key1, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-2
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 2;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl2_Init () {
    libPEEP_gt_ControlGroupControl2 = TriggerCreate("libPEEP_gt_ControlGroupControl2_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl2, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl2, c_playerAny, c_key2, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-2
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 2;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift2_Init () {
    libPEEP_gt_ControlGroupShift2 = TriggerCreate("libPEEP_gt_ControlGroupShift2_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift2, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift2, c_playerAny, c_key2, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-3
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 3;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl3_Init () {
    libPEEP_gt_ControlGroupControl3 = TriggerCreate("libPEEP_gt_ControlGroupControl3_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl3, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl3, c_playerAny, c_key3, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-3
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 3;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift3_Init () {
    libPEEP_gt_ControlGroupShift3 = TriggerCreate("libPEEP_gt_ControlGroupShift3_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift3, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift3, c_playerAny, c_key3, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-4
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 4;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl4_Init () {
    libPEEP_gt_ControlGroupControl4 = TriggerCreate("libPEEP_gt_ControlGroupControl4_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl4, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl4, c_playerAny, c_key4, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-4
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 4;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift4_Init () {
    libPEEP_gt_ControlGroupShift4 = TriggerCreate("libPEEP_gt_ControlGroupShift4_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift4, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift4, c_playerAny, c_key4, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-5
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 5;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl5_Init () {
    libPEEP_gt_ControlGroupControl5 = TriggerCreate("libPEEP_gt_ControlGroupControl5_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl5, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl5, c_playerAny, c_key5, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-5
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 5;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift5_Init () {
    libPEEP_gt_ControlGroupShift5 = TriggerCreate("libPEEP_gt_ControlGroupShift5_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift5, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift5, c_playerAny, c_key5, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-6
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 6;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl6_Init () {
    libPEEP_gt_ControlGroupControl6 = TriggerCreate("libPEEP_gt_ControlGroupControl6_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl6, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl6, c_playerAny, c_key6, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-6
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 6;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift6_Init () {
    libPEEP_gt_ControlGroupShift6 = TriggerCreate("libPEEP_gt_ControlGroupShift6_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift6, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift6, c_playerAny, c_key6, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-7
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 7;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl7_Init () {
    libPEEP_gt_ControlGroupControl7 = TriggerCreate("libPEEP_gt_ControlGroupControl7_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl7, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl7, c_playerAny, c_key7, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-7
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 7;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift7_Init () {
    libPEEP_gt_ControlGroupShift7 = TriggerCreate("libPEEP_gt_ControlGroupShift7_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift7, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift7, c_playerAny, c_key7, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-8
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 8;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl8_Init () {
    libPEEP_gt_ControlGroupControl8 = TriggerCreate("libPEEP_gt_ControlGroupControl8_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl8, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl8, c_playerAny, c_key8, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-8
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 8;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift8_Init () {
    libPEEP_gt_ControlGroupShift8 = TriggerCreate("libPEEP_gt_ControlGroupShift8_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift8, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift8, c_playerAny, c_key8, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Control-9
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupControl9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 9;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupClear(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot]);
    libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot] = UnitGroupSelected(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupControl9_Init () {
    libPEEP_gt_ControlGroupControl9 = TriggerCreate("libPEEP_gt_ControlGroupControl9_Func");
    TriggerEnable(libPEEP_gt_ControlGroupControl9, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupControl9, c_playerAny, c_key9, true, c_keyModifierStateExclude, c_keyModifierStateRequire, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Control Group: Shift-9
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ControlGroupShift9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intSlot;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();
    lv_intSlot = 9;

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libPEEP_gv_recPlayers[lv_intPlayer].lv_ugControlGroups[lv_intSlot], UnitGroupSelected(lv_intPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ControlGroupShift9_Init () {
    libPEEP_gt_ControlGroupShift9 = TriggerCreate("libPEEP_gt_ControlGroupShift9_Func");
    TriggerEnable(libPEEP_gt_ControlGroupShift9, false);
    TriggerAddEventKeyPressed(libPEEP_gt_ControlGroupShift9, c_playerAny, c_key9, true, c_keyModifierStateRequire, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic: Refresh Game Clock(s)
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PeriodicRefreshGameClocks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_txtText;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoFE1AB846_ae;
    const int autoFE1AB846_ai = 1;
    int autoE4029CC6_ae;
    const int autoE4029CC6_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerBettingPeriodTimer) > 0.0)) {
        if ((ModI(libPEEP_gv_recGameState.lv_intMatchSecondsElapsed, 2) == 1)) {
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diObserverBettingIcon, "Assets\\Textures\\chip.dds", PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diObserverBettingIcon, "Assets\\Textures\\btn-tips-credit.dds", PlayerGroupAll());
        }
    }
    else {
        libNtve_gf_SetDialogItemImage(libPEEP_gv_recUI.lv_diObserverBettingIcon, "Assets\\Textures\\btn-tips-credit.dds", PlayerGroupAll());
    }
    autoFE1AB846_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoFE1AB846_ai >= 0 && lv_intPlayer <= autoFE1AB846_ae) || (autoFE1AB846_ai < 0 && lv_intPlayer >= autoFE1AB846_ae) ) ; lv_intPlayer += autoFE1AB846_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false)) {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diGameClock, TextWithColor(libPEEP_gf_convertSecondsToTime(libPEEP_gv_recGameState.lv_intMatchSecondsElapsed), libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor), PlayerGroupSingle(lv_intPlayer));
        }

    }
    if (((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recGameState.lv_boolMatchInitComplete == true))) {
        lv_txtText = libPEEP_gf_convertSecondsToTime(libPEEP_gv_recGameState.lv_intMatchSecondsElapsed);
        libPEEP_gv_recGameState.lv_intMatchSecondsElapsed += 1;
        autoE4029CC6_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
        lv_intPlayer = 1;
        for ( ; ( (autoE4029CC6_ai >= 0 && lv_intPlayer <= autoE4029CC6_ae) || (autoE4029CC6_ai < 0 && lv_intPlayer >= autoE4029CC6_ae) ) ; lv_intPlayer += autoE4029CC6_ai ) {
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diMinimapClock, (StringExternal("Param/Value/lib_PEEP_8FE860F9") + TextWithColor(lv_txtText, libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor) + StringExternal("Param/Value/lib_PEEP_CF93FB64")), PlayerGroupSingle(lv_intPlayer));
            libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diClockReplacement, TextWithColor(lv_txtText, libPEEP_gv_recPlayers[lv_intPlayer].lv_coRaceClockColor), PlayerGroupSingle(lv_intPlayer));
        }
        if ((TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerResourceTrading) <= 0.0)) {
            lv_txtText = StringExternal("Param/Value/lib_PEEP_F0C785B8");
        }
        else {
            lv_txtText = libPEEP_gf_convertSecondsToTime(FixedToInt(TimerGetRemaining(libPEEP_gv_recGlobals.lv_timerResourceTrading)));
        }
        libNtve_gf_SetDialogItemText(libPEEP_gv_recUI.lv_diResourceSend, lv_txtText, PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PeriodicRefreshGameClocks_Init () {
    libPEEP_gt_PeriodicRefreshGameClocks = TriggerCreate("libPEEP_gt_PeriodicRefreshGameClocks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Started
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructureStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_utUnitType;
    int lv_intPlayer;
    int lv_intTmpPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnitProgressUnit();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (UnitTypeTestAttribute(lv_utUnitType, c_unitAttributeStructure) == true) && (lv_utUnitType != "CreepTumor") && (lv_utUnitType != "CreepTumorBurrowed") && (lv_utUnitType != "CreepTumorQueen") && (lv_utUnitType != "OracleStasisTrap") && (libPEEP_gv_recGameState.lv_intMatchSecondsElapsed > 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, lv_utUnitType, null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, lv_utUnitType);
    libPEEP_gf_RefreshRevealStateforPlayer(lv_intPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructureStarted_Init () {
    libPEEP_gt_StructureStarted = TriggerCreate("libPEEP_gt_StructureStarted_Func");
    TriggerEnable(libPEEP_gt_StructureStarted, false);
    TriggerAddEventUnitConstructProgress(libPEEP_gt_StructureStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Completed
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructureCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_utUnitType;
    unit lv_uUnit;
    text lv_txtLogEntry;
    int lv_intPlayer;
    text lv_txtCommentary;
    int lv_intIndex;
    int lv_intLogClass;
    bool lv_boolExplicitMatch;
    bool lv_boolIgnoreMatch;

    // Automatic Variable Declarations
    int auto6F1F9818_ae;
    const int auto6F1F9818_ai = 1;
    int autoCAC61DD4_ae;
    const int autoCAC61DD4_ai = 1;

    // Variable Initialization
    lv_utUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_uUnit = EventUnitProgressUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffLogEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (UnitTypeTestAttribute(lv_utUnitType, c_unitAttributeStructure) == true) && (lv_utUnitType != "CreepTumor") && (libPEEP_gv_recGameState.lv_intMatchSecondsElapsed > 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, lv_utUnitType, null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, lv_utUnitType);
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    auto6F1F9818_ae = libPEEP_gv_recGlobals.lv_intNumUnits;
    lv_intIndex = 1;
    for ( ; ( (auto6F1F9818_ai >= 0 && lv_intIndex <= auto6F1F9818_ae) || (auto6F1F9818_ai < 0 && lv_intIndex >= auto6F1F9818_ae) ) ; lv_intIndex += auto6F1F9818_ai ) {
        if ((lv_utUnitType == libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType)) {
            lv_boolExplicitMatch = true;
            lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType));
            lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_4930C2A2") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
            lv_intLogClass = libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass;
            libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
            break;
        }

    }
    if ((lv_boolExplicitMatch == false)) {
        autoCAC61DD4_ae = libPEEP_gv_recGlobals.lv_intNumIgnoreUnits;
        lv_intIndex = 1;
        for ( ; ( (autoCAC61DD4_ai >= 0 && lv_intIndex <= autoCAC61DD4_ae) || (autoCAC61DD4_ai < 0 && lv_intIndex >= autoCAC61DD4_ae) ) ; lv_intIndex += autoCAC61DD4_ai ) {
            if ((lv_utUnitType == libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex])) {
                lv_boolIgnoreMatch = true;
                break;
            }

        }
        if ((lv_boolIgnoreMatch == false)) {
            lv_intLogClass = 5;
            lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType));
            lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_1AA0459D") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
            libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructureCompleted_Init () {
    libPEEP_gt_StructureCompleted = TriggerCreate("libPEEP_gt_StructureCompleted_Func");
    TriggerEnable(libPEEP_gt_StructureCompleted, false);
    TriggerAddEventUnitConstructProgress(libPEEP_gt_StructureCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Structure Canceled
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructureCanceled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_utUnitType;
    unit lv_uUnit;
    text lv_txtLogEntry;
    int lv_intPlayer;
    text lv_txtCommentary;
    int lv_intIndex;
    int lv_intLogClass;
    bool lv_boolExplicitMatch;
    bool lv_boolIgnoreMatch;

    // Automatic Variable Declarations
    int auto87AAB210_ae;
    const int auto87AAB210_ai = 1;
    int auto5C728F73_ae;
    const int auto5C728F73_ai = 1;

    // Variable Initialization
    lv_utUnitType = libNtve_gf_TriggeringProgressUnitType();
    lv_uUnit = EventUnitProgressUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffLogEvents == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (UnitTypeTestAttribute(lv_utUnitType, c_unitAttributeStructure) == true) && (lv_utUnitType != "CreepTumor") && (libPEEP_gv_recGameState.lv_intMatchSecondsElapsed > 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, lv_utUnitType, null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, lv_utUnitType);
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    auto87AAB210_ae = libPEEP_gv_recGlobals.lv_intNumUnits;
    lv_intIndex = 1;
    for ( ; ( (auto87AAB210_ai >= 0 && lv_intIndex <= auto87AAB210_ae) || (auto87AAB210_ai < 0 && lv_intIndex >= auto87AAB210_ae) ) ; lv_intIndex += auto87AAB210_ai ) {
        if ((lv_utUnitType == libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType)) {
            lv_boolExplicitMatch = true;
            lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType));
            lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_BEB0B73D") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
            lv_intLogClass = libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass;
            libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
            break;
        }

    }
    if ((lv_boolExplicitMatch == false)) {
        auto5C728F73_ae = libPEEP_gv_recGlobals.lv_intNumIgnoreUnits;
        lv_intIndex = 1;
        for ( ; ( (auto5C728F73_ai >= 0 && lv_intIndex <= auto5C728F73_ae) || (auto5C728F73_ai < 0 && lv_intIndex >= auto5C728F73_ae) ) ; lv_intIndex += auto5C728F73_ai ) {
            if ((lv_utUnitType == libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex])) {
                lv_boolIgnoreMatch = true;
                break;
            }

        }
        if ((lv_boolIgnoreMatch == false)) {
            lv_intLogClass = 5;
            lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType));
            lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_B0397FEB") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
            libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructureCanceled_Init () {
    libPEEP_gt_StructureCanceled = TriggerCreate("libPEEP_gt_StructureCanceled_Func");
    TriggerEnable(libPEEP_gt_StructureCanceled, false);
    TriggerAddEventUnitConstructProgress(libPEEP_gt_StructureCanceled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Creation
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_UnitCreation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_utUnitType;
    unit lv_uUnit;
    int lv_intPlayer;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intIndex;
    int lv_intLogClass;
    bool lv_boolExplicitMatch;
    bool lv_boolIgnoreMatch;
    string lv_abAbility;

    // Automatic Variable Declarations
    int auto4A87BB3A_ae;
    const int auto4A87BB3A_ai = 1;
    int auto6225687E_ae;
    const int auto6225687E_ai = 1;

    // Variable Initialization
    lv_utUnitType = UnitGetType(EventUnitCreatedUnit());
    lv_uUnit = EventUnitCreatedUnit();
    lv_intPlayer = UnitGetOwner(EventUnitCreatedUnit());
    lv_abAbility = EventUnitCreatedAbil();

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGlobals.lv_boolDebugShutoffLogEvents == false) && (UnitTypeTestFlag(lv_utUnitType, c_unitFlagMissile) == false) && (libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (UnitTypeTestAttribute(UnitGetType(lv_uUnit), c_unitAttributeStructure) == false) && (libPEEP_gv_recGameState.lv_intMatchSecondsElapsed > 1) && (lv_intPlayer > 0) && (lv_abAbility != "MorphZerglingToBaneling") && (lv_abAbility != "MorphToBroodLord") && (lv_abAbility != "MorphToOverseer") && (lv_abAbility != "ArchonWarp")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A87BB3A_ae = libPEEP_gv_recGlobals.lv_intNumUnits;
    lv_intIndex = 1;
    for ( ; ( (auto4A87BB3A_ai >= 0 && lv_intIndex <= auto4A87BB3A_ae) || (auto4A87BB3A_ai < 0 && lv_intIndex >= auto4A87BB3A_ae) ) ; lv_intIndex += auto4A87BB3A_ai ) {
        if ((lv_utUnitType == libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType)) {
            lv_boolExplicitMatch = true;
            lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType));
            lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_8F3FD57F") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
            lv_intLogClass = libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_intLogCreationClass;
            if (((lv_intLogClass != 7) || (libPEEP_gv_recGameState.lv_intMatchSecondsElapsed < 600))) {
                libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
            }

        }

    }
    if ((lv_boolExplicitMatch == false)) {
        auto6225687E_ae = libPEEP_gv_recGlobals.lv_intNumIgnoreUnits;
        lv_intIndex = 1;
        for ( ; ( (auto6225687E_ai >= 0 && lv_intIndex <= auto6225687E_ae) || (auto6225687E_ai < 0 && lv_intIndex >= auto6225687E_ae) ) ; lv_intIndex += auto6225687E_ai ) {
            if ((lv_utUnitType == libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex])) {
                lv_boolIgnoreMatch = true;
            }

        }
        if ((lv_boolIgnoreMatch == false)) {
            lv_intLogClass = 7;
            lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType));
            lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_7610C83E") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
            if ((libPEEP_gv_recGameState.lv_intMatchSecondsElapsed < 600)) {
                libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_UnitCreation_Init () {
    libPEEP_gt_UnitCreation = TriggerCreate("libPEEP_gt_UnitCreation_Func");
    TriggerEnable(libPEEP_gt_UnitCreation, false);
    TriggerAddEventUnitCreated(libPEEP_gt_UnitCreation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Orbital Command Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceOrbitalCommandStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "OrbitalCommand", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CommandCenter");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "OrbitalCommand");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceOrbitalCommandStart_Init () {
    libPEEP_gt_StructEnhanceOrbitalCommandStart = TriggerCreate("libPEEP_gt_StructEnhanceOrbitalCommandStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceOrbitalCommandStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceOrbitalCommandStart, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Orbital Command Cancel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceOrbitalCommandCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "OrbitalCommand", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CommandCenter");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "OrbitalCommand");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceOrbitalCommandCancel_Init () {
    libPEEP_gt_StructEnhanceOrbitalCommandCancel = TriggerCreate("libPEEP_gt_StructEnhanceOrbitalCommandCancel_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceOrbitalCommandCancel, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceOrbitalCommandCancel, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Orbital Command Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceOrbitalCommandComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "OrbitalCommand", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_71559C85");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_98CC9F88");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CommandCenter");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "OrbitalCommand");
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceOrbitalCommandComplete_Init () {
    libPEEP_gt_StructEnhanceOrbitalCommandComplete = TriggerCreate("libPEEP_gt_StructEnhanceOrbitalCommandComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceOrbitalCommandComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceOrbitalCommandComplete, null, AbilityCommand("UpgradeToOrbital", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Energised Citadel Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceEnergisedCitadelStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "CitadelCharged", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Citadel");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CitadelCharged");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceEnergisedCitadelStart_Init () {
    libPEEP_gt_StructEnhanceEnergisedCitadelStart = TriggerCreate("libPEEP_gt_StructEnhanceEnergisedCitadelStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceEnergisedCitadelStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceEnergisedCitadelStart, null, AbilityCommand("CitadelEnergize", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Energise Citadel Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceEnergiseCitadelComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "OrbitalCommand", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_DACE40B0");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_89A5A699");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Citadel");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CitadelCharged");
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceEnergiseCitadelComplete_Init () {
    libPEEP_gt_StructEnhanceEnergiseCitadelComplete = TriggerCreate("libPEEP_gt_StructEnhanceEnergiseCitadelComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceEnergiseCitadelComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceEnergiseCitadelComplete, null, AbilityCommand("CitadelEnergize", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Planetary Fortoress Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhancePlanetaryFortoressStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "PlanetaryFortress", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CommandCenter");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "PlanetaryFortress");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhancePlanetaryFortoressStart_Init () {
    libPEEP_gt_StructEnhancePlanetaryFortoressStart = TriggerCreate("libPEEP_gt_StructEnhancePlanetaryFortoressStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhancePlanetaryFortoressStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhancePlanetaryFortoressStart, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Planetary Fortress Cancel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhancePlanetaryFortressCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "PlanetaryFortress", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CommandCenter");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "PlanetaryFortress");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhancePlanetaryFortressCancel_Init () {
    libPEEP_gt_StructEnhancePlanetaryFortressCancel = TriggerCreate("libPEEP_gt_StructEnhancePlanetaryFortressCancel_Func");
    TriggerEnable(libPEEP_gt_StructEnhancePlanetaryFortressCancel, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhancePlanetaryFortressCancel, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Planetary Fortress Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhancePlanetaryFortressComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "PlanetaryFortress", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_2161F73F");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_4AC6F2AD");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "CommandCenter");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "PlanetaryFortress");
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhancePlanetaryFortressComplete_Init () {
    libPEEP_gt_StructEnhancePlanetaryFortressComplete = TriggerCreate("libPEEP_gt_StructEnhancePlanetaryFortressComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhancePlanetaryFortressComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhancePlanetaryFortressComplete, null, AbilityCommand("UpgradeToPlanetaryFortress", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Warp Gate Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceWarpGateStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "WarpGate", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Gateway");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "WarpGate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceWarpGateStart_Init () {
    libPEEP_gt_StructEnhanceWarpGateStart = TriggerCreate("libPEEP_gt_StructEnhanceWarpGateStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGateStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceWarpGateStart, null, AbilityCommand("UpgradeToWarpGate", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Warp Gate Cancel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceWarpGateCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "WarpGate", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Gateway");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "WarpGate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceWarpGateCancel_Init () {
    libPEEP_gt_StructEnhanceWarpGateCancel = TriggerCreate("libPEEP_gt_StructEnhanceWarpGateCancel_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGateCancel, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceWarpGateCancel, null, AbilityCommand("UpgradeToWarpGate", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Warp Gate Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceWarpGateComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "WarpGate", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_53E3C8F0");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_15BA1A96");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Gateway");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "WarpGate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceWarpGateComplete_Init () {
    libPEEP_gt_StructEnhanceWarpGateComplete = TriggerCreate("libPEEP_gt_StructEnhanceWarpGateComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGateComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceWarpGateComplete, null, AbilityCommand("UpgradeToWarpGate", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Warp Gateway Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceWarpGatewayStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "Gateway", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Gateway");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "WarpGate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceWarpGatewayStart_Init () {
    libPEEP_gt_StructEnhanceWarpGatewayStart = TriggerCreate("libPEEP_gt_StructEnhanceWarpGatewayStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGatewayStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceWarpGatewayStart, null, AbilityCommand("MorphBackToGateway", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Warp Gateway Cancel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceWarpGatewayCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "Gateway", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Gateway");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "WarpGate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceWarpGatewayCancel_Init () {
    libPEEP_gt_StructEnhanceWarpGatewayCancel = TriggerCreate("libPEEP_gt_StructEnhanceWarpGatewayCancel_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGatewayCancel, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceWarpGatewayCancel, null, AbilityCommand("MorphBackToGateway", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Warp Gateway Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceWarpGatewayComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "Gateway", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_FD95E3A9");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_5EBD0FFA");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Gateway");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "WarpGate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceWarpGatewayComplete_Init () {
    libPEEP_gt_StructEnhanceWarpGatewayComplete = TriggerCreate("libPEEP_gt_StructEnhanceWarpGatewayComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGatewayComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceWarpGatewayComplete, null, AbilityCommand("MorphBackToGateway", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Lair Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceLairStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "Lair", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Hatchery");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Lair");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceLairStart_Init () {
    libPEEP_gt_StructEnhanceLairStart = TriggerCreate("libPEEP_gt_StructEnhanceLairStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceLairStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceLairStart, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Lair Cancel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceLairCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "Lair", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Hatchery");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Lair");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceLairCancel_Init () {
    libPEEP_gt_StructEnhanceLairCancel = TriggerCreate("libPEEP_gt_StructEnhanceLairCancel_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceLairCancel, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceLairCancel, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Lair Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceLairComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "Lair", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_B8D82595");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_39E68AEF");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Hatchery");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Lair");
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceLairComplete_Init () {
    libPEEP_gt_StructEnhanceLairComplete = TriggerCreate("libPEEP_gt_StructEnhanceLairComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceLairComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceLairComplete, null, AbilityCommand("UpgradeToLair", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Hive Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceHiveStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "Hive", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Lair");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Hive");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceHiveStart_Init () {
    libPEEP_gt_StructEnhanceHiveStart = TriggerCreate("libPEEP_gt_StructEnhanceHiveStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceHiveStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceHiveStart, null, AbilityCommand("UpgradeToHive", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Hive Cancel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceHiveCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "Hive", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Lair");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Hive");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceHiveCancel_Init () {
    libPEEP_gt_StructEnhanceHiveCancel = TriggerCreate("libPEEP_gt_StructEnhanceHiveCancel_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceHiveCancel, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceHiveCancel, null, AbilityCommand("UpgradeToHive", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Hive Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceHiveComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "Hive", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_9AC9FA6B");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_6DA7D3D1");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Lair");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Hive");
    libPEEP_gf_RefreshSketchpadTownhallIcons();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceHiveComplete_Init () {
    libPEEP_gt_StructEnhanceHiveComplete = TriggerCreate("libPEEP_gt_StructEnhanceHiveComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceHiveComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceHiveComplete, null, AbilityCommand("UpgradeToHive", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Greater Spire Start
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceGreaterSpireStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_CreateFloatingIcon(lv_uUnit, "GreaterSpire", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Spire");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "GreaterSpire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceGreaterSpireStart_Init () {
    libPEEP_gt_StructEnhanceGreaterSpireStart = TriggerCreate("libPEEP_gt_StructEnhanceGreaterSpireStart_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceGreaterSpireStart, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceGreaterSpireStart, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Greater Spire Cancel
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceGreaterSpireCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "GreaterSpire", null);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Spire");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "GreaterSpire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceGreaterSpireCancel_Init () {
    libPEEP_gt_StructEnhanceGreaterSpireCancel = TriggerCreate("libPEEP_gt_StructEnhanceGreaterSpireCancel_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceGreaterSpireCancel, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceGreaterSpireCancel, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StructEnhance: Greater Spire Complete
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StructEnhanceGreaterSpireComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intPlayer;
    string lv_utUnitType;
    text lv_txtLogEntry;
    text lv_txtCommentary;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intPlayer = UnitGetOwner(lv_uUnit);
    lv_utUnitType = UnitGetType(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_DestroyFloatingIconforAllPlayers(lv_uUnit, "GreaterSpire", null);
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_96E6DBC1");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_923892D6");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 5, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "Spire");
    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, "GreaterSpire");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StructEnhanceGreaterSpireComplete_Init () {
    libPEEP_gt_StructEnhanceGreaterSpireComplete = TriggerCreate("libPEEP_gt_StructEnhanceGreaterSpireComplete_Func");
    TriggerEnable(libPEEP_gt_StructEnhanceGreaterSpireComplete, false);
    TriggerAddEventUnitAbility(libPEEP_gt_StructEnhanceGreaterSpireComplete, null, AbilityCommand("UpgradeToGreaterSpire", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph: Mendling Sacrificial Mutation
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MorphMendlingSacrificialMutation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_utUnitType;
    int lv_intPlayer;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intLogClass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intLogClass = 7;
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_B08868BB");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_E9A662B2");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MorphMendlingSacrificialMutation_Init () {
    libPEEP_gt_MorphMendlingSacrificialMutation = TriggerCreate("libPEEP_gt_MorphMendlingSacrificialMutation_Func");
    TriggerEnable(libPEEP_gt_MorphMendlingSacrificialMutation, false);
    TriggerAddEventUnitAbility(libPEEP_gt_MorphMendlingSacrificialMutation, null, AbilityCommand("MendlingSacrificialMutation", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph: Baneling
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MorphBaneling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_utUnitType;
    int lv_intPlayer;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intLogClass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intLogClass = 7;
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_778DE187");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_D6C7CC4E");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MorphBaneling_Init () {
    libPEEP_gt_MorphBaneling = TriggerCreate("libPEEP_gt_MorphBaneling_Func");
    TriggerEnable(libPEEP_gt_MorphBaneling, false);
    TriggerAddEventUnitAbility(libPEEP_gt_MorphBaneling, null, AbilityCommand("MorphZerglingToBaneling", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph: Lurker
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MorphLurker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_utUnitType;
    int lv_intPlayer;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intLogClass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intLogClass = 7;
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_EF6FA138");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_34A1A59D");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MorphLurker_Init () {
    libPEEP_gt_MorphLurker = TriggerCreate("libPEEP_gt_MorphLurker_Func");
    TriggerEnable(libPEEP_gt_MorphLurker, false);
    TriggerAddEventUnitAbility(libPEEP_gt_MorphLurker, null, AbilityCommand("MorphToLurker", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph: Overseer
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MorphOverseer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_utUnitType;
    int lv_intPlayer;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intLogClass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intLogClass = 7;
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_47935BB1");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_8E356C11");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MorphOverseer_Init () {
    libPEEP_gt_MorphOverseer = TriggerCreate("libPEEP_gt_MorphOverseer_Func");
    TriggerEnable(libPEEP_gt_MorphOverseer, false);
    TriggerAddEventUnitAbility(libPEEP_gt_MorphOverseer, null, AbilityCommand("MorphToOverseer", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph: Archon
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MorphArchon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_utUnitType;
    int lv_intPlayer;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intLogClass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intLogClass = 7;
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_C91D221A");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_9B90B851");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MorphArchon_Init () {
    libPEEP_gt_MorphArchon = TriggerCreate("libPEEP_gt_MorphArchon_Func");
    TriggerEnable(libPEEP_gt_MorphArchon, false);
    TriggerAddEventUnitAbility(libPEEP_gt_MorphArchon, null, AbilityCommand("ArchonWarp", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph: Brood Lord
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_MorphBroodLord_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    string lv_utUnitType;
    int lv_intPlayer;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intLogClass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_utUnitType = UnitGetType(lv_uUnit);
    lv_intPlayer = UnitGetOwner(lv_uUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_intLogClass = 7;
    lv_txtLogEntry = StringExternal("Param/Value/lib_PEEP_1AE4F4D6");
    lv_txtCommentary = StringExternal("Param/Value/lib_PEEP_21531091");
    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_MorphBroodLord_Init () {
    libPEEP_gt_MorphBroodLord = TriggerCreate("libPEEP_gt_MorphBroodLord_Func");
    TriggerEnable(libPEEP_gt_MorphBroodLord, false);
    TriggerAddEventUnitAbility(libPEEP_gt_MorphBroodLord, null, AbilityCommand("MorphToBroodLord", 255), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Upgrade Started
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ResearchUpgradeStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_rResearchItem;
    int lv_intPlayer;
    unit lv_uUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rResearchItem = libNtve_gf_TriggeringProgressUpgrade();
    lv_intPlayer = EventPlayer();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HandleResearchEvent(lv_intPlayer, lv_rResearchItem, lv_uUnit, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ResearchUpgradeStarted_Init () {
    libPEEP_gt_ResearchUpgradeStarted = TriggerCreate("libPEEP_gt_ResearchUpgradeStarted_Func");
    TriggerEnable(libPEEP_gt_ResearchUpgradeStarted, false);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_ResearchUpgradeStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Upgrade Completed
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ResearchUpgradeCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_rResearchItem;
    int lv_intPlayer;
    unit lv_uUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rResearchItem = libNtve_gf_TriggeringProgressUpgrade();
    lv_intPlayer = EventPlayer();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HandleResearchEvent(lv_intPlayer, lv_rResearchItem, lv_uUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ResearchUpgradeCompleted_Init () {
    libPEEP_gt_ResearchUpgradeCompleted = TriggerCreate("libPEEP_gt_ResearchUpgradeCompleted_Func");
    TriggerEnable(libPEEP_gt_ResearchUpgradeCompleted, false);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_ResearchUpgradeCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Research Upgrade Cancelled
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ResearchUpgradeCancelled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_rResearchItem;
    int lv_intPlayer;
    unit lv_uUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rResearchItem = libNtve_gf_TriggeringProgressUpgrade();
    lv_intPlayer = EventPlayer();
    lv_uUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_HandleResearchEvent(lv_intPlayer, lv_rResearchItem, lv_uUnit, 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ResearchUpgradeCancelled_Init () {
    libPEEP_gt_ResearchUpgradeCancelled = TriggerCreate("libPEEP_gt_ResearchUpgradeCancelled_Func");
    TriggerEnable(libPEEP_gt_ResearchUpgradeCancelled, false);
    TriggerAddEventUnitResearchProgress(libPEEP_gt_ResearchUpgradeCancelled, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Death
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_UnitDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intKillingPlayer;
    string lv_utUnitType;
    int lv_intPlayer;
    int lv_intIndex;
    text lv_txtLogEntry;
    text lv_txtCommentary;
    int lv_intLogClass;
    bool lv_boolExplicitMatch;
    bool lv_boolIgnoreMatch;

    // Automatic Variable Declarations
    int auto73AAE941_ae;
    const int auto73AAE941_ai = 1;
    int auto3906102C_ae;
    const int auto3906102C_ai = 1;

    // Variable Initialization
    lv_uUnit = EventUnit();
    lv_intKillingPlayer = libNtve_gf_KillingPlayer();
    lv_utUnitType = UnitGetType(EventUnit());
    lv_intPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && (libPEEP_gv_recGlobals.lv_boolDebugShutoffLogEvents == false) && (libPEEP_gv_recGlobals.lv_boolDebugShutoffLogDeaths == false) && (lv_intPlayer > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_RefreshRevealStateforPlayer(lv_intPlayer);
    if ((EventUnitDamageDeathCheck(c_deathTypeCancel) == true)) {
        libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, lv_utUnitType);
        TriggerExecute(libPEEP_gt_CheckforDefeat, true, false);
    }
    else if ((libNtve_gf_KillingPlayer() != 16)) {
        if (((lv_utUnitType == "SCV") || (lv_utUnitType == "Drone") || (lv_utUnitType == "Probe") || (lv_utUnitType == "ACR") || (lv_utUnitType == "Scavenger") || (lv_utUnitType == "Converter"))) {
            libPEEP_gv_recPlayers[lv_intKillingPlayer].lv_intWorkersKilled += 1;
        }

        if ((UnitTypeTestAttribute(lv_utUnitType, c_unitAttributeStructure) == false)) {
            libPEEP_gv_recPlayers[lv_intKillingPlayer].lv_intUnitsKilled += 1;
        }
        else {
            auto73AAE941_ae = libPEEP_gv_recGlobals.lv_intNumUnits;
            lv_intIndex = 1;
            for ( ; ( (auto73AAE941_ai >= 0 && lv_intIndex <= auto73AAE941_ae) || (auto73AAE941_ai < 0 && lv_intIndex >= auto73AAE941_ae) ) ; lv_intIndex += auto73AAE941_ai ) {
                if (((UnitGetOwner(lv_uUnit) > 0) && (lv_utUnitType == libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_utUnitType) && (libPEEP_gv_recGlobals.lv_recUnits[lv_intIndex].lv_boolLogDeath == true))) {
                    lv_boolExplicitMatch = true;
                    lv_intLogClass = 8;
                    lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_17356042") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
                    lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType) + StringExternal("Param/Value/lib_PEEP_2A4D2CE4"));
                    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, lv_utUnitType);
                    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
                    break;
                }

            }
            if ((lv_boolExplicitMatch == false)) {
                auto3906102C_ae = libPEEP_gv_recGlobals.lv_intNumIgnoreUnits;
                lv_intIndex = 1;
                for ( ; ( (auto3906102C_ai >= 0 && lv_intIndex <= auto3906102C_ae) || (auto3906102C_ai < 0 && lv_intIndex >= auto3906102C_ae) ) ; lv_intIndex += auto3906102C_ai ) {
                    if ((lv_utUnitType == libPEEP_gv_recGlobals.lv_utIgnoreUnitsForLog[lv_intIndex])) {
                        lv_boolIgnoreMatch = true;
                    }

                }
                if (((lv_boolIgnoreMatch == false) && (UnitGetOwner(lv_uUnit) > 0))) {
                    lv_intLogClass = 8;
                    lv_txtCommentary = (StringExternal("Param/Value/lib_PEEP_080BC0A5") + libPEEP_gf_AorAnPrefixForUnitType(lv_utUnitType) + UnitTypeGetName(lv_utUnitType));
                    lv_txtLogEntry = (UnitTypeGetName(lv_utUnitType) + StringExternal("Param/Value/lib_PEEP_AB0EEEEE"));
                    libPEEP_gf_RefreshStructureCountsforPlayerUnitType(lv_intPlayer, lv_utUnitType);
                    libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, lv_intLogClass, lv_txtLogEntry, lv_txtCommentary, lv_uUnit);
                }

            }

            TriggerExecute(libPEEP_gt_CheckforDefeat, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_UnitDeath_Init () {
    libPEEP_gt_UnitDeath = TriggerCreate("libPEEP_gt_UnitDeath_Func");
    TriggerEnable(libPEEP_gt_UnitDeath, false);
    TriggerAddEventUnitDied(libPEEP_gt_UnitDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check for Defeat
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CheckforDefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_uUnit;
    int lv_intCount;
    bool lv_boolUnitFound;
    unit lv_uTmpUnit;
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoCCCE2E74_ae;
    const int autoCCCE2E74_ai = 1;
    unitgroup auto51E7754D_g;
    int auto51E7754D_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGameState.lv_intCurrentGameState == 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCCCE2E74_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoCCCE2E74_ai >= 0 && lv_intPlayer <= autoCCCE2E74_ae) || (autoCCCE2E74_ai < 0 && lv_intPlayer >= autoCCCE2E74_ae) ) ; lv_intPlayer += autoCCCE2E74_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == true)) {
            lv_boolUnitFound = false;
            auto51E7754D_g = UnitGroup(null, lv_intPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, (1 << (c_targetFilterDead - 32))), 0);
            auto51E7754D_u = UnitGroupCount(auto51E7754D_g, c_unitCountAll);
            for (;; auto51E7754D_u -= 1) {
                lv_uTmpUnit = UnitGroupUnitFromEnd(auto51E7754D_g, auto51E7754D_u);
                if (lv_uTmpUnit == null) { break; }
                if (((UnitGetType(lv_uTmpUnit) != "CreepTumor") && (UnitGetType(lv_uTmpUnit) != "CreepTumorBurrowed") && (UnitGetType(lv_uTmpUnit) != "OracleStasisTrap") && (UnitGetType(lv_uTmpUnit) != "PointDefenseDrone") && (UnitGetType(lv_uTmpUnit) != "AcidNest") && (UnitGetType(lv_uTmpUnit) != "AcidNestBuild") && (UnitGetType(lv_uTmpUnit) != "VolatileDischarge"))) {
                    lv_boolUnitFound = true;
                    break;
                }

            }
            if ((lv_boolUnitFound == false)) {
                libPEEP_gf_HandleMatchEventLogChat(lv_intPlayer, 9, StringExternal("Param/Value/lib_PEEP_2424031F"), StringExternal("Param/Value/lib_PEEP_3EE28D31"), lv_uUnit);
                libPEEP_gf_RemovePlayerfromMatch(lv_intPlayer);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CheckforDefeat_Init () {
    libPEEP_gt_CheckforDefeat = TriggerCreate("libPEEP_gt_CheckforDefeat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Match
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_InitializeMatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intTeam;
    int lv_intIndex;
    int lv_diItem;

    // Automatic Variable Declarations
    int auto96E53161_ae;
    const int auto96E53161_ai = 1;

    // Variable Initialization
    lv_diItem = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    auto96E53161_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto96E53161_ai >= 0 && lv_intPlayer <= auto96E53161_ae) || (auto96E53161_ai < 0 && lv_intPlayer >= auto96E53161_ae) ) ; lv_intPlayer += auto96E53161_ai ) {
        libPEEP_gf_RefreshMatchLogDialogforPlayer(lv_intPlayer);
    }
    DialogSetVisible(libPEEP_gv_recUI.lv_dLoadingMatchDialog, PlayerGroupAll(), false);
    DialogSetVisible(libPEEP_gv_recUI.lv_dAnnouncementDialog, PlayerGroupAll(), false);
    libPEEP_gf_InitializeMatch();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_InitializeMatch_Init () {
    libPEEP_gt_InitializeMatch = TriggerCreate("libPEEP_gt_InitializeMatch_Func");
    TriggerAddEventTimer(libPEEP_gt_InitializeMatch, libPEEP_gv_recGlobals.lv_timerMatchInitTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply applyVision
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_ApplyapplyVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoD982EA88_ae;
    const int autoD982EA88_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD982EA88_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoD982EA88_ai >= 0 && lv_intPlayer <= autoD982EA88_ae) || (autoD982EA88_ai < 0 && lv_intPlayer >= autoD982EA88_ae) ) ; lv_intPlayer += autoD982EA88_ai ) {
        if ((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch == false)) {
            libPEEP_gf_ActorShowHideActorForPlayerGroup(PlayerGroupSingle(lv_intPlayer), libNtve_gf_MainActorofUnit(EventUnit()), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_ApplyapplyVision_Init () {
    libPEEP_gt_ApplyapplyVision = TriggerCreate("libPEEP_gt_ApplyapplyVision_Func");
    TriggerAddEventUnitBehaviorChange(libPEEP_gt_ApplyapplyVision, null, "EnemyVision", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prepare Starting Units for All Players
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_PrepareStartingUnitsforAllPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoABCAD473_ae;
    const int autoABCAD473_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoABCAD473_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoABCAD473_ai >= 0 && lv_intPlayer <= autoABCAD473_ae) || (autoABCAD473_ai < 0 && lv_intPlayer >= autoABCAD473_ae) ) ; lv_intPlayer += autoABCAD473_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            libPEEP_gf_PrepareStaringUnitsforPlayer(lv_intPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_PrepareStartingUnitsforAllPlayers_Init () {
    libPEEP_gt_PrepareStartingUnitsforAllPlayers = TriggerCreate("libPEEP_gt_PrepareStartingUnitsforAllPlayers_Func");
    TriggerAddEventTimer(libPEEP_gt_PrepareStartingUnitsforAllPlayers, libPEEP_gv_recGlobals.lv_timerPrepareStartingUnits);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Starting Units for All Players
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CreateStartingUnitsforAllPlayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    int autoA1021E10_ae;
    const int autoA1021E10_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoA1021E10_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (autoA1021E10_ai >= 0 && lv_intPlayer <= autoA1021E10_ae) || (autoA1021E10_ai < 0 && lv_intPlayer >= autoA1021E10_ae) ) ; lv_intPlayer += autoA1021E10_ai ) {
        if (((libPEEP_gv_recPlayers[lv_intPlayer].lv_boolSelectedForMatch == true) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false))) {
            libPEEP_gf_CreateStartingUnitsforPlayer(lv_intPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CreateStartingUnitsforAllPlayers_Init () {
    libPEEP_gt_CreateStartingUnitsforAllPlayers = TriggerCreate("libPEEP_gt_CreateStartingUnitsforAllPlayers_Func");
    TriggerAddEventTimer(libPEEP_gt_CreateStartingUnitsforAllPlayers, libPEEP_gv_recGlobals.lv_timerMatchInitTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEVETST: Disable shared control
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_DEVETSTDisablesharedcontrol_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_intPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libPEEP_gv_recGlobals.lv_boolDebugMode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(lv_intPlayer), c_uiCommandAllowButtons, false);
    UISetCommandAllowed(PlayerGroupSingle(lv_intPlayer), c_uiCommandAllowHotkeys, false);
    UISetCommandAllowed(PlayerGroupSingle(lv_intPlayer), c_uiCommandAllowSmartClick, false);
    UISetCommandAllowed(PlayerGroupSingle(lv_intPlayer), c_uiCommandAllowMinimap, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_DEVETSTDisablesharedcontrol_Init () {
    libPEEP_gt_DEVETSTDisablesharedcontrol = TriggerCreate("libPEEP_gt_DEVETSTDisablesharedcontrol_Func");
    TriggerEnable(libPEEP_gt_DEVETSTDisablesharedcontrol, false);
    TriggerAddEventChatMessage(libPEEP_gt_DEVETSTDisablesharedcontrol, c_playerAny, "disable", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commit Match Players
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CommitMatchPlayers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libPEEP_gv_recGameState.lv_intCurrentGameState == 3) && ((libPEEP_gv_recGameState.lv_intTrueMatchMode == 1) || (libPEEP_gv_recGameState.lv_intTrueMatchMode == 2))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libPEEP_gf_SavePlayerBanksAsIfLosing();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CommitMatchPlayers_Init () {
    libPEEP_gt_CommitMatchPlayers = TriggerCreate("libPEEP_gt_CommitMatchPlayers_Func");
    TriggerAddEventTimer(libPEEP_gt_CommitMatchPlayers, libPEEP_gv_recGlobals.lv_timerCommitMatchPlayers);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stop Victory Sound
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_StopVictorySound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundStop(libPEEP_gv_recGlobals.lv_sVictorySound, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_StopVictorySound_Init () {
    libPEEP_gt_StopVictorySound = TriggerCreate("libPEEP_gt_StopVictorySound_Func");
    TriggerAddEventTimer(libPEEP_gt_StopVictorySound, libPEEP_gv_recGlobals.lv_timerStopVictorySound);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cleanup after Victory/Match
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_CleanupafterVictoryMatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;
    int lv_intIndex;
    int lv_intTeam;
    int lv_intTeamCounter;
    int lv_intNumPlayers;

    // Automatic Variable Declarations
    int autoF88654A0_ae;
    const int autoF88654A0_ai = 1;
    int autoDD4AFEED_ae;
    const int autoDD4AFEED_ai = 1;
    int auto574E1D9A_ae;
    const int auto574E1D9A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CinematicFade(false, 1.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    autoF88654A0_ae = libPEEP_gv_recGameState.lv_intNumMatchPlayers;
    lv_intIndex = 1;
    for ( ; ( (autoF88654A0_ai >= 0 && lv_intIndex <= autoF88654A0_ae) || (autoF88654A0_ai < 0 && lv_intIndex >= autoF88654A0_ae) ) ; lv_intIndex += autoF88654A0_ai ) {
        libPEEP_gv_recGameState.lv_intMatchPlayerList[lv_intIndex] = 0;
    }
    libPEEP_gv_recGameState.lv_intNumMatchPlayers = 0;
    autoDD4AFEED_ae = libPEEP_gv_recGameState.lv_intNumObservers;
    lv_intIndex = 1;
    for ( ; ( (autoDD4AFEED_ai >= 0 && lv_intIndex <= autoDD4AFEED_ae) || (autoDD4AFEED_ai < 0 && lv_intIndex >= autoDD4AFEED_ae) ) ; lv_intIndex += autoDD4AFEED_ai ) {
        libPEEP_gv_recGameState.lv_intObserverList[lv_intIndex] = 0;
    }
    libPEEP_gv_recGameState.lv_intNumObservers = 0;
    libPEEP_gf_ClearOutMatchSelections();
    libPEEP_gf_DestroyResearchPanels();
    libPEEP_gf_ClearAllResearchMemory();
    libPEEP_gf_DestroyStructurePanels();
    libPEEP_gf_ClearAllStructureMemory();
    libPEEP_gf_ClearAllUnitsExploration();
    libPEEP_gf_InitializeMapObjectsResources();
    libPEEP_gf_UnshareVisionofLoweredDepots();
    DialogDestroy(libPEEP_gv_recUI.lv_dLoadingMatchDialog);
    auto574E1D9A_ae = libPEEP_gv_recGlobals.lv_iNT_NUM_PLAYERS;
    lv_intPlayer = 1;
    for ( ; ( (auto574E1D9A_ai >= 0 && lv_intPlayer <= auto574E1D9A_ae) || (auto574E1D9A_ai < 0 && lv_intPlayer >= auto574E1D9A_ae) ) ; lv_intPlayer += auto574E1D9A_ai ) {
        PlayerSetState(lv_intPlayer, c_playerStateDisplayInLeaderPanel, false);
        libPEEP_gf_DestroyPlayerPets(lv_intPlayer);
        libPEEP_gf_ExitMovieModeforPlayer(lv_intPlayer);
        if ((((libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 1) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 2) && (libPEEP_gv_recGameState.lv_intCurrentPlayerSelectMode != 5)) || ((libPEEP_gv_recPlayers[lv_intPlayer].lv_intCurrentTeam > 0) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolWinnerToken == false) && (libPEEP_gv_recPlayers[lv_intPlayer].lv_boolInactive == false)))) {
            libPEEP_gf_RemovePlayerfromTeam(lv_intPlayer, false);
            libPEEP_gf_AddPlayertoTeam(lv_intPlayer, 0, false);
        }

        libPEEP_gv_recPlayers[lv_intPlayer].lv_boolPlayingMatch = false;
    }
    libPEEP_gf_InitializeFaceoff();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_CleanupafterVictoryMatch_Init () {
    libPEEP_gt_CleanupafterVictoryMatch = TriggerCreate("libPEEP_gt_CleanupafterVictoryMatch_Func");
    TriggerAddEventTimer(libPEEP_gt_CleanupafterVictoryMatch, libPEEP_gv_recGlobals.lv_timerVictoryScreenTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run peep Mode
//--------------------------------------------------------------------------------------------------
bool libPEEP_gt_RunpeepMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_intPlayer;

    // Automatic Variable Declarations
    playergroup auto703DD23A_g;
    int auto703DD23A_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto703DD23A_g = PlayerGroupAll();
    auto703DD23A_var = -1;
    while (true) {
        auto703DD23A_var = PlayerGroupNextPlayer(auto703DD23A_g, auto703DD23A_var);
        if (auto703DD23A_var < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MonobattlePlayer", 0, auto703DD23A_var, PlayerStartLocation(auto703DD23A_var));
    }
    libPEEP_gf_TurnKeyboradShurtkeyson();
    TriggerEnable(libPEEP_gt_SliderChangePotentialBet, true);
    TriggerEnable(libPEEP_gt_SliderHelpScroll, true);
    TriggerEnable(libPEEP_gt_SliderSmartCamidletime, true);
    TriggerEnable(libPEEP_gt_CallbackforPlayerLeavingGame, true);
    TriggerEnable(libPEEP_gt_PeriodicEveryGameSecond, true);
    TriggerEnable(libPEEP_gt_PeriodicEveryRealSecond, true);
    TriggerEnable(libPEEP_gt_fixendgame, true);
    TriggerEnable(libPEEP_gt_ChatAnymessage, true);
    TriggerEnable(libPEEP_gt_FloatingIconsUnitProductionCreate, true);
    TriggerEnable(libPEEP_gt_FloatingIconsUnitProductionDestroy, true);
    TriggerEnable(libPEEP_gt_FloatingIconsResearchCreate, true);
    TriggerEnable(libPEEP_gt_FloatingIconsResearchDestroy, true);
    TriggerEnable(libPEEP_gt_MarineStimpack, true);
    TriggerEnable(libPEEP_gt_ThorStrikeCannons, true);
    TriggerEnable(libPEEP_gt_StalkerBlink, true);
    TriggerEnable(libPEEP_gt_SentryGuardianShieldHallucination, true);
    TriggerEnable(libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite, true);
    TriggerEnable(libPEEP_gt_HighTemplarPsionicStorm, true);
    TriggerEnable(libPEEP_gt_ProbeWarpIn, true);
    TriggerEnable(libPEEP_gt_StructureStarted, true);
    TriggerEnable(libPEEP_gt_StructureCompleted, true);
    TriggerEnable(libPEEP_gt_StructureCanceled, true);
    TriggerEnable(libPEEP_gt_UnitCreation, true);
    TriggerEnable(libPEEP_gt_StructEnhanceOrbitalCommandStart, true);
    TriggerEnable(libPEEP_gt_StructEnhanceOrbitalCommandCancel, true);
    TriggerEnable(libPEEP_gt_StructEnhanceOrbitalCommandComplete, true);
    TriggerEnable(libPEEP_gt_StructEnhanceEnergisedCitadelStart, true);
    TriggerEnable(libPEEP_gt_StructEnhanceEnergiseCitadelComplete, true);
    TriggerEnable(libPEEP_gt_StructEnhancePlanetaryFortoressStart, true);
    TriggerEnable(libPEEP_gt_StructEnhancePlanetaryFortressCancel, true);
    TriggerEnable(libPEEP_gt_StructEnhancePlanetaryFortressComplete, true);
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGateStart, true);
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGateCancel, true);
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGateComplete, true);
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGatewayStart, true);
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGatewayCancel, true);
    TriggerEnable(libPEEP_gt_StructEnhanceWarpGatewayComplete, true);
    TriggerEnable(libPEEP_gt_StructEnhanceLairStart, true);
    TriggerEnable(libPEEP_gt_StructEnhanceLairCancel, true);
    TriggerEnable(libPEEP_gt_StructEnhanceLairComplete, true);
    TriggerEnable(libPEEP_gt_StructEnhanceHiveStart, true);
    TriggerEnable(libPEEP_gt_StructEnhanceHiveCancel, true);
    TriggerEnable(libPEEP_gt_StructEnhanceHiveComplete, true);
    TriggerEnable(libPEEP_gt_StructEnhanceGreaterSpireStart, true);
    TriggerEnable(libPEEP_gt_StructEnhanceGreaterSpireCancel, true);
    TriggerEnable(libPEEP_gt_StructEnhanceGreaterSpireComplete, true);
    TriggerEnable(libPEEP_gt_MorphMendlingSacrificialMutation, true);
    TriggerEnable(libPEEP_gt_MorphBaneling, true);
    TriggerEnable(libPEEP_gt_MorphLurker, true);
    TriggerEnable(libPEEP_gt_MorphOverseer, true);
    TriggerEnable(libPEEP_gt_MorphArchon, true);
    TriggerEnable(libPEEP_gt_MorphBroodLord, true);
    TriggerEnable(libPEEP_gt_ResearchUpgradeStarted, true);
    TriggerEnable(libPEEP_gt_ResearchUpgradeCompleted, true);
    TriggerEnable(libPEEP_gt_ResearchUpgradeCancelled, true);
    TriggerEnable(libPEEP_gt_UnitDeath, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl0, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift0, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl1, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift1, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl2, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift2, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl3, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift3, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl4, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift4, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl5, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift5, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl6, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift6, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl7, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift7, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl8, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift8, true);
    TriggerEnable(libPEEP_gt_ControlGroupControl9, true);
    TriggerEnable(libPEEP_gt_ControlGroupShift9, true);
    TriggerEnable(libPEEP_gt_IdleUnitsFaceCenterofFaceoff, true);
    TriggerEnable(libPEEP_gt_Scouting, true);
    TriggerEnable(libPEEP_gt_BuildsStructure, true);
    TriggerEnable(libPEEP_gt_EnhancesStructure, true);
    TriggerEnable(libPEEP_gt_CancelsStructure, true);
    TriggerEnable(libPEEP_gt_UnitOrderedtoMoveAttack, true);
    TriggerEnable(libPEEP_gt_UnitisAttacked, true);
    TriggerEnable(libPEEP_gt_BuildingRazed, true);
    TriggerEnable(libPEEP_gt_CallbackforPlayerLeavingGame, true);
    libPEEP_gf_GameInitBeforeTutorial();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libPEEP_gt_RunpeepMode_Init () {
    libPEEP_gt_RunpeepMode = TriggerCreate("libPEEP_gt_RunpeepMode_Func");
}

void libPEEP_InitTriggers () {
    libPEEP_gt_PeriodicEveryGameSecond_Init();
    libPEEP_gt_PeriodicEveryRealSecond_Init();
    libPEEP_gt_fixendgame_Init();
    libPEEP_gt_TimerSpawnMatchPets_Init();
    libPEEP_gt_TimerSpawnFaceoffPets_Init();
    libPEEP_gt_ClearPetUtterancesPlayer1_Init();
    libPEEP_gt_ClearPetUtterancesPlayer2_Init();
    libPEEP_gt_ClearPetUtterancesPlayer3_Init();
    libPEEP_gt_ClearPetUtterancesPlayer4_Init();
    libPEEP_gt_ClearPetUtterancesPlayer5_Init();
    libPEEP_gt_ClearPetUtterancesPlayer6_Init();
    libPEEP_gt_ClearPetUtterancesPlayer7_Init();
    libPEEP_gt_ClearPetUtterancesPlayer8_Init();
    libPEEP_gt_ClearPetUtterancesPlayer9_Init();
    libPEEP_gt_ClearPetUtterancesPlayer10_Init();
    libPEEP_gt_ClearPetUtterancesPlayer11_Init();
    libPEEP_gt_ClearPetUtterancesPlayer12_Init();
    libPEEP_gt_ClearPetUtterancesPlayer13_Init();
    libPEEP_gt_ClearPetUtterancesPlayer14_Init();
    libPEEP_gt_CallbackforPlayerLeavingGame_Init();
    libPEEP_gt_PulldownLeague_Init();
    libPEEP_gt_PulldownRace_Init();
    libPEEP_gt_PeriodicNewbTeamCooldown_Init();
    libPEEP_gt_ButtonNewbTeamSelection_Init();
    libPEEP_gt_ButtonCancelTeam_Init();
    libPEEP_gt_ButtonDeclineJoin_Init();
    libPEEP_gt_ButtonConfirmJoin_Init();
    libPEEP_gt_PeriodicTeamCooldown_Init();
    libPEEP_gt_TimerTeamCooldownEnd_Init();
    libPEEP_gt_ButtonsTeamSelection_Init();
    libPEEP_gt_ButtonXAvatarsDialog_Init();
    libPEEP_gt_ButtonAvatarsNextPage_Init();
    libPEEP_gt_ButtonAvatarsPreviousPage_Init();
    libPEEP_gt_PeriodicBettingCountdowns_Init();
    libPEEP_gt_TimerBettingInterval_Init();
    libPEEP_gt_TimerBettingPeriod_Init();
    libPEEP_gt_TimerBettingClose_Init();
    libPEEP_gt_SliderChangePotentialBet_Init();
    libPEEP_gt_PulldownTeamtoWin_Init();
    libPEEP_gt_ButtonXBettingDialog_Init();
    libPEEP_gt_ButtonPlaceBet_Init();
    libPEEP_gt_ButtonXInventoryDialog_Init();
    libPEEP_gt_ButtonsInventory_Init();
    libPEEP_gt_ButtonsStore_Init();
    libPEEP_gt_PulldownsPetType_Init();
    libPEEP_gt_PulldownsPetSpawn_Init();
    libPEEP_gt_PulldownsTurfMarkerType_Init();
    libPEEP_gt_PulldownsTurfMarkerSpawn_Init();
    libPEEP_gt_PulldownsTurfSymbolType_Init();
    libPEEP_gt_PulldownsTurfSymbolSpawn_Init();
    libPEEP_gt_PeriodicUpdateChat_Init();
    libPEEP_gt_ChatAnymessage_Init();
    libPEEP_gt_ButtonXChatHelpDialog_Init();
    libPEEP_gt_ButtonXChatLogDialog_Init();
    libPEEP_gt_ButtonChatRefresh_Init();
    libPEEP_gt_ButtonChatHelp_Init();
    libPEEP_gt_CheckboxChatLogCheckAll_Init();
    libPEEP_gt_ButtonsCommentatorTeamVote_Init();
    libPEEP_gt_ButtonCommentatorDeferVote_Init();
    libPEEP_gt_TimerCommentatorChoiceEnds_Init();
    libPEEP_gt_PeriodicCommentatorChoiceCountdown_Init();
    libPEEP_gt_FloatingIconsUnitProductionCreate_Init();
    libPEEP_gt_FloatingIconsUnitProductionDestroy_Init();
    libPEEP_gt_FloatingIconsResearchCreate_Init();
    libPEEP_gt_FloatingIconsResearchDestroy_Init();
    libPEEP_gt_ButtonShowFairMessageLog_Init();
    libPEEP_gt_PulldownSection_Init();
    libPEEP_gt_SliderHelpScroll_Init();
    libPEEP_gt_ButtonXHelpDialog_Init();
    libPEEP_gt_ButtonSkipTutorial_Init();
    libPEEP_gt_TimerEndTutorial_Init();
    libPEEP_gt_PeriodicTutorialCooldown_Init();
    libPEEP_gt_KeyAltNNamePanel_Init();
    libPEEP_gt_KeyCtrlAltNCustomizeNamePanel_Init();
    libPEEP_gt_KeyAltQQuickPanel_Init();
    libPEEP_gt_KeyAltYStructuresPanel_Init();
    libPEEP_gt_KeyAltUResearchPanel_Init();
    libPEEP_gt_KeyAltIResources_Init();
    libPEEP_gt_KeyAltASupply_Init();
    libPEEP_gt_KeyAltRUnitsKilled_Init();
    libPEEP_gt_KeyAltVAPM_Init();
    libPEEP_gt_KeyAlt0ObserveEveryone_Init();
    libPEEP_gt_KeyAlt1ObserveItem1_Init();
    libPEEP_gt_KeyAlt2ObserveItem2_Init();
    libPEEP_gt_KeyAlt3ObserveItem3_Init();
    libPEEP_gt_KeyAlt4ObserveItem4_Init();
    libPEEP_gt_KeyAlt5ObserveItem5_Init();
    libPEEP_gt_KeyAlt6ObserveItem6_Init();
    libPEEP_gt_KeyAlt7ObserveItem7_Init();
    libPEEP_gt_KeyAlt8ObserveItem8_Init();
    libPEEP_gt_KeyAlt9ObserveItem9_Init();
    libPEEP_gt_KeyShiftAltRResources_Init();
    libPEEP_gt_KeyShiftAltIIncome_Init();
    libPEEP_gt_KeyShiftAltSSpending_Init();
    libPEEP_gt_KeyShiftAltUUnits_Init();
    libPEEP_gt_KeyShiftAltTStructures_Init();
    libPEEP_gt_KeyShiftAltLUnitsLost_Init();
    libPEEP_gt_KeyShiftAltDProduction_Init();
    libPEEP_gt_KeyShiftAltGUpgrades_Init();
    libPEEP_gt_KeyShiftAltAActiveForces_Init();
    libPEEP_gt_KeyShiftAltMAPM_Init();
    libPEEP_gt_KeyShiftAltEEPM_Init();
    libPEEP_gt_KeyShiftAltCEPMaswell_Init();
    libPEEP_gt_KeyAltWAutoCam_Init();
    libPEEP_gt_KeyAltCCinematicMode_Init();
    libPEEP_gt_KeyAltHLogs_Init();
    libPEEP_gt_KeyAltDBlizzardUI_Init();
    libPEEP_gt_KeyAltBBetting_Init();
    libPEEP_gt_KeyAltLLeaderboard_Init();
    libPEEP_gt_KeyAltSResourcePanel_Init();
    libPEEP_gt_KeyAltMAdvancedResourcePanel_Init();
    libPEEP_gt_KeyAltZZoomOut_Init();
    libPEEP_gt_KeyAltXZoomIn_Init();
    libPEEP_gt_KeyCtrlShiftUZoomOut_Init();
    libPEEP_gt_KeyCtrlShiftOZoomIn_Init();
    libPEEP_gt_KeyCtrlShiftJYawLeft_Init();
    libPEEP_gt_KeyCtrlShiftLYawRight_Init();
    libPEEP_gt_KeyCtrlShiftIPitchUp_Init();
    libPEEP_gt_KeyCtrlShiftKPitchDown_Init();
    libPEEP_gt_KeyCtrlShiftYDefaultAngle_Init();
    libPEEP_gt_KeyCtrlShiftHDefaultView_Init();
    libPEEP_gt_KeyCtrlShift1AutoCamStyle1_Init();
    libPEEP_gt_KeyCtrlShift2AutoCamStyle2_Init();
    libPEEP_gt_KeyCtrlShift3AutoCamStyle3_Init();
    libPEEP_gt_KeyCtrlShift4AutoCamStyle4_Init();
    libPEEP_gt_KeyCtrlShift5AutoCamStyle5_Init();
    libPEEP_gt_KeyAltJMapAnalysis_Init();
    libPEEP_gt_KeyAltKMapOverlay_Init();
    libPEEP_gt_KeyAltPPen_Init();
    libPEEP_gt_KeyAltOErasePen_Init();
    libPEEP_gt_KeyAltEFullscreenMode_Init();
    libPEEP_gt_KeyCtrlAltEHidePeepModeUI_Init();
    libPEEP_gt_KeyCtrlKKickaPlayer_Init();
    libPEEP_gt_KeyF8_Init();
    libPEEP_gt_KeyF9_Init();
    libPEEP_gt_KeyCtrlF9_Init();
    libPEEP_gt_KeyF11_Init();
    libPEEP_gt_KeyF12_Init();
    libPEEP_gt_DebugSequenceStep1_Init();
    libPEEP_gt_DebugSequenceStep2_Init();
    libPEEP_gt_DebugSequenceStep3_Init();
    libPEEP_gt_DebugSequenceStep4_Init();
    libPEEP_gt_TimerDebugSequenceExpires_Init();
    libPEEP_gt_ButtonXLeaderboard_Init();
    libPEEP_gt_ButtonsLeaderboardSort_Init();
    libPEEP_gt_TimerBlinkingSubtitle_Init();
    libPEEP_gt_ListboxMatchSelection_Init();
    libPEEP_gt_ButtonXMatchHistoryDialog_Init();
    libPEEP_gt_ButtonRefreshHistory_Init();
    libPEEP_gt_CheckboxHistoryCheckAll_Init();
    libPEEP_gt_ButtonMatchHistory_Init();
    libPEEP_gt_CheckboxesLogFilters_Init();
    libPEEP_gt_ButtonXMinimap_Init();
    libPEEP_gt_ButtonQuickPanel_Init();
    libPEEP_gt_FadeInNamePanelGraphic_Init();
    libPEEP_gt_FadeOutNamePanelGraphic_Init();
    libPEEP_gt_ButtonsNav_Init();
    libPEEP_gt_ButtonTeams_Init();
    libPEEP_gt_ButtonOptions_Init();
    libPEEP_gt_ButtonMenu_Init();
    libPEEP_gt_ButtonChat_Init();
    libPEEP_gt_ButtonHelp_Init();
    libPEEP_gt_PulldownObserverVision_Init();
    libPEEP_gt_CheckboxAutoCam_Init();
    libPEEP_gt_ButtonZoomIn_Init();
    libPEEP_gt_ButtonZoomOut_Init();
    libPEEP_gt_ButtonCinematicMode_Init();
    libPEEP_gt_ButtonBlizzUI_Init();
    libPEEP_gt_ButtonLogs_Init();
    libPEEP_gt_ButtonStats_Init();
    libPEEP_gt_ButtonBetting_Init();
    libPEEP_gt_ButtonLeaderboard_Init();
    libPEEP_gt_ButtonXChangePlayerNamesDialog_Init();
    libPEEP_gt_TextboxPlayerName_Init();
    libPEEP_gt_ButtonXNamePanelOptionsDialog_Init();
    libPEEP_gt_ButtonApplyNamePanelSettings_Init();
    libPEEP_gt_ButtonApplyNamePanelSettingstoAll_Init();
    libPEEP_gt_ButtonChangePlayerValues_Init();
    libPEEP_gt_TextboxCustomMessage_Init();
    libPEEP_gt_TextboxCustomScores_Init();
    libPEEP_gt_TextboxCustomPolls_Init();
    libPEEP_gt_PulldownNamePanelPosition_Init();
    libPEEP_gt_PulldownNamePanelStyle_Init();
    libPEEP_gt_PulldownNamePanelMessage_Init();
    libPEEP_gt_CheckboxShowSupply_Init();
    libPEEP_gt_CheckboxShowScores_Init();
    libPEEP_gt_CheckboxShowPolls_Init();
    libPEEP_gt_CheckboxShowBettingAmounts_Init();
    libPEEP_gt_CheckboxShowTooltips_Init();
    libPEEP_gt_CheckboxRotateLogos_Init();
    libPEEP_gt_ButtonXKickPlayerDialog_Init();
    libPEEP_gt_ButtonKickPlayer_Init();
    libPEEP_gt_PulldownKickPlayer_Init();
    libPEEP_gt_ButtonConfirmKickPlayer_Init();
    libPEEP_gt_ButtonXOptionsDialog_Init();
    libPEEP_gt_ButtonXPersonalOptionsDialog_Init();
    libPEEP_gt_ButtonPersonalOptions_Init();
    libPEEP_gt_ButtonVotableOptions_Init();
    libPEEP_gt_ButtonCustomizeNamePanel_Init();
    libPEEP_gt_PulldownMatchMode_Init();
    libPEEP_gt_PulldownPlayerSelect_Init();
    libPEEP_gt_PulldownColorScheme_Init();
    libPEEP_gt_CheckboxEnforceCompetitiveSpawns_Init();
    libPEEP_gt_CheckboxDisableBling_Init();
    libPEEP_gt_CheckboxDisableZoom_Init();
    libPEEP_gt_CheckboxAllowChat_Init();
    libPEEP_gt_CheckboxAllowCooperative_Init();
    libPEEP_gt_CheckboxEndMatch_Init();
    libPEEP_gt_CheckboxHideNamePanel_Init();
    libPEEP_gt_CheckboxShowFloatingIcons_Init();
    libPEEP_gt_CheckboxAdvancedResourcePanel_Init();
    libPEEP_gt_SliderSmartCamidletime_Init();
    libPEEP_gt_PulldownAutoCamStyle_Init();
    libPEEP_gt_ButtonsOptionTabs_Init();
    libPEEP_gt_ButtonStructures_Init();
    libPEEP_gt_ButtonResearch_Init();
    libPEEP_gt_ButtonResources_Init();
    libPEEP_gt_ButtonSupplies_Init();
    libPEEP_gt_ButtonKilled_Init();
    libPEEP_gt_ButtonAPM_Init();
    libPEEP_gt_PeriodicRefreshStats_Init();
    libPEEP_gt_ButtonToggleSimpleStats_Init();
    libPEEP_gt_TimerExpire_Init();
    libPEEP_gt_ButtonXResourceTrading_Init();
    libPEEP_gt_ButtonLaunchResourceTrading_Init();
    libPEEP_gt_ButtonSendResources_Init();
    libPEEP_gt_ButtonMoreMinerals_Init();
    libPEEP_gt_ButtonLessMinerals_Init();
    libPEEP_gt_ButtonMoreVespene_Init();
    libPEEP_gt_ButtonLessVespene_Init();
    libPEEP_gt_ButtonConfirmPurchase_Init();
    libPEEP_gt_ButtonDeclinePurchase_Init();
    libPEEP_gt_DEVETSTMorechips_Init();
    libPEEP_gt_PulldownAisle_Init();
    libPEEP_gt_ButtonXStoreDialog_Init();
    libPEEP_gt_ButtonCashMyChips_Init();
    libPEEP_gt_ButtonPurchaseItem_Init();
    libPEEP_gt_ButtonXTeamRestrictionDialog_Init();
    libPEEP_gt_CheckboxCheckAll_Init();
    libPEEP_gt_CheckboxesPlayerRestrictions_Init();
    libPEEP_gt_MouseMovePen_Init();
    libPEEP_gt_MouseDownEngagePen_Init();
    libPEEP_gt_MouseUpDisengagePen_Init();
    libPEEP_gt_ButtonSurrenderDecline_Init();
    libPEEP_gt_ButtonSurrenderConfirm_Init();
    libPEEP_gt_Scouting_Init();
    libPEEP_gt_BuildsStructure_Init();
    libPEEP_gt_EnhancesStructure_Init();
    libPEEP_gt_CancelsStructure_Init();
    libPEEP_gt_UnitOrderedtoMoveAttack_Init();
    libPEEP_gt_UnitisAttacked_Init();
    libPEEP_gt_BuildingRazed_Init();
    libPEEP_gt_Player1CameraMoves_Init();
    libPEEP_gt_Player2CameraMoves_Init();
    libPEEP_gt_Player3CameraMoves_Init();
    libPEEP_gt_Player4CameraMoves_Init();
    libPEEP_gt_Player5CameraMoves_Init();
    libPEEP_gt_Player6CameraMoves_Init();
    libPEEP_gt_Player7CameraMoves_Init();
    libPEEP_gt_Player8CameraMoves_Init();
    libPEEP_gt_Player9CameraMoves_Init();
    libPEEP_gt_Player10CameraMoves_Init();
    libPEEP_gt_Player11CameraMoves_Init();
    libPEEP_gt_Player12CameraMoves_Init();
    libPEEP_gt_Player13CameraMoves_Init();
    libPEEP_gt_Player14CameraMoves_Init();
    libPEEP_gt_PeriodicAutoCamRotation_Init();
    libPEEP_gt_CycleIdleCam_Init();
    libPEEP_gt_TimerZerglingCheer_Init();
    libPEEP_gt_MarineStimpack_Init();
    libPEEP_gt_ThorStrikeCannons_Init();
    libPEEP_gt_StalkerBlink_Init();
    libPEEP_gt_SentryGuardianShieldHallucination_Init();
    libPEEP_gt_BanelingAnnihilation_Init();
    libPEEP_gt_InfestorInfestedTerranFungalNeuralParasite_Init();
    libPEEP_gt_HighTemplarPsionicStorm_Init();
    libPEEP_gt_ProbeWarpIn_Init();
    libPEEP_gt_PeriodicRotateCamera_Init();
    libPEEP_gt_PeriodicMoveTeamsinCircle_Init();
    libPEEP_gt_PeriodicMatchCountdown_Init();
    libPEEP_gt_IdleUnitsFaceCenterofFaceoff_Init();
    libPEEP_gt_TimerMatchCountdown_Init();
    libPEEP_gt_TimerStartMinibattle_Init();
    libPEEP_gt_FaceoffTransitionStart_Init();
    libPEEP_gt_MoveFaceoffDecals_Init();
    libPEEP_gt_ShowLoadingScreen_Init();
    libPEEP_gt_PeriodicRevealCountdown_Init();
    libPEEP_gt_TimerRevealPlayer_Init();
    libPEEP_gt_ControlGroupControl0_Init();
    libPEEP_gt_ControlGroupShift0_Init();
    libPEEP_gt_ControlGroupControl1_Init();
    libPEEP_gt_ControlGroupShift1_Init();
    libPEEP_gt_ControlGroupControl2_Init();
    libPEEP_gt_ControlGroupShift2_Init();
    libPEEP_gt_ControlGroupControl3_Init();
    libPEEP_gt_ControlGroupShift3_Init();
    libPEEP_gt_ControlGroupControl4_Init();
    libPEEP_gt_ControlGroupShift4_Init();
    libPEEP_gt_ControlGroupControl5_Init();
    libPEEP_gt_ControlGroupShift5_Init();
    libPEEP_gt_ControlGroupControl6_Init();
    libPEEP_gt_ControlGroupShift6_Init();
    libPEEP_gt_ControlGroupControl7_Init();
    libPEEP_gt_ControlGroupShift7_Init();
    libPEEP_gt_ControlGroupControl8_Init();
    libPEEP_gt_ControlGroupShift8_Init();
    libPEEP_gt_ControlGroupControl9_Init();
    libPEEP_gt_ControlGroupShift9_Init();
    libPEEP_gt_PeriodicRefreshGameClocks_Init();
    libPEEP_gt_StructureStarted_Init();
    libPEEP_gt_StructureCompleted_Init();
    libPEEP_gt_StructureCanceled_Init();
    libPEEP_gt_UnitCreation_Init();
    libPEEP_gt_StructEnhanceOrbitalCommandStart_Init();
    libPEEP_gt_StructEnhanceOrbitalCommandCancel_Init();
    libPEEP_gt_StructEnhanceOrbitalCommandComplete_Init();
    libPEEP_gt_StructEnhanceEnergisedCitadelStart_Init();
    libPEEP_gt_StructEnhanceEnergiseCitadelComplete_Init();
    libPEEP_gt_StructEnhancePlanetaryFortoressStart_Init();
    libPEEP_gt_StructEnhancePlanetaryFortressCancel_Init();
    libPEEP_gt_StructEnhancePlanetaryFortressComplete_Init();
    libPEEP_gt_StructEnhanceWarpGateStart_Init();
    libPEEP_gt_StructEnhanceWarpGateCancel_Init();
    libPEEP_gt_StructEnhanceWarpGateComplete_Init();
    libPEEP_gt_StructEnhanceWarpGatewayStart_Init();
    libPEEP_gt_StructEnhanceWarpGatewayCancel_Init();
    libPEEP_gt_StructEnhanceWarpGatewayComplete_Init();
    libPEEP_gt_StructEnhanceLairStart_Init();
    libPEEP_gt_StructEnhanceLairCancel_Init();
    libPEEP_gt_StructEnhanceLairComplete_Init();
    libPEEP_gt_StructEnhanceHiveStart_Init();
    libPEEP_gt_StructEnhanceHiveCancel_Init();
    libPEEP_gt_StructEnhanceHiveComplete_Init();
    libPEEP_gt_StructEnhanceGreaterSpireStart_Init();
    libPEEP_gt_StructEnhanceGreaterSpireCancel_Init();
    libPEEP_gt_StructEnhanceGreaterSpireComplete_Init();
    libPEEP_gt_MorphMendlingSacrificialMutation_Init();
    libPEEP_gt_MorphBaneling_Init();
    libPEEP_gt_MorphLurker_Init();
    libPEEP_gt_MorphOverseer_Init();
    libPEEP_gt_MorphArchon_Init();
    libPEEP_gt_MorphBroodLord_Init();
    libPEEP_gt_ResearchUpgradeStarted_Init();
    libPEEP_gt_ResearchUpgradeCompleted_Init();
    libPEEP_gt_ResearchUpgradeCancelled_Init();
    libPEEP_gt_UnitDeath_Init();
    libPEEP_gt_CheckforDefeat_Init();
    libPEEP_gt_InitializeMatch_Init();
    libPEEP_gt_ApplyapplyVision_Init();
    libPEEP_gt_PrepareStartingUnitsforAllPlayers_Init();
    libPEEP_gt_CreateStartingUnitsforAllPlayers_Init();
    libPEEP_gt_DEVETSTDisablesharedcontrol_Init();
    libPEEP_gt_CommitMatchPlayers_Init();
    libPEEP_gt_StopVictorySound_Init();
    libPEEP_gt_CleanupafterVictoryMatch_Init();
    libPEEP_gt_RunpeepMode_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libPEEP_InitLib_completed = false;

void libPEEP_InitLib () {
    if (libPEEP_InitLib_completed) {
        return;
    }

    libPEEP_InitLib_completed = true;

    libPEEP_InitLibraries();
    libPEEP_InitVariables();
    libPEEP_InitCustomScript();
    libPEEP_InitTriggers();
}

