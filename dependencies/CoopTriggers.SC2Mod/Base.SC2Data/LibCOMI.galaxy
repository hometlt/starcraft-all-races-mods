include "TriggerLibs/NativeLib"
include "LibARRA"

include "LibCOMI_h"

//--------------------------------------------------------------------------------------------------
// Library: COOP
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOMI_InitLibraries () {
    libNtve_InitVariables();
    libARRA_InitVariables();
}

// Variable Initialization
bool libCOMI_InitVariables_completed = false;

void libCOMI_InitVariables () {
    int init_i;
    int init_j;

    if (libCOMI_InitVariables_completed) {
        return;
    }

    libCOMI_InitVariables_completed = true;

    libCOMI_gv_gameMode = 2;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cCX_PlayerMasteryLevel[init_i] = 90;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cC_PlayerMasteryEnabled[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CachedUpgradeData[init_i].lv_cachedDifficulty = 6;
    }
    libCOMI_gv_vU_Enemies = PlayerGroupEmpty();
    libCOMI_gv_vU_Allies = PlayerGroupEmpty();
    libCOMI_gv_vU_EnemyPlayers = PlayerGroupEmpty();
    libCOMI_gv_vU_EnemyAI = PlayerGroupEmpty();
    libCOMI_gv_vU_AlliedCommanders = PlayerGroupEmpty();
    libCOMI_gv_vU_HumanPlayers = PlayerGroupEmpty();
    libCOMI_gv_vU_SlotsPlayers = PlayerGroupEmpty();
    libCOMI_gv_vU_SlotsEnemy = PlayerGroupEmpty();
    libCOMI_gv_vU_AllyNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_BonusNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_EnemyNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_NeutralNPC = PlayerGroupEmpty();
    libCOMI_gv_vU_HostileNPC = PlayerGroupEmpty();
    libCOMI_gv_all = PlayerGroupAll();
    libCOMI_gv_vU_PLAYER_HOSTILE = 15;
    libCOMI_gv_observerGroup = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SharedVisionPlayers[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_playerColor[init_i] = 15;
    }
    libCOMI_gv_selectedEnemyFaction = "_Random_";
    libCOMI_gv_selectedEnemyComposition = "_Random_";
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            libCOMI_gv_optionalUnitsConditional[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAX_TEAMS; init_i += 1) {
        libCOMI_gv_optionalUnitsPerTeam[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_optionalUnitsTotal = UnitGroupEmpty();
    libCOMI_gv_optionalResources = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_mAX_TEAMS; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            libCOMI_gv_clearUnits[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAX_TEAMS; init_i += 1) {
        libCOMI_gv_clearUnitsPerTeam[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_clearUnitsTotal = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOMI_gv_rebuildUnits[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_bulliesUnits = UnitGroupEmpty();
    libCOMI_gv_ignoredUnits = UnitGroupEmpty();
    libCOMI_gv_aLLSTARTPOINTS = "Start Points";
    libCOMI_gv_aCTIVESTARTPOINTS = "Active Start Points";
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_VisionShareUnits[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_VisionShareEnabled = true;
    libCOMI_gv_heroUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_mAX_HERO_UNITS; init_i += 1) {
        libCOMI_gv_heroUnitsData[init_i].lv_reviveTimer = 60.0;
        libCOMI_gv_heroUnitsData[init_i].lv_deathCount = -1;
    }
    libCOMI_gv_cU_HeroCooldownTime = 60.0;
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_HeroPositionX[init_i][init_j] = 20;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_HeroPositionY[init_i][init_j] = 30;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogBorderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogBorderImageAll[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogIconImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogCooldownImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogDamageTakenImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogDamageTakenLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogHealthBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogHealthBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogShieldBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogShieldBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogEnergyBarImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogEnergyBarBackground[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogHealthLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogShieldLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        libCOMI_gv_cU_HeroDialogLevelBox[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_VoidHeroUIRevivable[init_i][init_j] = true;
        }
    }
    libCOMI_gv_cU_HeroAutomaticIndex = 1;
    for (init_i = 0; init_i <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_oBSOLETE_CU_HeroReviveTimer[init_i][init_j] = UserDataGetFixed("GameSettings", "GameValues", "HeroReviveTime", 1);
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_yY_GPCasterGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtonBackgroundImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtonActiveImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtonArrows[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPCmdButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCutscene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCmdPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCmdPanelUnitStatus[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_GPPanelHolder = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPCutsceneFilter[init_i] = "";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_GPUnitEnergyLinks[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyGlassScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyBarScene[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyTooltip[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_GPEnergyBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libCOMI_gv_topbarButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCOMI_gv__FadeDialog = c_invalidDialogId;
    libCOMI_gv__FadeImage = c_invalidDialogControlId;
    libCOMI_gv_wEBSITE = StringExternal("Param/Value/lib_COMI_4D0EA868");
    libCOMI_gv_enemyFactionsCount = 1;
    libCOMI_gv_vU_CommanderEnemyFactionPulldown = c_invalidDialogControlId;
    libCOMI_gv_amonFactionsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libCOMI_gv_mAX_FACTIONS; init_i += 1) {
        libCOMI_gv_raceButton[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_aF_CS_PatchDialog = c_invalidDialogId;
    libCOMI_gv_aF_CS_News = StringExternal("Param/Value/lib_COMI_2500A4A0");
    libCOMI_gv_aF_CS_NewsDialog = c_invalidDialogId;
    libCOMI_gv_aF_CS_NewsControlButton = c_invalidDialogControlId;
    libCOMI_gv_aF_CS_NewsDialogPanel = c_invalidDialogControlId;
    libCOMI_gv_cC_WorldCoverDlg = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        libCOMI_gv_aF_CS_CutsceneDialog[init_i] = c_invalidDialogId;
    }
    libCOMI_gv_aF_CS_CommanderMiraDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_aF_CS_CommanderCutscenes[init_i] = c_cutsceneNone;
    }
    libCOMI_gv_uT_CommandsButton = c_invalidDialogControlId;
    libCOMI_gv_playAmonButton = c_invalidDialogControlId;
    libCOMI_gv_playRandomButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libCOMI_gv_chosenTeam[init_i] = 1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAX_COMMANDERCOUNT; init_i += 1) {
        libCOMI_gv_commanderOption[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOMI_gv_commanderOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOMI_gv_amonOption[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOMI_gv_amonOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOMI_gv_randomOption[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_portrait = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_selection = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_lock = c_invalidDialogControlId;
        libCOMI_gv_randomOption[init_i].lv_ready = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_CommanderSelectionPanel = c_invalidDialogControlId;
    libCOMI_gv_uT_AllyMasteryButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsContainer = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabControl = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabInfoButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabUnitsButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsTabResearchButton = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsBackground = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsInfoContainer = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsUnitsContainer = c_invalidDialogControlId;
    libCOMI_gv_vU_DetailsResearchContainer = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderDialog = c_invalidDialogId;
    libCOMI_gv_cU_CommanderPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderReadyButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderReadyCheckMark = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderReadyLabelSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderInfoPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderSelectedNameSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderAccountNameSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderSelectedPrestigeSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderLevelLabelSelf = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMasteryLabelSelf = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderAbilitiesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUnitsButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_UNITSMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderUpgradesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_CommanderLevelUpButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderLevelDownButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderPanelUpgrade = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMasteryButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMasteryCheckbox = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK; init_i += 1) {
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_button = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_icon = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_title = c_invalidDialogControlId;
        libCOMI_gv_cU_CommanderPrestigesButtons[init_i].lv_description = c_invalidDialogControlId;
    }
    libCOMI_gv_aF_CS_AllyPrestigeButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryDialog = c_invalidDialogId;
    libCOMI_gv_cU_MasteryPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryItemPanels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryNameLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryPointLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryValueLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryPlusButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERIES_PER_COMMANDER; init_i += 1) {
        libCOMI_gv_cU_MasteryMinusButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MASTERY_CATEGORIES; init_i += 1) {
        libCOMI_gv_cU_MasteryCategoryPoints[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_MasteryAcceptButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryResetButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryLevelUpButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryLevelDownButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MasteryLevelLabel = c_invalidDialogControlId;
    libCOMI_gv_vU_GameModePulldown = c_invalidDialogControlId;
    libCOMI_gv_vU_CommanderDifficultyPulldown = c_invalidDialogControlId;
    libCOMI_gv_vU_CommanderPanelSettings = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMutatorButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMutatorCountLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_CommanderMutatorChallengePulldown = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOMI_gv_cU_PlayerPrestigeBrief[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        libCOMI_gv_cU_PlayerPrestigeBriefImage[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_EnemyBrief = c_invalidDialogControlId;
    libCOMI_gv_cU_ArmyButton = c_invalidDialogControlId;
    libCOMI_gv_cU_ArmyButtonTipPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_Style = libCOMI_ge_SingularBossBarStyle_Objective;
    libCOMI_gv_cU_BB_Panel = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_TitleLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_HpLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_HpFullImage = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_HpCurrentImage = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_HpBackground = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_HpBackground2 = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_BossBG = c_invalidDialogControlId;
    libCOMI_gv_cU_BB_ObjectiveBG = c_invalidDialogControlId;
    libCOMI_gv_cU_HealthWatchDialog = c_invalidDialogId;
    libCOMI_gv_cU_HealthWatchImage = c_invalidDialogControlId;
    libCOMI_gv_cU_MissionUIContainer = c_invalidDialogControlId;
    libCOMI_gv_cU_ObjectivePanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_targetingTemplate[init_i] = "LotV_GameUI/SoATargetingUITemplate";
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoATargetingAlreadyCanceled[init_i] = true;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_SoATargetingDirectionGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingOverlayDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingOverlayPortrait[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingAbilityDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingCancelButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingChargesPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_TargetingInstructionsLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cCC_MAXPLAYERS; init_j += 1) {
            libCOMI_gv_cU_TargetingChargeSinglePanel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCOMI_gv_cU_ProgressBarPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_ProgressBarLabelTitle = c_invalidDialogControlId;
    libCOMI_gv_cU_ProgressBarLabelBarLeft = c_invalidDialogControlId;
    libCOMI_gv_cU_ProgressBarImageBar = c_invalidDialogControlId;
    libCOMI_gv_cU_ProgressBarMax = 100;
    libCOMI_gv_pUC_ProgressBarWidth = 399;
    libCOMI_gv_pUC_ProgressBarHeight = 27;
    libCOMI_gv_cU_TimerWindowHighlightFrame = c_invalidDialogControlId;
    libCOMI_gv_cU_TimerWindowDangerThreshold = 90.0;
    libCOMI_gv_cU_TimerWindowTimer = TimerCreate();
    libCOMI_gv_cU_TimerWindow = c_timerWindowNone;
    for (init_i = 0; init_i <= libCOMI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOMI_gv_cU_WaveTimerWindows[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOMI_gv_cU_WaveTimerWindowTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOMI_gv_cU_WaveTimerWindowTitle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        libCOMI_gv_cU_WaveTimerWindowTime[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_WAVETIMERWINDOWMAX; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cUC_WAVETIMERUNITMAX; init_j += 1) {
            libCOMI_gv_cU_WaveTimerWindowIcon[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    libCOMI_gv_cU_FanfareFlash = c_invalidDialogControlId;
    libCOMI_gv_cU_FanfareCloseButton = c_invalidDialogControlId;
    libCOMI_gv_cU_FanfareConvertToReplayButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_FanfareResult[init_i] = c_gameOverVictory;
    }
    libCOMI_gv_cU_FanfarePanel = c_invalidDialogControlId;
    libCOMI_gv_cU_FanfareDialog = c_invalidDialogId;
    libCOMI_gv_cU_ScoreDialog = c_invalidDialogId;
    libCOMI_gv_cU_ScorePanel = c_invalidDialogControlId;
    libCOMI_gv_cU_ScoreTitleLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_ScoreContinueButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCOMI_gv_cU_ScoreCategoryTitleLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        libCOMI_gv_cU_ScoreCategoryValueLabel[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_ScoreTotalValueLabel = c_invalidDialogControlId;
    libCOMI_gv_cM_FullScreenUpperContainer = c_invalidDialogControlId;
    libCOMI_gv_dialog = c_invalidDialogId;
    libCOMI_gv_startMissionDialogButton = c_invalidDialogControlId;
    libCOMI_gv_selectMissionDialog = c_invalidDialogId;
    libCOMI_gv_selectMissionDialogBig = c_invalidDialogId;
    libCOMI_gv_selectMissionPulldownDialog = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_mAPS_MAX; init_i += 1) {
        libCOMI_gv_mapFiles[init_i] = "";
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAPS_MAX; init_i += 1) {
        libCOMI_gv_missionButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAPS_MAX; init_i += 1) {
        libCOMI_gv_missionImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAPS_MAX; init_i += 1) {
        libCOMI_gv_missionText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mAPS_MAX; init_i += 1) {
        libCOMI_gv_mapBorder[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_missionsButton = c_invalidDialogControlId;
    libCOMI_gv_cM_RevealersEnabled = true;
    libCOMI_gv_cC_NoSpawnRegion = RegionEmpty();
    libCOMI_gv_inactiveZone = RegionFromName("Inactive Zone");
    libCOMI_gv_cM_CoopAI_Players = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_Commander[init_i] = "None";
    }
    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = "None";
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_IsAlive[init_i] = true;
    }
    libCOMI_gv_cM_CoopAI_AIDetection_AttackWave = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[init_i] = UnitGroupEmpty();
    }
    libCOMI_gv_cM_CoopAIPlayer_NextAttackWave = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[init_i] = AIWaveTargetPlayer(libCOMI_gf_HumanPlayers());
    }
    libCOMI_gv_cM_CoopAI_AttackForce_Transports = UnitGroupEmpty();
    libCOMI_gv_cM_DropPod_TP_Units = UnitGroupEmpty();
    libCOMI_gv_cM_VOResourceReqSendButton = c_invalidDialogControlId;
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = true;
    libCOMI_gv_cM_CoopAI_WavePingShowAll = true;
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_HighestPlayerIndex; init_i += 1) {
        for (init_j = 0; init_j <= libCOMI_gv_cMC_CoopAI_MaxWaveCount; init_j += 1) {
            libCOMI_gv_cM_CoopAI_WaveShowPing[init_i][init_j] = true;
        }
    }
    libCOMI_gv_cM_CoopAI_DontPingUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_APlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_AWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BPlayer[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_CombinedPing_BWave[init_i] = -1;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroups[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cMC_CoopAI_MaxPingCount; init_i += 1) {
        libCOMI_gv_cM_CoopAI_PingGroupPing[init_i] = c_invalidPingId;
    }
    libCOMI_gv_cM_CoopAI_DontPingPlayers = PlayerGroupEmpty();
    libCOMI_gv_pC_StatEventLastCampaign = -1;
    libCOMI_gv_aF_ScoreButton = c_invalidDialogControlId;
    libCOMI_gv_aF_Score_KillGraph = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMI_gv_aF_Score_PieCharts[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMI_gv_aF_Score_FinalButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMI_gv_aF_Score_FinalButtonLabel[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_aF_KillNumbers = c_invalidDialogId;
    libCOMI_gv_cCC_MAXMISSIONSCORE = 250000;
    libCOMI_gv_cC_CoopBankName = "viscoop";
    for (init_i = 0; init_i <= libCOMI_gv_cCC_OBJECTIVESMAX; init_i += 1) {
        libCOMI_gv_createdObjectives[init_i] = c_invalidObjectiveId;
    }
    libCOMI_gv_fanfareMaxWaitTimer = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_EndMissionResult[init_i] = c_gameOverDefeat;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cM_ScreenMode[init_i] = c_uiModeConsole;
    }
    libCOMI_gv_selectedDifficulty = libNtve_gf_DifficultyValueInt(1, 2, 3, 4);
    libCOMI_gv_cM_CybCoreTextTag = c_textTagNone;
    libCOMI_gv_uT_Horde_UG_Wave = UnitGroupEmpty();
    libCOMI_gv_uT_Horde_UG = UnitGroupEmpty();
    libCOMI_gv_uT_encompsDialogs = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libCOMI_gv_uT_MasteryBoxes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libCOMI_gv_uT_MasteryLabels[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_uT_MasteryButton = c_invalidDialogControlId;
    libCOMI_gv_uT_MasteryDialog = c_invalidDialogId;
    libCOMI_gv_uT_LastAttackWave = UnitGroupEmpty();
    libCOMI_gv_cM_DebugAITargetSpawners = true;
    libCOMI_gv_uT_Bank_UnitFilter = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)));
    libCOMI_gv_cU_RandomMutationSelectDialog = c_invalidDialogId;
    libCOMI_gv_cU_RandomMutationSelectOKButton = c_invalidDialogControlId;
    libCOMI_gv_cU_RandomMutationSelectMinSlider = c_invalidDialogControlId;
    libCOMI_gv_cU_RandomMutationSelectMaxSlider = c_invalidDialogControlId;
    libCOMI_gv_cU_RandomMutationSelectMinMutSlider = c_invalidDialogControlId;
    libCOMI_gv_cU_RandomMutationSelectMaxMutSlider = c_invalidDialogControlId;
    libCOMI_gv_cU_RandomMutationSelectLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_MutatorDialog = c_invalidDialogId;
    libCOMI_gv_cU_MutatorPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_MutatorItemPanels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_MutatorNameLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_MutatorDescriptionLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_cU_MutatorCheckboxes[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_MutatorAcceptButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MutatorCancelButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorDialog = c_invalidDialogId;
    libCOMI_gv_cU_CustomMutatorPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorChatDisplayStandard = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorStartButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorMenuButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorPageCountLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorPageNextButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorPagePrevButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorMapNameLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorSpeedDropDown = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorCommanderNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorCommanderImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorPlayerNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorPlayerCard[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorMasteryLevelLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_CustomMutatorItemsPerPage; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorItemButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_CustomMutatorItemsPerPage; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorItemLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_CustomMutatorItemsPerPage; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorItemIcons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_CustomMutatorItemsActiveMax; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorActiveItemLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_CustomMutatorItemsActiveMax; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorActiveItemButtons[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_cU_CustomMutatorLeaderExitPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorLeaderExitButton = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorLeaderExitTitleLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_CustomMutatorLeaderExitMessageLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cU_CustomMutatorPageSelection[init_i] = 1;
    }
    libCOMI_gv_mM_MutatorDialog = c_invalidDialogId;
    libCOMI_gv_mM_MutatorPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCOMI_gv_mM_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_mM_MutatorItemPanels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mM_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_mM_MutatorNameLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mM_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_mM_MutatorDescriptionLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_mM_MUTATORMAXCOUNT; init_i += 1) {
        libCOMI_gv_mM_MutatorCheckboxes[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_mM_MutatorAcceptButton = c_invalidDialogControlId;
    libCOMI_gv_mM_MutatorCancelButton = c_invalidDialogControlId;
    libCOMI_gv_cU_MutatorListSmallPanel = c_invalidDialogControlId;
    libCOMI_gv_cU_MutatorListLargePanel = c_invalidDialogControlId;
    libCOMI_gv_cU_MutatorListNotificationLabel = c_invalidDialogControlId;
    libCOMI_gv_cU_MutatorListNotificationTimer = TimerCreate();
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL; init_i += 1) {
        libCOMI_gv_cU_MutatorListSmallIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL; init_i += 1) {
        libCOMI_gv_cU_MutatorListSmallItems[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE; init_i += 1) {
        libCOMI_gv_cU_MutatorListLargeIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE; init_i += 1) {
        libCOMI_gv_cU_MutatorListLargeItems[init_i] = c_invalidDialogControlId;
    }
    libCOMI_gv_mM_PlayerX = 14;
    libCOMI_gv_mM_PX_PlayerX = 14;
    libCOMI_gv_attackingUnitGroup = UnitGroupEmpty();
    libCOMI_gv_cT_OnDeathSpawns = UnitGroupEmpty();
    libCOMI_gv_cT_SpawnedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        libCOMI_gv_cT_MutatorVisionPlayers[init_i] = PlayerGroupEmpty();
    }
    libCOMI_gv_cT_RandomCycleTimer = TimerCreate();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: CM_AIIncludes
//--------------------------------------------------------------------------------------------------
include "TriggerLibs/AI"
include "TriggerLibs/BaseAI"
include "TriggerLibs/Computer"
include "TriggerLibs/CampaignAI"
include "TriggerLibs/SharedAI"

void libCOMI_InitCustomScript () {
}

// Presets
string libCOMI_ge_ObjectiveTimerThresholds_Ident (int lp_val) {
         if (lp_val == libCOMI_ge_ObjectiveTimerThresholds_Yellow) { return "Yellow"; }
    else if (lp_val == libCOMI_ge_ObjectiveTimerThresholds_Red) { return "Red"; }
    return null;
}

// Functions
void libCOMI_gf_LoadCoopMission (string lp_map, trigger lp_startTrigger) {
    // Variable Declarations
    int lv_player;
    int lv_registeredplayers;
    int lv_registeredenemyplayers;
    int lv_aienemy;
    string lv_indexMasteryUpgrade;
    bank lv_bank;
    int lv_indexPlayer;
    int lv_itemIndex;
    int lv_masteryIndex;
    int lv_vTotalMastery;
    string lv_briefingSoundtrack;

    // Automatic Variable Declarations
    playergroup auto5D8F9B9D_g;

    // Variable Initialization
    lv_briefingSoundtrack = UserDataGetGameLink("MissionSettings", "CurrentMission", "BriefingSoundtrack", 1);

    // Implementation
    if ((lv_briefingSoundtrack != null)) {
        SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, lv_briefingSoundtrack, c_soundtrackCueAny, c_soundtrackIndexAny);
    }

    libCOMI_gf_RegisterPlayers();
    libCOMI_gv_gameMode = MinI(PlayerGroupCount(libCOMI_gv_vU_SlotsPlayers), PlayerGroupCount(libCOMI_gv_vU_HumanPlayers));
    libCOMI_gf_RegisterAvailableFactions();
    libCOMI_gf_StorePreplacedUnits();
    libCOMI_gv_cM_CampaignMissionStartTrigger = lp_startTrigger;
    libCOMI_gf_CC_LoadAllTransitionData();
    libCOMI_gf_SetCurrentMap(lp_map);
    UserDataSetInt("Maps", libCOMI_gf_CC_MapUserDataInstance(libCOMI_gv_cC_CurrentMap), "IsCurrent", 1, 1);
    TransmissionSetOption(c_transmissionOptionHideAlertPanel, true);
    auto5D8F9B9D_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5D8F9B9D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, c_playerStateContinueEnabled, false);
        PlayerOptionOverride(lv_indexPlayer, "simplecommandcard", "0");
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInLeaderPanel, false);
            PlayerSetState(lv_indexPlayer, c_playerStateDisplayInViewMenu, false);
            PlayerSetState(lv_indexPlayer, c_playerStateShowScore, false);
        }

    }
    libCOMI_gf_CC_InitNonDefeatedPlayers();
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAbortButton, false);
    libCOMI_gf_CreateGameBriefingRoom();
}

void libCOMI_gf_ApplyMissionTime () {
    // Variable Declarations
    string lv_time;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_time = UserDataGetString("MissionSettings", "CurrentMission", "Time", 1);

    // Implementation
    if ((lv_time != null)) {
        GameTimeOfDaySet(lv_time);
    }
    else {
        GameTimeOfDaySet("08:00:00");
    }
}

void libCOMI_gf_AllowToBuildOnCreep (int lp_player, bool lp_allow) {
    // Variable Declarations
    string lv_entry;
    string lv_value;

    // Automatic Variable Declarations
    int auto1B727854_ae;
    int auto1B727854_var;

    // Variable Initialization
    lv_value = "";

    // Implementation
    auto1B727854_ae = CatalogEntryCount(c_gameCatalogFootprint);
    auto1B727854_var = 1;
    for ( ; auto1B727854_var <= auto1B727854_ae; auto1B727854_var += 1 ) {
        lv_entry = CatalogEntryGet(c_gameCatalogFootprint, auto1B727854_var);
        if ((lp_allow == true)) {
            lv_value = "0";
        }
        else {
            lv_value = CatalogFieldValueGet(c_gameCatalogFootprint, lv_entry, "Layers[" + IntToString(0) + "].Sets[" + IntToString(0) + "].Negative[" + IntToString(c_placementTestCreepMask) + "]", c_playerAny);
        }
        CatalogFieldValueSet(c_gameCatalogFootprint, lv_entry, "Layers[" + IntToString(0) + "].Sets[" + IntToString(0) + "].Negative[" + IntToString(c_placementTestCreepMask) + "]", lp_player, lv_value);
    }
}

bool libCOMI_gf_TechUnitAvailable (int lp_player, string lp_unit) {
    // Variable Declarations
    string lv_techUnitsArrayName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_techUnitsArrayName = ("TechUnits" + IntToString(lp_player));

    // Implementation
    if ((libARRA_gf_ListStringIncludes(lv_techUnitsArrayName, (lp_unit)) == true)) {
        return true;
    }
    else {
        return false;
    }
}

void libCOMI_gf_CC_ApplyTechNew (int lp_player, int lp_player2, string lp_commander, string lp_prestige) {
    // Variable Declarations
    int lv_i;
    string lv_playerCommander;
    string lv_playerCommanderFaction;
    string lv_factionCommander;
    string lv_playerCommanderRace;
    string lv_playerPrestige;
    int lv_playerLevel;
    string lv_techInstance;
    string lv_techUpgrade;
    string lv_techUnit;
    abilcmd lv_techAbility;
    string lv_techBehavior;
    string lv_techPrestige;
    string lv_techCommander;
    int lv_techLevel;
    int lv_techValue;
    string lv_techUnitsArrayName;
    string lv_techAbilitiesArrayName;
    string lv_techDisabledAbilitiesArrayName;
    string lv_techUpgradesArrayName;
    string lv_techBehaviorsArrayName;

    // Automatic Variable Declarations
    string auto039F9621_userType;
    int auto039F9621_i;
    int auto6E31F6A3_ae;
    int auto6E31F6A3_var;
    int autoDCCFE03B_ae;
    int autoDCCFE03B_var;
    string auto18C67634_userType;
    int auto18C67634_i;
    int auto7CFBDB4F_ae;
    int auto7CFBDB4F_var;
    int autoC752E0E6_ae;
    int autoC752E0E6_var;
    int autoEA91D502_ae;
    int autoEA91D502_var;
    int auto6C48D36C_ae;
    int auto6C48D36C_var;
    int auto0852F0BF_ae;
    const int auto0852F0BF_ai = 1;
    int auto987A9276_ae;
    const int auto987A9276_ai = 1;

    // Variable Initialization
    lv_playerCommander = lp_commander;
    lv_playerCommanderFaction = UserDataGetUserInstance("Commanders", lp_commander, "Faction", 1);
    lv_factionCommander = UserDataGetGameLink("Factions", lv_playerCommanderFaction, "Console", 1);
    lv_playerCommanderRace = UserDataGetGameLink("Commanders", lp_commander, "Race", 1);
    lv_playerPrestige = lp_prestige;
    lv_playerLevel = lp_player2;
    lv_techUnitsArrayName = ("TechUnits" + IntToString(lp_player));
    lv_techAbilitiesArrayName = ("TechAbilities" + IntToString(lp_player));
    lv_techDisabledAbilitiesArrayName = ("TechDisabledAbilities" + IntToString(lp_player));
    lv_techUpgradesArrayName = ("TechUpgrades" + IntToString(lp_player));
    lv_techBehaviorsArrayName = ("TechBehaviors" + IntToString(lp_player));

    // Implementation
    TechTreeRestrictionsEnable(lp_player, true);
    TechTreeRequirementsEnable(lp_player, true);
    PlayerSetRace(lp_player, lv_playerCommanderRace);
    PlayerSetCommander(lp_player, lv_factionCommander);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CommanderLevel", lv_playerLevel);
    libARRA_gf_ListCreate(lv_techDisabledAbilitiesArrayName);
    auto039F9621_userType = "Tech";
    auto039F9621_i = 1;
    for ( ; auto039F9621_i <= UserDataInstanceCount(auto039F9621_userType) ; auto039F9621_i += 1 ) {
        lv_techInstance = UserDataInstance(auto039F9621_userType, auto039F9621_i);
        lv_techValue = UserDataGetInt("Tech", lv_techInstance, "value", 1);
        if ((lv_techValue >= 0)) {
            lv_techUpgrade = UserDataGetUpgrade("Tech", lv_techInstance, "upgrade", 1);
            if ((lv_techUpgrade != null) && (lv_techUpgrade != "NONE")) {
                TechTreeUpgradeAllow(lp_player, lv_techUpgrade, false);
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_techUpgrade, 0);
                auto6E31F6A3_ae = TechTreeUpgradeProducedAbilCmdCount(lv_techUpgrade);
                auto6E31F6A3_var = 1;
                for ( ; auto6E31F6A3_var <= auto6E31F6A3_ae; auto6E31F6A3_var += 1 ) {
                    TechTreeAbilityAllow(lp_player, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, auto6E31F6A3_var), false);
                }
            }

            lv_techUnit = UserDataGetUnit("Tech", lv_techInstance, "unit", 1);
            if ((lv_techUnit != null) && (lv_techUnit != "NONE")) {
                TechTreeUnitAllow(lp_player, lv_techUnit, false);
                autoDCCFE03B_ae = TechTreeUnitProducedAbilCmdCount(lv_techUnit);
                autoDCCFE03B_var = 1;
                for ( ; autoDCCFE03B_var <= autoDCCFE03B_ae; autoDCCFE03B_var += 1 ) {
                    TechTreeAbilityAllow(lp_player, TechTreeUnitProducedAbilCmd(lv_techUnit, autoDCCFE03B_var), false);
                }
            }

            lv_techAbility = UserDataGetAbilCmd("Tech", lv_techInstance, "ability", 1);
            if ((lv_techAbility != null)) {
                TechTreeAbilityAllow(lp_player, lv_techAbility, false);
                libARRA_gf_ListAbilCmdInclude(lv_techDisabledAbilitiesArrayName, lv_techAbility);
            }

            lv_techBehavior = UserDataGetGameLink("Tech", lv_techInstance, "behavior", 1);
            if ((lv_techBehavior != null)) {
                TechTreeBehaviorAllow(lp_player, lv_techBehavior, false);
            }

        }

    }
    auto18C67634_userType = "Tech";
    auto18C67634_i = 1;
    for ( ; auto18C67634_i <= UserDataInstanceCount(auto18C67634_userType) ; auto18C67634_i += 1 ) {
        lv_techInstance = UserDataInstance(auto18C67634_userType, auto18C67634_i);
        lv_techCommander = UserDataGetUserInstance("Tech", lv_techInstance, "commander", 1);
        lv_techPrestige = UserDataGetUserInstance("Tech", lv_techInstance, "prestige", 1);
        if (((lv_techCommander == lv_playerCommander) || (lv_techCommander == null)) && (lv_techLevel <= lv_playerLevel) && ((lv_techPrestige == null) || (lv_techPrestige == lv_playerPrestige))) {
            lv_techValue = UserDataGetInt("Tech", lv_techInstance, "value", 1);
            lv_techUpgrade = UserDataGetUpgrade("Tech", lv_techInstance, "upgrade", 1);
            if ((lv_techUpgrade != null) && (lv_techUpgrade != "NONE")) {
                if ((lv_techValue == -1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_techUpgrade, 0);
                    TechTreeUpgradeAllow(lp_player, lv_techUpgrade, false);
                    libARRA_gf_ListStringExclude(lv_techUpgradesArrayName, (lv_techUpgrade));
                    autoC752E0E6_ae = TechTreeUpgradeProducedAbilCmdCount(lv_techUpgrade);
                    autoC752E0E6_var = 1;
                    for ( ; autoC752E0E6_var <= autoC752E0E6_ae; autoC752E0E6_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techAbilitiesArrayName, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, autoC752E0E6_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, autoC752E0E6_var), false);
                        }

                    }
                }
                else {
                    TechTreeUpgradeAllow(lp_player, lv_techUpgrade, true);
                    libARRA_gf_ListStringInclude(lv_techUpgradesArrayName, (lv_techUpgrade));
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_techUpgrade, lv_techValue);
                    auto7CFBDB4F_ae = TechTreeUpgradeProducedAbilCmdCount(lv_techUpgrade);
                    auto7CFBDB4F_var = 1;
                    for ( ; auto7CFBDB4F_var <= auto7CFBDB4F_ae; auto7CFBDB4F_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techDisabledAbilitiesArrayName, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, auto7CFBDB4F_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUpgradeProducedAbilCmd(lv_techUpgrade, auto7CFBDB4F_var), true);
                        }

                    }
                }
            }

            lv_techUnit = UserDataGetUnit("Tech", lv_techInstance, "unit", 1);
            if ((lv_techUnit != null) && (lv_techUnit != "NONE")) {
                if ((lv_techValue >= 0)) {
                    TechTreeUnitAllow(lp_player, lv_techUnit, true);
                    libARRA_gf_ListStringInclude(lv_techUnitsArrayName, (lv_techUnit));
                    auto6C48D36C_ae = TechTreeUnitProducedAbilCmdCount(lv_techUnit);
                    auto6C48D36C_var = 1;
                    for ( ; auto6C48D36C_var <= auto6C48D36C_ae; auto6C48D36C_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techDisabledAbilitiesArrayName, TechTreeUnitProducedAbilCmd(lv_techUnit, auto6C48D36C_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUnitProducedAbilCmd(lv_techUnit, auto6C48D36C_var), true);
                        }

                    }
                }
                else {
                    TechTreeUnitAllow(lp_player, lv_techUnit, false);
                    libARRA_gf_ListStringExclude(lv_techUnitsArrayName, (lv_techUnit));
                    autoEA91D502_ae = TechTreeUnitProducedAbilCmdCount(lv_techUnit);
                    autoEA91D502_var = 1;
                    for ( ; autoEA91D502_var <= autoEA91D502_ae; autoEA91D502_var += 1 ) {
                        if ((libARRA_gf_ListAbilCmdIncludes(lv_techAbilitiesArrayName, TechTreeUnitProducedAbilCmd(lv_techUnit, autoEA91D502_var)) == true)) {
                            TechTreeAbilityAllow(lp_player, TechTreeUnitProducedAbilCmd(lv_techUnit, autoEA91D502_var), false);
                        }

                    }
                }
            }

            lv_techAbility = UserDataGetAbilCmd("Tech", lv_techInstance, "ability", 1);
            if ((lv_techAbility != null)) {
                if ((lv_techValue >= 0)) {
                    TechTreeAbilityAllow(lp_player, lv_techAbility, true);
                    libARRA_gf_ListAbilCmdInclude(lv_techAbilitiesArrayName, lv_techAbility);
                    libARRA_gf_ListAbilCmdExclude(lv_techDisabledAbilitiesArrayName, lv_techAbility);
                }
                else {
                    TechTreeAbilityAllow(lp_player, lv_techAbility, false);
                    libARRA_gf_ListAbilCmdExclude(lv_techAbilitiesArrayName, lv_techAbility);
                    libARRA_gf_ListAbilCmdInclude(lv_techDisabledAbilitiesArrayName, lv_techAbility);
                }
            }

            lv_techBehavior = UserDataGetGameLink("Tech", lv_techInstance, "behavior", 1);
            if ((lv_techBehavior != null)) {
                if ((lv_techValue >= 0)) {
                    TechTreeBehaviorAllow(lp_player, lv_techBehavior, true);
                    libARRA_gf_ListStringInclude(lv_techBehaviorsArrayName, (lv_techBehavior));
                }
                else {
                    TechTreeBehaviorAllow(lp_player, lv_techBehavior, false);
                    libARRA_gf_ListStringExclude(lv_techBehaviorsArrayName, (lv_techBehavior));
                }
            }

        }

    }
    if ((lv_playerPrestige != null)) {
        auto0852F0BF_ae = UserDataFieldValueCount("Prestiges", "PlayerResponses");
        lv_i = 1;
        for ( ; ( (auto0852F0BF_ai >= 0 && lv_i <= auto0852F0BF_ae) || (auto0852F0BF_ai < 0 && lv_i >= auto0852F0BF_ae) ) ; lv_i += auto0852F0BF_ai ) {
            libCOMI_gf_CC_PlayerResponseEnable(lp_player, UserDataGetUserInstance("Prestiges", lv_playerPrestige, "PlayerResponses", lv_i), true);
        }
        auto987A9276_ae = UserDataFieldValueCount("Prestiges", "ZZ_UpgradeSupplements");
        lv_i = 1;
        for ( ; ( (auto987A9276_ai >= 0 && lv_i <= auto987A9276_ae) || (auto987A9276_ai < 0 && lv_i >= auto987A9276_ae) ) ; lv_i += auto987A9276_ai ) {
            libCOMI_gf_CC_ApplyUpgradeSupplemental(lp_player, UserDataGetUserInstance("Prestiges", lv_playerPrestige, "ZZ_UpgradeSupplements", lv_i));
        }
    }

    libCOMI_gf_CC_ApplyMasteryTech(lp_player);
    libARRA_gf_ListDestroy(lv_techDisabledAbilitiesArrayName);
    TechTreeAbilityAllow(lp_player, AbilityCommand("OrbitalCommandSupplyDepotDrop", 0), false);
}

void libCOMI_gf_CC_PlayerResponseEnable (int lp_player, string lp_response, bool lp_enforceMinLvl) {
    // Variable Declarations
    int lv_ally;
    playergroup lv_allygroup;

    // Automatic Variable Declarations
    playergroup auto19EDC5B2_g;

    // Variable Initialization
    lv_allygroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_enforceMinLvl == true) && (libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player)) < UserDataGetInt("PlayerResponse", lp_response, "MinLvl", 1))) {
        return ;
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Self", 1) == 1)) {
        PlayerAddResponse(lp_player, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
    }

    if ((UserDataGetInt("PlayerResponse", lp_response, "Ally", 1) == 1)) {
        lv_allygroup = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        PlayerGroupRemove(lv_allygroup, lp_player);
        auto19EDC5B2_g = lv_allygroup;
        lv_ally = -1;
        while (true) {
            lv_ally = PlayerGroupNextPlayer(auto19EDC5B2_g, lv_ally);
            if (lv_ally < 0) { break; }
            PlayerAddResponse(lv_ally, UserDataGetGameLink("PlayerResponse", lp_response, "Response", 1));
        }
    }

}

string libCOMI_gf_CC_CommanderPrestigeIndexFace (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "PrestigeArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "PrestigeArray[" + IntToString((lp_index - 1)) + "]", c_playerAny);
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_prestigefacestring) == true)) {
            return (lv_prestigefacestring);
        }

    }

    if ((lp_index == 0)) {
        return "CommanderPrestige";
    }
    else {
        return null;
    }
}

int libCOMI_gf_CC_PlayerActivePrestigeIndex (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerPrestigeIndex[lp_player];
}

string libCOMI_gf_CC_PlayerActivePrestigeInstance (int lp_player) {
    // Variable Declarations
    string lv_commander;
    string lv_commander2;
    int lv_commander3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander = libCOMI_gf_ActiveCommanderForPlayer(lp_player);

    // Implementation
    if ((lv_commander != null)) {
        lv_commander3 = libCOMI_gf_CC_PlayerActivePrestigeIndex(lp_player);
        return UserDataGetUserInstance("Commanders", lv_commander, "Prestige", lv_commander3);
    }

    return null;
}

string libCOMI_gf_CC_PrestigeCommanderTableKey (string lp_commander, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return ("PRESTIGE" + "_" + IntToString(lp_player) + "_" + (lp_commander));
}

void libCOMI_gf_CC_SetPlayerPrestigeIndex (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerPrestigeIndex[lp_player] = libNtve_gf_ArithmeticIntClamp(lp_index, 0, libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK);
}

int libCOMI_gf_CC_PlayerMasteryLevel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerMasteryLevel[lp_player];
}

int libCOMI_gf_CC_PlayerMasteryCategory (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "Category", 1);
}

int libCOMI_gf_CC_PlayerMasteryCategoryPointsAtLevel (int lp_player, int lp_categoryIndex, int lp_level) {
    // Variable Declarations
    int lv_categoryPoints;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_categoryPoints = (lp_level / libCOMI_gv_cCC_MASTERY_CATEGORIES);
    if ((ModI(lp_level, libCOMI_gv_cCC_MASTERY_CATEGORIES) >= lp_categoryIndex)) {
        lv_categoryPoints += 1;
    }

    return lv_categoryPoints;
}

int libCOMI_gf_CC_PlayerMasteryCategoryPointsSpent (int lp_player, int lp_categoryIndex) {
    // Variable Declarations
    int lv_pointsSpent;
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto069D912F_ai;
    int auto069D912F_ae;
    int auto069D912F_ac;

    // Variable Initialization

    // Implementation
    auto069D912F_ai = 0;
    auto069D912F_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto069D912F_ai < auto069D912F_ae) {
        auto069D912F_ai = auto069D912F_ai+1;
        auto069D912F_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto069D912F_ai), "Category", 1);
        if( auto069D912F_ac == lp_categoryIndex &&
        libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto069D912F_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto069D912F_ai);
            lv_pointsSpent += libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade);
        }    
    }
    return lv_pointsSpent;
}

int libCOMI_gf_CC_PlayerMasteryCategoryPointsAvailable (int lp_player, int lp_categoryIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gf_CC_PlayerMasteryCategoryPointsAtLevel(lp_player, lp_categoryIndex, 0) - libCOMI_gf_CC_PlayerMasteryCategoryPointsSpent(lp_player, lp_categoryIndex));
}

int libCOMI_gf_CC_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

string libCOMI_gf_CC_PlayerMasteryCommander (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("MasteryUpgrades", lp_masteryUpgrade, "Commander", 1);
}

string libCOMI_gf_CC_PlayerMasteryUpgradeData (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUpgrade("MasteryUpgrades", lp_masteryUpgrade, "Upgrade", 1);
}

string libCOMI_gf_CC_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

int libCOMI_gf_CC_PlayerMasteryInternalIndex (string lp_masteryUpgrade) {
    // Variable Declarations
    int lv_internalIndex;
    int lv_talentIndex;

    // Automatic Variable Declarations
    int auto24ADA236_ae;
    const int auto24ADA236_ai = 1;

    // Variable Initialization

    // Implementation
    if ((lp_masteryUpgrade == null)) {
        return 0;
    }

    lv_internalIndex = UserDataGetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1);
    if ((lv_internalIndex == 0)) {
        auto24ADA236_ae = (CatalogFieldValueCount(c_gameCatalogCommander, libCOMI_gf_CC_CommanderData(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray", c_playerAny)-1);
        lv_talentIndex = 0;
        for ( ; ( (auto24ADA236_ai >= 0 && lv_talentIndex <= auto24ADA236_ae) || (auto24ADA236_ai < 0 && lv_talentIndex >= auto24ADA236_ae) ) ; lv_talentIndex += auto24ADA236_ai ) {
            lv_internalIndex += 1;
            if (((CatalogFieldValueGet(c_gameCatalogCommander, libCOMI_gf_CC_CommanderData(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade)), "MasteryTalentArray[" + IntToString(lv_talentIndex) + "].Talent", c_playerAny)) == libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade))) {
                UserDataSetInt("MasteryUpgrades", lp_masteryUpgrade, "InternalIndex", 1, lv_internalIndex);
                return lv_internalIndex;
                break;
            }

        }
    }
    else {
        return lv_internalIndex;
    }
    return 0;
}

text libCOMI_gf_CC_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", c_playerAny));
}

text libCOMI_gf_CC_PlayerMasteryTooltip (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Tooltip", c_playerAny));
}

text libCOMI_gf_CC_PlayerMasteryValueFormat (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("MasteryUpgrades", lp_masteryUpgrade, "ValueFormat", 1);
}

fixed libCOMI_gf_CC_PlayerMasteryValueIncrement (string lp_masteryUpgrade, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MasteryUpgrades", lp_masteryUpgrade, "PointIncrement", lp_index);
}

bool libCOMI_gf_CC_PlayerMasteryEnabled (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cC_PlayerMasteryEnabled[lp_player];
}

void libCOMI_gf_CC_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
    libCOMI_gf_CC_ScoreValueSet(lp_player, (("MasteryPoints" + IntToString(libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)))), lp_level);
}

void libCOMI_gf_CC_PlayerMasteryLevelSet (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerMasteryLevel[lp_player] = lp_level;
}

void libCOMI_gf_CC_PlayerMasteryEnabledSet (int lp_player, bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cC_PlayerMasteryEnabled[lp_player] = lp_enabled;
}

void libCOMI_gf_CC_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int auto73C199C1_ai;
    int auto73C199C1_ae;
    int auto73C199C1_ac;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cC_PlayerMasteryEnabled[lp_player] == false)) {
        return ;
    }

    auto73C199C1_ai = 0;
    auto73C199C1_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto73C199C1_ai < auto73C199C1_ae) {
        auto73C199C1_ai = auto73C199C1_ai+1;
        auto73C199C1_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto73C199C1_ai), "Category", 1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto73C199C1_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto73C199C1_ai);
            if ((libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libCOMI_gf_CC_SharedUpgradesEnable () {
    // Variable Declarations
    string lv_indexSharedUpgrade;

    // Automatic Variable Declarations
    int auto13331E50_ai;
    int auto13331E50_ae;

    // Variable Initialization

    // Implementation
    auto13331E50_ai = 1;
    auto13331E50_ae = UserDataInstanceCount("SharedUpgrades")+1;
    while (auto13331E50_ai < auto13331E50_ae) {
        lv_indexSharedUpgrade = UserDataInstance("SharedUpgrades", auto13331E50_ai);
        auto13331E50_ai = auto13331E50_ai+1;
        if ((UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1) != null)) {
            libCOMI_gf_CC_SharedUpgradesCheckAndApply(UserDataGetUpgrade("SharedUpgrades", lv_indexSharedUpgrade, "Upgrade", 1));
        }

    }
}

void libCOMI_gf_CC_SharedUpgradesCheckAndApply (string lp_checkUpgrade) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itPlayerApplyTarget;

    // Automatic Variable Declarations
    playergroup auto7B79B30F_g;
    playergroup auto46C6D368_g;

    // Variable Initialization

    // Implementation
    auto7B79B30F_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto7B79B30F_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) >= 1)) {
            auto46C6D368_g = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_itPlayer);
            lv_itPlayerApplyTarget = -1;
            while (true) {
                lv_itPlayerApplyTarget = PlayerGroupNextPlayer(auto46C6D368_g, lv_itPlayerApplyTarget);
                if (lv_itPlayerApplyTarget < 0) { break; }
                if ((TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly) > TechTreeUpgradeCount(lv_itPlayerApplyTarget, lp_checkUpgrade, c_techCountCompleteOnly))) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayerApplyTarget, lp_checkUpgrade, TechTreeUpgradeCount(lv_itPlayer, lp_checkUpgrade, c_techCountCompleteOnly));
                }

            }
        }

    }
}

void libCOMI_gf_CC_ApplyUpgradeSupplemental (int lp_player, string lp_upgradeSupplemental) {
    // Variable Declarations
    string lv_upgrade;
    string lv_supplement;
    string lv_script;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_upgrade = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Upgrade", 1);
    lv_supplement = UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lp_upgradeSupplemental, "Supplement", 1);
    lv_script = "";

    // Implementation
    if ((lp_upgradeSupplemental != null) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_upgrade) == true) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_supplement) == true) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly) > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_supplement, TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountCompleteOnly));
    }

}

void libCOMI_gf_CM_CoopAI_CacheUpgradeData (int lp_player, int lp_difficulty) {
    // Variable Declarations
    int lv_upgradeIter;
    string lv_faction;
    int lv_i;
    int lv_factionCommanderIter;
    int lv_k;
    string lv_coopAIUpgrade;
    string lv_upgrade;
    string lv_coopAILevelUpgrade;
    string lv_commader;
    string lv_commaderFaction;
    int lv_totalUpgrades;
    int lv_totalLevelUpgrades;
    fixed lv_time;
    int lv_activeUpgrades;

    // Automatic Variable Declarations
    int auto4D34C418_ae;
    const int auto4D34C418_ai = 1;
    int autoA719D967_ae;
    int autoA719D967_var;
    int auto93DD5DF8_ae;
    const int auto93DD5DF8_ai = 1;

    // Variable Initialization
    lv_commader = libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player];
    lv_commaderFaction = UserDataGetUserInstance("Compositions", lv_commader, "Faction", 1);
    lv_totalUpgrades = UserDataInstanceCount("CoopAIUpgrade");
    lv_totalLevelUpgrades = UserDataInstanceCount("CoopAILevelUpgrades");

    // Implementation
    auto4D34C418_ae = lv_totalLevelUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto4D34C418_ai >= 0 && lv_upgradeIter <= auto4D34C418_ae) || (auto4D34C418_ai < 0 && lv_upgradeIter >= auto4D34C418_ae) ) ; lv_upgradeIter += auto4D34C418_ai ) {
        lv_coopAILevelUpgrade = UserDataInstance("CoopAILevelUpgrades", lv_upgradeIter);
        lv_faction = UserDataGetUserInstance("CoopAILevelUpgrades", lv_coopAILevelUpgrade, "Faction", 1);
        if ((lv_faction != null) && (lv_faction != lv_commaderFaction)) {
            continue;
        }

        autoA719D967_ae = UserDataFieldValueCount("CoopAILevelUpgrades", "Upgrade");
        autoA719D967_var = 1;
        for ( ; autoA719D967_var <= autoA719D967_ae; autoA719D967_var += 1 ) {
            lv_upgrade = UserDataGetUpgrade("CoopAILevelUpgrades", lv_coopAILevelUpgrade, "Upgrade", autoA719D967_var);
            lv_time = UserDataGetFixed("CoopAILevelUpgradesTimings", UserDataInstance("CoopAILevelUpgradesTimings", autoA719D967_var), "TimePerDifficult", lp_difficulty);
            if ((lv_time < 0.0)) {
                continue;
            }

            if ((lv_activeUpgrades >= libCOMI_gv_cMC_CoopAI_MaxNumUpgrades)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_4A925500"), true);
                break;
            }
            else {
                lv_activeUpgrades += 1;
                libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_activeUpgrades] = lv_time;
                libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_activeUpgrades] = lv_upgrade;
            }
        }
    }
    auto93DD5DF8_ae = lv_totalUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto93DD5DF8_ai >= 0 && lv_upgradeIter <= auto93DD5DF8_ae) || (auto93DD5DF8_ai < 0 && lv_upgradeIter >= auto93DD5DF8_ae) ) ; lv_upgradeIter += auto93DD5DF8_ai ) {
        lv_coopAIUpgrade = UserDataInstance("CoopAIUpgrade", lv_upgradeIter);
        lv_faction = UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Faction", 1);
        if ((lv_faction != null) && (lv_faction != lv_commaderFaction)) {
            continue;
        }

        lv_time = UserDataGetFixed("CoopAIUpgrade", lv_coopAIUpgrade, "TimePerDifficult", lp_difficulty);
        if ((lv_time < 0.0)) {
            continue;
        }

        if ((UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Exclusive", 1) != null) && (UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Exclusive", 1) != "None") && (UserDataGetUserInstance("CoopAIUpgrade", lv_coopAIUpgrade, "Exclusive", 1) != lv_commader)) {
            continue;
        }

        if ((lv_activeUpgrades >= libCOMI_gv_cMC_CoopAI_MaxNumUpgrades)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_CDE8D4FE"), true);
            break;
        }
        else {
            lv_activeUpgrades += 1;
            libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_activeUpgrades] = lv_time;
            libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_activeUpgrades] = UserDataGetUpgrade("CoopAIUpgrade", lv_coopAIUpgrade, "Upgrade", 1);
        }
    }
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades = lv_activeUpgrades;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized = true;
    libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty = lp_difficulty;
}

void libCOMI_gf_CM_CoopAI_Upgrades (int lp_player) {
    // Variable Declarations
    int lv_upgradeIter;
    fixed lv_time;
    string lv_upgrade;
    int lv_difficulty;
    int lv_exclusiveCommanderIter;

    // Automatic Variable Declarations
    int auto56C5C2AA_ae;
    const int auto56C5C2AA_ai = 1;
    int auto3A3C35EB_ae;
    const int auto3A3C35EB_ai = 1;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    if (((libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_initialized == false) || (libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_cachedDifficulty != lv_difficulty))) {
        libCOMI_gf_CM_CoopAI_CacheUpgradeData(lp_player, lv_difficulty);
    }

    auto56C5C2AA_ae = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_numUpgrades;
    lv_upgradeIter = 1;
    for ( ; ( (auto56C5C2AA_ai >= 0 && lv_upgradeIter <= auto56C5C2AA_ae) || (auto56C5C2AA_ai < 0 && lv_upgradeIter >= auto56C5C2AA_ae) ) ; lv_upgradeIter += auto56C5C2AA_ai ) {
        lv_upgrade = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_upgrade[lv_upgradeIter];
        lv_time = libCOMI_gv_cM_CoopAI_CachedUpgradeData[lp_player].lv_time[lv_upgradeIter];
        if ((lv_time >= 0.0) && (lv_time < GameGetMissionTime()) && (TechTreeUpgradeCount(lp_player, lv_upgrade, c_techCountQueuedOrBetter) == 0)) {
            auto3A3C35EB_ae = UserDataFieldValueCount("CoopAIUpgrade", "Exclusive");
            lv_exclusiveCommanderIter = 1;
            for ( ; ( (auto3A3C35EB_ai >= 0 && lv_exclusiveCommanderIter <= auto3A3C35EB_ae) || (auto3A3C35EB_ai < 0 && lv_exclusiveCommanderIter >= auto3A3C35EB_ae) ) ; lv_exclusiveCommanderIter += auto3A3C35EB_ai ) {
                if (((UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "Exclusive", lv_exclusiveCommanderIter) == null) || (UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "Exclusive", lv_exclusiveCommanderIter) == "None") || (UserDataGetUserInstance("CoopAIUpgrade", UserDataInstance("CoopAIUpgrade", lv_upgradeIter), "Exclusive", lv_exclusiveCommanderIter) == libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player]))) {
                    TechTreeUpgradeAddLevel(lp_player, lv_upgrade, 1);
                    break;
                }

            }
        }

    }
}

void libCOMI_gf_CM_MasteryResearchCostReduction (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint) {
    // Variable Declarations
    string lv_ability;
    int lv_i;
    int lv_costMinerals;
    int lv_costVespene;
    int lv_upgradeCount;
    fixed lv_r;

    // Automatic Variable Declarations
    int auto0FE65364_ae;
    int auto0FE65364_ai;
    const int auto6642A659_ae = 29;
    const int auto6642A659_ai = 1;

    // Variable Initialization
    lv_upgradeCount = TechTreeUpgradeCount(lp_player, lp_masteryUpgrade, c_techCountCompleteOnly);

    // Implementation
    auto0FE65364_ae = CatalogEntryCount(c_gameCatalogAbil);
    auto0FE65364_ai = 1;
    while (auto0FE65364_ai <= auto0FE65364_ae) {
        lv_ability = CatalogEntryGet(c_gameCatalogAbil, auto0FE65364_ai);
        auto0FE65364_ai = auto0FE65364_ai + 1;
        if ((AbilityClass(lv_ability) == c_classIdCAbilResearch)) {
            lv_i = 0;
            for ( ; ( (auto6642A659_ai >= 0 && lv_i <= auto6642A659_ae) || (auto6642A659_ai < 0 && lv_i >= auto6642A659_ae) ) ; lv_i += auto6642A659_ai ) {
                lv_costMinerals = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL);
                lv_costVespene = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", libCOMI_gv_vU_PLAYER_NEUTRAL);
                if (((lv_costMinerals > 0) || (lv_costVespene > 0))) {
                    lv_r = (100.0 - (lv_upgradeCount * lp_percentReductionPerPoint));
                    lv_costMinerals = FixedToInt(RoundI(((lv_costMinerals * lv_r) / 100.0)));
                    lv_costVespene = FixedToInt(RoundI(((lv_costVespene * lv_r) / 100.0)));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(0) + "]", lp_player, IntToString(lv_costMinerals));
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_i) + "].Resource[" + IntToString(1) + "]", lp_player, IntToString(lv_costVespene));
                }

            }
        }

    }
}

void libCOMI_gf_PlayersandAllienceSettings () {
    // Variable Declarations
    int lv_player;
    int lv_chosenPlyer;
    int lv_teamIndex;

    // Automatic Variable Declarations
    playergroup auto3C872793_g;
    playergroup auto0BE22A83_g;
    playergroup autoAFF8CCC7_g;
    int autoAFF8CCC7_var;
    playergroup auto1A11DCE8_g;
    playergroup auto3AA67E67_g;
    int auto3AA67E67_var;
    playergroup autoA14B3FB7_g;
    int autoA14B3FB7_var;
    playergroup auto019EE0A4_g;
    int auto019EE0A4_var;
    playergroup autoFB2244D6_g;
    int autoFB2244D6_var;
    playergroup autoDD8C7461_g;
    playergroup auto7F3B4A0E_g;
    playergroup auto94C6747B_g;
    playergroup autoF08381C5_g;
    playergroup auto075016DE_g;
    playergroup auto1412CFF6_g;
    int auto1412CFF6_var;
    playergroup auto2C44AD1F_g;
    int auto2C44AD1F_var;

    // Variable Initialization

    // Implementation
    auto3C872793_g = libCOMI_gv_vU_AllyNPC;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto3C872793_g, lv_player);
        if (lv_player < 0) { break; }
    }
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Neutral);
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_HostileNPC, libNtve_ge_AllianceSetting_Enemy);
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_Enemies, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_Enemies, c_allianceIdPower, true);
    libCOMI_gf_SetPlayerGroupAlliance(libCOMI_gv_vU_Allies, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_Allies, c_allianceIdPower, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), c_allianceIdTrade, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_EnemyPlayers, c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceAspectForPlayerGroup(libCOMI_gv_vU_EnemyPlayers, c_allianceIdDefeat, true);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_Enemies, libCOMI_gv_vU_Allies, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_Enemies, libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_Allies, libCOMI_gv_vU_Enemies, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gf_GetAlliedCommandersPlayers(), libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_AllyNPC, libCOMI_gv_vU_BonusNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_BonusNPC, libCOMI_gv_vU_Enemies, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_BonusNPC, libCOMI_gv_vU_AllyNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_BonusNPC, libCOMI_gf_GetAlliedCommandersPlayers(), libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_vU_NeutralNPC, libCOMI_gv_all, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_all, libCOMI_gv_vU_NeutralNPC, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(libCOMI_gv_all, libCOMI_gv_vU_HostileNPC, libNtve_ge_AllianceSetting_Enemy);
    auto0BE22A83_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0BE22A83_g, lv_player);
        if (lv_player < 0) { break; }
        autoAFF8CCC7_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoAFF8CCC7_var = -1;
        while (true) {
            autoAFF8CCC7_var = PlayerGroupNextPlayer(autoAFF8CCC7_g, autoAFF8CCC7_var);
            if (autoAFF8CCC7_var < 0) { break; }
            if ((lv_player != autoAFF8CCC7_var)) {
                if ((PlayerType(autoAFF8CCC7_var) == c_playerTypeUser)) {
                    libCOMI_gf_SetAllianceOneWayCoop(lv_player, autoAFF8CCC7_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                else {
                    libCOMI_gf_SetAllianceOneWayCoop(lv_player, autoAFF8CCC7_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }
                if ((PlayerType(lv_player) == c_playerTypeUser)) {
                    libCOMI_gf_SetAllianceOneWayCoop(autoAFF8CCC7_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                else {
                    libCOMI_gf_SetAllianceOneWayCoop(autoAFF8CCC7_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
                }
            }

        }
    }
    auto1A11DCE8_g = libCOMI_gv_vU_EnemyAI;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto1A11DCE8_g, lv_player);
        if (lv_player < 0) { break; }
        auto3AA67E67_g = libCOMI_gv_vU_EnemyAI;
        auto3AA67E67_var = -1;
        while (true) {
            auto3AA67E67_var = PlayerGroupNextPlayer(auto3AA67E67_g, auto3AA67E67_var);
            if (auto3AA67E67_var < 0) { break; }
            if ((lv_player != auto3AA67E67_var)) {
                libNtve_gf_SetAlliance(lv_player, auto3AA67E67_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                libNtve_gf_SetAlliance(auto3AA67E67_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
            }

        }
        autoA14B3FB7_g = libCOMI_gv_vU_EnemyPlayers;
        autoA14B3FB7_var = -1;
        while (true) {
            autoA14B3FB7_var = PlayerGroupNextPlayer(autoA14B3FB7_g, autoA14B3FB7_var);
            if (autoA14B3FB7_var < 0) { break; }
            if ((lv_player != autoA14B3FB7_var)) {
                libNtve_gf_SetAlliance(lv_player, autoA14B3FB7_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
                libNtve_gf_SetAlliance(autoA14B3FB7_var, lv_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
            }

        }
    }
    auto019EE0A4_g = libCOMI_gv_vU_EnemyPlayers;
    auto019EE0A4_var = -1;
    while (true) {
        auto019EE0A4_var = PlayerGroupNextPlayer(auto019EE0A4_g, auto019EE0A4_var);
        if (auto019EE0A4_var < 0) { break; }
        PlayerSetState(auto019EE0A4_var, c_playerStateFoodIgnored, true);
    }
    autoFB2244D6_g = libCOMI_gv_vU_Enemies;
    autoFB2244D6_var = -1;
    while (true) {
        autoFB2244D6_var = PlayerGroupNextPlayer(autoFB2244D6_g, autoFB2244D6_var);
        if (autoFB2244D6_var < 0) { break; }
        PlayerSetState(autoFB2244D6_var, c_playerStateFoodIgnored, true);
    }
    autoDD8C7461_g = libCOMI_gv_vU_EnemyAI;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoDD8C7461_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetState(lv_player, c_playerStateFoodIgnored, true);
        PlayerSetState(lv_player, c_playerStateMineralCostIgnored, true);
        PlayerSetState(lv_player, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lv_player, c_playerStateCustomCostIgnored, true);
        PlayerSetState(lv_player, c_playerStateTerrazineCostIgnored, true);
        PlayerSetColorIndex(lv_player, libCOMI_gf_EnemyPlayerColor(), true);
    }
    auto7F3B4A0E_g = libCOMI_gv_vU_BonusNPC;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto7F3B4A0E_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetColorIndex(lv_player, libCOMI_gf_EnemyPlayerColor(), true);
    }
    auto94C6747B_g = libCOMI_gv_vU_AllyNPC;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto94C6747B_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerSetColorIndex(lv_player, libCOMI_gf_AllyPlayerColor(), true);
    }
    autoF08381C5_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF08381C5_g, lv_player);
        if (lv_player < 0) { break; }
        if (((PlayerStatus(lv_player) == c_playerStatusLeft) || (PlayerType(lv_player) == c_playerTypeNone))) {
            libNtve_gf_SetAllianceBetweenTwoPlayerGroups(PlayerGroupSingle(lv_player), libCOMI_gf_GetTeammates(lv_player), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }

    }
    auto075016DE_g = libCOMI_gv_all;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto075016DE_g, lv_player);
        if (lv_player < 0) { break; }
        libNtve_gf_SetAlliance(lv_player, libCOMI_gv_vU_PLAYER_NEUTRAL, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAlliance(libCOMI_gv_vU_PLAYER_NEUTRAL, lv_player, libNtve_ge_AllianceSetting_Neutral);
        if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_player) == false)) {
            libNtve_gf_SetAlliance(lv_player, libCOMI_gv_vU_PLAYER_HOSTILE, libNtve_ge_AllianceSetting_Neutral);
            libNtve_gf_SetAlliance(libCOMI_gv_vU_PLAYER_HOSTILE, lv_player, libNtve_ge_AllianceSetting_Neutral);
        }

    }
    auto1412CFF6_g = libCOMI_gf_GetAlliesPlayers();
    auto1412CFF6_var = -1;
    while (true) {
        auto1412CFF6_var = PlayerGroupNextPlayer(auto1412CFF6_g, auto1412CFF6_var);
        if (auto1412CFF6_var < 0) { break; }
        PlayerGroupAdd(libARRA_gv_teams[1], auto1412CFF6_var);
    }
    auto2C44AD1F_g = PlayerGroupAll();
    auto2C44AD1F_var = -1;
    while (true) {
        auto2C44AD1F_var = PlayerGroupNextPlayer(auto2C44AD1F_g, auto2C44AD1F_var);
        if (auto2C44AD1F_var < 0) { break; }
        if ((auto2C44AD1F_var == 0)) {
            PlayerGroupAdd(libARRA_gv_teams[0], auto2C44AD1F_var);
        }
        else if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliesPlayers(), auto2C44AD1F_var) == true)) {
            PlayerGroupAdd(libARRA_gv_teams[1], auto2C44AD1F_var);
        }
        else if ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), auto2C44AD1F_var) == true)) {
            PlayerGroupAdd(libARRA_gv_teams[2], auto2C44AD1F_var);
        }
        else if (true) {
            PlayerGroupAdd(libARRA_gv_teams[3], auto2C44AD1F_var);
        }
    }
}

void libCOMI_gf_ShareVisionAmongPlayers (playergroup lp_players) {
    // Variable Declarations
    int lv_indexPlayer1;
    int lv_indexPlayer2;

    // Automatic Variable Declarations
    playergroup autoE1FC9780_g;
    playergroup auto201B96D5_g;

    // Variable Initialization

    // Implementation
    autoE1FC9780_g = lp_players;
    lv_indexPlayer1 = -1;
    while (true) {
        lv_indexPlayer1 = PlayerGroupNextPlayer(autoE1FC9780_g, lv_indexPlayer1);
        if (lv_indexPlayer1 < 0) { break; }
        auto201B96D5_g = lp_players;
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(auto201B96D5_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdVision, lv_indexPlayer2, true);
            }

        }
    }
}

void libCOMI_gf_SetAllianceCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_SetAlliance(lp_sourcePlayer, lp_targetPlayer, lp_alliance);
    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_sourcePlayer) == true) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_targetPlayer) == false)) {
        lv_humanPlayer = lp_sourcePlayer;
        lv_aIPlayer = lp_targetPlayer;
    }
    else if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_sourcePlayer) == false) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_targetPlayer) == true)) {
        lv_humanPlayer = lp_targetPlayer;
        lv_aIPlayer = lp_sourcePlayer;
    }
    else if (true) {
        return ;
    }
    if ((PlayerGetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer) == true)) {
        PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lv_aIPlayer, c_allianceIdVision, lv_humanPlayer, false);
        }

    }
    else {
        PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lv_humanPlayer], lv_aIPlayer);
    }
}

void libCOMI_gf_SetAllianceOneWayCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Automatic Variable Declarations
    int auto9570F556_val;

    // Implementation
    if ((lp_sourcePlayer != lp_targetPlayer)) {
        libNtve_gf_ClearAlliance(lp_sourcePlayer, lp_targetPlayer);
        libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, false);
        auto9570F556_val = lp_alliance;
        if (auto9570F556_val == libNtve_ge_AllianceSetting_Ally) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVision) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Neutral) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVision) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_Enemy) {
        }
        else if (auto9570F556_val == libNtve_ge_AllianceSetting_EnemyWithSharedVision) {
            libCOMI_gf_SetAllianceAspectCoop(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else {
        }
    }

}

void libCOMI_gf_SetAllianceAspectCoop (int lp_inSourcePlayer, int lp_inAllianceId, int lp_inTargetPlayer, bool lp_ally) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_inAllianceId != c_allianceIdVision)) {
        PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
        return ;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_inSourcePlayer) == false) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_inTargetPlayer) == true)) {
        if ((lp_ally == true)) {
            PlayerGroupAdd(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        else {
            PlayerGroupRemove(libCOMI_gv_cM_SharedVisionPlayers[lp_inTargetPlayer], lp_inSourcePlayer);
        }
        if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
            PlayerSetAlliance(lp_inSourcePlayer, c_allianceIdVision, lp_inTargetPlayer, false);
            return ;
        }

    }

    PlayerSetAlliance(lp_inSourcePlayer, lp_inAllianceId, lp_inTargetPlayer, lp_ally);
}

void libCOMI_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance) {
    // Variable Declarations
    int lv_player1;
    int lv_player2;

    // Automatic Variable Declarations
    playergroup auto8B275F3C_g;
    playergroup auto764B97E8_g;

    // Variable Initialization

    // Implementation
    auto8B275F3C_g = lp_players;
    lv_player1 = -1;
    while (true) {
        lv_player1 = PlayerGroupNextPlayer(auto8B275F3C_g, lv_player1);
        if (lv_player1 < 0) { break; }
        auto764B97E8_g = lp_players;
        lv_player2 = -1;
        while (true) {
            lv_player2 = PlayerGroupNextPlayer(auto764B97E8_g, lv_player2);
            if (lv_player2 < 0) { break; }
            if ((lv_player1 != lv_player2)) {
                libCOMI_gf_SetAllianceOneWayCoop(lv_player1, lv_player2, lp_alliance);
            }

        }
    }
}

void libCOMI_gf_CM_RestorePlayerVision () {
    // Automatic Variable Declarations
}

void libCOMI_gf_SetPlayerColors () {
    int init_i;

    // Variable Declarations
    int lv_enemyPlayers;
    int[9] lv_enemyPlayersColors;

    // Automatic Variable Declarations
    playergroup auto891FF788_g;
    int auto891FF788_var;
    playergroup autoBAA07AA5_g;
    int autoBAA07AA5_var;
    playergroup auto64551B50_g;
    int auto64551B50_var;
    string auto0179D2A8_val;

    // Variable Initialization
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_enemyPlayersColors[init_i] = 1;
    }

    // Implementation
    lv_enemyPlayersColors[1] = 14;
    lv_enemyPlayersColors[2] = 10;
    lv_enemyPlayersColors[3] = 15;
    lv_enemyPlayersColors[4] = 9;
    auto891FF788_g = libCOMI_gf_GetEnemyPlayers();
    auto891FF788_var = -1;
    while (true) {
        auto891FF788_var = PlayerGroupNextPlayer(auto891FF788_g, auto891FF788_var);
        if (auto891FF788_var < 0) { break; }
        lv_enemyPlayers += 1;
        PlayerSetColorIndex(auto891FF788_var, lv_enemyPlayersColors[lv_enemyPlayers], true);
    }
    lv_enemyPlayers = 0;
    autoBAA07AA5_g = libCOMI_gf_GetEnemyHumanPlayers();
    autoBAA07AA5_var = -1;
    while (true) {
        autoBAA07AA5_var = PlayerGroupNextPlayer(autoBAA07AA5_g, autoBAA07AA5_var);
        if (autoBAA07AA5_var < 0) { break; }
        lv_enemyPlayers += 1;
        PlayerSetColorIndex(autoBAA07AA5_var, lv_enemyPlayersColors[lv_enemyPlayers], true);
    }
    auto64551B50_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto64551B50_var = -1;
    while (true) {
        auto64551B50_var = PlayerGroupNextPlayer(auto64551B50_g, auto64551B50_var);
        if (auto64551B50_var < 0) { break; }
        auto0179D2A8_val = UserDataGetUserInstance("Commanders", libCOMI_gv_cCX_PlayerCommander[auto64551B50_var], "Color", 1);
        if (auto0179D2A8_val == "Aquamarine") {
            libCOMI_gv_playerColor[auto64551B50_var] = 7;
        }
        else if (auto0179D2A8_val == "Blue") {
            libCOMI_gv_playerColor[auto64551B50_var] = 2;
        }
        else if (auto0179D2A8_val == "Lavender") {
            libCOMI_gv_playerColor[auto64551B50_var] = 8;
        }
        else if (auto0179D2A8_val == "Magenta") {
            libCOMI_gv_playerColor[auto64551B50_var] = 15;
        }
        else if (auto0179D2A8_val == "Mengsk") {
            libCOMI_gv_playerColor[auto64551B50_var] = 16;
        }
        else if (auto0179D2A8_val == "Navy") {
            libCOMI_gv_playerColor[auto64551B50_var] = 13;
        }
        else if (auto0179D2A8_val == "Orange") {
            libCOMI_gv_playerColor[auto64551B50_var] = 6;
        }
        else if (auto0179D2A8_val == "Purple") {
            libCOMI_gv_playerColor[auto64551B50_var] = 4;
        }
        else if (auto0179D2A8_val == "Red") {
            libCOMI_gv_playerColor[auto64551B50_var] = 1;
        }
        else if (auto0179D2A8_val == "Rose") {
            libCOMI_gv_playerColor[auto64551B50_var] = 11;
        }
        else if (auto0179D2A8_val == "Sangria") {
            libCOMI_gv_playerColor[auto64551B50_var] = 14;
        }
        else if (auto0179D2A8_val == "Silver") {
            libCOMI_gv_playerColor[auto64551B50_var] = 12;
        }
        else if (auto0179D2A8_val == "Teal") {
            libCOMI_gv_playerColor[auto64551B50_var] = 3;
        }
        else if (auto0179D2A8_val == "Tuscary") {
            libCOMI_gv_playerColor[auto64551B50_var] = 10;
        }
        else if (auto0179D2A8_val == "Violet") {
            libCOMI_gv_playerColor[auto64551B50_var] = 9;
        }
        else if (auto0179D2A8_val == "Yellow") {
            libCOMI_gv_playerColor[auto64551B50_var] = 5;
        }
        else if (auto0179D2A8_val == "White") {
            libCOMI_gv_playerColor[auto64551B50_var] = 0;
        }
        else {
        }
        PlayerSetColorIndex(auto64551B50_var, libCOMI_gv_playerColor[auto64551B50_var], true);
    }
}

int libCOMI_gf_EnemyPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    return 1;
}

int libCOMI_gf_AllyPlayerColor () {
    // Automatic Variable Declarations
    // Implementation
    return 0;
}

int libCOMI_gf_CC_CommanderLevel (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cC_PlayerLevel[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)];
}

string libCOMI_gf_CC_PlayerLevelCommander (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetUserInstance("X_PlayerLevels", lp_playerLevel, "Commander", 1);
}

int libCOMI_gf_CC_PlayerLevelValue (string lp_playerLevel) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("X_PlayerLevels", lp_playerLevel, "Level", 1);
}

int libCOMI_gf_CC_PlayerExperience (int lp_player, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerExperience[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)];
}

fixed libCOMI_gf_CC_PlayerExperienceResultModifier (int lp_result) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_result == c_gameOverVictory)) {
        return 1.0;
    }

    return UserDataGetFixed("GameSettings", "GameValues", "ExperienceLossMaxMultiplier", 1);
}

fixed libCOMI_gf_CC_PlayerExperienceInLevelPct (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCOMI_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCOMI_gv_mAX_PLAYERLEVEL)) {
        return 100.0;
    }

    lv_xPStart = libCOMI_gf_CC_PlayerLevelExperienceNeededTotal(lv_currentLevel);
    lv_xPInLevel = (libCOMI_gf_CC_PlayerExperience(lp_player, lp_commander)-lv_xPStart);
    return (IntToFixed(lv_xPInLevel) / IntToFixed(libCOMI_gf_CC_PlayerLevelExperienceNeededDelta((lv_currentLevel+1))));
}

int libCOMI_gf_CC_PlayerExperienceToNextLevel (int lp_player, string lp_commander) {
    // Variable Declarations
    int lv_xPStart;
    int lv_xPInLevel;
    int lv_currentLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentLevel = libCOMI_gf_CC_CommanderLevel(lp_player, lp_commander);
    if ((lv_currentLevel == libCOMI_gv_mAX_PLAYERLEVEL)) {
        return 0;
    }

    return (libCOMI_gf_CC_PlayerLevelExperienceNeededTotal((lv_currentLevel+1))-libCOMI_gf_CC_PlayerExperience(lp_player, lp_commander));
}

int libCOMI_gf_CC_PlayerLevelExperienceNeededDelta (int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_level == 0)) {
        return 0;
    }

    return UserDataGetInt("GameSettings", "GameValues", "ExperienceToLevel", lp_level);
}

int libCOMI_gf_CC_PlayerLevelExperienceNeededTotal (int lp_level) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_maxLevel;
    int lv_xPTotal;

    // Automatic Variable Declarations
    int auto5436029F_ae;
    const int auto5436029F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_maxLevel = MinI(lp_level, libCOMI_gv_mAX_PLAYERLEVEL);
    auto5436029F_ae = lv_maxLevel;
    lv_levelIndex = 1;
    for ( ; ( (auto5436029F_ai >= 0 && lv_levelIndex <= auto5436029F_ae) || (auto5436029F_ai < 0 && lv_levelIndex >= auto5436029F_ae) ) ; lv_levelIndex += auto5436029F_ai ) {
        lv_xPTotal += libCOMI_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return lv_xPTotal;
}

int libCOMI_gf_CC_PlayerLevelFromExperience (int lp_experience) {
    // Variable Declarations
    int lv_levelIndex;
    int lv_xPRemaining;

    // Automatic Variable Declarations
    const int auto5CDF23EE_ae = libCOMI_gv_mAX_PLAYERLEVEL;
    const int auto5CDF23EE_ai = 1;

    // Variable Initialization

    // Implementation
    lv_xPRemaining = lp_experience;
    lv_levelIndex = 1;
    for ( ; ( (auto5CDF23EE_ai >= 0 && lv_levelIndex <= auto5CDF23EE_ae) || (auto5CDF23EE_ai < 0 && lv_levelIndex >= auto5CDF23EE_ae) ) ; lv_levelIndex += auto5CDF23EE_ai ) {
        if ((lv_xPRemaining < libCOMI_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex))) {
            return (lv_levelIndex-1);
        }

        lv_xPRemaining -= libCOMI_gf_CC_PlayerLevelExperienceNeededDelta(lv_levelIndex);
    }
    return libCOMI_gv_mAX_PLAYERLEVEL;
}

void libCOMI_gf_CC_PlayerAwardMissionXP (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((GameIsOnline() == true)) {
        libCOMI_gf_CC_PlayerSetXPScores(lp_result, lp_player);
    }
    else {
        lv_baseXP = FixedToInt((libCOMI_gf_CC_MissionExperienceReward()*libCOMI_gf_CC_PlayerExperienceResultModifier(lp_result)*libCOMI_gf_CC_MissionExperienceDifficultyBonus(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player))));
        lv_objectiveXP = FixedToInt((libCOMI_gf_MissionRewardTotalEarned2("Experience")*libCOMI_gf_CC_PlayerExperienceResultModifier(lp_result)*libCOMI_gf_CC_MissionExperienceDifficultyBonus(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player))));
        lv_totalXP = (lv_totalXP + lv_objectiveXP);
        libCOMI_gf_CC_PlayerExperienceAdd(lp_player, lv_totalXP);
        libCOMI_gf_CC_UpdatePlayerLevel(lp_player);
    }
}

void libCOMI_gf_CC_PlayerSetXPScores (int lp_result, int lp_player) {
    // Variable Declarations
    int lv_baseXP;
    int lv_objectiveXP;
    int lv_totalXP;
    int lv_objectiveXPGained;

    // Automatic Variable Declarations
    // Variable Initialization

}

void libCOMI_gf_CC_PlayerExperienceSet (int lp_player, int lp_experience, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerExperience[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)] = lp_experience;
}

void libCOMI_gf_CC_PlayerCommanderSet (int lp_player, string lp_commander) {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_player) != lp_commander)) {
        lv_commander = libCOMI_gf_CC_CommanderData(lp_commander);
        PlayerSetCommander(lp_player, lv_commander);
    }

    libCOMI_gv_cCX_PlayerCommander[lp_player] = lp_commander;
}

void libCOMI_gf_CC_UpdatePlayerLevel (int lp_player) {
    // Variable Declarations
    string lv_indexCommander;

    // Automatic Variable Declarations
    int autoB689B60D_ai;
    int autoB689B60D_ae;

    // Variable Initialization

    // Implementation
    autoB689B60D_ai = 1;
    autoB689B60D_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (autoB689B60D_ai < autoB689B60D_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", autoB689B60D_ai);
        autoB689B60D_ai = autoB689B60D_ai+1;
        libCOMI_gf_CC_PlayerLevelSet(lp_player, libCOMI_gf_CC_PlayerLevelFromExperience(libCOMI_gf_CC_PlayerExperience(lp_player, lv_indexCommander)), lv_indexCommander);
    }
}

void libCOMI_gf_CC_PlayerLevelSet (int lp_player, int lp_level, string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cC_PlayerLevel[lp_player][libCOMI_gf_CC_CommanderInternalIndex(lp_commander)] = MinI(lp_level, libCOMI_gv_mAX_PLAYERLEVEL);
}

void libCOMI_gf_CC_PlayerExperienceAdd (int lp_player, int lp_experience) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CC_PlayerExperienceSet(lp_player, (libCOMI_gf_CC_PlayerExperience(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player))+lp_experience), libCOMI_gf_ActiveCommanderForPlayer(lp_player));
}

void libCOMI_gf_CC_PlayerExperienceSetToLevel (int lp_player, int lp_level, string lp_commander) {
    // Variable Declarations
    int lv_levelCount;
    int lv_xPCount;
    string lv_indexLevel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gf_CC_PlayerExperienceSet(lp_player, libCOMI_gf_CC_PlayerLevelExperienceNeededTotal(lp_level), lp_commander);
}

void libCOMI_gf_CC_ResetCurrency (int lp_player) {
    // Variable Declarations
    int lv_raceIndex;
    string lv_indexCommander;

    // Automatic Variable Declarations
    int auto23EEA78D_ai;
    int auto23EEA78D_ae;

    // Variable Initialization

    // Implementation
    auto23EEA78D_ai = 1;
    auto23EEA78D_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto23EEA78D_ai < auto23EEA78D_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto23EEA78D_ai);
        auto23EEA78D_ai = auto23EEA78D_ai+1;
        libCOMI_gf_CC_PlayerExperienceSetToLevel(lp_player, 0, lv_indexCommander);
    }
}

playergroup libCOMI_gf_CC_PlayersOfCommander (string lp_commander) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoCC7A7428_g;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    autoCC7A7428_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoCC7A7428_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer) == lp_commander)) {
            PlayerGroupAdd(lv_playerGroup, lv_indexPlayer);
        }

    }
    return lv_playerGroup;
}

void libCOMI_gf_InitEnemies () {
    int init_i;

    // Variable Declarations
    int lv_i;
    int lv_i2;
    int lv_i3;
    int lv_difficulty;
    string lv_faction;
    string lv_commander;
    string lv_prestige;
    string lv_composition;
    int lv_vU_AllyPlayerIter;
    int lv_player;
    int lv_chosenPlyer;
    int lv_teamIndex;
    int[16] lv_colors;
    int lv_bullyRebuild;

    // Automatic Variable Declarations
    playergroup autoB462ABF8_g;
    playergroup auto4FBC0A73_g;
    playergroup autoE66770D9_g;
    playergroup auto014EB8FD_g;
    playergroup autoCFDD9C68_g;
    playergroup autoF2448DB2_g;

    // Variable Initialization
    lv_difficulty = 2;
    lv_faction = libCOMI_gv_selectedEnemyFaction;
    lv_commander = UserDataGetUserInstance("Factions", lv_faction, "Commander", 1);
    lv_prestige = "Amon";
    lv_composition = libCOMI_gv_selectedEnemyComposition;
    lv_vU_AllyPlayerIter = 1;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_colors[init_i] = 1;
    }
    lv_bullyRebuild = libNtve_gf_DifficultyValueInt(2, 3, 4, 100);

    // Implementation
    libCOMI_gf_SetCAIPersonality(lv_composition);
    autoB462ABF8_g = libCOMI_gv_vU_EnemyAI;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB462ABF8_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_CC_ApplyTechNew(lv_player, 15, lv_commander, lv_prestige);
    }
    auto4FBC0A73_g = libCOMI_gv_vU_EnemyPlayers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4FBC0A73_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_CC_ApplyTechNew(lv_player, 15, lv_commander, lv_prestige);
    }
    libCOMI_gf_CU_EnemyBriefInit(lv_composition);
    libCOMI_gf_RestorePreplacedUnits(lv_faction);
    libCOMI_gf_CreateAmonRefineries();
    autoE66770D9_g = libCOMI_gv_vU_EnemyNPC;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoE66770D9_g, lv_i);
        if (lv_i < 0) { break; }
        AICampaignStart(lv_i);
    }
    auto014EB8FD_g = libCOMI_gv_vU_EnemyAI;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(auto014EB8FD_g, lv_i);
        if (lv_i < 0) { break; }
        libCOMI_gf_ApplyCAIPersonality(lv_i);
        libCOMI_gf_StartCoopAI(lv_i, lv_vU_AllyPlayerIter);
        lv_vU_AllyPlayerIter += 1;
        if ((lv_vU_AllyPlayerIter > PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))) {
            lv_vU_AllyPlayerIter = 1;
        }

    }
    autoCFDD9C68_g = libCOMI_gv_vU_EnemyPlayers;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(autoCFDD9C68_g, lv_i);
        if (lv_i < 0) { break; }
        libCOMI_gf_ApplyCAIPersonality(lv_i);
    }
    TriggerExecute(libCOMI_gt_ReplaceDoodads, true, false);
    lv_teamIndex = 0;
    lv_colors[1] = 14;
    lv_colors[2] = 15;
    lv_colors[3] = 10;
    lv_colors[4] = 9;
    autoF2448DB2_g = libCOMI_gv_vU_EnemyPlayers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoF2448DB2_g, lv_player);
        if (lv_player < 0) { break; }
        lv_teamIndex += 1;
        PlayerGroupAdd(libCOMI_gv_cM_CoopAI_Players, lv_player);
        PlayerSetColorIndex(lv_player, lv_colors[lv_teamIndex], true);
        libNtve_gf_SetUpgradeLevelForPlayer(lv_chosenPlyer, "IsPlayerCommanderUpgrade", 1);
    }
}

void libCOMI_gf_ApplyCAIPersonality (int lp_playerAI) {
    // Variable Declarations
    int lv_i;
    string lv_composition;
    string lv_commander;
    string lv_faction;
    string lv_race;
    string lv_triggers;
    string lv_think;
    string lv_skin;

    // Automatic Variable Declarations
    int autoF4E07657_ae;
    const int autoF4E07657_ai = 1;

    // Variable Initialization
    lv_composition = libCOMI_gf_GetCoopAIPersonality(-1);
    lv_commander = UserDataGetUserInstance("Compositions", lv_composition, "Commander", 1);
    lv_faction = UserDataGetUserInstance("Compositions", lv_composition, "Faction", 1);
    lv_race = UserDataGetGameLink("Factions", lv_faction, "Race", 1);

    // Implementation
    if (((lv_composition == "None") || (lv_composition == null))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_61C545A6"), true);
    }

    PlayerSetRace(lp_playerAI, lv_race);
    libCOMI_gf_CC_PlayerCommanderSet(lp_playerAI, lv_commander);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_playerAI, "FactionTrainAI", 1);
    if ((lv_triggers != "")) {
        libNtve_gf_TriggerExecuteByName(lv_triggers, false, false);
    }

    autoF4E07657_ae = UserDataInstanceCount("CoopAIScripts");
    lv_i = 1;
    for ( ; ( (autoF4E07657_ai >= 0 && lv_i <= autoF4E07657_ae) || (autoF4E07657_ai < 0 && lv_i >= autoF4E07657_ae) ) ; lv_i += autoF4E07657_ai ) {
        lv_think = UserDataInstance("CoopAIScripts", lv_i);
        if ((UserDataGetUserInstance("CoopAIScripts", lv_think, "Faction", 1) == lv_faction)) {
            if ((UserDataGetInt("CoopAIScripts", lv_think, "Native", 1) == 0)) {
                libNtve_gf_SetTacticalAIThink(lp_playerAI, UserDataGetUnit("CoopAIScripts", lv_think, "Unit", 1), UserDataGetString("CoopAIScripts", lv_think, "Think", 1), false);
            }
            else {
                libNtve_gf_SetTacticalAIThink(lp_playerAI, UserDataGetUnit("CoopAIScripts", lv_think, "Unit", 1), UserDataGetString("CoopAIScripts", lv_think, "Think", 1), true);
            }
        }

    }
}

void libCOMI_gf_SpecifyEnemyFactionAndComposition () {
    // Variable Declarations
    int lv_i;
    string lv_faction;

    // Automatic Variable Declarations
    string autoE49AA89A_val;
    int autoF2D05B40_ae;
    const int autoF2D05B40_ai = 1;

    // Variable Initialization

    // Implementation
    autoE49AA89A_val = libCOMI_gv_selectedEnemyFaction;
    if (autoE49AA89A_val == "_Random_") {
        libCOMI_gv_selectedEnemyFaction = libCOMI_gf_RandomCoopAIFaction();
    }
    else if (autoE49AA89A_val == "_Custom_") {
        autoF2D05B40_ae = UserDataInstanceCount("Factions");
        lv_i = 7;
        for ( ; ( (autoF2D05B40_ai >= 0 && lv_i <= autoF2D05B40_ae) || (autoF2D05B40_ai < 0 && lv_i >= autoF2D05B40_ae) ) ; lv_i += autoF2D05B40_ai ) {
            lv_faction = UserDataInstance("Factions", lv_i);
            if ((lv_faction != "_Standart_") && (lv_faction != "_Random_") && (lv_faction != "_Custom_")) {
                UserDataSetInt("Factions", UserDataInstance("Factions", lv_i), "AllowedOnMap", 1, 0);
            }

        }
        libCOMI_gv_selectedEnemyFaction = libCOMI_gf_RandomCoopAIFaction();
    }
    else if (autoE49AA89A_val == "_Standart_") {
        UserDataSetInt("Factions", "Terran", "AllowedOnMap", 1, 0);
        UserDataSetInt("Factions", "Protoss", "AllowedOnMap", 1, 0);
        UserDataSetInt("Factions", "Zerg", "AllowedOnMap", 1, 0);
        libCOMI_gv_selectedEnemyFaction = libCOMI_gf_RandomCoopAIFaction();
    }
    else {
    }
    if ((libCOMI_gv_selectedEnemyComposition == "_Random_")) {
        libCOMI_gv_selectedEnemyComposition = libCOMI_gf_RandomCoopAIPersonality(libCOMI_gv_selectedEnemyFaction);
    }

}

string libCOMI_gf_RandomCoopAIFaction () {
    // Variable Declarations
    string lv_aIPersonality;
    string lv_cCommander;
    bool lv_debugVar;
    int lv_i;
    string lv_cFaction;
    int lv_totalChance;
    int lv_randomVar;
    int lv_cChance;

    // Automatic Variable Declarations
    int auto6C1C1DA1_ae;
    const int auto6C1C1DA1_ai = 1;
    int auto1A022F18_ae;
    const int auto1A022F18_ai = 1;

    // Variable Initialization

    // Implementation
    auto6C1C1DA1_ae = UserDataInstanceCount("Factions");
    lv_i = 1;
    for ( ; ( (auto6C1C1DA1_ai >= 0 && lv_i <= auto6C1C1DA1_ae) || (auto6C1C1DA1_ai < 0 && lv_i >= auto6C1C1DA1_ae) ) ; lv_i += auto6C1C1DA1_ai ) {
        lv_cFaction = UserDataInstance("Factions", lv_i);
        if ((UserDataGetInt("Factions", lv_cFaction, "HideInLauncher", 1) == 1)) {
            continue;
        }

        if ((UserDataGetInt("Factions", lv_cFaction, "AllowedOnMap", 1) == 1)) {
            lv_cCommander = UserDataGetGameLink("Factions", lv_cFaction, "Commander", 1);
            lv_cChance = UserDataGetInt("Factions", lv_cFaction, "Chance", 1);
            if ((lv_cCommander != null) && ((lv_cChance == 0) || (lv_cCommander == PlayerCommander(2)) || (lv_cCommander == PlayerCommander(1)))) {
                UserDataSetInt("Factions", lv_cFaction, "AllowedOnMap", 1, 0);
            }
            else {
                lv_totalChance += UserDataGetInt("Factions", lv_cFaction, "Chance", 1);
            }
        }

    }
    lv_randomVar = RandomInt(1, lv_totalChance);
    auto1A022F18_ae = UserDataInstanceCount("Factions");
    lv_i = 4;
    for ( ; ( (auto1A022F18_ai >= 0 && lv_i <= auto1A022F18_ae) || (auto1A022F18_ai < 0 && lv_i >= auto1A022F18_ae) ) ; lv_i += auto1A022F18_ai ) {
        lv_cFaction = UserDataInstance("Factions", lv_i);
        if ((UserDataGetInt("Factions", lv_cFaction, "HideInLauncher", 1) == 1)) {
            continue;
        }

        if ((UserDataGetInt("Factions", lv_cFaction, "AllowedOnMap", 1) == 1)) {
            lv_cCommander = UserDataGetGameLink("Factions", lv_cFaction, "Commander", 1);
            lv_cChance = UserDataGetInt("Factions", lv_cFaction, "Chance", 1);
            lv_randomVar -= lv_cChance;
            if ((lv_randomVar <= 0)) {
                return lv_cFaction;
            }

        }

    }
    return null;
}

string libCOMI_gf_RandomCoopAIPersonality (string lp_factionParameter) {
    // Variable Declarations
    string lv_faction;
    string lv_composition;
    int lv_i;
    int lv_totalChance;
    int lv_randomVar;

    // Automatic Variable Declarations
    int auto0AB9827C_ae;
    const int auto0AB9827C_ai = 1;
    int auto8959B227_ae;
    const int auto8959B227_ai = 1;

    // Variable Initialization

    // Implementation
    if (((lp_factionParameter == "_Random_") || (lp_factionParameter == null))) {
        lv_faction = libCOMI_gf_RandomCoopAIFaction();
    }
    else {
        lv_faction = lp_factionParameter;
    }
    auto0AB9827C_ae = UserDataInstanceCount("Compositions");
    lv_i = 2;
    for ( ; ( (auto0AB9827C_ai >= 0 && lv_i <= auto0AB9827C_ae) || (auto0AB9827C_ai < 0 && lv_i >= auto0AB9827C_ae) ) ; lv_i += auto0AB9827C_ai ) {
        lv_composition = UserDataInstance("Compositions", lv_i);
        if ((lv_faction == UserDataGetUserInstance("Compositions", lv_composition, "Faction", 1))) {
            lv_totalChance += UserDataGetInt("Compositions", lv_composition, "Chance", 1);
        }

    }
    lv_randomVar = RandomInt(1, lv_totalChance);
    auto8959B227_ae = UserDataInstanceCount("Compositions");
    lv_i = 2;
    for ( ; ( (auto8959B227_ai >= 0 && lv_i <= auto8959B227_ae) || (auto8959B227_ai < 0 && lv_i >= auto8959B227_ae) ) ; lv_i += auto8959B227_ai ) {
        lv_composition = UserDataInstance("Compositions", lv_i);
        if ((lv_faction == UserDataGetUserInstance("Compositions", lv_composition, "Faction", 1))) {
            lv_randomVar -= UserDataGetInt("Compositions", lv_composition, "Chance", 1);
            if ((lv_randomVar <= 0)) {
                return lv_composition;
            }

        }

    }
    return null;
}

string libCOMI_gf_GetCoopAIPersonality (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_player == -1)) {
        return libCOMI_gv_cM_CoopAIPlayer_CommanderShared;
    }
    else {
        return libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player];
    }
}

string libCOMI_gf_GetEnemyFaction () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_selectedEnemyFaction;
}

void libCOMI_gf_RegisterAvailableFactions () {
    // Variable Declarations
    string lv_aIPersonality;
    string lv_aIFaction;
    string lv_aIReplacementFaction;
    string lv_aIUnits;
    int lv_i;
    int lv_chance;
    string lv_factionRace;
    int lv_j;
    int lv_k;
    bool lv_allowed;
    bool lv_customAvailable;
    bool lv_standartAvailable;
    int lv_player;
    int lv_itFactionBases;

    // Automatic Variable Declarations
    const int autoD09B4E0D_ae = 6;
    const int autoD09B4E0D_ai = 1;
    playergroup autoBF705E1B_g;
    int auto5CAE470D_ae;
    const int auto5CAE470D_ai = 1;
    playergroup autoDC0BEE76_g;

    // Variable Initialization

    // Implementation
    lv_i = 4;
    for ( ; ( (autoD09B4E0D_ai >= 0 && lv_i <= autoD09B4E0D_ae) || (autoD09B4E0D_ai < 0 && lv_i >= autoD09B4E0D_ae) ) ; lv_i += autoD09B4E0D_ai ) {
        lv_aIFaction = UserDataInstance("Factions", lv_i);
        autoBF705E1B_g = libCOMI_gv_vU_SlotsEnemy;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoBF705E1B_g, lv_player);
            if (lv_player < 0) { break; }
            lv_itFactionBases = UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_itFactionBases > 0)) {
                UserDataSetInt("Factions", lv_aIFaction, "AllowedOnMap", 1, 1);
                lv_standartAvailable = true;
            }

        }
    }
    auto5CAE470D_ae = UserDataInstanceCount("Factions");
    lv_i = 7;
    for ( ; ( (auto5CAE470D_ai >= 0 && lv_i <= auto5CAE470D_ae) || (auto5CAE470D_ai < 0 && lv_i >= auto5CAE470D_ae) ) ; lv_i += auto5CAE470D_ai ) {
        lv_aIFaction = UserDataInstance("Factions", lv_i);
        lv_aIReplacementFaction = UserDataGetUserInstance("Factions", lv_aIFaction, "ReplacementFaction", 1);
        autoDC0BEE76_g = libCOMI_gv_vU_EnemyAI;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoDC0BEE76_g, lv_player);
            if (lv_player < 0) { break; }
            if ((UserDataGetInt("Factions", lv_aIReplacementFaction, "AllowedOnMap", 1) == 1)) {
                UserDataSetInt("Factions", lv_aIFaction, "AllowedOnMap", 1, 1);
                lv_customAvailable = true;
            }

        }
    }
    if (((lv_standartAvailable == true) || (lv_customAvailable == true))) {
        UserDataSetInt("Factions", "Random", "AllowedOnMap", 1, 1);
    }

    if ((lv_standartAvailable == true)) {
        UserDataSetInt("Factions", "Standard", "AllowedOnMap", 1, 1);
    }

    if ((lv_customAvailable == true)) {
        UserDataSetInt("Factions", "Custom", "AllowedOnMap", 1, 1);
    }

}

void libCOMI_gf_SetCAIPersonality (string lp_personality) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_commander;

    // Automatic Variable Declarations
    playergroup auto3EEF2065_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_CommanderShared = lp_personality;
    auto3EEF2065_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3EEF2065_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_CC_ScoreValueSet(lv_indexPlayer, "EnemyPersonality", libCOMI_gf_CM_CoopAIPersonalityUniqueIndex(lp_personality));
    }
}

void libCOMI_gf_SetCoopAIPersonality (string lp_personalityUserData) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_SetCAIPersonality(lp_personalityUserData);
}

void libCOMI_gf_StartCoopAIwithSpecificPersonality (int lp_player, int lp_aIEnemy, string lp_personalityUserData) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_SetCAIPersonality(lp_personalityUserData);
    libCOMI_gf_StartCoopAI(lp_player, lp_aIEnemy);
}

void libCOMI_gf_InitAmon () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(libCOMI_gv_vU_EnemyPlayers) > 0)) {
        TriggerEnable(libCOMI_gt_VoidIncomeIncrease, true);
        TriggerEnable(libCOMI_gt_VoidIncome, true);
        TriggerExecute(libCOMI_gt_AmonGameplay, true, false);
    }

}

playergroup libCOMI_gf_GetAlliedCommandersPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupCopy(libCOMI_gv_vU_AlliedCommanders);
}

int libCOMI_gf_GetRolePlayer (int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) < lp_slot)) {
        return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
    }
    else {
        return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lp_slot);
    }
}

playergroup libCOMI_gf_GetAlliedCommandersPlayersCopy () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_GetAlliedCommandersPlayers();
}

playergroup libCOMI_gf_HumanPlayers () {
    // Variable Declarations
    playergroup lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(libCOMI_gv_vU_HumanPlayers) == 0)) {
        PlayerGroupAdd(lv_result, 1);
        PlayerGroupAdd(lv_result, 2);
        PlayerGroupAdd(lv_result, 12);
        return lv_result;
    }
    else {
        return libCOMI_gv_vU_HumanPlayers;
    }
}

int libCOMI_gf_CC_PlayerAlly (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lp_player);

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) > 0)) {
        return PlayerGroupPlayer(lv_group, 1);
    }

    if ((lp_player == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

int libCOMI_gf_CC_PlayerAllyNew (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMI_gf_GetAlliedCommandersPlayers();

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) >= 1)) {
        return PlayerGroupPlayer(lv_group, 1);
    }
    else {
        return 0;
    }
}

int libCOMI_gf_CC_PlayerAllyNew2 (int lp_player) {
    // Variable Declarations
    playergroup lv_group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_group = libCOMI_gf_GetAlliedCommandersPlayers();

    // Implementation
    PlayerGroupRemove(lv_group, lp_player);
    if ((PlayerGroupCount(lv_group) >= 2)) {
        return PlayerGroupPlayer(lv_group, 2);
    }
    else {
        return 0;
    }
}

playergroup libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf (int lp_player) {
    // Variable Declarations
    playergroup lv_playerGroup;
    playergroup lv_playerGroupAllies;
    playergroup lv_playerGroupCommnaders;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroupAllies = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, lp_player);
    lv_playerGroupCommnaders = libCOMI_gf_GetAlliedCommandersPlayersCopy();

    // Implementation
    lv_playerGroup = libNtve_gf_IntersectionOfPlayerGroups(lv_playerGroupAllies, lv_playerGroupCommnaders);
    return lv_playerGroup;
}

bool libCOMI_gf_PlayerIsCommander (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_GetPlayerCommanderGameLink(lp_player) != null)) {
        return true;
    }

    if ((TechTreeUpgradeCount(lp_player, "IsPlayerCommanderUpgrade", c_techCountCompleteOnly) > 0)) {
        return true;
    }

    return false;
}

string libCOMI_gf_ActiveCommanderForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerCommander[lp_player];
}

string libCOMI_gf_GetPlayerCommanderGameLink (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "ZZ_CommanderData", 1);
}

string libCOMI_gf_GetCommanderRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "Race", 1);
}

string libCOMI_gf_GetPlayerRaceVO (int lp_player) {
    // Variable Declarations
    string lv_faction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_faction = libCOMI_gf_GetEnemyFaction();

    // Implementation
    return UserDataGetGameLink("Factions", lv_faction, "VORace", 1);
}

playergroup libCOMI_gf_GetEnemyPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_Enemies;
}

playergroup libCOMI_gf_GetAlliesPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_Allies;
}

playergroup libCOMI_gf_GetEnemyHumanPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_EnemyPlayers;
}

playergroup libCOMI_gf_GetEnemyAIPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_EnemyAI;
}

void libCOMI_gf_AddAlliedCommanderPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupAdd(libCOMI_gv_vU_AlliedCommanders, lp_player);
}

playergroup libCOMI_gf_GetHumanPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_vU_HumanPlayers;
}

void libCOMI_gf_RegisterPlayers () {
    // Variable Declarations
    int lv_player;
    int lv_allyPositions;

    // Automatic Variable Declarations
    playergroup autoE0D34AB5_g;
    string autoA1A4D665_val;

    // Variable Initialization

    // Implementation
    autoE0D34AB5_g = libCOMI_gv_all;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoE0D34AB5_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeUser)) {
            PlayerGroupAdd(libCOMI_gv_vU_HumanPlayers, lv_player);
        }

        autoA1A4D665_val = PlayerRace(lv_player);
        if (autoA1A4D665_val == "@PlayerAlly") {
            PlayerGroupAdd(libCOMI_gv_vU_Allies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_AllyNPC, lv_player);
        }
        else if (autoA1A4D665_val == "@AmonPlayer") {
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_EnemyAI, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_SlotsEnemy, lv_player);
        }
        else if (autoA1A4D665_val == "@Amon") {
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_EnemyAI, lv_player);
        }
        else if (autoA1A4D665_val == "@AmonAlly") {
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_EnemyNPC, lv_player);
        }
        else if (autoA1A4D665_val == "@Neutral") {
            PlayerGroupAdd(libCOMI_gv_vU_NeutralNPC, lv_player);
        }
        else if (autoA1A4D665_val == "@Hostile") {
            PlayerGroupAdd(libCOMI_gv_vU_HostileNPC, lv_player);
        }
        else if (autoA1A4D665_val == "@Bonus") {
            PlayerGroupAdd(libCOMI_gv_vU_BonusNPC, lv_player);
        }
        else if (autoA1A4D665_val == "@Player") {
            PlayerGroupAdd(libCOMI_gv_vU_SlotsPlayers, lv_player);
        }
        else {
            if ((PlayerRace(lv_player) == null) && (lv_player > 0) && (lv_player <= 5) && (PlayerType(lv_player) == c_playerTypeNone)) {
                PlayerGroupAdd(libCOMI_gv_vU_SlotsPlayers, lv_player);
            }

        }
    }
    libCOMI_gv_maxAmonPlayersOnMap = PlayerGroupCount(libCOMI_gv_vU_SlotsEnemy);
    libCOMI_gv_maxAlliesPlayersOnMap = PlayerGroupCount(libCOMI_gv_vU_SlotsPlayers);
    libCOMI_gv_totalPlayersOnMap = libCOMI_gv_maxAlliesPlayersOnMap;
}

int libCOMI_gf_GetAlliedPlayer (int lp_slot) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) == 0)) {
        return 1;
    }
    else {
        if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) < lp_slot)) {
            return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lp_slot);
        }
        else {
            return PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
        }
    }
}

playergroup libCOMI_gf_GetNonDefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cC_NondefeatedPlayerGroup == null)) {
        libCOMI_gf_CC_InitNonDefeatedPlayers();
    }

    return libCOMI_gv_cC_NondefeatedPlayerGroup;
}

void libCOMI_gf_CC_InitNonDefeatedPlayers () {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_commanderPlayers;
    int lv_commanderPlayersCount;

    // Automatic Variable Declarations
    playergroup auto4772DE68_g;

    // Variable Initialization
    lv_commanderPlayers = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_commanderPlayersCount = PlayerGroupCount(lv_commanderPlayers);

    // Implementation
    if ((lv_commanderPlayersCount == 0)) {
        return ;
    }

    libCOMI_gv_cC_NondefeatedPlayerGroup = PlayerGroupEmpty();
    auto4772DE68_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4772DE68_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusActive) && (libCOMI_gf_PlayerIsCommander(lv_indexPlayer) == true)) {
            PlayerGroupAdd(libCOMI_gv_cC_NondefeatedPlayerGroup, lv_indexPlayer);
        }

    }
}

void libCOMI_gf_SetPlayerDefeated (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupRemove(libCOMI_gv_cC_NondefeatedPlayerGroup, lp_player);
}

void libCOMI_gf_TurnPlayerFlagOnOffForGroup (playergroup lp_players, int lp_playerFlag, bool lp_onOff) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoB6C32126_g;

    // Variable Initialization

    // Implementation
    autoB6C32126_g = lp_players;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB6C32126_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        PlayerSetState(lv_indexPlayer, lp_playerFlag, lp_onOff);
    }
}

playergroup libCOMI_gf_GetTeammates (int lp_player) {
    // Variable Declarations
    playergroup lv_team;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = PlayerGroupEmpty();

    // Implementation
    if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliesPlayers(), lp_player) == true)) {
        lv_team = libCOMI_gf_GetAlliesPlayers();
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), lp_player) == true)) {
        lv_team = libCOMI_gf_GetEnemyPlayers();
    }

    PlayerGroupRemove(lv_team, lp_player);
    return lv_team;
}

playergroup libCOMI_gf_PlayersOfCommander (string lp_commander) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoA90FCD99_g;
    int autoA90FCD99_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    autoA90FCD99_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    autoA90FCD99_var = -1;
    while (true) {
        autoA90FCD99_var = PlayerGroupNextPlayer(autoA90FCD99_g, autoA90FCD99_var);
        if (autoA90FCD99_var < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(autoA90FCD99_var) == lp_commander)) {
            PlayerGroupAdd(lv_players, autoA90FCD99_var);
        }

    }
    return lv_players;
}

playergroup libCOMI_gf_PlayersOfCommanderInaTeam (string lp_commander, int lp_team) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoFC09FBA3_g;
    int autoFC09FBA3_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    autoFC09FBA3_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    autoFC09FBA3_var = -1;
    while (true) {
        autoFC09FBA3_var = PlayerGroupNextPlayer(autoFC09FBA3_g, autoFC09FBA3_var);
        if (autoFC09FBA3_var < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(autoFC09FBA3_var) == lp_commander) && (((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), autoFC09FBA3_var) == true) && (lp_team == 1)) || ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), autoFC09FBA3_var) == true) && (lp_team == 2)))) {
            PlayerGroupAdd(lv_players, autoFC09FBA3_var);
        }

    }
    return lv_players;
}

int libCOMI_gf_GetNearestCommanderPlayerInATeam (string lp_commander, int lp_player, point lp_point) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    playergroup auto41315724_g;
    int auto41315724_var;

    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Implementation
    if ((lp_player == c_playerAny)) {
        return c_playerAny;
    }

    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_player) == lp_commander)) {
        return lp_player;
    }
    else {
        auto41315724_g = libCOMI_gf_PlayersOfCommanderInaTeam(lp_commander, libARRA_gf_GetPlayerTeam(lp_player));
        auto41315724_var = -1;
        while (true) {
            auto41315724_var = PlayerGroupNextPlayer(auto41315724_g, auto41315724_var);
            if (auto41315724_var < 0) { break; }
            UnitGroupAdd(lv_units, UnitGroupClosestToPoint(UnitGroup(null, auto41315724_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_point));
        }
        if ((UnitGroupCount(lv_units, c_unitCountAlive) > 0)) {
            return UnitGetOwner(UnitGroupClosestToPoint(lv_units, lp_point));
        }

        return c_playerAny;
    }
}

bool libCOMI_gf_PlayerIsInCombat (int lp_player) {
    // Variable Declarations
    fixed lv_combatTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == true)) {
        return false;
    }

    lv_combatTime = MaxF(PlayerGetPropertyFixed(lp_player, c_playerPropDamageDealtTime), PlayerGetPropertyFixed(lp_player, c_playerPropDamageTakenTime));
    lv_combatTime = (TimerGetElapsed(libCOMI_gv_cM_CombatTimer) - lv_combatTime);
    return (lv_combatTime < 4.0);
}

void libCOMI_gf_CreateExpansionUnitsForPlayer (int lp_player, point lp_location) {
    // Variable Declarations
    string lv_uNIT_TOWNHALL;
    string lv_uNIT_REFINERY;
    string lv_uNIT_MINERALS;
    unitgroup lv_minerals;
    unitgroup lv_vespene;
    unit lv_rock;
    unit lv_resource;
    int lv_iteration;
    unit lv_mineralUnit;
    string lv_townHallSplat;
    string lv_refinerySplat;

    // Automatic Variable Declarations
    unitgroup auto6C92F6B8_g;
    int auto6C92F6B8_u;
    unit auto6C92F6B8_var;
    unitgroup autoF6E07E99_g;
    int autoF6E07E99_u;
    unit autoF6E07E99_var;

    // Variable Initialization
    lv_uNIT_TOWNHALL = UserDataGetUnit("MissionSettings", "CurrentMission", "ExpansionBlockerTownHall", 1);
    lv_uNIT_REFINERY = UserDataGetUnit("MissionSettings", "CurrentMission", "ExpansionBlockerRefinery", 1);
    lv_uNIT_MINERALS = UserDataGetUnit("MissionSettings", "CurrentMission", "ExpansionBlockerMinerals", 1);
    lv_minerals = libARRA_gf_GetResourcesNearPoint(lp_location, libCOMI_gf_ResourcesRadius(), c_resourceTypeMinerals);
    lv_vespene = libARRA_gf_GetResourcesNearPoint(lp_location, libCOMI_gf_ResourcesRadius(), c_resourceTypeVespene);
    lv_iteration = 1;
    lv_townHallSplat = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyTownHallActor", 1);
    lv_refinerySplat = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyRefineryActor", 1);

    // Implementation
    if ((lv_uNIT_TOWNHALL != null) && (lv_uNIT_TOWNHALL != "NONE")) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_uNIT_TOWNHALL, c_unitCreateIgnorePlacement, 0, lp_location);
        lv_rock = UnitLastCreated();
        UnitBehaviorAdd(lv_rock, "ExpansionRocks", lv_rock, 1);
        UnitSetPropertyFixed(lv_rock, c_unitPropLifeMax, libCOMI_gf_ExpansionRockLife(libCOMI_ge_ExpansionRockType_TownHallRock));
        UnitSetPropertyFixed(lv_rock, c_unitPropLifePercent, 100.0);
    }

    auto6C92F6B8_g = lv_vespene;
    auto6C92F6B8_u = UnitGroupCount(auto6C92F6B8_g, c_unitCountAll);
    for (;; auto6C92F6B8_u -= 1) {
        auto6C92F6B8_var = UnitGroupUnitFromEnd(auto6C92F6B8_g, auto6C92F6B8_u);
        if (auto6C92F6B8_var == null) { break; }
        if ((lv_uNIT_REFINERY != null) && (lv_uNIT_REFINERY != "NONE")) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_uNIT_REFINERY, c_unitCreateIgnorePlacement, 0, UnitGetPosition(auto6C92F6B8_var));
            lv_rock = UnitLastCreated();
            UnitBehaviorAdd(lv_rock, "ExpansionRocks", lv_rock, 1);
            UnitSetPropertyFixed(lv_rock, c_unitPropLifeMax, libCOMI_gf_ExpansionRockLife(libCOMI_ge_ExpansionRockType_GeyserRock));
            UnitSetPropertyFixed(lv_rock, c_unitPropLifePercent, 100.0);
        }

    }
    autoF6E07E99_g = lv_minerals;
    autoF6E07E99_u = UnitGroupCount(autoF6E07E99_g, c_unitCountAll);
    for (;; autoF6E07E99_u -= 1) {
        autoF6E07E99_var = UnitGroupUnitFromEnd(autoF6E07E99_g, autoF6E07E99_u);
        if (autoF6E07E99_var == null) { break; }
        if ((lv_uNIT_MINERALS != null) && (lv_uNIT_MINERALS != "NONE")) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_uNIT_MINERALS, c_unitCreateIgnorePlacement, 0, UnitGetPosition(autoF6E07E99_var));
            lv_rock = UnitLastCreated();
            UnitBehaviorAdd(lv_rock, "ExpansionRocks", lv_rock, 1);
        }

        VisExploreArea(lp_player, RegionCircle(UnitGetPosition(autoF6E07E99_var), 0.5), true, false);
    }
}

void libCOMI_gf_AddOptionalUnits (int lp_team, int lp_players, unitgroup lp_units) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAddUnitGroup(libCOMI_gv_optionalUnitsTotal, lp_units);
    UnitGroupAddUnitGroup(libCOMI_gv_optionalUnitsPerTeam[lp_team], lp_units);
    UnitGroupAddUnitGroup(libCOMI_gv_optionalUnitsConditional[lp_team][lp_players], lp_units);
}

void libCOMI_gf_AddClearUnits (int lp_team, int lp_players, unitgroup lp_units) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAddUnitGroup(libCOMI_gv_clearUnits[lp_team][lp_players], lp_units);
}

void libCOMI_gf_AddRebuildUnits (int lp_players, unitgroup lp_units) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAddUnitGroup(libCOMI_gv_rebuildUnits[lp_players], lp_units);
}

void libCOMI_gf_AddIgnoredUnits (int lp_players, unitgroup lp_units) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupAddUnitGroup(libCOMI_gv_ignoredUnits, lp_units);
}

void libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup (string lp_region, unitgroup lp_units) {
    // Variable Declarations
    unitgroup lv_units;
    region lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units = lp_units;

    // Implementation
    lv_region = RegionFromName(lp_region);
    if ((lv_region != null)) {
        UnitGroupAddUnitGroup(lv_units, UnitGroup(null, c_playerAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }

}

void libCOMI_gf_StorePreplacedUnits () {
    // Variable Declarations
    int lv_i;
    point lv_position;
    int lv_team;
    int lv_clearZoneIndex;
    int lv_pLAYER;
    string lv_tYPE;
    unit lv_uNIT;
    string lv_rOW;
    unitgroup lv_unitsWithSelectedType;
    region lv_region;
    fixed lv_r;
    unitgroup lv_units;

    // Automatic Variable Declarations
    int auto46852D22_ae;
    const int auto46852D22_ai = 1;
    const int auto4DBCE242_ae = libCOMI_gv_mAX_TEAMS;
    const int auto4DBCE242_ai = 1;
    int auto26A24AA4_ae;
    const int auto26A24AA4_ai = 1;
    unitgroup autoB01471CD_g;
    int autoB01471CD_u;
    playergroup auto33AA83D1_g;
    int auto33AA83D1_var;
    unitgroup auto4B0220CF_g;
    int auto4B0220CF_u;
    unitgroup auto56D4CFDF_g;
    int auto56D4CFDF_u;
    unitgroup autoBC1C025F_g;
    int autoBC1C025F_u;

    // Variable Initialization
    lv_i = 1;
    lv_position = libCOMI_gf_GetAllyStartPosition(lv_i, 1, PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()));
    lv_unitsWithSelectedType = UnitGroupEmpty();
    lv_r = libCOMI_gf_ResourcesRadius();
    lv_units = UnitGroupEmpty();

    // Implementation
    libCOMI_gf_AddDefaultOptionalResources();
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Bullies Zone", libCOMI_gv_bulliesUnits);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Ignore Area", libCOMI_gv_ignoredUnits);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Ignore Zone", libCOMI_gv_ignoredUnits);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Amon Base", libCOMI_gv_rebuildUnits[0]);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Amon-1 Base", libCOMI_gv_rebuildUnits[0]);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Amon-2 Base", libCOMI_gv_rebuildUnits[0]);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Rebuild Zone", libCOMI_gv_rebuildUnits[0]);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Rebuild Zone Casual", libCOMI_gv_rebuildUnits[1]);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Rebuild Zone Normal", libCOMI_gv_rebuildUnits[2]);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Rebuild Zone Hard", libCOMI_gv_rebuildUnits[3]);
    libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup("Rebuild Zone Brutal", libCOMI_gv_rebuildUnits[4]);
    auto46852D22_ae = libCOMI_gv_maxAlliesPlayersOnMap;
    lv_i = 0;
    for ( ; ( (auto46852D22_ai >= 0 && lv_i <= auto46852D22_ae) || (auto46852D22_ai < 0 && lv_i >= auto46852D22_ae) ) ; lv_i += auto46852D22_ai ) {
        libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup(("Optional Zone " + IntToString(lv_i)), libCOMI_gv_optionalUnitsConditional[1][lv_i]);
        libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup(("Clear Zone " + IntToString(lv_i)), libCOMI_gv_clearUnits[1][lv_i]);
        UnitGroupAddUnitGroup(libCOMI_gv_clearUnitsTotal, libCOMI_gv_clearUnits[1][lv_i]);
        UnitGroupAddUnitGroup(libCOMI_gv_clearUnitsPerTeam[1], libCOMI_gv_clearUnits[1][lv_i]);
        libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup(("Ally Clear (" + IntToString(lv_i) + ")"), libCOMI_gv_clearUnits[1][lv_i]);
        UnitGroupAddUnitGroup(libCOMI_gv_clearUnitsTotal, libCOMI_gv_clearUnits[1][lv_i]);
        UnitGroupAddUnitGroup(libCOMI_gv_clearUnitsPerTeam[1], libCOMI_gv_clearUnits[1][lv_i]);
        lv_team = 0;
        for ( ; ( (auto4DBCE242_ai >= 0 && lv_team <= auto4DBCE242_ae) || (auto4DBCE242_ai < 0 && lv_team >= auto4DBCE242_ae) ) ; lv_team += auto4DBCE242_ai ) {
            libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup(("Clear Zone " + IntToString(lv_team) + "-" + IntToString(lv_i)), libCOMI_gv_clearUnits[lv_team][lv_i]);
            UnitGroupAddUnitGroup(libCOMI_gv_clearUnitsTotal, libCOMI_gv_clearUnits[lv_team][lv_i]);
            UnitGroupAddUnitGroup(libCOMI_gv_clearUnitsPerTeam[lv_team], libCOMI_gv_clearUnits[lv_team][lv_i]);
            libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup(("Optional Zone " + IntToString(lv_team) + "-" + IntToString(lv_i)), libCOMI_gv_optionalUnitsConditional[lv_team][lv_i]);
            UnitGroupAddUnitGroup(libCOMI_gv_optionalUnitsTotal, libCOMI_gv_optionalUnitsConditional[lv_team][lv_i]);
            UnitGroupAddUnitGroup(libCOMI_gv_optionalUnitsPerTeam[lv_team], libCOMI_gv_optionalUnitsConditional[lv_team][lv_i]);
        }
    }
    auto26A24AA4_ae = UserDataInstanceCount("Replacements");
    lv_i = 1;
    for ( ; ( (auto26A24AA4_ai >= 0 && lv_i <= auto26A24AA4_ae) || (auto26A24AA4_ai < 0 && lv_i >= auto26A24AA4_ae) ) ; lv_i += auto26A24AA4_ai ) {
        lv_rOW = UserDataInstance("Replacements", lv_i);
        lv_tYPE = UserDataGetUnit("Replacements", lv_rOW, "@unit", 1);
        lv_unitsWithSelectedType = UnitGroup(lv_tYPE, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoB01471CD_g = lv_unitsWithSelectedType;
        autoB01471CD_u = UnitGroupCount(autoB01471CD_g, c_unitCountAll);
        for (;; autoB01471CD_u -= 1) {
            lv_uNIT = UnitGroupUnitFromEnd(autoB01471CD_g, autoB01471CD_u);
            if (lv_uNIT == null) { break; }
            lv_pLAYER = UnitGetOwner(lv_uNIT);
            if ((PlayerGroupHasPlayer(libCOMI_gv_vU_EnemyAI, lv_pLAYER) == false) && (PlayerGroupHasPlayer(libCOMI_gv_vU_SlotsEnemy, lv_pLAYER) == false) && (PlayerGroupHasPlayer(libCOMI_gv_vU_SlotsPlayers, lv_pLAYER) == false)) {
                continue;
            }

            if ((UnitGroupHasUnit(libCOMI_gv_ignoredUnits, lv_uNIT) == true)) {
                continue;
            }

            libCOMI_gf_StoreUnitData(lv_uNIT);
            libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_replacement = lv_rOW;
            UnitGroupRemove(libCOMI_gv_optionalUnitsTotal, lv_uNIT);
            UnitGroupRemove(libCOMI_gv_clearUnitsTotal, lv_uNIT);
        }
    }
    auto33AA83D1_g = libCOMI_gv_vU_SlotsPlayers;
    auto33AA83D1_var = -1;
    while (true) {
        auto33AA83D1_var = PlayerGroupNextPlayer(auto33AA83D1_g, auto33AA83D1_var);
        if (auto33AA83D1_var < 0) { break; }
        UnitGroupAddUnitGroup(lv_units, UnitGroup(null, auto33AA83D1_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    auto4B0220CF_g = lv_units;
    auto4B0220CF_u = UnitGroupCount(auto4B0220CF_g, c_unitCountAll);
    for (;; auto4B0220CF_u -= 1) {
        lv_uNIT = UnitGroupUnitFromEnd(auto4B0220CF_g, auto4B0220CF_u);
        if (lv_uNIT == null) { break; }
        libCOMI_gf_StoreUnitData(lv_uNIT);
    }
    auto56D4CFDF_g = libCOMI_gv_optionalUnitsTotal;
    auto56D4CFDF_u = UnitGroupCount(auto56D4CFDF_g, c_unitCountAll);
    for (;; auto56D4CFDF_u -= 1) {
        lv_uNIT = UnitGroupUnitFromEnd(auto56D4CFDF_g, auto56D4CFDF_u);
        if (lv_uNIT == null) { break; }
        if ((UnitGroupHasUnit(libCOMI_gv_ignoredUnits, lv_uNIT) == true)) {
            continue;
        }

        libCOMI_gf_StoreUnitData(lv_uNIT);
        UnitGroupRemove(libCOMI_gv_clearUnitsTotal, lv_uNIT);
    }
    autoBC1C025F_g = libCOMI_gv_clearUnitsTotal;
    autoBC1C025F_u = UnitGroupCount(autoBC1C025F_g, c_unitCountAll);
    for (;; autoBC1C025F_u -= 1) {
        lv_uNIT = UnitGroupUnitFromEnd(autoBC1C025F_g, autoBC1C025F_u);
        if (lv_uNIT == null) { break; }
        if ((UnitGroupHasUnit(libCOMI_gv_ignoredUnits, lv_uNIT) == true)) {
            continue;
        }

        libCOMI_gf_StoreUnitData(lv_uNIT);
    }
}

void libCOMI_gf_StoreUnitData (unit lp_unit) {
    // Variable Declarations
    int lv_playersInTeam;
    bool lv_clearAlly;
    int lv_team;
    int lv_difficulty;
    bool lv_clearAmon;
    unit lv_uNIT;

    // Automatic Variable Declarations
    const int auto04EE6A7A_ae = 4;
    const int auto04EE6A7A_ai = 1;
    const int autoDD91E94D_ae = libCOMI_gv_mAX_TEAMS;
    const int autoDD91E94D_ai = 1;
    int autoDD977528_ae;
    const int autoDD977528_ai = 1;
    const int auto10928C03_ae = libCOMI_gv_mAX_TEAMS;
    const int auto10928C03_ai = 1;
    int autoCA690CE2_ae;
    const int autoCA690CE2_ai = 1;

    // Variable Initialization
    lv_uNIT = lp_unit;

    // Implementation
    libCOMI_gv_storedUnitsCount += 1;
    libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_player = UnitGetOwner(lv_uNIT);
    libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_type = UnitGetType(lv_uNIT);
    libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_position = UnitGetPosition(lv_uNIT);
    libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_facing = UnitGetFacing(lv_uNIT);
    libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_hidden = libNtve_gf_UnitIsHidden(lv_uNIT);
    libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_bully = UnitGroupHasUnit(libCOMI_gv_bulliesUnits, lv_uNIT);
    lv_difficulty = 0;
    for ( ; ( (auto04EE6A7A_ai >= 0 && lv_difficulty <= auto04EE6A7A_ae) || (auto04EE6A7A_ai < 0 && lv_difficulty >= auto04EE6A7A_ae) ) ; lv_difficulty += auto04EE6A7A_ai ) {
        if ((UnitGroupHasUnit(libCOMI_gv_rebuildUnits[lv_difficulty], lv_uNIT) == true)) {
            libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_rebuild[lv_difficulty] = true;
        }

    }
    if ((UnitGroupHasUnit(libCOMI_gv_clearUnitsTotal, lv_uNIT) == true)) {
        libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_optional = true;
        lv_team = 1;
        for ( ; ( (autoDD91E94D_ai >= 0 && lv_team <= autoDD91E94D_ae) || (autoDD91E94D_ai < 0 && lv_team >= autoDD91E94D_ae) ) ; lv_team += autoDD91E94D_ai ) {
            autoDD977528_ae = libCOMI_gv_maxAlliesPlayersOnMap;
            lv_playersInTeam = 0;
            for ( ; ( (autoDD977528_ai >= 0 && lv_playersInTeam <= autoDD977528_ae) || (autoDD977528_ai < 0 && lv_playersInTeam >= autoDD977528_ae) ) ; lv_playersInTeam += autoDD977528_ai ) {
                if ((UnitGroupHasUnit(libCOMI_gv_clearUnitsPerTeam[lv_team], lv_uNIT) == true)) {
                    if ((UnitGroupHasUnit(libCOMI_gv_clearUnits[lv_team][lv_playersInTeam], lv_uNIT) == true)) {
                        libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_add[lv_team][lv_playersInTeam] = false;
                    }
                    else {
                        libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_add[lv_team][lv_playersInTeam] = true;
                    }
                }

            }
        }
    }

    if ((UnitGroupHasUnit(libCOMI_gv_optionalUnitsTotal, lv_uNIT) == true)) {
        libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_optional = true;
        lv_team = 1;
        for ( ; ( (auto10928C03_ai >= 0 && lv_team <= auto10928C03_ae) || (auto10928C03_ai < 0 && lv_team >= auto10928C03_ae) ) ; lv_team += auto10928C03_ai ) {
            autoCA690CE2_ae = libCOMI_gv_maxAlliesPlayersOnMap;
            lv_playersInTeam = 0;
            for ( ; ( (autoCA690CE2_ai >= 0 && lv_playersInTeam <= autoCA690CE2_ae) || (autoCA690CE2_ai < 0 && lv_playersInTeam >= autoCA690CE2_ae) ) ; lv_playersInTeam += autoCA690CE2_ai ) {
                if ((UnitGroupHasUnit(libCOMI_gv_optionalUnitsPerTeam[lv_team], lv_uNIT) == true)) {
                    if ((UnitGroupHasUnit(libCOMI_gv_optionalUnitsConditional[lv_team][lv_playersInTeam], lv_uNIT) == true)) {
                        libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_add[lv_team][lv_playersInTeam] = true;
                    }
                    else {
                        libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_add[lv_team][lv_playersInTeam] = false;
                    }
                }
                else {
                    libCOMI_gv_storedUnits[libCOMI_gv_storedUnitsCount].lv_add[lv_team][lv_playersInTeam] = false;
                }
            }
        }
    }

    libCOMI_gf_RemoveUnitAndCreep(lv_uNIT);
}

void libCOMI_gf_RestorePreplacedUnits (string lp_faction) {
    // Variable Declarations
    string lv_factionFieldPlayer;
    string lv_factionFieldAI;
    string lv_factionFieldUnitAI;
    string lv_factionField;
    string lv_factionFieldUnit;
    int lv_i;
    int lv_j;
    string lv_rOW;
    string lv_tYPE;
    string lv_nEW;
    int lv_bULLY;
    int lv_pLAYER;
    point lv_pOSITION;
    fixed lv_fACING;
    fixed lv_rATIO;
    bool lv_hIDDEN;
    bool lv_iS_BULLY;
    bool lv_iS_PLAYER;
    fixed lv_randomVal;
    fixed lv_randomChance;
    int lv_bullyRebuild;
    int lv_difficulty;
    int lv_teams;
    int lv_team;
    int[libCOMI_gv_mAX_TEAMS + 1] lv_playersOnTeams;
    bool lv_add;
    region[3] lv_clearRegion;

    // Automatic Variable Declarations
    int autoFD86BBF5_ae;
    const int autoFD86BBF5_ai = 1;
    int autoB708E243_ae;
    const int autoB708E243_ai = 1;
    int auto9300054E_ae;
    const int auto9300054E_ai = 1;
    int auto6C7B88E7_ae;
    int auto6C7B88E7_var;
    playergroup autoD045CF85_g;
    int autoD045CF85_var;

    // Variable Initialization
    lv_factionFieldAI = lp_faction;
    lv_factionFieldUnitAI = lp_faction + "Unit";
    lv_factionField = lp_faction;
    lv_factionFieldUnit = lp_faction + "Unit";
    lv_bullyRebuild = libNtve_gf_DifficultyValueInt(2, 3, 4, 100);
    lv_difficulty = libNtve_gf_DifficultyValueInt(1, 2, 3, 4);
    lv_teams = 2;

    // Implementation
    lv_playersOnTeams[1] = PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers());
    lv_playersOnTeams[2] = PlayerGroupCount(libCOMI_gf_GetEnemyHumanPlayers());
    lv_clearRegion[1] = RegionFromName(("Ally Clear (" + IntToString(lv_playersOnTeams[1]) + ")"));
    lv_clearRegion[2] = RegionFromName(("Amon Clear (" + IntToString(lv_playersOnTeams[2]) + ")"));
    autoFD86BBF5_ae = libCOMI_gv_storedUnitsCount;
    lv_i = 1;
    for ( ; ( (autoFD86BBF5_ai >= 0 && lv_i <= autoFD86BBF5_ae) || (autoFD86BBF5_ai < 0 && lv_i >= autoFD86BBF5_ae) ) ; lv_i += autoFD86BBF5_ai ) {
        if ((libCOMI_gv_storedUnits[lv_i].lv_optional == true)) {
            lv_add = false;
            autoB708E243_ae = lv_teams;
            lv_team = 1;
            for ( ; ( (autoB708E243_ai >= 0 && lv_team <= autoB708E243_ae) || (autoB708E243_ai < 0 && lv_team >= autoB708E243_ae) ) ; lv_team += autoB708E243_ai ) {
                if ((libCOMI_gv_storedUnits[lv_i].lv_add[lv_team][lv_playersOnTeams[lv_team]] == true)) {
                    lv_add = true;
                    break;
                }

            }
            if ((lv_add == false)) {
                continue;
            }

        }

        lv_pOSITION = libCOMI_gv_storedUnits[lv_i].lv_position;
        if ((lv_clearRegion[1] != null) && (RegionContainsPoint(lv_clearRegion[1], lv_pOSITION) == true)) {
            continue;
        }

        if ((lv_clearRegion[2] != null) && (RegionContainsPoint(lv_clearRegion[2], lv_pOSITION) == true)) {
            continue;
        }

        lv_pLAYER = libCOMI_gv_storedUnits[lv_i].lv_player;
        lv_rOW = libCOMI_gv_storedUnits[lv_i].lv_replacement;
        lv_tYPE = libCOMI_gv_storedUnits[lv_i].lv_type;
        lv_fACING = libCOMI_gv_storedUnits[lv_i].lv_facing;
        lv_hIDDEN = libCOMI_gv_storedUnits[lv_i].lv_hidden;
        lv_iS_BULLY = libCOMI_gv_storedUnits[lv_i].lv_bully;
        lv_iS_PLAYER = false;
        if (((libCOMI_gv_storedUnits[lv_i].lv_rebuild[0] == true) || (libCOMI_gv_storedUnits[lv_i].lv_rebuild[lv_difficulty] == true))) {
            lv_bULLY = lv_bullyRebuild;
        }
        else {
            lv_bULLY = 1;
        }
        if ((lv_rOW == null)) {
            if ((PlayerGroupHasPlayer(libCOMI_gv_vU_SlotsPlayers, lv_pLAYER) == true)) {
                if ((lv_pLAYER > PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))) {
                    continue;
                }
                else {
                    lv_pLAYER = libCOMI_gf_GetRolePlayer(lv_pLAYER);
                }
            }

            if ((lv_iS_BULLY == true)) {
                if ((lv_bULLY > 1)) {
                    AIAddBully(lv_pLAYER, lv_tYPE, lv_pOSITION, (lv_bULLY - 1));
                }

            }
            else {
                libCOMI_gf_CreateUnitAndCreep(lv_pLAYER, lv_tYPE, lv_pOSITION, lv_fACING, lv_hIDDEN, lv_bULLY);
            }
        }
        else {
            lv_randomChance = RandomFixed(0.0, 1.0);
            if ((PlayerGroupHasPlayer(libCOMI_gv_vU_SlotsPlayers, lv_pLAYER) == true)) {
                if ((lv_pLAYER > PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))) {
                    continue;
                }
                else {
                    lv_pLAYER = libCOMI_gf_GetRolePlayer(lv_pLAYER);
                }
                lv_factionFieldPlayer = UserDataGetUserInstance("Commanders", libCOMI_gf_ActiveCommanderForPlayer(lv_pLAYER), "Faction", 1);
                lv_factionField = lv_factionFieldPlayer;
                lv_factionFieldUnit = lv_factionFieldPlayer + "Unit";
            }
            else {
                lv_factionField = lv_factionFieldAI;
                lv_factionFieldUnit = lv_factionFieldUnitAI;
            }
            auto9300054E_ae = UserDataFieldValueCount("Replacements", lv_factionField);
            lv_j = 1;
            for ( ; ( (auto9300054E_ai >= 0 && lv_j <= auto9300054E_ae) || (auto9300054E_ai < 0 && lv_j >= auto9300054E_ae) ) ; lv_j += auto9300054E_ai ) {
                lv_nEW = UserDataGetUnit("Replacements", lv_rOW, lv_factionFieldUnit, lv_j);
                lv_rATIO = UserDataGetFixed("Replacements", lv_rOW, lv_factionField, lv_j);
                if ((lv_rATIO != 0.0) && (lv_nEW != null)) {
                    if ((lv_nEW == "NONE")) {
                        lv_nEW = lv_tYPE;
                    }

                    if ((lv_rATIO >= 1.0)) {
                        auto6C7B88E7_ae = FloorI(lv_rATIO);
                        auto6C7B88E7_var = 1;
                        for ( ; auto6C7B88E7_var <= auto6C7B88E7_ae; auto6C7B88E7_var += 1 ) {
                            if ((lv_iS_BULLY == true)) {
                                if ((lv_bULLY > 1)) {
                                    AIAddBully(lv_pLAYER, lv_nEW, lv_pOSITION, (lv_bULLY - 1));
                                }

                            }
                            else {
                                libCOMI_gf_CreateUnitAndCreep(lv_pLAYER, lv_nEW, lv_pOSITION, lv_fACING, lv_hIDDEN, lv_bULLY);
                            }
                        }
                    }

                    lv_rATIO -= FloorI(lv_rATIO);
                    if ((lv_rATIO > 0.0) && (lv_randomChance < lv_rATIO)) {
                        if ((lv_iS_BULLY == true)) {
                            if ((lv_bULLY > 1)) {
                                AIAddBully(lv_pLAYER, lv_nEW, lv_pOSITION, (lv_bULLY - 1));
                            }

                        }
                        else {
                            libCOMI_gf_CreateUnitAndCreep(lv_pLAYER, lv_nEW, lv_pOSITION, lv_fACING, lv_hIDDEN, lv_bULLY);
                        }
                        lv_randomChance = 999.0;
                    }
                    else {
                        lv_randomChance -= lv_rATIO;
                    }
                }

            }
        }
    }
    if ((libCOMI_gv_inactiveZone != null)) {
        autoD045CF85_g = libCOMI_gf_GetEnemyPlayers();
        autoD045CF85_var = -1;
        while (true) {
            autoD045CF85_var = PlayerGroupNextPlayer(autoD045CF85_g, autoD045CF85_var);
            if (autoD045CF85_var < 0) { break; }
            AIToggleBulliesInRegion(autoD045CF85_var, libCOMI_gv_inactiveZone, false);
        }
    }

}

void libCOMI_gf_CreateAmonRefineries () {
    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    unitgroup lv_geysers;
    unitgroup lv_minerals;
    unit lv_mineral;
    int lv_preplacedWorkers;
    unitgroup lv_expansionMinerals;

    // Automatic Variable Declarations
    playergroup autoA79938BC_g;
    int autoA79938BC_var;
    int auto40E4AA8D_ae;
    int auto40E4AA8D_var;
    unitgroup autoCBAACBB5_g;
    int autoCBAACBB5_u;
    int auto17E31671_ae;
    int auto17E31671_var;

    // Variable Initialization
    lv_geysers = UnitGroupEmpty();
    lv_minerals = UnitGroupEmpty();
    lv_preplacedWorkers = 5;
    lv_expansionMinerals = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    autoA79938BC_g = libCOMI_gv_vU_EnemyAI;
    autoA79938BC_var = -1;
    while (true) {
        autoA79938BC_var = PlayerGroupNextPlayer(autoA79938BC_g, autoA79938BC_var);
        if (autoA79938BC_var < 0) { break; }
        auto40E4AA8D_ae = UserDataFieldValueCount("Factions", "UnitTownHall");
        auto40E4AA8D_var = 1;
        for ( ; auto40E4AA8D_var <= auto40E4AA8D_ae; auto40E4AA8D_var += 1 ) {
            lv_unitType = UserDataGetUnit("Factions", libCOMI_gv_selectedEnemyFaction, "UnitTownHall", auto40E4AA8D_var);
            if ((lv_unitType != "")) {
                autoCBAACBB5_g = UnitGroup(lv_unitType, autoA79938BC_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoCBAACBB5_u = UnitGroupCount(autoCBAACBB5_g, c_unitCountAll);
                for (;; autoCBAACBB5_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(autoCBAACBB5_g, autoCBAACBB5_u);
                    if (lv_unit == null) { break; }
                    lv_geysers = UnitGroupEmpty();
                    UnitGroupAddUnitGroup(lv_geysers, UnitGroup("VespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(lv_unit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                    UnitGroupAddUnitGroup(lv_geysers, UnitGroup("ProtossVespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(lv_unit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                    UnitGroupAddUnitGroup(lv_geysers, UnitGroup("SpacePlatformGeyser", c_playerAny, RegionCircle(UnitGetPosition(lv_unit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                    UnitGroupAddUnitGroup(lv_geysers, UnitGroup("ShakurasVespeneGeyser", c_playerAny, RegionCircle(UnitGetPosition(lv_unit), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2));
                    if ((UnitGroupCount(lv_geysers, c_unitCountAll) == 2)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Factions", libCOMI_gv_selectedEnemyFaction, "UnitVespene", 1), c_unitCreateIgnorePlacement, autoA79938BC_var, UnitGetPosition(UnitGroupUnit(lv_geysers, 1)));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Factions", libCOMI_gv_selectedEnemyFaction, "UnitWorker", 1), c_unitCreateIgnorePlacement, autoA79938BC_var, MidPoint(UnitGetPosition(UnitGroupUnit(lv_geysers, 1)), UnitGetPosition(lv_unit)));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Factions", libCOMI_gv_selectedEnemyFaction, "UnitVespene", 1), c_unitCreateIgnorePlacement, autoA79938BC_var, UnitGetPosition(UnitGroupUnit(lv_geysers, 2)));
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Factions", libCOMI_gv_selectedEnemyFaction, "UnitWorker", 1), c_unitCreateIgnorePlacement, autoA79938BC_var, MidPoint(UnitGetPosition(UnitGroupUnit(lv_geysers, 2)), UnitGetPosition(lv_unit)));
                        lv_minerals = UnitGroup(null, 0, RegionCircle(UnitGetPosition(lv_unit), 15.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), (lv_preplacedWorkers - 2));
                        auto17E31671_ae = (lv_preplacedWorkers - 2);
                        auto17E31671_var = 1;
                        for ( ; auto17E31671_var <= auto17E31671_ae; auto17E31671_var += 1 ) {
                            if ((UnitGroupCount(lv_minerals, c_unitCountAlive) > 0)) {
                                lv_mineral = UnitGroupRandomUnit(lv_minerals, c_unitCountAlive);
                                UnitGroupRemove(lv_minerals, lv_mineral);
                                libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Factions", libCOMI_gv_selectedEnemyFaction, "UnitWorker", 1), c_unitCreateIgnorePlacement, autoA79938BC_var, MidPoint(UnitGetPosition(lv_mineral), UnitGetPosition(lv_unit)));
                            }

                        }
                    }

                }
            }

        }
    }
}

void libCOMI_gf_DoodadsReplacement (string lp_race, string lp_raceObjects, region lp_region) {
    // Variable Declarations
    int lv_i;
    int lv_raceIndex;
    region lv_doodadsRegion;
    string lv_factionDoodadsRace;
    string lv_coopTerrainDoodad;
    bool lv_doodadAllowed;
    unit lv_unit;
    string lv_actor;
    string lv_factionObjectsRace;
    string lv_coopTerrainObject;

    // Automatic Variable Declarations
    int autoBEE80820_ae;
    const int autoBEE80820_ai = 1;
    int auto45D1E95F_ae;
    const int auto45D1E95F_ai = 1;
    int auto4CEEA988_ae;
    const int auto4CEEA988_ai = 1;
    int auto2EB47B8B_ae;
    const int auto2EB47B8B_ai = 1;
    unitgroup auto366B3CEA_g;
    int auto366B3CEA_u;

    // Variable Initialization
    lv_doodadsRegion = lp_region;
    lv_factionDoodadsRace = lp_race;
    lv_factionObjectsRace = lp_raceObjects;

    // Implementation
    if ((lv_doodadsRegion != null)) {
        autoBEE80820_ae = UserDataInstanceCount("Doodads");
        lv_i = 1;
        for ( ; ( (autoBEE80820_ai >= 0 && lv_i <= autoBEE80820_ae) || (autoBEE80820_ai < 0 && lv_i >= autoBEE80820_ae) ) ; lv_i += autoBEE80820_ai ) {
            lv_coopTerrainDoodad = UserDataInstance("Doodads", lv_i);
            lv_doodadAllowed = false;
            auto45D1E95F_ae = UserDataFieldValueCount("Doodads", "Race");
            lv_raceIndex = 1;
            for ( ; ( (auto45D1E95F_ai >= 0 && lv_raceIndex <= auto45D1E95F_ae) || (auto45D1E95F_ai < 0 && lv_raceIndex >= auto45D1E95F_ae) ) ; lv_raceIndex += auto45D1E95F_ai ) {
                if ((lv_factionDoodadsRace == UserDataGetGameLink("Doodads", lv_coopTerrainDoodad, "Race", lv_raceIndex))) {
                    lv_doodadAllowed = true;
                }

            }
            if ((lv_doodadAllowed == false)) {
                lv_actor = UserDataGetGameLink("Doodads", lv_coopTerrainDoodad, "Actor", 1);
                libNtve_gf_ShowHideDoodadsInRegion(false, lv_doodadsRegion, lv_actor);
            }
            else {
                libNtve_gf_ShowHideDoodadsInRegion(true, lv_doodadsRegion, lv_actor);
            }
        }
        auto4CEEA988_ae = UserDataInstanceCount("Terrain");
        lv_i = 1;
        for ( ; ( (auto4CEEA988_ai >= 0 && lv_i <= auto4CEEA988_ae) || (auto4CEEA988_ai < 0 && lv_i >= auto4CEEA988_ae) ) ; lv_i += auto4CEEA988_ai ) {
            lv_coopTerrainObject = UserDataInstance("Terrain", lv_i);
            lv_doodadAllowed = false;
            auto2EB47B8B_ae = UserDataFieldValueCount("Terrain", "Race");
            lv_raceIndex = 1;
            for ( ; ( (auto2EB47B8B_ai >= 0 && lv_raceIndex <= auto2EB47B8B_ae) || (auto2EB47B8B_ai < 0 && lv_raceIndex >= auto2EB47B8B_ae) ) ; lv_raceIndex += auto2EB47B8B_ai ) {
                if ((lv_factionObjectsRace == UserDataGetGameLink("Terrain", lv_coopTerrainObject, "Race", lv_raceIndex))) {
                    lv_doodadAllowed = true;
                }

            }
            if ((lv_doodadAllowed == false)) {
                auto366B3CEA_g = UnitGroup(UserDataGetGameLink("Terrain", lv_coopTerrainObject, "Unit", 1), 0, lv_doodadsRegion, UnitFilter(0, 0, 0, 0), 0);
                auto366B3CEA_u = UnitGroupCount(auto366B3CEA_g, c_unitCountAll);
                for (;; auto366B3CEA_u -= 1) {
                    lv_unit = UnitGroupUnitFromEnd(auto366B3CEA_g, auto366B3CEA_u);
                    if (lv_unit == null) { break; }
                    UnitRemove(lv_unit);
                }
            }

        }
    }

}

void libCOMI_gf_CreateSplatAtPoint (point lp_location, string lp_actorData) {
    // Variable Declarations
    actor lv_actorObject;
    string lv_actor;
    string lv_model;
    fixed lv_scale;
    int lv_variation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scale = 1.0;
    lv_variation = 1;

    // Implementation
    if ((lp_actorData == null)) {
        return ;
    }

    lv_actor = UserDataGetActor("MissionActors", lp_actorData, "Actor", 1);
    lv_scale = UserDataGetFixed("MissionActors", lp_actorData, "Scale", 1);
    lv_variation = UserDataGetInt("MissionActors", lp_actorData, "Variation", 1);
    lv_model = ((lv_actor));
    if (((lv_actor == null) || (lv_actor == "NONE"))) {
        return ;
    }

    libNtve_gf_CreateActorAtPoint(lv_actor, lp_location);
    lv_actorObject = libNtve_gf_ActorLastCreated();
    ActorSend(lv_actorObject, libNtve_gf_ModelSwap(lv_model, (lv_variation - 1)));
    ActorSend(lv_actorObject, libNtve_gf_SetScale(lv_scale, lv_scale, lv_scale, 0.0));
    ActorSend(lv_actorObject, libNtve_gf_SetScale(0.99, lv_scale, lv_scale, 0.0));
    ActorSend(lv_actorObject, "SetOpacity 0.900000");
}

void libCOMI_gf_AddDefaultOptionalResources () {
    // Variable Declarations
    fixed lv_r;
    int lv_player;
    point lv_startPoint;
    point lv_expansionPoint;
    int lv_tT;
    int lv_pP;
    int lv_mM;
    int lv_nN;
    int lv_maxPlayersInTeam;
    int lv_all;
    unitgroup lv_units;

    // Automatic Variable Declarations
    const int auto887641F5_ae = 2;
    const int auto887641F5_ai = 1;
    int auto027A3A1E_ae;
    const int auto027A3A1E_ai = 1;
    int autoF80A9D84_ae;
    const int autoF80A9D84_ai = 1;
    const int autoC19C56B5_ae = 9;
    const int autoC19C56B5_ai = 1;

    // Variable Initialization
    lv_r = libCOMI_gf_ResourcesRadius();
    lv_player = 1;
    lv_all = c_resourceTypeCustom;
    lv_units = UnitGroupEmpty();

    // Implementation
    lv_tT = 1;
    for ( ; ( (auto887641F5_ai >= 0 && lv_tT <= auto887641F5_ae) || (auto887641F5_ai < 0 && lv_tT >= auto887641F5_ae) ) ; lv_tT += auto887641F5_ai ) {
        if ((lv_tT == 1)) {
            lv_maxPlayersInTeam = libCOMI_gv_maxAlliesPlayersOnMap;
        }
        else {
            lv_maxPlayersInTeam = libCOMI_gv_maxAmonPlayersOnMap;
        }
        auto027A3A1E_ae = lv_maxPlayersInTeam;
        lv_pP = 0;
        for ( ; ( (auto027A3A1E_ai >= 0 && lv_pP <= auto027A3A1E_ae) || (auto027A3A1E_ai < 0 && lv_pP >= auto027A3A1E_ae) ) ; lv_pP += auto027A3A1E_ai ) {
            autoF80A9D84_ae = lv_maxPlayersInTeam;
            lv_mM = 0;
            for ( ; ( (autoF80A9D84_ai >= 0 && lv_mM <= autoF80A9D84_ae) || (autoF80A9D84_ai < 0 && lv_mM >= autoF80A9D84_ae) ) ; lv_mM += autoF80A9D84_ai ) {
                lv_nN = 0;
                for ( ; ( (autoC19C56B5_ai >= 0 && lv_nN <= autoC19C56B5_ae) || (autoC19C56B5_ai < 0 && lv_nN >= autoC19C56B5_ae) ) ; lv_nN += autoC19C56B5_ai ) {
                    if ((lv_tT == 1)) {
                        lv_startPoint = libCOMI_gf_GetAllyStartPosition(lv_pP, lv_nN, lv_mM);
                        lv_expansionPoint = libCOMI_gf_GetAllyExpansionPosition(lv_pP, lv_nN, lv_mM);
                    }
                    else {
                        lv_startPoint = libCOMI_gf_GetAmonStartPosition(lv_pP, lv_nN, lv_mM);
                        lv_expansionPoint = libCOMI_gf_GetAmonExpansionPosition(lv_pP, lv_nN, lv_mM);
                    }
                    if ((lv_startPoint != null)) {
                        lv_units = libARRA_gf_GetResourcesNearPoint(lv_startPoint, lv_r, lv_all);
                        if ((UnitGroupCount(lv_units, c_unitCountAlive) > 0) && (lv_pP <= lv_mM)) {
                            libCOMI_gf_AddOptionalUnits(lv_tT, libARRA_gf_IIF8(lv_mM, 1), lv_units);
                        }

                    }

                    if ((lv_expansionPoint != null)) {
                        lv_units = libARRA_gf_GetResourcesNearPoint(lv_expansionPoint, lv_r, lv_all);
                        if ((UnitGroupCount(lv_units, c_unitCountAlive) > 0) && (lv_pP <= lv_mM)) {
                            libCOMI_gf_AddOptionalUnits(lv_tT, libARRA_gf_IIF8(lv_mM, 1), lv_units);
                        }

                    }

                }
            }
        }
    }
}

string libCOMI_gf_CoopAIUnitCategory (int lp_category, int lp_player) {
    // Variable Declarations
    string lv_personality;
    string lv_faction;
    string lv_unitCategories;
    string lv_unitType;

    // Automatic Variable Declarations
    int auto836A26D3_val;

    // Variable Initialization
    lv_personality = libCOMI_gf_GetCoopAIPersonality(lp_player);
    lv_faction = UserDataGetUserInstance("Compositions", lv_personality, "Faction", 1);
    lv_unitCategories = UserDataGetUserInstance("Factions", lv_faction, "Units", 1);

    // Implementation
    auto836A26D3_val = lp_category;
    if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundCaster) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCaster", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_Detector) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitDetector", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatDetector) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "ZZUnitDetectorDanger", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_StructureMain) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitTownHall", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_StructureSupply) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitFood", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_Transport) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitTransport", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_Worker) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitWorker", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatSupport) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitSupport", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundLightA) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundLightB) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 2);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundLightC) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 3);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundLightD) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 4);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundHeavyA) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 5);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundHeavyB) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 6);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundHeavyC) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 7);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundHeavyD) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 8);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatAirLightA) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 9);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatAirLightB) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 10);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatAirHeavyA) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 11);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatAirHeavyB) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 12);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatAirUltimate) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitUltimate", 1);
    }
    else if (auto836A26D3_val == libCOMI_ge_UnitCategory_CombatGroundUltimate) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, "UnitCombat", 12);
    }
    else {
    }
    return lv_unitType;
}

unitgroup libCOMI_gf_CoopAiUnitsbyCategory (int lp_category, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_FactionUnitsbyCategory(lp_category, lp_player, UserDataGetUserInstance("Compositions", libCOMI_gf_GetCoopAIPersonality(lp_player), "Faction", 1));
}

unitgroup libCOMI_gf_FactionUnitsbyCategory (int lp_category, int lp_player, string lp_faction) {
    // Variable Declarations
    string lv_faction;
    string lv_unitType;
    unitgroup lv_units;
    unitgroup lv_units2;
    string lv_category;

    // Automatic Variable Declarations
    int auto3A63E117_val;
    int autoB9B0E9C7_ae;
    int autoB9B0E9C7_var;

    // Variable Initialization
    lv_faction = lp_faction;
    lv_units = UnitGroupEmpty();
    lv_units2 = UnitGroupEmpty();

    // Implementation
    auto3A63E117_val = lp_category;
    if (auto3A63E117_val == libCOMI_ge_UnitCategory_CombatGroundCaster) {
        lv_category = "UnitCaster";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_Detector) {
        lv_category = "UnitDetector";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_CombatDetector) {
        lv_category = "ZZUnitDetectorDanger";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_StructureMain) {
        lv_category = "UnitTownHall";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_StructureSupply) {
        lv_category = "UnitFood";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_Transport) {
        lv_category = "UnitTransport";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_Worker) {
        lv_category = "UnitWorker";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_CombatSupport) {
        lv_category = "UnitSupport";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_Combat) {
        lv_category = "UnitCombat";
    }
    else if (auto3A63E117_val == libCOMI_ge_UnitCategory_CombatAirUltimate) {
        lv_category = "UnitUltimate";
    }
    else {
    }
    autoB9B0E9C7_ae = UserDataFieldValueCount("Factions", lv_category);
    autoB9B0E9C7_var = 1;
    for ( ; autoB9B0E9C7_var <= autoB9B0E9C7_ae; autoB9B0E9C7_var += 1 ) {
        lv_unitType = UserDataGetUnit("Factions", lv_faction, lv_category, autoB9B0E9C7_var);
        if ((lv_unitType != null)) {
            lv_units2 = UnitGroup(lv_unitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_units, lv_units2);
        }

    }
    return lv_units;
}

bool libCOMI_gf_IsCoopUnitfromCategory (int lp_category, string lp_unitType, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_IsUnitfromFactionCategory(lp_category, lp_unitType, libCOMI_gf_GetCoopAIPersonality(lp_player));
}

bool libCOMI_gf_IsUnitfromFactionCategory (int lp_category, string lp_unitType, string lp_faction) {
    // Variable Declarations
    string lv_faction;
    string lv_unitTypeIndex;
    string lv_category;

    // Automatic Variable Declarations
    int autoE66FD33F_val;
    int autoBC64D80B_ae;
    int autoBC64D80B_var;

    // Variable Initialization

    // Implementation
    autoE66FD33F_val = lp_category;
    if (autoE66FD33F_val == libCOMI_ge_UnitCategory_StructureRefinery) {
        lv_category = "UnitVespene";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_StructureDefense) {
        lv_category = "UnitDefense";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_CombatGroundCaster) {
        lv_category = "UnitCaster";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_Detector) {
        lv_category = "UnitDetector";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_StructureSupply) {
        lv_category = "UnitFood";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_CombatDetector) {
        lv_category = "ZZUnitDetectorDanger";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_StructureMain) {
        lv_category = "UnitTownHall";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_Transport) {
        lv_category = "UnitTransport";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_Worker) {
        lv_category = "UnitWorker";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_CombatSupport) {
        lv_category = "UnitSupport";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_Combat) {
        lv_category = "UnitCombat";
    }
    else if (autoE66FD33F_val == libCOMI_ge_UnitCategory_CombatAirUltimate) {
        lv_category = "UnitUltimate";
    }
    else {
    }
    autoBC64D80B_ae = UserDataFieldValueCount("Factions", lv_category);
    autoBC64D80B_var = 1;
    for ( ; autoBC64D80B_var <= autoBC64D80B_ae; autoBC64D80B_var += 1 ) {
        lv_unitTypeIndex = UserDataGetUnit("Factions", lv_faction, lv_category, autoBC64D80B_var);
        if ((lv_unitTypeIndex == lp_unitType)) {
            return true;
        }

    }
    return false;
}

void libCOMI_gf_RemoveUnitAndCreep (unit lp_unit) {
    // Variable Declarations
    fixed lv_radius;
    point lv_position;

    // Automatic Variable Declarations
    string autoB84ED03D_val;

    // Variable Initialization

    // Implementation
    lv_position = UnitGetPosition(lp_unit);
    UnitRemove(lp_unit);
    autoB84ED03D_val = UnitGetType(lp_unit);
    if (autoB84ED03D_val == "SICommandCenter") {
        lv_radius = 32.0;
    }
    else if (autoB84ED03D_val == "CreepTumor") {
        lv_radius = 10.5;
    }
    else if (autoB84ED03D_val == "CreepTumorBurrowed") {
        lv_radius = 10.5;
    }
    else if (autoB84ED03D_val == "CreepTumorUsed") {
        lv_radius = 10.5;
    }
    else if (autoB84ED03D_val == "CreepTumor") {
        lv_radius = 10.5;
    }
    else if (autoB84ED03D_val == "NydusCanal") {
        lv_radius = 10.5;
    }
    else if (autoB84ED03D_val == "Hatchery") {
        lv_radius = 12.5;
    }
    else if (autoB84ED03D_val == "Lair") {
        lv_radius = 12.5;
    }
    else if (autoB84ED03D_val == "Hive") {
        lv_radius = 12.5;
    }
    else {
    }
    if ((lv_radius > 0.0)) {
        CreepModify(lv_position, lv_radius, false, false);
    }

}

void libCOMI_gf_CreateUnitAndCreep (int lp_pLAYER, string lp_tYPE, point lp_pOSITION, fixed lp_fACING, bool lp_hIDDEN, int lp_bULLY) {
    // Variable Declarations
    fixed lv_cREEP;
    string lv_tYPE;
    point lv_pOSITION;
    fixed lv_fACING;
    bool lv_hIDDEN;
    unit lv_uNIT;

    // Automatic Variable Declarations
    string auto1343882A_val;

    // Variable Initialization
    lv_tYPE = lp_tYPE;
    lv_pOSITION = lp_pOSITION;
    lv_fACING = lp_fACING;
    lv_hIDDEN = lp_hIDDEN;

    // Implementation
    auto1343882A_val = lv_tYPE;
    if (auto1343882A_val == "SICommandCenter") {
        lv_cREEP = 32.0;
    }
    else if (auto1343882A_val == "CreepTumor") {
        lv_cREEP = 10.5;
    }
    else if (auto1343882A_val == "CreepTumorBurrowed") {
        lv_cREEP = 10.5;
    }
    else if (auto1343882A_val == "CreepTumorUsed") {
        lv_cREEP = 10.5;
    }
    else if (auto1343882A_val == "NydusCanal") {
        lv_cREEP = 10.5;
    }
    else if (auto1343882A_val == "Hatchery") {
        lv_cREEP = 12.5;
    }
    else if (auto1343882A_val == "Lair") {
        lv_cREEP = 12.5;
    }
    else if (auto1343882A_val == "Hive") {
        lv_cREEP = 12.5;
    }
    else {
    }
    if ((lv_cREEP > 0.0)) {
        CreepModify(lv_pOSITION, lv_cREEP, true, false);
    }

    AIAddBully(lp_pLAYER, lp_tYPE, lp_pOSITION, lp_bULLY);
    UnitCreate(1, lp_tYPE, c_unitCreateIgnorePlacement, lp_pLAYER, lp_pOSITION, lv_fACING);
    lv_uNIT = UnitLastCreated();
    if ((lv_hIDDEN == true)) {
        libNtve_gf_ShowHideUnit(lv_uNIT, false);
    }

    if ((libNtve_gf_UnitAbilityByFilters(lv_uNIT, c_classIdCAbilTransport, "") != "") && (libNtve_gf_UnitAbilityByFilters(lv_uNIT, c_classIdCAbilMove, "") != "")) {
        AISetUnitScriptControlled(lv_uNIT, false);
    }

}

void libCOMI_gf_ShareVisionofUnitCoop (unit lp_unit, bool lp_shareUnshare, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), lp_player) == true)) {
        if ((lp_shareUnshare == true)) {
            UnitGroupAdd(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
            if ((libCOMI_gv_cM_VisionShareEnabled == false)) {
                return ;
            }

        }
        else {
            UnitGroupRemove(libCOMI_gv_cM_VisionShareUnits[lp_player], lp_unit);
        }
    }

    libNtve_gf_ShareVisionofUnit(lp_unit, lp_shareUnshare, lp_player);
}

void libCOMI_gf_ShareVisionofUnitWithHumansCoop (unit lp_unit, bool lp_shareUnshare) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto5067DF11_g;

    // Variable Initialization

    // Implementation
    auto5067DF11_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto5067DF11_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_ShareVisionofUnitCoop(lp_unit, lp_shareUnshare, lv_indexPlayer);
    }
}

void libCOMI_gf_CM_VisionShareEnable (bool lp_enable) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;
    bool lv_shareUnshare;
    int lv_aIPlayer;

    // Automatic Variable Declarations
    playergroup auto1DE572BF_g;
    unitgroup auto9D7EC34C_g;
    int auto9D7EC34C_u;
    playergroup autoD3C255DD_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VisionShareEnabled = lp_enable;
    if ((lp_enable == true)) {
        lv_shareUnshare = true;
    }
    else {
        lv_shareUnshare = false;
    }
    auto1DE572BF_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1DE572BF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto9D7EC34C_g = libCOMI_gv_cM_VisionShareUnits[lv_indexPlayer];
        auto9D7EC34C_u = UnitGroupCount(auto9D7EC34C_g, c_unitCountAll);
        for (;; auto9D7EC34C_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto9D7EC34C_g, auto9D7EC34C_u);
            if (lv_indexUnit == null) { break; }
            libNtve_gf_ShareVisionofUnit(lv_indexUnit, lv_shareUnshare, lv_indexPlayer);
        }
        autoD3C255DD_g = libCOMI_gv_cM_SharedVisionPlayers[lv_indexPlayer];
        lv_aIPlayer = -1;
        while (true) {
            lv_aIPlayer = PlayerGroupNextPlayer(autoD3C255DD_g, lv_aIPlayer);
            if (lv_aIPlayer < 0) { break; }
            libCOMI_gf_SetAllianceAspectCoop(lv_aIPlayer, c_allianceIdVision, lv_indexPlayer, true);
        }
    }
}

void libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild (unit lp_parent, unit lp_child) {
    // Variable Declarations
    string lv_b;
    int lv_bstackcount;
    fixed lv_totaldmgmultiplier;
    fixed lv_totalattackratemultiplier;
    int lv_behaviorplayer;

    // Automatic Variable Declarations
    unit autoE98657EB_u;
    int autoE98657EB_i;

    // Variable Initialization

    // Implementation
    lv_totaldmgmultiplier = 0.0;
    lv_totalattackratemultiplier = 1.0;
    autoE98657EB_u = lp_parent;
    autoE98657EB_i = 1;
    for ( ; autoE98657EB_i <= UnitBehaviorCountAll(autoE98657EB_u) ; autoE98657EB_i += BoolToInt(lv_b == UnitBehaviorGet(autoE98657EB_u, autoE98657EB_i)) ) {
        lv_b = UnitBehaviorGet(autoE98657EB_u, autoE98657EB_i);
        lv_bstackcount = UnitBehaviorCount(lp_parent, lv_b);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_b, "BehaviorCategories[" + IntToString(c_unitBehaviorFlagFast) + "]", c_playerAny) == 1)) {
            lv_behaviorplayer = UnitBehaviorEffectPlayer(lp_parent, lv_b, c_effectPlayerOrigin, 0);
            lv_totaldmgmultiplier += (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_b, "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_behaviorplayer) * lv_bstackcount);
            lv_totalattackratemultiplier *= Pow(libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lv_b, "Modification.AttackSpeedMultiplier", lv_behaviorplayer), lv_bstackcount);
        }

    }
    libCOMI_gf_SetUnitBuffMultiplier(lp_child, lv_totalattackratemultiplier, "TriggerAttackRate", 1.01, libCOMI_ge_UnitBuffMultiplierMethod_Exponential);
    libCOMI_gf_SetUnitBuffMultiplier(lp_child, lv_totaldmgmultiplier, "TriggerDamageMultiplier", 0.01, libCOMI_ge_UnitBuffMultiplierMethod_Linear);
}

bool libCOMI_gf_CC_UnitTypeIsTownHall (string lp_unitType) {
    // Variable Declarations
    string lv_townHallIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unitType, "FlagArray[" + IntToString(16) + "]", c_playerAny) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup libCOMI_gf_CC_TownHallsForPlayer (int lp_player) {
    // Variable Declarations
    unitgroup lv_townHallGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_townHallGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_townHallGroup, UnitGroup(null, lp_player, null, UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    return lv_townHallGroup;
}

unit libCOMI_gf_CM_PrimaryTownHall (int lp_player) {
    // Variable Declarations
    fixed lv_distance;
    unitgroup lv_hatcheryGroup;
    unit lv_closestHatchery;
    unit lv_indexTownHall;

    // Automatic Variable Declarations
    unitgroup autoC0868BF8_g;
    int autoC0868BF8_u;

    // Variable Initialization
    lv_distance = 500.0;
    lv_hatcheryGroup = UnitGroupEmpty();

    // Implementation
    if (((UnitIsAlive(libCOMI_gv_cM_PrimaryTownHall[lp_player]) == false) || (UnitFilterMatch(libCOMI_gv_cM_PrimaryTownHall[lp_player], lp_player, UnitFilter((1 << c_targetFilterGround), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false))) {
        lv_hatcheryGroup = libCOMI_gf_CC_TownHallsForPlayer(lp_player);
        autoC0868BF8_g = lv_hatcheryGroup;
        autoC0868BF8_u = UnitGroupCount(autoC0868BF8_g, c_unitCountAll);
        for (;; autoC0868BF8_u -= 1) {
            lv_indexTownHall = UnitGroupUnitFromEnd(autoC0868BF8_g, autoC0868BF8_u);
            if (lv_indexTownHall == null) { break; }
            if ((DistanceBetweenPoints(libARRA_gf_GetPlayerStartPosition(lp_player), UnitGetPosition(lv_indexTownHall)) < lv_distance)) {
                lv_distance = DistanceBetweenPoints(libARRA_gf_GetPlayerStartPosition(lp_player), UnitGetPosition(lv_indexTownHall));
                lv_closestHatchery = lv_indexTownHall;
            }

        }
        if ((lv_closestHatchery != null)) {
            libCOMI_gv_cM_PrimaryTownHall[lp_player] = lv_closestHatchery;
        }
        else {
            libCOMI_gv_cM_PrimaryTownHall[lp_player] = null;
        }
    }

    return libCOMI_gv_cM_PrimaryTownHall[lp_player];
}

fixed libCOMI_gf_ExpansionRockLife (int lp_rockType) {
    // Variable Declarations
    fixed lv_rockLife;
    int lv_difficulty;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_GetMissionDifficulty();
    if ((lp_rockType == libCOMI_ge_ExpansionRockType_GeyserRock)) {
        if (((lv_difficulty == 1) || (lv_difficulty == 2))) {
            lv_rockLife = 500.0;
        }
        else {
            lv_rockLife = 1000.0;
        }
    }

    if ((lp_rockType == libCOMI_ge_ExpansionRockType_TownHallRock)) {
        if (((lv_difficulty == 1) || (lv_difficulty == 2))) {
            lv_rockLife = 1000.0;
        }
        else {
            lv_rockLife = 2000.0;
        }
    }

    return lv_rockLife;
}

void libCOMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorSpawn(lp_hatchery, "SpawnLarva", lp_larvaCount);
}

void libCOMI_gf_CreateStartingUnitsForPlayer (int lp_player, point lp_location) {
    // Variable Declarations
    actor lv_actor;
    string lv_commander;
    string lv_faction;
    string lv_uNIT_TOWNHALL;
    string lv_uNIT_SUPPORT;
    string lv_uNIT_REFINERY;
    string lv_uNIT_WORKER;
    unitgroup lv_minerals;
    unitgroup lv_vespene;
    unit lv_townhall;
    string lv_behavior;
    int lv_iteration;
    int lv_round;
    unit lv_mineralUnit;
    unit lv_workerUnit;
    point lv_mineralPoint;
    point lv_targetPoint;
    string lv_actorInstance;
    string lv_ability;
    abilcmd lv_abilityCommand;
    int lv_abilityCommandIndex;
    string lv_unitUserData;

    // Automatic Variable Declarations
    int auto8B953206_ae;
    int auto8B953206_var;
    unitgroup autoE49DCEAB_g;
    int autoE49DCEAB_u;
    unit autoE49DCEAB_var;
    const int autoF1B59A7F_ae = 12;
    int autoF1B59A7F_var;

    // Variable Initialization
    lv_commander = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
    lv_faction = UserDataGetUserInstance("Commanders", lv_commander, "Faction", 1);
    lv_uNIT_TOWNHALL = UserDataGetUnit("Factions", lv_faction, "UnitTownHall", 1);
    lv_uNIT_SUPPORT = UserDataGetUnit("Factions", lv_faction, "UnitExtra", 1);
    lv_uNIT_REFINERY = UserDataGetUnit("Factions", lv_faction, "UnitRefinery", 1);
    lv_uNIT_WORKER = UserDataGetUnit("Factions", lv_faction, "UnitPeon", 1);
    lv_minerals = libARRA_gf_GetResourcesNearPoint(lp_location, libCOMI_gf_ResourcesRadius(), c_resourceTypeMinerals);
    lv_vespene = libARRA_gf_GetResourcesNearPoint(lp_location, libCOMI_gf_ResourcesRadius(), c_resourceTypeVespene);
    lv_iteration = 1;
    lv_round = 1;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_uNIT_TOWNHALL, 0, lp_player, lp_location);
    lv_townhall = UnitLastCreated();
    libCOMI_gv_cM_PrimaryTownHall[lp_player] = lv_townhall;
    lv_ability = libNtve_gf_UnitAbilityGetByType(lv_townhall, c_classIdCAbilRally, 1);
    lv_unitUserData = libCOMI_gf_UnitUserData(lv_uNIT_TOWNHALL);
    lv_abilityCommandIndex = UserDataGetInt("UnitData", lv_unitUserData, "WorkersRallyIndex", 1);
    lv_abilityCommand = AbilityCommand(lv_ability, lv_abilityCommandIndex);
    UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(lv_townhall), OrderTargetingUnit(lv_abilityCommand, UnitGroupClosestToPoint(lv_minerals, lp_location)), c_orderQueueAddToFront);
    auto8B953206_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT_TOWNHALL, "BehaviorArray", lp_player) - 1);
    auto8B953206_var = 0;
    for ( ; auto8B953206_var <= auto8B953206_ae; auto8B953206_var += 1 ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT_TOWNHALL, "BehaviorArray[" + IntToString(auto8B953206_var) + "].Link", lp_player));
        if ((CatalogEntryClass(c_gameCatalogBehavior, lv_behavior) == libARRA_gv_cBehaviorCreep)) {
            CreepModify(UnitGetPosition(lv_townhall), 11.0, true, false);
        }

    }
    lv_actorInstance = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyTownHallActor", 1);
    libCOMI_gf_CreateSplatAtPoint(UnitGetPosition(lv_townhall), lv_actorInstance);
    if ((lv_uNIT_SUPPORT != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_uNIT_SUPPORT, 0, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_minerals), 11.0, lp_location));
    }

    lv_actorInstance = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyRefineryActor", 1);
    autoE49DCEAB_g = lv_vespene;
    autoE49DCEAB_u = UnitGroupCount(autoE49DCEAB_g, c_unitCountAll);
    for (;; autoE49DCEAB_u -= 1) {
        autoE49DCEAB_var = UnitGroupUnitFromEnd(autoE49DCEAB_g, autoE49DCEAB_u);
        if (autoE49DCEAB_var == null) { break; }
        libCOMI_gf_CreateSplatAtPoint(UnitGetPosition(autoE49DCEAB_var), lv_actorInstance);
    }
    autoF1B59A7F_var = 1;
    for ( ; autoF1B59A7F_var <= autoF1B59A7F_ae; autoF1B59A7F_var += 1 ) {
        lv_mineralUnit = UnitGroupUnit(lv_minerals, lv_iteration);
        lv_mineralPoint = UnitGetPosition(lv_mineralUnit);
        if ((lv_round == 1)) {
            lv_targetPoint = PointInterpolate(lp_location, lv_mineralPoint, 0.8);
        }
        else {
            lv_targetPoint = PointInterpolate(lp_location, lv_mineralPoint, 0.3);
        }
        libNtve_gf_UnitCreateFacingPoint(1, lv_uNIT_WORKER, 0, lp_player, lv_targetPoint, lv_mineralPoint);
        lv_workerUnit = UnitLastCreated();
        lv_abilityCommand = AbilityCommand(libNtve_gf_UnitAbilityGetByType(lv_workerUnit, c_classIdCAbilHarvest, 1), 0);
        UnitIssueOrder(lv_workerUnit, OrderTargetingUnit(lv_abilityCommand, lv_mineralUnit), c_orderQueueReplace);
        libNtve_gf_PauseUnit(lv_workerUnit, true);
        lv_iteration += 1;
        if ((UnitGroupCount(lv_minerals, c_unitCountAlive) < lv_iteration)) {
            lv_iteration = 1;
            lv_round += 1;
        }

    }
}

string libCOMI_gf_UnitUserData (string lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    int autoFEC7078E_ae;
    int autoFEC7078E_var;

    // Variable Initialization

    // Implementation
    autoFEC7078E_ae = UserDataInstanceCount("UnitData");
    autoFEC7078E_var = 1;
    for ( ; autoFEC7078E_var <= autoFEC7078E_ae; autoFEC7078E_var += 1 ) {
        lv_instance = UserDataInstance("UnitData", autoFEC7078E_var);
        if ((UserDataGetUnit("UnitData", lv_instance, "Unit", 1) == lp_unit)) {
            return lv_instance;
        }

    }
    return UserDataInstance("UnitData", 1);
}

bool libCOMI_gf_UnitMoverExists (string lp_unitType, string lp_mover) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Mover", c_playerAny) == lp_mover)) {
        return true;
    }
    else {
        return false;
    }
}

string libCOMI_gf_TraingingUnitTypeInAbilCommand (abilcmd lp_abilityCommand, int lp_p, int lp_unitIndex) {
    // Variable Declarations
    string lv_link;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_link = AbilityCommandGetAbility(lp_abilityCommand);
    lv_index = AbilityCommandGetCommand(lp_abilityCommand);

    // Implementation
    return UnitTypeFromString(CatalogFieldValueGet(c_gameCatalogAbil, lv_link, "InfoArray[" + IntToString(lv_index) + "].Unit[" + IntToString(lp_unitIndex) + "]", lp_p));
}

bool libCOMI_gf_HeroCanSpendSkillPoint (unit lp_hero, string lp_learnAbility) {
    // Variable Declarations
    int lv_i;
    int lv_c;
    order lv_order;

    // Automatic Variable Declarations
    int auto8C1B49B3_ae;
    const int auto8C1B49B3_ai = 1;

    // Variable Initialization
    lv_c = 19;

    // Implementation
    auto8C1B49B3_ae = lv_c;
    lv_i = 0;
    for ( ; ( (auto8C1B49B3_ai >= 0 && lv_i <= auto8C1B49B3_ae) || (auto8C1B49B3_ai < 0 && lv_i >= auto8C1B49B3_ae) ) ; lv_i += auto8C1B49B3_ai ) {
        lv_order = Order(AbilityCommand(lp_learnAbility, lv_i));
        if ((UnitOrderIsValid(lp_hero, lv_order) == true)) {
            return true;
        }

    }
    return false;
}

void libCOMI_gf_SetUnitBuffMultiplier (unit lp_unit, fixed lp_multiplierAmount, string lp_behavior, fixed lp_baseValue, int lp_method) {
    // Variable Declarations
    fixed lv_multiplierStack;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorRemove(lp_unit, lp_behavior, c_unitBehaviorCountAll);
    if ((lp_method == libCOMI_ge_UnitBuffMultiplierMethod_Exponential) && (lp_multiplierAmount != 1.0)) {
        lv_multiplierStack = libNtve_gf_Log(lp_multiplierAmount, lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
    else if ((lp_method == libCOMI_ge_UnitBuffMultiplierMethod_Linear) && (lp_multiplierAmount != 0.0)) {
        lv_multiplierStack = (lp_multiplierAmount / lp_baseValue);
        CatalogFieldValueSet(c_gameCatalogBehavior, lp_behavior, "MinPoints", UnitGetOwner(lp_unit), IntToString(CeilingI(lv_multiplierStack)));
        UnitBehaviorAddPlayer(lp_unit, lp_behavior, UnitGetOwner(lp_unit), 1);
    }
}

void libCOMI_gf_SetUnitAttributePoints (string lp_attribute, unit lp_unit, int lp_points) {
    // Variable Declarations
    int lv_originalminpoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalminpoints = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit));

    // Implementation
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lp_points));
    UnitBehaviorRemove(lp_unit, lp_attribute, 1);
    UnitBehaviorAdd(lp_unit, lp_attribute, lp_unit, 1);
    CatalogFieldValueSet(c_gameCatalogBehavior, lp_attribute, "MinPoints", UnitGetOwner(lp_unit), IntToString(lv_originalminpoints));
}

void libCOMI_gf_PlayerApplySkinSignal (int lp_player, string lp_skin, bool lp_activateDeactivate, string lp_extraMessage) {
    // Variable Declarations
    string lv_modelOld;
    int lv_i;
    int lv_c;
    string lv_entry;
    actor lv_ar;
    string lv_fromPath;
    string lv_toPath;
    string lv_replacementType;

    // Automatic Variable Declarations
    int auto26807F49_ae;
    const int auto26807F49_ai = 1;

    // Variable Initialization
    lv_modelOld = "";
    lv_c = (CatalogFieldValueCount(c_gameCatalogSkin, lp_skin, "ReplacementArray", c_playerAny) - 1);
    lv_fromPath = "From";
    lv_toPath = "To";

    // Implementation
    PlayerApplySkin(lp_player, lp_skin, lp_activateDeactivate);
    if ((lp_activateDeactivate == false)) {
        lv_fromPath = "To";
        lv_toPath = "From";
    }

    ActorRegionCreate(null, "TriggerRegion", RegionEntireMap());
    lv_ar = libNtve_gf_ActorLastCreated();
    auto26807F49_ae = lv_c;
    lv_i = 0;
    for ( ; ( (auto26807F49_ai >= 0 && lv_i <= auto26807F49_ae) || (auto26807F49_ai < 0 && lv_i >= auto26807F49_ae) ) ; lv_i += auto26807F49_ai ) {
        lv_replacementType = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, "ReplacementArray[" + IntToString(lv_i) + "].Catalog", c_playerAny);
        if ((lv_replacementType == "Model")) {
            lv_modelOld = CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, (("ReplacementArray[" + IntToString(lv_i) + "]." + lv_fromPath)), c_playerAny);
            if ((lp_extraMessage != null)) {
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Model", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
                ActorRegionSend(lv_ar, c_actorIntersectAgainstRadiusContact, lp_extraMessage, "Unit", ("ModelName " + lv_modelOld + "; PlayerId " + IntToString(lp_player) + " " + IntToString(lp_player)));
            }

        }

    }
    ActorSend(lv_ar, "Destroy");
}

void libCOMI_gf_ButtonReplacement (int lp_player, string lp_button, string lp_buttonReplacement) {
    // Variable Declarations
    string lv_pathName;
    string lv_pathTooltip;
    string lv_pathAlertTooltip;
    string lv_pathHotkey;
    string lv_pathIcon;
    string lv_pathAlertIcon;
    string lv_itPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathName = "Name";
    lv_pathTooltip = "Tooltip";
    lv_pathAlertTooltip = "AlertTooltip";
    lv_pathHotkey = "Hotkey";
    lv_pathIcon = "Icon";
    lv_pathAlertIcon = "AlertIcon";
    lv_itPath = "";

    // Implementation
    lv_itPath = lv_pathName;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertTooltip;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
    lv_itPath = lv_pathAlertIcon;
    CatalogFieldValueSet(c_gameCatalogButton, lp_button, lv_itPath, lp_player, CatalogFieldValueGet(c_gameCatalogButton, lp_buttonReplacement, lv_itPath, lp_player));
}

unitgroup libCOMI_gf_ConjoinedTrainsofTrainCar (unit lp_trainCar) {
    // Variable Declarations
    fixed lv_trainID;
    unit lv_indexTrain;
    unitgroup lv_trainCars;

    // Automatic Variable Declarations
    unitgroup auto255B490F_g;
    int auto255B490F_u;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Implementation
    lv_trainID = UnitGetCustomValue(lp_trainCar, 2);
    lv_trainCars = UnitGroup("Caboose", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngineFast", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngine", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("FreightCar", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto255B490F_g = lv_trainCars;
    auto255B490F_u = UnitGroupCount(auto255B490F_g, c_unitCountAll);
    for (;; auto255B490F_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto255B490F_g, auto255B490F_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitGetCustomValue(lv_indexTrain, 2) != lv_trainID)) {
            UnitGroupRemove(lv_trainCars, lv_indexTrain);
        }

    }
    return lv_trainCars;
}

trigger auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger = null;
unitgroup auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_trainCars;
fixed auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth;

void libCOMI_gf_SynchronizeConjoinedTrainHealth (unitgroup lp_trainCars, fixed lp_maxHealth) {
    auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_trainCars = lp_trainCars;
    auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth = lp_maxHealth;

    if (auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger == null) {
        auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger = TriggerCreate("auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_Trigger, false, false);
}

bool auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_trainCars = auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_trainCars;
    fixed lp_maxHealth = auto_libCOMI_gf_SynchronizeConjoinedTrainHealth_lp_maxHealth;

    // Variable Declarations
    fixed lv_lastseenhealth;
    int lv_lastseentrainsalive;
    fixed lv_healthdelta;
    int lv_trainsalive;
    int lv_trainsdead;
    unit lv_traincar;

    // Automatic Variable Declarations
    unitgroup auto2DAA9981_g;
    int auto2DAA9981_u;
    unitgroup auto6F300234_g;
    int auto6F300234_u;
    unitgroup autoBBEEF069_g;
    int autoBBEEF069_u;

    // Variable Initialization
    lv_lastseenhealth = lp_maxHealth;
    lv_lastseentrainsalive = UnitGroupCount(lp_trainCars, c_unitCountAlive);

    // Implementation
    while ((UnitGroupCount(lp_trainCars, c_unitCountAlive) > 0)) {
        lv_trainsalive = UnitGroupCount(lp_trainCars, c_unitCountAlive);
        lv_trainsdead = UnitGroupCount(lp_trainCars, c_unitCountDead);
        if ((lv_trainsalive == lv_lastseentrainsalive)) {
        }
        else if ((lv_trainsalive > 0) && (lv_trainsdead > 0)) {
            auto2DAA9981_g = lp_trainCars;
            auto2DAA9981_u = UnitGroupCount(auto2DAA9981_g, c_unitCountAll);
            for (;; auto2DAA9981_u -= 1) {
                lv_traincar = UnitGroupUnitFromEnd(auto2DAA9981_g, auto2DAA9981_u);
                if (lv_traincar == null) { break; }
                UnitKill(lv_traincar);
            }
            break;
        }
        else if ((lv_trainsalive > lv_lastseentrainsalive)) {
            lv_lastseentrainsalive = lv_trainsalive;
        }
        else if ((lv_trainsalive > 0)) {
            lv_lastseentrainsalive = lv_trainsalive;
        }
        else if (true) {
            break;
        }
        lv_healthdelta = 0.0;
        auto6F300234_g = UnitGroupFilter(null, c_playerAny, lp_trainCars, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6F300234_u = UnitGroupCount(auto6F300234_g, c_unitCountAll);
        for (;; auto6F300234_u -= 1) {
            lv_traincar = UnitGroupUnitFromEnd(auto6F300234_g, auto6F300234_u);
            if (lv_traincar == null) { break; }
            lv_healthdelta += (lv_lastseenhealth - UnitGetPropertyFixed(lv_traincar, c_unitPropLife, c_unitPropCurrent));
        }
        lv_lastseenhealth -= lv_healthdelta;
        if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_trainCars, UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), 0, 0), 0), c_unitCountAlive) == 0)) {
            lv_lastseenhealth = MinF(lv_lastseenhealth, lp_maxHealth);
            autoBBEEF069_g = lp_trainCars;
            autoBBEEF069_u = UnitGroupCount(autoBBEEF069_g, c_unitCountAll);
            for (;; autoBBEEF069_u -= 1) {
                lv_traincar = UnitGroupUnitFromEnd(autoBBEEF069_g, autoBBEEF069_u);
                if (lv_traincar == null) { break; }
                UnitSetPropertyFixed(lv_traincar, c_unitPropLife, lv_lastseenhealth);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

trigger auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger = null;
unit auto_libCOMI_gf_FindandAttackNearestEnemy_lp_attacker;
fixed auto_libCOMI_gf_FindandAttackNearestEnemy_lp_searchRadius;
fixed auto_libCOMI_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
fixed auto_libCOMI_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
unitfilter auto_libCOMI_gf_FindandAttackNearestEnemy_lp_targetFilter;
unitfilter auto_libCOMI_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

void libCOMI_gf_FindandAttackNearestEnemy (unit lp_attacker, fixed lp_searchRadius, fixed lp_satisfiedPathingDistance, fixed lp_thinkPeriod, unitfilter lp_targetFilter, unitfilter lp_fallbackTargetFilter) {
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_attacker = lp_attacker;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_searchRadius = lp_searchRadius;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance = lp_satisfiedPathingDistance;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_thinkPeriod = lp_thinkPeriod;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_targetFilter = lp_targetFilter;
    auto_libCOMI_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter = lp_fallbackTargetFilter;

    if (auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger == null) {
        auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger = TriggerCreate("auto_libCOMI_gf_FindandAttackNearestEnemy_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_FindandAttackNearestEnemy_Trigger, false, false);
}

bool auto_libCOMI_gf_FindandAttackNearestEnemy_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attacker = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_attacker;
    fixed lp_searchRadius = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_searchRadius;
    fixed lp_satisfiedPathingDistance = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_satisfiedPathingDistance;
    fixed lp_thinkPeriod = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_thinkPeriod;
    unitfilter lp_targetFilter = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_targetFilter;
    unitfilter lp_fallbackTargetFilter = auto_libCOMI_gf_FindandAttackNearestEnemy_lp_fallbackTargetFilter;

    // Variable Declarations
    fixed lv_safethinkperiod;
    point lv_attacktargetpoint;
    unit lv_bestattacktargetunit;
    fixed lv_bestpathingdistance;
    unit lv_currentattacktargetunit;
    fixed lv_currentpathingdistance;

    // Automatic Variable Declarations
    unitgroup auto75294CD3_g;
    int auto75294CD3_u;

    // Variable Initialization
    lv_safethinkperiod = MaxF(lp_thinkPeriod, 0.5);

    // Implementation
    while ((UnitIsAlive(lp_attacker) == true)) {
        lv_bestpathingdistance = 10000.0;
        auto75294CD3_g = UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_attacker), lp_searchRadius), lp_targetFilter, 0);
        auto75294CD3_u = UnitGroupCount(auto75294CD3_g, c_unitCountAll);
        for (;; auto75294CD3_u -= 1) {
            lv_currentattacktargetunit = UnitGroupUnitFromEnd(auto75294CD3_g, auto75294CD3_u);
            if (lv_currentattacktargetunit == null) { break; }
            if ((libNtve_gf_UnitCanCreateEffectOnUnit(lv_currentattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_currentattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_currentattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                lv_currentpathingdistance = AIPathingCostUnit(lp_attacker, UnitGetPosition(lv_currentattacktargetunit), c_ignoreEnemyBuildings);
                if ((lv_currentpathingdistance < lp_satisfiedPathingDistance)) {
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                    break;
                }
                else if ((lv_currentpathingdistance < lv_bestpathingdistance)) {
                    lv_bestpathingdistance = lv_currentpathingdistance;
                    lv_bestattacktargetunit = lv_currentattacktargetunit;
                }
            }

        }
        if ((UnitIsAlive(lv_bestattacktargetunit) == false)) {
            lv_bestattacktargetunit = UnitGroupClosestToPoint(UnitGroupAlliance(UnitGetOwner(lp_attacker), c_unitAllianceEnemy, RegionEntireMap(), lp_fallbackTargetFilter, 0), UnitGetPosition(lp_attacker));
        }

        if ((UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
            while ((UnitIsAlive(lp_attacker) == true) && (UnitIsAlive(lv_bestattacktargetunit) == true) && (libNtve_gf_UnitCanCreateEffectOnUnit(lv_bestattacktargetunit, "ThreatTest", lp_attacker) == true) && ((UnitFilterMatch(lv_bestattacktargetunit, UnitGetOwner(lp_attacker), UnitFilter(0, 0, (1 << c_targetFilterCloaked), 0)) == true) || (libNtve_gf_UnitIsVisibleToPlayer(lv_bestattacktargetunit, UnitGetOwner(lp_attacker)) == true))) {
                UnitIssueOrder(lp_attacker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_bestattacktargetunit)), c_orderQueueReplace);
                Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
            }
        }
        else {
            Wait((lv_safethinkperiod + RandomFixed(-0.125, 0.125)), c_timeGame);
        }
    }
    return true;
}

void libCOMI_gf_InitializePathDisplay (int lp_path) {
    // Variable Declarations
    string lv_stepIconAsModel;
    string lv_stepIconAsImage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_stepIconAsModel = "Assets\\Units\\Test\\InvisibleUnit\\InvisibleUnit.m3";
    lv_stepIconAsImage = lv_stepIconAsModel;
    PathSetStepModel(lp_path, c_pathLocationWorld, lv_stepIconAsImage);
    PathSetColor(lp_path, c_pathLocationAll, Color(100.00, 100.00, 100.00));
    PathSetVisible(lp_path, c_pathLocationMinimap, false);
    PathSetMinimumLinearDistance(lp_path, 0.0);
    if ((libCOMI_gf_MutatorIsEnabled("BlackFog") == true)) {
        PathSetVisible(lp_path, c_pathLocationAll, false);
    }

}

void libCOMI_gf_SleepWakeUpUnitCoop (unit lp_unit, bool lp_sleepWakeUp, int lp_alwaysExclusions) {
    // Variable Declarations
    string lv_typeOfSleepyUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_sleepWakeUp == true) && (lp_alwaysExclusions == libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions)) {
        if ((lv_typeOfSleepyUnit != "OrbitalCommand") && (lv_typeOfSleepyUnit != "CommandCenter")) {
            libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
        }

    }
    else {
        libNtve_gf_SleepUnit(lp_unit, lp_sleepWakeUp);
    }
}

void libCOMI_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_index != 2)) {
        libCOMI_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        libCOMI_gf_SetHeroPanelUnitOverride(lp_index, lp_heroUnit, lp_player);
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_2268A908"), false);
    }
}

void libCOMI_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player) {
    // Variable Declarations
    bool lv_noValidHeroes;
    int lv_heroHotkey;
    playergroup lv_heroGroup;
    string lv_heroGroup2;
    string lv_heroGroup3;
    string lv_heroGroup4;

    // Automatic Variable Declarations
    unit autoCFE0773D_val;
    int autoEDB3F93B_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_heroGroup2 = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
    lv_heroGroup3 = UserDataGetUserInstance("Commanders", lv_heroGroup2, "Faction", 1);
    lv_heroGroup4 = UserDataGetGameLink("Factions", lv_heroGroup3, "MainRace", 1);

    // Implementation
    lv_heroGroup = PlayerGroupSingle(lp_player);
    libCOMI_gv_cU_HeroUnit[lp_index][lp_player] = lp_heroUnit;
    libCOMI_gf_CU_UpdateHeroPanel(lp_index, lp_player);
    if ((lv_heroGroup4 == "Zerg")) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchZerg");
    }
    else if ((lv_heroGroup4 == "Terr")) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "SwitchTerran");
    }
    else if ((UnitGetPropertyFixed(lp_heroUnit, c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "DefaultBarOffset");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupSingle(lp_player), "EnergyBarOffset");
    }
    libCOMI_gv_cU_HeroExists[lp_player][lp_index] = true;
    if ((libCOMI_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        libCOMI_gv_cU_HeroExists[lp_player][lp_index] = false;
    }
    else {
        TriggerEnable(libCOMI_gt_CU_HeroPanelUpdate, true);
        TriggerEnable(libCOMI_gt_CU_HeroUnitDamaged, true);
        TriggerEnable(libCOMI_gt_CU_HeroMouseHoverText, true);
        TriggerEnable(libCOMI_gt_CU_HeroUnitVitalChange, true);
        autoCFE0773D_val = lp_heroUnit;
        {
            libNtve_gf_SetDialogItemAnimationDuration(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], 60.0, lv_heroGroup);
        }
        autoEDB3F93B_val = lp_index;
        if (autoEDB3F93B_val == 1) {
            lv_heroHotkey = c_hotkeyHeroSelect0;
        }
        else if (autoEDB3F93B_val == 2) {
            lv_heroHotkey = c_hotkeyHeroSelect1;
        }
        else {
        }
        if ((lp_index <= libCOMI_gv_oBSOLETE_CUC_HeroMaxCount)) {
            libNtve_gf_SetDialogItemHotkey(libCOMI_gv_cU_HeroDialogButton[lp_index], lv_heroHotkey, lv_heroGroup);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_1FA97249"), false);
        }
    }
}

void libCOMI_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
        DialogControlSetVisible(libCOMI_gv_cU_HeroPanel[lp_index], PlayerGroupAll(), lp_showHide);
    }

}

void libCOMI_gf_CU_CreateHeroPanel (int lp_index) {
    // Automatic Variable Declarations
    int auto6F96EF6D_val;

    // Implementation
    if ((lp_index == 1)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame");
    }
    else {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame");
    }
    libCOMI_gv_cU_HeroPanel[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImage");
    libCOMI_gv_cU_HeroDialogBorderImage[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderNoEnergyImage");
    libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BorderImageAll");
    libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "LevelBox");
    libCOMI_gv_cU_HeroDialogLevelBox[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogLevelBox[lp_index], PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "CooldownImage");
    libCOMI_gv_cU_HeroDialogCooldownImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "DamageTakenImage");
    libCOMI_gv_cU_HeroDialogDamageTakenImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarImage");
    libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "EnergyBarBackground");
    libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "HealthBarImage");
    libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "BarBackground");
    libCOMI_gv_cU_HeroDialogHealthBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarImage");
    libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "ShieldBarBackground");
    libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeImage, "IconImage");
    libCOMI_gv_cU_HeroDialogIconImage[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "DamageTakenLabel");
    libCOMI_gv_cU_HeroDialogDamageTakenLabel[lp_index] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogDamageTakenLabel[lp_index], StringToText(""), PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "EnergyLabel");
    libCOMI_gv_cU_HeroDialogEnergyLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "HealthLabel");
    libCOMI_gv_cU_HeroDialogHealthLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "ShieldLabel");
    libCOMI_gv_cU_HeroDialogShieldLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "LevelLabel");
    libCOMI_gv_cU_HeroDialogLevelLabel[lp_index] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_HeroPanel[lp_index], c_triggerControlTypeLabel, "NameLabel");
    libCOMI_gv_cU_HeroDialogNameLabel[lp_index] = DialogControlLastCreated();
    auto6F96EF6D_val = lp_index;
    if (auto6F96EF6D_val == 1) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/VoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect0, PlayerGroupAll());
    }
    else if (auto6F96EF6D_val == 2) {
        DialogControlHookupStandard(c_triggerControlTypeUnitTarget, "UIContainer/ConsoleUIContainer/SecondaryVoidHeroUnitFrame/UnitTargetFrame");
        libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyHeroSelect1, PlayerGroupAll());
    }
    else {
    }
    libCOMI_gv_cU_HeroDialogButton[lp_index] = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogDamageTakenImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogHealthBarBackground[lp_index], 505, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], 511, PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index], 510, PlayerGroupAll());
}

void libCOMI_gf_CU_UpdateHeroPanel (int lp_index, int lp_player) {
    // Variable Declarations
    text lv_hotkey;
    int lv_life;
    int lv_shields;
    int lv_energy;
    playergroup lv_updateGroup;
    int lv_heroUnitIndex;
    string lv_heroUnitUserDataInstance;
    string lv_heroUnitActor;
    string lv_heroReviveLink;

    // Automatic Variable Declarations
    int autoC70421CF_val;

    // Variable Initialization
    lv_updateGroup = PlayerGroupEmpty();
    lv_heroReviveLink = "";

    // Implementation
    lv_updateGroup = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cU_HeroUnit[lp_index][lp_player] == null)) {
        if ((libCOMI_gv_cU_HeroPanel[lp_index] != c_invalidDialogControlId)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroPanel[lp_index], lv_updateGroup, false);
        }

        return ;
    }

    if ((libCOMI_gv_cU_HeroPanel[lp_index] == c_invalidDialogControlId)) {
        libCOMI_gf_CU_CreateHeroPanel(lp_index);
    }

    DialogControlSetVisible(libCOMI_gv_cU_HeroPanel[lp_index], lv_updateGroup, true);
    autoC70421CF_val = lp_index;
    if (autoC70421CF_val == 1) {
        lv_hotkey = StringExternal("Param/Value/lib_COMI_435B6348");
    }
    else if (autoC70421CF_val == 2) {
        lv_hotkey = StringExternal("Param/Value/lib_COMI_E81C0E89");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_8743E7EB", "A", UnitGetName(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]));
    TextExpressionSetToken("Param/Expression/lib_COMI_8743E7EB", "B", lv_hotkey);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogNameLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_8743E7EB"), lv_updateGroup);
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]);
    lv_heroUnitUserDataInstance = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_userData;
    lv_heroUnitActor = ((UnitGetType(libCOMI_gv_cU_HeroUnit[lp_index][lp_player])));
    libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_HeroDialogIconImage[lp_index], (CatalogFieldValueGet(c_gameCatalogActor, lv_heroUnitActor, "HeroIcon", c_playerAny)), lv_updateGroup);
    TextExpressionSetToken("Param/Expression/lib_COMI_F450DB7C", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLife, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_COMI_F450DB7C", "MaxLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifeMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogHealthLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_F450DB7C"), lv_updateGroup);
    lv_life = FixedToInt((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropLifePercent, c_unitPropCurrent) * (IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
    if ((lv_life > 0)) {
        DialogControlSetSize(libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, lv_life, libCOMI_gv_cUC_HEROUILIFEBARHEIGHT);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthBarImage[lp_index], lv_updateGroup, false);
    }
    if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, true);
        TextExpressionSetToken("Param/Expression/lib_COMI_958DABAE", "CurrentLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShields, c_unitPropCurrent), 0));
        TextExpressionSetToken("Param/Expression/lib_COMI_958DABAE", "MaxLife", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsMax, c_unitPropCurrent), 0));
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogShieldLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_958DABAE"), lv_updateGroup);
        lv_shields = FixedToInt((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropShieldsPercent, c_unitPropCurrent) * (IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((lv_shields > 0)) {
            DialogControlSetSize(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, lv_shields, libCOMI_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, true);
        }
        else {
            DialogControlSetSize(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, 1, libCOMI_gv_cUC_HEROUISHIELDBARHEIGHT);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        }
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarImage[lp_index], lv_updateGroup, false);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldBarBackground[lp_index], lv_updateGroup, false);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_AA9BB8FA", "CurrentEnergy", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergy, c_unitPropCurrent), 0));
    TextExpressionSetToken("Param/Expression/lib_COMI_AA9BB8FA", "MaxEnergy", FixedToText(UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent), 0));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogEnergyLabel[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_AA9BB8FA"), lv_updateGroup);
    if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0)) {
        lv_energy = 0;
        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, (UnitGetType(libCOMI_gv_cU_HeroUnit[lp_index][lp_player])), "ShieldsMax", c_playerAny) > 0.0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, false);
        }
    }
    else {
        lv_energy = FixedToInt((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) * (IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH) / 100.0)));
        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, (UnitGetType(libCOMI_gv_cU_HeroUnit[lp_index][lp_player])), "ShieldsMax", c_playerAny) > 0.0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, true);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageAll[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[lp_index], lv_updateGroup, false);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogBorderImage[lp_index], lv_updateGroup, true);
        }
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarBackground[lp_index], lv_updateGroup, true);
    }
    if ((lv_energy > 0)) {
        DialogControlSetSize(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, lv_energy, libCOMI_gv_cUC_HEROUIENERGYBARHEIGHT);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_HeroDialogLevelLabel[lp_index], IntToText(libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player))), lv_updateGroup);
    if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] > 0.0)) {
        libCOMI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] -= libCOMI_gv_cUC_HeroUpdateFrequency;
        if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lp_index][lp_player] <= 0.0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogDamageTakenLabel[lp_index], lv_updateGroup, false);
            DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lp_index], lv_updateGroup, 1.0, 100.0);
        }

    }

    if ((UnitIsAlive(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]) == false) && (libCOMI_gf_GameIsOver() == false)) {
        lv_heroReviveLink = libCOMI_gf_GetHeroReviveLink(libCOMI_gv_cU_HeroUnit[lp_index][lp_player]);
        if ((libCOMI_gv_cU_VoidHeroUIRevivable[lp_index][lp_player] == true) && (PlayerGetCooldown(lp_player, lv_heroReviveLink) > 0.0)) {
            libNtve_gf_SetDialogItemAnimationTime(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], (60.0 * (1 - PlayerGetCooldown(lp_player, lv_heroReviveLink)/libCOMI_gv_oBSOLETE_CU_HeroReviveTimer[lp_index][lp_player]) ), lv_updateGroup);
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, true);
        }
        else if (true) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
        }
        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lp_index][lp_player], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyBarImage[lp_index], lv_updateGroup, false);
        }

    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogCooldownImage[lp_index], lv_updateGroup, false);
    }
    libNtve_gf_SetDialogItemUnit(libCOMI_gv_cU_HeroDialogButton[lp_index], libCOMI_gv_cU_HeroUnit[lp_index][lp_player], lv_updateGroup);
}

void libCOMI_gf_CreateHeroes () {
    // Variable Declarations
    int lv_hi;
    int lv_teamIndex;
    point lv_spawnPoint;
    string lv_heroUnitType;
    string lv_heroUnitInstance;
    playergroup lv_players;

    // Automatic Variable Declarations
    string auto99430FA5_userType;
    int auto99430FA5_i;
    playergroup autoE52CE10D_g;
    int autoE52CE10D_var;

    // Variable Initialization
    lv_hi = UnitGroupCount(libCOMI_gv_heroUnits, c_unitCountAll);
    lv_players = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetAlliedCommandersPlayers(), lv_players);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetEnemyAIPlayers(), lv_players);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_GetEnemyHumanPlayers(), lv_players);
    auto99430FA5_userType = "Heroes";
    auto99430FA5_i = 1;
    for ( ; auto99430FA5_i <= UserDataInstanceCount(auto99430FA5_userType) ; auto99430FA5_i += 1 ) {
        lv_heroUnitInstance = UserDataInstance(auto99430FA5_userType, auto99430FA5_i);
        autoE52CE10D_g = lv_players;
        autoE52CE10D_var = -1;
        while (true) {
            autoE52CE10D_var = PlayerGroupNextPlayer(autoE52CE10D_g, autoE52CE10D_var);
            if (autoE52CE10D_var < 0) { break; }
            lv_heroUnitType = UserDataGetUnit("Heroes", lv_heroUnitInstance, "unitHero", 1);
            if ((libARRA_gf_ListStringIncludes(("TechUnits" + IntToString(autoE52CE10D_var)), (lv_heroUnitType)) == true)) {
                UnitCreate(1, lv_heroUnitType, 0, autoE52CE10D_var, UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(autoE52CE10D_var)), 270.0);
                UnitGroupAdd(libCOMI_gv_heroUnits, UnitLastCreated());
                lv_hi += 1;
                libCOMI_gv_heroUnitsData[lv_hi].lv_heroUnit = UnitLastCreated();
                libCOMI_gv_heroUnitsData[lv_hi].lv_userData = libCOMI_gf_GetHeroUserDataInstanceByUnitType(lv_heroUnitType);
                libCOMI_gf_SetHeroPanelUnit(1, UnitLastCreated(), autoE52CE10D_var);
                UnitSetPosition(UnitLastCreated(), Point(0.0, 0.0), false);
                UnitBehaviorAdd(UnitLastCreated(), "ZergGenericDeath", UnitLastCreated(), 1);
                UnitKill(UnitLastCreated());
            }

        }
    }
}

trigger auto_libCOMI_gf_HeroHandleDeath_Trigger = null;
unit auto_libCOMI_gf_HeroHandleDeath_lp_heroUnit;

void libCOMI_gf_HeroHandleDeath (unit lp_heroUnit) {
    auto_libCOMI_gf_HeroHandleDeath_lp_heroUnit = lp_heroUnit;

    if (auto_libCOMI_gf_HeroHandleDeath_Trigger == null) {
        auto_libCOMI_gf_HeroHandleDeath_Trigger = TriggerCreate("auto_libCOMI_gf_HeroHandleDeath_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_HeroHandleDeath_Trigger, false, false);
}

bool auto_libCOMI_gf_HeroHandleDeath_TriggerFunc (bool testConds, bool runActions) {
    unit lp_heroUnit = auto_libCOMI_gf_HeroHandleDeath_lp_heroUnit;

    // Variable Declarations
    text lv_tip;
    text lv_subtip;
    int lv_player;
    int lv_heroUnitIndex;
    string lv_heroUnitType;
    string lv_heroUnitUserDataInstance;
    string lv_spawnerUnitType;
    string lv_reviverUnitType;
    string lv_behaviorFirst;
    string lv_behaviorNormal;
    fixed lv_reviveDuration;
    unit lv_spawnerUnit;
    unit lv_reviverUnit;
    text lv_messageHeroDied;
    text lv_messageHeroRevived;
    string lv_reviveAbilityLink;
    abilcmd lv_reviveAbilityCommand;
    point lv_reviveFallbackPoint;
    string lv_commander;
    bool lv_isInitialDeath;

    // Automatic Variable Declarations
    unitgroup auto9FB1FFED_g;
    int auto9FB1FFED_u;
    unit auto9FB1FFED_var;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_heroUnit);
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lp_heroUnit);
    lv_heroUnitType = UnitGetType(lp_heroUnit);
    lv_heroUnitUserDataInstance = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_userData;
    lv_spawnerUnitType = UserDataGetUnit("Heroes", lv_heroUnitUserDataInstance, "unitSpawner", 1);
    lv_reviverUnitType = UserDataGetUnit("Heroes", lv_heroUnitUserDataInstance, "unitReviver", 1);
    lv_behaviorFirst = UserDataGetGameLink("Heroes", lv_heroUnitUserDataInstance, "ReviveBehaviorFirst", 1);
    lv_behaviorNormal = UserDataGetGameLink("Heroes", lv_heroUnitUserDataInstance, "ReviveBehaviorNormal", 1);
    lv_reviveDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_behaviorNormal, "Duration", lv_player));
    lv_reviveAbilityLink = UserDataGetString("Heroes", lv_heroUnitUserDataInstance, "ReviveLink", 1);
    lv_reviveAbilityCommand = UserDataGetAbilCmd("Heroes", lv_heroUnitUserDataInstance, "ReviveAbilityCommand", 1);

    // Implementation
    if ((libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_deathCount == -1)) {
        lv_isInitialDeath = true;
    }

    if ((lv_spawnerUnitType == null)) {
        lv_spawnerUnit = libCOMI_gf_CM_PrimaryTownHall(lv_player);
    }
    else {
        lv_spawnerUnit = UnitGroupUnit(UnitGroup(lv_spawnerUnitType, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_deathCount += 1;
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTimer = lv_reviveDuration;
    if ((lv_isInitialDeath == false)) {
        if ((lv_spawnerUnit == null)) {
            lv_messageHeroDied = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageNoSpawningUnit", 1);
            libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_Warning, UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageNoSpawningUnit", 1), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        }
        else {
            lv_messageHeroDied = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageDied", 1);
            lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_9DF7C196"), FixedToText(lv_reviveDuration, 0), c_stringReplaceAll, c_stringNoCase);
        }
        lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_C66A2957"), UnitTypeGetName(lv_heroUnitType), c_stringReplaceAll, c_stringNoCase);
        if ((lv_spawnerUnitType != "")) {
            lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_796115ED"), UnitTypeGetName(lv_spawnerUnitType), c_stringReplaceAll, c_stringNoCase);
        }

        if ((lv_reviverUnitType != "")) {
            lv_messageHeroDied = TextReplaceWord(lv_messageHeroDied, StringExternal("Param/Value/lib_COMI_BB5EEA9B"), UnitTypeGetName(lv_reviverUnitType), c_stringReplaceAll, c_stringNoCase);
        }

        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Death");
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        Wait(2.0, c_timeGame);
    }
    else {
        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Initial Death");
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        Wait(0.0625, c_timeGame);
    }
    while ((lv_spawnerUnit == null)) {
        Wait(1.0, c_timeGame);
        lv_spawnerUnit = UnitGroupUnit(UnitGroup(lv_spawnerUnitType, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    }
    if ((UnitIsAlive(lp_heroUnit) == true)) {
        return true;
    }

    if ((lv_spawnerUnitType != lv_reviverUnitType)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_reviverUnitType, 0, lv_player, UnitGetPosition(lv_spawnerUnit));
        lv_reviverUnit = UnitLastCreated();
    }
    else {
        lv_reviverUnit = lv_spawnerUnit;
    }
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_deathCount += 1;
    libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit = lv_reviverUnit;
    UnitCreateEffectUnit(lv_reviverUnit, "CopyTargetSelectionAndControlGroups", lp_heroUnit);
    if ((PlayerRace(lv_player) == "Zerg")) {
        UnitCreateEffectUnit(lv_spawnerUnit, "CopyHatcheryRally", lv_reviverUnit);
    }

    libCOMI_gf_SetHeroPanelUnit(1, lv_reviverUnit, lv_player);
    if ((lv_isInitialDeath == false)) {
        UnitBehaviorAdd(lv_reviverUnit, lv_behaviorNormal, lv_reviverUnit, 1);
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        PlayerAddCooldown(lv_player, lv_reviveAbilityLink, lv_reviveDuration);
    }
    else {
        UnitBehaviorAdd(lv_reviverUnit, lv_behaviorFirst, lv_reviverUnit, 1);
        lv_reviveDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_behaviorFirst, "Duration", lv_player));
        libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTimer = lv_reviveDuration;
        libNtve_gf_PlayerRemoveCooldown(lv_player, lv_reviveAbilityLink);
        PlayerAddCooldown(lv_player, lv_reviveAbilityLink, lv_reviveDuration);
    }
    UnitIssueOrder(lv_reviverUnit, OrderTargetingUnit(AbilityCommand("RallyHatchery", 1), lv_reviverUnit), c_orderQueueReplace);
    UnitIssueOrder(lv_reviverUnit, OrderTargetingUnit(AbilityCommand("RallyHatchery", 2), lv_reviverUnit), c_orderQueueReplace);
    UnitSetFacing(lp_heroUnit, UnitGetFacing(lv_reviverUnit), 0.0);
    if ((lv_isInitialDeath == false)) {
        UnitSetState(lv_reviverUnit, c_unitStateTooltipable, true);
        lv_tip = UnitTypeGetName(lv_reviverUnitType);
        libCOMI_gf_SetUnitInfoTextCampaign(lv_reviverUnit, null, lv_tip, lv_subtip);
    }

    UnitSetPropertyFixed(lv_reviverUnit, c_unitPropLife, 0.1);
    UnitSetPropertyFixed(lv_reviverUnit, c_unitPropLifeRegen, (UnitGetPropertyFixed(lv_reviverUnit, c_unitPropLifeMax, c_unitPropCurrent)/lv_reviveDuration));
    if ((lv_isInitialDeath == false)) {
        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Reviving");
    }
    else {
        libCOMI_gv_diedHeroUnit = lp_heroUnit;
        TriggerSendEvent("Hero Initial Reviving");
    }
    while (!((PlayerGetCooldown(lv_player, lv_reviveAbilityLink) == 0.0))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMI_gv_cM_GameOverResult != libCOMI_ge_CampaignMissionGameResultType_None)) {
        return true;
    }

    UnitBehaviorAdd(lp_heroUnit, "SuppressCollisionRevive", lp_heroUnit, 1);
    if ((libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation != null)) {
        UnitIssueOrder(lv_reviverUnit, libNtve_gf_ReviveOrderTargetingPoint(AbilityCommand("NovaRevive", 20), libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation, lp_heroUnit), c_orderQueueReplace);
        lv_reviveFallbackPoint = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation;
        libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviveTargetLocation = null;
    }
    else {
        UnitIssueOrder(lv_reviverUnit, libNtve_gf_ReviveOrderWithNoTarget(lv_reviveAbilityCommand, lp_heroUnit), c_orderQueueReplace);
        lv_reviveFallbackPoint = UnitGetPosition(lv_reviverUnit);
    }
    libCOMI_gf_SetHeroPanelUnit(1, lp_heroUnit, lv_player);
    Wait(0.125, c_timeGame);
    if ((UnitIsAlive(lp_heroUnit) == false)) {
        UnitRevive(lp_heroUnit);
        UnitCreateEffectUnit(lp_heroUnit, "KerriganReviveHeal", lp_heroUnit);
        if ((RegionContainsPoint(RegionPlayableMap(), lv_reviveFallbackPoint) == true)) {
            UnitSetPosition(lp_heroUnit, lv_reviveFallbackPoint, false);
        }

    }

    auto9FB1FFED_g = UnitGroupSelected(lv_player);
    auto9FB1FFED_u = UnitGroupCount(auto9FB1FFED_g, c_unitCountAll);
    for (;; auto9FB1FFED_u -= 1) {
        auto9FB1FFED_var = UnitGroupUnitFromEnd(auto9FB1FFED_g, auto9FB1FFED_u);
        if (auto9FB1FFED_var == null) { break; }
        if ((auto9FB1FFED_var == lv_reviverUnit)) {
            UnitSelect(lp_heroUnit, lv_player, true);
        }

    }
    UnitSelect(lv_reviverUnit, lv_player, false);
    if ((lv_spawnerUnitType != lv_reviverUnitType)) {
        UnitCreateEffectUnit(lp_heroUnit, "CopyTargetSelectionAndControlGroups", lv_reviverUnit);
        UnitKill(lv_reviverUnit);
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_reviverUnit, "Signal HeroRevive");
        UnitBehaviorRemove(lv_reviverUnit, lv_behaviorFirst, c_unitBehaviorCountAll);
        UnitBehaviorRemove(lv_reviverUnit, lv_behaviorNormal, c_unitBehaviorCountAll);
    }
    if ((lv_isInitialDeath == false)) {
        lv_messageHeroRevived = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageRevived", 1);
    }
    else {
        lv_messageHeroRevived = UserDataGetText("Heroes", lv_heroUnitUserDataInstance, "messageReady", 1);
    }
    lv_messageHeroRevived = TextReplaceWord(lv_messageHeroRevived, StringExternal("Param/Value/lib_COMI_14A52DB3"), StringToText(CatalogFieldValueGet(c_gameCatalogUnit, lv_heroUnitType, "Name", lv_player)), c_stringReplaceAll, c_stringNoCase);
    if ((lv_spawnerUnitType != "")) {
        lv_messageHeroRevived = TextReplaceWord(lv_messageHeroRevived, StringExternal("Param/Value/lib_COMI_17E287A6"), StringToText(CatalogFieldValueGet(c_gameCatalogUnit, lv_spawnerUnitType, "Name", lv_player)), c_stringReplaceAll, c_stringNoCase);
    }

    if ((lv_reviverUnitType != "")) {
        lv_messageHeroRevived = TextReplaceWord(lv_messageHeroRevived, StringExternal("Param/Value/lib_COMI_175187BA"), StringToText(CatalogFieldValueGet(c_gameCatalogUnit, lv_reviverUnitType, "Name", lv_player)), c_stringReplaceAll, c_stringNoCase);
    }

    libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(lv_player), libCOMI_ge_CampaignMessageType_SimpleHint, lv_messageHeroRevived, libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    libCOMI_gv_diedHeroUnit = lp_heroUnit;
    TriggerSendEvent("Hero Revived");
    return true;
}

unit libCOMI_gf_OBSOLETE_AF_GetHeroUnit (int lp_pPlayer) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = libCOMI_gv_oBSOLETE_CM_HeroUnit[lp_pPlayer];

    // Implementation
    return lv_vUnit;
}

unit libCOMI_gf_GetHeroUnitBad (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_heroPlayer;
    string lv_heroUnitType;
    unit lv_heroUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroPlayer = lp_player;
    lv_heroUnitType = lp_unit;
    lv_heroUnit = UnitGroupUnit(UnitGroup(lv_heroUnitType, lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 1), 1);

    // Implementation
    return lv_heroUnit;
}

unit libCOMI_gf_GetHeroUnit (int lp_player, string lp_hero) {
    // Automatic Variable Declarations
    int autoB6EA2779_ae;
    int autoB6EA2779_var;

    // Implementation
    autoB6EA2779_ae = UnitGroupCount(libCOMI_gv_heroUnits, c_unitCountAll);
    autoB6EA2779_var = 1;
    for ( ; autoB6EA2779_var <= autoB6EA2779_ae; autoB6EA2779_var += 1 ) {
        if ((libCOMI_gv_heroUnitsData[autoB6EA2779_var].lv_userData == lp_hero)) {
            return UnitGroupUnit(libCOMI_gv_heroUnits, autoB6EA2779_var);
        }

    }
    return null;
}

int libCOMI_gf_GetHeroUnitIndex (unit lp_unit) {
    // Automatic Variable Declarations
    int auto5B69EEDE_ae;
    int auto5B69EEDE_var;

    // Implementation
    auto5B69EEDE_ae = UnitGroupCount(libCOMI_gv_heroUnits, c_unitCountAll);
    auto5B69EEDE_var = 1;
    for ( ; auto5B69EEDE_var <= auto5B69EEDE_ae; auto5B69EEDE_var += 1 ) {
        if ((UnitGroupUnit(libCOMI_gv_heroUnits, auto5B69EEDE_var) == lp_unit)) {
            return auto5B69EEDE_var;
        }

    }
    return 0;
}

string libCOMI_gf_GetHeroUserDataInstance (unit lp_unit) {
    // Variable Declarations
    int lv_heroUnitIndex;
    string lv_heroUnitUserDataInstance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lp_unit);
    lv_heroUnitUserDataInstance = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_userData;

    // Implementation
    return lv_heroUnitUserDataInstance;
}

unit libCOMI_gf_GetHeroReviverUnit (unit lp_unit) {
    // Variable Declarations
    int lv_heroUnitIndex;
    unit lv_reviver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroUnitIndex = libCOMI_gf_GetHeroUnitIndex(lp_unit);
    lv_reviver = libCOMI_gv_heroUnitsData[lv_heroUnitIndex].lv_reviverUnit;

    // Implementation
    return lv_reviver;
}

string libCOMI_gf_GetHeroReviveLink (unit lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instance = libCOMI_gf_GetHeroUserDataInstance(lp_unit);

    // Implementation
    return libCOMI_gf_HeroReviveLink(lv_instance);
}

string libCOMI_gf_GetHeroUserDataInstanceByUnitType (string lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    int autoA5D4A5DB_ae;
    int autoA5D4A5DB_var;

    // Variable Initialization

    // Implementation
    autoA5D4A5DB_ae = UserDataInstanceCount("Heroes");
    autoA5D4A5DB_var = 1;
    for ( ; autoA5D4A5DB_var <= autoA5D4A5DB_ae; autoA5D4A5DB_var += 1 ) {
        lv_instance = UserDataInstance("Heroes", autoA5D4A5DB_var);
        if ((UserDataGetUnit("Heroes", lv_instance, "unitHero", 1) == lp_unit)) {
            return lv_instance;
        }

    }
    return null;
}

abilcmd libCOMI_gf_HeroReviveAbilityCommand (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetAbilCmd("Heroes", lp_heroUnit, "ReviveAbilityCommand", 1);
}

string libCOMI_gf_HeroUnitType (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Heroes", lp_heroUnit, "unitHero", 1);
}

string libCOMI_gf_HeroUnitSpawner (string lp_heroUnit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UserDataGetGameLink("Heroes", lp_heroUnit, "unitSpawner", 1);

    // Implementation
    if ((lv_unitType != null)) {
        return lv_unitType;
    }

    return "";
}

string libCOMI_gf_HeroUnitReviver (string lp_heroUnit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitType = UserDataGetGameLink("Heroes", lp_heroUnit, "unitReviver", 1);

    // Implementation
    if ((lv_unitType != null)) {
        return lv_unitType;
    }

    return "";
}

string libCOMI_gf_HeroReviveLink (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("Heroes", lp_heroUnit, "ReviveLink", 1);
}

string libCOMI_gf_HeroFirstReviveBehavior (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Heroes", lp_heroUnit, "ReviveBehaviorFirst", 1);
}

string libCOMI_gf_HeroNormalReviveBehavior (string lp_heroUnit) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Heroes", lp_heroUnit, "ReviveBehaviorNormal", 1);
}

void libCOMI_gf_CreateACStructure (int lp_player, string lp_heroUnit) {
    // Variable Declarations
    int lv_teamIndex;
    point lv_spawnPoint;
    unit lv_townhall;
    point lv_point;
    unitgroup lv_resources;
    int lv_actorTarmacSplatHero;
    unit lv_heroUnit;
    string lv_actorInstance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_townhall = libCOMI_gf_CM_PrimaryTownHall(lp_player);
    lv_point = UnitGetPosition(lv_townhall);
    lv_resources = libARRA_gf_GetResourcesNearPoint(lv_point, 12.0, c_resourceTypeCustom);

    // Implementation
    if ((libCOMI_gf_TechUnitAvailable(lp_player, lp_heroUnit) == false)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_heroUnit, 0, lp_player, libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(lv_resources), 12.0, lv_point));
    lv_heroUnit = UnitLastCreated();
    lv_actorInstance = UserDataGetUserInstance("MissionSettings", "CurrentMission", "AllyHeroActor", 1);
    libCOMI_gf_CreateSplatAtPoint(UnitGetPosition(lv_heroUnit), lv_actorInstance);
}

void libCOMI_gf_CreateACCaster (int lp_player, string lp_heroUnit) {
    // Variable Declarations
    unit lv_caster;

    // Automatic Variable Declarations
    unitgroup autoB905AC50_g;
    int autoB905AC50_u;
    unit autoB905AC50_var;

    // Variable Initialization

    // Implementation
    if ((libARRA_gf_ListStringIncludes(("TechUnits" + IntToString(lp_player)), (lp_heroUnit)) == false)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_heroUnit, c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0));
    lv_caster = UnitLastCreated();
    libCOMI_gv_yY_GPCasterUnit[lp_player] = lv_caster;
    UnitSetState(lv_caster, c_unitStateSelectable, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GlobalCastingPanel");
    libCOMI_gv_cU_GPPanelHolder = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_GPPanelHolder, PlayerGroupAll(), false);
    libCOMI_gf_CU_GPInitCommonCaster(lp_player, lp_heroUnit, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate", "Coop_GlobalCastingTemplates/RaynorGlobalCommandPanelTemplate", 2, "Cutscenes\\UI_TerranCastingPanel.SC2Cutscene", "TwoButtons");
    autoB905AC50_g = libCOMI_gv_yY_GPCasterGroup[lp_player];
    autoB905AC50_u = UnitGroupCount(autoB905AC50_g, c_unitCountAll);
    for (;; autoB905AC50_u -= 1) {
        autoB905AC50_var = UnitGroupUnitFromEnd(autoB905AC50_g, autoB905AC50_u);
        if (autoB905AC50_var == null) { break; }
        UnitGroupRemove(libCOMI_gv_yY_GPCasterGroup[lp_player], autoB905AC50_var);
    }
    UnitGroupAdd(libCOMI_gv_yY_GPCasterGroup[lp_player], libCOMI_gv_yY_GPCasterUnit[lp_player]);
    libNtve_gf_SetDialogItemUnitGroup(libCOMI_gv_cU_GPCmdPanel[lp_player], libCOMI_gv_yY_GPCasterGroup[lp_player], PlayerGroupSingle(lp_player));
}

unit libCOMI_gf_CM_PlayerGetGlobalCaster2 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_yY_GPCasterUnit[lp_player];
}

void libCOMI_gf_CU_GPShowHide (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_GPVisible[lp_player] = (lp_showHide == true);
    libCOMI_gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void libCOMI_gf_CU_GPVisibilityAutoUpdate (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_GPVisible[lp_player] == false)) {
        return ;
    }

    libCOMI_gf_CU_GPVisibilitySet(lp_showHide, lp_player, lp_duration);
}

void libCOMI_gf_CU_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoA77BDFE9_ae = 4;
    const int autoA77BDFE9_ai = 1;
    const int auto16AE58D5_ae = 4;
    const int auto16AE58D5_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cU_GPPanel[lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    if ((libCOMI_gv_cU_GlobalCast2D[lp_player] == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
        return ;
    }

    if ((libCOMI_gv_cU_GPCutsceneFilter[lp_player] != "")) {
        CutsceneAddFilter(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), libCOMI_gv_cU_GPCutsceneFilter[lp_player]);
    }

    if ((lp_showHide == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
        if ((libCOMI_gv_cU_GPCutscene[lp_player] == c_invalidDialogControlId)) {
            return ;
        }

        CutsceneSetTime(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), 0);
        CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
        if ((libCOMI_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), 0);
        }

        if ((libCOMI_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
            CutsceneSetTime(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), 0);
        }

        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (auto16AE58D5_ai >= 0 && lv_buttonIndex <= auto16AE58D5_ae) || (auto16AE58D5_ai < 0 && lv_buttonIndex >= auto16AE58D5_ae) ) ; lv_buttonIndex += auto16AE58D5_ai ) {
                if ((libCOMI_gv_cU_GPButtonHighlighted[lv_buttonIndex][lp_player] == true) && (libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, true);
                }

            }
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "LoopStart");
            if ((libCOMI_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "LoopStart");
            }

            if ((libCOMI_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "LoopStart");
            }

            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((libCOMI_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, false);
            if ((libCOMI_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, false);
            }

        }
    }
    else {
        if ((lp_duration == c_transitionDurationImmediate)) {
            lv_buttonIndex = 1;
            for ( ; ( (autoA77BDFE9_ai >= 0 && lv_buttonIndex <= autoA77BDFE9_ae) || (autoA77BDFE9_ai < 0 && lv_buttonIndex >= autoA77BDFE9_ae) ) ; lv_buttonIndex += autoA77BDFE9_ai ) {
                if ((libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(libCOMI_gv_cU_GPPanelHolder, lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], lv_updatePlayers, lp_showHide);
            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lp_player], lv_updatePlayers, lp_showHide);
            if ((libCOMI_gv_cU_GPEnergyLabel[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lp_player], lv_updatePlayers, lp_showHide);
            }

            if ((libCOMI_gv_cU_GPEnergyTooltip[lp_player] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyTooltip[lp_player], lv_updatePlayers, lp_showHide);
            }

        }
        else {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "Death");
            if ((libCOMI_gv_cU_GPEnergyBarScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "Death");
            }

            if ((libCOMI_gv_cU_GPEnergyGlassScene[lp_player] != c_invalidDialogControlId)) {
                CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "Death");
            }

        }
    }
}

abilcmd libCOMI_gf_CU_GPActiveAbilityCommand (int lp_slot, int lp_player) {
    // Variable Declarations
    int lv_cardIndex;
    int lv_buttonIndex;
    string lv_path;
    abilcmd lv_command;

    // Automatic Variable Declarations
    int auto806EA1DA_ae;
    const int auto806EA1DA_ai = 1;
    int autoD78A3C51_ae;
    const int autoD78A3C51_ai = 1;

    // Variable Initialization
    lv_path = "";

    // Implementation
    auto806EA1DA_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", "CardLayouts", lp_player)-1);
    lv_cardIndex = 0;
    for ( ; ( (auto806EA1DA_ai >= 0 && lv_cardIndex <= auto806EA1DA_ae) || (auto806EA1DA_ai < 0 && lv_cardIndex >= auto806EA1DA_ae) ) ; lv_cardIndex += auto806EA1DA_ai ) {
        autoD78A3C51_ae = (CatalogFieldValueCount(c_gameCatalogUnit, "SoACaster", (("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons")), lp_player)-1);
        lv_buttonIndex = 0;
        for ( ; ( (autoD78A3C51_ai >= 0 && lv_buttonIndex <= autoD78A3C51_ae) || (autoD78A3C51_ai < 0 && lv_buttonIndex >= autoD78A3C51_ae) ) ; lv_buttonIndex += autoD78A3C51_ai ) {
            lv_path = ("CardLayouts[" + IntToString(lv_cardIndex) + "].LayoutButtons[" + IntToString(lv_buttonIndex) + "]");
            if ((CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Type")), lp_player) == "AbilCmd") && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Row")), lp_player) == 0) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, "SoACaster", ((lv_path + ".Column")), lp_player) == (lp_slot-1))) {
                lv_command = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, "SoACaster", ((lv_path + ".AbilCmd")), lp_player));
                if ((TechTreeAbilityIsAllowed(lp_player, lv_command) == true)) {
                    return lv_command;
                }

            }

        }
    }
    return null;
}

void libCOMI_gf_CU_GPHighlightButton (int lp_slot, bool lp_on, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_GPCmdButtonArrows[lp_slot][lp_player] == c_invalidDialogControlId)) {
        return ;
    }

    libCOMI_gv_cU_GPButtonHighlighted[lp_slot][lp_player] = lp_on;
    if ((lp_on == true) && (DialogControlIsVisible(libCOMI_gv_cU_GPPanel[lp_player], lp_player) == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lp_slot][lp_player], PlayerGroupSingle(lp_player), false);
    }
}

void libCOMI_gf_CU_GPInitCommonCaster (int lp_player, string lp_heroUnit, string lp_holderTemplate, string lp_template, int lp_buttons, string lp_cutscene, string lp_cutsceneFilter) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    int autoF11E2415_ae;
    const int autoF11E2415_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    if ((libARRA_gf_ListStringIncludes(("TechUnits" + IntToString(lp_player)), (lp_heroUnit)) == false)) {
        return ;
    }

    DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/TerranCasterPanelTemplate");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "TerranCommandCutscene");
    libCOMI_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "ButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, lp_template);
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    autoF11E2415_ae = lp_buttons;
    lv_buttonIndex = 1;
    for ( ; ( (autoF11E2415_ai >= 0 && lv_buttonIndex <= autoF11E2415_ae) || (autoF11E2415_ai < 0 && lv_buttonIndex >= autoF11E2415_ae) ) ; lv_buttonIndex += autoF11E2415_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "AbilityArrow0" + IntToString(lv_buttonIndex));
        libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemCutscene(libCOMI_gv_cU_GPCutscene[lp_player], lp_cutscene, PlayerGroupAll());
    libCOMI_gv_cU_GPCutsceneFilter[lp_player] = lp_cutsceneFilter;
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
}

void libCOMI_gf_LinkUnitEnergyToGlobalCasterButton (unit lp_unit, int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemUnit(libCOMI_gv_cU_GPUnitEnergyLinks[lp_index][lp_player], lp_unit, PlayerGroupSingle(lp_player));
    DialogControlSetVisible(libCOMI_gv_cU_GPUnitEnergyLinks[lp_index][lp_player], PlayerGroupSingle(lp_player), true);
}

void libCOMI_gf_CU_GPInitEnergyCaster (int lp_player, string lp_heroUnit) {
    // Variable Declarations
    int lv_lastFrame;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoE0F92619_ae = 4;
    const int autoE0F92619_ai = 1;

    // Variable Initialization
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    if ((TechTreeUnitIsAllowed(lp_player, lp_heroUnit) == false)) {
        return ;
    }

    TriggerEnable(libCOMI_gt_CU_GPVitalChanges, true);
    DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_GPPanelHolder, c_triggerControlTypePanel, "Coop_GlobalCastingTemplates/ProtossCasterPanelTemplate");
    libCOMI_gv_cU_GPPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAButtonHolder");
    lv_lastFrame = DialogControlLastCreated();
    DialogControlCreateInPanelFromTemplate(lv_lastFrame, c_triggerControlTypeCommandPanel, "LotV_SoAMissionUIPanel/SoACommandPanelTemplate");
    libCOMI_gv_cU_GPCmdPanel[lp_player] = DialogControlLastCreated();
    lv_buttonIndex = 1;
    for ( ; ( (autoE0F92619_ai >= 0 && lv_buttonIndex <= autoE0F92619_ae) || (autoE0F92619_ai < 0 && lv_buttonIndex >= autoE0F92619_ae) ) ; lv_buttonIndex += autoE0F92619_ai ) {
        DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex-1));
        libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAAbilityArrow0" + IntToString(lv_buttonIndex));
        libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player] = DialogControlLastCreated();
        DialogControlSetPositionRelative(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lp_player], PlayerGroupSingle(lp_player), c_anchorTop, libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lp_player], c_anchorBottom, 0, 15);
    }
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyTooltipHitFrame");
    libCOMI_gv_cU_GPEnergyTooltip[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypePanel, "SoAEnergyBarFill");
    libCOMI_gv_cU_GPEnergyBar[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeLabel, "SoAEnergyLabel");
    libCOMI_gv_cU_GPEnergyLabel[lp_player] = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_cU_GPPanel[lp_player], PlayerGroupAll(), false);
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoACommandCutscene");
    libCOMI_gv_cU_GPCutscene[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCutscene(libCOMI_gv_cU_GPCutscene[lp_player], "Cutscenes\\UI_SoAMission.SC2Cutscene", PlayerGroupAll());
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]));
    DialogControlHookup(libCOMI_gv_cU_GPEnergyBar[lp_player], c_triggerControlTypeCutscene, "SoAFillScene");
    libCOMI_gv_cU_GPEnergyBarScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]));
    DialogControlHookup(libCOMI_gv_cU_GPPanel[lp_player], c_triggerControlTypeCutscene, "SoAOverlayCutscene");
    libCOMI_gv_cU_GPEnergyGlassScene[lp_player] = DialogControlLastCreated();
    CutscenePlay(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]));
}

void libCOMI_gf_CU_GPCheckForEnergyHighlight (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyMax, c_unitPropCurrent) == 0.0)) {
        return ;
    }

    if ((UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent) == 100.0)) {
        libCOMI_gf_CU_GPEnergyHighlight(true, lp_player);
    }
    else {
        libCOMI_gf_CU_GPEnergyHighlight(false, lp_player);
    }
}

void libCOMI_gf_CU_GPEnergyHighlight (bool lp_enable, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enable == true)) {
        libCOMI_gv_cU_GPEnergyHighlighting[lp_player] = true;
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "PowerUp");
        CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "PowerUp");
    }
    else {
        if ((libCOMI_gv_cU_GPEnergyHighlighting[lp_player] == true)) {
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyGlassScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPEnergyBarScene[lp_player]), "PowerDown");
            CutsceneGoToBookmark(CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lp_player]), "PowerDown");
            libCOMI_gv_cU_GPEnergyHighlighting[lp_player] = false;
        }

    }
}

void libCOMI_gf_CU_GPSoAUpdateVitals (int lp_player) {
    // Variable Declarations
    playergroup lv_soAPlayers;
    int lv_orbHeight;
    fixed lv_energyFloored;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soAPlayers = PlayerGroupEmpty();

    // Implementation
    lv_energyFloored = Floor(UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent));
    if ((lv_energyFloored == libCOMI_gv_cU_GPLastEnergyUpdate[lp_player])) {
        return ;
    }

    libCOMI_gv_cU_GPLastEnergyUpdate[lp_player] = lv_energyFloored;
    lv_soAPlayers = PlayerGroupSingle(lp_player);
    TextExpressionSetToken("Param/Expression/lib_COMI_4F19AFD0", "A", IntToText(FixedToInt(lv_energyFloored)));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_GPEnergyLabel[lp_player], TextExpressionAssemble("Param/Expression/lib_COMI_4F19AFD0"), lv_soAPlayers);
    DialogControlSendAnimationEvent(libCOMI_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPlay");
    DialogControlSetAnimationTime(libCOMI_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "EnergyLevel", UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSendAnimationEvent(libCOMI_gv_cU_GPEnergyBarScene[lp_player], PlayerGroupAll(), "SetEnergyPause");
    libCOMI_gf_CU_GPCheckForEnergyHighlight(lp_player);
}

void libCOMI_gf_CM_GPReminderDisable (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_GPRemindersOn[lp_player] == false)) {
        return ;
    }

    libCOMI_gv_cM_GPRemindersOn[lp_player] = false;
    libCOMI_gf_CU_GPHighlightButton(1, false, lp_player);
    libCOMI_gf_CU_GPHighlightButton(2, false, lp_player);
    libCOMI_gf_CU_GPHighlightButton(3, false, lp_player);
    libCOMI_gf_CU_GPHighlightButton(4, false, lp_player);
}

string libCOMI_gf_GetCasterDataForUnit (string lp_caster) {
    // Variable Declarations
    string lv_casterData;

    // Automatic Variable Declarations
    int auto48F7D5FC_ae;
    int auto48F7D5FC_var;

    // Variable Initialization

    // Implementation
    auto48F7D5FC_ae = UserDataInstanceCount("Casters");
    auto48F7D5FC_var = 1;
    for ( ; auto48F7D5FC_var <= auto48F7D5FC_ae; auto48F7D5FC_var += 1 ) {
        lv_casterData = UserDataInstance("Casters", auto48F7D5FC_var);
        if ((UserDataGetUnit("Casters", lv_casterData, "UnitCaster", 1) == lp_caster)) {
            return lv_casterData;
        }
    }
    return null;
}

void libCOMI_gf_TopBarNotificationsInitialization (int lp_player) {
    // Variable Declarations
    int lv_vButton;

    // Automatic Variable Declarations
    const int auto555A5723_ae = 4;
    const int auto555A5723_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeGame);
    if ((libCOMI_gv_cU_GPCmdPanel[lp_player] != c_invalidDialogControlId)) {
        lv_vButton = 0;
        for ( ; ( (auto555A5723_ai >= 0 && lv_vButton <= auto555A5723_ae) || (auto555A5723_ai < 0 && lv_vButton >= auto555A5723_ae) ) ; lv_vButton += auto555A5723_ai ) {
            DialogControlHookup(libCOMI_gv_cU_GPCmdPanel[lp_player], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_vButton));
            libCOMI_gv_topbarButton[lv_vButton][lp_player] = DialogControlLastCreated();
        }
    }

    TriggerSendEvent("Notifications Initialized");
}

int libCOMI_gf_GetClickedTopBarButtonIndex (int lp_button, int lp_player) {
    // Automatic Variable Declarations
    const int autoB4E0DC03_ae = 4;
    int autoB4E0DC03_var;

    // Implementation
    autoB4E0DC03_var = 0;
    for ( ; autoB4E0DC03_var <= autoB4E0DC03_ae; autoB4E0DC03_var += 1 ) {
        if ((lp_button == libCOMI_gv_topbarButton[autoB4E0DC03_var][lp_player])) {
            return autoB4E0DC03_var;
        }
    }
    return -1;
}

text libCOMI_gf_TooltipTextofButton (int lp_player, string lp_button) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_9B053B02", "NAME", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COMI_9B053B02", "DESCRIPTION", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_button, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COMI_9B053B02");
}

void libCOMI_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_waitUntilDone == true)) {
        libCOMI_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    }
    else {
        libCOMI_gf_CinematicFade4(lp_fadeIn, lp_duration, lp_color);
    }
}

void libCOMI_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_fadeIn == true)) {
        if ((libCOMI_gv__FadeImage != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libCOMI_gv__FadeImage, lp_color, PlayerGroupAll());
            DialogControlFadeTransparency(libCOMI_gv__FadeImage, PlayerGroupAll(), lp_duration, 100.0);
        }

    }
    else {
        libCOMI_gf__FadeCreateDialog();
        libNtve_gf_SetDialogItemColor(libCOMI_gv__FadeImage, lp_color, PlayerGroupAll());
        DialogControlFadeTransparency(libCOMI_gv__FadeImage, PlayerGroupAll(), 0.0, 100.0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        DialogControlFadeTransparency(libCOMI_gv__FadeImage, PlayerGroupAll(), lp_duration, 0.0);
    }
    if ((lp_duration > 0.0)) {
        Wait(lp_duration, c_timeGame);
    }

}

trigger auto_libCOMI_gf_CinematicFade4_Trigger = null;
bool auto_libCOMI_gf_CinematicFade4_lp_fadeIn;
fixed auto_libCOMI_gf_CinematicFade4_lp_duration;
color auto_libCOMI_gf_CinematicFade4_lp_color;

void libCOMI_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color) {
    auto_libCOMI_gf_CinematicFade4_lp_fadeIn = lp_fadeIn;
    auto_libCOMI_gf_CinematicFade4_lp_duration = lp_duration;
    auto_libCOMI_gf_CinematicFade4_lp_color = lp_color;

    if (auto_libCOMI_gf_CinematicFade4_Trigger == null) {
        auto_libCOMI_gf_CinematicFade4_Trigger = TriggerCreate("auto_libCOMI_gf_CinematicFade4_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CinematicFade4_Trigger, false, false);
}

bool auto_libCOMI_gf_CinematicFade4_TriggerFunc (bool testConds, bool runActions) {
    bool lp_fadeIn = auto_libCOMI_gf_CinematicFade4_lp_fadeIn;
    fixed lp_duration = auto_libCOMI_gf_CinematicFade4_lp_duration;
    color lp_color = auto_libCOMI_gf_CinematicFade4_lp_color;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CinematicFade3(lp_fadeIn, lp_duration, lp_color);
    return true;
}

void libCOMI_gf__FadeCreateDialog () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv__FadeDialog != c_invalidDialogId)) {
        DialogDestroy(libCOMI_gv__FadeDialog);
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libCOMI_gv__FadeDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    libCOMI_gv__FadeImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
}

void libCOMI_gf_VU_UpdateEnemyFactionsList () {
    // Variable Declarations
    string lv_faction;
    string lv_personality;
    int lv_i;
    string lv_race;
    int lv_j;
    int lv_k;
    bool lv_allowed;

    // Automatic Variable Declarations
    int auto06A886A6_ae;
    const int auto06A886A6_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_enemyFactionsCount = 0;
    auto06A886A6_ae = UserDataInstanceCount("Factions");
    lv_i = 1;
    for ( ; ( (auto06A886A6_ai >= 0 && lv_i <= auto06A886A6_ae) || (auto06A886A6_ai < 0 && lv_i >= auto06A886A6_ae) ) ; lv_i += auto06A886A6_ai ) {
        lv_faction = UserDataInstance("Factions", lv_i);
        if ((UserDataGetInt("Factions", lv_faction, "Hidden", 1) == 1)) {
            continue;
        }

        if ((UserDataGetInt("Factions", lv_faction, "AllowedOnMap", 1) == 1)) {
            libCOMI_gv_enemyFactionsCount += 1;
            libCOMI_gv_vU_EnemyFactionsList[libCOMI_gv_enemyFactionsCount] = lv_faction;
            DialogControlAddItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, UserDataGetText("Factions", lv_faction, "Name", 1));
        }

    }
    libCOMI_gv_vU_EnemyFactionsList[1] = "_Random_";
    libCOMI_gf_VU_SetEnemyFaction(libCOMI_gv_selectedEnemyFaction);
}

void libCOMI_gf_VU_SetEnemyFaction (string lp_faction) {
    // Automatic Variable Declarations
    int auto9720909B_ae;
    int auto9720909B_var;

    // Implementation
    libCOMI_gv_selectedEnemyFaction = lp_faction;
    if ((libCOMI_gv_vU_CommanderEnemyFactionPulldown == c_invalidDialogControlId)) {
        return ;
    }

    auto9720909B_ae = libCOMI_gv_enemyFactionsCount;
    auto9720909B_var = 0;
    for ( ; auto9720909B_var <= auto9720909B_ae; auto9720909B_var += 1 ) {
        if ((libCOMI_gv_selectedEnemyFaction == libCOMI_gv_vU_EnemyFactionsList[auto9720909B_var])) {
            DialogControlSelectItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, auto9720909B_var);
        }

    }
}

void libCOMI_gf_CreateFactionsDialog () {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_x;
    string lv_map;
    int lv_y;
    int lv_image;
    string lv_faction;

    // Automatic Variable Declarations
    int auto713042BC_ae;
    int auto713042BC_var;

    // Variable Initialization
    lv_offsetX = 10;
    lv_offsetY = -60;
    lv_image = c_invalidDialogControlId;

    // Implementation
    DialogCreate(1800, 100, c_anchorBottomLeft, 130, 30, true);
    libCOMI_gv_amonFactionsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    auto713042BC_ae = UserDataInstanceCount("Factions");
    auto713042BC_var = 4;
    for ( ; auto713042BC_var <= auto713042BC_ae; auto713042BC_var += 1 ) {
        lv_faction = UserDataInstance("Factions", auto713042BC_var);
        if ((UserDataGetInt("Factions", lv_faction, "Hidden", 1) == 1)) {
            continue;
        }

        if ((auto713042BC_var > libCOMI_gv_mAX_FACTIONS)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_5C0911D5"), true);
            break;
        }

        libCOMI_gv_totalFactions += 1;
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "Coop_CommanderSelection/UnitIconFrameTemplate");
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 60, 60);
        DialogControlSetPosition(DialogControlLastCreated(), libCOMI_gv_all, c_anchorBottomLeft, (130 + (libCOMI_gv_totalFactions * 70)), 0);
        libCOMI_gv_raceFaction[libCOMI_gv_totalFactions] = lv_faction;
        libCOMI_gv_raceButton[libCOMI_gv_totalFactions] = DialogControlLastCreated();
        lv_image = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_raceButton[libCOMI_gv_totalFactions], libCOMI_gv_all);
        libNtve_gf_SetDialogItemImage(lv_image, UserDataGetImagePath("Factions", lv_faction, "Icon", 1), libCOMI_gv_all);
        libNtve_gf_SetDialogItemTooltip(libCOMI_gv_raceButton[libCOMI_gv_totalFactions], UserDataGetText("Factions", lv_faction, "Name", 1), libCOMI_gv_all);
    }
    DialogSetVisible(libCOMI_gv_amonFactionsDialog, PlayerGroupAll(), true);
}

void libCOMI_gf_CreateGameBriefingRoom () {
    int init_i;

    // Variable Declarations
    int lv_indexPlayer;
    int lv_activePlayers;
    string lv_vCommander;
    int[6] lv_colors;

    // Automatic Variable Declarations
    playergroup auto4B235758_g;
    int auto5CB4E62D_ae;
    int auto5CB4E62D_var;
    playergroup autoDD3B7D96_g;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_colors[init_i] = 1;
    }

    // Implementation
    lv_colors[1] = 1;
    lv_colors[2] = 2;
    lv_colors[3] = 7;
    lv_colors[4] = 5;
    lv_colors[5] = 6;
    libCOMI_gf_Pause();
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    auto4B235758_g = libCOMI_gv_vU_SlotsPlayers;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto4B235758_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeNone)) {
            PlayerSetDifficulty(lv_indexPlayer, 2);
        }

        libCOMI_gf_ShowHideWorldCover(true, 0.0, lv_indexPlayer);
    }
    auto5CB4E62D_ae = PlayerGroupCount(libCOMI_gv_vU_SlotsPlayers);
    auto5CB4E62D_var = 1;
    for ( ; auto5CB4E62D_var <= auto5CB4E62D_ae; auto5CB4E62D_var += 1 ) {
        PlayerSetColorIndex(PlayerGroupPlayer(libCOMI_gv_vU_SlotsPlayers, auto5CB4E62D_var), lv_colors[auto5CB4E62D_var], true);
    }
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeLabel, "Coop_CommanderSelection/CommanderSelectionTemplate/Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), GameMapName(), PlayerGroupAll());
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeLabel, "Coop_CommanderSelection/CommanderSelectionTemplate/Objective");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), GameMapDescription(), PlayerGroupAll());
    libCOMI_gf_CreateCommandersList();
    libCOMI_gf_UpdateDifficultiesList();
    libCOMI_gf_UpdateGameModeList();
    libCOMI_gf_CreateCommandersList();
    libCOMI_gf_VU_UpdateEnemyFactionsList();
    libCOMI_gf_VU_SetEnemyFaction("_Random_");
    DialogControlSelectItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, libCOMI_gv_all, 1);
    DialogControlHookup(libCOMI_gv_cU_CommanderPanel, c_triggerControlTypeImage, "BackgroundImage");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    Wait(0.0, c_timeGame);
    PlayerSetRace(1, "Prot");
    PlayerSetRace(2, "Prot");
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libCOMI_gv_aF_CS_CutsceneDialog[0] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
    libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\UI_Screens_CampaignMode_Background.SC2Cutscene", PlayerGroupAll());
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOMI_gv_aF_CS_CommanderCutscenes[0] = CutsceneGetTriggerControl(DialogControlLastCreated());
    CutscenePlay(CutsceneGetTriggerControl(DialogControlLastCreated()));
    libCOMI_gf_AF_CS_MiraDialogCreate();
    Wait(0.2, c_timeGame);
    libCOMI_gf_AF_CS_CommanderCutscenes();
    libCOMI_gf_CU_MasteryCreate();
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal, PlayerGroupAll());
    autoDD3B7D96_g = libCOMI_gv_vU_SlotsPlayers;
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoDD3B7D96_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_SetFreeCommander(lv_indexPlayer, libCOMI_gv_cCX_PlayerCommander[lv_indexPlayer]);
        libCOMI_gf_CU_MasteryInitFromData(lv_indexPlayer);
        libCOMI_gf_CU_MasteryUpdatePoints(lv_indexPlayer);
        libCOMI_gf_CU_MasteryUpdate(lv_indexPlayer);
        libCOMI_gv_cU_CommanderSelect_RefCount += 1;
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            libCOMI_gf_CU_CommanderPlayerReadySet(lv_indexPlayer, true);
        }

        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    libCOMI_gf_UpdateCommandersList();
    Wait(0.0, c_timeGame);
    libARRA_gf_UT_Init_Emoticons();
    TriggerExecute(libARRA_gt_UT_InfoSave, true, false);
    TriggerExecute(libCOMI_gt_UT_RefillInit, true, false);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gv_vU_HumanPlayers, libARRA_gv_uT_DL_LoggingPlayers);
    TriggerEnable(libARRA_gt_UT_DL_DamageLogging, true);
    TriggerEnable(libARRA_gt_UT_DL_HealLogging, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    TriggerEnable(libCOMI_gt_ReadyButtonClicked, true);
    TriggerEnable(libCOMI_gt_CommanderButtonClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommandeAllyLeft, true);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelUpClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelDownClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryClicked, true);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryCheckboxToggle, true);
    TriggerEnable(libCOMI_gt_CU_CommanderMutatorChallengeSelected, true);
    TriggerEnable(libCOMI_gt_CU_PrestigeButtonClicked, true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, true);
}

void libCOMI_gf_CreateCommandersList () {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_commanderButtons;
    int lv_tierIndex;
    int lv_index;
    int lv_levelFrame;
    int lv_compositionSelf;
    int lv_compositionAlly;
    int lv_lastFrame;
    int lv_commandersCount;
    playergroup lv_nobody;
    playergroup lv_all;
    playergroup lv_leaderPlayer;
    int lv_commIndex;
    string lv_indexCommander;
    playergroup lv_team1;
    playergroup lv_team2;

    // Automatic Variable Declarations
    const int auto1E444FC9_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto1E444FC9_ai = 1;
    const int auto53A52C30_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto53A52C30_ai = 1;
    const int auto553B751C_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto553B751C_ai = 1;
    playergroup autoC9EBF833_g;
    int autoC9EBF833_var;
    const int autoC27D320D_ae = libCOMI_gv_cUC_UNITSMAXCOUNT;
    const int autoC27D320D_ai = 1;
    const int auto5781F990_ae = libCOMI_gv_mAX_PLAYERLEVEL;
    const int auto5781F990_ai = 1;
    const int auto69CB188C_ae = libCOMI_gv_cUC_ABILITIESMAXCOUNT;
    const int auto69CB188C_ai = 1;
    const int auto6AC015A9_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto6AC015A9_ai = 1;

    // Variable Initialization
    lv_commanderButtons = c_invalidDialogControlId;
    lv_levelFrame = c_invalidDialogControlId;
    lv_compositionSelf = c_invalidDialogControlId;
    lv_compositionAlly = c_invalidDialogControlId;
    lv_lastFrame = c_invalidDialogControlId;
    lv_nobody = PlayerGroupEmpty();
    lv_all = PlayerGroupAll();
    lv_leaderPlayer = PlayerGroupSingle(1);
    lv_team1 = GameAttributePlayersForTeam(1);
    lv_team2 = GameAttributePlayersForTeam(2);

    // Implementation
    if ((libCOMI_gv_cU_CommanderDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_cU_CommanderDialog = DialogLastCreated();
    DialogSetVisible(libCOMI_gv_cU_CommanderDialog, libCOMI_gv_vU_HumanPlayers, true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_CommanderSelection/CommanderSelectionTemplate");
    libCOMI_gv_cU_CommanderPanel = DialogControlLastCreated();
    lv_commanderButtons = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButtons", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_playAmonButton = libARRA_gf_HookUpDialogItemandshowforplayers("PlayAmon", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_team1);
    libCOMI_gv_playRandomButton = libARRA_gf_HookUpDialogItemandshowforplayers("PlayRandom", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_team1);
    lv_commandersCount = UserDataInstanceCount("Commanders");
    lv_commanderIndex = 1;
    for ( ; ( (auto1E444FC9_ai >= 0 && lv_commanderIndex <= auto1E444FC9_ae) || (auto1E444FC9_ai < 0 && lv_commanderIndex >= auto1E444FC9_ae) ) ; lv_commanderIndex += auto1E444FC9_ai ) {
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButton" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderPortrait", c_triggerControlTypePortrait, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderName", c_triggerControlTypeLabel, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection = libARRA_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_lock = libARRA_gf_HookUpDialogItemandshowforplayers("Locked", c_triggerControlTypeImage, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_team1);
        libCOMI_gv_commanderOption[lv_commanderIndex].lv_ready = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
        if ((UserDataGetInt("Commanders", UserDataInstance("Commanders", lv_commanderIndex), "hidden", 1) == 1)) {
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_title, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_ready, lv_all, false);
        }
        else {
            if ((UserDataGetInt("Commanders", UserDataInstance("Commanders", lv_commanderIndex), "locked", 1) == 1)) {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_lock, lv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_lock, lv_all, false);
            }
        }
        if ((lv_commanderIndex > lv_commandersCount)) {
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_button, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_title, lv_all, false);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commanderIndex].lv_selection, lv_all, false);
        }

        libCOMI_gv_cU_CommanderList[lv_commanderIndex] = UserDataInstance("Commanders", lv_commanderIndex);
        PortraitSetModel(PortraitGetTriggerControl(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait), libCOMI_gf_CC_CommanderPortraitModel(libCOMI_gv_cU_CommanderList[lv_commanderIndex]), false);
        if ((libCOMI_gf_CC_CommanderPortraitActor(libCOMI_gv_cU_CommanderList[lv_commanderIndex]) != null)) {
            PortraitSetActor(PortraitGetTriggerControl(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait), libCOMI_gf_CC_CommanderPortraitActor(libCOMI_gv_cU_CommanderList[lv_commanderIndex]));
        }
        else {
            PortraitSetActor(PortraitGetTriggerControl(libCOMI_gv_commanderOption[lv_commanderIndex].lv_portrait), "PortraitActor");
        }
    }
    lv_commanderIndex = 1;
    for ( ; ( (auto53A52C30_ai >= 0 && lv_commanderIndex <= auto53A52C30_ae) || (auto53A52C30_ai < 0 && lv_commanderIndex >= auto53A52C30_ae) ) ; lv_commanderIndex += auto53A52C30_ai ) {
        libCOMI_gv_amonOption[lv_commanderIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButtonAmon" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_all);
        libCOMI_gv_amonOption[lv_commanderIndex].lv_selection = libARRA_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_amonOption[lv_commanderIndex].lv_lock = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_amonOption[lv_commanderIndex].lv_ready = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_button, lv_all, false);
        libNtve_gf_SetDialogItemImage(libCOMI_gv_amonOption[lv_commanderIndex].lv_lock, "Assets\\Factions\\AmonsArmadaLogo.dds", lv_all);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_lock, lv_all, true);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOMI_gv_amonOption[lv_commanderIndex].lv_selection, libCOMI_gv_all, false);
    }
    lv_commanderIndex = 1;
    for ( ; ( (auto553B751C_ai >= 0 && lv_commanderIndex <= auto553B751C_ae) || (auto553B751C_ai < 0 && lv_commanderIndex >= auto553B751C_ae) ) ; lv_commanderIndex += auto553B751C_ai ) {
        libCOMI_gv_randomOption[lv_commanderIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderButtonRandom" + IntToString(lv_commanderIndex), c_triggerControlTypeButton, lv_commanderButtons, lv_all);
        libCOMI_gv_randomOption[lv_commanderIndex].lv_selection = libARRA_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_randomOption[lv_commanderIndex].lv_lock = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        libCOMI_gv_randomOption[lv_commanderIndex].lv_ready = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_nobody);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_button, lv_all, false);
        libNtve_gf_SetDialogItemImage(libCOMI_gv_randomOption[lv_commanderIndex].lv_lock, "Assets\\Textures\\ui_commanderportrait_random.dds", lv_all);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_lock, lv_all, true);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_ready, lv_all, false);
        DialogControlSetVisible(libCOMI_gv_randomOption[lv_commanderIndex].lv_selection, libCOMI_gv_all, false);
    }
    libCOMI_gv_cU_CommanderInfoPanel = libARRA_gf_HookUpDialogItemandshowforplayers("CompositionInfoSelf", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_cU_CommanderSelectedNameSelf = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderInfoPanel, lv_all);
    libCOMI_gv_cU_CommanderSelectedPrestigeSelf = libARRA_gf_HookUpDialogItemandshowforplayers("PrestigeLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderInfoPanel, lv_all);
    libCOMI_gv_cU_CommanderAccountNameSelf = libARRA_gf_HookUpDialogItemandshowforplayers("AccountLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderInfoPanel, lv_all);
    autoC9EBF833_g = libCOMI_gf_GetHumanPlayers();
    autoC9EBF833_var = -1;
    while (true) {
        autoC9EBF833_var = PlayerGroupNextPlayer(autoC9EBF833_g, autoC9EBF833_var);
        if (autoC9EBF833_var < 0) { break; }
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(autoC9EBF833_var), PlayerGroupSingle(autoC9EBF833_var));
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoC9EBF833_var, false)), PlayerGroupSingle(autoC9EBF833_var));
    }
    libCOMI_gv_vU_DetailsContainer = libARRA_gf_HookUpDialogItemandshowforplayers("DetailsContainer", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_vU_DetailsTabControl = libARRA_gf_HookUpDialogItemandshowforplayers("TabControl", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsTabInfoButton = libARRA_gf_HookUpDialogItemandshowforplayers("InfoButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsTabUnitsButton = libARRA_gf_HookUpDialogItemandshowforplayers("UnitsButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsTabResearchButton = libARRA_gf_HookUpDialogItemandshowforplayers("ResearchButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsContainer, lv_all);
    libCOMI_gv_vU_DetailsInfoContainer = libARRA_gf_HookUpDialogItemandshowforplayers("InfoContainer", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_nobody);
    libCOMI_gv_vU_DetailsUnitsContainer = libARRA_gf_HookUpDialogItemandshowforplayers("UnitsContainer", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_nobody);
    libCOMI_gv_vU_DetailsResearchContainer = libARRA_gf_HookUpDialogItemandshowforplayers("ResearchContainer", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsContainer, lv_nobody);
    lv_tierIndex = 1;
    for ( ; ( (autoC27D320D_ai >= 0 && lv_tierIndex <= autoC27D320D_ae) || (autoC27D320D_ai < 0 && lv_tierIndex >= autoC27D320D_ae) ) ; lv_tierIndex += autoC27D320D_ai ) {
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("Unit" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUnitsButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto5781F990_ai >= 0 && lv_tierIndex <= auto5781F990_ae) || (auto5781F990_ai < 0 && lv_tierIndex >= auto5781F990_ae) ) ; lv_tierIndex += auto5781F990_ai ) {
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("Upgrade" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto69CB188C_ai >= 0 && lv_tierIndex <= auto69CB188C_ae) || (auto69CB188C_ai < 0 && lv_tierIndex >= auto69CB188C_ae) ) ; lv_tierIndex += auto69CB188C_ai ) {
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers("Ability" + IntToString(lv_tierIndex), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsUnitsContainer, lv_all);
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderAbilitiesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    lv_tierIndex = 1;
    for ( ; ( (auto6AC015A9_ai >= 0 && lv_tierIndex <= auto6AC015A9_ae) || (auto6AC015A9_ai < 0 && lv_tierIndex >= auto6AC015A9_ae) ) ; lv_tierIndex += auto6AC015A9_ai ) {
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button = libARRA_gf_HookUpDialogItemandshowforplayers(libNtve_gf_ConvertStringToUILayoutFrameName(("Prestige" + IntToString(lv_tierIndex))), c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_icon = libARRA_gf_HookUpDialogItemandshowforplayers("Icon", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_all);
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_title = libARRA_gf_HookUpDialogItemandshowforplayers("Title", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_nobody);
        libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_description = libARRA_gf_HookUpDialogItemandshowforplayers("Description", c_triggerControlTypeLabel, libCOMI_gv_cU_CommanderPrestigesButtons[lv_tierIndex].lv_button, lv_nobody);
    }
    libCOMI_gv_cU_CommanderMasteryButton = libARRA_gf_HookUpDialogItemandshowforplayers("MasterySetButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_nobody);
    libCOMI_gv_cU_CommanderMasteryCheckbox = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryCheckbox", c_triggerControlTypeCheckBox, libCOMI_gv_vU_DetailsResearchContainer, lv_nobody);
    libNtve_gf_SetDialogItemChecked(libCOMI_gv_cU_CommanderMasteryCheckbox, true, PlayerGroupAll());
    libCOMI_gv_cU_CommanderLevelUpButton = libARRA_gf_HookUpDialogItemandshowforplayers("LevelUpButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
    libCOMI_gv_cU_CommanderLevelDownButton = libARRA_gf_HookUpDialogItemandshowforplayers("LevelDownButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
    libCOMI_gv_vU_CommanderPanelSettings = libARRA_gf_HookUpDialogItemandshowforplayers("SettingsList", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_leaderPlayer);
    libCOMI_gv_cU_CommanderMutatorButton = libARRA_gf_HookUpDialogItemandshowforplayers("MutatorButton", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_leaderPlayer);
    libCOMI_gv_vU_CommanderDifficultyPulldown = libARRA_gf_HookUpDialogItemandshowforplayers("DifficultyPulldown", c_triggerControlTypePulldown, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_vU_CommanderEnemyFactionPulldown = libARRA_gf_HookUpDialogItemandshowforplayers("EnemyFactionPulldown", c_triggerControlTypePulldown, libCOMI_gv_vU_CommanderPanelSettings, lv_leaderPlayer);
    libCOMI_gv_vU_GameModePulldown = libARRA_gf_HookUpDialogItemandshowforplayers("GameModPulldown", c_triggerControlTypePulldown, libCOMI_gv_vU_CommanderPanelSettings, lv_leaderPlayer);
    lv_compositionSelf = libARRA_gf_HookUpDialogItemandshowforplayers("CompositionInfoSelf", c_triggerControlTypePanel, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_cU_CommanderReadyButton = libARRA_gf_HookUpDialogItemandshowforplayers("ReadyButton", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_all);
    lv_levelFrame = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderLevelLabel", c_triggerControlTypePanel, lv_compositionSelf, lv_all);
    libCOMI_gv_cU_CommanderLevelLabelSelf = libARRA_gf_HookUpDialogItemandshowforplayers("LevelLabel", c_triggerControlTypeLabel, lv_levelFrame, lv_all);
    libCOMI_gv_cU_CommanderMasteryLabelSelf = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelLabel", c_triggerControlTypeLabel, lv_levelFrame, lv_all);
    libCOMI_gv_cU_CommanderReadyButton = libARRA_gf_HookUpDialogItemandshowforplayers("ReadyButton", c_triggerControlTypeButton, libCOMI_gv_cU_CommanderPanel, lv_all);
    libCOMI_gv_cU_CommanderReadyCheckMark = libARRA_gf_HookUpDialogItemandshowforplayers("CheckMark", c_triggerControlTypeImage, libCOMI_gv_cU_CommanderReadyButton, lv_nobody);
}

trigger auto_libCOMI_gf_AF_CS_NewsCreate_Trigger = null;

void libCOMI_gf_AF_CS_NewsCreate () {
    if (auto_libCOMI_gf_AF_CS_NewsCreate_Trigger == null) {
        auto_libCOMI_gf_AF_CS_NewsCreate_Trigger = TriggerCreate("auto_libCOMI_gf_AF_CS_NewsCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AF_CS_NewsCreate_Trigger, false, false);
}

bool auto_libCOMI_gf_AF_CS_NewsCreate_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(600, 600, c_anchorTopRight, 0, -40, true);
    libCOMI_gv_aF_CS_NewsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_CommanderSelectionScreen/NewsSection");
    libCOMI_gv_aF_CS_NewsDialogPanel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeLabel, "NewsText");
    TextExpressionSetToken("Param/Expression/lib_COMI_15AD7BE4", "A", libCOMI_gv_aF_CS_News);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COMI_15AD7BE4"), PlayerGroupAll());
    DialogControlHookup(libCOMI_gv_aF_CS_NewsDialogPanel, c_triggerControlTypeButton, "ControlButton");
    libCOMI_gv_aF_CS_NewsControlButton = DialogControlLastCreated();
    DialogCreate(200, 50, c_anchorBottomRight, 0, 0, true);
    libCOMI_gv_aF_CS_PatchDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1024);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    TextExpressionSetToken("Param/Expression/lib_COMI_40DD3816", "A", StringToText(FixedToString(libCOMI_gv_cURRENT_VERSION, c_fixedPrecisionAny)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorBottomRight, 10, 10, TextExpressionAssemble("Param/Expression/lib_COMI_40DD3816"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PatchStyle", PlayerGroupAll());
    Wait(3.5, c_timeGame);
    DialogControlSendAnimationEvent(libCOMI_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "ShowEv");
    Wait(20.0, c_timeGame);
    if ((libCOMI_gv_aF_CS_NewsControlButtonClicked == false)) {
        DialogControlSendAnimationEvent(libCOMI_gv_aF_CS_NewsDialogPanel, PlayerGroupAll(), "HideEv");
    }

    return true;
}

void libCOMI_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency, int lp_player) {
    // Variable Declarations
    playergroup lv_coverPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_coverPlayers = PlayerGroupEmpty();

    // Implementation
    lv_coverPlayers = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cC_WorldCoverDlg == c_invalidDialogId)) {
        if ((lp_showHide == true)) {
            DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
            libCOMI_gv_cC_WorldCoverDlg = DialogLastCreated();
            DialogSetFullscreen(DialogLastCreated(), true);
            DialogSetImageVisible(DialogLastCreated(), false);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white32.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 0.00, 0.00), PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderType(DialogControlLastCreated(), c_triggerRenderTypeHDR, PlayerGroupAll());
        }
        else {
            return ;
        }
    }

    if ((lp_showHide == true)) {
        DialogSetTransparency(libCOMI_gv_cC_WorldCoverDlg, lp_transparency);
    }

    DialogSetVisible(libCOMI_gv_cC_WorldCoverDlg, lv_coverPlayers, lp_showHide);
}

void libCOMI_gf_AF_CS_CommanderCutscenes () {
    // Variable Declarations
    int lv_vA;
    string lv_commander;

    // Automatic Variable Declarations
    const int auto709C2A81_ae = 2;
    const int auto709C2A81_ai = 1;

    // Variable Initialization

    // Implementation
    DialogCreate(1000, 1050, c_anchorBottomRight, 0, -75, true);
    libCOMI_gv_aF_CS_CutsceneDialog[1] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), libCOMI_gf_UT_ActiveCommanderPlayers(), true);
    CutsceneSetGlobalFilter("Standard");
    lv_vA = 1;
    for ( ; ( (auto709C2A81_ai >= 0 && lv_vA <= auto709C2A81_ae) || (auto709C2A81_ai < 0 && lv_vA >= auto709C2A81_ae) ) ; lv_vA += auto709C2A81_ai ) {
        if ((PlayerStatus(lv_vA) == c_playerStatusActive)) {
            libCOMI_gv_cutsceneLastActiveCommander[lv_vA] = libCOMI_gf_ActiveCommanderForPlayer(lv_vA);
            DialogControlCreate(DialogLastCreated(), c_triggerControlTypeCutscene);
            DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
            libNtve_gf_SetDialogItemCutscene(DialogControlLastCreated(), "Cutscenes\\UI_Screens_AlliedCommander_Foreground.SC2Cutscene", PlayerGroupAll());
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(libCOMI_gf_UT_OtherPlayer(lv_vA)), false);
            libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA] = CutsceneGetTriggerControl(DialogControlLastCreated());
            if ((libCOMI_gv_cutsceneLastActiveCommander[lv_vA] != null)) {
                if ((libCOMI_gv_cutsceneLastActiveCommander[lv_vA] == "Horner")) {
                    DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(lv_vA), true);
                    CutsceneSetFilter(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA], "");
                }
                else {
                    CutsceneSetFilter(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA], (libCOMI_gv_cutsceneLastActiveCommander[lv_vA]));
                }
            }

            CutsceneGoToBookmark(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA], "CharacterLoopStart");
            CutscenePlay(libCOMI_gv_aF_CS_CommanderCutscenes[lv_vA]);
        }

    }
}

void libCOMI_gf_AF_CS_MiraDialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(500, 500, c_anchorRight, 200, 0, true);
    libCOMI_gv_aF_CS_CommanderMiraDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_CommanderSelectionScreen/MiraBRB");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "MiraLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Commanders", "Horner", "AlternativeCutscenemessage", 1), PlayerGroupAll());
}

void libCOMI_gf_SetFreeCommander (int lp_player, string lp_commander) {
    // Variable Declarations
    bool lv_isOccupied;
    int lv_indexPlayer;
    int lv_indexCommander;
    string lv_indexCommanderInstance;

    // Automatic Variable Declarations
    playergroup autoB7558480_g;
    int auto0CE52DFE_ae;
    const int auto0CE52DFE_ai = 1;
    playergroup autoB08BD026_g;

    // Variable Initialization

    // Implementation
    if ((lp_commander != null)) {
        autoB7558480_g = libCOMI_gv_vU_SlotsPlayers;
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoB7558480_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((lv_indexPlayer == lp_player)) {
                break;
            }

            if ((libCOMI_gv_cCX_PlayerCommander[lv_indexPlayer] == libCOMI_gv_cCX_PlayerCommander[lp_player])) {
                lv_isOccupied = true;
                break;
            }

        }
    }
    else {
        lv_isOccupied = true;
    }
    if ((lv_isOccupied == false)) {
        libCOMI_gf_CU_CommanderSelect(lp_player, libCOMI_gv_cCX_PlayerCommander[lp_player]);
    }
    else {
        auto0CE52DFE_ae = UserDataInstanceCount("Commanders");
        lv_indexCommander = 1;
        for ( ; ( (auto0CE52DFE_ai >= 0 && lv_indexCommander <= auto0CE52DFE_ae) || (auto0CE52DFE_ai < 0 && lv_indexCommander >= auto0CE52DFE_ae) ) ; lv_indexCommander += auto0CE52DFE_ai ) {
            lv_indexCommanderInstance = UserDataInstance("Commanders", lv_indexCommander);
            lv_isOccupied = false;
            autoB08BD026_g = libCOMI_gv_vU_SlotsPlayers;
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(autoB08BD026_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((lv_indexPlayer == lp_player)) {
                    break;
                }

                if ((libCOMI_gv_cCX_PlayerCommander[lv_indexPlayer] == lv_indexCommanderInstance)) {
                    lv_isOccupied = true;
                    break;
                }

            }
            if ((lv_isOccupied == false)) {
                libCOMI_gf_CU_CommanderSelect(lp_player, lv_indexCommanderInstance);
                return ;
            }

        }
    }
}

playergroup libCOMI_gf_GetPlayingPlayers () {
    // Variable Declarations
    playergroup lv_playingPlayers;

    // Automatic Variable Declarations
    playergroup autoECDB2232_g;
    int autoECDB2232_var;
    playergroup auto844EB7CB_g;
    int auto844EB7CB_var;

    // Variable Initialization
    lv_playingPlayers = PlayerGroupEmpty();

    // Implementation
    autoECDB2232_g = libCOMI_gv_vU_SlotsPlayers;
    autoECDB2232_var = -1;
    while (true) {
        autoECDB2232_var = PlayerGroupNextPlayer(autoECDB2232_g, autoECDB2232_var);
        if (autoECDB2232_var < 0) { break; }
        if ((PlayerType(autoECDB2232_var) == c_playerTypeUser) && (PlayerStatus(autoECDB2232_var) != c_playerStatusLeft)) {
            PlayerGroupAdd(lv_playingPlayers, autoECDB2232_var);
        }

    }
    auto844EB7CB_g = libCOMI_gv_vU_SlotsPlayers;
    auto844EB7CB_var = -1;
    while (true) {
        auto844EB7CB_var = PlayerGroupNextPlayer(auto844EB7CB_g, auto844EB7CB_var);
        if (auto844EB7CB_var < 0) { break; }
        if (((PlayerType(auto844EB7CB_var) != c_playerTypeUser) || (PlayerStatus(auto844EB7CB_var) == c_playerStatusLeft)) && (libCOMI_gv_gameMode > PlayerGroupCount(lv_playingPlayers))) {
            PlayerGroupAdd(lv_playingPlayers, auto844EB7CB_var);
        }

    }
    return lv_playingPlayers;
}

void libCOMI_gf_UpdateCommandersList () {
    // Variable Declarations
    text lv_commanderDscription;
    int lv_commIndex;
    playergroup lv_otherPlayers;
    playergroup lv_chosenPlayer;
    text lv_availableTooltip;
    text lv_unavailableTooltip;
    int lv_owner;
    int lv_alliesPlayersCount;
    int lv_ownerIndex;
    string lv_commander;
    playergroup lv_playingPlayers;

    // Automatic Variable Declarations
    const int auto44167AAA_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto44167AAA_ai = 1;
    playergroup auto697667B7_g;
    int auto697667B7_var;
    playergroup auto4B859BC7_g;
    int auto4B859BC7_var;
    const int auto029FC9E9_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    int auto029FC9E9_var;
    playergroup auto6E88B9B5_g;
    int auto6E88B9B5_var;
    playergroup auto2E96F5A2_g;
    int auto2E96F5A2_var;
    const int autoDF1652A7_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    int autoDF1652A7_var;
    playergroup auto44E50460_g;
    int auto44E50460_var;

    // Variable Initialization
    lv_otherPlayers = PlayerGroupEmpty();
    lv_chosenPlayer = PlayerGroupEmpty();
    TextExpressionSetToken("Param/Expression/lib_COMI_496155C5", "A", lv_availableTooltip);
    lv_unavailableTooltip = TextExpressionAssemble("Param/Expression/lib_COMI_496155C5");
    lv_playingPlayers = libCOMI_gf_GetPlayingPlayers();

    // Implementation
    if ((libCOMI_gv_cU_CommanderDialog == c_invalidDialogId)) {
        return ;
    }

    lv_commIndex = 1;
    for ( ; ( (auto44167AAA_ai >= 0 && lv_commIndex <= auto44167AAA_ae) || (auto44167AAA_ai < 0 && lv_commIndex >= auto44167AAA_ae) ) ; lv_commIndex += auto44167AAA_ai ) {
        lv_commander = libCOMI_gv_cU_CommanderList[lv_commIndex];
        if ((lv_commander == null)) {
            continue;
        }

        lv_owner = 0;
        lv_ownerIndex = 0;
        auto697667B7_g = lv_playingPlayers;
        auto697667B7_var = -1;
        while (true) {
            auto697667B7_var = PlayerGroupNextPlayer(auto697667B7_g, auto697667B7_var);
            if (auto697667B7_var < 0) { break; }
            lv_ownerIndex += 1;
            if ((libCOMI_gv_cU_CommanderList[lv_commIndex] == libCOMI_gv_cCX_PlayerCommander[auto697667B7_var])) {
                lv_owner = auto697667B7_var;
                break;
            }

        }
        TextExpressionSetToken("Param/Expression/lib_COMI_4965F6C6", "A", libCOMI_gf_CC_CommanderName(UserDataInstance("Commanders", lv_commIndex)));
        TextExpressionSetToken("Param/Expression/lib_COMI_4965F6C6", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogRace, libCOMI_gf_CC_CommanderRace(UserDataInstance("Commanders", lv_commIndex)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_COMI_4965F6C6", "C", lv_commanderDscription);
        lv_availableTooltip = TextExpressionAssemble("Param/Expression/lib_COMI_4965F6C6");
        if ((lv_owner != 0)) {
            lv_otherPlayers = PlayerGroupAll();
            PlayerGroupRemove(lv_otherPlayers, lv_owner);
            lv_chosenPlayer = PlayerGroupSingle(lv_owner);
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_commanderOption[lv_commIndex].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemPaused(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, false, libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_commanderOption[lv_commIndex].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_commanderOption[lv_commIndex].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            libNtve_gf_SetDialogItemTintColor(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100,100,100), lv_chosenPlayer);
            libNtve_gf_SetDialogItemTintColor(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100.00, 0.00, 0.00), lv_otherPlayers);
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_selection, libCOMI_gv_all, true);
            libNtve_gf_SetDialogItemColor(libCOMI_gv_commanderOption[lv_commIndex].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_owner, false)), libCOMI_gv_all);
            if (((libCOMI_gv_cU_CommanderSelect_PlayerReady[lv_owner] == true) || (PlayerType(lv_owner) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_ready, libCOMI_gv_all, false);
            }
        }
        else {
            DialogControlSetVisible(libCOMI_gv_commanderOption[lv_commIndex].lv_selection, libCOMI_gv_all, false);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_commanderOption[lv_commIndex].lv_button, lv_availableTooltip, libCOMI_gv_all);
            libNtve_gf_SetDialogItemTintColor(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, Color(100,100,100), libCOMI_gv_all);
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_commanderOption[lv_commIndex].lv_button, false, libCOMI_gv_all);
            libNtve_gf_SetDialogItemPaused(libCOMI_gv_commanderOption[lv_commIndex].lv_portrait, true, libCOMI_gv_all);
        }
    }
    libCOMI_gv_randomPlayersCount = 0;
    auto4B859BC7_g = lv_playingPlayers;
    auto4B859BC7_var = -1;
    while (true) {
        auto4B859BC7_var = PlayerGroupNextPlayer(auto4B859BC7_g, auto4B859BC7_var);
        if (auto4B859BC7_var < 0) { break; }
        if ((libCOMI_gv_cCX_PlayerCommander[auto4B859BC7_var] == null) && (libCOMI_gv_chosenTeam[auto4B859BC7_var] == 1)) {
            libCOMI_gv_randomPlayersCount += 1;
            libCOMI_gv_randomPlayers[libCOMI_gv_amonPlayersCount] = auto4B859BC7_var;
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemColor(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto4B859BC7_var, false)), libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_selection, libCOMI_gv_all, true);
            DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_button, libCOMI_gv_all, true);
            if (((libCOMI_gv_cU_CommanderSelect_PlayerReady[auto4B859BC7_var] == true) || (PlayerType(auto4B859BC7_var) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_randomOption[libCOMI_gv_randomPlayersCount].lv_ready, libCOMI_gv_all, false);
            }
        }

    }
    auto029FC9E9_var = (libCOMI_gv_randomPlayersCount + 1);
    for ( ; auto029FC9E9_var <= auto029FC9E9_ae; auto029FC9E9_var += 1 ) {
        DialogControlSetVisible(libCOMI_gv_randomOption[auto029FC9E9_var].lv_selection, libCOMI_gv_all, false);
        DialogControlSetVisible(libCOMI_gv_randomOption[auto029FC9E9_var].lv_button, libCOMI_gv_all, false);
    }
    if ((libCOMI_gv_randomPlayersCount >= libCOMI_gv_maxAlliesPlayersOnMap)) {
        DialogControlSetVisible(libCOMI_gv_playRandomButton, PlayerGroupAll(), false);
    }
    else {
        auto6E88B9B5_g = lv_playingPlayers;
        auto6E88B9B5_var = -1;
        while (true) {
            auto6E88B9B5_var = PlayerGroupNextPlayer(auto6E88B9B5_g, auto6E88B9B5_var);
            if (auto6E88B9B5_var < 0) { break; }
            if ((libCOMI_gv_cCX_PlayerCommander[auto6E88B9B5_var] == null) && (libCOMI_gv_chosenTeam[auto6E88B9B5_var] == 1)) {
                DialogControlSetVisible(libCOMI_gv_playRandomButton, PlayerGroupSingle(auto6E88B9B5_var), false);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_playRandomButton, PlayerGroupSingle(auto6E88B9B5_var), true);
            }
        }
    }
    libCOMI_gv_amonPlayersCount = 0;
    auto2E96F5A2_g = lv_playingPlayers;
    auto2E96F5A2_var = -1;
    while (true) {
        auto2E96F5A2_var = PlayerGroupNextPlayer(auto2E96F5A2_g, auto2E96F5A2_var);
        if (auto2E96F5A2_var < 0) { break; }
        if ((libCOMI_gv_chosenTeam[auto2E96F5A2_var] == 2)) {
            libCOMI_gv_amonPlayersCount += 1;
            libCOMI_gv_amonPlayers[libCOMI_gv_amonPlayersCount] = auto2E96F5A2_var;
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, true, libCOMI_gv_all);
            libNtve_gf_SetDialogItemColor(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_selection, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto2E96F5A2_var, false)), libCOMI_gv_all);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, lv_availableTooltip, lv_chosenPlayer);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, lv_unavailableTooltip, lv_otherPlayers);
            DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_selection, libCOMI_gv_all, true);
            DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_button, libCOMI_gv_all, true);
            if (((libCOMI_gv_cU_CommanderSelect_PlayerReady[auto2E96F5A2_var] == true) || (PlayerType(auto2E96F5A2_var) != c_playerTypeUser))) {
                DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_ready, libCOMI_gv_all, true);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_amonOption[libCOMI_gv_amonPlayersCount].lv_ready, libCOMI_gv_all, false);
            }
        }
        else {
            lv_alliesPlayersCount += 1;
        }
    }
    autoDF1652A7_var = (libCOMI_gv_amonPlayersCount + 1);
    for ( ; autoDF1652A7_var <= autoDF1652A7_ae; autoDF1652A7_var += 1 ) {
        DialogControlSetVisible(libCOMI_gv_amonOption[autoDF1652A7_var].lv_selection, libCOMI_gv_all, false);
        DialogControlSetVisible(libCOMI_gv_amonOption[autoDF1652A7_var].lv_button, libCOMI_gv_all, false);
    }
    if ((libCOMI_gv_amonPlayersCount >= libCOMI_gv_maxAmonPlayersOnMap)) {
        DialogControlSetVisible(libCOMI_gv_playAmonButton, PlayerGroupAll(), false);
    }
    else {
        auto44E50460_g = lv_playingPlayers;
        auto44E50460_var = -1;
        while (true) {
            auto44E50460_var = PlayerGroupNextPlayer(auto44E50460_g, auto44E50460_var);
            if (auto44E50460_var < 0) { break; }
            if ((libCOMI_gv_chosenTeam[auto44E50460_var] == 2)) {
                DialogControlSetVisible(libCOMI_gv_playAmonButton, PlayerGroupSingle(auto44E50460_var), false);
            }
            else {
                DialogControlSetVisible(libCOMI_gv_playAmonButton, PlayerGroupSingle(auto44E50460_var), true);
            }
        }
    }
    if (((libCOMI_gv_amonPlayersCount > libCOMI_gv_maxAmonPlayersOnMap) || (lv_alliesPlayersCount > libCOMI_gv_maxAlliesPlayersOnMap))) {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyButton, libCOMI_gv_all, false);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyButton, libCOMI_gv_all, true);
    }
}

void libCOMI_gf_CU_CommanderSelect (int lp_player, string lp_chosenCommander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CC_PlayerCommanderSet(lp_player, lp_chosenCommander);
    libCOMI_gf_CU_PrestigeSelect(lp_player, DataTableGetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(lp_chosenCommander, lp_player)));
    if ((PlayerType(lp_player) == c_playerTypeUser)) {
        libCOMI_gf_CU_CommanderPlayerReadySet(lp_player, false);
    }
    else {
        libCOMI_gf_CU_CommanderPlayerReadySet(lp_player, true);
    }
    if ((UserDataGetInt("Commanders", lp_chosenCommander, "locked", 1) == 1)) {
        DialogControlSetEnabled(libCOMI_gv_cU_CommanderReadyButton, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_CommanderReadyButton, PlayerGroupSingle(lp_player), true);
    }
    if ((lp_chosenCommander != null)) {
        libCOMI_gf_CU_MasteryInitFromData(lp_player);
        libCOMI_gf_CU_MasteryUpdatePoints(lp_player);
        libCOMI_gf_CU_MasteryUpdate(lp_player);
    }

    libCOMI_gf_UpdatePlayerCommander(lp_player);
    Wait(0.0, c_timeGame);
    if ((lp_chosenCommander != libCOMI_gv_cutsceneLastActiveCommander[lp_player])) {
        CutsceneSetFilter(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player], (lp_chosenCommander));
        libCOMI_gv_cutsceneLastActiveCommander[lp_player] = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
        CutsceneGoToBookmark(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player], "CharacterBirthStart");
        if ((lp_chosenCommander == "Horner")) {
            DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(lp_player), true);
            CutscenePause(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player]);
        }
        else {
            DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupSingle(lp_player), false);
            CutscenePlay(libCOMI_gv_aF_CS_CommanderCutscenes[lp_player]);
        }
    }

}

void libCOMI_gf_UpdatePlayerCommander (int lp_player) {
    // Variable Declarations
    playergroup lv_playerSelf;
    playergroup lv_playerAlly;
    int lv_tierIndex;
    string lv_indexPerk;
    text lv_PerkName;
    text lv_PerkDescription;
    text lv_PerkTooltip;
    string lv_perkLevel;
    string lv_playerCommander;
    text lv_playerPrestigeText;
    text lv_playerAllyPrestigeText;
    int lv_upgradesCuunt;
    string lv_perkIcon;
    string lv_perkButton;

    // Automatic Variable Declarations
    const int auto2D6C99DD_ae = libCOMI_gv_mAX_PLAYERLEVEL;
    const int auto2D6C99DD_ai = 1;
    int auto286B5DD7_ae;
    int auto286B5DD7_var;

    // Variable Initialization
    lv_playerSelf = PlayerGroupEmpty();
    lv_playerAlly = PlayerGroupEmpty();

    // Implementation
    if ((libCOMI_gv_cU_CommanderDialog == c_invalidDialogId)) {
        return ;
    }

    lv_playerSelf = PlayerGroupSingle(lp_player);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderLevelLabelSelf, IntToText(libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player))), lv_playerSelf);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderMasteryLabelSelf, IntToText(libCOMI_gv_cU_MasteryLevelCurrent[lp_player]), lv_playerSelf);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderSelectedNameSelf, libCOMI_gf_CC_CommanderName(libCOMI_gf_ActiveCommanderForPlayer(lp_player)), lv_playerSelf);
    libCOMI_gf_CU_CommanderUpdatePrestigeLabels(lp_player);
    lv_upgradesCuunt = 0;
    lv_playerCommander = libCOMI_gf_ActiveCommanderForPlayer(lp_player);
    lv_tierIndex = 1;
    for ( ; ( (auto2D6C99DD_ai >= 0 && lv_tierIndex <= auto2D6C99DD_ae) || (auto2D6C99DD_ai < 0 && lv_tierIndex >= auto2D6C99DD_ae) ) ; lv_tierIndex += auto2D6C99DD_ai ) {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderUpgradesButtons[lv_tierIndex].lv_button, lv_playerSelf, false);
    }
    auto286B5DD7_ae = UserDataFieldValueCount("Commanders", "PerkButton");
    auto286B5DD7_var = 1;
    for ( ; auto286B5DD7_var <= auto286B5DD7_ae; auto286B5DD7_var += 1 ) {
        lv_perkButton = UserDataGetGameLink("Commanders", lv_playerCommander, "PerkButton", auto286B5DD7_var);
        if ((lv_perkButton == null)) {
            continue;
        }

        lv_perkIcon = (CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Icon", c_playerAny));
        if ((lv_perkIcon == null)) {
            lv_perkIcon = "Assets\\Textures\\btn-missing-kaeo.dds";
        }

        lv_PerkName = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Name", c_playerAny));
        lv_PerkDescription = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_perkButton, "Tooltip", c_playerAny));
        TextExpressionSetToken("Param/Expression/lib_COMI_6475462F", "NAME", lv_PerkName);
        TextExpressionSetToken("Param/Expression/lib_COMI_6475462F", "DESCRIPTION", lv_PerkDescription);
        lv_PerkTooltip = TextExpressionAssemble("Param/Expression/lib_COMI_6475462F");
        libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_icon, lv_perkIcon, lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_title, lv_PerkName, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_description, lv_PerkDescription, PlayerGroupAll());
        DialogControlSetVisible(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_button, lv_playerSelf, true);
        if ((auto286B5DD7_var <= libCOMI_gf_CC_CommanderLevel(lp_player, libCOMI_gf_ActiveCommanderForPlayer(lp_player)))) {
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_button, true, lv_playerSelf);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libCOMI_gv_cU_CommanderUpgradesButtons[auto286B5DD7_var].lv_button, false, lv_playerSelf);
        }
    }
    libCOMI_gf_CU_PrestigeUpdate2(lp_player);
    libCOMI_gf_CU_PrestigeUpdate3(lp_player);
    if ((libCOMI_gf_CT_MutatorEnabledCount() == 0)) {
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderMutatorButton, StringExternal("Param/Value/lib_COMI_2334AC7B"), lv_playerSelf);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_E1144253", "A", IntToText(libCOMI_gf_CT_MutatorEnabledCount()));
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderMutatorButton, TextExpressionAssemble("Param/Expression/lib_COMI_E1144253"), lv_playerSelf);
    }
    libCOMI_gf_CU_PrestigeUpdate(lp_player);
}

void libCOMI_gf_PreparingMapProgress (text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderReadyButton, lp_text, PlayerGroupAll());
    Wait(0.0, c_timeGame);
}

void libCOMI_gf_CU_CommanderClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOMI_gv_cUC_CommChoiceEventClosed);
}

void libCOMI_gf_CU_CommanderPlayerReadySet (int lp_player, bool lp_ready) {
    // Automatic Variable Declarations
    playergroup autoF6738DE3_g;
    int autoF6738DE3_var;

    // Implementation
    if ((libCOMI_gv_cU_CommanderSelect_PlayerReady[lp_player] == lp_ready)) {
        return ;
    }

    libCOMI_gv_cU_CommanderSelect_PlayerReady[lp_player] = lp_ready;
    libCOMI_gf_UpdateCommandersList();
    if ((libCOMI_gv_cU_CommanderSelect_PlayerReady[lp_player] == true)) {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyCheckMark, PlayerGroupSingle(lp_player), true);
        autoF6738DE3_g = libCOMI_gf_GetHumanPlayers();
        autoF6738DE3_var = -1;
        while (true) {
            autoF6738DE3_var = PlayerGroupNextPlayer(autoF6738DE3_g, autoF6738DE3_var);
            if (autoF6738DE3_var < 0) { break; }
            if ((PlayerType(autoF6738DE3_var) == c_playerTypeUser) && (PlayerStatus(autoF6738DE3_var) == c_playerStatusActive) && (libCOMI_gv_cU_CommanderSelect_PlayerReady[autoF6738DE3_var] == false)) {
                return ;
            }

        }
        libCOMI_gf_VU_Ready();
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_CommanderReadyCheckMark, PlayerGroupSingle(lp_player), false);
    }
}

void libCOMI_gf_VU_Ready () {
    // Variable Declarations
    int lv_slotIndex;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto7E99CF15_g;
    playergroup autoCDFF0134_g;

    // Variable Initialization

    // Implementation
    TriggerEnable(libCOMI_gt_AF_CS_NewsControlButtonClicked, false);
    TriggerDebugOutputEnable(true);
    TriggerEnable(libCOMI_gt_UT_CommanderClicked, false);
    TriggerEnable(libCOMI_gt_ReadyButtonClicked, false);
    TriggerEnable(libCOMI_gt_CommanderButtonClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommandeAllyLeft, false);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelDownClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommanderLevelUpClicked, false);
    TriggerEnable(libCOMI_gt_CU_CommanderMasteryCheckboxToggle, false);
    TriggerEnable(libCOMI_gt_CU_CommanderMutatorChallengeSelected, false);
    TriggerEnable(libCOMI_gt_CU_PrestigeButtonClicked, false);
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_15F390A4"));
    libCOMI_gf_SpecifyEnemyFactionAndComposition();
    auto7E99CF15_g = libCOMI_gf_GetPlayingPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto7E99CF15_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOMI_gv_chosenTeam[lv_player] == 2)) {
            PlayerGroupAdd(libCOMI_gv_vU_EnemyPlayers, lv_player);
            PlayerGroupAdd(libCOMI_gv_vU_Enemies, lv_player);
        }
        else {
            if ((libCOMI_gv_cCX_PlayerCommander[lv_player] == null)) {
                libCOMI_gv_cCX_PlayerCommander[lv_player] = libCOMI_gf_RandomCommander();
                libCOMI_gv_cCX_PlayerPrestigeIndex[lv_player] = DataTableGetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(libCOMI_gv_cCX_PlayerCommander[lv_player], lv_player));
                libCOMI_gf_CU_MasteryInitFromData(lv_player);
                libCOMI_gf_CU_MasteryUpdatePoints(lv_player);
                libCOMI_gf_CU_MasteryUpdate(lv_player);
            }

            PlayerGroupAdd(libCOMI_gv_vU_Allies, lv_player);
            libCOMI_gf_AddAlliedCommanderPlayer(lv_player);
            libCOMI_gf_CC_PlayerMasteryEnabledSet(lv_player, libNtve_gf_DialogItemIsChecked(libCOMI_gv_cU_CommanderMasteryCheckbox, lv_player));
        }
    }
    libCOMI_gf_CC_SaveAllTransitionData();
    TriggerSendEvent(libCOMI_gv_cUC_CommChoiceEventClosed);
    Wait(0.0, c_timeGame);
    TriggerExecute(libCOMI_gt_CM_CampaignMissionInitialize, true, true);
    Wait(0.0, c_timeGame);
    TriggerExecute(libCOMI_gt_CM_CampaignMissionInitialize2, true, false);
    Wait(0.0, c_timeGame);
    CutsceneStop(libCOMI_gv_aF_CS_CommanderCutscenes[0]);
    CutsceneStop(libCOMI_gv_aF_CS_CommanderCutscenes[1]);
    CutsceneStop(libCOMI_gv_aF_CS_CommanderCutscenes[2]);
    CutsceneClearGlobalFilters();
    DialogSetVisible(libCOMI_gv_aF_CS_CutsceneDialog[1], PlayerGroupAll(), false);
    DialogSetVisible(libCOMI_gv_aF_CS_CommanderMiraDialog, PlayerGroupAll(), false);
    DialogSetVisible(libCOMI_gv_cU_CommanderDialog, libCOMI_gv_all, false);
    autoCDFF0134_g = libCOMI_gv_all;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoCDFF0134_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_ShowHideWorldCover(false, 0.0, lv_player);
    }
    DialogSetVisible(libCOMI_gv_aF_CS_CutsceneDialog[0], PlayerGroupAll(), false);
}

void libCOMI_gf_UT_ChangeAllyPrestige () {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(2) != c_playerStatusActive)) {
        if (libCOMI_gv_uT_PrestigeIndex >= 3) {
            libCOMI_gv_uT_PrestigeIndex = 0;
        }
        else {
            libCOMI_gv_uT_PrestigeIndex = libCOMI_gv_uT_PrestigeIndex + 1;
        }
        libCOMI_gv_cCX_PlayerPrestigeIndex[2] = libCOMI_gv_uT_PrestigeIndex;
        libCOMI_gf_CU_CommanderUpdatePrestigeLabels(1);
        libCOMI_gf_CU_CommanderUpdatePrestigeLabels(2);
        TriggerEnable(libCOMI_gt_UT_CommanderClicked, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_3BB57D52"));
    }
}

string libCOMI_gf_CC_CommanderPrestigeIndexFace3 (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring;
    string lv_prestigefacestring4;
    string lv_prestigefacestring2;
    int lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring = "";
    lv_prestigefacestring2 = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny);
        lv_prestigefacestring4 = (lv_prestigefacestring);
        if ((CatalogEntryIsValid(c_gameCatalogActor, lv_prestigefacestring4) == true)) {
            return (CatalogFieldValueGet(c_gameCatalogActor, lv_prestigefacestring4, "UnitIcon", c_playerAny));
        }

    }

    return null;
}

text libCOMI_gf_CC_CommanderPrestigeIndexFace2 (string lp_commander, int lp_index) {
    // Variable Declarations
    int lv_prestigeindex;
    string lv_prestigefacestring5;
    string lv_prestigefacestring2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_prestigefacestring2 = "";

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_prestigefacestring5) == true)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_AECF6E2E", "NAME", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_prestigefacestring5, "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_COMI_AECF6E2E", "DESCRIPTION", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_prestigefacestring5, "Description", c_playerAny)));
            return TextExpressionAssemble("Param/Expression/lib_COMI_AECF6E2E");
        }

    }

    return null;
}

void libCOMI_gf_CU_PrestigeUpdate2 (int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_itemIndex;
    string lv_face;
    string lv_commander;
    int lv_prestigeindex;
    string lv_prestigefacestring;
    string lv_actor;
    playergroup lv_playerSelf;

    // Automatic Variable Declarations
    const int auto8F8DEAF5_ae = libCOMI_gv_cUC_UNITSMAXCOUNT;
    const int auto8F8DEAF5_ai = 1;

    // Variable Initialization
    lv_prestigefacestring = "";
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = libCOMI_gf_GetPlayerCommanderGameLink(lp_player);
    lv_itemIndex = 1;
    for ( ; ( (auto8F8DEAF5_ai >= 0 && lv_itemIndex <= auto8F8DEAF5_ae) || (auto8F8DEAF5_ai < 0 && lv_itemIndex >= auto8F8DEAF5_ae) ) ; lv_itemIndex += auto8F8DEAF5_ai ) {
        lv_face = libCOMI_gf_CC_CommanderPrestigeIndexFace4(lv_commander, lv_itemIndex);
        if ((lv_face == null)) {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
            lv_prestigefacestring = CatalogFieldValueGet(c_gameCatalogCommander, lv_commander, "UnitArray[" + IntToString((lv_itemIndex - 1)) + "].Unit", c_playerAny);
            lv_actor = (lv_prestigefacestring);
            if ((CatalogEntryIsValid(c_gameCatalogActor, lv_actor) == true)) {
                libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", c_playerAny)), lv_playerSelf);
            }
            else {
                libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_icon, "Assets\\Textures\\umojanlabzergdisplay_05.dds", lv_playerSelf);
            }
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_face, "Name", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderUnitsButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_face, "Description", c_playerAny)), lv_playerSelf);
        }
    }
}

void libCOMI_gf_CU_PrestigeUpdate3 (int lp_player) {
    // Variable Declarations
    text lv_tooltip;
    int lv_itemIndex;
    string lv_face;
    string lv_commander;
    playergroup lv_playerSelf;

    // Automatic Variable Declarations
    const int autoBA8A0672_ae = libCOMI_gv_cUC_ABILITIESMAXCOUNT;
    const int autoBA8A0672_ai = 1;

    // Variable Initialization
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = libCOMI_gf_GetPlayerCommanderGameLink(lp_player);
    lv_itemIndex = 1;
    for ( ; ( (autoBA8A0672_ai >= 0 && lv_itemIndex <= autoBA8A0672_ae) || (autoBA8A0672_ai < 0 && lv_itemIndex >= autoBA8A0672_ae) ) ; lv_itemIndex += autoBA8A0672_ai ) {
        lv_face = libCOMI_gf_CC_CommanderPrestigeIndexFace5(lv_commander, lv_itemIndex);
        if ((lv_face == null)) {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
            libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Icon", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", c_playerAny)), lv_playerSelf);
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderAbilitiesButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", c_playerAny)), lv_playerSelf);
        }
    }
}

string libCOMI_gf_RandomCommander () {
    // Variable Declarations
    string lv_commander;

    // Automatic Variable Declarations
    playergroup autoC92B8547_g;
    int autoC92B8547_var;

    // Variable Initialization
    lv_commander = UserDataInstance("Commanders", RandomInt(1, UserDataInstanceCount("Commanders")));

    // Implementation
    autoC92B8547_g = libCOMI_gv_vU_SlotsPlayers;
    autoC92B8547_var = -1;
    while (true) {
        autoC92B8547_var = PlayerGroupNextPlayer(autoC92B8547_g, autoC92B8547_var);
        if (autoC92B8547_var < 0) { break; }
        if (((lv_commander == libCOMI_gv_cCX_PlayerCommander[autoC92B8547_var]) || (UserDataGetInt("Commanders", lv_commander, "Standard", 1) == 0))) {
            return libCOMI_gf_RandomCommander();
        }

    }
    return lv_commander;
}

void libCOMI_gf_CU_MasteryDisplay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CU_MasteryCreate();
    libCOMI_gf_CU_MasteryInitFromData(lp_player);
    libCOMI_gf_CU_MasteryUpdatePoints(lp_player);
    libCOMI_gf_CU_MasteryUpdate(lp_player);
    libCOMI_gv_cU_MasteryRefCount += 1;
    DialogSetVisible(libCOMI_gv_cU_MasteryDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, true);
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, true);
}

void libCOMI_gf_CU_MasteryCreate () {
    // Variable Declarations
    bool lv_inline;
    int lv_itemIndex;
    int lv_categoryIndex;
    int lv_listPanel;
    playergroup lv_all;

    // Automatic Variable Declarations
    const int autoAF5A14DB_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoAF5A14DB_ai = 1;
    const int autoEBF8261C_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int autoEBF8261C_ai = 1;
    const int auto0A31F750_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto0A31F750_ai = 1;
    const int auto6FE270B8_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int auto6FE270B8_ai = 1;

    // Variable Initialization
    lv_inline = true;
    lv_listPanel = c_invalidDialogControlId;
    lv_all = PlayerGroupAll();

    // Implementation
    if ((lv_inline == true)) {
        lv_listPanel = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryList", c_triggerControlTypePanel, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        lv_itemIndex = 1;
        for ( ; ( (autoAF5A14DB_ai >= 0 && lv_itemIndex <= autoAF5A14DB_ae) || (autoAF5A14DB_ai < 0 && lv_itemIndex >= autoAF5A14DB_ae) ) ; lv_itemIndex += autoAF5A14DB_ai ) {
            libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("Item" + IntToString(lv_itemIndex), c_triggerControlTypePanel, lv_listPanel, lv_all);
            libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("PlusButton", c_triggerControlTypeButton, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("MinusButton", c_triggerControlTypeButton, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryNameLabels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("NameLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryValueLabels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("ValueLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
            libCOMI_gv_cU_MasteryPointLabels[lv_itemIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("PointsLabel", c_triggerControlTypeLabel, libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], lv_all);
        }
        libCOMI_gv_cU_MasteryLevelUpButton = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelPlusButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        libCOMI_gv_cU_MasteryLevelLabel = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelLabel", c_triggerControlTypeLabel, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
        lv_categoryIndex = 1;
        for ( ; ( (autoEBF8261C_ai >= 0 && lv_categoryIndex <= autoEBF8261C_ae) || (autoEBF8261C_ai < 0 && lv_categoryIndex >= autoEBF8261C_ae) ) ; lv_categoryIndex += autoEBF8261C_ai ) {
            libCOMI_gv_cU_MasteryCategoryPoints[lv_categoryIndex] = libARRA_gf_HookUpDialogItemandshowforplayers("Category" + IntToString(lv_categoryIndex)+ "Points", c_triggerControlTypeLabel, lv_listPanel, lv_all);
        }
        libCOMI_gv_cU_MasteryLevelDownButton = libARRA_gf_HookUpDialogItemandshowforplayers("MasteryLevelMinusButton", c_triggerControlTypeButton, libCOMI_gv_vU_DetailsResearchContainer, lv_all);
    }
    else {
        DialogCreate(1000, 800, c_anchorBottomLeft, 0, 0, true);
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libCOMI_gv_cU_MasteryDialog = DialogLastCreated();
        DialogControlCreateFromTemplate(libCOMI_gv_cU_MasteryDialog, c_triggerControlTypePanel, "Coop_CommanderMasterySelection/MasteryLevelTemplate");
        libCOMI_gv_cU_MasteryPanel = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypePanel, "MasteryList");
        lv_listPanel = DialogControlLastCreated();
        lv_itemIndex = 1;
        for ( ; ( (auto0A31F750_ai >= 0 && lv_itemIndex <= auto0A31F750_ae) || (auto0A31F750_ai < 0 && lv_itemIndex >= auto0A31F750_ae) ) ; lv_itemIndex += auto0A31F750_ai ) {
            DialogControlHookup(lv_listPanel, c_triggerControlTypePanel, "Item" + IntToString(lv_itemIndex));
            libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeButton, "PlusButton");
            libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeButton, "MinusButton");
            libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "NameLabel");
            libCOMI_gv_cU_MasteryNameLabels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "ValueLabel");
            libCOMI_gv_cU_MasteryValueLabels[lv_itemIndex] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_MasteryItemPanels[lv_itemIndex], c_triggerControlTypeLabel, "PointsLabel");
            libCOMI_gv_cU_MasteryPointLabels[lv_itemIndex] = DialogControlLastCreated();
        }
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "MasteryLevelPlusButton");
        libCOMI_gv_cU_MasteryLevelUpButton = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "MasteryLevelMinusButton");
        libCOMI_gv_cU_MasteryLevelDownButton = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeLabel, "MasteryLevelLabel");
        libCOMI_gv_cU_MasteryLevelLabel = DialogControlLastCreated();
        lv_categoryIndex = 1;
        for ( ; ( (auto6FE270B8_ai >= 0 && lv_categoryIndex <= auto6FE270B8_ae) || (auto6FE270B8_ai < 0 && lv_categoryIndex >= auto6FE270B8_ae) ) ; lv_categoryIndex += auto6FE270B8_ai ) {
            DialogControlHookup(lv_listPanel, c_triggerControlTypeLabel, "Category" + IntToString(lv_categoryIndex)+ "Points");
            libCOMI_gv_cU_MasteryCategoryPoints[lv_categoryIndex] = DialogControlLastCreated();
        }
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "AcceptButton");
        libCOMI_gv_cU_MasteryAcceptButton = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MasteryPanel, c_triggerControlTypeButton, "ResetButton");
        libCOMI_gv_cU_MasteryResetButton = DialogControlLastCreated();
    }
}

void libCOMI_gf_CU_MasteryUpdateData (int lp_player) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto92A45083_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto92A45083_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gf_CC_PlayerMasteryLevelSet(lp_player, libCOMI_gv_cU_MasteryLevelCurrent[lp_player]);
    lv_itemIndex = 1;
    for ( ; ( (auto92A45083_ai >= 0 && lv_itemIndex <= auto92A45083_ae) || (auto92A45083_ai < 0 && lv_itemIndex >= auto92A45083_ae) ) ; lv_itemIndex += auto92A45083_ai ) {
        libCOMI_gf_CC_PlayerMasteryUpgradeLevelSet(lp_player, libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]);
    }
}

void libCOMI_gf_CU_MasteryInitFromData (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_masteryIndex;

    // Automatic Variable Declarations
    int autoFFEB9740_ae;
    const int autoFFEB9740_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cU_MasteryShiftPressed[lp_player] = false;
    libCOMI_gv_cU_MasteryLevelCurrent[lp_player] = libCOMI_gf_CC_PlayerMasteryLevel(lp_player);
    autoFFEB9740_ae = UserDataFieldValueCount("Commanders", "Mastery");
    lv_masteryIndex = 1;
    for ( ; ( (autoFFEB9740_ai >= 0 && lv_masteryIndex <= autoFFEB9740_ae) || (autoFFEB9740_ai < 0 && lv_masteryIndex >= autoFFEB9740_ae) ) ; lv_masteryIndex += autoFFEB9740_ai ) {
        lv_indexMasteryUpgrade = UserDataGetUserInstance("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "Mastery", lv_masteryIndex);
        if ((lv_indexMasteryUpgrade != null)) {
            libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_masteryIndex][lp_player] = libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade);
            libCOMI_gv_cU_MasteryUpgrades[lv_masteryIndex][lp_player] = lv_indexMasteryUpgrade;
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOMI_gf_CC_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_MasteryNameLabels[lv_masteryIndex], libCOMI_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupSingle(lp_player));
        }

    }
}

void libCOMI_gf_CU_MasteryClose (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoE8A7A29E_g;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libCOMI_gv_cU_MasteryDialog, PlayerGroupSingle(lp_player), false);
    libCOMI_gv_cU_MasteryRefCount -= 1;
    if ((libCOMI_gv_cU_MasteryRefCount == 0)) {
        TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, false);
        TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, false);
        TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, false);
    }

    autoE8A7A29E_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE8A7A29E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
}

void libCOMI_gf_CU_MasteryUpdate (int lp_player) {
    // Variable Declarations
    int lv_itemIndex;
    int lv_categoryIndex;
    playergroup lv_updatePlayers;
    string lv_expressionId;

    // Automatic Variable Declarations
    const int autoCB6E46F6_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoCB6E46F6_ai = 1;
    const int auto04FF26DF_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int auto04FF26DF_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();
    lv_expressionId = "";

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((libCOMI_gv_cU_MasteryLevelCurrent[lp_player] <= 0)) {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelDownButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelDownButton, lv_updatePlayers, true);
    }
    if ((libCOMI_gv_cU_MasteryLevelCurrent[lp_player] >= libCOMI_gv_cCC_MASTERY_MAX_LEVEL)) {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelUpButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_MasteryLevelUpButton, lv_updatePlayers, true);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_7B1B3B5D", "A", IntToText(libCOMI_gv_cU_MasteryLevelCurrent[lp_player]));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryLevelLabel, TextExpressionAssemble("Param/Expression/lib_COMI_7B1B3B5D"), lv_updatePlayers);
    lv_itemIndex = 1;
    for ( ; ( (autoCB6E46F6_ai >= 0 && lv_itemIndex <= autoCB6E46F6_ae) || (autoCB6E46F6_ai < 0 && lv_itemIndex >= autoCB6E46F6_ae) ) ; lv_itemIndex += autoCB6E46F6_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_099E8831", "A", IntToText(libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]));
        TextExpressionSetToken("Param/Expression/lib_COMI_099E8831", "B", IntToText(libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL));
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryPointLabels[lv_itemIndex], TextExpressionAssemble("Param/Expression/lib_COMI_099E8831"), lv_updatePlayers);
        lv_expressionId = ("UserData/MasteryUpgrades/" + (libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player]) + "_ValueFormat");
        TextExpressionSetToken(lv_expressionId, "A", FixedToText((libCOMI_gf_CC_PlayerMasteryValueIncrement(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], 1) * libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]), 0));
        TextExpressionSetToken(lv_expressionId, "B", FixedToText((libCOMI_gf_CC_PlayerMasteryValueIncrement(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player], 2) * libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player]), 0));
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryValueLabels[lv_itemIndex], TextExpressionAssemble(lv_expressionId), lv_updatePlayers);
        if (((libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] <= 0) || (libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] >= libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL))) {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex], lv_updatePlayers, true);
        }
        if ((libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] <= 0)) {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetEnabled(libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex], lv_updatePlayers, true);
        }
    }
    lv_categoryIndex = 1;
    for ( ; ( (auto04FF26DF_ai >= 0 && lv_categoryIndex <= auto04FF26DF_ae) || (auto04FF26DF_ai < 0 && lv_categoryIndex >= auto04FF26DF_ae) ) ; lv_categoryIndex += auto04FF26DF_ai ) {
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MasteryCategoryPoints[lv_categoryIndex], IntToText(libCOMI_gv_cU_MasteryCategoryPointsLeft[lv_categoryIndex][lp_player]), lv_updatePlayers);
    }
}

void libCOMI_gf_CU_MasteryUpdatePoints (int lp_player) {
    // Variable Declarations
    int lv_categoryIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto78484FFD_ae = libCOMI_gv_cCC_MASTERY_CATEGORIES;
    const int auto78484FFD_ai = 1;
    const int auto91934D34_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto91934D34_ai = 1;

    // Variable Initialization

    // Implementation
    lv_categoryIndex = 1;
    for ( ; ( (auto78484FFD_ai >= 0 && lv_categoryIndex <= auto78484FFD_ae) || (auto78484FFD_ai < 0 && lv_categoryIndex >= auto78484FFD_ae) ) ; lv_categoryIndex += auto78484FFD_ai ) {
        libCOMI_gv_cU_MasteryCategoryPointsLeft[lv_categoryIndex][lp_player] = libCOMI_gf_CC_PlayerMasteryCategoryPointsAtLevel(lp_player, lv_categoryIndex, libCOMI_gv_cU_MasteryLevelCurrent[lp_player]);
    }
    lv_itemIndex = 1;
    for ( ; ( (auto91934D34_ai >= 0 && lv_itemIndex <= auto91934D34_ae) || (auto91934D34_ai < 0 && lv_itemIndex >= auto91934D34_ae) ) ; lv_itemIndex += auto91934D34_ai ) {
        libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] -= libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player];
        if ((libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] < 0)) {
            libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][lp_player] += libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player];
            libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][lp_player])][lp_player] = 0;
        }

    }
}

void libCOMI_gf_CU_CommanderUpdatePrestigeLabels (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderSelectedPrestigeSelf, libCOMI_gf_GetPlayerPrestigeName(lp_player), PlayerGroupSingle(lp_player));
}

text libCOMI_gf_GetPlayerPrestigeName (int lp_player) {
    // Variable Declarations
    string lv_playerCommander;
    int lv_prestigeSelf;
    text lv_playerPrestigeText;
    string lv_face;
    string lv_prestige;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerCommander = libCOMI_gv_cCX_PlayerCommander[lp_player];
    lv_prestigeSelf = libCOMI_gf_CC_PlayerActivePrestigeIndex(lp_player);

    // Implementation
    if ((lv_prestigeSelf == 0)) {
        lv_playerPrestigeText = null;
    }
    else {
        lv_prestige = UserDataGetUserInstance("Commanders", lv_playerCommander, "Prestige", lv_prestigeSelf);
        lv_face = UserDataGetGameLink("Prestiges", lv_prestige, "Icon", 1);
        lv_playerPrestigeText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player));
    }
    return lv_playerPrestigeText;
}

void libCOMI_gf_CU_PrestigeUpdate (int lp_player) {
    // Variable Declarations
    int lv_prestigeCount;
    int lv_masteryTalentsCount;
    int lv_itemIndex;
    string lv_face;
    string lv_face2;
    playergroup lv_playerSelf;
    string lv_commander;
    string lv_perkButton;
    string lv_prestige;

    // Automatic Variable Declarations
    const int autoFAE6CD1D_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int autoFAE6CD1D_ai = 1;

    // Variable Initialization
    lv_playerSelf = PlayerGroupSingle(lp_player);

    // Implementation
    lv_commander = UserDataGetGameLink("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "ZZ_CommanderData", 1);
    lv_itemIndex = 1;
    for ( ; ( (autoFAE6CD1D_ai >= 0 && lv_itemIndex <= autoFAE6CD1D_ae) || (autoFAE6CD1D_ai < 0 && lv_itemIndex >= autoFAE6CD1D_ae) ) ; lv_itemIndex += autoFAE6CD1D_ai ) {
        lv_prestige = UserDataGetUserInstance("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "Prestige", lv_itemIndex);
        if ((lv_prestige == null)) {
            DialogControlSetVisible(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, lv_playerSelf, false);
            continue;
        }

        lv_face = UserDataGetGameLink("Prestiges", lv_prestige, "Icon", 1);
        DialogControlSetVisible(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, lv_playerSelf, true);
        libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_icon, (CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Icon", c_playerAny)), lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_title, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player)), lv_playerSelf);
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_description, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", lp_player)), lv_playerSelf);
    }
}

void libCOMI_gf_CU_PrestigeSelect (int lp_player, int lp_index) {
    // Variable Declarations
    int lv_boundedIndex;
    int lv_itemIndex;
    string lv_state;
    int lv_playerAlly;
    text lv_playerPrestigeText;
    text lv_playerAllyPrestigeText;

    // Automatic Variable Declarations
    const int auto9A19BC1E_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto9A19BC1E_ai = 1;

    // Variable Initialization
    lv_boundedIndex = libNtve_gf_ArithmeticIntClamp(lp_index, 0, libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK);
    lv_state = "";
    lv_playerAlly = libCOMI_gf_CC_PlayerAlly(lp_player);

    // Implementation
    lv_itemIndex = 1;
    for ( ; ( (auto9A19BC1E_ai >= 0 && lv_itemIndex <= auto9A19BC1E_ae) || (auto9A19BC1E_ai < 0 && lv_itemIndex >= auto9A19BC1E_ae) ) ; lv_itemIndex += auto9A19BC1E_ai ) {
        if ((lv_itemIndex == lv_boundedIndex)) {
            lv_state = "Toggled";
        }
        else {
            lv_state = "NotToggled";
        }
        DialogControlSetAnimationState(libCOMI_gv_cU_CommanderPrestigesButtons[lv_itemIndex].lv_button, PlayerGroupSingle(lp_player), "ToggledState", lv_state);
    }
    libCOMI_gf_CC_SetPlayerPrestigeIndex(lp_player, lv_boundedIndex);
    libCOMI_gf_CU_CommanderUpdatePrestigeLabels(lp_player);
}

string libCOMI_gf_CC_CommanderPrestigeIndexFace5 (string lp_commander, int lp_index) {
    // Variable Declarations
    string lv_prestigefacestring5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_ABILITIESMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "CommanderAbilArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "CommanderAbilArray[" + IntToString((lp_index - 1)) + "].Button", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogButton, lv_prestigefacestring5) == true)) {
            return lv_prestigefacestring5;
        }

    }

    return null;
}

string libCOMI_gf_CC_CommanderPrestigeIndexFace4 (string lp_commander, int lp_index) {
    // Variable Declarations
    string lv_prestigefacestring5;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_commander != null) && ((lp_index >= 1) && (lp_index <= libCOMI_gv_cUC_UNITSMAXCOUNT)) && (CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == true) && (CatalogFieldValueCount(c_gameCatalogCommander, lp_commander, "UnitArray", c_playerAny) >= lp_index)) {
        lv_prestigefacestring5 = (CatalogFieldValueGet(c_gameCatalogCommander, lp_commander, "UnitArray[" + IntToString((lp_index - 1)) + "].Unit", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_prestigefacestring5) == true)) {
            return lv_prestigefacestring5;
        }

    }

    return null;
}

void libCOMI_gf_SetGameMode (int lp_gamemode) {
    // Variable Declarations
    playergroup lv_all;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all = PlayerGroupAll();

    // Implementation
    libCOMI_gv_gameMode = lp_gamemode;
    TriggerEnable(libCOMI_gt_GameModePulldownUsed, false);
    DialogControlSelectItem(libCOMI_gv_vU_GameModePulldown, lv_all, lp_gamemode);
    TriggerEnable(libCOMI_gt_GameModePulldownUsed, true);
    libCOMI_gf_UpdateCommandersList();
}

void libCOMI_gf_UpdateGameModeList () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto107AAD20_ae;
    const int auto107AAD20_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(libCOMI_gv_vU_GameModePulldown, libCOMI_gv_all);
    auto107AAD20_ae = libCOMI_gv_totalPlayersOnMap;
    lv_i = 1;
    for ( ; ( (auto107AAD20_ai >= 0 && lv_i <= auto107AAD20_ae) || (auto107AAD20_ai < 0 && lv_i >= auto107AAD20_ae) ) ; lv_i += auto107AAD20_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_7B047753", "A", IntToText(lv_i));
        DialogControlAddItem(libCOMI_gv_vU_GameModePulldown, libCOMI_gv_all, TextExpressionAssemble("Param/Expression/lib_COMI_7B047753"));
    }
    libCOMI_gf_SetGameMode(libCOMI_gv_gameMode);
}

void libCOMI_gf_SetDifficulty (int lp_difficulty) {
    // Variable Declarations
    playergroup lv_all;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_all = PlayerGroupAll();

    // Implementation
    libCOMI_gv_selectedDifficulty = lp_difficulty;
    TriggerEnable(libCOMI_gt_DifficultyPulldownUsed, false);
    DialogControlSelectItem(libCOMI_gv_vU_CommanderDifficultyPulldown, lv_all, lp_difficulty);
    TriggerEnable(libCOMI_gt_DifficultyPulldownUsed, true);
}

void libCOMI_gf_UpdateDifficultiesList () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlRemoveAllItems(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all);
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_7779130F"));
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_7ABBF39A"));
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_3045EA12"));
    DialogControlAddItem(libCOMI_gv_vU_CommanderDifficultyPulldown, libCOMI_gv_all, StringExternal("Param/Value/lib_COMI_904C23E1"));
    libCOMI_gf_SetDifficulty(libCOMI_gv_selectedDifficulty);
}

string libCOMI_gf_HybridMajor () {
    // Variable Declarations
    string lv_hybridMajor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        lv_hybridMajor = "HybridBehemoth";
    }
    else {
        lv_hybridMajor = "HybridDominatorVoid";
    }
    return lv_hybridMajor;
}

string libCOMI_gf_HybridMinor () {
    // Variable Declarations
    string lv_hybridMinor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RandomInt(0, 1) == 1)) {
        lv_hybridMinor = "HybridDestroyer";
    }
    else {
        lv_hybridMinor = "HybridReaver";
    }
    return lv_hybridMinor;
}

text libCOMI_gf_CU_PrestigeBriefFormatTooltip (int lp_player) {
    // Variable Declarations
    int lv_playerPrestige;
    string lv_prestige;
    string lv_face2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerPrestige = libCOMI_gf_CC_PlayerActivePrestigeIndex(lp_player);
    lv_prestige = UserDataGetUserInstance("Commanders", libCOMI_gv_cCX_PlayerCommander[lp_player], "Prestige", lv_playerPrestige);
    lv_face2 = UserDataGetGameLink("Prestiges", lv_prestige, "Icon", 1);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_F34F0177", "A", libCOMI_gf_CC_CommanderName(libCOMI_gf_ActiveCommanderForPlayer(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COMI_F34F0177", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face2, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COMI_F34F0177", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face2, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COMI_F34F0177");
}

void libCOMI_gf_CU_PrestigeBriefInit () {
    // Variable Declarations
    int lv_playerPrestige;
    int lv_playerAllyPrestige;
    text lv_playerTooltip;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup auto9C0744BC_g;
    int auto9C0744BC_var;

    // Variable Initialization

    // Implementation
    auto9C0744BC_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto9C0744BC_var = -1;
    while (true) {
        auto9C0744BC_var = PlayerGroupNextPlayer(auto9C0744BC_g, auto9C0744BC_var);
        if (auto9C0744BC_var < 0) { break; }
        lv_slot += 1;
        if ((libCOMI_gv_cU_PlayerPrestigeBrief[lv_slot] == c_invalidDialogControlId)) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/PrestigeBrief" + IntToString(lv_slot)));
            libCOMI_gv_cU_PlayerPrestigeBrief[lv_slot] = DialogControlLastCreated();
            DialogControlHookup(libCOMI_gv_cU_PlayerPrestigeBrief[lv_slot], c_triggerControlTypeImage, "CommanderIcon");
            libCOMI_gv_cU_PlayerPrestigeBriefImage[lv_slot] = DialogControlLastCreated();
            lv_playerPrestige = libCOMI_gf_CC_PlayerActivePrestigeIndex(auto9C0744BC_var);
            if ((lv_playerPrestige != 0) && (lv_playerPrestige != 1)) {
                lv_playerTooltip = libCOMI_gf_CU_PrestigeBriefFormatTooltip(auto9C0744BC_var);
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_PlayerPrestigeBrief[lv_slot], lv_playerTooltip, PlayerGroupSingle(auto9C0744BC_var));
                libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_PlayerPrestigeBriefImage[lv_slot], UserDataGetImagePath("Commanders", libCOMI_gf_ActiveCommanderForPlayer(auto9C0744BC_var), "Icon", 1), PlayerGroupAll());
            }

        }

    }
    libCOMI_gf_CU_PrestigeBriefReveal();
}

trigger auto_libCOMI_gf_CU_PrestigeBriefReveal_Trigger = null;

void libCOMI_gf_CU_PrestigeBriefReveal () {
    if (auto_libCOMI_gf_CU_PrestigeBriefReveal_Trigger == null) {
        auto_libCOMI_gf_CU_PrestigeBriefReveal_Trigger = TriggerCreate("auto_libCOMI_gf_CU_PrestigeBriefReveal_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CU_PrestigeBriefReveal_Trigger, false, false);
}

bool auto_libCOMI_gf_CU_PrestigeBriefReveal_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerPrestige;
    int lv_playerAllyPrestige;
    int lv_slot;

    // Automatic Variable Declarations
    playergroup auto7F99B44F_g;
    int auto7F99B44F_var;

    // Variable Initialization

    // Implementation
    Wait(3.0, c_timeGame);
    auto7F99B44F_g = libCOMI_gf_GetAlliedCommandersPlayers();
    auto7F99B44F_var = -1;
    while (true) {
        auto7F99B44F_var = PlayerGroupNextPlayer(auto7F99B44F_g, auto7F99B44F_var);
        if (auto7F99B44F_var < 0) { break; }
        lv_slot += 1;
        lv_playerPrestige = libCOMI_gf_CC_PlayerActivePrestigeIndex(auto7F99B44F_var);
        if ((lv_playerPrestige != 0) && (lv_playerPrestige != 1)) {
            DialogControlSetVisible(libCOMI_gv_cU_PlayerPrestigeBrief[lv_slot], PlayerGroupAll(), true);
        }

    }
    return true;
}

void libCOMI_gf_CU_EnemyBriefInit (string lp_aIPersonality) {
    // Variable Declarations
    int lv_enemyBriefFactionImage;
    string lv_fACTION;
    text lv_cOMPOSITION_SUBTITLE;
    text lv_cOMPOSITION_TITLE;
    text lv_cOMPOSITION_DESCRIPTION;
    string lv_fACTION_ICON;
    int lv_difficulty;
    int lv_i;
    int lv_j;
    string lv_unit;
    int lv_limit;
    int lv_minDifficulty;
    int lv_unitTech;
    text lv_techTooltip;
    text lv_unitName;
    string lv_unitIcon;
    int lv_enemyPlayer;
    int lv_unitGlosary;
    text lv_difficultyString;

    // Automatic Variable Declarations
    int auto984A7A57_ae;
    const int auto984A7A57_ai = 1;
    const int auto0828CF92_ae = 4;
    const int auto0828CF92_ai = 1;
    int auto23BBB498_ae;
    const int auto23BBB498_ai = 1;
    int autoCEBB2046_val;

    // Variable Initialization
    lv_enemyBriefFactionImage = c_invalidDialogControlId;
    lv_fACTION = UserDataGetUserInstance("Compositions", lp_aIPersonality, "Faction", 1);
    lv_cOMPOSITION_SUBTITLE = UserDataGetText("Compositions", lp_aIPersonality, "Subtitle", 1);
    lv_cOMPOSITION_TITLE = UserDataGetText("Compositions", lp_aIPersonality, "Title", 1);
    lv_cOMPOSITION_DESCRIPTION = UserDataGetText("Compositions", lp_aIPersonality, "Description", 1);
    lv_fACTION_ICON = libARRA_gf_IIF5(UserDataGetImagePath("Factions", lv_fACTION, "Icon", 1), UserDataGetImagePath("Factions", lv_fACTION, "IconWaves", 1));
    lv_techTooltip = StringToText("");
    lv_unitIcon = "";
    lv_enemyPlayer = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1);
    lv_unitGlosary = 1;

    // Implementation
    auto984A7A57_ae = UserDataFieldValueCount("Compositions", "WavesUnits");
    lv_i = 1;
    for ( ; ( (auto984A7A57_ai >= 0 && lv_i <= auto984A7A57_ae) || (auto984A7A57_ai < 0 && lv_i >= auto984A7A57_ae) ) ; lv_i += auto984A7A57_ai ) {
        lv_unit = UserDataGetUnit("Compositions", lp_aIPersonality, "WavesUnits", lv_i);
        lv_unitTech = UserDataGetInt("Compositions", lp_aIPersonality, "WavesTier", lv_i);
        lv_unitGlosary = UserDataGetInt("Compositions", lp_aIPersonality, "WavesUnitsGlossary", lv_i);
        if ((lv_unit != null) && (lv_unit != "") && (lv_unitTech <= 7)) {
            lv_minDifficulty = 1;
            lv_difficulty = 1;
            for ( ; ( (auto0828CF92_ai >= 0 && lv_difficulty <= auto0828CF92_ae) || (auto0828CF92_ai < 0 && lv_difficulty >= auto0828CF92_ae) ) ; lv_difficulty += auto0828CF92_ai ) {
                lv_limit = 999;
                auto23BBB498_ae = UserDataInstanceCount("XCoopAIAttackWaveUnitLimits");
                lv_j = 1;
                for ( ; ( (auto23BBB498_ai >= 0 && lv_j <= auto23BBB498_ae) || (auto23BBB498_ai < 0 && lv_j >= auto23BBB498_ae) ) ; lv_j += auto23BBB498_ai ) {
                    if ((lv_unit == UserDataGetUnit("XCoopAIAttackWaveUnitLimits", UserDataInstance("XCoopAIAttackWaveUnitLimits", lv_j), "UnitToLimit", 1))) {
                        lv_limit = UserDataGetInt("XCoopAIAttackWaveUnitLimits", UserDataInstance("XCoopAIAttackWaveUnitLimits", lv_j), "LimitPerDifficulty", lv_difficulty);
                        break;
                    }

                }
                if ((lv_limit == 0)) {
                    lv_minDifficulty = (lv_difficulty + 1);
                }

            }
            if ((CatalogEntryIsValid(c_gameCatalogActor, (lv_unit)) == false)) {
                continue;
            }

            lv_unitIcon = CatalogFieldValueGet(c_gameCatalogActor, ((lv_unit)), "UnitIcon", lv_enemyPlayer);
            if ((lv_unitIcon == null)) {
                continue;
            }

            lv_unitName = UnitTypeGetName(lv_unit);
            autoCEBB2046_val = lv_minDifficulty;
            if (autoCEBB2046_val == 3) {
                lv_difficultyString = StringExternal("Param/Value/lib_COMI_9833F1F0");
            }
            else if (autoCEBB2046_val == 4) {
                lv_difficultyString = StringExternal("Param/Value/lib_COMI_1DA0D55F");
            }
            else {
                lv_difficultyString = StringToText("");
            }
            TextExpressionSetToken("Param/Expression/lib_COMI_A4921597", "ICON", StringToText(lv_unitIcon));
            TextExpressionSetToken("Param/Expression/lib_COMI_A4921597", "NAME", lv_unitName);
            TextExpressionSetToken("Param/Expression/lib_COMI_A4921597", "DIFFICULTY", lv_difficultyString);
            lv_techTooltip = (lv_techTooltip + TextExpressionAssemble("Param/Expression/lib_COMI_A4921597"));
        }

    }
    if ((libCOMI_gv_cU_EnemyBrief == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/EnemyBrief");
        libCOMI_gv_cU_EnemyBrief = DialogControlLastCreated();
    }

    lv_enemyBriefFactionImage = libARRA_gf_HookUpDialogItemandshowforplayers("RaceIcon", c_triggerControlTypeImage, libCOMI_gv_cU_EnemyBrief, PlayerGroupEmpty());
    libNtve_gf_SetDialogItemImage(lv_enemyBriefFactionImage, lv_fACTION_ICON, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_COMI_CDC62691", "SUBTITLE", lv_cOMPOSITION_SUBTITLE);
    TextExpressionSetToken("Param/Expression/lib_COMI_CDC62691", "TITLE", lv_cOMPOSITION_TITLE);
    TextExpressionSetToken("Param/Expression/lib_COMI_CDC62691", "DESCRIPTION", lv_cOMPOSITION_DESCRIPTION);
    TextExpressionSetToken("Param/Expression/lib_COMI_CDC62691", "UNITS", lv_techTooltip);
    libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_EnemyBrief, TextExpressionAssemble("Param/Expression/lib_COMI_CDC62691"), PlayerGroupAll());
}

void libCOMI_gf_CU_EnemyBriefShowHide (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_EnemyBrief != c_invalidDialogControlId)) {
    }
    else {
        return ;
    }
    DialogControlSetVisible(libCOMI_gv_cU_EnemyBrief, PlayerGroupAll(), lp_showHide);
}

trigger auto_libCOMI_gf_DisplayArmyButton_Trigger = null;
bool auto_libCOMI_gf_DisplayArmyButton_lp_doDoNot;

void libCOMI_gf_DisplayArmyButton (bool lp_doDoNot) {
    auto_libCOMI_gf_DisplayArmyButton_lp_doDoNot = lp_doDoNot;

    if (auto_libCOMI_gf_DisplayArmyButton_Trigger == null) {
        auto_libCOMI_gf_DisplayArmyButton_Trigger = TriggerCreate("auto_libCOMI_gf_DisplayArmyButton_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_DisplayArmyButton_Trigger, false, false);
}

bool auto_libCOMI_gf_DisplayArmyButton_TriggerFunc (bool testConds, bool runActions) {
    bool lp_doDoNot = auto_libCOMI_gf_DisplayArmyButton_lp_doDoNot;

    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_ArmyButton != c_invalidDialogControlId)) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeFlash, "UIContainer/ConsoleUIContainer/ArmyButtonTipEffects");
    libCOMI_gv_cU_ArmyButtonTipPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton");
    libCOMI_gv_cU_ArmyButton = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    TriggerEnable(libCOMI_gt_CU_ArmyButtonUsed, true);
    if ((lp_doDoNot == true)) {
        Wait(3.0, c_timeReal);
        TriggerQueueEnter();
        TriggerExecute(libCOMI_gt_CU_FlashArmyButtonHelpTip, true, false);
        TriggerQueueExit();
    }

    return true;
}

int libCOMI_gf_CU_BB_HPBarCurrentWidth () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_BB_Boss == null)) {
        lv_current = libCOMI_gv_cU_BB_CurrentValue;
        lv_max = libCOMI_gv_cU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }

    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }

    lv_width = FixedToInt((libCOMI_gv_cUC_BB_HPBarWidth * (lv_current / lv_max)));
    return lv_width;
}

text libCOMI_gf_CU_BB_HPBarFormatLabel () {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_BB_Boss == null)) {
        lv_current = libCOMI_gv_cU_BB_CurrentValue;
        lv_max = libCOMI_gv_cU_BB_MaxValue;
    }
    else {
        lv_current = (UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libCOMI_gv_cU_BB_Boss, c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_COMI_1B897345") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libCOMI_gf_CU_BB_HPBarChange_Trigger = null;

void libCOMI_gf_CU_BB_HPBarChange () {
    if (auto_libCOMI_gf_CU_BB_HPBarChange_Trigger == null) {
        auto_libCOMI_gf_CU_BB_HPBarChange_Trigger = TriggerCreate("auto_libCOMI_gf_CU_BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CU_BB_HPBarChange_Trigger, false, false);
}

bool auto_libCOMI_gf_CU_BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_newWidth;
    int lv_width;
    int lv_damageBar;
    fixed lv_oldPct;
    fixed lv_newPct;
    string lv_iMAGE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damageBar = c_invalidDialogControlId;

    // Implementation
    lv_newWidth = libCOMI_gf_CU_BB_HPBarCurrentWidth();
    lv_width = (libCOMI_gv_cU_BB_HPOldWidth - lv_newWidth);
    lv_oldPct = (libCOMI_gv_cU_BB_HPOldWidth / libCOMI_gv_cUC_BB_HPBarWidth);
    lv_newPct = (lv_newWidth / libCOMI_gv_cUC_BB_HPBarWidth);
    libCOMI_gv_cU_BB_HPOldWidth = lv_newWidth;
    if ((((lv_newPct <= 0.75) && (lv_oldPct > 0.75)) || ((lv_newPct <= 0.5) && (lv_oldPct > 0.5)) || ((lv_newPct <= 0.25) && (lv_oldPct > 0.25)))) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_BB_Panel, PlayerGroupAll(), "Highlight");
    }
    else if ((lv_newPct < 0.25)) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_BB_Panel, PlayerGroupAll(), "Danger");
    }
    else if (true) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_BB_Panel, PlayerGroupAll(), "DangerStop");
    }
    if ((lv_width > 0)) {
        DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_BB_Panel, c_triggerControlTypeImage, "LotV_GameUnitFrame/BossHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, libCOMI_gv_cU_BB_HpCurrentImage, c_anchorLeft, 0, 0);
        lv_damageBar = DialogControlLastCreated();
        DialogControlSetSize(lv_damageBar, PlayerGroupAll(), (libCOMI_gv_cU_BB_HPOldWidth + lv_width), libCOMI_gv_cUC_BB_HPBarHeight);
        libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 507, PlayerGroupAll());
        DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), true);
        Wait(1.0, c_timeReal);
        DialogControlFadeTransparency(lv_damageBar, PlayerGroupAll(), 1.0, 100.0);
        Wait(1.1, c_timeReal);
        DialogControlDestroy(lv_damageBar);
    }

    return true;
}

void libCOMI_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_BB_Title = lp_title;
    libCOMI_gv_cU_BB_Boss = null;
    libCOMI_gf_SetSingularBossBarMaximumValueVoidCampaign(lp_max, true);
    libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign(lp_max, true);
    libCOMI_gv_cU_BB_HPOldWidth = -1;
    if ((libCOMI_gv_cU_BB_Panel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/VoidBossUnitFrame");
        libCOMI_gv_cU_BB_Panel = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_BB_Panel, c_triggerControlTypeLabel, "NameLabel");
        libCOMI_gv_cU_BB_TitleLabel = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_BB_Panel, c_triggerControlTypeImage, "HealthBarImage");
        libCOMI_gv_cU_BB_HpCurrentImage = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_BB_Panel, c_triggerControlTypeLabel, "HealthLabel");
        libCOMI_gv_cU_BB_HpLabel = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_BB_Panel, c_triggerControlTypeImage, "BarBackground");
        libCOMI_gv_cU_BB_HpBackground = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_BB_Panel, c_triggerControlTypeImage, "ObjectiveBarBorder");
        libCOMI_gv_cU_BB_ObjectiveBG = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_BB_Panel, c_triggerControlTypeImage, "BossBarBorder");
        libCOMI_gv_cU_BB_BossBG = DialogControlLastCreated();
    }

    DialogControlSetVisible(libCOMI_gv_cU_BB_Panel, PlayerGroupAll(), true);
    libCOMI_gf_RefreshSingularBossBarVoidCampaign();
}

void libCOMI_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_BB_MaxValue = IntToFixed(lp_max);
    if ((libCOMI_gv_cU_BB_MaxValue <= 0.0)) {
        libCOMI_gv_cU_BB_MaxValue = 1.0;
    }

    libCOMI_gv_cU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libCOMI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_BB_CurrentValue = IntToFixed(lp_current);
    if ((libCOMI_gv_cU_BB_CurrentValue < 0.0)) {
        libCOMI_gv_cU_BB_CurrentValue = 0.0;
    }

    libCOMI_gv_cU_BB_Boss = null;
    if ((lp_refresh == true)) {
        libCOMI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libCOMI_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libCOMI_gt_CU_BB_BossHPChanged, true);
    }

    libCOMI_gv_cU_BB_Boss = lp_boss;
    libCOMI_gv_cU_BB_MaxValue = 0.0;
    libCOMI_gv_cU_BB_CurrentValue = 0.0;
    if ((lp_refresh == true)) {
        libCOMI_gf_RefreshSingularBossBarVoidCampaign();
    }

}

void libCOMI_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    DialogControlSetVisible(libCOMI_gv_cU_BB_Panel, PlayerGroupAll(), lp_showHide);
}

void libCOMI_gf_RefreshSingularBossBarVoidCampaign () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_BB_Panel == c_invalidDialogControlId)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_BB_TitleLabel, libCOMI_gv_cU_BB_Title, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_BB_HpLabel, libCOMI_gf_CU_BB_HPBarFormatLabel(), PlayerGroupAll());
    if ((libCOMI_gf_CU_BB_HPBarCurrentWidth() > 0)) {
        DialogControlSetVisible(libCOMI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), true);
        DialogControlSetSize(libCOMI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), libCOMI_gf_CU_BB_HPBarCurrentWidth(), libCOMI_gv_cUC_BB_HPBarHeight);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), false);
        DialogControlSetSize(libCOMI_gv_cU_BB_HpCurrentImage, PlayerGroupAll(), 1, libCOMI_gv_cUC_BB_HPBarHeight);
    }
    libCOMI_gf_CU_BB_HPBarChange();
    if ((libCOMI_gv_cU_BB_Style == libCOMI_ge_SingularBossBarStyle_Objective)) {
        DialogControlSetVisible(libCOMI_gv_cU_BB_BossBG, PlayerGroupAll(), false);
        DialogControlSetVisible(libCOMI_gv_cU_BB_ObjectiveBG, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_BB_BossBG, PlayerGroupAll(), true);
        DialogControlSetVisible(libCOMI_gv_cU_BB_ObjectiveBG, PlayerGroupAll(), false);
    }
}

void libCOMI_gf_SetSingularBossBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libCOMI_gv_cU_BB_HpCurrentImage, lp_color, PlayerGroupAll());
}

void libCOMI_gf_SetSingularBossBarTitleColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libCOMI_gv_cU_BB_TitleLabel, lp_color, PlayerGroupAll());
}

void libCOMI_gf_SetSingularBossBarStyle (int lp_style) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_BB_Style = lp_style;
    libCOMI_gf_RefreshSingularBossBarVoidCampaign();
}

void libCOMI_gf_EnableLowHealthWarning (unit lp_watchedUnit) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_HealthWatchUnit = lp_watchedUnit;
    TriggerEnable(libCOMI_gt_CU_HealthWatchLifeCheck, true);
    TriggerEnable(libCOMI_gt_CU_HealthWatchUnitDies, true);
}

void libCOMI_gf_CU_HealthWatchCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_HealthWatchDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(1600, 1200, c_anchorCenter, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    libCOMI_gv_cU_HealthWatchDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1600, 1200, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui_ingame_effects_splash2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libCOMI_gv_cU_HealthWatchImage = DialogControlLastCreated();
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void libCOMI_gf_CM_StopHeroLowHPSound () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_HealthWatchSoundStart != null)) {
        SoundStop(libCOMI_gv_cU_HealthWatchSoundStart, true);
        libCOMI_gv_cU_HealthWatchSoundStart = null;
    }

    if ((libCOMI_gv_cU_HealthWatchSoundBreath != null)) {
        SoundStop(libCOMI_gv_cU_HealthWatchSoundBreath, true);
        libCOMI_gv_cU_HealthWatchSoundBreath = null;
    }

    if ((libCOMI_gv_cU_HealthWatchSoundHeartbeat != null)) {
        SoundStop(libCOMI_gv_cU_HealthWatchSoundHeartbeat, true);
        libCOMI_gv_cU_HealthWatchSoundHeartbeat = null;
    }

    TriggerStop(libCOMI_gt_CU_HealthWatchBreathLoop);
    TriggerStop(libCOMI_gt_CU_HealthWatchHeartLoop);
    TriggerEnable(libCOMI_gt_CU_HealthWatchStartSound, true);
    TriggerEnable(libCOMI_gt_CU_HealthWatchBreathLoop, true);
    TriggerEnable(libCOMI_gt_CU_HealthWatchHeartLoop, true);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_LowHealthEnd);
}

trigger auto_libCOMI_gf_CU_UpdateObjectivePanel_Trigger = null;

void libCOMI_gf_CU_UpdateObjectivePanel () {
    if (auto_libCOMI_gf_CU_UpdateObjectivePanel_Trigger == null) {
        auto_libCOMI_gf_CU_UpdateObjectivePanel_Trigger = TriggerCreate("auto_libCOMI_gf_CU_UpdateObjectivePanel_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CU_UpdateObjectivePanel_Trigger, false, false);
}

bool auto_libCOMI_gf_CU_UpdateObjectivePanel_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    while (true) {
        if ((libCOMI_gv_cU_ObjectivePanel != c_invalidDialogControlId) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (libCOMI_gf_GameIsOver() == false)) {
            if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (libCOMI_gv_cU_HeroPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOMI_gv_cU_HeroPanel[1], 1) == true) && (libCOMI_gv_cU_HeroPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOMI_gv_cU_HeroPanel[2], 1) == true)) {
                libNtve_gf_SetDialogItemAlphaMask(libCOMI_gv_cU_ObjectivePanel, "@UI/ObjectivePanelMaskTwoHeroes", PlayerGroupAll());
            }
            else if ((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == true) && (((libCOMI_gv_cU_HeroPanel[1] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOMI_gv_cU_HeroPanel[1], 1) == true)) || ((libCOMI_gv_cU_HeroPanel[2] != c_invalidDialogControlId) && (DialogControlIsVisible(libCOMI_gv_cU_HeroPanel[2], 1) == true)))) {
                libNtve_gf_SetDialogItemAlphaMask(libCOMI_gv_cU_ObjectivePanel, "@UI/ObjectivePanelMask", PlayerGroupAll());
            }
            else if (((PortraitVisible(libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), 1) == false) || (((libCOMI_gv_cU_HeroPanel[1] == c_invalidDialogControlId) || (DialogControlIsVisible(libCOMI_gv_cU_HeroPanel[1], 1) == false)) && ((libCOMI_gv_cU_HeroPanel[2] == c_invalidDialogControlId) || (DialogControlIsVisible(libCOMI_gv_cU_HeroPanel[2], 1) == false))))) {
                libNtve_gf_SetDialogItemAlphaMask(libCOMI_gv_cU_ObjectivePanel, "", PlayerGroupAll());
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

void libCOMI_gf_CU_TargetingCancel (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOMI_gv_cUC_TargetingEventCancel);
}

int libCOMI_gf_CU_TargetingTriggeringPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libCOMI_gv_cUC_TargetingEventCancel, libCOMI_gv_cUC_TargetingParamPlayer));
}

void libCOMI_gf_PU_TargetingUI_EnterTargetingMode (bool lp_showHide, bool lp_instant, int lp_player) {
    // Variable Declarations
    int lv_index;
    playergroup lv_uIPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_uIPlayers = PlayerGroupEmpty();

    // Implementation
    lv_uIPlayers = PlayerGroupSingle(lp_player);
    libCOMI_gf_CU_TargetingCreate(lp_player);
    if ((lp_showHide == true)) {
        libCOMI_gf_SetScreenModeCoop(c_uiModeFullscreen, 0.35, lp_player);
        DialogSetVisible(libCOMI_gv_cU_TargetingAbilityDialog[lp_player], lv_uIPlayers, true);
        if ((PlayerRace(lp_player) == "Prot")) {
            DialogSetVisible(libCOMI_gv_cU_TargetingOverlayDialog[lp_player], lv_uIPlayers, true);
            libNtve_gf_SetDialogItemAnimation(libCOMI_gv_cU_TargetingOverlayPortrait[lp_player], "Birth", lv_uIPlayers);
        }

    }
    else {
        libCOMI_gv_cU_TargetingCurrentCharges[lp_player] = 0;
        if ((lp_instant == false)) {
            libCOMI_gf_SetScreenModeCoop(c_uiModeConsole, 0.25, lp_player);
        }

        if ((PlayerRace(lp_player) == "Prot")) {
            DialogSetVisible(libCOMI_gv_cU_TargetingOverlayDialog[lp_player], lv_uIPlayers, false);
        }

        DialogSetVisible(libCOMI_gv_cU_TargetingAbilityDialog[lp_player], lv_uIPlayers, false);
    }
}

void libCOMI_gf_CU_TargetingCreate (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_TargetingAbilityDialog[lp_player] != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 150, c_anchorBottom, 3, 160, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    libCOMI_gv_cU_TargetingAbilityDialog[lp_player] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, libCOMI_gv_targetingTemplate[lp_player]);
    libCOMI_gv_cU_TargetingPanel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_TargetingPanel[lp_player], c_triggerControlTypeLabel, "Instructions");
    libCOMI_gv_cU_TargetingInstructionsLabel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_TargetingPanel[lp_player], c_triggerControlTypeButton, "CancelButton");
    libCOMI_gv_cU_TargetingCancelButton[lp_player] = DialogControlLastCreated();
    if ((libCOMI_gv_cM_SoATargetingChargesTotal[lp_player] > 0)) {
        DialogControlHookup(libCOMI_gv_cU_TargetingPanel[lp_player], c_triggerControlTypePanel, "ChargesContainer");
        libCOMI_gv_cU_TargetingChargesPanel[lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge1");
        libCOMI_gv_cU_TargetingChargeSinglePanel[1][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge2");
        libCOMI_gv_cU_TargetingChargeSinglePanel[2][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge3");
        libCOMI_gv_cU_TargetingChargeSinglePanel[3][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge4");
        libCOMI_gv_cU_TargetingChargeSinglePanel[4][lp_player] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_TargetingChargesPanel[lp_player], c_triggerControlTypePanel, "Charge5");
        libCOMI_gv_cU_TargetingChargeSinglePanel[5][lp_player] = DialogControlLastCreated();
        DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
        libCOMI_gv_cU_TargetingOverlayDialog[lp_player] = DialogLastCreated();
        DialogSetFullscreen(DialogLastCreated(), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePortrait, "LotV_GameUI/SoAOverlayTemplate");
        PortraitUseTransition(PortraitGetTriggerControl(DialogControlLastCreated()), false);
        libNtve_gf_SetDialogItemModel(DialogControlLastCreated(), "SOA_Calldown_UI", PlayerGroupAll());
        libCOMI_gv_cU_TargetingOverlayPortrait[lp_player] = DialogControlLastCreated();
    }

    TriggerEnable(libCOMI_gt_CU_TargetingCancelButtonUsed, true);
}

void libCOMI_gf_CU_TargetingSetCharges (int lp_current, int lp_max, int lp_player) {
    // Variable Declarations
    int lv_indexCharge;
    playergroup lv_uIPlayers;

    // Automatic Variable Declarations
    int auto1E411E65_ae;
    const int auto1E411E65_ai = 1;
    int auto61400EA8_ae;
    const int auto61400EA8_ai = 1;
    const int auto8D6D93FB_ae = libCOMI_gv_cMC_SOATARGETCOUNTMAX;
    const int auto8D6D93FB_ai = 1;

    // Variable Initialization
    lv_uIPlayers = PlayerGroupEmpty();

    // Implementation
    lv_uIPlayers = PlayerGroupSingle(lp_player);
    libCOMI_gf_CU_TargetingCreate(lp_player);
    if ((libCOMI_gv_cM_SoATargetingChargesTotal[lp_player] == 0)) {
        return ;
    }

    auto1E411E65_ae = lp_current;
    lv_indexCharge = 1;
    for ( ; ( (auto1E411E65_ai >= 0 && lv_indexCharge <= auto1E411E65_ae) || (auto1E411E65_ai < 0 && lv_indexCharge >= auto1E411E65_ae) ) ; lv_indexCharge += auto1E411E65_ai ) {
        if ((libCOMI_gv_cU_TargetingCurrentCharges[lp_player] < lv_indexCharge)) {
            DialogControlSetVisible(libCOMI_gv_cU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)][lp_player], lv_uIPlayers, false);
            DialogControlSetVisible(libCOMI_gv_cU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)][lp_player], lv_uIPlayers, true);
        }

    }
    auto61400EA8_ae = lp_max;
    lv_indexCharge = (lp_current+1);
    for ( ; ( (auto61400EA8_ai >= 0 && lv_indexCharge <= auto61400EA8_ae) || (auto61400EA8_ai < 0 && lv_indexCharge >= auto61400EA8_ae) ) ; lv_indexCharge += auto61400EA8_ai ) {
        if ((lv_indexCharge <= libCOMI_gv_cU_TargetingCurrentCharges[lp_player])) {
            DialogControlSendAnimationEvent(libCOMI_gv_cU_TargetingChargeSinglePanel[(lp_max-lv_indexCharge+1)][lp_player], lv_uIPlayers, "Consume");
        }

    }
    lv_indexCharge = (lp_max+1);
    for ( ; ( (auto8D6D93FB_ai >= 0 && lv_indexCharge <= auto8D6D93FB_ae) || (auto8D6D93FB_ai < 0 && lv_indexCharge >= auto8D6D93FB_ae) ) ; lv_indexCharge += auto8D6D93FB_ai ) {
        DialogControlSetVisible(libCOMI_gv_cU_TargetingChargeSinglePanel[lv_indexCharge][lp_player], lv_uIPlayers, false);
    }
    if ((lp_max == 3)) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_TargetingChargesPanel[lp_player], lv_uIPlayers, "ThreeCharges");
    }
    else {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_TargetingChargesPanel[lp_player], lv_uIPlayers, "FiveCharges");
    }
    libCOMI_gv_cU_TargetingCurrentCharges[lp_player] = lp_current;
}

void libCOMI_gf_CU_TargetingSetInstructionText (text lp_instructions, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_TargetingInstructionsLabel[lp_player], lp_instructions, PlayerGroupSingle(lp_player));
}

void libCOMI_gf_CM_SoATargetingModeEnter (int lp_player) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = false;
    libCOMI_gv_cM_SoATargetingAlreadyCanceled[lp_player] = false;
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((libCOMI_gf_PlayerInCinematicModeCampaign() == true)) {
        return ;
    }

    libCOMI_gv_cM_SoAExitInstantly = false;
    libCOMI_gv_cM_SoATargetingUsageCount += 1;
    libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] = 0;
    libCOMI_gf_CU_TargetingSetCharges(libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], libCOMI_gv_cM_SoATargetingChargesTotal[lp_player], lp_player);
    libCOMI_gv_targetingPlayer = lp_player;
    TriggerSendEvent("Targeting Mode Enter");
    if ((libCOMI_gv_cM_SoATargetingOrder[lp_player] != null)) {
        UISetTargetingOrder(PlayerGroupSingle(lp_player), libCOMI_gv_yY_GPCasterGroup[lp_player], libCOMI_gv_cM_SoATargetingOrder[lp_player], false);
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_Location;
    }
    else {
        libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    libCOMI_gf_PU_TargetingUI_EnterTargetingMode(true, false, lp_player);
    libCOMI_gf_CU_TargetingSetInstructionText(libCOMI_gv_cM_SoATargetingInstructionsPrimary[lp_player], lp_player);
    libCOMI_gf_CM_SetFogAlphaOverTime(100.0, 0.5, lp_player);
    CameraSetValue(lp_player, c_cameraValueDistance, 50.0, 1.0, -1, 10.0);
    CameraSetValue(lp_player, c_cameraValuePitch, 70.0, 1.0, -1, 10.0);
    CameraSetData(PlayerGroupSingle(lp_player), "SOATargetingModeCamera");
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingCycling[lp_player] = false;
}

void libCOMI_gf_CM_SoATargetingModeExit (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_SoATargetingPhase[lp_player] = libCOMI_ge_CM_SoATargetingPhaseType_None;
    while (!((libCOMI_gv_cM_SoATargetingTransitioning[lp_player] == false))) {
        Wait(0.0625, c_timeGame);
    }
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = true;
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.0, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.0, -1, 10.0);
    }
    else {
        CameraSetValue(lp_player, c_cameraValueDistance, 34.0, 0.5, -1, 10.0);
        CameraSetValue(lp_player, c_cameraValuePitch, 56.0, 0.5, -1, 10.0);
    }
    CameraSetData(PlayerGroupSingle(lp_player), "Dflt");
    if ((libCOMI_gv_cM_SoAExitInstantly == true)) {
        VisResetFoWAlpha(lp_player);
        libCOMI_gf_PU_TargetingUI_EnterTargetingMode(false, true, lp_player);
    }
    else {
        libCOMI_gf_CM_ResetFogAlphaOverTime(0.5, lp_player);
        libCOMI_gf_PU_TargetingUI_EnterTargetingMode(false, false, lp_player);
    }
    libNtve_gf_RestoreUnitSelection(lp_player);
    libCOMI_gv_cM_SoATargetingActivateAbility[lp_player] = null;
    libCOMI_gv_cM_SoATargetingTransitioning[lp_player] = false;
    libCOMI_gv_cM_SoATargetingUsageCount -= 1;
    if ((libCOMI_gv_cM_SoATargetingUsageCount == 0)) {
        libCOMI_gv_targetingPlayer = lp_player;
        TriggerSendEvent("Targeting Mode Exit");
    }

}

void libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto614ACFCA_ae = libCOMI_gv_cMC_SOATARGETCOUNTMAX;
    const int auto614ACFCA_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (auto614ACFCA_ai >= 0 && lv_index <= auto614ACFCA_ae) || (auto614ACFCA_ai < 0 && lv_index >= auto614ACFCA_ae) ) ; lv_index += auto614ACFCA_ai ) {
        if ((libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] != null)) {
            ActorSend(libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player], "Signal Destroy");
            libCOMI_gv_cM_SoATargetingActors[lv_index][lp_player] = null;
        }

        if ((libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] != null)) {
            UnitRemove(libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player]);
            libCOMI_gv_cM_SoATargetingUnit[lv_index][lp_player] = null;
        }

    }
}

trigger auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
fixed auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_SetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha = lp_targetAlpha;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_targetAlpha = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_targetAlpha;
    fixed lp_duration = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_SetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;

    // Automatic Variable Declarations
    int auto03C30BA1_n;
    int auto03C30BA1_i;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMI_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lp_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    auto03C30BA1_n = lv_increments;
    for (auto03C30BA1_i = 1; auto03C30BA1_i <= auto03C30BA1_n; auto03C30BA1_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisSetFoWAlpha(lp_player, lp_targetAlpha);
    return true;
}

trigger auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = null;
fixed auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
int auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

void libCOMI_gf_CM_ResetFogAlphaOverTime (fixed lp_duration, int lp_player) {
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration = lp_duration;
    auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger == null) {
        auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger = TriggerCreate("auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_ResetFogAlphaOverTime_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_ResetFogAlphaOverTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_duration = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_duration;
    int lp_player = auto_libCOMI_gf_CM_ResetFogAlphaOverTime_lp_player;

    // Variable Declarations
    fixed lv_currentAlpha;
    fixed lv_alphaIncrement;
    fixed lv_incrementFrequency;
    int lv_increments;
    fixed lv_targetAlpha;

    // Automatic Variable Declarations
    int auto56E2CCBE_n;
    int auto56E2CCBE_i;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMI_gf_MutatorIsEnabled("UberDarkness") == true))) {
        return true;
    }

    lv_incrementFrequency = 0.05;
    lv_currentAlpha = VisGetFoWAlpha(lp_player);
    VisResetFoWAlpha(lp_player);
    lv_targetAlpha = VisGetFoWAlpha(lp_player);
    lv_increments = AbsI(FixedToInt((lp_duration / lv_incrementFrequency)));
    lv_alphaIncrement = ((lv_targetAlpha-lv_currentAlpha)/IntToFixed(lv_increments));
    VisSetFoWAlpha(lp_player, lv_currentAlpha);
    auto56E2CCBE_n = lv_increments;
    for (auto56E2CCBE_i = 1; auto56E2CCBE_i <= auto56E2CCBE_n; auto56E2CCBE_i += 1) {
        Wait(lv_incrementFrequency, c_timeGame);
        lv_currentAlpha += lv_alphaIncrement;
        VisSetFoWAlpha(lp_player, lv_currentAlpha);
    }
    VisResetFoWAlpha(lp_player);
    return true;
}

void libCOMI_gf_CM_SoATargetingCancel (int lp_player) {
    // Variable Declarations
    string lv_cost;
    string lv_costField;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cost = "";
    lv_costField = "";

    // Implementation
    UnitIssueOrder(libCOMI_gv_yY_GPCasterUnit[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libCOMI_gv_cM_SoATargetingAlreadyCanceled[lp_player] = true;
    libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits(lp_player);
    if ((libCOMI_gv_cM_SoATargetingUnitType[lp_player] != null) && (libCOMI_gv_cM_SoATargetingPhase[lp_player] == libCOMI_ge_CM_SoATargetingPhaseType_Direction)) {
        libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] -= 1;
    }

    if ((libCOMI_gv_cM_SoATargetingChargesSpent[lp_player] == 0) && (libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] == false)) {
        libNtve_gf_UnitAbilityRemoveCooldown(libCOMI_gv_yY_GPCasterUnit[lp_player], libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], libCOMI_gv_cM_SoATargetingCooldown[lp_player]);
        lv_costField = ("Cost[0].Vital[" + "Energy" + "]");
        lv_cost = CatalogFieldValueGet(c_gameCatalogAbil, libCOMI_gv_cM_SoATargetingActivateAbility[lp_player], (lv_costField), lp_player);
        UnitSetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, (UnitGetPropertyFixed(libCOMI_gv_yY_GPCasterUnit[lp_player], c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(lv_cost)));
        libCOMI_gv_targetingPlayer = lp_player;
        TriggerSendEvent("Targeting Cancel");
    }

    UnitBehaviorRemove(libCOMI_gv_yY_GPCasterUnit[lp_player], libCOMI_gv_cM_SoATargetingBehavior[lp_player], 1);
    libCOMI_gv_cM_SoATargetingUnrefundableStageEntered[lp_player] = true;
}

trigger auto_libCOMI_gf_DisplayProgressBar_Trigger = null;
text auto_libCOMI_gf_DisplayProgressBar_lp_title;
int auto_libCOMI_gf_DisplayProgressBar_lp_min;
int auto_libCOMI_gf_DisplayProgressBar_lp_max;

void libCOMI_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max) {
    auto_libCOMI_gf_DisplayProgressBar_lp_title = lp_title;
    auto_libCOMI_gf_DisplayProgressBar_lp_min = lp_min;
    auto_libCOMI_gf_DisplayProgressBar_lp_max = lp_max;

    if (auto_libCOMI_gf_DisplayProgressBar_Trigger == null) {
        auto_libCOMI_gf_DisplayProgressBar_Trigger = TriggerCreate("auto_libCOMI_gf_DisplayProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_DisplayProgressBar_Trigger, false, false);
}

bool auto_libCOMI_gf_DisplayProgressBar_TriggerFunc (bool testConds, bool runActions) {
    text lp_title = auto_libCOMI_gf_DisplayProgressBar_lp_title;
    int lp_min = auto_libCOMI_gf_DisplayProgressBar_lp_min;
    int lp_max = auto_libCOMI_gf_DisplayProgressBar_lp_max;

    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = "Assets\\Textures\\ui_loadingbar_metalframe_protoss.dds";

    // Implementation
    if ((libCOMI_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ProgressFrame");
        libCOMI_gv_cU_ProgressBarPanel = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_ProgressBarPanel, c_triggerControlTypeLabel, "NameLabel");
        libCOMI_gv_cU_ProgressBarLabelTitle = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_ProgressBarPanel, c_triggerControlTypeImage, "BarImage");
        libCOMI_gv_cU_ProgressBarImageBar = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_ProgressBarPanel, c_triggerControlTypeLabel, "LeftBarLabel");
        libCOMI_gv_cU_ProgressBarLabelBarLeft = DialogControlLastCreated();
    }

    libCOMI_gf_SetProgressBarTitle(lp_title);
    libCOMI_gf_SetProgressBarColor(Color(9.41, 31.76, 72.94));
    libCOMI_gf_SetProgressBarValueRange(lp_min, lp_max);
    libCOMI_gf_SetProgressBarLabel(null);
    DialogControlSetVisible(libCOMI_gv_cU_ProgressBarPanel, PlayerGroupAll(), true);
    libCOMI_gv_cU_ProgressBarShowing = true;
    while (true) {
        if ((libCOMI_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
            return true;
        }

        if ((DialogControlIsVisible(libCOMI_gv_cU_ProgressBarPanel, 1) == true)) {
            libCOMI_gf_CU_UpdateProgressBar();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void libCOMI_gf_SetProgressBarTitle (text lp_title) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_ProgressBarLabelTitle, lp_title, PlayerGroupAll());
}

void libCOMI_gf_SetProgressBarValueRange (int lp_min, int lp_max) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_ProgressBarMin = lp_min;
    libCOMI_gv_cU_ProgressBarMax = lp_max;
}

void libCOMI_gf_SetProgressBarLabel (text lp_label) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_ProgressBarLabelBarLeft, lp_label, PlayerGroupAll());
}

void libCOMI_gf_SetProgressBarProgress (int lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_ProgressBarProgress = lp_progress;
}

void libCOMI_gf_SetProgressBarColor (color lp_color) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemColor(libCOMI_gv_cU_ProgressBarImageBar, lp_color, PlayerGroupAll());
}

void libCOMI_gf_ShowHideProgressBar (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_ProgressBarPanel == c_invalidDialogControlId)) {
        return ;
    }

    if ((lp_showHide == true)) {
        libCOMI_gf_CU_UpdateProgressBar();
    }

    DialogControlSetVisible(libCOMI_gv_cU_ProgressBarPanel, PlayerGroupAll(), lp_showHide);
}

void libCOMI_gf_CU_UpdateProgressBar () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_ProgressBarProgress > 0)) {
        DialogControlSetSize(libCOMI_gv_cU_ProgressBarImageBar, PlayerGroupAll(), MaxI(1, FixedToInt((IntToFixed(libCOMI_gv_pUC_ProgressBarWidth) * (IntToFixed(libCOMI_gv_cU_ProgressBarProgress) / IntToFixed(libCOMI_gv_cU_ProgressBarMax))))), libCOMI_gv_pUC_ProgressBarHeight);
        DialogControlSetVisible(libCOMI_gv_cU_ProgressBarImageBar, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libCOMI_gv_cU_ProgressBarImageBar, PlayerGroupAll(), false);
    }
}

color libCOMI_gf_GetProgressBarColorCampaign () {
    // Automatic Variable Declarations
    // Implementation
    return Color(100.00, 61.57, 23.53);
}

trigger auto_libCOMI_gf_DisplayProgressBarUnitOld_Trigger = null;
unit auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_unit;
int auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_minValue;
int auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_maxValue;
text auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_labelText;
int auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_offsetX;
int auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_offsetY;
string auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_attachment;

void libCOMI_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment) {
    auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_unit = lp_unit;
    auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_minValue = lp_minValue;
    auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_maxValue = lp_maxValue;
    auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_labelText = lp_labelText;
    auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_offsetX = lp_offsetX;
    auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_offsetY = lp_offsetY;
    auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_attachment = lp_attachment;

    if (auto_libCOMI_gf_DisplayProgressBarUnitOld_Trigger == null) {
        auto_libCOMI_gf_DisplayProgressBarUnitOld_Trigger = TriggerCreate("auto_libCOMI_gf_DisplayProgressBarUnitOld_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_DisplayProgressBarUnitOld_Trigger, false, false);
}

bool auto_libCOMI_gf_DisplayProgressBarUnitOld_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_unit;
    int lp_minValue = auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_minValue;
    int lp_maxValue = auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_maxValue;
    text lp_labelText = auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_labelText;
    int lp_offsetX = auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_offsetX;
    int lp_offsetY = auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_offsetY;
    string lp_attachment = auto_libCOMI_gf_DisplayProgressBarUnitOld_lp_attachment;

    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    if ((DataTableGetDialog(true, ("ProgressBar_" + IntToString((libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog)) + "_" + IntToString(UnitGetTag(lp_unit)))) != c_invalidDialogId)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_31602919"), true);
        libCOMI_gf_DestroyProgressBarUnitOld(lp_unit);
    }

    DialogCreate(210, 75, c_anchorCenter, 0, 0, true);
    lv_progressBarDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), lp_unit, lp_attachment, lp_offsetX, lp_offsetY);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HotS_GameUnitFrame/SmallProgressUnitFrameTemplate");
    lv_progressBarPanel = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "NameLabel");
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_labelText, PlayerGroupAll());
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeLabel, "ValueLabel");
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookup(lv_progressBarPanel, c_triggerControlTypeImage, "BarImage");
    lv_progressBarProgressBar = DialogControlLastCreated();
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), true);
    DataTableSetDialog(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_progressBarDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_progressBarPanel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_progressBarProgressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_progressBarValue);
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    DataTableSetString(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_Attachment), (lp_attachment));
    while ((lp_unit != null) && (lv_progressBarDialog != c_invalidDialogId)) {
        libCOMI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
        lv_progressBarDialog = DataTableGetDialog(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
        Wait(0.25, c_timeReal);
    }
    return true;
}

void libCOMI_gf_DestroyProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    int lv_noDialog;
    int lv_noDialogItem;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_noDialog = c_invalidDialogId;
    lv_noDialogItem = c_invalidDialogControlId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    lv_progressBarPanel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel));
    DialogControlDestroy(lv_progressBarPanel);
    DialogControlDestroy(lv_progressBarProgressBar);
    DialogControlDestroy(lv_progressBarValue);
    DialogControlDestroy(lv_progressBarLabel);
    DialogDestroy(lv_progressBarDialog);
    DataTableSetDialog(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog), lv_noDialog);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value), lv_noDialogItem);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label), lv_noDialogItem);
}

void libCOMI_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue));
    lv_maxValue = DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue));

    // Implementation
    if (((lp_value >= lv_minValue) && (lp_value <= lv_maxValue))) {
        DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue), lp_value);
    }
    else {
        TriggerDebugOutput(1, StringToText(("Progress Bar (Unit) Value (" + IntToString(lp_value) + ") outside of set Min (" + IntToString(lv_minValue) + ") and Max (" + IntToString(lv_maxValue) + ").")), true);
    }
    libCOMI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOMI_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX), lp_offsetX);
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY), lp_offsetY);
    libCOMI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOMI_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libCOMI_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue), lp_minValue);
    DataTableSetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue), lp_maxValue);
    libCOMI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOMI_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;

    // Implementation
    lv_progressBarDialog = DataTableGetDialog(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    DialogSetVisible(lv_progressBarDialog, PlayerGroupAll(), lp_showHide);
    libCOMI_gf_CU_UpdateProgressBarUnitOld(lp_unit);
}

void libCOMI_gf_CU_UpdateProgressBarUnitOld (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarDialog;
    int lv_progressBarPanel;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 180;
    const int lv_c_Height = 12;
    string lv_dataTableString;
    string lv_attachmentPreset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarDialog = c_invalidDialogId;
    lv_progressBarPanel = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;
    lv_dataTableString = DataTableGetString(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_Attachment));
    lv_attachmentPreset = lv_dataTableString;

    // Implementation
    if (((lp_unit == null) || (UnitIsAlive(lp_unit) == false))) {
        libCOMI_gf_DestroyProgressBarUnitOld(lp_unit);
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    if ((lv_progressBarDialog == c_invalidDialogId)) {
        return ;
    }

    lv_progressBarDialog = DataTableGetDialog(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_ProgressBarUnit_DialogNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value));
    DialogSetPositionRelativeToUnit(lv_progressBarDialog, lp_unit, lv_attachmentPreset, DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX)), DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY)));
    libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<sectotal/>"), DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue))), PlayerGroupAll());
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), FixedToInt((lv_c_Width * ( (IntToFixed(DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue))) - IntToFixed(DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue)))) / (IntToFixed(DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue))) - IntToFixed(DataTableGetInt(true, libCOMI_gf_CU_ProgressBarUnit_DataNameOld(lp_unit, libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue)))) ))), lv_c_Height);
    libNtve_gf_SetDialogItemColor(lv_progressBarProgressBar, libCOMI_gf_GetProgressBarColorCampaign(), PlayerGroupAll());
}

string libCOMI_gf_CU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto129B2E27_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    auto129B2E27_val = lp_type;
    if (auto129B2E27_val == libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_Attachment) {
        lv_name = (lv_name + "_" + "Attachment");
    }
    else if (auto129B2E27_val == libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (auto129B2E27_val == libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (auto129B2E27_val == libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (auto129B2E27_val == libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX) {
        lv_name = (lv_name + "_" + "OffsetX");
    }
    else if (auto129B2E27_val == libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY) {
        lv_name = (lv_name + "_" + "OffsetY");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCOMI_gf_CU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoD05B7A4E_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    autoD05B7A4E_val = lp_type;
    if (autoD05B7A4E_val == libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog) {
        lv_name = (lv_name + "_" + "Dialog");
    }
    else if (autoD05B7A4E_val == libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (autoD05B7A4E_val == libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel) {
        lv_name = (lv_name + "_" + "Panel");
    }
    else if (autoD05B7A4E_val == libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (autoD05B7A4E_val == libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

trigger auto_libCOMI_gf_DisplayUnitProgressBar_Trigger = null;
unit auto_libCOMI_gf_DisplayUnitProgressBar_lp_unit;
text auto_libCOMI_gf_DisplayUnitProgressBar_lp_title;
int auto_libCOMI_gf_DisplayUnitProgressBar_lp_minValue;
int auto_libCOMI_gf_DisplayUnitProgressBar_lp_maxValue;

void libCOMI_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue) {
    auto_libCOMI_gf_DisplayUnitProgressBar_lp_unit = lp_unit;
    auto_libCOMI_gf_DisplayUnitProgressBar_lp_title = lp_title;
    auto_libCOMI_gf_DisplayUnitProgressBar_lp_minValue = lp_minValue;
    auto_libCOMI_gf_DisplayUnitProgressBar_lp_maxValue = lp_maxValue;

    if (auto_libCOMI_gf_DisplayUnitProgressBar_Trigger == null) {
        auto_libCOMI_gf_DisplayUnitProgressBar_Trigger = TriggerCreate("auto_libCOMI_gf_DisplayUnitProgressBar_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_DisplayUnitProgressBar_Trigger, false, false);
}

bool auto_libCOMI_gf_DisplayUnitProgressBar_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOMI_gf_DisplayUnitProgressBar_lp_unit;
    text lp_title = auto_libCOMI_gf_DisplayUnitProgressBar_lp_title;
    int lp_minValue = auto_libCOMI_gf_DisplayUnitProgressBar_lp_minValue;
    int lp_maxValue = auto_libCOMI_gf_DisplayUnitProgressBar_lp_maxValue;

    // Variable Declarations
    int lv_progressBar;
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBar = c_invalidDialogControlId;
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    if (((libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label)) != c_invalidDialogControlId) || (libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)) != c_invalidDialogControlId))) {
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label)));
        DialogControlDestroy(libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
    }

    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "NameLabel", lp_unit);
    lv_progressBarLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_title, PlayerGroupAll());
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "ValueLabel", lp_unit);
    lv_progressBarValue = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BarImage", lp_unit);
    lv_progressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "BorderImage", lp_unit);
    lv_progressBarBorder = DialogControlLastCreated();
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label), lv_progressBarLabel);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value), lv_progressBarValue);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar), lv_progressBar);
    libNtve_gf_SaveDataTableValueDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder), lv_progressBarBorder);
    DataTableSetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    DataTableSetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_CurValue), lp_minValue);
    DataTableSetBool(true, libCOMI_gf_CU_UnitProgressBar_Data2(lp_unit), true);
    DataTableSetBool(true, libCOMI_gf_CU_UnitProgressBar_IsWideBarString(lp_unit), false);
    libCOMI_gf_ShowHideUnitProgressBar(lp_unit, true);
    libCOMI_gf_CU_UpdateUnitProgressBar(lp_unit);
    return true;
}

void libCOMI_gf_SetUnitProgressBarIsWideBar (unit lp_unit, bool lp_isWideBar) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, libCOMI_gf_CU_UnitProgressBar_IsWideBarString(lp_unit), lp_isWideBar);
}

void libCOMI_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value) {
    // Variable Declarations
    int lv_realValue;
    int lv_realValue2;
    int lv_minValue;
    int lv_maxValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_minValue = DataTableGetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MaxValue));

    // Implementation
    lv_realValue = lp_value;
    if ((lv_minValue > lv_maxValue)) {
        lv_realValue2 = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_realValue2;
    }

    if ((lp_value < lv_minValue)) {
        lv_realValue = lv_minValue;
    }
    else {
        if ((lp_value > lv_maxValue)) {
            lv_realValue = lv_maxValue;
        }

    }
    DataTableSetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_CurValue), lv_realValue);
    libCOMI_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCOMI_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText) {
    // Variable Declarations
    int lv_progressBarLabel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;

    // Implementation
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    libNtve_gf_SetDialogItemText(lv_progressBarLabel, lp_titleText, PlayerGroupAll());
}

void libCOMI_gf_SetUnitProgressBarProgress2 (unit lp_unit, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_DisplayValue), lp_value);
    libCOMI_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCOMI_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MinValue), lp_minValue);
    DataTableSetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MaxValue), lp_maxValue);
    libCOMI_gf_SetUnitProgressBarProgress(lp_unit, DataTableGetInt(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value)));
}

void libCOMI_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarBar;
    int lv_progressBarBorder;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarBar = c_invalidDialogControlId;
    lv_progressBarBorder = c_invalidDialogControlId;

    // Implementation
    UnitStatusBarOverride(lp_unit, c_unitStatusGroupAll);
    lv_progressBarLabel = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label));
    DialogControlSetVisible(lv_progressBarLabel, PlayerGroupAll(), lp_showHide);
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), lp_showHide);
    lv_progressBarBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    DialogControlSetVisible(lv_progressBarBar, PlayerGroupAll(), lp_showHide);
    lv_progressBarBorder = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder));
    DialogControlSetVisible(lv_progressBarBorder, PlayerGroupAll(), lp_showHide);
    if ((lp_showHide == true)) {
        libCOMI_gf_CU_UpdateUnitProgressBar(lp_unit);
    }

}

void libCOMI_gf_ShowHideUnitProgressBar2 (unit lp_unit, bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, libCOMI_gf_CU_UnitProgressBar_Data2(lp_unit), (lp_showHide == true));
    libCOMI_gf_CU_UpdateUnitProgressBar(lp_unit);
}

void libCOMI_gf_CU_UpdateUnitProgressBar (unit lp_unit) {
    // Variable Declarations
    int lv_progressBarLabel;
    int lv_progressBarValue;
    int lv_progressBarProgressBar;
    const int lv_c_Width = 252;
    const int lv_c_WidthWide = 372;
    const int lv_c_Height = 12;
    fixed lv_progressBarWidth;
    int lv_minValue;
    int lv_curValue;
    int lv_maxValue;
    int lv_displayValue;
    int lv_swapValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_progressBarLabel = c_invalidDialogControlId;
    lv_progressBarValue = c_invalidDialogControlId;
    lv_progressBarProgressBar = c_invalidDialogControlId;

    // Implementation
    lv_minValue = DataTableGetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MinValue));
    lv_maxValue = DataTableGetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_MaxValue));
    lv_curValue = DataTableGetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_CurValue));
    lv_displayValue = DataTableGetInt(true, libCOMI_gf_CU_UnitProgressBar_Data(lp_unit, libCOMI_ge_CU_UnitProgressBarDataName_DisplayValue));
    lv_progressBarProgressBar = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar));
    lv_progressBarValue = libNtve_gf_ValueFromDataTableDialogItem(true, libCOMI_gf_CU_UnitProgressBar_Dialog(lp_unit, libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value));
    if (((lv_progressBarProgressBar == c_invalidDialogControlId) || (lv_progressBarValue == c_invalidDialogControlId))) {
        return ;
    }

    if ((lv_displayValue == -99999)) {
        libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_curValue), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(lv_progressBarValue, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lv_displayValue), PlayerGroupAll());
    }
    if ((DataTableGetBool(true, libCOMI_gf_CU_UnitProgressBar_Data2(lp_unit)) == true)) {
        DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(lv_progressBarValue, PlayerGroupAll(), false);
    }
    if ((lv_minValue > lv_maxValue)) {
        lv_swapValue = lv_minValue;
        lv_minValue = lv_maxValue;
        lv_maxValue = lv_swapValue;
        lv_curValue = (lv_maxValue-lv_curValue);
    }

    if ((DataTableGetBool(true, libCOMI_gf_CU_UnitProgressBar_IsWideBarString(lp_unit)) == true)) {
        lv_progressBarWidth = (lv_c_WidthWide * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    }
    else {
        lv_progressBarWidth = (lv_c_Width * ( (IntToFixed(lv_curValue) - IntToFixed(lv_minValue)) / (IntToFixed(lv_maxValue) - IntToFixed(lv_minValue)) ));
    }
    DialogControlSetSize(lv_progressBarProgressBar, PlayerGroupAll(), MaxI(FixedToInt(lv_progressBarWidth), 1), lv_c_Height);
}

string libCOMI_gf_CU_UnitProgressBar_Data (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto249178C2_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DataName_";
    auto249178C2_val = lp_type;
    if (auto249178C2_val == libCOMI_ge_CU_UnitProgressBarDataName_CurValue) {
        lv_name = (lv_name + "_" + "CurValue");
    }
    else if (auto249178C2_val == libCOMI_ge_CU_UnitProgressBarDataName_MaxValue) {
        lv_name = (lv_name + "_" + "MaxValue");
    }
    else if (auto249178C2_val == libCOMI_ge_CU_UnitProgressBarDataName_MinValue) {
        lv_name = (lv_name + "_" + "MinValue");
    }
    else if (auto249178C2_val == libCOMI_ge_CU_UnitProgressBarDataName_DisplayValue) {
        lv_name = (lv_name + "_" + "DisValue");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCOMI_gf_CU_UnitProgressBar_Data2 (unit lp_unit) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_ValueShow_";
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

string libCOMI_gf_CU_UnitProgressBar_IsWideBarString (unit lp_unit) {
    // Variable Declarations
    string lv_isWideBar;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_isWideBar = "";

    // Implementation
    lv_isWideBar = "ProgressBar_IsWideBar_";
    lv_isWideBar = (lv_isWideBar + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_isWideBar;
}

string libCOMI_gf_CU_UnitProgressBar_Dialog (unit lp_unit, int lp_type) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto332B6008_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    lv_name = "ProgressBar_DialogType_";
    auto332B6008_val = lp_type;
    if (auto332B6008_val == libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label) {
        lv_name = (lv_name + "_" + "Label");
    }
    else if (auto332B6008_val == libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value) {
        lv_name = (lv_name + "_" + "Value");
    }
    else if (auto332B6008_val == libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar) {
        lv_name = (lv_name + "_" + "ProgressBar");
    }
    else if (auto332B6008_val == libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder) {
        lv_name = (lv_name + "_" + "ProgressBarBorder");
    }
    else {
    }
    lv_name = (lv_name + "_" + IntToString(UnitGetTag(lp_unit)));
    return lv_name;
}

void libCOMI_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TimerWindowCreate(lp_timer, lp_title, lp_visible, lp_elapsed);
    libCOMI_gv_cU_TimerWindow = TimerWindowLastCreated();
    TimerWindowShowBorder(TimerWindowLastCreated(), true);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBackground, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFill, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageBorder, c_triggerImageTypeNineSlice);
    TimerWindowSetImageType(TimerWindowLastCreated(), c_timerWindowImageProgressFrame, c_triggerImageTypeNineSlice);
    TimerWindowSetStyle(TimerWindowLastCreated(), c_timerWindowStyleVerticalTitleTime, false);
    TimerWindowSetFixedHeight(TimerWindowLastCreated(), 80);
    libCOMI_gf_RepositionTimerWindow(TimerWindowLastCreated());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer\\ConsoleUIContainer\\TriggerWindowPanel\\TimerWindowTemplate");
    libCOMI_gv_cU_TimerWindowHighlightFrame = DialogControlLastCreated();
    libCOMI_gv_cU_TimerWindowTimer = lp_timer;
    libCOMI_gv_cU_TimerWindowInDanger = false;
    TriggerEnable(libCOMI_gt_CU_TimerWindowThresholdCrossed, true);
    libCOMI_gf_FlashTimerWindow(8.0, false);
    TriggerExecute(libCOMI_gt_CU_TimerWindowMoveForBossBar, true, false);
}

void libCOMI_gf_SetTimerForTimerWindowCampaign (int lp_window, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_TimerWindowTimer = lp_timer;
    TimerWindowSetTimer(lp_window, lp_timer);
}

void libCOMI_gf_RepositionTimerWindow (int lp_timerWindow) {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowSetAnchor(lp_timerWindow, c_anchorTopRight, 0, 50);
}

void libCOMI_gf_FlashTimerWindow (fixed lp_duration, bool lp_waitOption) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_TimerWindowHighlightDuration = lp_duration;
    TriggerExecute(libCOMI_gt_CU_TimerWindowFlash, true, lp_waitOption);
}

void libCOMI_gf_SetTimerWindowDangerThreshold (fixed lp_thresholdTime) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cU_TimerWindowDangerThreshold = lp_thresholdTime;
}

void libCOMI_gf_CU_AddTip (text lp_tipName, int lp_tipType, text lp_tipDescription, text lp_tipAlertText, string lp_tipIcon, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(lp_players, libNtve_gf_FormatTipTitle(lp_tipName, lp_tipType), lp_tipDescription, lp_tipAlertText, lp_tipIcon);
}

void libCOMI_gf_CreateWaveTimerWindow (timer lp_timer, text lp_title, string lp_icon) {
    // Variable Declarations
    int lv_newWaveID;
    int lv_index;

    // Automatic Variable Declarations
    const int autoB9A9F341_ae = libCOMI_gv_cUC_WAVETIMERUNITMAX;
    const int autoB9A9F341_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_WaveTimerActiveCount == libCOMI_gv_cUC_WAVETIMERWINDOWMAX)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_38E8C42E"), true);
        return ;
    }

    libCOMI_gf_CU_WaveTimerWindowCreateAll();
    libCOMI_gv_cU_WaveTimerActiveCount += 1;
    lv_newWaveID = ((libCOMI_gv_cU_WaveTimerWindowLast)+1);
    DataTableSetInt(true, libCOMI_gf_CU_WaveTimerWindowIndexKey(lv_newWaveID), libCOMI_gv_cU_WaveTimerActiveCount);
    libCOMI_gv_cU_WaveTimerWindowLast = (lv_newWaveID);
    libCOMI_gv_cU_WaveTimerWindowTimers[libCOMI_gv_cU_WaveTimerActiveCount] = lp_timer;
    libCOMI_gv_cU_WaveTimerWindowImage[libCOMI_gv_cU_WaveTimerActiveCount][1] = lp_icon;
    libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_WaveTimerWindowIcon[libCOMI_gv_cU_WaveTimerActiveCount][1], lp_icon, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_WaveTimerWindowIcon[libCOMI_gv_cU_WaveTimerActiveCount][1], StringToText(""), PlayerGroupAll());
    lv_index = 2;
    for ( ; ( (autoB9A9F341_ai >= 0 && lv_index <= autoB9A9F341_ae) || (autoB9A9F341_ai < 0 && lv_index >= autoB9A9F341_ae) ) ; lv_index += autoB9A9F341_ai ) {
        libCOMI_gv_cU_WaveTimerWindowImage[libCOMI_gv_cU_WaveTimerActiveCount][lv_index] = null;
        libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_WaveTimerWindowIcon[libCOMI_gv_cU_WaveTimerActiveCount][lv_index], StringToText(""), PlayerGroupAll());
        DialogControlSetVisible(libCOMI_gv_cU_WaveTimerWindowIcon[libCOMI_gv_cU_WaveTimerActiveCount][lv_index], PlayerGroupAll(), false);
    }
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_WaveTimerWindowTitle[libCOMI_gv_cU_WaveTimerActiveCount], lp_title, PlayerGroupAll());
    DialogControlSetVisible(libCOMI_gv_cU_WaveTimerWindows[libCOMI_gv_cU_WaveTimerActiveCount], PlayerGroupAll(), true);
}

void libCOMI_gf_DestroyWaveTimerWindow (int lp_window) {
    // Variable Declarations
    int lv_destroyIndex;
    int lv_windowIndex;
    int lv_slotIndex;

    // Automatic Variable Declarations
    int auto01A8E5F8_ae;
    const int auto01A8E5F8_ai = 1;
    const int autoECD61FF3_ae = libCOMI_gv_cUC_WAVETIMERUNITMAX;
    const int autoECD61FF3_ai = 1;

    // Variable Initialization

    // Implementation
    lv_destroyIndex = libCOMI_gf_CU_WaveTimerWindowIndexFromID((lp_window));
    if (((lv_destroyIndex < 1) || (lv_destroyIndex > libCOMI_gv_cUC_WAVETIMERWINDOWMAX))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_10839AB2"), true);
        return ;
    }

    if ((lv_destroyIndex < libCOMI_gv_cU_WaveTimerActiveCount)) {
        auto01A8E5F8_ae = libCOMI_gv_cU_WaveTimerActiveCount;
        lv_windowIndex = (lv_destroyIndex+1);
        for ( ; ( (auto01A8E5F8_ai >= 0 && lv_windowIndex <= auto01A8E5F8_ae) || (auto01A8E5F8_ai < 0 && lv_windowIndex >= auto01A8E5F8_ae) ) ; lv_windowIndex += auto01A8E5F8_ai ) {
            libCOMI_gv_cU_WaveTimerWindowTimers[(lv_windowIndex-1)] = libCOMI_gv_cU_WaveTimerWindowTimers[lv_windowIndex];
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_WaveTimerWindowTitle[(lv_windowIndex-1)], libNtve_gf_DialogItemText(libCOMI_gv_cU_WaveTimerWindowTitle[lv_windowIndex], 1), PlayerGroupAll());
            lv_slotIndex = 1;
            for ( ; ( (autoECD61FF3_ai >= 0 && lv_slotIndex <= autoECD61FF3_ae) || (autoECD61FF3_ai < 0 && lv_slotIndex >= autoECD61FF3_ae) ) ; lv_slotIndex += autoECD61FF3_ai ) {
                libCOMI_gv_cU_WaveTimerWindowImage[(lv_windowIndex-1)][lv_slotIndex] = libCOMI_gv_cU_WaveTimerWindowImage[lv_windowIndex][lv_slotIndex];
                if ((libCOMI_gv_cU_WaveTimerWindowImage[lv_windowIndex][lv_slotIndex] != null)) {
                    libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], libCOMI_gv_cU_WaveTimerWindowImage[(lv_windowIndex-1)][lv_slotIndex], PlayerGroupAll());
                    DialogControlSetVisible(libCOMI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], PlayerGroupAll(), true);
                    libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], libNtve_gf_DialogItemTooltip(libCOMI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lv_slotIndex], 1), PlayerGroupAll());
                }
                else {
                    DialogControlSetVisible(libCOMI_gv_cU_WaveTimerWindowIcon[(lv_windowIndex-1)][lv_slotIndex], PlayerGroupAll(), false);
                }
            }
        }
    }

    DialogControlSetVisible(libCOMI_gv_cU_WaveTimerWindows[libCOMI_gv_cU_WaveTimerActiveCount], PlayerGroupAll(), false);
    libCOMI_gv_cU_WaveTimerActiveCount -= 1;
    DataTableSetInt(true, libCOMI_gf_CU_WaveTimerWindowIndexKey((lp_window)), 0);
}

void libCOMI_gf_SetWaveTimerWindowIcon (int lp_window, string lp_icon, int lp_slot) {
    // Variable Declarations
    int lv_windowIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_slot < 1) || (lp_slot > libCOMI_gv_cUC_WAVETIMERUNITMAX))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_A3017A5A", "A", IntToText(lp_slot));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_A3017A5A"), true);
        return ;
    }

    lv_windowIndex = libCOMI_gf_CU_WaveTimerWindowIndexFromID((lp_window));
    if (((lv_windowIndex < 1) || (lv_windowIndex > libCOMI_gv_cUC_WAVETIMERWINDOWMAX))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_0E602EC0"), true);
        return ;
    }

    libCOMI_gv_cU_WaveTimerWindowImage[lv_windowIndex][lp_slot] = lp_icon;
    libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lp_slot], lp_icon, PlayerGroupAll());
    DialogControlSetVisible(libCOMI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lp_slot], PlayerGroupAll(), true);
}

void libCOMI_gf_SetWaveTimerWindowIconTooltip (int lp_window, text lp_tooltip, int lp_slot) {
    // Variable Declarations
    int lv_windowIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_slot < 1) || (lp_slot > libCOMI_gv_cUC_WAVETIMERUNITMAX))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_417FF1CB", "A", IntToText(lp_slot));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_417FF1CB"), true);
        return ;
    }

    lv_windowIndex = libCOMI_gf_CU_WaveTimerWindowIndexFromID((lp_window));
    if (((lv_windowIndex < 1) || (lv_windowIndex > libCOMI_gv_cUC_WAVETIMERWINDOWMAX))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_1B37C80A"), true);
        return ;
    }

    libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lp_slot], lp_tooltip, PlayerGroupAll());
}

void libCOMI_gf_CU_WaveTimerWindowCreateAll () {
    // Variable Declarations
    int lv_timerWindowHolder;
    int lv_lastFrame;
    int lv_windowIndex;
    int lv_unitIndex;

    // Automatic Variable Declarations
    const int auto8A50EB59_ae = libCOMI_gv_cUC_WAVETIMERWINDOWMAX;
    const int auto8A50EB59_ai = 1;
    const int auto4A433251_ae = libCOMI_gv_cUC_WAVETIMERUNITMAX;
    const int auto4A433251_ai = 1;

    // Variable Initialization
    lv_timerWindowHolder = c_invalidDialogControlId;
    lv_lastFrame = c_invalidDialogControlId;

    // Implementation
    if ((libCOMI_gv_cU_WaveTimerWindows[1] != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/WaveTimerWindowPanel");
    lv_timerWindowHolder = DialogControlLastCreated();
    lv_windowIndex = 1;
    for ( ; ( (auto8A50EB59_ai >= 0 && lv_windowIndex <= auto8A50EB59_ae) || (auto8A50EB59_ai < 0 && lv_windowIndex >= auto8A50EB59_ae) ) ; lv_windowIndex += auto8A50EB59_ai ) {
        DialogControlHookup(lv_timerWindowHolder, c_triggerControlTypePanel, "WaveTimerWindow" + IntToString(lv_windowIndex));
        libCOMI_gv_cU_WaveTimerWindows[lv_windowIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_WaveTimerWindows[lv_windowIndex], c_triggerControlTypePanel, "TimerPanel");
        lv_lastFrame = DialogControlLastCreated();
        DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "TimerLabel");
        libCOMI_gv_cU_WaveTimerWindowTime[lv_windowIndex] = DialogControlLastCreated();
        DialogControlHookup(lv_lastFrame, c_triggerControlTypeLabel, "TitleLabel");
        libCOMI_gv_cU_WaveTimerWindowTitle[lv_windowIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_WaveTimerWindows[lv_windowIndex], c_triggerControlTypePanel, "UnitPanel");
        lv_lastFrame = DialogControlLastCreated();
        lv_unitIndex = 1;
        for ( ; ( (auto4A433251_ai >= 0 && lv_unitIndex <= auto4A433251_ae) || (auto4A433251_ai < 0 && lv_unitIndex >= auto4A433251_ae) ) ; lv_unitIndex += auto4A433251_ai ) {
            DialogControlHookup(lv_lastFrame, c_triggerControlTypeImage, "UnitIcon" + IntToString(lv_unitIndex));
            libCOMI_gv_cU_WaveTimerWindowIcon[lv_windowIndex][lv_unitIndex] = DialogControlLastCreated();
        }
    }
    TriggerExecute(libCOMI_gt_CU_WaveTimerWindowUpdateTime, true, false);
}

int libCOMI_gf_LastCreatedWaveTimerWindow () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cU_WaveTimerWindowLast;
}

int libCOMI_gf_CU_WaveTimerWindowIndexFromID (int lp_waveID) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libCOMI_gf_CU_WaveTimerWindowIndexKey(lp_waveID));
}

string libCOMI_gf_CU_WaveTimerWindowIndexKey (int lp_waveID) {
    // Automatic Variable Declarations
    // Implementation
    return ("CU_WaveTimer" + IntToString(lp_waveID));
}

void libCOMI_gf_CU_FanfareCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cU_FanfareDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 500);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_cU_FanfareDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_ScoreScreen/GameOverFanfareTemplate");
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOMI_gv_cU_FanfarePanel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_FanfarePanel, c_triggerControlTypeFlash, "FlashFrame");
    libCOMI_gv_cU_FanfareFlash = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_FanfarePanel, c_triggerControlTypeButton, "QuitButton");
    libCOMI_gv_cU_FanfareCloseButton = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_FanfarePanel, c_triggerControlTypeButton, "ConvertToReplayButton");
    libCOMI_gv_cU_FanfareConvertToReplayButton = DialogControlLastCreated();
}

void libCOMI_gf_CU_FanfareDisplay (int lp_result, int lp_player) {
    // Variable Declarations
    playergroup lv_fanfarePlayers;
    string lv_playerRace;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fanfarePlayers = PlayerGroupEmpty();

    // Implementation
    if ((libCOMI_gv_cU_FanfareShown[lp_player] == true)) {
        return ;
    }

    libCOMI_gv_cU_FanfareShown[lp_player] = true;
    libCOMI_gf_CU_FanfareCreate();
    lv_fanfarePlayers = PlayerGroupSingle(lp_player);
    lv_playerRace = PlayerRace(lp_player);
    libCOMI_gv_cU_FanfareResult[lp_player] = lp_result;
    if (((lv_playerRace == "TerrI") || (lv_playerRace == "ZergP"))) {
        lv_playerRace = "Zerg";
    }

    TriggerEnable(libCOMI_gt_CU_FanfareDismissed, true);
    DialogSetVisible(libCOMI_gv_cU_FanfareDialog, lv_fanfarePlayers, true);
    if ((lp_result == c_gameOverVictory)) {
        DialogControlInvokeAsText(libCOMI_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetVictoryText", StringExternal("@UI/Text/Victory"), null, null, null);
    }
    else {
        DialogControlInvokeAsText(libCOMI_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetVictoryText", StringExternal("@UI/Text/Defeat"), null, null, null);
    }
    DialogControlInvokeAsText(libCOMI_gv_cU_FanfareFlash, lv_fanfarePlayers, "SetNameText", PlayerName(lp_player), null, null, null);
    DialogControlInvokeAsString(libCOMI_gv_cU_FanfareFlash, lv_fanfarePlayers, "PlayVictoryScreen", StringCase((lv_playerRace), false), null, null, null);
    SoundPlayForPlayer(SoundLink("UI_Victory_All", 0), c_maxPlayers, lv_fanfarePlayers, 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_MissionFailed", 2), c_maxPlayers, lv_fanfarePlayers, 100.0, 0.0);
}

trigger auto_libCOMI_gf_CU_FanfareTransmission_Trigger = null;

void libCOMI_gf_CU_FanfareTransmission () {
    if (auto_libCOMI_gf_CU_FanfareTransmission_Trigger == null) {
        auto_libCOMI_gf_CU_FanfareTransmission_Trigger = TriggerCreate("auto_libCOMI_gf_CU_FanfareTransmission_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CU_FanfareTransmission_Trigger, false, false);
}

bool auto_libCOMI_gf_CU_FanfareTransmission_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto492D6F1B_g;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_FanfareTransmissionPlayed == true)) {
        return true;
    }

    libCOMI_gv_cU_FanfareTransmissionPlayed = true;
    Wait(0.5, c_timeGame);
    UserDataSetInt("MissionTransmission", "Victory", "PlayingNow", 1, 1);
    libCOMI_gv_cM_TransmissionCurrentType = "Victory";
    auto492D6F1B_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto492D6F1B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        ConversationDataLineSetPlayers("acVictory", (libCOMI_gf_CC_CommanderConvoTag(libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gf_CC_PlayerAlly(lv_indexPlayer)))), PlayerGroupSingle(lv_indexPlayer));
    }
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), PlayerGroupAll(), c_conversationSkipNone, true);
    while (!((TransmissionPlayerHasActiveTransmission(1) == false) && (TransmissionPlayerHasActiveTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOMI_gf_HumanPlayers(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("Commanders", libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    return true;
}

void libCOMI_gf_CU_ScoreCreate () {
    // Variable Declarations
    int lv_categoryIndex;

    // Automatic Variable Declarations
    const int auto2E304350_ae = 3;
    const int auto2E304350_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_ScoreDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_cU_ScoreDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libCOMI_gv_cU_ScoreDialog, c_triggerControlTypePanel, "Coop_ScoreScreen/ScoreScreenTemplate");
    libCOMI_gv_cU_ScorePanel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "Title");
    libCOMI_gv_cU_ScoreTitleLabel = DialogControlLastCreated();
    lv_categoryIndex = 1;
    for ( ; ( (auto2E304350_ai >= 0 && lv_categoryIndex <= auto2E304350_ae) || (auto2E304350_ai < 0 && lv_categoryIndex >= auto2E304350_ae) ) ; lv_categoryIndex += auto2E304350_ai ) {
        DialogControlHookup(libCOMI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreTitle" + IntToString(lv_categoryIndex));
        libCOMI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreValue" + IntToString(lv_categoryIndex));
        libCOMI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libCOMI_gv_cU_ScorePanel, c_triggerControlTypeLabel, "ScoreValueTotal");
    libCOMI_gv_cU_ScoreTotalValueLabel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_ScorePanel, c_triggerControlTypeButton, "ContinueButton");
    libCOMI_gv_cU_ScoreContinueButton = DialogControlLastCreated();
}

void libCOMI_gf_CU_ScoreDisplay (int lp_player, int lp_result) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CU_ScoreCreate();
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(lp_player));
    UISetWorldVisible(PlayerGroupSingle(lp_player), false);
    libCOMI_gf_CU_ScoreUpdate(lp_player, lp_result);
    DialogSetVisible(libCOMI_gv_cU_ScoreDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOMI_gt_CU_ScoreClosed, true);
}

void libCOMI_gf_CU_ScoreUpdate (int lp_player, int lp_result) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    fixed lv_xPBonus;
    fixed lv_xPBase;
    fixed lv_xPObjective;
    int lv_categoryIndex;
    string lv_indexScoreType;

    // Automatic Variable Declarations
    const int auto8B940678_ae = 3;
    const int auto8B940678_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    if ((lp_result == c_gameOverVictory)) {
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_ScoreTitleLabel, StringExternal("Param/Value/lib_COMI_CC7555F6"), lv_updatePlayers);
    }
    else {
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_ScoreTitleLabel, StringExternal("Param/Value/lib_COMI_1115DEF1"), lv_updatePlayers);
    }
    lv_categoryIndex = 1;
    for ( ; ( (auto8B940678_ai >= 0 && lv_categoryIndex <= auto8B940678_ae) || (auto8B940678_ai < 0 && lv_categoryIndex >= auto8B940678_ae) ) ; lv_categoryIndex += auto8B940678_ai ) {
        lv_indexScoreType = libCOMI_gf_CC_MissionScoreType(lv_categoryIndex, lp_player);
        if ((lv_indexScoreType != null)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_0B05619A", "SCORE", IntToText(libCOMI_gf_CC_MissionScoreValue(lv_categoryIndex, lp_player)));
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], TextExpressionAssemble("Param/Expression/lib_COMI_0B05619A"), lv_updatePlayers);
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], StringExternal(CatalogFieldValueGet(c_gameCatalogScoreValue, lv_indexScoreType, "Name", c_playerAny)), lv_updatePlayers);
            DialogControlSetVisible(libCOMI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], lv_updatePlayers, true);
            DialogControlSetVisible(libCOMI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], lv_updatePlayers, true);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_ScoreCategoryTitleLabel[lv_categoryIndex], lv_updatePlayers, false);
            DialogControlSetVisible(libCOMI_gv_cU_ScoreCategoryValueLabel[lv_categoryIndex], lv_updatePlayers, false);
        }
    }
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_ScoreTotalValueLabel, IntToText(PlayerScoreValueGetAsInt(lp_player, "TotalMissionScore")), lv_updatePlayers);
}

void libCOMI_gf_CU_ScoreClose (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libCOMI_gv_cU_ScoreDialog, PlayerGroupSingle(lp_player), false);
}

int libCOMI_gf_CU_ScoreTriggeringPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libCOMI_gv_cUC_ScoreEventClosed, libCOMI_gv_cUC_ScoreParameterPlayer));
}

void libCOMI_gf_CU_ScoreClosed (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOMI_gv_cUC_ScoreEventClosed);
}

void libCOMI_gf_CU_HelpInit () {
    // Automatic Variable Declarations
    playergroup auto00C5D4BB_g;
    int auto00C5D4BB_var;

    // Implementation
    auto00C5D4BB_g = PlayerGroupAll();
    auto00C5D4BB_var = -1;
    while (true) {
        auto00C5D4BB_var = PlayerGroupNextPlayer(auto00C5D4BB_g, auto00C5D4BB_var);
        if (auto00C5D4BB_var < 0) { break; }
        TechTreeUnitHelpDefault(auto00C5D4BB_var, false);
    }
    libCOMI_gf_CU_HelpSetupMutatorTips();
    libCOMI_gf_CU_HelpSetupGeneralTips();
}

void libCOMI_gf_CU_HelpSetupGeneralTips () {
    // Variable Declarations
    int lv_i;
    string lv_generalTipInstance;

    // Automatic Variable Declarations
    const int auto6A8B8CEF_ae = 1;
    const int auto6A8B8CEF_ai = -1;

    // Variable Initialization

    // Implementation
    lv_i = UserDataInstanceCount("X_GeneralTips");
    for ( ; ( (auto6A8B8CEF_ai >= 0 && lv_i <= auto6A8B8CEF_ae) || (auto6A8B8CEF_ai < 0 && lv_i >= auto6A8B8CEF_ae) ) ; lv_i += auto6A8B8CEF_ai ) {
        lv_generalTipInstance = UserDataInstance("X_GeneralTips", lv_i);
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libCOMI_gf_CC_CommanderGeneralTipTitle(lv_generalTipInstance), libNtve_ge_TipType_NormalTip), libCOMI_gf_CC_CommanderGeneralTipDetails(lv_generalTipInstance), StringToText(""), libCOMI_gf_CC_CommanderGeneralTipIcon(lv_generalTipInstance));
    }
}

void libCOMI_gf_CU_HelpSetupMutatorTips () {
    // Variable Declarations
    string lv_indexMutator;

    // Automatic Variable Declarations
    int auto9E9E94C4_ai;
    int auto9E9E94C4_ae;

    // Variable Initialization

    // Implementation
    auto9E9E94C4_ai = 1;
    auto9E9E94C4_ae = UserDataInstanceCount("Mutators")+1;
    while (auto9E9E94C4_ai < auto9E9E94C4_ae) {
        lv_indexMutator = UserDataInstance("Mutators", auto9E9E94C4_ai);
        auto9E9E94C4_ai = auto9E9E94C4_ai+1;
        if ((libCOMI_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libCOMI_gf_CT_MutatorName(lv_indexMutator), libNtve_ge_TipType_NormalTip), libCOMI_gf_CT_MutatorDescription(lv_indexMutator), StringToText(""), libCOMI_gf_CT_MutatorIcon(lv_indexMutator));
        }

    }
}

void libCOMI_gf_CM_ChatBarSetMode (int lp_mode, playergroup lp_players) {
    // Automatic Variable Declarations
    int auto3055BBDE_val;

    // Implementation
    if ((libCOMI_gv_cM_FullScreenUpperContainer == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
        libCOMI_gv_cM_FullScreenUpperContainer = DialogControlLastCreated();
    }

    auto3055BBDE_val = lp_mode;
    if (auto3055BBDE_val == libCOMI_ge_CM_ChatBarMode_CM_ChatBarMutator) {
        DialogControlSetAnimationState(libCOMI_gv_cM_FullScreenUpperContainer, lp_players, "MutatorSelectionState", "Active");
    }
    else {
        DialogControlSetAnimationState(libCOMI_gv_cM_FullScreenUpperContainer, lp_players, "MutatorSelectionState", "Inactive");
    }
}

void libCOMI_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot) {
    // Automatic Variable Declarations
    int auto859F408A_val;

    // Implementation
    if ((lp_formatOrNot == libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage)) {
        auto859F408A_val = lp_messageType;
        if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Hint) {
            TextExpressionSetToken("Param/Expression/lib_COMI_64DF7A24", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_64DF7A24"));
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_SimpleHint) {
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
            SoundPlayForPlayer(SoundLink("UI_TerranHint", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Secret) {
            TextExpressionSetToken("Param/Expression/lib_COMI_C1624255", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_C1624255"));
            SoundPlayForPlayer(SoundLink("TUISecret", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAcquired) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A49EDD0B", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A49EDD0B"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAvailable) {
            TextExpressionSetToken("Param/Expression/lib_COMI_BA0BF873", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_BA0BF873"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewUnitAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewTechAvailable) {
            TextExpressionSetToken("Param/Expression/lib_COMI_39320B7C", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_39320B7C"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_NewUnitAvailable2) {
            TextExpressionSetToken("Param/Expression/lib_COMI_D6A0DA61", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_D6A0DA61"));
            SoundPlayForPlayer(SoundLink("UI_TerranNewTechAvailable", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_Warning) {
            TextExpressionSetToken("Param/Expression/lib_COMI_19CBF466", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_19CBF466"));
            SoundPlayForPlayer(SoundLink("UI_ZergWarning", 0), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_MissionFailed) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A4179B16", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A4179B16"));
            SoundPlayForPlayer(SoundLink("UI_TerranMissionFailed", 1), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else if (auto859F408A_val == libCOMI_ge_CampaignMessageType_MissionVictory) {
            TextExpressionSetToken("Param/Expression/lib_COMI_A60635A0", "A", lp_message);
            UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A60635A0"));
            SoundPlayForPlayer(SoundLink("UI_MissionComplete", 3), c_maxPlayers, lp_toPlayerGroup, 100.0, 0.0);
        }
        else {
        }
    }
    else {
        UIDisplayMessage(lp_toPlayerGroup, c_messageAreaSubtitle, lp_message);
    }
}

string libCOMI_gf_CM_ReticleModelOfStyle (int lp_type, int lp_size) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    int autoCDEF28CD_val;
    int autoBEC58E6C_val;
    int auto993B9915_val;
    int auto1B271D82_val;

    // Variable Initialization

    // Implementation
    autoCDEF28CD_val = lp_size;
    if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Large) {
        autoBEC58E6C_val = lp_type;
        if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectLargeRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectLarge";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectLargeZergRed";
        }
        else if (autoBEC58E6C_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectLargeZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Medium) {
        auto993B9915_val = lp_type;
        if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtoss";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelect";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergRed";
        }
        else if (auto993B9915_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergGreen";
        }
        else {
        }
    }
    else if (autoCDEF28CD_val == libCOMI_ge_CampaginReticleSize_Small) {
        auto1B271D82_val = lp_type;
        if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
            lv_model = "BriefingUnitSelectProtossSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
            lv_model = "BriefingUnitSelectRedSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
            lv_model = "BriefingUnitSelectSmall";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
            lv_model = "BriefingUnitSelectZergSmallRed";
        }
        else if (auto1B271D82_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
            lv_model = "BriefingUnitSelectZergSmallGreen";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libCOMI_gf_CM_ReticleTextFontOfStyle (int lp_type) {
    // Variable Declarations
    string lv_fontStyle;

    // Automatic Variable Declarations
    int auto4C012C4E_val;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto4C012C4E_val = lp_type;
    if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossBonusObjective) {
        lv_fontStyle = "VoidReticleProtossBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossEnemy) {
        lv_fontStyle = "VoidReticleProtossEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ProtossMainObjective) {
        lv_fontStyle = "VoidReticleProtossMainObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranBonusObjective) {
        lv_fontStyle = "VoidReticleTerranBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranEnemy) {
        lv_fontStyle = "VoidReticleTerranEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_TerranMainObjective) {
        lv_fontStyle = "VoidReticleTerranMainObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergBonusObjective) {
        lv_fontStyle = "VoidReticleZergBonusObjective";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergEnemy) {
        lv_fontStyle = "VoidReticleZergEnemy";
    }
    else if (auto4C012C4E_val == libCOMI_ge_CampaginReticleType_ZergMainObjective) {
        lv_fontStyle = "VoidReticleZergMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libCOMI_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCOMI_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCOMI_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_COMI_C1B831B2", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_COMI_C1B831B2", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_C1B831B2"), 24, lp_location, 0.0, true, true, libCOMI_gf_HumanPlayers());
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libCOMI_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    lv_model = libCOMI_gf_CM_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }

    libNtve_gf_AttachModelToUnitInheritVisibility(lp_target, lv_model, lp_attachPoint);
    if (((lp_text != null) == false)) {
        return ;
    }

    lv_fontStyle = libCOMI_gf_CM_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_COMI_242FDFAD", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_COMI_242FDFAD", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_242FDFAD"), 24, UnitGetPosition(lp_target), 0.0, true, true, libCOMI_gf_HumanPlayers());
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libCOMI_gf_UpdateMapSelection (int lp_player, int lp_mapIndex) {
    // Variable Declarations
    int lv_i;
    color lv_color;
    int lv_p;
    int lv_votes;
    int lv_mapIndex;
    int lv_old;

    // Automatic Variable Declarations
    int auto09A419F0_ae;
    const int auto09A419F0_ai = 1;
    playergroup autoAE5580BA_g;
    int auto4B72E0D3_val;

    // Variable Initialization
    lv_color = Color(0,0,0);
    lv_mapIndex = lp_mapIndex;
    lv_old = libCOMI_gv_selected[lp_player];

    // Implementation
    libCOMI_gv_selected[lp_player] = lv_mapIndex;
    auto09A419F0_ae = libCOMI_gv_totalMaps;
    lv_i = 1;
    for ( ; ( (auto09A419F0_ai >= 0 && lv_i <= auto09A419F0_ae) || (auto09A419F0_ai < 0 && lv_i >= auto09A419F0_ae) ) ; lv_i += auto09A419F0_ai ) {
        lv_votes = 0;
        autoAE5580BA_g = PlayerGroupAll();
        lv_p = -1;
        while (true) {
            lv_p = PlayerGroupNextPlayer(autoAE5580BA_g, lv_p);
            if (lv_p < 0) { break; }
            if ((PlayerType(lv_p) == c_playerTypeUser) && (libCOMI_gv_selected[lv_p] == lv_i)) {
                lv_votes += 1;
                lv_color = libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_p, false));
            }

        }
        auto4B72E0D3_val = lv_votes;
        if (auto4B72E0D3_val == 0) {
            DialogControlSetVisible(libCOMI_gv_mapBorder[lv_i], libCOMI_gv_all, false);
        }
        else if (auto4B72E0D3_val == 1) {
            libNtve_gf_SetDialogItemColor(libCOMI_gv_mapBorder[lv_i], lv_color, libCOMI_gv_all);
            DialogControlSetVisible(libCOMI_gv_mapBorder[lv_i], libCOMI_gv_all, true);
        }
        else {
            libNtve_gf_SetDialogItemColor(libCOMI_gv_mapBorder[lv_i], Color(100.00, 100.00, 100.00), libCOMI_gv_all);
            DialogControlSetVisible(libCOMI_gv_mapBorder[lv_i], libCOMI_gv_all, true);
        }
    }
    DialogControlSelectItem(libCOMI_gv_selectMissionPulldownDialog, libCOMI_gv_all, lv_mapIndex);
}

point libCOMI_gf_GetAllyStartPosition (int lp_player, int lp_index, int lp_mode) {
    // Variable Declarations
    string lv_tEAM;
    string lv_tYPE;
    string lv_n;
    string lv_p;
    string lv_m;
    point lv_playerStartPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tEAM = "Ally";
    lv_tYPE = "Expansion";
    lv_n = IntToString(libARRA_gf_IIF8(lp_index, 1));
    lv_p = IntToString(lp_player);
    lv_m = IntToString(lp_mode);

    // Implementation
    if ((lp_index <= 1)) {
        lv_playerStartPoint = libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " " + lv_tYPE + " " + lv_n + " (" + lv_m + ")")), libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " " + lv_tYPE + " " + lv_n)), libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " " + lv_tYPE + " (" + lv_m + ")")), PointFromName((lv_tEAM + "-" + lv_p + " " + lv_tYPE)))));
    }
    else {
        lv_playerStartPoint = libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " " + lv_tYPE + " " + lv_n + " (" + lv_m + ")")), PointFromName((lv_tEAM + "-" + lv_p + " " + lv_tYPE + " " + lv_n)));
    }
    lv_playerStartPoint = libARRA_gf_IIF7(PointFromName(("Ally-" + lv_p + " Start (" + lv_m + ")")), PointFromName(("Ally-" + lv_p + " Start")));
    return libARRA_gf_IIF7(lv_playerStartPoint, PlayerStartLocation(lp_player));
}

point libCOMI_gf_GetAllyExpansionPosition (int lp_player, int lp_index, int lp_mode) {
    // Variable Declarations
    string lv_tEAM;
    string lv_p;
    string lv_n;
    string lv_m;
    point lv_playerStartPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tEAM = "Ally";
    lv_p = IntToString(lp_player);
    lv_n = IntToString(libARRA_gf_IIF8(lp_index, 1));
    lv_m = IntToString(lp_mode);

    // Implementation
    if ((lp_index <= 1)) {
        lv_playerStartPoint = libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n + " (" + lv_m + ")")), libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n)), libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion (" + lv_m + ")")), PointFromName((lv_tEAM + "-" + lv_p + " Expansion")))));
    }
    else {
        lv_playerStartPoint = libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n + " (" + lv_m + ")")), PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n)));
    }
    return lv_playerStartPoint;
}

point libCOMI_gf_GetAmonStartPosition (int lp_player, int lp_index, int lp_mode) {
    // Variable Declarations
    string lv_tEAM;
    string lv_n;
    point lv_playerStartPoint;
    string lv_p;
    string lv_m;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tEAM = "Amon";
    lv_n = IntToString(libARRA_gf_IIF8(lp_index, 1));
    lv_p = IntToString(lp_player);
    lv_m = IntToString(lp_mode);

    // Implementation
    lv_playerStartPoint = libARRA_gf_IIF7(PointFromName(("Amon-" + lv_p + " Start (" + lv_m + ")")), PointFromName(("Amon-" + lv_p + " Start")));
    return libARRA_gf_IIF7(lv_playerStartPoint, PlayerStartLocation(lp_player));
}

point libCOMI_gf_GetAmonExpansionPosition (int lp_player, int lp_index, int lp_mode) {
    // Variable Declarations
    string lv_n;
    string lv_p;
    string lv_m;
    point lv_playerStartPoint;
    string lv_tEAM;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_n = IntToString(libARRA_gf_IIF8(lp_index, 1));
    lv_p = IntToString(lp_player);
    lv_m = IntToString(lp_mode);
    lv_tEAM = "Amon";

    // Implementation
    if ((lp_index <= 1)) {
        lv_playerStartPoint = libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n + " (" + lv_m + ")")), libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n)), libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion (" + lv_m + ")")), PointFromName((lv_tEAM + "-" + lv_p + " Expansion")))));
    }
    else {
        lv_playerStartPoint = libARRA_gf_IIF7(PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n + " (" + lv_m + ")")), PointFromName((lv_tEAM + "-" + lv_p + " Expansion " + lv_n)));
    }
    return lv_playerStartPoint;
}

point libCOMI_gf_GetAllyHeroPosition (int lp_slot) {
    // Variable Declarations
    int lv_player;
    point lv_mineralPoint;
    point lv_spawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = PlayerGroupPlayer(libCOMI_gv_vU_SlotsPlayers, lp_slot);

    // Implementation
    lv_spawnPoint = PointFromName(("Hero Spawn " + IntToString(PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers())) + "-" + IntToString(lp_slot)));
    if ((lv_spawnPoint != null)) {
        return lv_spawnPoint;
    }

    lv_spawnPoint = PointFromName(("Hero Spawn " + IntToString(lp_slot)));
    if ((lv_spawnPoint != null)) {
        return lv_spawnPoint;
    }

    if ((UnitGroupCount(UnitGroup("ACHeroSpawnPlacement", lp_slot, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
        lv_spawnPoint = UnitGetPosition(UnitGroupUnit(UnitGroup("ACHeroSpawnPlacement", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1));
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_2D63374A"), false);
        lv_mineralPoint = UnitGroupCenterOfGroup(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_player)), 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_mineralPoint, 13.0, UnitGetPosition(libCOMI_gf_CM_PrimaryTownHall(lv_player)));
    }
    return lv_spawnPoint;
}

void libCOMI_gf_CreateRevealerCoop (int lp_player, region lp_area) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_RevealerCount += 1;
    VisRevealerCreate(lp_player, lp_area);
    DataTableSetRevealer(true, ("CM_Revealer_" + IntToString(libCOMI_gv_cM_RevealerCount)), VisRevealerLastCreated());
    DataTableSetBool(true, ("CM_RevealerOn_" + IntToString(libCOMI_gv_cM_RevealerCount)), true);
    if ((libCOMI_gv_cM_RevealersEnabled == false)) {
        VisRevealerEnable(VisRevealerLastCreated(), false);
    }

}

void libCOMI_gf_EnableDisableRevealerCoop (revealer lp_r, bool lp_enable) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetBool(true, ("CM_RevealerOn_" + IntToString(libCOMI_gf_CM_RevealerIndex(lp_r))), (lp_enable == true));
    if ((lp_enable == true) && (libCOMI_gv_cM_RevealersEnabled == false)) {
        return ;
    }

    VisRevealerEnable(lp_r, lp_enable);
}

void libCOMI_gf_DestroyRevealerCoop (revealer lp_r) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRevealer(true, ("CM_Revealer_" + IntToString(libCOMI_gf_CM_RevealerIndex(lp_r))), null);
    VisRevealerDestroy(lp_r);
}

int libCOMI_gf_CM_RevealerIndex (revealer lp_revealer) {
    // Variable Declarations
    int lv_revealerIndex;

    // Automatic Variable Declarations
    int autoC6418414_ae;
    const int autoC6418414_ai = 1;

    // Variable Initialization

    // Implementation
    autoC6418414_ae = libCOMI_gv_cM_RevealerCount;
    lv_revealerIndex = 1;
    for ( ; ( (autoC6418414_ai >= 0 && lv_revealerIndex <= autoC6418414_ae) || (autoC6418414_ai < 0 && lv_revealerIndex >= autoC6418414_ae) ) ; lv_revealerIndex += autoC6418414_ai ) {
        if ((libCOMI_gf_CM_RevealerFromIndex(lv_revealerIndex) == lp_revealer)) {
            return lv_revealerIndex;
        }

    }
    return 0;
}

revealer libCOMI_gf_CM_RevealerFromIndex (int lp_revealerIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRevealer(true, ("CM_Revealer_" + IntToString(lp_revealerIndex)));
}

void libCOMI_gf_CM_RevealersEnableDisable (bool lp_enabled) {
    // Variable Declarations
    bool lv_enableDisable;
    int lv_revealerIndex;
    revealer lv_indexRevealer;

    // Automatic Variable Declarations
    int auto5A33B3FD_ae;
    const int auto5A33B3FD_ai = 1;

    // Variable Initialization
    lv_enableDisable = true;

    // Implementation
    libCOMI_gv_cM_RevealersEnabled = lp_enabled;
    if ((lp_enabled == true)) {
        lv_enableDisable = true;
    }
    else {
        lv_enableDisable = false;
    }
    auto5A33B3FD_ae = libCOMI_gv_cM_RevealerCount;
    lv_revealerIndex = 1;
    for ( ; ( (auto5A33B3FD_ai >= 0 && lv_revealerIndex <= auto5A33B3FD_ae) || (auto5A33B3FD_ai < 0 && lv_revealerIndex >= auto5A33B3FD_ae) ) ; lv_revealerIndex += auto5A33B3FD_ai ) {
        lv_indexRevealer = libCOMI_gf_CM_RevealerFromIndex(lv_revealerIndex);
        if ((lv_indexRevealer != null)) {
            VisRevealerEnable(lv_indexRevealer, lv_enableDisable);
        }

    }
}

void libCOMI_gf_AutoRevealRegionCoop (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libARRA_gv_autoRevealers.lv_count >= 64)) {
        return ;
    }

    libCOMI_gf_CreateRevealerCoop(lp_player, lp_visibilityRegion);
    libARRA_gv_autoRevealers.lv_revealers[libARRA_gv_autoRevealers.lv_count] = VisRevealerLastCreated();
    libCOMI_gf_EnableDisableRevealerCoop(VisRevealerLastCreated(), false);
    libARRA_gv_autoRevealers.lv_triggeringRegions[libARRA_gv_autoRevealers.lv_count] = lp_triggeringRegion;
    libARRA_gv_autoRevealers.lv_triggeringPlayers[libARRA_gv_autoRevealers.lv_count] = lp_player;
    libARRA_gv_autoRevealers.lv_count += 1;
    TriggerExecute(libCOMI_gt_CM_AutoRevealRegionController, true, false);
}

void libCOMI_gf_PreventSpawningInRegion (region lp_region) {
    // Automatic Variable Declarations
    // Implementation
    RegionAddRegion(libCOMI_gv_cC_NoSpawnRegion, lp_region);
}

bool libCOMI_gf_CC_SpawnAllowedAtPoint (point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    return !(RegionContainsPoint(libCOMI_gv_cC_NoSpawnRegion, lp_spawnPoint));
}

region libCOMI_gf_GetExpansionZone () {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionEmpty();

    // Implementation
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Expansion Zone");
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Expansion Area");
    libARRA_gf_AddRegionByNameIfExists(lv_region, ("Expansion Area " + IntToString(PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))));
    libARRA_gf_AddRegionByNameIfExists(lv_region, ("Expansion Zone " + IntToString(PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))));
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Expansion Area");
    if ((libNtve_gf_HeightOfRegion(lv_region) == 0.0) && (libNtve_gf_WidthOfRegion(lv_region) == 0.0)) {
        return null;
    }
    else {
        return lv_region;
    }
}

region libCOMI_gf_GetRevealZone (int lp_team) {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionEmpty();

    // Implementation
    if ((lp_team == 1)) {
        libARRA_gf_AddRegionByNameIfExists(lv_region, "Ally Reveal");
    }
    else {
        libARRA_gf_AddRegionByNameIfExists(lv_region, "Amon Reveal");
    }
    if ((lp_team == 1)) {
        libARRA_gf_AddRegionByNameIfExists(lv_region, "Ally Base");
    }
    else {
        libARRA_gf_AddRegionByNameIfExists(lv_region, "Amon Base");
    }
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Initial Exploration");
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Exploration Zone");
    libARRA_gf_AddRegionByNameIfExists(lv_region, ("Exploration Zone " + IntToString(PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()))));
    if ((libNtve_gf_HeightOfRegion(lv_region) == 0.0) && (libNtve_gf_WidthOfRegion(lv_region) == 0.0)) {
        return null;
    }
    else {
        return lv_region;
    }
}

region libCOMI_gf_GetIgnoreZone () {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionEmpty();

    // Implementation
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Ignore Area");
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Ignore Zone");
    if ((libNtve_gf_HeightOfRegion(lv_region) == 0.0) && (libNtve_gf_WidthOfRegion(lv_region) == 0.0)) {
        return null;
    }
    else {
        return lv_region;
    }
}

region libCOMI_gf_GetSafetyZone () {
    // Variable Declarations
    region lv_region;
    point lv_point;
    int lv_tT;
    int lv_pP;
    int lv_mM;
    int lv_nN;

    // Automatic Variable Declarations
    int auto3E9CE99B_ae;
    const int auto3E9CE99B_ai = 1;
    const int auto400ED96E_ae = 9;
    const int auto400ED96E_ai = 1;

    // Variable Initialization
    lv_region = RegionEmpty();
    lv_mM = PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers());

    // Implementation
    RegionAddRegion(lv_region, libARRA_gf_IIF11(RegionFromName(("Ally Base (" + IntToString(lv_mM) + ")")), lv_region));
    auto3E9CE99B_ae = PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers());
    lv_pP = 1;
    for ( ; ( (auto3E9CE99B_ai >= 0 && lv_pP <= auto3E9CE99B_ae) || (auto3E9CE99B_ai < 0 && lv_pP >= auto3E9CE99B_ae) ) ; lv_pP += auto3E9CE99B_ai ) {
        RegionAddRegion(lv_region, libARRA_gf_IIF11(RegionFromName(("Ally-" + IntToString(lv_pP) + " Base (" + IntToString(lv_mM) + ")")), libARRA_gf_IIF11(RegionFromName(("Ally-" + IntToString(lv_pP) + " Base")), RegionEmpty())));
        lv_nN = 1;
        for ( ; ( (auto400ED96E_ai >= 0 && lv_nN <= auto400ED96E_ae) || (auto400ED96E_ai < 0 && lv_nN >= auto400ED96E_ae) ) ; lv_nN += auto400ED96E_ai ) {
            RegionAddRegion(lv_region, libARRA_gf_IIF11(RegionFromName(("Ally-" + IntToString(lv_pP) + " Base " + IntToString(lv_nN) + " (" + IntToString(lv_mM) + ")")), libARRA_gf_IIF11(RegionFromName(("Ally-" + IntToString(lv_pP) + " Base " + IntToString(lv_nN))), RegionEmpty())));
            lv_point = libCOMI_gf_GetAllyStartPosition(lv_pP, lv_nN, lv_mM);
            if ((lv_point != null)) {
                RegionAddRegion(lv_region, RegionCircle(lv_point, libCOMI_gf_SafetyRadius()));
            }

            lv_point = libCOMI_gf_GetAllyExpansionPosition(lv_pP, lv_nN, lv_mM);
            if ((lv_point != null)) {
                RegionAddRegion(lv_region, RegionCircle(lv_point, libCOMI_gf_SafetyRadius()));
            }

        }
    }
    libARRA_gf_AddRegionByNameIfExists(lv_region, ("Safety Zone " + IntToString(lv_mM)));
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Safety Zone");
    libARRA_gf_AddRegionByNameIfExists(lv_region, "MutatorSafetyZone");
    if ((libNtve_gf_HeightOfRegion(lv_region) == 0.0) && (libNtve_gf_WidthOfRegion(lv_region) == 0.0)) {
        libARRA_gf_AddRegionIfExists(lv_region, libCOMI_gf_GetRevealZone(0));
        libARRA_gf_AddRegionIfExists(lv_region, libCOMI_gf_GetExpansionZone());
    }

    return lv_region;
}

region libCOMI_gf_GetSleepZone () {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionEmpty();

    // Implementation
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Performance Sleep Area");
    libARRA_gf_AddRegionByNameIfExists(lv_region, "Sleep Zone");
    if ((libNtve_gf_HeightOfRegion(lv_region) == 0.0) && (libNtve_gf_WidthOfRegion(lv_region) == 0.0)) {
        return null;
    }
    else {
        return lv_region;
    }
}

void libCOMI_gf_TaskCreateRevealersCoop (int lp_task, playergroup lp_players, region lp_region) {
    // Automatic Variable Declarations
    playergroup auto9F485E9F_g;
    int auto9F485E9F_var;

    // Implementation
    auto9F485E9F_g = lp_players;
    auto9F485E9F_var = -1;
    while (true) {
        auto9F485E9F_var = PlayerGroupNextPlayer(auto9F485E9F_g, auto9F485E9F_var);
        if (auto9F485E9F_var < 0) { break; }
        libCOMI_gf_CreateRevealerCoop(auto9F485E9F_var, lp_region);
        libARRA_gf_StoreRevealerForTask(lp_task, IntToString(auto9F485E9F_var), VisRevealerLastCreated());
    }
}

void libCOMI_gf_TaskDestroyRevealersCoop (int lp_task) {
    // Variable Declarations
    string lv_revealers;
    string lv_indexKey;

    // Automatic Variable Declarations
    int autoF6561AC3_ai;
    int autoF6561AC3_ae;

    // Variable Initialization
    lv_revealers = libARRA_gf_MapRevealerIndexes(("TASK_" + IntToString(lp_task)));
    lv_indexKey = "";

    // Implementation
    autoF6561AC3_ai = 1;
    autoF6561AC3_ae = libARRA_gf_ListSize(lv_revealers);
    while (autoF6561AC3_ai <= autoF6561AC3_ae) {
        lv_indexKey = libARRA_gf_ListStringGet(lv_revealers, autoF6561AC3_ai);
        autoF6561AC3_ai = autoF6561AC3_ai+1;
        libCOMI_gf_DestroyRevealerCoop(libARRA_gf_RevealerStoredForTask(lp_task, lv_indexKey));
    }
    libARRA_gf_ListClear(lv_revealers);
}

void libCOMI_gf_TaskAttackWaves (int lp_task, fixed lp_delayMinutes, string lp_routes) {
    // Automatic Variable Declarations
    int auto507F9536_saved_task;
    int auto507F9536_saved_parent;
    int auto1C21FC6D_val;
    int auto9818C6B4_val;

    // Implementation
    auto507F9536_saved_task   = libARRA_gv_task;
    auto507F9536_saved_parent = libARRA_gv_parent;
    libARRA_gv_parent = libARRA_gv_task;
    libARRA_gf_CreateTask("attack-waves");
    libARRA_gf_StoreStringForTask(libARRA_gv_task, "AttackWavesRoutes", libARRA_gf_Routes(("Wave " + lp_routes)));
    libARRA_gf_StoreStringForTask(libARRA_gv_task, "AttackWavesStrategy", "Default");
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", 1);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", 1);
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesFrequency", 1.0);
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesTechRate", 1.0);
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSizeRate", 1.0);
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMin", -0.5);
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMax", 0.5);
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesDelay", lp_delayMinutes);
    auto1C21FC6D_val = PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers());
    if (auto1C21FC6D_val == 1) {
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesFrequency", 1.0);
    }
    else if (auto1C21FC6D_val == 2) {
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesFrequency", 1.0);
    }
    else if (auto1C21FC6D_val == 3) {
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesFrequency", 0.9);
    }
    else if (auto1C21FC6D_val == 4) {
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesFrequency", 0.8);
    }
    else if (auto1C21FC6D_val == 5) {
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesFrequency", 0.7);
    }
    else {
    }
    auto9818C6B4_val = RandomInt(0, 4);
    if (auto9818C6B4_val == 1) {
        libARRA_gf_StoreStringForTask(libARRA_gv_task, "AttackWavesStrategy", "Techy");
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesTechRate", 0.75);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSizeRate", 1.25);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMin", -0.25);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMax", 0.5);
    }
    else if (auto9818C6B4_val == 2) {
        libARRA_gf_StoreStringForTask(libARRA_gv_task, "AttackWavesStrategy", "Agressive");
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesTechRate", 1.25);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSizeRate", 1.25);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMin", -1.0);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMax", 0.25);
    }
    else if (auto9818C6B4_val == 3) {
        libARRA_gf_StoreStringForTask(libARRA_gv_task, "AttackWavesStrategy", "Brute");
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesTechRate", 1.5);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSizeRate", 0.75);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMin", -0.25);
        libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMax", 0.75);
    }
    else {
    }
    libARRA_gf_TaskRun(libARRA_gv_task, libCOMI_gt_DefaultMissionWavesSizeProgression, false);
    libARRA_gf_TaskRun(libARRA_gv_task, libCOMI_gt_DefaultMissionWavesTechProgression, false);
    libARRA_gf_TaskRun(libARRA_gv_task, libCOMI_gt_AttacksController, false);
    libARRA_gv_task   = auto507F9536_saved_task;
    libARRA_gv_parent = auto507F9536_saved_parent;
}

void libCOMI_gf_TaskAttackWave (int lp_task, unit lp_tARGET, string lp_rOUTES, int lp_sIZE, int lp_tECH, int lp_tYPE) {
    // Variable Declarations
    int lv_amon1;
    int lv_amon2;
    string lv_route;
    point lv_routeFirstPoint;

    // Automatic Variable Declarations
    playergroup autoD4B040E3_g;
    int autoD4B040E3_var;
    int auto8D8DC32C_ae;
    int auto8D8DC32C_var;

    // Variable Initialization
    lv_amon1 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1);
    lv_amon2 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 2);
    lv_route = "";

    // Implementation
    if ((libARRA_gf_ListSize(lp_rOUTES) == 0)) {
        return ;
    }

    autoD4B040E3_g = libCOMI_gf_GetEnemyAIPlayers();
    autoD4B040E3_var = -1;
    while (true) {
        autoD4B040E3_var = PlayerGroupNextPlayer(autoD4B040E3_g, autoD4B040E3_var);
        if (autoD4B040E3_var < 0) { break; }
        AIAttackWaveSetTargetUnit(autoD4B040E3_var, lp_tARGET);
    }
    lv_route = libCOMI_gf_BestAttackWaveRoute(lp_rOUTES);
    lv_routeFirstPoint = libARRA_gf_ListPointGet(lv_route, 1);
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lv_amon1, lv_amon2, libCOMI_gf_IntegerAsResourceBucket(lp_sIZE), libCOMI_gf_IntegerAsTechBucket(lp_tECH), lv_routeFirstPoint, true);
    if ((libARRA_gf_ListSize(lv_route) > 1)) {
        auto8D8DC32C_ae = libARRA_gf_ListSize(lv_route);
        auto8D8DC32C_var = 2;
        for ( ; auto8D8DC32C_var <= auto8D8DC32C_ae; auto8D8DC32C_var += 1 ) {
            libCOMI_gf_AddAttackForceWaypoint(libARRA_gf_ListPointGet(lv_route, auto8D8DC32C_var), false);
        }
    }

    libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType(libCOMI_gf_LastCreatedCoopAttackForce(), 0, true, lp_tYPE);
    libARRA_gf_TaskEmit(libARRA_gv_task, "Attack", "");
}

unit libCOMI_gf_RandomPriorityTarget () {
    // Variable Declarations
    int lv_commander1;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_commander1 = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);

    // Implementation
    return libARRA_gf_IIF6(UnitGroupRandomUnit(UnitGroupAlliance(lv_commander1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventReveal), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), UnitGroupRandomUnit(UnitGroupAlliance(lv_commander1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
}

string libCOMI_gf_BestAttackWaveRoute (string lp_spawns) {
    // Variable Declarations
    string lv_possibleSpawns;
    int lv_commanderPlayer;
    point lv_testPoint;
    string lv_testRoute;
    int lv_tempLocationIndex;
    string lv_bestRoute;
    fixed lv_bestPointNearbyUnitHealth;
    fixed lv_nearbyUnitHealth;
    const int lv_iGNORING_UNIT_HEALTH_VALUE = 1000;

    // Automatic Variable Declarations
    unitgroup auto26485652_g;
    int auto26485652_u;
    unit auto26485652_var;

    // Variable Initialization
    lv_possibleSpawns = "_TEMP_ROUTES_ARRAY_";
    lv_commanderPlayer = PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1);
    lv_testRoute = "";

    // Implementation
    libARRA_gf_ListStringCopy(lp_spawns, lv_possibleSpawns);
    while ((libARRA_gf_ListSize(lv_possibleSpawns) > 0)) {
        lv_testRoute = libARRA_gf_ListStringGet(lv_possibleSpawns, RandomInt(1, libARRA_gf_ListSize(lv_possibleSpawns)));
        lv_testPoint = libARRA_gf_ListPointGet(lv_testRoute, 1);
        lv_nearbyUnitHealth = 0;
        auto26485652_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_commanderPlayer, c_unitAllianceAlly, RegionCircle(lv_testPoint, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto26485652_u = UnitGroupCount(auto26485652_g, c_unitCountAll);
        for (;; auto26485652_u -= 1) {
            auto26485652_var = UnitGroupUnitFromEnd(auto26485652_g, auto26485652_u);
            if (auto26485652_var == null) { break; }
            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto26485652_var, c_unitPropLife, c_unitPropCurrent);
            lv_nearbyUnitHealth += UnitGetPropertyFixed(auto26485652_var, c_unitPropShields, c_unitPropCurrent);
        }
        if ((lv_nearbyUnitHealth < lv_iGNORING_UNIT_HEALTH_VALUE)) {
            libARRA_gf_ListClear(lv_possibleSpawns);
            return lv_testRoute;
        }
        else {
            libARRA_gf_ListPointExclude(lp_spawns, lv_testPoint);
            if (((lv_bestRoute == null) || (lv_nearbyUnitHealth < lv_bestPointNearbyUnitHealth))) {
                lv_bestRoute = lv_testRoute;
                lv_bestPointNearbyUnitHealth = lv_nearbyUnitHealth;
            }

        }
    }
    libARRA_gf_ListClear(lv_possibleSpawns);
    return lv_bestRoute;
}

void libCOMI_gf_Harass (int lp_target, fixed lp_delay, int lp_size, int lp_tech, string lp_routes) {
    // Automatic Variable Declarations
    int auto26D36F82_saved_task;
    int auto26D36F82_saved_parent;

    // Implementation
    auto26D36F82_saved_task   = libARRA_gv_task;
    auto26D36F82_saved_parent = libARRA_gv_parent;
    libARRA_gv_parent = libARRA_gv_task;
    libARRA_gf_CreateTask("attack-wave-harass");
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", lp_tech);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", lp_size);
    libARRA_gf_StoreStringForTask(libARRA_gv_task, "AttackWavesRoutes", libARRA_gf_Routes(("Wave " + lp_routes)));
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWaveTargetIndex", lp_target);
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWaveDelay", lp_delay);
    libARRA_gf_TaskOnTask(libARRA_gv_task, libARRA_gv_parent, "Harass", libCOMI_gt_PriorityTargetAttack);
    libARRA_gv_task   = auto26D36F82_saved_task;
    libARRA_gv_parent = auto26D36F82_saved_parent;
}

void libCOMI_gf_TaskSetPriorityTarget (int lp_task, unit lp_unit, int lp_priority) {
    // Variable Declarations
    int lv_task;
    unitgroup lv_targets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_task = lp_task;
    lv_targets = libARRA_gf_UnitGroupStoredForTask(lv_task, "Targets");

    // Implementation
    if ((lv_targets == null)) {
        lv_targets = UnitGroupEmpty();
        libARRA_gf_StoreUnitGroupForTask(lv_task, "Targets", UnitGroupEmpty());
    }

    UnitGroupAdd(lv_targets, lp_unit);
}

void libCOMI_gf_TaskSetPriorityTargets (int lp_task, unitgroup lp_units, int lp_priority) {
    // Variable Declarations
    int lv_task;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_task = lp_task;

    // Implementation
    libARRA_gf_StoreUnitGroupForTask(lv_task, "Targets", lp_units);
}

unit libCOMI_gf_TaskGetPriorityTarget (int lp_task, int lp_target) {
    // Variable Declarations
    unitgroup lv_priorityTargets;
    unitgroup lv_livingPriorityTargets;
    int lv_livingPriorityTargetsCount;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    int auto4E680538_val;

    // Variable Initialization
    lv_priorityTargets = libARRA_gf_UnitGroupStoredForTask2(libARRA_gv_task, "Targets");
    lv_livingPriorityTargets = UnitGroupFilter(null, c_playerAny, lv_priorityTargets, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_livingPriorityTargetsCount = UnitGroupCount(lv_livingPriorityTargets, c_unitCountAlive);

    // Implementation
    if ((lv_livingPriorityTargetsCount > 0)) {
        auto4E680538_val = lp_target;
        if (auto4E680538_val == libCOMI_gv_lOWEST_VITALITY) {
            lv_targetUnit = libARRA_gf_LowestVitalityUnitfromUnitGroup(lv_priorityTargets);
        }
        else if (auto4E680538_val == libCOMI_gv_rANDOM_OBJECTIVE) {
            lv_targetUnit = UnitGroupUnit(lv_livingPriorityTargets, RandomInt(1, lv_livingPriorityTargetsCount));
        }
        else {
            lv_targetUnit = UnitGroupUnit(lv_priorityTargets, lp_target);
            if ((UnitFilterMatch(lv_targetUnit, 1, UnitFilter(0, (1 << (c_targetFilterDead - 32)), 0, 0)) == true)) {
                lv_targetUnit = UnitGroupUnit(lv_livingPriorityTargets, RandomInt(1, lv_livingPriorityTargetsCount));
            }

        }
    }
    else {
        lv_targetUnit = libCOMI_gf_RandomPriorityTarget();
    }
    return lv_targetUnit;
}

void libCOMI_gf_CM_AIThinkCoop2 (int lp_player) {
    // Variable Declarations
    int lv_setupNextAttackWave;
    int lv_count;
    string lv_unitType;
    int lv_emptyWaveIndex;
    int lv_attackWaveIndex;
    wave lv_wave;
    int lv_startingTechStockIter;
    string lv_startingTechStockUnit;
    int lv_i;
    string lv_unitIter;
    string lv_unitCat;

    // Automatic Variable Declarations
    int auto244992DE_ae;
    const int auto244992DE_ai = 1;

    // Variable Initialization
    lv_count = 1;

    // Implementation
    if ((GameGetMissionTime() < libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player])) {
        return ;
    }

    libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player] = (GameGetMissionTime() + 5.0);
    AIClearStock(lp_player);
    libCOMI_gf_CM_CoopAI_Upgrades(lp_player);
    AISetStockUnitNext(lp_player, libCOMI_gf_DifficultyValueInt2(2, 2, 4, 6, 6, 0, 0), libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Worker, lp_player), false);
    if ((libCOMI_gv_cM_CoopAI_AIDetection_Build == true)) {
        AISetStockUnitNext(lp_player, libCOMI_gf_DifficultyValueInt2(2, 0, 2, 2, 2, 0, 0), libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Detector, lp_player), false);
    }

    lv_unitCat = UserDataGetUserInstance("Compositions", libCOMI_gf_GetCoopAIPersonality(lp_player), "unitCategories", 1);
    auto244992DE_ae = UserDataFieldValueCount("Factions", "ZZ_StockUnit");
    lv_i = 1;
    for ( ; ( (auto244992DE_ai >= 0 && lv_i <= auto244992DE_ae) || (auto244992DE_ai < 0 && lv_i >= auto244992DE_ae) ) ; lv_i += auto244992DE_ai ) {
        lv_unitIter = UserDataGetUnit("Factions", lv_unitCat, "ZZ_StockUnit", lv_i);
        if ((lv_unitIter != null)) {
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount1", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount2", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount3", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount4", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount4", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount4", lv_i)), lv_unitIter);
        }
        else {
            break;
        }
    }
    AIEnableStock(lp_player);
}

bool libCOMI_gf_AISuspectDetectionDanger (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return AIDefaultSuspectDetectionDanger(lp_player);
}

trigger auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player;

void libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger (int lp_player) {
    auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger_lp_player;

    // Automatic Variable Declarations
    // Implementation
    Wait(2.0, c_timeAI);
    AIAddDetectionDangerCampaignUnits(lp_player);
    return true;
}

void libCOMI_gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits) {
    // Variable Declarations
    point lv_moveTo;
    point lv_moveToA;
    point lv_moveToB;
    unitgroup lv_enemies;

    // Automatic Variable Declarations
    int auto9F420C8F_val;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupFilterRegion(UnitGroupFilterPlane(lp_nearbyUnits, c_planeGround, 0), RegionCircle(UnitGetPosition(lp_diamondback), 6.2), 0);
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) >= 1)) {
        lv_moveTo = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)));
        if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveTo) >= 1000)) {
            lv_moveToA = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) + 45.0));
            lv_moveToB = PointWithOffsetPolar(UnitGetPosition(lp_diamondback), 5.0, (AngleBetweenPoints(UnitGroupCenterOfGroup(lv_enemies), UnitGetPosition(lp_diamondback)) - 45.0));
            if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000) && (PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                auto9F420C8F_val = RandomInt(1, 2);
                if (auto9F420C8F_val == 1) {
                    lv_moveTo = lv_moveToA;
                }
                else if (auto9F420C8F_val == 2) {
                    lv_moveTo = lv_moveToB;
                }
                else {
                }
            }
            else {
                if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToA) < 1000)) {
                    lv_moveTo = lv_moveToA;
                }
                else {
                    if ((PointPathingCost(UnitGetPosition(lp_diamondback), lv_moveToB) < 1000)) {
                        lv_moveTo = lv_moveToB;
                    }
                    else {
                        lv_moveTo = null;
                    }
                }
            }
        }

        if ((lv_moveTo != null)) {
            UnitIssueOrder(lp_diamondback, OrderTargetingPoint(AbilityCommand("move", 0), lv_moveTo), c_orderQueueReplace);
        }

        Wait(1.5, c_timeAI);
        AISetUnitScriptControlled(lp_diamondback, false);
    }

}

void libCOMI_gf_AIHavoc (int lp_player, unit lp_havoc, unitgroup lp_scan_group) {
    // Automatic Variable Declarations
    // Implementation
        int player = lp_player;
        unit havoc = lp_havoc;
        unitgroup scan_group = lp_scan_group;
        const fixed c_forceFieldMeleeRange      = 1.5;
        const fixed c_forceFieldRadius          = 2.0;
        const fixed c_forceFieldRange           = 8.0;
        const fixed c_forceFieldFriendRange     = 9.0;
        order force_field_order = AICreateOrder(player, "ForceFieldMonitor", 0);
        point havoc_position = UnitGetPosition(havoc);
        aifilter filter_ai;
        unitgroup ground_enemies;
        unitgroup melee_enemy_group;
        unitgroup range_enemy_group;
        unitfilter filter_unit;
        unitgroup friendly_group;
        int friendly_count = 0;
        unit friendly_unit;
        int friendly_vitality = 0;
        bool friendly_has_melee = false;
        int enemy_count = 0;
        unit enemy_unit;
        point enemy_position;
        fixed enemy_distance;
        int best_priority = 0;
        point best_enemy_position = null;
        point best_friend_position = null;
        unit best_target_unit = null;
        point force_field_target = null;
        // Do not proceed if the order is invalid for some reason
        if (!UnitOrderIsValid(havoc, force_field_order)) {
            return;
        }
        // Filter out air units
        filter_ai = AIFilter(player);
        AISetFilterPlane(filter_ai, c_planeGround);
        AISetFilterCanAttackAlly(filter_ai, c_groundAlliesNearby, false);
        ground_enemies = AIGetFilterGroup(filter_ai, scan_group);
        // Is there a threat in the area
        enemy_count = UnitGroupCount(ground_enemies, c_unitCountAll);
        if (enemy_count <= 0) {
            return;
        }
        // Get a list of only melee enemies
        filter_ai = AIFilter(player);
        AISetFilterMelee(filter_ai, c_onlyMelee);
        melee_enemy_group = AIGetFilterGroup(filter_ai, ground_enemies);
        // Setup a friendly filter
        filter_unit = UnitFilter(0,0,0,0);
        UnitFilterSetState(filter_unit, c_targetFilterUncommandable,             c_unitFilterExcluded);
        UnitFilterSetState(filter_unit, c_targetFilterWorker,                    c_unitFilterExcluded);
        UnitFilterSetState(filter_unit, c_targetFilterUnderConstruction,         c_unitFilterExcluded);
        UnitFilterSetState(filter_unit, c_targetFilterStructure,                 c_unitFilterExcluded);
        // *** Scan the area for the following, set priority unit when found *** (highest first)
        // Priority 4: Melee enemy close to me
        // Priority 3: A friendly unit close to death, who has a melee enemy close by
        // Priority 2: A friendly ranged unit who has a melee enemy close by
        // Priority 1: Large clump of enemies (if we have extra energy)
        //
        // First check only melee enemies
        enemy_count = UnitGroupCount(melee_enemy_group, c_unitCountAll);
        while (enemy_count > 0) {
            enemy_unit = UnitGroupUnit(melee_enemy_group, enemy_count);
            enemy_count = enemy_count - 1;
            enemy_position = UnitGetPosition(enemy_unit);
            enemy_distance = DistanceBetweenPoints(havoc_position, enemy_position);
            if (enemy_distance <= c_forceFieldMeleeRange) {
                best_target_unit = enemy_unit;
                best_enemy_position = enemy_position;
                best_friend_position = havoc_position;
                best_priority = 4;
                break;
            }
            friendly_group = UnitGroupAlliance(player, c_unitAllianceAlly, RegionCircle(enemy_position, c_forceFieldMeleeRange), filter_unit, c_noMaxCount);
            friendly_has_melee = AIUnitGroupHasMelee(friendly_group);
            friendly_count = UnitGroupCount(friendly_group, c_unitCountAll);
            while (friendly_count > 0) {
                friendly_unit = UnitGroupUnit(friendly_group, friendly_count);
                friendly_count = friendly_count - 1;
                friendly_vitality = UnitGetPropertyInt(friendly_unit, c_unitPropVitalityPercent, c_unitPropCurrent);
                if (friendly_vitality < 20) {
                    best_target_unit = enemy_unit;
                    best_enemy_position = enemy_position;
                    best_friend_position = UnitGetPosition(friendly_unit);
                    best_priority = 3;
                    break;
                }
                else if (!friendly_has_melee) {
                    best_target_unit = enemy_unit;
                    best_enemy_position = enemy_position;
                    best_friend_position = UnitGetPosition(friendly_unit);
                    best_priority = 2;
                }
            }
        }
        if (best_priority == 0) {
            // no dangerous melee units found, split large ranged groups
            // filter only ranged units
            filter_ai = AIFilter(player);
            AISetFilterMelee(filter_ai, c_onlyRanged);
            range_enemy_group = AIGetFilterGroup(filter_ai, ground_enemies);
            // see if there is a large group nearby to split
            force_field_target = AIBestTargetPoint(
                range_enemy_group,
                6, // min hits
                1, // damage base
                6.0, // min score
                c_forceFieldRadius,
                UnitGetPosition(havoc),
                c_forceFieldRange,
                c_unitAttributeNone
            );
            if (force_field_target == null) {
                return;
            }
        }
        else {
            // get a point a bit in front of the enemy to shove him away
            enemy_distance = DistanceBetweenPoints(best_friend_position, best_enemy_position);
            if (enemy_distance < 2.0) {
                force_field_target = PointAlongLine(best_friend_position, best_enemy_position, enemy_distance/2.0);
            } else {
                force_field_target = PointAlongLine(best_friend_position, best_enemy_position, enemy_distance - 1.0);
            }
        }
        OrderSetTargetPoint(force_field_order, force_field_target);
        if (!UnitOrderIsValid(havoc, force_field_order)) {
            return;
        }
        if (UnitGroupCount(AIFindUnits(player, "ForceField", force_field_target, 0.5, 1), c_unitCountAlive) > 0) {
            return;
        }
        AICast(havoc, force_field_order, c_noMarker, c_castHold);
}

void libCOMI_gf_AIAscendant (int lp_player, unit lp_ascendant, unitgroup lp_scan_group) {
    // Automatic Variable Declarations
    // Implementation
        
        int player = lp_player;
        unit ascendant = lp_ascendant;
        unitgroup scan_group = lp_scan_group;
        const int PsiOrbCooldownId = 0;
        unitgroup enemies = UnitGroupFilterAlliance(scan_group, player, c_unitAllianceEnemy, 1);
        if (UnitGroupCount(enemies, c_unitCountAlive) == 0) {
            return;
        }
        if (AITactCooldownAllow(ascendant, PsiOrbCooldownId)) {
            // Cast Psi Orb
            if (AIEvalTacticalData(ascendant, "AscendantPsiOrb")) {
                AISetCooldown(ascendant, PsiOrbCooldownId, 5.0);
                return;
            }
        }
        //  If we already have a psi orb order, ignore any new orders since psi orb is more important.
        //  If we already have a Mind Blast order, ignore any new Mind Blast orders.
        if (UnitOrderHasAbil(ascendant, "VoidHighTemplarMindBlast") || UnitOrderHasAbil(ascendant, "VoidHighTemplarPsiOrb")) {
            return;
        }
        // Cast Mind Blast
        AIEvalTacticalData(ascendant, "AscendantMindBlast");
}

void libCOMI_gf_CM_AIThinkCoop (int lp_player) {
    // Variable Declarations
    int lv_setupNextAttackWave;
    int lv_count;
    string lv_unitType;
    int lv_emptyWaveIndex;
    int lv_attackWaveIndex;
    wave lv_wave;
    int lv_startingTechStockIter;
    string lv_startingTechStockUnit;
    int lv_i;
    string lv_unitIter;
    string lv_unitCat;

    // Automatic Variable Declarations
    int auto9E8EB7BB_ae;
    const int auto9E8EB7BB_ai = 1;

    // Variable Initialization
    lv_count = 1;

    // Implementation
    if ((PlayerScoreValueGetAsInt(lp_player, "UnitsActiveCount") <= 5)) {
        libCOMI_gv_cM_CoopAIPlayer_IsAlive[lp_player] = false;
    }

    if ((GameGetMissionTime() < libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player])) {
        return ;
    }

    libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate[lp_player] = (GameGetMissionTime() + 5.0);
    AIClearStock(lp_player);
    libCOMI_gf_CM_CoopAI_Upgrades(lp_player);
    AISetStockUnitNext(lp_player, libCOMI_gf_DifficultyValueInt2(2, 2, 4, 6, 6, 0, 0), libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Worker, lp_player), false);
    AISetStockUnitNext(lp_player, libCOMI_gf_DifficultyValueInt2(2, 2, 2, 2, 2, 0, 0), libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_StructureRefinery, lp_player), false);
    AISetStockUnitNext(lp_player, libCOMI_gf_DifficultyValueInt2(2, 1, 1, 1, 1, 0, 0), libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_StructureMain, lp_player), false);
    if ((libCOMI_gv_cM_CoopAI_AIDetection_Build == true)) {
        AISetStockUnitNext(lp_player, libCOMI_gf_DifficultyValueInt2(2, 0, 2, 2, 2, 0, 0), libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Detector, lp_player), false);
    }

    lv_unitCat = UserDataGetUserInstance("Compositions", libCOMI_gf_GetCoopAIPersonality(lp_player), "unitCategories", 1);
    auto9E8EB7BB_ae = UserDataFieldValueCount("Factions", "ZZ_StockUnit");
    lv_i = 1;
    for ( ; ( (auto9E8EB7BB_ai >= 0 && lv_i <= auto9E8EB7BB_ae) || (auto9E8EB7BB_ai < 0 && lv_i >= auto9E8EB7BB_ae) ) ; lv_i += auto9E8EB7BB_ai ) {
        lv_unitIter = UserDataGetUnit("Factions", lv_unitCat, "ZZ_StockUnit", lv_i);
        if ((lv_unitIter != null)) {
            AISetStock(lp_player, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount1", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount2", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount3", lv_i), UserDataGetInt("Factions", lv_unitCat, "ZZ_StockCount4", lv_i), 3, 4), lv_unitIter);
        }
        else {
            break;
        }
    }
    AIEnableStock(lp_player);
}

void libCOMI_gf_TacticalAIFilterSortByLife (aifilter lp_filter, fixed lp_damage, fixed lp_distance) {
    // Automatic Variable Declarations
    // Implementation
    AISetFilterLifeSortReference(lp_filter, lp_damage, lp_distance);
}

string libCOMI_gf_CC_AIPersonalityRace (string lp_personality) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Compositions", lp_personality, "X_Race", 1);
}

string libCOMI_gf_CM_CoopAIPersonality () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_CommanderShared;
}

void libCOMI_gf_CM_CoopAI_Set_EnemyPlayer (int lp_aIPlayer, int lp_targetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_Enemy[lp_aIPlayer] = lp_targetPlayer;
}

int libCOMI_gf_CM_CoopAI_Get_EnemyPlayer (int lp_aIPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_Enemy[lp_aIPlayer];
}

int libCOMI_gf_CM_CoopAI_WaveProp_Get_Retreat (int lp_player, wave lp_wave) {
    // Variable Declarations
    int lv_waveIter;

    // Automatic Variable Declarations
    int auto9BA0C33D_ae;
    const int auto9BA0C33D_ai = 1;

    // Variable Initialization

    // Implementation
    auto9BA0C33D_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
    lv_waveIter = 0;
    for ( ; ( (auto9BA0C33D_ai >= 0 && lv_waveIter <= auto9BA0C33D_ae) || (auto9BA0C33D_ai < 0 && lv_waveIter >= auto9BA0C33D_ae) ) ; lv_waveIter += auto9BA0C33D_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lp_player][lv_waveIter] == lp_wave)) {
            return libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lp_player][lv_waveIter];
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_0F200D4F"), true);
    return 0;
}

void libCOMI_gf_CM_CoopAI_Set_TargetOfAttackWaves (int lp_aIPlayer, wavetarget lp_waveTarget) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[lp_aIPlayer] = lp_waveTarget;
}

wavetarget libCOMI_gf_CM_CoopAI_Get_TargetOfAttackWaves (int lp_aIPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves[lp_aIPlayer];
}

int libCOMI_gf_CM_CoopAIPersonalityUniqueIndex (string lp_personality) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Compositions", lp_personality, "X_UniqueIndex", 1);
}

bool libCOMI_gf_CM_CoopAI_RandomMapInitAllowed (string lp_aIPersonality, string lp_aIRace) {
    // Automatic Variable Declarations
    // Implementation
    return ((UserDataGetGameLink("Compositions", lp_aIPersonality, "X_Race", 1) == lp_aIRace) && (UserDataGetInt("Compositions", lp_aIPersonality, "X_RandomMapInitAllowed", 1) != 0));
}

void libCOMI_gf_StartCoopAI (int lp_player, int lp_aIPlayerEnemy) {
    // Variable Declarations
    string lv_aIPlayerRace;
    unitgroup lv_playerPreplacedUnits;
    unit lv_indexUnit;
    string lv_unitRace;
    int lv_aIPlayerRaceCompositionsCount;
    string lv_aIPersonality;
    int lv_commanderPlayer;

    // Automatic Variable Declarations
    string autoD30B3B6A_val;
    int auto887DFF49_ai;
    int auto887DFF49_ae;

    // Variable Initialization
    lv_aIPlayerRace = PlayerRace(lp_player);
    lv_playerPreplacedUnits = UnitGroupEmpty();

    // Implementation
    if ((PlayerType(lp_aIPlayerEnemy) == c_playerTypeNone)) {
        libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_player, PlayerGroupPlayer(libCOMI_gf_HumanPlayers(), 1));
    }
    else {
        libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_player, lp_aIPlayerEnemy);
    }
    AICampaignStart(lp_player);
    VisRevealArea(lp_player, RegionEntireMap(), 0.1, false);
    libCOMI_gf_SetCoopAIWaveTarget(lp_player, AIWaveTargetPlayer(PlayerGroupSingle(libCOMI_gf_CM_CoopAI_Get_EnemyPlayer(lp_player))));
    PlayerGroupAdd(libCOMI_gv_cM_CoopAI_Players, lp_player);
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = libARRA_gf_GetPlayerStartPosition(lp_player);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, true);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, true);
    autoD30B3B6A_val = lv_aIPlayerRace;
    if (autoD30B3B6A_val == "Prot") {
        InitProtCounters(lp_player);
    }
    else if (autoD30B3B6A_val == "Terr") {
        InitTerrCounters(lp_player);
        AISetNukeConstants(lp_player);
        AIReqAddSpecialMaker(c_TU_Nuke, c_TB_GhostAcademy, "ArmSiloWithNuke", 0);
    }
    else if (autoD30B3B6A_val == "Zerg") {
        InitZergCounters(lp_player);
        AILimitStockLarva(lp_player, c_ZU_Larva);
        AIReqCountAsBuiltObject(lp_player, c_ZU_Larva);
        AISetCreepBuilding(lp_player, c_ZB_CreepTumor, "ZergBuildingNotOnCreep");
        AISetDefaultArmyUnit(lp_player, c_ZU_Zergling);
        AISetDefaultTownHall(lp_player, c_ZB_Hatchery);
        AIReqAddSpecialMaker( c_ZB_CreepTumorBurrowed, c_ZB_CreepTumor, "BurrowCreepTumorDown", 0);
        AIReqAddSpecialMaker( c_ZB_CreepTumorBurrowed, c_ZU_Queen, c_AB_QueenBuild, 0);
    }
    else {
    }
    AIAddAirDangerCampaignUnits(lp_player);
    if ((libCOMI_gv_cM_CoopAIPlayer_CommanderShared == "None") && (PlayerRetryMutation(1, 0) > 0)) {
        libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = libCOMI_gf_CC_AICommanderByUniqueIndex(PlayerACEnemyWaveType(1));
    }
    else if ((libCOMI_gv_cM_CoopAIPlayer_CommanderShared == "None")) {
        lv_aIPlayerRaceCompositionsCount = 0;
        auto887DFF49_ai = 1;
        auto887DFF49_ae = UserDataInstanceCount("CoopAICommanders")+1;
        while (auto887DFF49_ai < auto887DFF49_ae) {
            lv_aIPersonality = UserDataInstance("CoopAICommanders", auto887DFF49_ai);
            auto887DFF49_ai = auto887DFF49_ai+1;
            if ((libCOMI_gf_CM_CoopAI_RandomMapInitAllowed(lv_aIPersonality, lv_aIPlayerRace) == true)) {
                lv_aIPlayerRaceCompositionsCount += 1;
                if ((RandomInt(1, lv_aIPlayerRaceCompositionsCount) == lv_aIPlayerRaceCompositionsCount)) {
                    libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = lv_aIPersonality;
                }

            }

        }
    }
    else if (true) {
        libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = libCOMI_gf_CM_CoopAIPersonality();
    }
    libCOMI_gf_CM_CoopAI_SetupStartingTech(lp_player);
}

void libCOMI_gf_CM_StartCoopMissionMechanic (int lp_player, string lp_aICommander) {
    // Variable Declarations
    string lv_aIPlayerRace;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player] = lp_aICommander;
    lv_aIPlayerRace = libCOMI_gf_CC_AIPersonalityRace(lp_aICommander);
    PlayerSetRace(lp_player, lv_aIPlayerRace);
    PlayerSetDifficulty(lp_player, libCOMI_gf_GetMissionDifficulty());
    PlayerGroupAdd(libCOMI_gv_cM_CoopAI_Players, lp_player);
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = libARRA_gf_GetPlayerStartPosition(lp_player);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, true);
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, true);
    AIAddDetectionDangerCampaignUnits(lp_player);
    AIAddAirDangerCampaignUnits(lp_player);
    libCOMI_gf_CM_CoopAI_SetupStartingTech(lp_player);
}

void libCOMI_gf_StartCoopMissionMechanicAI (int lp_player, string lp_aICommander) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_StartCoopMissionMechanic(lp_player, lp_aICommander);
}

void libCOMI_gf_SetCoopAIEnemy (int lp_coopAIPlayer, int lp_humanTargetPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAI_Set_EnemyPlayer(lp_coopAIPlayer, lp_humanTargetPlayer);
}

void libCOMI_gf_CM_CoopAI_SetupStartingTech (int lp_player) {
    // Variable Declarations
    string lv_unitToCreate;
    int lv_unitCreateCount;
    int lv_unitCreateIter;
    int lv_playerOwnedCount;
    int lv_iterUnitCreate;
    point lv_createPosition;

    // Automatic Variable Declarations
    int autoBC0EE9F6_ae;
    const int autoBC0EE9F6_ai = 1;
    int autoB7BAE201_ae;
    const int autoB7BAE201_ai = 1;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 1) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player) == 2))) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("SiegeMode", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("MorphToSwarmHostBurrowedMP", 0), false);
        TechTreeUpgradeAddLevel(lp_player, "SwarmHostFakeWeapon", 1);
    }
    else {
        TechTreeUpgradeAddLevel(lp_player, "CausticSpray", 1);
    }
    TechTreeUpgradeAddLevel(lp_player, "CoopAIReaperCost", 1);
    TechTreeUpgradeAddLevel(lp_player, "CoopAIMutaliskCost", 1);
    autoBC0EE9F6_ae = UserDataFieldValueCount("Compositions", "X_StartingTech");
    lv_unitCreateIter = 1;
    for ( ; ( (autoBC0EE9F6_ai >= 0 && lv_unitCreateIter <= autoBC0EE9F6_ae) || (autoBC0EE9F6_ai < 0 && lv_unitCreateIter >= autoBC0EE9F6_ae) ) ; lv_unitCreateIter += autoBC0EE9F6_ai ) {
        lv_unitToCreate = UserDataGetUnit("Compositions", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "X_StartingTech", lv_unitCreateIter);
        if ((lv_unitToCreate == null)) {
            continue;
        }

        lv_unitCreateCount = UserDataGetInt("Compositions", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "X_StartingTechCount", lv_unitCreateIter);
        lv_playerOwnedCount = UnitGroupCount(UnitGroup(lv_unitToCreate, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        autoB7BAE201_ae = (lv_unitCreateCount - lv_playerOwnedCount);
        lv_iterUnitCreate = 1;
        for ( ; ( (autoB7BAE201_ai >= 0 && lv_iterUnitCreate <= autoB7BAE201_ae) || (autoB7BAE201_ai < 0 && lv_iterUnitCreate >= autoB7BAE201_ae) ) ; lv_iterUnitCreate += autoB7BAE201_ai ) {
            if ((UnitTypeTestAttribute(lv_unitToCreate, c_unitAttributeStructure) == true)) {
                lv_createPosition = AIGetBuildingPlacement(lp_player, UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), lv_unitToCreate, -1);
                if ((lv_createPosition == null)) {
                    lv_createPosition = UnitTypePlacementTestsFromPoint(lv_unitToCreate, lp_player, UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 0.0, c_placementTestCreepMask | c_placementTestPowerMask | c_placementTestFogMask | c_placementTestIgnoreBlockersMask | c_placementTestIgnoreInvisibleMask | c_placementTestZoneMask | c_placementTestCliffMask | c_placementTestDensityMask);
                }
                else {
                    lv_createPosition = RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)), 10.0));
                }
            }
            else {
                lv_createPosition = AIGetGatherDefLocation(lp_player, -1);
            }
            UnitCreate(1, lv_unitToCreate, 0, lp_player, lv_createPosition, libNtve_gf_RandomAngle());
        }
    }
}

void libCOMI_gf_SetCoopAIAttackGroupSpawnPoint (int lp_player, point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player] = lp_spawnPoint;
}

trigger auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger = null;
int auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player;
string auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType;
point auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint;

void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn (int lp_player, string lp_unitType, point lp_warpInPoint) {
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType = lp_unitType;
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint = lp_warpInPoint;

    if (auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_player;
    string lp_unitType = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_unitType;
    point lp_warpInPoint = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn_lp_warpInPoint;

    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_unitType, c_unitCreateIgnorePlacement, lp_player, lp_warpInPoint, libNtve_gf_RandomAngle());
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    UnitAbilityEnable(UnitLastCreated(), "move", false);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(1.0, 2.0));
    UnitBehaviorAdd(UnitLastCreated(), "ProtossGenericWarpInOut", UnitLastCreated(), 1);
    Wait(2.0, c_timeAI);
    UnitBehaviorRemove(UnitLastCreated(), "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(1.0, 0.0));
    UnitAbilityEnable(UnitLastCreated(), "attack", true);
    UnitAbilityEnable(UnitLastCreated(), "move", true);
    return true;
}

int libCOMI_gf_IntegerAsTechBucket (int lp_tech) {
    // Variable Declarations
    int lv_tierIndex;

    // Automatic Variable Declarations
    int autoA37B5DFA_val;

    // Variable Initialization

    // Implementation
    autoA37B5DFA_val = lp_tech;
    if (autoA37B5DFA_val == 1) {
        return libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (autoA37B5DFA_val == 2) {
        return libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (autoA37B5DFA_val == 3) {
        return libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (autoA37B5DFA_val == 4) {
        return libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (autoA37B5DFA_val == 5) {
        return libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (autoA37B5DFA_val == 6) {
        return libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else if (autoA37B5DFA_val == 7) {
        return libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    else if (autoA37B5DFA_val == 10) {
        return libCOMI_ge_CoopAITechLevelBuckets_TechLevel10;
    }
    else {
        return libCOMI_gf_IntegerAsTechBucket(RandomInt(1, 7));
    }
}

int libCOMI_gf_IntegerAsResourceBucket (int lp_reesourcesSize) {
    // Variable Declarations
    int lv_tierIndex;

    // Automatic Variable Declarations
    int autoB5DE453E_val;

    // Variable Initialization

    // Implementation
    autoB5DE453E_val = lp_reesourcesSize;
    if (autoB5DE453E_val == 1) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
    else if (autoB5DE453E_val == 2) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    }
    else if (autoB5DE453E_val == 3) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    }
    else if (autoB5DE453E_val == 4) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    }
    else if (autoB5DE453E_val == 5) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    }
    else if (autoB5DE453E_val == 6) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    }
    else if (autoB5DE453E_val == 7) {
        return libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    }
    else {
        return libCOMI_gf_IntegerAsResourceBucket(RandomInt(1, 7));
    }
}

int libCOMI_gf_TechAsInteger (int lp_techLevel) {
    // Variable Declarations
    int lv_tierIndex;

    // Automatic Variable Declarations
    int autoD4BE8847_val;

    // Variable Initialization

    // Implementation
    autoD4BE8847_val = lp_techLevel;
    if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets__1Early) {
        lv_tierIndex = 1;
    }
    else if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid) {
        lv_tierIndex = 2;
    }
    else if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets__3Mid) {
        lv_tierIndex = 3;
    }
    else if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets__4LateMid) {
        lv_tierIndex = 4;
    }
    else if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets__5Late) {
        lv_tierIndex = 5;
    }
    else if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets_TechLevel06) {
        lv_tierIndex = 6;
    }
    else if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets_TechLevel07) {
        lv_tierIndex = 7;
    }
    else if (autoD4BE8847_val == libCOMI_ge_CoopAITechLevelBuckets_TechLevel10) {
        lv_tierIndex = 10;
    }
    else {
        lv_tierIndex = 0;
    }
    return lv_tierIndex;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Terran (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    // Variable Declarations
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unitgroup lv_airGroup;

    // Automatic Variable Declarations
    unitgroup auto4359500B_g;
    int auto4359500B_u;
    unitgroup auto5C85C125_g;
    int auto5C85C125_u;
    int auto5BC7054E_ae;
    const int auto5BC7054E_ai = 1;
    fixed auto9E33C5DC_at;

    // Variable Initialization
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    auto4359500B_g = lp_attackGroup;
    auto4359500B_u = UnitGroupCount(auto4359500B_g, c_unitCountAll);
    for (;; auto4359500B_u -= 1) {
        lv_dropGroupUnitIter = UnitGroupUnitFromEnd(auto4359500B_g, auto4359500B_u);
        if (lv_dropGroupUnitIter == null) { break; }
        if ((UnitFilterMatch(lv_dropGroupUnitIter, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UnitGroupRemove(lp_attackGroup, lv_dropGroupUnitIter);
            UnitGroupAdd(lv_airGroup, lv_dropGroupUnitIter);
        }

    }
    auto5C85C125_g = lv_airGroup;
    auto5C85C125_u = UnitGroupCount(auto5C85C125_g, c_unitCountAll);
    for (;; auto5C85C125_u -= 1) {
        lv_dropGroupUnitIter = UnitGroupUnitFromEnd(auto5C85C125_g, auto5C85C125_u);
        if (lv_dropGroupUnitIter == null) { break; }
        UnitSetPosition(lv_dropGroupUnitIter, lp_dropLocation, false);
        UnitSetHeight(lv_dropGroupUnitIter, 16.0, 0.0);
        UnitSetHeight(lv_dropGroupUnitIter, UnitTypeGetProperty(UnitGetType(lv_dropGroupUnitIter), c_unitPropHeight), 3.0);
    }
    auto5BC7054E_ae = UnitGroupCount(lp_attackGroup, c_unitCountAlive);
    lv_dropGroupIter = 1;
    for ( ; ( (auto5BC7054E_ai >= 0 && lv_dropGroupIter <= auto5BC7054E_ae) || (auto5BC7054E_ai < 0 && lv_dropGroupIter >= auto5BC7054E_ae) ) ; lv_dropGroupIter += auto5BC7054E_ai ) {
        lv_dropGroupUnitIter = UnitGroupUnit(lp_attackGroup, lv_dropGroupIter);
        UnitGroupAdd(lv_dropGroup, lv_dropGroupUnitIter);
        if (((UnitGroupCount(lv_dropGroup, c_unitCountAlive) >= 4) || (lv_dropGroupIter >= UnitGroupCount(lp_attackGroup, c_unitCountAlive)))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
            lv_dropGroup = UnitGroupEmpty();
        }

    }
    UnitGroupAddUnitGroup(lp_attackGroup, lv_airGroup);
    auto9E33C5DC_at = 0;
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) && auto9E33C5DC_at <= 10.0) {
        Wait(0.2, c_timeAI);
        auto9E33C5DC_at = auto9E33C5DC_at + 0.2;
    }
    return lp_attackGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Zerg (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    // Variable Declarations
    unit lv_indexAirUnit;
    unit lv_indexGroundUnit;
    actor lv_nydus;
    bool lv_playBirthAnim;
    unitgroup lv_groundUnits;
    unitgroup lv_airUnits;
    unitgroup lv_dropGroup;
    fixed lv_dropSupply;

    // Automatic Variable Declarations
    unitgroup auto833705E2_g;
    int auto833705E2_u;
    unitgroup auto060D894F_g;
    int auto060D894F_u;
    fixed autoFFDE2D15_at;

    // Variable Initialization
    lv_groundUnits = UnitGroupEmpty();
    lv_airUnits = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_airUnits, UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter((1 << c_targetFilterAir), 0, 0, 0), 0));
    auto833705E2_g = lv_airUnits;
    auto833705E2_u = UnitGroupCount(auto833705E2_g, c_unitCountAll);
    for (;; auto833705E2_u -= 1) {
        lv_indexAirUnit = UnitGroupUnitFromEnd(auto833705E2_g, auto833705E2_u);
        if (lv_indexAirUnit == null) { break; }
        UnitSetPosition(lv_indexAirUnit, lp_dropLocation, false);
        UnitSetHeight(lv_indexAirUnit, 16.0, 0.0);
        UnitSetHeight(lv_indexAirUnit, UnitTypeGetProperty(UnitGetType(lv_indexAirUnit), c_unitPropHeight), 3.0);
    }
    UnitGroupAddUnitGroup(lv_groundUnits, UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, 0, (1 << c_targetFilterAir), 0), 0));
    auto060D894F_g = lv_groundUnits;
    auto060D894F_u = UnitGroupCount(auto060D894F_g, c_unitCountAll);
    for (;; auto060D894F_u -= 1) {
        lv_indexGroundUnit = UnitGroupUnitFromEnd(auto060D894F_g, auto060D894F_u);
        if (lv_indexGroundUnit == null) { break; }
        UnitGroupAdd(lv_dropGroup, lv_indexGroundUnit);
        lv_dropSupply += MaxF(0.5, UnitTypeGetProperty(UnitGetType(lv_indexGroundUnit), c_unitPropSuppliesUsed));
        if (((lv_dropSupply >= 8.0) || (UnitGroupCount(lv_dropGroup, c_unitCountAlive) >= 10))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
            lv_dropGroup = UnitGroupEmpty();
            lv_dropSupply = 0.0;
        }

    }
    if ((UnitGroupCount(lv_dropGroup, c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropGroup, false, lp_player);
    }

    autoFFDE2D15_at = 0;
    while (!((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lp_attackGroup, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) == 0)) && autoFFDE2D15_at <= 10.0) {
        Wait(0.2, c_timeAI);
        autoFFDE2D15_at = autoFFDE2D15_at + 0.2;
    }
    return lp_attackGroup;
}

unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Protoss (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    // Variable Declarations
    unit lv_warpInIter;
    point lv_origin;

    // Automatic Variable Declarations
    unitgroup autoAA4C4434_g;
    int autoAA4C4434_u;

    // Variable Initialization

    // Implementation
    lv_origin = UnitGroupCenterOfGroup(lp_dropGroup);
    autoAA4C4434_g = lp_dropGroup;
    autoAA4C4434_u = UnitGroupCount(autoAA4C4434_g, c_unitCountAll);
    for (;; autoAA4C4434_u -= 1) {
        lv_warpInIter = UnitGroupUnitFromEnd(autoAA4C4434_g, autoAA4C4434_u);
        if (lv_warpInIter == null) { break; }
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_warpInIter);
        UnitSetPosition(lv_warpInIter, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_warpInIter)), DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_warpInIter))), false);
    }
    Wait(2.0, c_timeAI);
    return lp_dropGroup;
}

trigger auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger = null;
unit auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit;

void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2 (unit lp_unit) {
    auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2_lp_unit;

    // Automatic Variable Declarations
    // Implementation
    UnitAbilityEnable(lp_unit, "attack", false);
    UnitAbilityEnable(lp_unit, "move", false);
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(1.0, 2.0));
    UnitBehaviorAdd(lp_unit, "ProtossGenericWarpInOut", lp_unit, 1);
    Wait(2.0, c_timeGame);
    UnitBehaviorRemove(lp_unit, "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_SetOpacity(1.0, 0.0));
    UnitAbilityEnable(lp_unit, "attack", true);
    UnitAbilityEnable(lp_unit, "move", true);
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger = null;
unit auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon;
unit auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate;

void libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup (unit lp_pylon, unit lp_superWarpGate) {
    auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon = lp_pylon;
    auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate = lp_superWarpGate;

    if (auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pylon = auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_pylon;
    unit lp_superWarpGate = auto_libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup_lp_superWarpGate;

    // Automatic Variable Declarations
    // Implementation
    Wait(15.0, c_timeAI);
    UnitRemove(lp_pylon);
    UnitRemove(lp_superWarpGate);
    return true;
}

void libCOMI_gf_DropPodWarpInUnitGroup (unitgroup lp_dropPodUnits, point lp_dropLocation) {
    // Variable Declarations
    unitgroup lv_dropGroupZerg;
    unitgroup lv_dropGroupProtoss;
    unitgroup lv_dropGroupTerran;
    unit lv_dropUnit;
    playergroup lv_attackingPlayers;
    int lv_attackPlayerIter;
    bool lv_dropComplete;
    string lv_composition;

    // Automatic Variable Declarations
    unitgroup auto55FF56CC_g;
    int auto55FF56CC_u;
    string autoD14807CD_val;
    string auto2C8C871D_val;
    playergroup autoC08EEF33_g;
    playergroup auto18A3184F_g;
    unitgroup autoC809B237_g;
    int autoC809B237_u;

    // Variable Initialization
    lv_dropGroupZerg = UnitGroupEmpty();
    lv_dropGroupProtoss = UnitGroupEmpty();
    lv_dropGroupTerran = UnitGroupEmpty();
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    auto55FF56CC_g = lp_dropPodUnits;
    auto55FF56CC_u = UnitGroupCount(auto55FF56CC_g, c_unitCountAll);
    for (;; auto55FF56CC_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto55FF56CC_g, auto55FF56CC_u);
        if (lv_dropUnit == null) { break; }
        PlayerGroupAdd(lv_attackingPlayers, UnitGetOwner(lv_dropUnit));
        autoD14807CD_val = libARRA_gf_GetUnitRace(lv_dropUnit);
        if (autoD14807CD_val == "Terr") {
            UnitGroupAdd(lv_dropGroupTerran, lv_dropUnit);
        }
        else if (autoD14807CD_val == "Zerg") {
            UnitGroupAdd(lv_dropGroupZerg, lv_dropUnit);
        }
        else if (autoD14807CD_val == "Prot") {
            UnitGroupAdd(lv_dropGroupProtoss, lv_dropUnit);
        }
        else {
            lv_composition = libCOMI_gv_cM_CoopAIPlayer_Commander[UnitGetOwner(lv_dropUnit)];
            auto2C8C871D_val = UserDataGetGameLink("Factions", UserDataGetUserInstance("Compositions", lv_composition, "Faction", 1), "DropType", 1);
            if (auto2C8C871D_val == "Terr") {
                UnitGroupAdd(lv_dropGroupTerran, lv_dropUnit);
            }
            else if (auto2C8C871D_val == "Zerg") {
                UnitGroupAdd(lv_dropGroupZerg, lv_dropUnit);
            }
            else {
                UnitGroupAdd(lv_dropGroupProtoss, lv_dropUnit);
            }
        }
    }
    if ((UnitGroupCount(lv_dropGroupTerran, c_unitCountAlive) > 0)) {
        autoC08EEF33_g = lv_attackingPlayers;
        lv_attackPlayerIter = -1;
        while (true) {
            lv_attackPlayerIter = PlayerGroupNextPlayer(autoC08EEF33_g, lv_attackPlayerIter);
            if (lv_attackPlayerIter < 0) { break; }
            libCOMI_gf_CM_CoopAI_AttackForce_DropTerran(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupTerran, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    if ((UnitGroupCount(lv_dropGroupProtoss, c_unitCountAlive) > 0)) {
        libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss(lv_dropGroupProtoss, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_dropGroupZerg, c_unitCountAlive) > 0)) {
        auto18A3184F_g = lv_attackingPlayers;
        lv_attackPlayerIter = -1;
        while (true) {
            lv_attackPlayerIter = PlayerGroupNextPlayer(auto18A3184F_g, lv_attackPlayerIter);
            if (lv_attackPlayerIter < 0) { break; }
            libCOMI_gf_CM_CoopAI_AttackForce_DropZerg(lv_attackPlayerIter, UnitGroupFilterPlayer(lv_dropGroupZerg, lv_attackPlayerIter, 0), lp_dropLocation);
        }
    }

    while (true) {
        lv_dropComplete = true;
        autoC809B237_g = lp_dropPodUnits;
        autoC809B237_u = UnitGroupCount(autoC809B237_g, c_unitCountAll);
        for (;; autoC809B237_u -= 1) {
            lv_dropUnit = UnitGroupUnitFromEnd(autoC809B237_g, autoC809B237_u);
            if (lv_dropUnit == null) { break; }
            if ((((UnitGroupHasUnit(lv_dropGroupProtoss, lv_dropUnit) == true) && (UnitAbilityCheck(lv_dropUnit, "move", true) == false)) || (((UnitGroupHasUnit(lv_dropGroupTerran, lv_dropUnit) == true) || (UnitGroupHasUnit(lv_dropGroupZerg, lv_dropUnit) == true)) && (libNtve_gf_UnitIsPaused(lv_dropUnit) == true)))) {
                lv_dropComplete = false;
                break;
            }

        }
        if ((lv_dropComplete == true)) {
            return ;
        }

        Wait(0.25, c_timeGame);
    }
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropTerran (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_player;
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropTerran_lp_dropLocation;

    // Variable Declarations
    unit lv_dropUnit;
    int lv_dropGroupIter;
    unitgroup lv_dropPodGroup;
    unitgroup lv_airGroup;

    // Automatic Variable Declarations
    unitgroup autoB1B09026_g;
    int autoB1B09026_u;
    unitgroup autoB34456F6_g;
    int autoB34456F6_u;
    int autoF00F7A8C_ae;
    const int autoF00F7A8C_ai = 1;
    unitgroup auto507559CB_g;
    int auto507559CB_u;

    // Variable Initialization
    lv_dropPodGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    autoB1B09026_g = lp_dropGroup;
    autoB1B09026_u = UnitGroupCount(autoB1B09026_g, c_unitCountAll);
    for (;; autoB1B09026_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(autoB1B09026_g, autoB1B09026_u);
        if (lv_dropUnit == null) { break; }
        if ((UnitFilterMatch(lv_dropUnit, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            UnitGroupRemove(lp_dropGroup, lv_dropUnit);
            UnitGroupAdd(lv_airGroup, lv_dropUnit);
        }

    }
    autoB34456F6_g = lv_airGroup;
    autoB34456F6_u = UnitGroupCount(autoB34456F6_g, c_unitCountAll);
    for (;; autoB34456F6_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(autoB34456F6_g, autoB34456F6_u);
        if (lv_dropUnit == null) { break; }
        UnitSetPosition(lv_dropUnit, RegionRandomPoint(RegionCircle(lp_dropLocation, 6.0)), false);
        UnitSetHeight(lv_dropUnit, 16.0, 0.0);
        UnitSetHeight(lv_dropUnit, UnitTypeGetProperty(UnitGetType(lv_dropUnit), c_unitPropHeight), 3.0);
        UnitAbilityEnable(lv_dropUnit, "move", false);
    }
    autoF00F7A8C_ae = UnitGroupCount(lp_dropGroup, c_unitCountAlive);
    lv_dropGroupIter = 1;
    for ( ; ( (autoF00F7A8C_ai >= 0 && lv_dropGroupIter <= autoF00F7A8C_ae) || (autoF00F7A8C_ai < 0 && lv_dropGroupIter >= autoF00F7A8C_ae) ) ; lv_dropGroupIter += autoF00F7A8C_ai ) {
        lv_dropUnit = UnitGroupUnit(lp_dropGroup, lv_dropGroupIter);
        UnitGroupAdd(lv_dropPodGroup, lv_dropUnit);
        if (((UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) >= 4) || (lv_dropGroupIter >= UnitGroupCount(lp_dropGroup, c_unitCountAlive)))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropPodGroup, false, lp_player);
            lv_dropPodGroup = UnitGroupEmpty();
        }

    }
    Wait(3.0, c_timeGame);
    auto507559CB_g = lv_airGroup;
    auto507559CB_u = UnitGroupCount(auto507559CB_g, c_unitCountAll);
    for (;; auto507559CB_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto507559CB_g, auto507559CB_u);
        if (lv_dropUnit == null) { break; }
        UnitAbilityEnable(lv_dropUnit, "move", true);
    }
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropZerg (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_player;
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropZerg_lp_dropLocation;

    // Variable Declarations
    unit lv_airUnitIter;
    unit lv_dropUnit;
    unitgroup lv_groundUnits;
    unitgroup lv_airGroup;
    unitgroup lv_dropPodGroup;
    fixed lv_dropPodSupply;

    // Automatic Variable Declarations
    unitgroup auto95A2E9D9_g;
    int auto95A2E9D9_u;
    unitgroup auto2020D8C7_g;
    int auto2020D8C7_u;
    unitgroup autoB4130F5B_g;
    int autoB4130F5B_u;

    // Variable Initialization
    lv_groundUnits = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();
    lv_dropPodGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_airGroup, UnitGroupFilter(null, c_playerAny, lp_dropGroup, UnitFilter((1 << c_targetFilterAir), 0, 0, 0), 0));
    auto95A2E9D9_g = lv_airGroup;
    auto95A2E9D9_u = UnitGroupCount(auto95A2E9D9_g, c_unitCountAll);
    for (;; auto95A2E9D9_u -= 1) {
        lv_airUnitIter = UnitGroupUnitFromEnd(auto95A2E9D9_g, auto95A2E9D9_u);
        if (lv_airUnitIter == null) { break; }
        UnitSetPosition(lv_airUnitIter, RegionRandomPoint(RegionCircle(lp_dropLocation, 6.0)), false);
        UnitSetHeight(lv_airUnitIter, 16.0, 0.0);
        UnitSetHeight(lv_airUnitIter, UnitTypeGetProperty(UnitGetType(lv_airUnitIter), c_unitPropHeight), 3.0);
        UnitAbilityEnable(lv_airUnitIter, "move", false);
    }
    UnitGroupAddUnitGroup(lv_groundUnits, UnitGroupFilter(null, c_playerAny, lp_dropGroup, UnitFilter(0, 0, (1 << c_targetFilterAir), 0), 0));
    auto2020D8C7_g = lv_groundUnits;
    auto2020D8C7_u = UnitGroupCount(auto2020D8C7_g, c_unitCountAll);
    for (;; auto2020D8C7_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto2020D8C7_g, auto2020D8C7_u);
        if (lv_dropUnit == null) { break; }
        UnitGroupAdd(lv_dropPodGroup, lv_dropUnit);
        lv_dropPodSupply += MaxF(0.5, UnitTypeGetProperty(UnitGetType(lv_dropUnit), c_unitPropSuppliesUsed));
        if (((lv_dropPodSupply >= 8.0) || (UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) >= 10))) {
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropPodGroup, false, lp_player);
            lv_dropPodGroup = UnitGroupEmpty();
            lv_dropPodSupply = 0.0;
        }

    }
    if ((UnitGroupCount(lv_dropPodGroup, c_unitCountAlive) > 0)) {
        libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Zerg, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, 0.0, 5.0), lv_dropPodGroup, false, lp_player);
    }

    Wait(3.0, c_timeGame);
    autoB4130F5B_g = lv_airGroup;
    autoB4130F5B_u = UnitGroupCount(autoB4130F5B_g, c_unitCountAll);
    for (;; autoB4130F5B_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(autoB4130F5B_g, autoB4130F5B_u);
        if (lv_dropUnit == null) { break; }
        UnitAbilityEnable(lv_dropUnit, "move", true);
    }
    return true;
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger = null;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup;
point auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation;

void libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss (unitgroup lp_dropGroup, point lp_dropLocation) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup = lp_dropGroup;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation = lp_dropLocation;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_dropGroup = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropGroup;
    point lp_dropLocation = auto_libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss_lp_dropLocation;

    // Variable Declarations
    unit lv_dropUnit;
    point lv_origin;

    // Automatic Variable Declarations
    unitgroup auto38195713_g;
    int auto38195713_u;

    // Variable Initialization

    // Implementation
    lv_origin = UnitGroupCenterOfGroup(lp_dropGroup);
    auto38195713_g = lp_dropGroup;
    auto38195713_u = UnitGroupCount(auto38195713_g, c_unitCountAll);
    for (;; auto38195713_u -= 1) {
        lv_dropUnit = UnitGroupUnitFromEnd(auto38195713_g, auto38195713_u);
        if (lv_dropUnit == null) { break; }
        libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(lv_dropUnit);
        UnitSetPosition(lv_dropUnit, libCOMI_gf_CM_NearbyGroundPathablePoint(lp_dropLocation, DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_dropUnit)), DistanceBetweenPoints(lv_origin, UnitGetPosition(lv_dropUnit))), false);
    }
    return true;
}

string libCOMI_gf_CM_CoopAI_AttackForce_ForceName () {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce");
}

string libCOMI_gf_CM_CoopAI_AttackForce_GatherPointName () {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_GatherPoint");
}

unitgroup libCOMI_gf_LastCreatedCoopAttackForce () {
    // Variable Declarations
    unitgroup lv_attackForce;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    lv_attackForce = DataTableGetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName());
    return lv_attackForce;
}

point libCOMI_gf_LastCreatedCoopAttackForceGatherPoint () {
    // Variable Declarations
    point lv_gatherPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_gatherPoint = DataTableGetPoint(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GatherPointName());
    return lv_gatherPoint;
}

unitgroup libCOMI_gf_LastCreatedCoopAttackForceTransports () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAI_AttackForce_Transports;
}

void libCOMI_gf_SendAttackWaveusingCoopAttackForce (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(3, lp_attackForce, libCOMI_gf_LastCreatedCoopAttackForceGatherPoint(), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(4, lp_attackForce, libCOMI_gf_LastCreatedCoopAttackForceGatherPoint(), libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    libCOMI_gf_SendAttackWaveusingCoopAttackForceInternal(lp_attackForce, lp_time, lp_waitDontWait);
}

void libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait, int lp_attackTargetType) {
    // Variable Declarations
    unit lv_attackForceIter;
    playergroup lv_attackingPlayers;
    int lv_playerIter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(3, lp_attackForce, libCOMI_gf_LastCreatedCoopAttackForceGatherPoint(), lp_attackTargetType);
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(4, lp_attackForce, libCOMI_gf_LastCreatedCoopAttackForceGatherPoint(), lp_attackTargetType);
    libCOMI_gf_SendAttackWaveusingCoopAttackForceInternal(lp_attackForce, lp_time, lp_waitDontWait);
}

void libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait, int lp_attackTargetType, point lp_spawnLocation) {
    // Variable Declarations
    unit lv_attackForceIter;
    playergroup lv_attackingPlayers;
    int lv_playerIter;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(3, lp_attackForce, lp_spawnLocation, lp_attackTargetType);
    libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent(4, lp_attackForce, lp_spawnLocation, lp_attackTargetType);
    libCOMI_gf_SendAttackWaveusingCoopAttackForceInternal(lp_attackForce, lp_time, lp_waitDontWait);
}

void libCOMI_gf_SendAttackWaveusingCoopAttackForceInternal (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait) {
    // Variable Declarations
    unit lv_attackForceIter;
    playergroup lv_attackingPlayers;
    int lv_playerIter;

    // Automatic Variable Declarations
    unitgroup auto44C811F5_g;
    int auto44C811F5_u;
    playergroup autoD30D4817_g;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();

    // Implementation
    auto44C811F5_g = lp_attackForce;
    auto44C811F5_u = UnitGroupCount(auto44C811F5_g, c_unitCountAll);
    for (;; auto44C811F5_u -= 1) {
        lv_attackForceIter = UnitGroupUnitFromEnd(auto44C811F5_g, auto44C811F5_u);
        if (lv_attackForceIter == null) { break; }
        PlayerGroupAdd(lv_attackingPlayers, UnitGetOwner(lv_attackForceIter));
    }
    autoD30D4817_g = lv_attackingPlayers;
    lv_playerIter = -1;
    while (true) {
        lv_playerIter = PlayerGroupNextPlayer(autoD30D4817_g, lv_playerIter);
        if (lv_playerIter < 0) { break; }
        libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack(lv_playerIter, UnitGroupFilterPlayer(lp_attackForce, lv_playerIter, 0), lp_time, lp_waitDontWait);
    }
    libCOMI_gf_CM_CoopAI_AttackForce_ClearWaypointList();
    Wait(4.0, c_timeGame);
    libCOMI_gf_AmonPlayersWave(lp_attackForce);
}

trigger auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger = null;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player;
unitgroup auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits;
int auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time;
bool auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait;

void libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack (int lp_player, unitgroup lp_attackingUnits, int lp_time, bool lp_waitDontWait) {
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player = lp_player;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits = lp_attackingUnits;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time = lp_time;
    auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait = lp_waitDontWait;

    if (auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger == null) {
        auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_player;
    unitgroup lp_attackingUnits = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_attackingUnits;
    int lp_time = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_time;
    bool lp_waitDontWait = auto_libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack_lp_waitDontWait;

    // Variable Declarations
    unit lv_attackingUnitIter;
    int lv_wayPointIter;

    // Automatic Variable Declarations
    int autoF3D226E7_ae;
    const int autoF3D226E7_ai = 1;
    unitgroup autoDBAFA17A_g;
    int autoDBAFA17A_u;

    // Variable Initialization

    // Implementation
    AIAttackWaveSetGatherPoint(lp_player, UnitGroupCenterOfGroup(lp_attackingUnits));
    autoF3D226E7_ae = libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal();
    lv_wayPointIter = 1;
    for ( ; ( (autoF3D226E7_ai >= 0 && lv_wayPointIter <= autoF3D226E7_ae) || (autoF3D226E7_ai < 0 && lv_wayPointIter >= autoF3D226E7_ae) ) ; lv_wayPointIter += autoF3D226E7_ai ) {
        if ((libCOMI_gf_CM_CoopAI_AttackForce_GetUseTransport(lv_wayPointIter) == false)) {
            AIAttackWaveAddWaypoint(lp_player, libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint(lv_wayPointIter), false);
        }
        else {
            AIAttackWaveAddWaypoint(lp_player, libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint(lv_wayPointIter), true);
        }
    }
    autoDBAFA17A_g = lp_attackingUnits;
    autoDBAFA17A_u = UnitGroupCount(autoDBAFA17A_g, c_unitCountAll);
    for (;; autoDBAFA17A_u -= 1) {
        lv_attackingUnitIter = UnitGroupUnitFromEnd(autoDBAFA17A_g, autoDBAFA17A_u);
        if (lv_attackingUnitIter == null) { break; }
        AIAttackWaveUseUnit(lp_player, lv_attackingUnitIter);
    }
    AIAttackWaveSend(lp_player, lp_time, lp_waitDontWait);
    return true;
}

void libCOMI_gf_AddAttackForceWaypoint (point lp_waypoint, bool lp_useTransport) {
    // Variable Declarations
    int lv_waypointIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_waypointIndex = (libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal() + 1);
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal(lv_waypointIndex);
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypoint(lp_waypoint, lv_waypointIndex);
    if ((lp_useTransport == false)) {
        DataTableSetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lv_waypointIndex), false);
    }
    else {
        DataTableSetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lv_waypointIndex), true);
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_ClearWaypointList () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal(0);
}

point libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint (int lp_pARAM_AAAAAAAAAA) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointName(lp_pARAM_AAAAAAAAAA));
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypoint (point lp_waypoint, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointName(lp_index), lp_waypoint);
}

string libCOMI_gf_CM_CoopAI_AttackForce_WaypointName (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Waypoint" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName (int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Waypoint_ForceTransport" + IntToString(lp_waypointIndex));
}

bool libCOMI_gf_CM_CoopAI_AttackForce_GetUseTransport (int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetBool(true, libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName(lp_waypointIndex));
}

string libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName () {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_WaypointTotal");
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName());
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal (int lp_waypointIndex) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName(), lp_waypointIndex);
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_Unit_" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_Count_" + IntToString(lp_index));
}

string libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name (int lp_unitTypeIndex) {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_ExcludedPlayers_" + IntToString(lp_unitTypeIndex));
}

string libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name () {
    // Automatic Variable Declarations
    // Implementation
    return ("CoopAI_AttackForce_Wave_UnitTypeTotal");
}

string libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType (int lp_unitTypeIndex) {
    // Variable Declarations
    string lv_unitTypeAsString;
    string lv_unitTypeAsGameLink;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitTypeAsString = "";

    // Implementation
    lv_unitTypeAsString = DataTableGetString(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit(lp_unitTypeIndex));
    lv_unitTypeAsGameLink = (lv_unitTypeAsString);
    return lv_unitTypeAsGameLink;
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex (string lp_unitType) {
    // Variable Declarations
    int lv_unitTypeIter;

    // Automatic Variable Declarations
    int autoCD256A13_ae;
    const int autoCD256A13_ai = 1;

    // Variable Initialization

    // Implementation
    autoCD256A13_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    lv_unitTypeIter = 1;
    for ( ; ( (autoCD256A13_ai >= 0 && lv_unitTypeIter <= autoCD256A13_ae) || (autoCD256A13_ai < 0 && lv_unitTypeIter >= autoCD256A13_ae) ) ; lv_unitTypeIter += autoCD256A13_ai ) {
        if ((libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter) == lp_unitType)) {
            return lv_unitTypeIter;
        }

    }
    return libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable;
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex (string lp_unitType, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit(lp_index), (lp_unitType));
    libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal((libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount() + 1));
}

int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index)) > 0)) {
        return DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index));
    }
    else {
        return libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable;
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount (int lp_index, int lp_count, int lp_relativeAbsolute) {
    // Automatic Variable Declarations
    int auto5A67C010_val;

    // Implementation
    auto5A67C010_val = lp_relativeAbsolute;
    if (auto5A67C010_val == libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative) {
        DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index), (DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index)) + lp_count));
    }
    else if (auto5A67C010_val == libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Absolute) {
        DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count(lp_index), lp_count);
    }
    else {
    }
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetExcludedPlayers (playergroup lp_excludePlayers, string lp_unitType) {
    // Variable Declarations
    int lv_unitTypeIndex;
    playergroup lv_alreadyExcludedPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_alreadyExcludedPlayers = PlayerGroupEmpty();

    // Implementation
    lv_unitTypeIndex = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex(lp_unitType);
    lv_alreadyExcludedPlayers = libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIndex);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lp_excludePlayers, lv_alreadyExcludedPlayers);
    DataTableSetPlayerGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name(lv_unitTypeIndex), lv_alreadyExcludedPlayers);
}

playergroup libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers (int lp_unitTypeIndex) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPlayerGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name(lp_unitTypeIndex));
}

void libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType (string lp_unitType, int lp_count) {
    // Variable Declarations
    int lv_unitTypeWaveIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitTypeWaveIndex = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex(lp_unitType);
    if ((lv_unitTypeWaveIndex != libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable)) {
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeWaveIndex, lp_count, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative);
    }
    else {
        lv_unitTypeWaveIndex = (libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount() + 1);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex(lp_unitType, lv_unitTypeWaveIndex);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeWaveIndex, lp_count, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative);
    }
}

int libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name());
}

void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal (int lp_unitTypeTotal) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name(), lp_unitTypeTotal);
}

void libCOMI_gf_CM_CoopAI_AttackForce_ClearTable () {
    // Variable Declarations
    int lv_unitTypeIndex;

    // Automatic Variable Declarations
    int autoAFA74759_ae;
    const int autoAFA74759_ai = 1;

    // Variable Initialization

    // Implementation
    autoAFA74759_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
    lv_unitTypeIndex = 1;
    for ( ; ( (autoAFA74759_ai >= 0 && lv_unitTypeIndex <= autoAFA74759_ae) || (autoAFA74759_ai < 0 && lv_unitTypeIndex >= autoAFA74759_ae) ) ; lv_unitTypeIndex += autoAFA74759_ai ) {
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount(lv_unitTypeIndex, 0, libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Absolute);
        libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex(null, lv_unitTypeIndex);
    }
    libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal(0);
}

void libCOMI_gf_CM_DropPod_Zerg_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_chosenUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    point lv_dropLocation;
    int lv_moveAttempts;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup auto29D5EF81_g;
    int auto29D5EF81_u;
    unitgroup auto7E0D3E3B_g;
    int auto7E0D3E3B_u;
    const int auto23F26CA9_ae = 100;
    const int auto23F26CA9_ai = 1;

    // Variable Initialization

    // Implementation
    auto29D5EF81_g = lp_units;
    auto29D5EF81_u = UnitGroupCount(auto29D5EF81_g, c_unitCountAll);
    for (;; auto29D5EF81_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto29D5EF81_g, auto29D5EF81_u);
        if (lv_chosenUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_chosenUnit, false);
        libNtve_gf_PauseUnit(lv_chosenUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    Wait(2.5, c_timeGame);
    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    libNtve_gf_CreateUnitsAtPoint2(1, "ZergDropPodCreep", c_unitCreateIgnorePlacement, lp_player, lv_dropPodLocation);
    lv_creep = UnitLastCreated();
    Wait(1.0, c_timeGame);
    lv_angle = 0.0;
    auto7E0D3E3B_g = lp_units;
    auto7E0D3E3B_u = UnitGroupCount(auto7E0D3E3B_g, c_unitCountAll);
    for (;; auto7E0D3E3B_u -= 1) {
        lv_chosenUnit = UnitGroupUnitFromEnd(auto7E0D3E3B_g, auto7E0D3E3B_u);
        if (lv_chosenUnit == null) { break; }
        lv_moveAttempts = 1;
        for ( ; ( (auto23F26CA9_ai >= 0 && lv_moveAttempts <= auto23F26CA9_ae) || (auto23F26CA9_ai < 0 && lv_moveAttempts >= auto23F26CA9_ae) ) ; lv_moveAttempts += auto23F26CA9_ai ) {
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, RandomFixed(0.5, 2.0), lv_angle);
            lv_angle = (lv_angle + 77.0);
            if ((PathingType(lv_dropLocation) == c_pathingGround) && (PointPathingIsConnected(lv_dropLocation, lv_dropPodLocation) == true) && (PointPathingPassable(lv_dropLocation) == true)) {
                break;
            }

        }
        UnitSetPosition(lv_chosenUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_chosenUnit, true);
        libNtve_gf_PauseUnit(lv_chosenUnit, false);
        Wait(0.125, c_timeGame);
    }
    libNtve_gf_PauseUnit(lv_creep, true);
    Wait(3.0, c_timeGame);
    UnitRemove(lv_creep);
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libCOMI_gf_CM_DropPod_Terran_Wait (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;
    unit lv_dropPod;
    point lv_dropPodLocation;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropLocation;
    fixed lv_distance;
    int lv_subIndex;
    point lv_moveLocation;
    int lv_countPerLine;
    int lv_moveAttempts;
    fixed lv_spawnAngle;

    // Automatic Variable Declarations
    unitgroup autoB56D9329_g;
    int autoB56D9329_u;
    unitgroup auto7DD6500F_g;
    int auto7DD6500F_u;
    const int autoE2C02429_ae = 100;
    const int autoE2C02429_ai = 1;

    // Variable Initialization

    // Implementation
    autoB56D9329_g = lp_units;
    autoB56D9329_u = UnitGroupCount(autoB56D9329_g, c_unitCountAll);
    for (;; autoB56D9329_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB56D9329_g, autoB56D9329_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_indexUnit, false);
        libNtve_gf_PauseUnit(lv_indexUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "TerranDropPod", c_unitCreateIgnorePlacement, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    lv_countPerLine = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerLine = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocation = UnitGetPosition(lv_dropPod);
    lv_distance = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerLine)) * 0.8));
    lv_subIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    auto7DD6500F_g = lp_units;
    auto7DD6500F_u = UnitGroupCount(auto7DD6500F_g, c_unitCountAll);
    for (;; auto7DD6500F_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto7DD6500F_g, auto7DD6500F_u);
        if (lv_indexUnit == null) { break; }
        lv_moveAttempts = 1;
        for ( ; ( (autoE2C02429_ai >= 0 && lv_moveAttempts <= autoE2C02429_ae) || (autoE2C02429_ai < 0 && lv_moveAttempts >= autoE2C02429_ae) ) ; lv_moveAttempts += autoE2C02429_ai ) {
            lv_dropLocation = PointWithOffsetPolar(lv_dropPodLocation, 1.0, lv_spawnAngle);
            lv_spawnAngle = (lv_spawnAngle + 77.0);
            if ((PathingType(lv_dropLocation) == c_pathingGround) && (PointPathingIsConnected(lv_dropLocation, lv_dropPodLocation) == true)) {
                break;
            }

        }
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropLocation, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_indexUnit, lv_dropLocation, false);
        libNtve_gf_ShowHideUnit(lv_indexUnit, true);
        libNtve_gf_PauseUnit(lv_indexUnit, false);
        lv_moveLocation = PointWithOffsetPolar(lv_dropPodLocation, lv_distance, lv_angle);
        UnitIssueOrder(lv_indexUnit, OrderTargetingPoint(null, lv_moveLocation), c_orderQueueReplace);
        if ((lv_subIndex == lv_countPerLine)) {
            lv_subIndex = 1;
            lv_angle = lv_angleStart;
            lv_distance -= 0.8;
        }
        else {
            lv_subIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libCOMI_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player) {
    // Variable Declarations
    point lv_dropLocation;
    unitgroup lv_dropUnits;

    // Automatic Variable Declarations
    int auto30FEF00B_val;

    // Variable Initialization
    lv_dropUnits = UnitGroupEmpty();

    // Implementation
    lv_dropLocation = Point(PointGetX(lp_location), PointGetY(lp_location));
    PointSetFacing(lv_dropLocation, PointGetFacing(lp_location));
    lv_dropUnits = UnitGroupCopy(lp_units);
    DataTableSetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName(), lv_dropUnits);
    auto30FEF00B_val = lp_race;
    if (auto30FEF00B_val == libCOMI_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libCOMI_gf_CM_DropPod_Terran_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libCOMI_gv_cM_DropPod_TP_Location = lv_dropLocation;
            libCOMI_gv_cM_DropPod_TP_Units = lv_dropUnits;
            libCOMI_gv_cM_DropPod_TP_Player = lp_player;
            TriggerExecute(libCOMI_gt_CM_DropPod_Terran_DontWait, true, false);
        }
    }
    else if (auto30FEF00B_val == libCOMI_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libCOMI_gf_CM_DropPod_Zerg_Wait(lv_dropLocation, lv_dropUnits, lp_player);
        }
        else {
            libCOMI_gv_cM_DropPod_TP_Location = lv_dropLocation;
            libCOMI_gv_cM_DropPod_TP_Units = lv_dropUnits;
            libCOMI_gv_cM_DropPod_TP_Player = lp_player;
            TriggerExecute(libCOMI_gt_CM_DropPod_Zerg_DontWait, true, false);
        }
    }
    else {
    }
}

void libCOMI_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait) {
    // Automatic Variable Declarations
    bool autoFAF09496_val;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_buildingType, c_unitCreateIgnorePlacement, lp_player, lp_landingPoint);
    libCOMI_gv_cM_DropPod_TP_ZergBuilding = UnitLastCreated();
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    DataTableSetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName(), UnitLastCreatedGroup());
    autoFAF09496_val = lp_waitDontWait;
    if (autoFAF09496_val == true) {
        libCOMI_gf_CM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else if (autoFAF09496_val == false) {
        libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait(lp_buildingType, lp_landingPoint, lp_player);
    }
    else {
    }
}

trigger auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger = null;
string auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
point auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
int auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player;

void libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType = lp_buildingType;
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint = lp_landingPoint;
    auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player = lp_player;

    if (auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger == null) {
        auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger = TriggerCreate("auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_TriggerFunc (bool testConds, bool runActions) {
    string lp_buildingType = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_buildingType;
    point lp_landingPoint = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_landingPoint;
    int lp_player = auto_libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait_lp_player;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_DropPodCreateZergBuilding_Wait(lp_buildingType, lp_landingPoint, lp_player);
    return true;
}

void libCOMI_gf_CM_DropPodCreateZergBuilding_Wait (string lp_buildingType, point lp_landingPoint, int lp_player) {
    // Variable Declarations
    unit lv_droppod;

    // Automatic Variable Declarations
    unitgroup auto5CF01D86_g;
    int auto5CF01D86_u;
    unit auto5CF01D86_var;

    // Variable Initialization

    // Implementation
    UnitCreate(1, "ZergDropPod", c_unitCreateIgnorePlacement, lp_player, lp_landingPoint, 270.0);
    lv_droppod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    UnitTypeMoveBlockersFromPoint(lp_buildingType, lp_player, lp_landingPoint, 0.0);
    Wait(1.25, c_timeReal);
    auto5CF01D86_g = UnitGroup(null, c_playerAny, RegionCircle(lp_landingPoint, 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5CF01D86_u = UnitGroupCount(auto5CF01D86_g, c_unitCountAll);
    for (;; auto5CF01D86_u -= 1) {
        auto5CF01D86_var = UnitGroupUnitFromEnd(auto5CF01D86_g, auto5CF01D86_u);
        if (auto5CF01D86_var == null) { break; }
        if ((UnitGetType(auto5CF01D86_var) != "ZergDropPodLarge") && (auto5CF01D86_var != UnitLastCreated())) {
            if (((UnitGetOwner(auto5CF01D86_var) == lp_player) || (libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(auto5CF01D86_var), libNtve_ge_PlayerRelation_Ally) == true))) {
                UnitSetPosition(auto5CF01D86_var, UnitTypePlacementFromPoint(lp_buildingType, UnitGetOwner(auto5CF01D86_var), lp_landingPoint, 4.0), true);
            }
            else {
                UnitKill(auto5CF01D86_var);
            }
        }

    }
    libNtve_gf_ShowHideUnit(libCOMI_gv_cM_DropPod_TP_ZergBuilding, true);
    Wait(5.0, c_timeReal);
    UnitKill(lv_droppod);
}

string libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return "LASTDROPPODEDUNITS";
}

unitgroup libCOMI_gf_LastDroppedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(false, libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName());
}

void libCOMI_gf_AmonPlayersWave (unitgroup lp_units) {
    // Variable Declarations
    unit lv_dropUnit;
    int lv_newOwner;
    string lv_workerType;

    // Automatic Variable Declarations
    unitgroup autoC792E8FD_g;
    int autoC792E8FD_u;

    // Variable Initialization
    lv_workerType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Worker, PlayerGroupPlayer(libCOMI_gv_vU_EnemyAI, 1));

    // Implementation
    if ((PlayerGroupCount(libCOMI_gv_vU_EnemyPlayers) > 0)) {
        autoC792E8FD_g = lp_units;
        autoC792E8FD_u = UnitGroupCount(autoC792E8FD_g, c_unitCountAll);
        for (;; autoC792E8FD_u -= 1) {
            lv_dropUnit = UnitGroupUnitFromEnd(autoC792E8FD_g, autoC792E8FD_u);
            if (lv_dropUnit == null) { break; }
            if ((PlayerGroupCount(libCOMI_gv_vU_EnemyPlayers) == 2) && (UnitGetOwner(lv_dropUnit) == PlayerGroupPlayer(libCOMI_gv_vU_SlotsEnemy, 2))) {
                lv_newOwner = PlayerGroupPlayer(libCOMI_gv_vU_EnemyPlayers, 2);
            }
            else {
                lv_newOwner = PlayerGroupPlayer(libCOMI_gv_vU_EnemyPlayers, 1);
            }
            UnitSetOwner(lv_dropUnit, lv_newOwner, true);
        }
    }

}

int libCOMI_gf_PopulateAttackForceUnits (int lp_player, int lp_techLevel, fixed lp_resources) {
    int init_i;

    // Variable Declarations
    int lv_maxTechLevel;
    int lv_difficulty;
    string lv_commader;
    libCOMI_gs_CoopAIAttackForce[libCOMI_gv_mAX_UNITTYPES_PERWAVE + 1] lv_data;
    int lv_i;
    int lv_j;
    string lv_unit;
    int lv_unitTypes;
    int lv_cost;
    fixed lv_waveResourceUsed;
    int lv_waveUnitsCount;
    int lv_randomUnitType;
    int lv_limit;
    int lv_resourcesLeft;
    int lv_wavePartUnitsCount;
    int lv_waveParts;
    int lv_wavePartResources;
    int lv_techyUnit;
    int lv_techyUnitTech;
    int lv_unitTech;
    string lv_detector;
    string lv_detectorDanger;
    bool lv_detectorAdded;

    // Automatic Variable Declarations
    int autoEAFDC97E_ae;
    const int autoEAFDC97E_ai = 1;
    int auto460DDABB_ae;
    const int auto460DDABB_ai = 1;
    int autoD85D01FA_ae;
    const int autoD85D01FA_ai = 1;

    // Variable Initialization
    lv_maxTechLevel = libCOMI_gf_TechAsInteger(lp_techLevel);
    lv_difficulty = libCOMI_gf_DifficultyAsInteger(lp_player);
    lv_commader = libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player];
    for (init_i = 0; init_i <= libCOMI_gv_mAX_UNITTYPES_PERWAVE; init_i += 1) {
        lv_data[init_i].lv_limit = 999;
        lv_data[init_i].lv_cost = 999;
    }
    lv_resourcesLeft = FixedToInt(lp_resources);
    lv_waveParts = (lv_maxTechLevel + 1);
    lv_wavePartResources = (FixedToInt(lp_resources) / lv_waveParts);
    lv_detector = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Detector, lp_player);
    lv_detectorDanger = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_CombatDetector, lp_player);

    // Implementation
    autoEAFDC97E_ae = UserDataFieldValueCount("Compositions", "WavesUnits");
    lv_i = 1;
    for ( ; ( (autoEAFDC97E_ai >= 0 && lv_i <= autoEAFDC97E_ae) || (autoEAFDC97E_ai < 0 && lv_i >= autoEAFDC97E_ae) ) ; lv_i += autoEAFDC97E_ai ) {
        lv_unit = UserDataGetUnit("Compositions", lv_commader, "WavesUnits", lv_i);
        lv_unitTech = UserDataGetInt("Compositions", lv_commader, "WavesTier", lv_i);
        if ((lv_unit != null) && (lv_maxTechLevel >= lv_unitTech)) {
            lv_unitTypes += 1;
            lv_data[lv_unitTypes].lv_unitTypesForWave = lv_unit;
            lv_data[lv_unitTypes].lv_cost = UnitTypeGetCost(lv_unit, c_unitCostSumMineralsVespene);
            if ((lv_data[lv_unitTypes].lv_cost == 0)) {
                lv_data[lv_unitTypes].lv_cost = 125;
            }

            auto460DDABB_ae = UserDataInstanceCount("XCoopAIAttackWaveUnitLimits");
            lv_j = 1;
            for ( ; ( (auto460DDABB_ai >= 0 && lv_j <= auto460DDABB_ae) || (auto460DDABB_ai < 0 && lv_j >= auto460DDABB_ae) ) ; lv_j += auto460DDABB_ai ) {
                if ((lv_data[lv_unitTypes].lv_unitTypesForWave == UserDataGetUnit("XCoopAIAttackWaveUnitLimits", UserDataInstance("XCoopAIAttackWaveUnitLimits", lv_j), "UnitToLimit", 1))) {
                    lv_data[lv_unitTypes].lv_limit = UserDataGetInt("XCoopAIAttackWaveUnitLimits", UserDataInstance("XCoopAIAttackWaveUnitLimits", lv_j), "LimitPerDifficulty", lv_difficulty);
                    break;
                }

            }
            if ((lv_techyUnitTech == lv_unitTech) && (RandomInt(0, 1) == 1)) {
                lv_techyUnit = lv_unitTypes;
            }

            if ((lv_techyUnitTech < lv_unitTech)) {
                lv_techyUnit = lv_unitTypes;
                lv_techyUnitTech = lv_unitTech;
            }

        }

    }
    lv_randomUnitType = lv_techyUnit;
    while ((lv_waveParts > 0) && (lv_resourcesLeft > 0)) {
        lv_wavePartResources = (lv_resourcesLeft / lv_waveParts);
        lv_unit = lv_data[lv_randomUnitType].lv_unitTypesForWave;
        lv_limit = lv_data[lv_randomUnitType].lv_limit;
        lv_cost = lv_data[lv_randomUnitType].lv_cost;
        lv_wavePartUnitsCount = MinI((CeilingI((lv_wavePartResources / lv_cost)) + 1), lv_limit);
        lv_data[lv_randomUnitType].lv_limit -= lv_wavePartUnitsCount;
        lv_data[lv_randomUnitType].lv_count += lv_wavePartUnitsCount;
        lv_waveResourceUsed += (lv_cost * lv_wavePartUnitsCount);
        lv_resourcesLeft -= (lv_cost * lv_wavePartUnitsCount);
        lv_waveParts -= 1;
        if (((lv_unit == lv_detector) || (lv_unit == lv_detectorDanger))) {
            lv_detectorAdded = true;
        }

        lv_randomUnitType = RandomInt(1, lv_unitTypes);
    }
    autoD85D01FA_ae = lv_unitTypes;
    lv_i = 1;
    for ( ; ( (autoD85D01FA_ai >= 0 && lv_i <= autoD85D01FA_ae) || (autoD85D01FA_ai < 0 && lv_i >= autoD85D01FA_ae) ) ; lv_i += autoD85D01FA_ai ) {
        if ((lv_data[lv_i].lv_count > 0)) {
            lv_waveUnitsCount += 1;
            libCOMI_gv_attackForceUnitsType[lv_waveUnitsCount] = lv_data[lv_i].lv_unitTypesForWave;
            libCOMI_gv_attackForceUnitsCount[lv_waveUnitsCount] = lv_data[lv_i].lv_count;
        }

    }
    if ((lv_detectorAdded == false) && (libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == true)) {
        lv_unit = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Detector, lp_player);
        if ((lv_unit != null) && (libCOMI_gf_MinimumDifficultyValueCoopInteger(RandomInt(0, 1), RandomInt(0, 1), 1, 1, 1, 1) == 1)) {
            lv_waveUnitsCount += 1;
            libCOMI_gv_attackForceUnitsType[lv_waveUnitsCount] = lv_unit;
            libCOMI_gv_attackForceUnitsCount[lv_waveUnitsCount] = 1;
        }

    }

    return lv_waveUnitsCount;
}

fixed libCOMI_gf_CM_CoopAI_GetResourceAmount (int lp_resourceSize, int lp_difficulty) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_baseResources;
    fixed lv_difficultyMultiplyer;

    // Automatic Variable Declarations
    int autoE7DE9BF5_val;
    int autoE78CA953_val;

    // Variable Initialization

    // Implementation
    autoE7DE9BF5_val = lp_resourceSize;
    if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest) {
        lv_baseResources = 50.0;
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller) {
        lv_baseResources = 100.0;
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__3Small) {
        lv_baseResources = 200.0;
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__4Medium) {
        lv_baseResources = 300.0;
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__5Large) {
        lv_baseResources = 400.0;
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__6Larger) {
        lv_baseResources = 600.0;
    }
    else if (autoE7DE9BF5_val == libCOMI_ge_CoopAIAttackWaveBuckets__7Largest) {
        lv_baseResources = 800.0;
    }
    else {
        lv_baseResources = 1000.0;
    }
    autoE78CA953_val = libCOMI_gf_CC_DifficultyIndex(lp_difficulty);
    if (autoE78CA953_val == 1) {
        lv_difficultyMultiplyer = 3.0;
    }
    else if (autoE78CA953_val == 2) {
        lv_difficultyMultiplyer = 4.0;
    }
    else if (autoE78CA953_val == 3) {
        lv_difficultyMultiplyer = 5.0;
    }
    else if (autoE78CA953_val == 4) {
        lv_difficultyMultiplyer = 6.0;
    }
    else {
        lv_difficultyMultiplyer = 10.0;
    }
    return (lv_baseResources * lv_difficultyMultiplyer);
}

string libCOMI_gf_CM_CoopAI_GetTechLevel (int lp_player, int lp_techLevel) {
    // Variable Declarations
    string lv_commanderUnitTier;
    int lv_tierIndex;

    // Automatic Variable Declarations
    int auto8DE95FA5_val;
    int auto4F71B072_ae;
    const int auto4F71B072_ai = -1;

    // Variable Initialization

    // Implementation
    auto8DE95FA5_val = lp_techLevel;
    if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__1Early) {
        lv_tierIndex = 1;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid) {
        lv_tierIndex = 2;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__3Mid) {
        lv_tierIndex = 3;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__4LateMid) {
        lv_tierIndex = 4;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets__5Late) {
        lv_tierIndex = 5;
    }
    else if (auto8DE95FA5_val == libCOMI_ge_CoopAITechLevelBuckets_TechLevel06) {
        lv_tierIndex = 6;
    }
    else {
        lv_tierIndex = 7;
    }
    lv_commanderUnitTier = UserDataGetUserInstance("Compositions", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "X_UnitTiers", lv_tierIndex);
    if ((lv_commanderUnitTier == null)) {
        auto4F71B072_ae = libCOMI_ge_CoopAITechLevelBuckets__1Early;
        lv_tierIndex = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
        for ( ; ( (auto4F71B072_ai >= 0 && lv_tierIndex <= auto4F71B072_ae) || (auto4F71B072_ai < 0 && lv_tierIndex >= auto4F71B072_ae) ) ; lv_tierIndex += auto4F71B072_ai ) {
            lv_commanderUnitTier = UserDataGetUserInstance("Compositions", libCOMI_gv_cM_CoopAIPlayer_Commander[lp_player], "X_UnitTiers", (lv_tierIndex + 1));
            if ((lv_commanderUnitTier != null)) {
                break;
            }

        }
    }

    return lv_commanderUnitTier;
}

void libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel (int lp_player, bool lp_instantAttackGroup, int lp_resourceSize, int lp_techLevel) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    string lv_commanderUnitTier;
    int lv_tierIndex;
    unit lv_setUnitEnergy;

    // Automatic Variable Declarations
    unitgroup auto3FD1E1FF_g;
    int auto3FD1E1FF_u;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_player, lp_techLevel);
    libCOMI_gf_CM_CoopAI_CreateAttackWave3(lp_player, lp_instantAttackGroup, lv_resourcesFromUserData, lp_techLevel);
    if ((lp_instantAttackGroup == true)) {
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = libCOMI_gf_CreateDropAttack(lp_player, libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player]);
        auto3FD1E1FF_g = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
        auto3FD1E1FF_u = UnitGroupCount(auto3FD1E1FF_g, c_unitCountAll);
        for (;; auto3FD1E1FF_u -= 1) {
            lv_setUnitEnergy = UnitGroupUnitFromEnd(auto3FD1E1FF_g, auto3FD1E1FF_u);
            if (lv_setUnitEnergy == null) { break; }
            UnitSetPropertyFixed(lv_setUnitEnergy, c_unitPropEnergyPercent, 100.0);
        }
        AIAttackWaveUseGroup(lp_player, libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player]);
        libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    }

}

unitgroup libCOMI_gf_CreateCoopAIAttackGroup2 (int lp_player, int lp_resourceSize, int lp_techLevel) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    int lv_tierIndex;
    unitgroup lv_attackGroup;
    unitgroup lv_returnUnitGroup;
    unit lv_returnGroupIter;

    // Automatic Variable Declarations
    unitgroup autoECDA3CCB_g;
    int autoECDA3CCB_u;

    // Variable Initialization
    lv_difficulty = 2;
    lv_attackGroup = UnitGroupEmpty();
    lv_returnUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    libCOMI_gf_CM_CoopAI_CreateAttackWave3(lp_player, true, lv_resourcesFromUserData, lp_techLevel);
    lv_attackGroup = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
    libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_returnUnitGroup, libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player]));
    autoECDA3CCB_g = lv_returnUnitGroup;
    autoECDA3CCB_u = UnitGroupCount(autoECDA3CCB_g, c_unitCountAll);
    for (;; autoECDA3CCB_u -= 1) {
        lv_returnGroupIter = UnitGroupUnitFromEnd(autoECDA3CCB_g, autoECDA3CCB_u);
        if (lv_returnGroupIter == null) { break; }
        UnitSetPropertyFixed(lv_returnGroupIter, c_unitPropEnergyPercent, 100.0);
    }
    return lv_returnUnitGroup;
}

unitgroup libCOMI_gf_CreateCommanderAttackGroupatPoint (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    // Variable Declarations
    string lv_waveInstance;
    fixed lv_resourcesFromUserData;
    int lv_difficulty;
    int lv_tierIndex;
    unitgroup lv_attackGroup;
    unitgroup lv_returnUnitGroup;
    unit lv_returnGroupIter;

    // Automatic Variable Declarations
    unitgroup auto10AFDE47_g;
    int auto10AFDE47_u;

    // Variable Initialization
    lv_difficulty = 2;
    lv_attackGroup = UnitGroupEmpty();
    lv_returnUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_resourcesFromUserData = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, lv_difficulty);
    libCOMI_gf_CM_CoopAI_CreateAttackWave3(lp_player, true, lv_resourcesFromUserData, lp_techLevel);
    lv_attackGroup = libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player];
    libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player] = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_returnUnitGroup, libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, lp_spawnLocation));
    auto10AFDE47_g = lv_returnUnitGroup;
    auto10AFDE47_u = UnitGroupCount(auto10AFDE47_g, c_unitCountAll);
    for (;; auto10AFDE47_u -= 1) {
        lv_returnGroupIter = UnitGroupUnitFromEnd(auto10AFDE47_g, auto10AFDE47_u);
        if (lv_returnGroupIter == null) { break; }
        UnitSetPropertyFixed(lv_returnGroupIter, c_unitPropEnergyPercent, 100.0);
    }
    return lv_returnUnitGroup;
}

void libCOMI_gf_CM_CoopAI_CreateAttackWave3 (int lp_player, bool lp_instantAttackGroup, fixed lp_resourceAllocation, int lp_techLevel) {
    // Variable Declarations
    int lv_i;
    int lv_units;

    // Automatic Variable Declarations
    int auto94EF5CC5_ae;
    const int auto94EF5CC5_ai = 1;

    // Variable Initialization

    // Implementation
    lv_units = libCOMI_gf_PopulateAttackForceUnits(lp_player, lp_techLevel, lp_resourceAllocation);
    auto94EF5CC5_ae = lv_units;
    lv_i = 1;
    for ( ; ( (auto94EF5CC5_ai >= 0 && lv_i <= auto94EF5CC5_ae) || (auto94EF5CC5_ai < 0 && lv_i >= auto94EF5CC5_ae) ) ; lv_i += auto94EF5CC5_ai ) {
        UnitCreate(libCOMI_gv_attackForceUnitsCount[lv_i], libCOMI_gv_attackForceUnitsType[lv_i], 0, lp_player, libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn[lp_player], libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAIPlayer_AttackGroup[lp_player], UnitLastCreatedGroup());
    }
}

void libCOMI_gf_SetupCoopAttackForceDataTable (int lp_player, fixed lp_resourceAllocation, int lp_techLevel) {
    // Variable Declarations
    int lv_i;
    int lv_units;

    // Automatic Variable Declarations
    int autoBE140D7A_ae;
    const int autoBE140D7A_ai = 1;

    // Variable Initialization

    // Implementation
    lv_units = libCOMI_gf_PopulateAttackForceUnits(lp_player, lp_techLevel, lp_resourceAllocation);
    autoBE140D7A_ae = lv_units;
    lv_i = 1;
    for ( ; ( (autoBE140D7A_ai >= 0 && lv_i <= autoBE140D7A_ae) || (autoBE140D7A_ai < 0 && lv_i >= autoBE140D7A_ae) ) ; lv_i += autoBE140D7A_ai ) {
        libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType(libCOMI_gv_attackForceUnitsType[lv_i], libCOMI_gv_attackForceUnitsCount[lv_i]);
    }
}

trigger auto_libCOMI_gf_CreateCommanderDropAttack_Trigger = null;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_player;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize;
int auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel;
point auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint;
point auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint;

void libCOMI_gf_CreateCommanderDropAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint) {
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_player = lp_player;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize = lp_resourceSize;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel = lp_techLevel;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint = lp_dropPoint;
    auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint = lp_attackPoint;

    if (auto_libCOMI_gf_CreateCommanderDropAttack_Trigger == null) {
        auto_libCOMI_gf_CreateCommanderDropAttack_Trigger = TriggerCreate("auto_libCOMI_gf_CreateCommanderDropAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CreateCommanderDropAttack_Trigger, false, false);
}

bool auto_libCOMI_gf_CreateCommanderDropAttack_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CreateCommanderDropAttack_lp_player;
    int lp_resourceSize = auto_libCOMI_gf_CreateCommanderDropAttack_lp_resourceSize;
    int lp_techLevel = auto_libCOMI_gf_CreateCommanderDropAttack_lp_techLevel;
    point lp_dropPoint = auto_libCOMI_gf_CreateCommanderDropAttack_lp_dropPoint;
    point lp_attackPoint = auto_libCOMI_gf_CreateCommanderDropAttack_lp_attackPoint;

    // Variable Declarations
    unitgroup lv_attackGroup;
    int lv_dropPodRacePreset;
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unit lv_pylon;
    revealer lv_pylonRevealer;
    unit lv_superWarpGate;
    const fixed lv_c_PowerSourceRadius = 6.5;
    unitgroup lv_airGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackGroup = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();

    // Implementation
    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lp_player, lp_resourceSize, lp_techLevel, lp_dropPoint);
    if ((UnitGroupCount(lv_attackGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_attackGroup = libCOMI_gf_CreateDropAttack(lp_player, lv_attackGroup, lp_dropPoint);
    Wait(1.0, c_timeAI);
    AIAttackWaveSetTargetPoint(lp_player, lp_attackPoint);
    AIAttackWaveSetGatherPoint(lp_player, lp_dropPoint);
    AIAttackWaveUseGroup(lp_player, lv_attackGroup);
    AIAttackWaveSend(lp_player, 0, false);
    return true;
}

unitgroup libCOMI_gf_CreateDropAttack (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation) {
    // Variable Declarations
    unitgroup lv_attackGroupLocal;
    int lv_dropPodRacePreset;
    unit lv_dropGroupUnitIter;
    int lv_dropGroupIter;
    unitgroup lv_dropGroup;
    unit lv_pylon;
    revealer lv_pylonRevealer;
    unit lv_superWarpGate;
    const fixed lv_c_PowerSourceRadius = 6.5;
    unitgroup lv_airGroup;
    unitgroup lv_attackUnitsZerg;
    unitgroup lv_attackUnitsProtoss;
    unitgroup lv_attackUnitsTerran;
    unit lv_attackUnit;
    unitgroup lv_returnGroup;
    int lv_dropGroupSize;

    // Automatic Variable Declarations
    unitgroup autoC8986529_g;
    int autoC8986529_u;
    string auto1FD48043_val;

    // Variable Initialization
    lv_attackGroupLocal = UnitGroupEmpty();
    lv_dropGroup = UnitGroupEmpty();
    lv_airGroup = UnitGroupEmpty();
    lv_attackUnitsZerg = UnitGroupEmpty();
    lv_attackUnitsProtoss = UnitGroupEmpty();
    lv_attackUnitsTerran = UnitGroupEmpty();
    lv_returnGroup = UnitGroupEmpty();

    // Implementation
    lv_dropGroupSize = UnitGroupCount(lp_attackGroup, c_unitCountAlive);
    autoC8986529_g = lp_attackGroup;
    autoC8986529_u = UnitGroupCount(autoC8986529_g, c_unitCountAll);
    for (;; autoC8986529_u -= 1) {
        lv_attackUnit = UnitGroupUnitFromEnd(autoC8986529_g, autoC8986529_u);
        if (lv_attackUnit == null) { break; }
        auto1FD48043_val = libARRA_gf_GetUnitRace(lv_attackUnit);
        if (auto1FD48043_val == "Terr") {
            UnitGroupAdd(lv_attackUnitsTerran, lv_attackUnit);
        }
        else if (auto1FD48043_val == "Zerg") {
            UnitGroupAdd(lv_attackUnitsZerg, lv_attackUnit);
        }
        else if (auto1FD48043_val == "Prot") {
            UnitGroupAdd(lv_attackUnitsProtoss, lv_attackUnit);
        }
        else {
            UnitGroupAdd(lv_attackUnitsTerran, lv_attackUnit);
        }
    }
    if ((UnitGroupCount(lv_attackUnitsTerran, c_unitCountAlive) > 0)) {
        lv_attackUnitsTerran = libCOMI_gf_CM_CoopAI_CreateDropAttack_Terran(lp_player, lv_attackUnitsTerran, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_attackUnitsProtoss, c_unitCountAlive) > 0)) {
        lv_attackUnitsProtoss = libCOMI_gf_CM_CoopAI_CreateDropAttack_Protoss(lp_player, lv_attackUnitsProtoss, lp_dropLocation);
    }

    if ((UnitGroupCount(lv_attackUnitsZerg, c_unitCountAlive) > 0)) {
        lv_attackUnitsZerg = libCOMI_gf_CM_CoopAI_CreateDropAttack_Zerg(lp_player, lv_attackUnitsZerg, lp_dropLocation);
    }

    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsProtoss);
    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsTerran);
    UnitGroupAddUnitGroup(lv_returnGroup, lv_attackUnitsZerg);
    if ((lv_dropGroupSize != UnitGroupCount(lv_returnGroup, c_unitCountAlive))) {
    }

    return lv_returnGroup;
}

void libCOMI_gf_SetupAttackForce (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    // Variable Declarations
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    string lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unit[3] lv_transportCurrent;
    unitgroup lv_transportGroup;
    string lv_transportType;
    unit lv_unitCreated;
    int lv_selectedPlayer;

    // Automatic Variable Declarations
    int autoD7B02B25_ae;
    const int autoD7B02B25_ai = 1;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();
    lv_transportGroup = UnitGroupEmpty();
    lv_selectedPlayer = lp_playerA;

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    autoD7B02B25_ae = PlayerGroupCount(lv_attackingPlayers);
    lv_playerIter = 1;
    for ( ; ( (autoD7B02B25_ai >= 0 && lv_playerIter <= autoD7B02B25_ae) || (autoD7B02B25_ai < 0 && lv_playerIter >= autoD7B02B25_ae) ) ; lv_playerIter += autoD7B02B25_ai ) {
        lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
        lv_resourcesForPlayer[lv_playerIter] = libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player));
        lv_totalResourceAmount += lv_resourcesForPlayer[lv_playerIter];
    }
    if ((lp_playerA == c_playerAny) && (lp_playerB == c_playerAny)) {
        return ;
    }
    else if ((lp_playerA == c_playerAny)) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerB, lp_techLevel);
        lv_selectedPlayer = lp_playerB;
    }
    else if ((lp_playerB == c_playerAny)) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
        lv_selectedPlayer = lp_playerA;
    }
    else if ((libCOMI_gv_cM_CoopAIPlayer_Commander[lp_playerA] == libCOMI_gv_cM_CoopAIPlayer_Commander[lp_playerB])) {
        lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
        lv_selectedPlayer = lp_playerA;
    }
    else if (true) {
        if ((RandomInt(0, 1) == 1)) {
            lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerA, lp_techLevel);
            lv_selectedPlayer = lp_playerA;
        }
        else {
            lv_commanderUnitTier = libCOMI_gf_CM_CoopAI_GetTechLevel(lp_playerB, lp_techLevel);
            lv_selectedPlayer = lp_playerB;
        }
    }
    if ((lp_playerA == lp_playerB)) {
        lv_totalResourceAmount = (lv_totalResourceAmount * 2.0);
    }

    libCOMI_gf_SetupCoopAttackForceDataTable(lv_selectedPlayer, lv_totalResourceAmount, lp_techLevel);
}

void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation) {
    // Automatic Variable Declarations
    // Deprecated
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation, true);
}

void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2 (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, bool lp_dropWarpin) {
    // Variable Declarations
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    string lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unitgroup lv_playerAttackForce;

    // Automatic Variable Declarations
    int auto2AA98C2E_ae;
    const int auto2AA98C2E_ai = 1;
    int autoE237A2DD_ae;
    const int autoE237A2DD_ai = 1;
    string auto514B4646_val;
    playergroup auto69893063_g;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();
    lv_playerAttackForce = UnitGroupEmpty();

    // Implementation
    if ((libCOMI_gv_attackForceOverride != null)) {
        libCOMI_gv_attackForceOverridePlayerA = lp_playerA;
        libCOMI_gv_attackForceOverridePlayerB = lp_playerB;
        libCOMI_gv_attackForceOverrideResourceSize = lp_resourceSize;
        libCOMI_gv_attackForceOverrideSpawnLocation = lp_spawnLocation;
        libCOMI_gv_attackForceOverrideTechLevel = lp_techLevel;
        libCOMI_gv_attackForceOverrideTransportType = null;
        libCOMI_gv_attackForceOverrideDropWarpIn = lp_dropWarpin;
        TriggerExecute(libCOMI_gv_attackForceOverride, true, false);
    }
    else {
        PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
        PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
        libCOMI_gf_SetupAttackForce(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation);
        auto2AA98C2E_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
        lv_unitTypeIter = 1;
        for ( ; ( (auto2AA98C2E_ai >= 0 && lv_unitTypeIter <= auto2AA98C2E_ae) || (auto2AA98C2E_ai < 0 && lv_unitTypeIter >= auto2AA98C2E_ae) ) ; lv_unitTypeIter += auto2AA98C2E_ai ) {
            lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
            lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
            while ((lv_unitTypeToCreate != null) && (lv_unitCount > 0)) {
                autoE237A2DD_ae = PlayerGroupCount(lv_attackingPlayers);
                lv_playerIter = 1;
                for ( ; ( (autoE237A2DD_ai >= 0 && lv_playerIter <= autoE237A2DD_ae) || (autoE237A2DD_ai < 0 && lv_playerIter >= autoE237A2DD_ae) ) ; lv_playerIter += autoE237A2DD_ai ) {
                    if ((lv_unitCount > 0)) {
                        lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                        if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                            UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, lp_spawnLocation, libNtve_gf_RandomAngle());
                            auto514B4646_val = lv_unitTypeToCreate;
                            if (auto514B4646_val == "Scourge") {
                                if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                                }
                                else {
                                    libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                                }
                            }
                            else {
                            }
                            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                            UnitGroupAdd(lv_attackForce, UnitLastCreated());
                            lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                            lv_unitCount -= 1;
                        }

                    }

                }
            }
        }
        auto69893063_g = PlayerGroupAll();
        lv_playerIter = -1;
        while (true) {
            lv_playerIter = PlayerGroupNextPlayer(auto69893063_g, lv_playerIter);
            if (lv_playerIter < 0) { break; }
            lv_playerAttackForce = UnitGroupFilterPlayer(lv_attackForce, lv_playerIter, 0);
            libCOMI_gf_CT_Mutator_AttackWaveHook_WaveCreated(lv_playerIter, lv_playerAttackForce, lp_spawnLocation, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
            UnitGroupAddUnitGroup(lv_attackForce, lv_playerAttackForce);
        }
        libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
        DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
        DataTableSetPoint(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GatherPointName(), lp_spawnLocation);
        if ((lp_dropWarpin == true)) {
            libCOMI_gf_DropPodWarpInUnitGroup(lv_attackForce, lp_spawnLocation);
        }

    }
}

void libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, string lp_transportType) {
    // Variable Declarations
    playergroup lv_attackingPlayers;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    int lv_unitTypeIter;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unit[3] lv_transportCurrent;
    string lv_transportType;
    unit lv_unitCreated;

    // Automatic Variable Declarations
    int autoEDB32825_ae;
    const int autoEDB32825_ai = 1;
    int auto4161A881_ae;
    const int auto4161A881_ai = 1;
    string auto43B5D7F2_val;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    if ((libCOMI_gv_dropForceOverride != null)) {
        libCOMI_gv_attackForceOverridePlayerA = lp_playerA;
        libCOMI_gv_attackForceOverridePlayerB = lp_playerB;
        libCOMI_gv_attackForceOverrideResourceSize = lp_resourceSize;
        libCOMI_gv_attackForceOverrideSpawnLocation = lp_spawnLocation;
        libCOMI_gv_attackForceOverrideTechLevel = lp_techLevel;
        libCOMI_gv_attackForceOverrideTransportType = lp_transportType;
        libCOMI_gv_attackForceOverrideDropWarpIn = false;
        TriggerExecute(libCOMI_gv_dropForceOverride, true, false);
    }
    else {
        PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
        PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
        libCOMI_gf_SetupAttackForce(lp_playerA, lp_playerB, lp_resourceSize, lp_techLevel, lp_spawnLocation);
        libCOMI_gv_cM_CoopAI_AttackForce_Transports = UnitGroupEmpty();
        autoEDB32825_ae = libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount();
        lv_unitTypeIter = 1;
        for ( ; ( (autoEDB32825_ai >= 0 && lv_unitTypeIter <= autoEDB32825_ae) || (autoEDB32825_ai < 0 && lv_unitTypeIter >= autoEDB32825_ae) ) ; lv_unitTypeIter += autoEDB32825_ai ) {
            lv_unitTypeToCreate = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType(lv_unitTypeIter);
            lv_unitCount = libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount(lv_unitTypeIter);
            while ((lv_unitCount > 0)) {
                auto4161A881_ae = PlayerGroupCount(lv_attackingPlayers);
                lv_playerIter = 1;
                for ( ; ( (auto4161A881_ai >= 0 && lv_playerIter <= auto4161A881_ae) || (auto4161A881_ai < 0 && lv_playerIter >= auto4161A881_ae) ) ; lv_playerIter += auto4161A881_ai ) {
                    lv_player = PlayerGroupPlayer(lv_attackingPlayers, lv_playerIter);
                    lv_transportType = libCOMI_gf_CoopAIUnitCategory(libCOMI_ge_UnitCategory_Transport, lv_player);
                    if ((lv_unitCount > 0)) {
                        if ((PlayerGroupHasPlayer(libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers(lv_unitTypeIter), lv_player) == false)) {
                            if ((libCOMI_gf_UnitMoverExists(lv_unitTypeToCreate, "Fly") == false)) {
                                if (((lv_transportCurrent[lv_playerIter] == null) || ((UnitCargoValue(lv_transportCurrent[lv_playerIter], c_unitCargoSpaceFree) * 0.75) < (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitTypeToCreate, "CargoSize", lv_player) + 1)))) {
                                    UnitCreate(1, lv_transportType, c_unitCreateIgnorePlacement, lv_player, lp_spawnLocation, PointGetFacing(lp_spawnLocation));
                                    lv_transportCurrent[lv_playerIter] = UnitLastCreated();
                                    UnitGroupAdd(lv_attackForce, lv_transportCurrent[lv_playerIter]);
                                    UnitGroupAdd(libCOMI_gv_cM_CoopAI_AttackForce_Transports, lv_transportCurrent[lv_playerIter]);
                                }

                                UnitCargoCreate(lv_transportCurrent[lv_playerIter], lv_unitTypeToCreate, 1);
                                lv_unitCreated = UnitCargoLastCreated();
                            }
                            else {
                                UnitCreate(1, lv_unitTypeToCreate, 0, lv_player, lp_spawnLocation, libNtve_gf_RandomAngle());
                                auto43B5D7F2_val = lv_unitTypeToCreate;
                                if (auto43B5D7F2_val == "Scourge") {
                                    if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                                        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                                    }
                                    else {
                                        libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                                    }
                                }
                                else {
                                }
                                lv_unitCreated = UnitLastCreated();
                            }
                            UnitSetPropertyFixed(lv_unitCreated, c_unitPropEnergyPercent, 100.0);
                            UnitGroupAdd(lv_attackForce, lv_unitCreated);
                            lv_resourcesForPlayer[lv_playerIter] -= UnitTypeGetCost(lv_unitTypeToCreate, c_unitCostSumMineralsVespene);
                            lv_unitCount -= 1;
                        }

                    }

                }
            }
        }
        libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
        DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
    }
}

bool libCOMI_gf_AttackWaveContainsPingworthyUnits (unitgroup lp_attackWave) {
    // Variable Declarations
    string lv_pingWorthlessUnitTypeIter;
    int lv_index;
    unit lv_unitGroupIter;
    string lv_unitTypeIter;

    // Automatic Variable Declarations
    unitgroup autoF655485E_g;
    int autoF655485E_u;

    // Variable Initialization

    // Implementation
    autoF655485E_g = lp_attackWave;
    autoF655485E_u = UnitGroupCount(autoF655485E_g, c_unitCountAll);
    for (;; autoF655485E_u -= 1) {
        lv_unitGroupIter = UnitGroupUnitFromEnd(autoF655485E_g, autoF655485E_u);
        if (lv_unitGroupIter == null) { break; }
        if ((libCOMI_gf_VU_isPingException(UnitGetType(lv_unitGroupIter)) == false)) {
            return true;
        }

    }
    return false;
}

void libCOMI_gf_AddAttackWaveUnitType (int lp_count, string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_AddAttackWaveUnitType(lp_count, lp_unitType);
}

timer libCOMI_gf_CM_CoopAI_Get_NextAttackWaveTimer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cM_CoopAIPlayer_NextAttackWave;
}

bool libCOMI_gf_CM_CoopAI_IsSpikeWave (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lp_player] > 2) && (libCOMI_gv_cM_CoopAIPlayer_WaveResourceDeficit[lp_player] <= 0.0)) {
        return true;
    }
    else {
        return false;
    }
}

void libCOMI_gf_SetCoopAIWaveTarget (int lp_aI, wavetarget lp_waveTarget) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CoopAI_Set_TargetOfAttackWaves(lp_aI, lp_waveTarget);
}

void libCOMI_gf_SetCoopAIGatherPoint (int lp_player, point lp_gatherPoint) {
    // Automatic Variable Declarations
    // Implementation
    AIAttackWaveSetGatherPoint(lp_player, lp_gatherPoint);
}

void libCOMI_gf_TaskTransmission (int lp_task, string lp_transmission, fixed lp_delay, fixed lp_defer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_defferedTransmissionLink = lp_transmission;
    libCOMI_gv_defferedTransmissionDefer = lp_defer;
    libCOMI_gv_defferedTransmissionDelay = lp_delay;
    libCOMI_gv_defferedTask = lp_task;
    TriggerExecute(libCOMI_gt_DefferedTransmission, true, false);
}

void libCOMI_gf_DefferedTransmission (string lp_transmission, fixed lp_defer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_defferedTransmissionLink = lp_transmission;
    libCOMI_gv_defferedTransmissionDefer = lp_defer;
    libCOMI_gv_defferedTransmissionDelay = 0.0;
    libCOMI_gv_defferedTask = 0;
    TriggerExecute(libCOMI_gt_DefferedTransmission, true, false);
}

void libCOMI_gf_ThankYou (int lp_caster, int lp_target) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CommanderVOSend(lp_caster, libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lp_target), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(lp_target));
}

void libCOMI_gf_TeamThankYou (int lp_caster) {
    // Variable Declarations
    playergroup lv_team;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = libCOMI_gf_GetTeammates(lp_caster);

    // Implementation
    if ((PlayerGroupCount(lv_team) > 0)) {
        lv_player = PlayerGroupPlayer(lv_team, RandomInt(1, PlayerGroupCount(lv_team)));
        libCOMI_gf_CM_CommanderVOSend(lp_caster, libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_player), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOThankyou), PlayerGroupSingle(lv_player));
    }

}

void libCOMI_gf_CM_CommanderVOSend (int lp_listenerPlayer, soundlink lp_vOSound, playergroup lp_targetPlayers) {
    // Automatic Variable Declarations
    // Implementation
    SoundSetListenerGender(lp_vOSound, libCOMI_gf_CC_CommanderGender(libCOMI_gf_ActiveCommanderForPlayer(lp_listenerPlayer)));
    SoundPlayForPlayer(lp_vOSound, 1, lp_targetPlayers, 100.0, 0.0);
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;
abilcmd auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_abilityCommand;

void libCOMI_gf_CM_CommanderVOAbilityWatch (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, abilcmd lp_abilityCommand) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit = lp_unit;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_abilityCommand = lp_abilityCommand;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatch_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatch_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_unit;
    abilcmd lp_abilityCommand = auto_libCOMI_gf_CM_CommanderVOAbilityWatch_lp_abilityCommand;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_abilityCommand != null) && (TechTreeAbilityIsAllowed(lp_player, lp_abilityCommand) == false)) {
        return true;
    }

    while (true) {
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) > 0.0))) {
            Wait(1.0, c_timeGame);
        }
        while (!((PlayerGetCooldown(lp_player, lp_cooldownLink) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        if (((lp_unit == null) || (UnitIsAlive(lp_unit) == true))) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

trigger auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = null;
int auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
soundlink auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
unit auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
string auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

void libCOMI_gf_CM_CommanderVOAbilityWatchUnit (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability) {
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player = lp_player;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound = lp_vOSound;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink = lp_cooldownLink;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit = lp_unit;
    auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability = lp_ability;

    if (auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger == null) {
        auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_player;
    soundlink lp_vOSound = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_vOSound;
    string lp_cooldownLink = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_cooldownLink;
    unit lp_unit = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_unit;
    string lp_ability = auto_libCOMI_gf_CM_CommanderVOAbilityWatchUnit_lp_ability;

    // Automatic Variable Declarations
    // Implementation
    while (true) {
        while (!(((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) > 20.0) || ((UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) == 0.0) && (UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) > 20.0))))) {
            Wait(1.0, c_timeGame);
        }
        while (!((UnitAbilityGetCooldown(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) && ((UnitAbilityGetChargeRegen(lp_unit, lp_ability, lp_cooldownLink) <= 0.0) || (UnitAbilityChargeInfo(lp_unit, AbilityCommand(lp_ability, 0), c_unitAbilChargeCountLeft) > 0.0)))) {
            Wait(1.0, c_timeGame);
        }
        if ((UnitIsAlive(lp_unit) == true)) {
            libCOMI_gf_CM_CommanderVOSend(lp_player, lp_vOSound, PlayerGroupSingle(lp_player));
        }

    }
    return true;
}

soundlink libCOMI_gf_CC_CommanderVOLine (string lp_commander, int lp_line) {
    // Variable Declarations
    string lv_vOSound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vOSound = UserDataGetSound("Commanders", lp_commander, "StandardVO", (lp_line));
    if ((lv_vOSound == null)) {
        return null;
    }

    return SoundLink(lv_vOSound, c_soundIndexAny);
}

void libCOMI_gf_CM_CommanderVOInit () {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;

    // Automatic Variable Declarations
    playergroup auto24DB78C3_g;
    int auto53C20295_ai;
    int auto53C20295_ae;
    playergroup auto8051EF80_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cM_VOGroupGender = c_genderFemale;
    auto24DB78C3_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto24DB78C3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_CC_CommanderGender(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)) == c_genderMale)) {
            libCOMI_gv_cM_VOGroupGender = c_genderMale;
            break;
        }

    }
    ConversationDataSetListenerGender("acObj", libCOMI_gv_cM_VOGroupGender);
    ConversationDataSetListenerGender("acResponses", libCOMI_gv_cM_VOGroupGender);
    ConversationDataRegisterPortrait("char_TerranAdjutant", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ProtossExecutor", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Izsha", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_SgtHammer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_DominionOfficer", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ShakurasAlly", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Hill", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_TDChampion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Vermillion", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_BelshirScientist", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_StetmannCommander", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_MengskCommander", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACJarbanMiner", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACMeinhoffMedic", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACAiurSiege", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACCybrosEscort", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_ACPartAndParcel", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    ConversationDataRegisterPortrait("char_Stone", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    auto53C20295_ai = 1;
    auto53C20295_ae = UserDataInstanceCount("PlayerCommander")+1;
    while (auto53C20295_ai < auto53C20295_ae) {
        lv_indexCommander = UserDataInstance("PlayerCommander", auto53C20295_ai);
        auto53C20295_ai = auto53C20295_ai+1;
        ConversationDataRegisterPortrait(libCOMI_gf_CC_CommanderConversationLink(lv_indexCommander), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    }
    ConversationDataRegisterPortrait("char_Han", libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft));
    libCOMI_gf_CM_VOResourceInit();
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, true);
    TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
    auto8051EF80_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto8051EF80_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 1) && (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) != 2)) {
            TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, true);
        }

    }
}

void libCOMI_gf_CC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_muteChannel != lp_ignoredChannel)) {
        SoundChannelMute(lp_players, lp_muteChannel, lp_muteUnmute);
    }

}

void libCOMI_gf_SetAllSoundChannelVolumesCampaign (int lp_mode) {
    // Automatic Variable Declarations
    int auto307A9BAC_val;

    // Implementation
    auto307A9BAC_val = lp_mode;
    if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Cinematic) {
        libARRA_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, PlayerGroupAll());
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Game) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInLowHP == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 0.25);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = true;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupAll(), 1.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Speech) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, PlayerGroupAll(), 2.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto307A9BAC_val == libCOMI_ge_VolumeChannelModeCampaign_EvolutionUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, PlayerGroupAll(), 1.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.5);
    }
    else {
    }
}

void libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign (int lp_mode, playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    int auto5366794A_val;

    // Implementation
    auto5366794A_val = lp_mode;
    if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Cinematic) {
        libARRA_gf_SetAllSoundChannelVolumesStandardTiming(libNtve_ge_VolumeChannelMode_Cinematic, lp_playerGroup);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Game) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInLowHP == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin, lp_playerGroup);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Game2) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.25);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Game3) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 0.25);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.1);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = true;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech, lp_playerGroup);
            return ;
        }

        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 80.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 25.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_LowHealthEnd) {
        libCOMI_gv_cC_VolumeChannelModeInLowHP = false;
        if ((libCOMI_gv_cC_VolumeChannelModeInSpeech == true)) {
            libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech, lp_playerGroup);
            return ;
        }

        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, lp_playerGroup, 1.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 1.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Speech) {
        libCOMI_gv_cC_VolumeChannelModeInSpeech = true;
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Speech, lp_playerGroup, 2.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Speech2) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Speech3) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 60.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 35.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 50.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects) {
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAlert, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 12.5, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryBuild, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryCombat, 50.0, 0.05);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDeath, 3.125, 0.05);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDoodad, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFlames, 12.5, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryFoley, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryGather, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryME, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovement, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryOther, 100.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryReady, 6.25, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 25.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySPieces, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 3.125, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryTV, 0.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryUI, 70.0, 2.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 2.0);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_MissionLaunchUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMusic, 100.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_Victory) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 0.0, 0.5);
    }
    else if (auto5366794A_val == libCOMI_ge_VolumeChannelModeCampaign_EvolutionUI) {
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Victory, lp_playerGroup, 1.0);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryDialogue, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySEmitters, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySAmbient, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMovie, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategoryMission, 100.0, 0.5);
        SoundChannelSetVolume(lp_playerGroup, c_soundCategorySpell, 100.0, 0.5);
    }
    else {
    }
}

void libCOMI_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAlert, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryAmbient, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryBuild, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryCombat, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDeath, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDialogue, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryDoodad, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFlames, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryFoley, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryGather, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryME, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMission, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovement, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMovie, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryMusic, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryOther, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryReady, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySAmbient, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySEmitters, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySPieces, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategorySpell, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryTV, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryUI, lp_ignoredChannel, lp_players);
    libCOMI_gf_CC_MuteUnmuteExclusive(lp_muteUnmute, c_soundCategoryVoice, lp_ignoredChannel, lp_players);
}

bool libCOMI_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_validAttackerFound;
    point lv_unitPosition;

    // Automatic Variable Declarations
    unitgroup auto4C6B244C_g;
    int auto4C6B244C_u;
    unit auto4C6B244C_var;
    unitgroup auto89AFDACF_g;
    int auto89AFDACF_u;
    unit auto89AFDACF_var;

    // Variable Initialization

    // Implementation
    lv_unitPosition = UnitGetPosition(lp_unit);
    auto4C6B244C_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 16.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C6B244C_u = UnitGroupCount(auto4C6B244C_g, c_unitCountAll);
    for (;; auto4C6B244C_u -= 1) {
        auto4C6B244C_var = UnitGroupUnitFromEnd(auto4C6B244C_g, auto4C6B244C_u);
        if (auto4C6B244C_var == null) { break; }
        if ((UnitCanAttackTarget(auto4C6B244C_var, lp_unit) == true)) {
            lv_validAttackerFound = true;
            break;
        }

    }
    if ((lv_validAttackerFound == false)) {
        auto89AFDACF_g = UnitGroup(null, lp_player, RegionCircle(lv_unitPosition, 8.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto89AFDACF_u = UnitGroupCount(auto89AFDACF_g, c_unitCountAll);
        for (;; auto89AFDACF_u -= 1) {
            auto89AFDACF_var = UnitGroupUnitFromEnd(auto89AFDACF_g, auto89AFDACF_u);
            if (auto89AFDACF_var == null) { break; }
            if ((UnitCanAttackTarget(auto89AFDACF_var, lp_unit) == true)) {
                lv_validAttackerFound = true;
                break;
            }

        }
    }

    return lv_validAttackerFound;
}

trigger auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = null;

void libCOMI_gf_RemindPlayertoCreateAntiAirUnits () {
    if (auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger == null) {
        auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger = TriggerCreate("auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_Trigger, false, false);
}

bool auto_libCOMI_gf_RemindPlayertoCreateAntiAirUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;
    bool lv_sendTransmission;

    // Automatic Variable Declarations
    unitgroup auto78DC738F_g;
    int auto78DC738F_u;

    // Variable Initialization

    // Implementation
    while (true) {
        auto78DC738F_g = UnitGroupAlliance(PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
        auto78DC738F_u = UnitGroupCount(auto78DC738F_g, c_unitCountAll);
        for (;; auto78DC738F_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto78DC738F_g, auto78DC738F_u);
            if (lv_currentUnit == null) { break; }
            if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                if ((libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                    Wait(5.0, c_timeAI);
                    if ((UnitIsAlive(lv_currentUnit) == true)) {
                        if ((UnitGroupCount(UnitGroup(null, 1, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0) && (libCOMI_gf_ValidAntiAirUnitIsNearUnit(1, lv_currentUnit) == false)) {
                            lv_sendTransmission = true;
                        }

                    }

                }

                break;
            }

            Wait(0.1, c_timeAI);
        }
        if ((lv_sendTransmission == true)) {
            break;
        }

        Wait(1.0, c_timeAI);
    }
    TriggerQueueEnter();
    if ((libCOMI_gf_GameIsOver() == true)) {
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    return true;
}

trigger auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger = null;
soundlink auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink;
fixed auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay;
playergroup auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers;

void libCOMI_gf_CM_HeroReviveQueue_PlaySound (soundlink lp_soundLink, fixed lp_soundDelay, playergroup lp_listeningPlayers) {
    auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink = lp_soundLink;
    auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay = lp_soundDelay;
    auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers = lp_listeningPlayers;

    if (auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger == null) {
        auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger = TriggerCreate("auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundLink;
    fixed lp_soundDelay = auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_soundDelay;
    playergroup lp_listeningPlayers = auto_libCOMI_gf_CM_HeroReviveQueue_PlaySound_lp_listeningPlayers;

    // Variable Declarations
    fixed lv_maxsounddelay;
    timer lv_sounddelaytimer;
    timer lv_maxsounddelaytimer;
    fixed lv_soundtaildelay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxsounddelay = 15.0;
    lv_sounddelaytimer = TimerCreate();
    lv_maxsounddelaytimer = TimerCreate();

    // Implementation
    TimerStart(lv_sounddelaytimer, lp_soundDelay, false, c_timeReal);
    TimerStart(lv_maxsounddelaytimer, lv_maxsounddelay, false, c_timeReal);
    while (!((((libCOMI_gv_cM_HeroReviveQueue_ActiveListeners == false) && (TimerGetRemaining(lv_sounddelaytimer) <= 0.0)) || (TimerGetRemaining(lv_maxsounddelaytimer) <= 0.0)))) {
        Wait(0.25, c_timeReal);
    }
    if ((TimerGetRemaining(lv_maxsounddelaytimer) <= 0.0)) {
        return true;
    }

    libCOMI_gv_cM_HeroReviveQueue_ActiveListeners = true;
    SoundPlayForPlayer(lp_soundLink, 1, lp_listeningPlayers, 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    Wait(lv_soundtaildelay, c_timeReal);
    libCOMI_gv_cM_HeroReviveQueue_ActiveListeners = false;
    return true;
}

trigger auto_libCOMI_gf_CM_VOResourceInit_Trigger = null;

void libCOMI_gf_CM_VOResourceInit () {
    if (auto_libCOMI_gf_CM_VOResourceInit_Trigger == null) {
        auto_libCOMI_gf_CM_VOResourceInit_Trigger = TriggerCreate("auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_VOResourceInit_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_VOResourceInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_VOResourceReqSendButton = DialogControlLastCreated();
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, true);
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, true);
    return true;
}

void libCOMI_gf_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_TransmissionCurrentType = lp_transmissionType;
    libCOMI_gv_cM_TransmissionSource = lp_sourcePlayer;
    TriggerExecute(libCOMI_gt_CM_TransmissionSend, true, lp_waitUntilDone);
}

void libCOMI_gf_SendVictoryTransmission (string lp_mapVictoryTransmission) {
    // Variable Declarations
    int lv_source;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_source = RandomInt(0, PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()));

    // Implementation
    if ((lv_source == 0)) {
        libCOMI_gf_SendMissionTransmission(lp_mapVictoryTransmission, false, -1);
    }
    else {
        libCOMI_gf_SendMissionTransmission("Victory", false, lv_source);
    }
}

void libCOMI_gf_SendSplitMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_primaryPlayer, int lp_sourcePlayer) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_primaryPlayers;
    playergroup lv_secondaryPlayers;

    // Automatic Variable Declarations
    playergroup auto0346F589_g;

    // Variable Initialization
    lv_primaryPlayers = PlayerGroupEmpty();
    lv_secondaryPlayers = PlayerGroupEmpty();

    // Implementation
    libCOMI_gv_cM_TransmissionPrimaryPlayers = PlayerGroupEmpty();
    libCOMI_gv_cM_TransmissionSecondaryPlayers = PlayerGroupEmpty();
    auto0346F589_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0346F589_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lv_indexPlayer == lp_primaryPlayer)) {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer);
        }
        else {
            PlayerGroupAdd(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer);
        }
    }
    libCOMI_gf_SendMissionTransmission(lp_transmissionType, lp_waitUntilDone, lp_sourcePlayer);
}

void libCOMI_gf_WaitForMissionTransmission () {
    // Variable Declarations
    int lv_originalCount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TriggerActiveCount(libCOMI_gt_CM_TransmissionSend) == 0)) {
        return ;
    }

    lv_originalCount = libCOMI_gv_cM_TransmissionCount;
    while (!(((lv_originalCount != libCOMI_gv_cM_TransmissionCount) || (libCOMI_gv_cM_TransmissionCurrentType == null)))) {
        Wait(0.0625, c_timeGame);
    }
}

void libCOMI_gf_CM_TransmissionUpdateConvoPlayers (string lp_conversation) {
    // Variable Declarations
    playergroup lv_terranPlayers;
    playergroup lv_zergPlayers;
    playergroup lv_protossPlayers;
    playergroup lv_primaryTerranPlayers;
    playergroup lv_primaryZergPlayers;
    playergroup lv_primaryProtossPlayers;
    playergroup lv_secondaryTerranPlayers;
    playergroup lv_secondaryZergPlayers;
    playergroup lv_secondaryProtossPlayers;
    playergroup lv_alarakPlayers;
    playergroup lv_notAlarakPlayers;
    int lv_indexPlayer;
    string lv_adjutantRace;

    // Automatic Variable Declarations
    playergroup auto6088D53C_g;
    string auto085E9DF9_val;
    string auto11F928C9_val;

    // Variable Initialization
    lv_terranPlayers = PlayerGroupEmpty();
    lv_zergPlayers = PlayerGroupEmpty();
    lv_protossPlayers = PlayerGroupEmpty();
    lv_primaryTerranPlayers = PlayerGroupEmpty();
    lv_primaryZergPlayers = PlayerGroupEmpty();
    lv_primaryProtossPlayers = PlayerGroupEmpty();
    lv_secondaryTerranPlayers = PlayerGroupEmpty();
    lv_secondaryZergPlayers = PlayerGroupEmpty();
    lv_secondaryProtossPlayers = PlayerGroupEmpty();
    lv_alarakPlayers = PlayerGroupEmpty();
    lv_notAlarakPlayers = PlayerGroupEmpty();

    // Implementation
    auto6088D53C_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6088D53C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerStatus(lv_indexPlayer) == c_playerStatusLeft)) {
            continue;
        }

        if ((lp_conversation == "acVictory")) {
            ConversationDataLineSetPlayers("acVictory", (libCOMI_gf_CC_CommanderConvoTag(libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gf_CC_PlayerAlly(lv_indexPlayer)))), PlayerGroupSingle(lv_indexPlayer));
        }

        lv_adjutantRace = UserDataGetGameLink("Commanders", libCOMI_gf_CC_CommanderUserInstance(libCOMI_gf_GetPlayerCommanderGameLink(lv_indexPlayer)), "AdjutantRace", 1);
        auto085E9DF9_val = lv_adjutantRace;
        if (auto085E9DF9_val == "Terr") {
            lv_adjutantRace = "Terr";
        }
        else if (auto085E9DF9_val == "Prot") {
            lv_adjutantRace = "Prot";
        }
        else if (auto085E9DF9_val == "Zerg") {
            lv_adjutantRace = "Zerg";
        }
        else {
            lv_adjutantRace = PlayerRace(lv_indexPlayer);
        }
        auto11F928C9_val = lv_adjutantRace;
        if (auto11F928C9_val == "Terr") {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryTerranPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryTerranPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "Prot") {
            PlayerGroupAdd(lv_protossPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryProtossPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryProtossPlayers, lv_indexPlayer);
            }

        }
        else if (auto11F928C9_val == "Zerg") {
            PlayerGroupAdd(lv_zergPlayers, lv_indexPlayer);
            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionPrimaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_primaryZergPlayers, lv_indexPlayer);
            }

            if ((PlayerGroupHasPlayer(libCOMI_gv_cM_TransmissionSecondaryPlayers, lv_indexPlayer) == true)) {
                PlayerGroupAdd(lv_secondaryZergPlayers, lv_indexPlayer);
            }

        }
        else {
            PlayerGroupAdd(lv_terranPlayers, lv_indexPlayer);
        }
    }
    ConversationDataLineSetPlayers(lp_conversation, ("Protoss"), lv_protossPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Terran"), lv_terranPlayers);
    ConversationDataLineSetPlayers(lp_conversation, ("Zerg"), lv_zergPlayers);
    if ((PlayerGroupCount(libCOMI_gv_cM_TransmissionPrimaryPlayers) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryProtoss"), lv_primaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryZerg"), lv_primaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("PrimaryTerran"), lv_primaryTerranPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryProtoss"), lv_secondaryProtossPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryZerg"), lv_secondaryZergPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("SecondaryTerran"), lv_secondaryTerranPlayers);
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_SlaynPayload")) {
        lv_notAlarakPlayers = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_alarakPlayers = libCOMI_gf_CC_PlayersOfCommander("Alarak");
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lv_alarakPlayers, lv_notAlarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("Alarak"), lv_alarakPlayers);
        ConversationDataLineSetPlayers(lp_conversation, ("NotAlarak"), lv_notAlarakPlayers);
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_BelshirEscort") && (PlayerGroupCount(libCOMI_gf_CC_PlayersOfCommander("Stetmann")) > 0)) {
        ConversationDataLineSetPlayers(lp_conversation, ("Stetmann"), libCOMI_gf_GetAlliedCommandersPlayersCopy());
        ConversationDataLineSetPlayers(lp_conversation, ("NotStetmann"), PlayerGroupSingle(0));
    }

}

bool libCOMI_gf_CM_PlayerHasTransmission (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerStatus(lp_player) != c_playerStatusActive)) {
        return false;
    }

    if ((TransmissionPlayerHasActiveTransmission(lp_player) == false)) {
        return false;
    }

    return true;
}

void libCOMI_gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libCOMI_gv_cM_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libCOMI_gv_cM_SendTransmissionCampaignSpeaker;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libCOMI_gv_cM_SendTransmissionCampaignTrigger;
    libCOMI_gv_cM_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libCOMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft);
        }
        else {
            lv_portrait = libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_BottomLeft);
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if (((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, 1) == false)))) {
        libARRA_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }

    libCOMI_gv_cM_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libCOMI_gv_cM_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }

    libCOMI_gv_cM_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((PlayerType(UnitGetOwner(lp_unit)) == c_playerTypeUser)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, true, "Talk");
                }

            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                if (((UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "WarPig") || (UnitGetType(lp_unit) == "MengskMarine") || (UnitGetType(lp_unit) == "Medic") || (UnitGetType(lp_unit) == "Firebat") || (UnitGetType(lp_unit) == "Marauder"))) {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.500000");
                }
                else {
                    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                }
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness TalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
            }
            lv_talkBubble = ActorFrom("::LastCreatedActual");
            libNtve_gf_AttachModelToUnit(lp_unit, "TalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_unit, PlayerGroupPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), 1)) == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "TalkIcon", PointWithOffset(UnitGetPosition(lp_unit), 0.5, 3.5), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 2.0, 270.0);
            lv_ping = PingLastCreated();
            PingSetScale(PingLastCreated(), 0.3);
        }

    }

    TransmissionSendAdvanced(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone);
    if ((lp_waitUntilDone == false)) {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
    else {
        libCOMI_gf_CM_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_ping, lv_localIndex);
    }
}

trigger auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

void libCOMI_gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex) {
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_talkIcon;
    int lp_ping = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libCOMI_gf_CM_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }

    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libCOMI_gv_cM_SendTransmissionCampaignIndex)) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter)) {
            PortraitSetModel(lp_portrait, "StaticPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }

        return true;
    }

    libCOMI_gv_cM_SendTransmissionCampaignIndex = 0;
    libCOMI_gv_cM_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libCOMI_gt_CM_SendTransmissionCampaignTick, true, false);
    if ((lp_keepPortraitVisible == libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId)) {
        PortraitSetModel(lp_portrait, "StaticPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }

    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }

    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }

    return true;
}

void libCOMI_gf_HideCampaignTransmissionPortrait () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

void libCOMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    // Automatic Variable Declarations
    int auto664A67F5_val;

    // Implementation
    auto664A67F5_val = lp_option;
    if (auto664A67F5_val == libCOMI_ge_MissionTransmissionOptions_ChatBubble) {
        libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

fixed libCOMI_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libCOMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }

    libCOMI_gf_CM_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libCOMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;
    string lv_portraitActor;

    // Automatic Variable Declarations
    string auto41A5E975_val;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);
    lv_portraitActor = "";

    // Implementation
    auto41A5E975_val = UnitGetType(lp_unit);
    if (auto41A5E975_val == "KerriganVoidUlnar02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganVoidBurrowed") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else if (auto41A5E975_val == "KerriganEpilogue02") {
        lv_portraitActor = "KerriganPrimalPortrait";
    }
    else {
    }
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    libCOMI_gf_CM_SendTransmissionCampaignInternal(true, lp_unit, lp_model, lv_sound, lp_speaker, (StringExternal("Param/Value/lib_COMI_19071613") + lp_message), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, lv_portraitActor);
}

void libCOMI_gf_EnableDisableCoopAIWavePings (bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cM_CoopAI_WavePingShowAll = lp_enableDisable;
}

trigger auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = null;
wave auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

void libCOMI_gf_EnableDisableCoopAIWavePing (wave lp_attackWave, bool lp_enableDisable) {
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave = lp_attackWave;
    auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable = lp_enableDisable;

    if (auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger == null) {
        auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger = TriggerCreate("auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_EnableDisableCoopAIWavePing_Trigger, false, false);
}

bool auto_libCOMI_gf_EnableDisableCoopAIWavePing_TriggerFunc (bool testConds, bool runActions) {
    wave lp_attackWave = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_attackWave;
    bool lp_enableDisable = auto_libCOMI_gf_EnableDisableCoopAIWavePing_lp_enableDisable;

    // Variable Declarations
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;

    // Automatic Variable Declarations
    playergroup autoE6735AAB_g;
    int auto2A7BD62F_ae;
    const int auto2A7BD62F_ai = 1;
    fixed autoF7E66F8C_at;

    // Variable Initialization

    // Implementation
    autoE6735AAB_g = libCOMI_gv_cM_CoopAI_Players;
    lv_attackWavePlayerIterPrimary = -1;
    while (true) {
        lv_attackWavePlayerIterPrimary = PlayerGroupNextPlayer(autoE6735AAB_g, lv_attackWavePlayerIterPrimary);
        if (lv_attackWavePlayerIterPrimary < 0) { break; }
        auto2A7BD62F_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
        lv_attackWavePingIterPrimary = 0;
        for ( ; ( (auto2A7BD62F_ai >= 0 && lv_attackWavePingIterPrimary <= auto2A7BD62F_ae) || (auto2A7BD62F_ai < 0 && lv_attackWavePingIterPrimary >= auto2A7BD62F_ae) ) ; lv_attackWavePingIterPrimary += auto2A7BD62F_ai ) {
            if ((lp_attackWave == libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary])) {
                libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] = true;
            }

        }
    }
    autoF7E66F8C_at = 0;
    while (!((lp_attackWave != null) && (AIWaveGetUnits(lp_attackWave) != UnitGroupEmpty()) && (AIWaveGetUnits(lp_attackWave) != null) && (UnitGroupCount(AIWaveGetUnits(lp_attackWave), c_unitCountAlive) > 0)) && autoF7E66F8C_at <= 90.0) {
        Wait(0.1, c_timeGame);
        autoF7E66F8C_at = autoF7E66F8C_at + 0.1;
    }
    UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_DontPingUnits, AIWaveGetUnits(lp_attackWave));
    while (!((lp_attackWave == null))) {
        Wait(1.0, c_timeGame);
    }
    if ((lv_attackWavePlayerIterPrimary >= 0) && (lv_attackWavePingIterPrimary >= 0)) {
        libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] = false;
    }

    return true;
}

void libCOMI_gf_EnableDisableCoopAIPlayerAttackPings (playergroup lp_players, bool lp_enableDisable) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == false)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
    else {
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, libCOMI_gv_cM_CoopAI_DontPingPlayers);
    }
}

bool libCOMI_gf_CM_CoopAI_PingWorthyUnit (unit lp_pingableUnit) {
    // Variable Declarations
    string lv_unitTypeIter;
    string lv_pingableUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_pingableUnitType = UnitGetType(lp_pingableUnit);
    return true;
}

bool libCOMI_gf_VU_isPingException (string lp_unit) {
    // Variable Declarations
    string lv_pingWorthlessUnitTypeIter;
    int lv_index;

    // Automatic Variable Declarations
    int auto968A26F4_ae;
    const int auto968A26F4_ai = 1;

    // Variable Initialization

    // Implementation
    auto968A26F4_ae = UserDataFieldValueCount("CoopAIPingWorthlessUnits", "Unit");
    lv_index = 1;
    for ( ; ( (auto968A26F4_ai >= 0 && lv_index <= auto968A26F4_ae) || (auto968A26F4_ai < 0 && lv_index >= auto968A26F4_ae) ) ; lv_index += auto968A26F4_ai ) {
        lv_pingWorthlessUnitTypeIter = UserDataGetUnit("CoopAIPingWorthlessUnits", UserDataInstance("CoopAIPingWorthlessUnits", lv_index), "Unit", 1);
        if ((lv_pingWorthlessUnitTypeIter == null)) {
            break;
        }

        if ((lp_unit == lv_pingWorthlessUnitTypeIter)) {
            continue;
        }
        else {
            return true;
        }
    }
    return false;
}

bool libCOMI_gf_UnitisValidforanAttackWavePing (unit lp_pingableUnit) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_CM_CoopAI_PingWorthyUnit(lp_pingableUnit);
}

int libCOMI_gf_PingTypeFromObjectiveType (bool lp_objectiveType) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_objectiveType == true)) {
        return libCOMI_ge_ObjectivePingType_Primary;
    }

    return libCOMI_ge_ObjectivePingType_Secondary;
}

trigger auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = null;
point auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

void libCOMI_gf_AttentionGrabbingObjectivePing (point lp_pingLocation) {
    auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation = lp_pingLocation;

    if (auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger == null) {
        auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger = TriggerCreate("auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AttentionGrabbingObjectivePing_Trigger, false, false);
}

bool auto_libCOMI_gf_AttentionGrabbingObjectivePing_TriggerFunc (bool testConds, bool runActions) {
    point lp_pingLocation = auto_libCOMI_gf_AttentionGrabbingObjectivePing_lp_pingLocation;

    // Variable Declarations
    int lv_scaleIter;
    fixed lv_pingScale;
    int lv_spiningShrinkingPing;

    // Automatic Variable Declarations
    const int autoE898793D_ae = 20;
    const int autoE898793D_ai = -1;

    // Variable Initialization
    lv_spiningShrinkingPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_pingLocation, 270.0, "PingObjective", ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 4.0);
    lv_spiningShrinkingPing = PingLastCreated();
    PingSetScale(lv_spiningShrinkingPing, 3.0);
    lv_scaleIter = 40;
    for ( ; ( (autoE898793D_ai >= 0 && lv_scaleIter <= autoE898793D_ae) || (autoE898793D_ai < 0 && lv_scaleIter >= autoE898793D_ae) ) ; lv_scaleIter += autoE898793D_ai ) {
        lv_pingScale = (lv_scaleIter * 0.1);
        PingSetScale(lv_spiningShrinkingPing, lv_pingScale);
        PingSetRotation(lv_spiningShrinkingPing, (360 - (ModF(lv_scaleIter, 10.0) * 36)));
        Wait(0.1, c_timeReal);
    }
    libCOMI_gf_DestroyPingCoop(lv_spiningShrinkingPing);
    return true;
}

void libCOMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip) {
    // Automatic Variable Declarations
    // Deprecated
    libCOMI_gf_CreateObjectivePingAC(libCOMI_gf_PingTypeFromObjectiveType(lp_objectiveType), lp_position, lp_tooltip);
}

void libCOMI_gf_CreateObjectivePingAC (int lp_objectiveType, point lp_position, text lp_tooltip) {
    // Variable Declarations
    color lv_color;
    fixed lv_scale;
    string lv_model;
    fixed lv_angle;

    // Automatic Variable Declarations
    int auto7500AD90_val;

    // Variable Initialization
    lv_color = Color(0,0,0);

    // Implementation
    auto7500AD90_val = lp_objectiveType;
    if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Primary) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 1.0;
        lv_model = "PingObjective";
        lv_angle = 270.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_Secondary) {
        lv_color = Color(100.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingTriangle";
        lv_angle = 90.0;
    }
    else if (auto7500AD90_val == libCOMI_ge_ObjectivePingType_POI) {
        lv_color = Color(0.00, 100.00, 0.00);
        lv_scale = 0.4;
        lv_model = "PingSimple";
        lv_angle = 90.0;
    }
    else {
    }
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), lp_position, lv_angle, lv_model, lv_color, 0.0);
    PingSetScale(PingLastCreated(), lv_scale);
    PingSetTooltip(PingLastCreated(), lp_tooltip);
    TriggerExecute(libCOMI_gt_VoidPingSound, true, false);
}

trigger auto_libCOMI_gf_PingMinimapCampaign_Trigger = null;
playergroup auto_libCOMI_gf_PingMinimapCampaign_lp_players;
point auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
fixed auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
color auto_libCOMI_gf_PingMinimapCampaign_lp_color;

void libCOMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color) {
    auto_libCOMI_gf_PingMinimapCampaign_lp_players = lp_players;
    auto_libCOMI_gf_PingMinimapCampaign_lp_pos = lp_pos;
    auto_libCOMI_gf_PingMinimapCampaign_lp_dur = lp_dur;
    auto_libCOMI_gf_PingMinimapCampaign_lp_color = lp_color;

    if (auto_libCOMI_gf_PingMinimapCampaign_Trigger == null) {
        auto_libCOMI_gf_PingMinimapCampaign_Trigger = TriggerCreate("auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_PingMinimapCampaign_Trigger, false, false);
}

bool auto_libCOMI_gf_PingMinimapCampaign_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libCOMI_gf_PingMinimapCampaign_lp_players;
    point lp_pos = auto_libCOMI_gf_PingMinimapCampaign_lp_pos;
    fixed lp_dur = auto_libCOMI_gf_PingMinimapCampaign_lp_dur;
    color lp_color = auto_libCOMI_gf_PingMinimapCampaign_lp_color;

    // Automatic Variable Declarations
    playergroup autoC51461E9_g;
    int autoC51461E9_var;
    string autoC47256CC_val;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(lp_players, lp_pos, 270.0, "PingAlert", lp_color, lp_dur);
    autoC51461E9_g = lp_players;
    autoC51461E9_var = -1;
    while (true) {
        autoC51461E9_var = PlayerGroupNextPlayer(autoC51461E9_g, autoC51461E9_var);
        if (autoC51461E9_var < 0) { break; }
        autoC47256CC_val = PlayerRace(autoC51461E9_var);
        if (autoC47256CC_val == "Prot") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Terr") {
            SoundPlay(SoundLink("UI_TerranPing", -1), lp_players, 100.0, 0.0);
        }
        else if (autoC47256CC_val == "Zerg") {
            SoundPlay(SoundLink("UI_ZergWarningPing", -1), lp_players, 100.0, 0.0);
        }
        else {
        }
    }
    Wait(lp_dur, c_timeGame);
    libCOMI_gf_DestroyPingCoop(PingLastCreated());
    return true;
}

void libCOMI_gf_DestroyPingCoop (int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    PingDestroy(lp_ping);
}

void libCOMI_gf_CreatePingFacingAngleCoop (playergroup lp_players, point lp_position, fixed lp_angle, string lp_model, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreatePingFacingAngle(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_angle);
    if (((libCOMI_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMI_gf_MutatorIsEnabled("UberDarkness") == true))) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingWithPointFacingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, int lp_playerId) {
    // Automatic Variable Declarations
    // Implementation
    PingCreateWithPlayerId(lp_players, lp_model, lp_position, lp_color, lp_duration, lp_playerId);
    if (((libCOMI_gf_MutatorIsEnabled("BlackFog") == true) || (libCOMI_gf_MutatorIsEnabled("UberDarkness") == true))) {
        PingSetUsePlayerVision(PingLastCreated(), true);
    }

}

void libCOMI_gf_CreatePingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CreatePingWithPointFacingCoop(lp_players, lp_model, lp_position, lp_color, lp_duration, 0);
}

void libCOMI_gf_ShowHidePingCoop (int lp_ping, bool lp_visible) {
    // Automatic Variable Declarations
    // Implementation
    PingSetVisible(lp_ping, lp_visible);
}

void libCOMI_gf_CreateAlertAtPointCampaign (string lp_alertType, text lp_text, string lp_icon, point lp_point) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto30CC37A9_g;

    // Variable Initialization

    // Implementation
    auto30CC37A9_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto30CC37A9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        UIAlertPoint(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_point);
    }
}

void libCOMI_gf_CreateAlertAtUnitCampaign (string lp_alertType, text lp_text, string lp_icon, unit lp_unit) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0BE3493B_g;

    // Variable Initialization

    // Implementation
    auto0BE3493B_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0BE3493B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        UIAlertUnit(lp_alertType, lv_indexPlayer, lp_text, lp_icon, lp_unit);
    }
}

void libCOMI_gf_UT_CreatePieChart (int lp_pPlayer) {
    // Variable Declarations
    text lv_vAdditionalScore;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_pPlayer) == "Dehaka")) {
        TextExpressionSetToken("Param/Expression/lib_COMI_91287093", "A", libARRA_gf_UT_RealSecondsIntoTimeFormat(PlayerScoreValueGetAsFixed(lp_pPlayer, "Devouroffcooldown")));
        lv_vAdditionalScore = TextExpressionAssemble("Param/Expression/lib_COMI_91287093");
    }

    if ((libCOMI_gf_ActiveCommanderForPlayer(lp_pPlayer) == "Mengsk")) {
        TextExpressionSetToken("Param/Expression/lib_COMI_2707D36C", "A", FixedToText(PlayerScoreValueGetAsFixed(lp_pPlayer, "DamageDealtbyContaminatedStrike"), 0));
        TextExpressionSetToken("Param/Expression/lib_COMI_2707D36C", "B", FixedToText((100*PlayerScoreValueGetAsFixed(lp_pPlayer, "DamageDealtbyContaminatedStrike")/libARRA_gf_UT_TotalDamageHeal(lp_pPlayer, libARRA_ge_DamageHeal_Damage)), 0));
        lv_vAdditionalScore = TextExpressionAssemble("Param/Expression/lib_COMI_2707D36C");
    }

}

void libCOMI_gf_CC_ScoreInit () {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexCommander;
    string lv_indexMission;
    string lv_missionScore;

    // Automatic Variable Declarations
    playergroup auto9F36399C_g;

    // Variable Initialization

    // Implementation
    auto9F36399C_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto9F36399C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_missionScore = libCOMI_gf_CC_MapScoreStatistic(libCOMI_gf_CC_CurrentMap());
        if ((lv_missionScore != null)) {
            PlayerScoreValueSetFromInt(lv_indexPlayer, "MissionScore", CatalogFieldValueGetAsInt(c_gameCatalogScoreValue, lv_missionScore, "UniqueTag", c_playerAny));
        }

        PlayerScoreValueSetFromInt(lv_indexPlayer, "MetaExperience", 0);
        PlayerScoreValueSetFromInt(lv_indexPlayer, "MissionXP", 0);
        PlayerScoreValueSetFromInt(lv_indexPlayer, "BonusObjectiveXP", 0);
    }
}

void libCOMI_gf_SetMissionEffort (fixed lp_percentEffort) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto017BBBF9_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cC_PlayerExperienceEffortPct = lp_percentEffort;
    auto017BBBF9_g = libCOMI_gf_GetNonDefeatedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto017BBBF9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_CC_PlayerSetXPScores(c_gameOverDefeat, lv_indexPlayer);
    }
}

void libCOMI_gf_CC_ScoreValueSet (int lp_player, string lp_scoreType, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    PlayerScoreValueSetFromInt(lp_player, lp_scoreType, lp_value);
}

int libCOMI_gf_CC_StatEventLast () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_pC_StatEventLastCampaign;
}

void libCOMI_gf_CC_StatEventCreate (string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    StatEventCreate(lp_name);
    TriggerDebugOutput(13, StringToText(lp_name), false);
    libCOMI_gv_pC_StatEventLastCampaign = StatEventLastCreated();
}

void libCOMI_gf_CC_StatEventAddStr (string lp_key, string lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_8A7D4A08", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_COMI_8A7D4A08", "B", StringToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COMI_8A7D4A08"), false);
    StatEventAddDataString(lp_event, lp_key, lp_value);
}

void libCOMI_gf_CC_StatEventAddInt (string lp_key, int lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_21481F4B", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_COMI_21481F4B", "B", IntToText(lp_value));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COMI_21481F4B"), false);
    StatEventAddDataInt(lp_event, lp_key, lp_value);
}

void libCOMI_gf_CC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_FC33F977", "A", StringToText(lp_key));
    TextExpressionSetToken("Param/Expression/lib_COMI_FC33F977", "B", FixedToText(lp_value, c_fixedPrecisionAny));
    TriggerDebugOutput(13, TextExpressionAssemble("Param/Expression/lib_COMI_FC33F977"), false);
    StatEventAddDataFixed(lp_event, lp_key, lp_value);
}

void libCOMI_gf_CC_StatEventDone (int lp_statEvent) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(13, StringToText(""), false);
    StatEventSend(lp_statEvent);
    if ((lp_statEvent == libCOMI_gv_pC_StatEventLastCampaign)) {
        libCOMI_gv_pC_StatEventLastCampaign = -1;
    }

}

void libCOMI_gf_CC_StatRecordMapStart () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoAA2C507E_g;

    // Variable Initialization

    // Implementation
    libCOMI_gf_CC_StatEventCreate("ACMapStart");
    libCOMI_gf_CC_StatEventAddInt("Version", libCOMI_gv_pCC_StatVersion, libCOMI_gf_CC_StatEventLast());
    libCOMI_gf_CC_StatEventDone(libCOMI_gf_CC_StatEventLast());
    autoAA2C507E_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoAA2C507E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) != c_playerTypeUser)) {
            continue;
        }

        libCOMI_gf_CC_ScoreValueSet(lv_indexPlayer, "CommanderLevel", libCOMI_gf_CC_CommanderLevel(lv_indexPlayer, libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)));
        libCOMI_gf_CC_ScoreValueSet(lv_indexPlayer, "CommanderSelection", libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)));
        libCOMI_gf_CC_ScoreValueSet(lv_indexPlayer, "Difficulty", libCOMI_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer)));
        libCOMI_gf_CC_ScoreValueSet(lv_indexPlayer, "MasteryLevel", libCOMI_gf_CC_PlayerMasteryLevel(lv_indexPlayer));
        libCOMI_gf_CC_StatEventCreate("PlayerInfo");
        libCOMI_gf_CC_StatEventAddInt("PlayerIndex", lv_indexPlayer, libCOMI_gf_CC_StatEventLast());
        if ((GameIsOnline() == true)) {
            libCOMI_gf_CC_StatEventAddStr("PlayerHandle", PlayerHandle(lv_indexPlayer), libCOMI_gf_CC_StatEventLast());
        }

        libCOMI_gf_CC_StatEventAddInt("PlayerDifficulty", libCOMI_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer)), libCOMI_gf_CC_StatEventLast());
        libCOMI_gf_CC_StatEventAddStr("Commander", (libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)), libCOMI_gf_CC_StatEventLast());
        libCOMI_gf_CC_StatEventAddInt("CommanderLevel", libCOMI_gf_CC_CommanderLevel(lv_indexPlayer, libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)), libCOMI_gf_CC_StatEventLast());
        libCOMI_gf_CC_StatEventDone(libCOMI_gf_CC_StatEventLast());
    }
}

text libCOMI_gf_CU_PrestigeBriefFormatTooltip2 (int lp_player) {
    // Variable Declarations
    string lv_face;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_face = libCOMI_gf_CC_CommanderPrestigeIndexFace(libCOMI_gf_GetPlayerCommanderGameLink(lp_player), libCOMI_gf_CC_PlayerActivePrestigeIndex(lp_player));

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_0CB37498", "A", libCOMI_gf_CC_CommanderName(libCOMI_gf_ActiveCommanderForPlayer(lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COMI_0CB37498", "B", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Name", lp_player)));
    TextExpressionSetToken("Param/Expression/lib_COMI_0CB37498", "C", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_face, "Tooltip", lp_player)));
    return TextExpressionAssemble("Param/Expression/lib_COMI_0CB37498");
}

trigger auto_libCOMI_gf_AF_MutatorIconsCreate_Trigger = null;
int auto_libCOMI_gf_AF_MutatorIconsCreate_lp_pDialog;

void libCOMI_gf_AF_MutatorIconsCreate (int lp_pDialog) {
    auto_libCOMI_gf_AF_MutatorIconsCreate_lp_pDialog = lp_pDialog;

    if (auto_libCOMI_gf_AF_MutatorIconsCreate_Trigger == null) {
        auto_libCOMI_gf_AF_MutatorIconsCreate_Trigger = TriggerCreate("auto_libCOMI_gf_AF_MutatorIconsCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AF_MutatorIconsCreate_Trigger, false, false);
}

bool auto_libCOMI_gf_AF_MutatorIconsCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_libCOMI_gf_AF_MutatorIconsCreate_lp_pDialog;

    int init_i;

    // Variable Declarations
    string lv_vIndexMutator;
    int[21] lv_vMutatorPanels;
    int lv_vA;
    int lv_vB;

    // Automatic Variable Declarations
    int auto0A4A1FE6_ai;
    int auto0A4A1FE6_ae;
    int auto11B2F234_ae;
    const int auto11B2F234_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_vMutatorPanels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    Wait(1.5, c_timeGame);
    auto0A4A1FE6_ai = 1;
    auto0A4A1FE6_ae = UserDataInstanceCount("Mutators")+1;
    while (auto0A4A1FE6_ai < auto0A4A1FE6_ae) {
        lv_vIndexMutator = UserDataInstance("Mutators", auto0A4A1FE6_ai);
        auto0A4A1FE6_ai = auto0A4A1FE6_ai+1;
        if ((libCOMI_gf_MutatorIsEnabled(lv_vIndexMutator) == true)) {
            lv_vA += 1;
            DialogControlCreateFromTemplate(lp_pDialog, c_triggerControlTypePanel, "Coop_MutatorList/MutatorSmallListItemTemplate");
            lv_vMutatorPanels[lv_vA] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "MutatorIcon");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOMI_gf_CT_MutatorIcon(lv_vIndexMutator), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_COMI_913DC549", "NAME", libCOMI_gf_CT_MutatorName(lv_vIndexMutator));
            TextExpressionSetToken("Param/Expression/lib_COMI_913DC549", "DESCRIPTION", libCOMI_gf_CT_MutatorDescription(lv_vIndexMutator));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_COMI_913DC549"), PlayerGroupAll());
        }

    }
    auto11B2F234_ae = lv_vA;
    lv_vB = 1;
    for ( ; ( (auto11B2F234_ai >= 0 && lv_vB <= auto11B2F234_ae) || (auto11B2F234_ai < 0 && lv_vB >= auto11B2F234_ae) ) ; lv_vB += auto11B2F234_ai ) {
        DialogControlSetPosition(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), c_anchorTop, FixedToInt((70* (IntToFixed(lv_vB)  - 0.5 - (IntToFixed(lv_vA)/2)))), 165);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 0.0, 100.0);
        DialogControlFadeTransparency(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), 1.5, 15.0);
        DialogControlSetVisible(lv_vMutatorPanels[lv_vB], PlayerGroupAll(), true);
        Wait(0.5, c_timeGame);
    }
    return true;
}

trigger auto_libCOMI_gf_AF_MasteryInfoCreate_Trigger = null;
int auto_libCOMI_gf_AF_MasteryInfoCreate_lp_pDialog;
int auto_libCOMI_gf_AF_MasteryInfoCreate_lp_pPlayer;

void libCOMI_gf_AF_MasteryInfoCreate (int lp_pDialog, int lp_pPlayer) {
    auto_libCOMI_gf_AF_MasteryInfoCreate_lp_pDialog = lp_pDialog;
    auto_libCOMI_gf_AF_MasteryInfoCreate_lp_pPlayer = lp_pPlayer;

    if (auto_libCOMI_gf_AF_MasteryInfoCreate_Trigger == null) {
        auto_libCOMI_gf_AF_MasteryInfoCreate_Trigger = TriggerCreate("auto_libCOMI_gf_AF_MasteryInfoCreate_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_AF_MasteryInfoCreate_Trigger, false, false);
}

bool auto_libCOMI_gf_AF_MasteryInfoCreate_TriggerFunc (bool testConds, bool runActions) {
    int lp_pDialog = auto_libCOMI_gf_AF_MasteryInfoCreate_lp_pDialog;
    int lp_pPlayer = auto_libCOMI_gf_AF_MasteryInfoCreate_lp_pPlayer;

    int init_i;

    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int[7] lv_vMasteryLabel;
    int lv_vIndex;
    int lv_vOffsetX;
    int lv_vAnchor;
    int lv_vB;
    string lv_button;
    text lv_vText;
    int lv_vPrestigeIndex;
    int lv_vPrestigeLabel;

    // Automatic Variable Declarations
    int auto7AF139EF_ai;
    int auto7AF139EF_ae;
    int auto7AF139EF_ac;
    int auto5C2D515C_ae;
    const int auto5C2D515C_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_vMasteryLabel[init_i] = c_invalidDialogControlId;
    }
    lv_vOffsetX = 440;
    lv_vAnchor = c_anchorBottomLeft;
    lv_vPrestigeIndex = libCOMI_gv_cCX_PlayerPrestigeIndex[1];
    lv_vPrestigeLabel = c_invalidDialogControlId;

    // Implementation
    Wait(1.5, c_timeGame);
    if ((lp_pPlayer == 2)) {
        lv_vAnchor = c_anchorBottom;
        lv_vOffsetX = 500;
        lv_vPrestigeIndex = libCOMI_gv_cCX_PlayerPrestigeIndex[2];
    }

    lv_button = libCOMI_gf_CC_CommanderPrestigeIndexFace(libCOMI_gf_GetPlayerCommanderGameLink(lp_pPlayer), lv_vPrestigeIndex);
    lv_vText = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", lp_pPlayer));
    libNtve_gf_CreateDialogItemLabel(lp_pDialog, 500, 50, lv_vAnchor, lv_vOffsetX, 0, lv_vText, ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vPrestigeLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PrestigeScore", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libCOMI_gf_CU_PrestigeBriefFormatTooltip2(lp_pPlayer), PlayerGroupAll());
    auto7AF139EF_ai = 0;
    auto7AF139EF_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (auto7AF139EF_ai < auto7AF139EF_ae) {
        auto7AF139EF_ai = auto7AF139EF_ai+1;
        auto7AF139EF_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto7AF139EF_ai), "Category", 1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_pPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto7AF139EF_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto7AF139EF_ai);
            if ((libCOMI_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade) >= 1)) {
                TextExpressionSetToken("Param/Expression/lib_COMI_F33E03AF", "A", libCOMI_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade));
                TextExpressionSetToken("Param/Expression/lib_COMI_F33E03AF", "B", IntToText(libCOMI_gf_UT_PlayerMasteryUpgradeLevel(lp_pPlayer, lv_indexMasteryUpgrade)));
                libNtve_gf_CreateDialogItemLabel(lp_pDialog, 600, 50, lv_vAnchor, 0, 0, TextExpressionAssemble("Param/Expression/lib_COMI_F33E03AF"), ColorWithAlpha(0,0,0,0), false, 2.0);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
                lv_vMasteryLabel[lv_vIndex] = DialogControlLastCreated();
                lv_vIndex += 1;
            }

        }    
    }
    DialogControlSetPosition(lv_vPrestigeLabel, PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * lv_vIndex + 30));
    DialogControlFadeTransparency(lv_vPrestigeLabel, PlayerGroupAll(), 1.5, 20.0);
    Wait(0.5, c_timeGame);
    auto5C2D515C_ae = lv_vIndex;
    lv_vB = 0;
    for ( ; ( (auto5C2D515C_ai >= 0 && lv_vB <= auto5C2D515C_ae) || (auto5C2D515C_ai < 0 && lv_vB >= auto5C2D515C_ae) ) ; lv_vB += auto5C2D515C_ai ) {
        DialogControlSetPosition(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), lv_vAnchor, lv_vOffsetX, (20 * (lv_vIndex - lv_vB ) - 10));
        DialogControlFadeTransparency(lv_vMasteryLabel[lv_vB], PlayerGroupAll(), 1.5, 20.0);
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libCOMI_gf_TrackUnitDamageTakenForScoreScreen (bool lp_enableDisable, unit lp_trackedUnit, string lp_scoreType) {
    // Variable Declarations
    unitgroup lv_scoreGroup;
    int lv_scoreIndex;

    // Automatic Variable Declarations
    int auto52A0683A_ae;
    const int auto52A0683A_ai = 1;
    int autoE85A2EE7_ae;
    const int autoE85A2EE7_ai = 1;

    // Variable Initialization
    lv_scoreGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_enableDisable == false)) {
        auto52A0683A_ae = libCOMI_gv_cC_ScoreTrackedDmgTakenCount;
        lv_scoreIndex = 1;
        for ( ; ( (auto52A0683A_ai >= 0 && lv_scoreIndex <= auto52A0683A_ae) || (auto52A0683A_ai < 0 && lv_scoreIndex >= auto52A0683A_ae) ) ; lv_scoreIndex += auto52A0683A_ai ) {
            if ((DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex))) == (lp_scoreType))) {
                lv_scoreGroup = DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex)));
                UnitGroupRemove(lv_scoreGroup, lp_trackedUnit);
                return ;
            }

        }
        return ;
    }

    autoE85A2EE7_ae = libCOMI_gv_cC_ScoreTrackedDmgTakenCount;
    lv_scoreIndex = 1;
    for ( ; ( (autoE85A2EE7_ai >= 0 && lv_scoreIndex <= autoE85A2EE7_ae) || (autoE85A2EE7_ai < 0 && lv_scoreIndex >= autoE85A2EE7_ae) ) ; lv_scoreIndex += autoE85A2EE7_ai ) {
        if ((DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex))) == (lp_scoreType))) {
            lv_scoreGroup = DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex)));
            UnitGroupAdd(lv_scoreGroup, lp_trackedUnit);
            return ;
        }

    }
    libCOMI_gv_cC_ScoreTrackedDmgTakenCount += 1;
    UnitGroupAdd(lv_scoreGroup, lp_trackedUnit);
    DataTableSetString(true, ("CC_ScoreType_" + IntToString(libCOMI_gv_cC_ScoreTrackedDmgTakenCount)), (lp_scoreType));
    DataTableSetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(libCOMI_gv_cC_ScoreTrackedDmgTakenCount)), lv_scoreGroup);
    TriggerEnable(libCOMI_gt_CC_ScoreDynDmgTaken, true);
}

void libCOMI_gf_SetMissionScore (string lp_scoreType, int lp_score, int lp_player) {
    // Variable Declarations
    int lv_scoreSearchIndex;
    int lv_scoreIndex;
    int lv_totalScore;

    // Automatic Variable Declarations
    const int autoE03077BD_ae = libCOMI_gv_cCC_MAXMISSIONSCORETYPES;
    const int autoE03077BD_ai = 1;
    const int auto8DD64B65_ae = libCOMI_gv_cCC_MAXMISSIONSCORETYPES;
    const int auto8DD64B65_ai = 1;

    // Variable Initialization

    // Implementation
    lv_scoreSearchIndex = 1;
    for ( ; ( (autoE03077BD_ai >= 0 && lv_scoreSearchIndex <= autoE03077BD_ae) || (autoE03077BD_ai < 0 && lv_scoreSearchIndex >= autoE03077BD_ae) ) ; lv_scoreSearchIndex += autoE03077BD_ai ) {
        if ((libCOMI_gv_cC_MissionScoreTypes[lv_scoreSearchIndex] == lp_scoreType)) {
            lv_scoreIndex = lv_scoreSearchIndex;
            break;
        }

        if ((libCOMI_gv_cC_MissionScoreTypes[lv_scoreSearchIndex] == null)) {
            libCOMI_gv_cC_MissionScoreTypes[lv_scoreSearchIndex] = lp_scoreType;
            lv_scoreIndex = lv_scoreSearchIndex;
            break;
        }

    }
    if ((lv_scoreIndex == 0)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_FDEE4E57", "A", StringToText((lp_scoreType)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_FDEE4E57"), true);
        return ;
    }

    lv_scoreSearchIndex = 1;
    for ( ; ( (auto8DD64B65_ai >= 0 && lv_scoreSearchIndex <= auto8DD64B65_ae) || (auto8DD64B65_ai < 0 && lv_scoreSearchIndex >= auto8DD64B65_ae) ) ; lv_scoreSearchIndex += auto8DD64B65_ai ) {
        if ((lv_scoreSearchIndex == lv_scoreIndex)) {
            lv_totalScore += lp_score;
        }
        else {
            lv_totalScore += libCOMI_gv_cC_MissionScoreValues[lv_scoreSearchIndex][lp_player];
        }
    }
    if ((lv_totalScore > libCOMI_gv_cCC_MAXMISSIONSCORE)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_4553C87A", "A", StringToText((lp_scoreType)));
        TextExpressionSetToken("Param/Expression/lib_COMI_4553C87A", "B", IntToText(lp_score));
        TextExpressionSetToken("Param/Expression/lib_COMI_4553C87A", "C", IntToText(lv_totalScore));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_4553C87A"), true);
        libCOMI_gv_cC_MissionScoreValues[lv_scoreIndex][lp_player] = (lp_score-(lv_totalScore-libCOMI_gv_cCC_MAXMISSIONSCORE));
        lv_totalScore = libCOMI_gv_cCC_MAXMISSIONSCORE;
    }
    else {
        libCOMI_gv_cC_MissionScoreValues[lv_scoreIndex][lp_player] = lp_score;
    }
    PlayerScoreValueSetFromInt(lp_player, lp_scoreType, FixedToInt((libCOMI_gv_cC_MissionScoreValues[lv_scoreIndex][lp_player] * libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 1.0, 1.2, 1.5, 2.0, 2.0, 2.0))));
    PlayerScoreValueSetFromInt(lp_player, "TotalMissionScore", FixedToInt((lv_totalScore * libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 1.0, 1.2, 1.5, 2.0, 2.0, 2.0))));
}

string libCOMI_gf_CC_MissionScoreType (int lp_index, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cC_MissionScoreTypes[lp_index];
}

int libCOMI_gf_CC_MissionScoreValue (int lp_index, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerScoreValueGetAsInt(lp_player, libCOMI_gv_cC_MissionScoreTypes[lp_index]);
}

int libCOMI_gf_ObjectiveFinalScoreChecker (int lp_scoreValue, string lp_objectiive, int lp_index, bool lp_checkCompletion) {
    // Variable Declarations
    int lv_createdObjective;
    int lv_pityScore;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_createdObjective = libCOMI_gf_MissionObjectiveStateCheck3(lp_objectiive, lp_index);
    lv_pityScore = 1000;

    // Implementation
    if ((lv_createdObjective == c_invalidObjectiveId)) {
        return 0;
    }
    else {
        if ((lp_checkCompletion == true)) {
            if (((ObjectiveGetState(lv_createdObjective) != c_objectiveStateCompleted))) {
                return 0;
            }
            else {
                if ((lp_scoreValue < lv_pityScore)) {
                    return lv_pityScore;
                }
                else {
                    return lp_scoreValue;
                }
            }
        }
        else {
            if ((ObjectiveGetState(lv_createdObjective) == c_objectiveStateFailed)) {
                return 0;
            }
            else {
                if ((lp_scoreValue < lv_pityScore)) {
                    return lv_pityScore;
                }
                else {
                    return lp_scoreValue;
                }
            }
        }
    }
}

int libCOMI_gf_LeaderboardFinalScoreChecker (int lp_scoreValue, int lp_objective, bool lp_checkCompletion) {
    // Variable Declarations
    int lv_pityScore;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pityScore = 1000;

    // Implementation
    if ((lp_objective == c_invalidObjectiveId)) {
        return 0;
    }
    else {
        if ((lp_checkCompletion == true)) {
            if (((ObjectiveGetState(lp_objective) != c_objectiveStateCompleted))) {
                return 0;
            }
            else {
                if ((lp_scoreValue < lv_pityScore)) {
                    return lv_pityScore;
                }
                else {
                    return lp_scoreValue;
                }
            }
        }
        else {
            if ((ObjectiveGetState(lp_objective) == c_objectiveStateFailed)) {
                return 0;
            }
            else {
                if ((lp_scoreValue < lv_pityScore)) {
                    return lv_pityScore;
                }
                else {
                    return lp_scoreValue;
                }
            }
        }
    }
}

int libCOMI_gf_LeaderboardTimeScore (int lp_maxScore, int lp_parTimeMinutes) {
    // Variable Declarations
    int lv_parTimeSeconds;
    fixed lv_scoreModifierReal;
    int lv_scoreValue;
    fixed lv_scoreValueReal;
    int lv_adjustedMaxScore;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_parTimeSeconds = (lp_parTimeMinutes * 60);
    lv_adjustedMaxScore = (lp_maxScore + (lv_parTimeSeconds * 16));
    lv_scoreModifierReal = (IntToFixed(lp_maxScore) / IntToFixed(lv_parTimeSeconds));
    lv_scoreValueReal = (IntToFixed(lv_adjustedMaxScore) - (GameGetMissionTime() * lv_scoreModifierReal));
    lv_scoreValue = FixedToInt(lv_scoreValueReal);
    if ((lv_scoreValueReal > 0)) {
        return lv_scoreValue;
    }
    else {
        return 0;
    }
}

int libCOMI_gf_LeaderboardObjectiveHealthScore (unit lp_objectiveUnit, int lp_maxScore) {
    // Variable Declarations
    int lv_scoreModifier;
    int lv_scoreValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_scoreModifier = (lp_maxScore / 100);
    lv_scoreValue = FixedToInt((UnitGetPropertyFixed(lp_objectiveUnit, c_unitPropLifePercent, c_unitPropCurrent) * lv_scoreModifier));
    if (((lv_scoreValue > 0) || (UnitIsAlive(lp_objectiveUnit) == true))) {
        return lv_scoreValue;
    }
    else {
        return 0;
    }
}

fixed libCOMI_gf_LeaderboardObjectDurationModifierValue (int lp_maxScore, int lp_maxDurationMinutes) {
    // Variable Declarations
    int lv_maxDurationSeconds;
    fixed lv_scoreModifier;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_maxDurationSeconds = (lp_maxDurationMinutes * (960));
    lv_scoreModifier = (IntToFixed(lp_maxScore) / IntToFixed(lv_maxDurationSeconds));
    return lv_scoreModifier;
}

int libCOMI_gf_CC_MissionExperienceReward () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("GameSettings", "GameValues", "ExperienceWin", 1);
}

fixed libCOMI_gf_CC_MissionExperienceDifficultyBonus (int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetFixed("GameSettings", "GameValues", "ExperienceDifficultyModifier", libCOMI_gf_CC_DifficultyIndex(lp_difficulty))+libCOMI_gf_CT_GetRandomMutatorXPModifier());
}

void libCOMI_gf_AddTeamScoreValue (int lp_player, string lp_score) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    const int auto52DF4CE2_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    int auto52DF4CE2_var;
    playergroup auto24519778_g;

    // Variable Initialization

    // Implementation
    auto52DF4CE2_var = 1;
    for ( ; auto52DF4CE2_var <= auto52DF4CE2_ae; auto52DF4CE2_var += 1 ) {
        if ((libCOMI_gv_commanderScores[lp_player][auto52DF4CE2_var] == lp_score)) {
            return ;
        }

        if ((libCOMI_gv_commanderScores[lp_player][auto52DF4CE2_var] == null)) {
            libCOMI_gv_commanderScores[lp_player][auto52DF4CE2_var] = lp_score;
            auto24519778_g = libCOMI_gf_GetAlliedCommandersPlayers();
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(auto24519778_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_indexPlayer) == true)) {
                    libCOMI_gv_commanderScores[lv_indexPlayer][auto52DF4CE2_var] = lp_score;
                }

            }
        }

    }
}

string libCOMI_gf_UT_MapScoreStatistic (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libCOMI_gf_CC_MapUserDataInstance(lp_map), "ScoreStatistic", 1);
}

void libCOMI_gf_CC_SaveAllTransitionData () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoB6E4376E_g;

    // Variable Initialization

    // Implementation
    autoB6E4376E_g = libCOMI_gf_GetHumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB6E4376E_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_CC_OpenCoopBank(lv_player);
        libCOMI_gf_CC_SaveTransitionVars(lv_player, libCOMI_gv_cC_CoopBank[lv_player]);
        libCOMI_gf_CC_SaveCoopBank(lv_player);
    }
}

void libCOMI_gf_CC_LoadAllTransitionData () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoB4A79B02_g;

    // Variable Initialization

    // Implementation
    autoB4A79B02_g = libCOMI_gf_GetHumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB4A79B02_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOMI_gf_CC_CoopBankExists(lv_player) == false)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_36BB0BCB", "A", IntToText(lv_player));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_36BB0BCB"), false);
        }
        else {
            libCOMI_gf_CC_OpenCoopBank(lv_player);
            if ((libCOMI_gv_cCX_PlayerBankVersion[lv_player] < libCOMI_gv_cC_BankVersion)) {
                TextExpressionSetToken("Param/Expression/lib_COMI_E6F1C8B8", "A", IntToText(lv_player));
                TextExpressionSetToken("Param/Expression/lib_COMI_E6F1C8B8", "B", IntToText(libCOMI_gv_cCX_PlayerBankVersion[lv_player]));
                TextExpressionSetToken("Param/Expression/lib_COMI_E6F1C8B8", "C", IntToText(libCOMI_gv_cC_BankVersion));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_E6F1C8B8"), false);
                libCOMI_gf_ResetCampaignData(lv_player);
            }

        }
        libCOMI_gf_CC_LoadTransitionVars(lv_player, libCOMI_gv_cC_CoopBank[lv_player]);
    }
}

void libCOMI_gf_ResetCampaignData (int lp_player) {
    // Variable Declarations
    bank lv_bank;
    string lv_section;

    // Automatic Variable Declarations
    const int auto30F31E38_ae = 0;
    int auto30F31E38_var;

    // Variable Initialization
    lv_bank = libCOMI_gv_cC_CoopBank[lp_player];
    lv_section = "";

    // Implementation
    auto30F31E38_var = (BankSectionCount(lv_bank) - 1);
    for ( ; auto30F31E38_var <= auto30F31E38_ae; auto30F31E38_var += 1 ) {
        lv_section = BankSectionName(lv_bank, auto30F31E38_var);
        BankSectionRemove(lv_bank, lv_section);
    }
}

void libCOMI_gf_CC_OpenCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cC_CoopBank[lp_player] != null)) {
        return ;
    }

    BankLoad(libCOMI_gv_cC_CoopBankName, lp_player);
    libCOMI_gv_cC_CoopBank[lp_player] = BankLastCreated();
    libCOMI_gv_cCX_PlayerBankVersion[lp_player] = libCOMI_gf_CC_LoadTransitionVarInteger(libCOMI_gv_cC_CoopBank[lp_player], "INFO", "BANK_VERSION", 0);
}

bool libCOMI_gf_CC_CoopBankExists (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return BankExists(libCOMI_gv_cC_CoopBankName, lp_player);
}

void libCOMI_gf_CC_SaveCoopBank (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cC_CoopBank[lp_player] == null)) {
        return ;
    }

    libCOMI_gf_CC_SaveTransitionVarInteger(libCOMI_gv_cC_CoopBank[lp_player], "INFO", "BANK_VERSION", libCOMI_gv_cC_BankVersion, 0);
    BankSave(libCOMI_gv_cC_CoopBank[lp_player]);
}

int libCOMI_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_bank == null) || (BankKeyExists(lp_bank, lp_section, lp_key) == false))) {
        return lp_default;
    }
    else {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
}

bool libCOMI_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_bank == null) || (BankKeyExists(lp_bank, lp_section, lp_key) == false))) {
        return lp_default;
    }
    else {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
}

string libCOMI_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_bank == null) || (BankKeyExists(lp_bank, lp_section, lp_key) == false))) {
        return lp_default;
    }
    else {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
}

void libCOMI_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromInt(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOMI_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromFlag(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOMI_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == lp_default)) {
        BankKeyRemove(lp_bank, lp_section, lp_key);
    }
    else {
        BankValueSetFromString(lp_bank, lp_section, lp_key, lp_value);
    }
}

void libCOMI_gf_CC_SaveTransitionVars (int lp_player, bank lp_targetBank) {
    // Variable Declarations
    int lv_masteryIndex;
    string lv_commander;
    int lv_commanderIndex;
    string lv_commanderName;

    // Automatic Variable Declarations
    int autoBD493C5F_ae;
    const int autoBD493C5F_ai = 1;
    const int auto20EB0272_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto20EB0272_ai = 1;

    // Variable Initialization
    lv_commanderName = "";

    // Implementation
    libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, "INFO", "BANK_VERSION", 1, 0);
    libCOMI_gf_CC_SaveTransitionVarString(lp_targetBank, "Player", "commander", (libCOMI_gv_cCX_PlayerCommander[lp_player]), "");
    autoBD493C5F_ae = UserDataInstanceCount("Commanders");
    lv_commanderIndex = 1;
    for ( ; ( (autoBD493C5F_ai >= 0 && lv_commanderIndex <= autoBD493C5F_ae) || (autoBD493C5F_ai < 0 && lv_commanderIndex >= autoBD493C5F_ae) ) ; lv_commanderIndex += autoBD493C5F_ai ) {
        lv_commander = UserDataInstance("Commanders", lv_commanderIndex);
        lv_commanderName = (lv_commander);
        libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, "prestige", DataTableGetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(lv_commander, lp_player)), 0);
        libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, "experience", libCOMI_gv_cCX_PlayerExperience[lp_player][lv_commanderIndex], 0);
        libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, "level", libCOMI_gv_cC_PlayerLevel[lp_player][lv_commanderIndex], 0);
        lv_masteryIndex = 1;
        for ( ; ( (auto20EB0272_ai >= 0 && lv_masteryIndex <= auto20EB0272_ae) || (auto20EB0272_ai < 0 && lv_masteryIndex >= auto20EB0272_ae) ) ; lv_masteryIndex += auto20EB0272_ai ) {
            libCOMI_gf_CC_SaveTransitionVarInteger(lp_targetBank, lv_commanderName, ("Mastery" + IntToString(lv_masteryIndex)), libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][lv_commanderIndex][lv_masteryIndex], 0);
        }
    }
}

void libCOMI_gf_CC_LoadTransitionVars (int lp_player, bank lp_sourceBank) {
    // Variable Declarations
    int lv_masteryIndex;
    string lv_commander;
    int lv_commanderIndex;
    string lv_commanderName;
    int lv_commanderPrestige;
    int lv_commanderLevel;
    int lv_commanderExperience;

    // Automatic Variable Declarations
    int autoD977FBC8_ae;
    const int autoD977FBC8_ai = 1;
    const int auto59C2B3AB_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto59C2B3AB_ai = 1;

    // Variable Initialization
    lv_commanderName = "";

    // Implementation
    libCOMI_gv_cCX_PlayerCommander[lp_player] = (libCOMI_gf_CC_LoadTransitionVarString(lp_sourceBank, "Player", "commander", ""));
    autoD977FBC8_ae = UserDataInstanceCount("Commanders");
    lv_commanderIndex = 1;
    for ( ; ( (autoD977FBC8_ai >= 0 && lv_commanderIndex <= autoD977FBC8_ae) || (autoD977FBC8_ai < 0 && lv_commanderIndex >= autoD977FBC8_ae) ) ; lv_commanderIndex += autoD977FBC8_ai ) {
        lv_commander = UserDataInstance("Commanders", lv_commanderIndex);
        lv_commanderName = (lv_commander);
        lv_commanderPrestige = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, "prestige", 1);
        lv_commanderLevel = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, "level", 15);
        lv_commanderExperience = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, "experience", 999999);
        DataTableSetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(lv_commander, lp_player), lv_commanderPrestige);
        libCOMI_gf_CC_PlayerExperienceSetToLevel(lp_player, 15, lv_commander);
        libCOMI_gf_CC_PlayerLevelSet(lp_player, 15, lv_commander);
        lv_masteryIndex = 1;
        for ( ; ( (auto59C2B3AB_ai >= 0 && lv_masteryIndex <= auto59C2B3AB_ae) || (auto59C2B3AB_ai < 0 && lv_masteryIndex >= auto59C2B3AB_ae) ) ; lv_masteryIndex += auto59C2B3AB_ai ) {
            libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][lv_commanderIndex][lv_masteryIndex] = libCOMI_gf_CC_LoadTransitionVarInteger(lp_sourceBank, lv_commanderName, ("Mastery" + IntToString(lv_masteryIndex)), 15);
        }
    }
}

void libCOMI_gf_ObjectiveUpdate (string lp_objective, int lp_index, text lp_text) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_ObjectiveCreate(lp_objective, lp_index, false);
    libCOMI_gf_SetMissionObjectiveCustomText(lp_objective, lp_text);
}

int libCOMI_gf_MissionObjectiveItemCountCoop (string lp_objectiveData) {
    // Variable Declarations
    int lv_itemCountReturn;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_itemCountReturn = DataTableGetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objectiveData));
    if ((lv_itemCountReturn == 0)) {
        lv_itemCountReturn = libCOMI_gf_MissionObjectiveItemCount(lp_objectiveData);
        DataTableSetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objectiveData), lv_itemCountReturn);
    }

    return lv_itemCountReturn;
}

string libCOMI_gf_CM_ObjectiveRequiredCount (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gf_CS_ObjectiveTableString(lp_objectiveData) + "_RequiredCount");
}

string libCOMI_gf_CM_ObjectiveTimer (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gf_CS_ObjectiveTableString(lp_objective) + "_Timer");
}

void libCOMI_gf_CC_ObjectiveRegister (string lp_objective) {
    // Variable Declarations
    int lv_objectiveIndex;

    // Automatic Variable Declarations
    const int auto6FBFBD16_ae = libCOMI_gv_cCC_OBJECTIVESMAX;
    const int auto6FBFBD16_ai = 1;

    // Variable Initialization

    // Implementation
    lv_objectiveIndex = 1;
    for ( ; ( (auto6FBFBD16_ai >= 0 && lv_objectiveIndex <= auto6FBFBD16_ae) || (auto6FBFBD16_ai < 0 && lv_objectiveIndex >= auto6FBFBD16_ae) ) ; lv_objectiveIndex += auto6FBFBD16_ai ) {
        if ((libCOMI_gv_cC_RegisteredObjectives[lv_objectiveIndex] == null)) {
            libCOMI_gv_cC_RegisteredObjectives[lv_objectiveIndex] = lp_objective;
        }

        if ((libCOMI_gv_cC_RegisteredObjectives[lv_objectiveIndex] == lp_objective)) {
            return ;
        }

    }
}

void libCOMI_gf_CreateObjectiveCampaign (string lp_objectiveData) {
    // Variable Declarations
    bool lv_isPrimary;
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gf_CC_ObjectiveRegister(lp_objectiveData);
    if ((libCOMI_gf_MissionObjectiveItemCountCoop(lp_objectiveData) == 0)) {
        libCOMI_gf_SetObjectiveRequiredCountCampaign(lp_objectiveData, CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objectiveData), "RequiredCount", c_playerAny));
    }

    lv_name = libCOMI_gf_MissionObjectiveName(lp_objectiveData);
    lv_bonusText = libCOMI_gf_CS_CampaignObjectiveBonusText(lp_objectiveData);
    ObjectiveCreate(lv_name, libCOMI_gf_MissionObjectiveDescription(lp_objectiveData), c_objectiveStateActive, libCOMI_gf_CS_GetObjectiveTypeBoolean(lp_objectiveData));
    DataTableSetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objectiveData), ObjectiveLastCreated());
    if ((libCOMI_gf_CS_ObjectiveCountsDown(lp_objectiveData) == false)) {
        if ((libCOMI_gf_MissionObjectiveItemCount(lp_objectiveData) == 1)) {
            libCOMI_gf_ZS_SetObjectiveProgressData(lp_objectiveData, 0);
        }
        else {
            libCOMI_gf_SetMissionObjectiveProgress(lp_objectiveData, 0);
        }
    }
    else {
        if ((libCOMI_gf_MissionObjectiveItemCount(lp_objectiveData) == 1)) {
            libCOMI_gf_ZS_SetObjectiveProgressData(lp_objectiveData, libCOMI_gf_MissionObjectiveItemCount(lp_objectiveData));
        }
        else {
            libCOMI_gf_SetMissionObjectiveProgress(lp_objectiveData, libCOMI_gf_MissionObjectiveItemCount(lp_objectiveData));
        }
    }
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objectiveData);
}

void libCOMI_gf_SetMissionObjectiveProgress (string lp_objective, int lp_current) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libCOMI_gf_ZS_SetObjectiveProgressData(lp_objective, lp_current);
    if ((libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective) == null)) {
        return ;
    }

    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    int autoD2FFF70D_val;

    // Implementation
    autoD2FFF70D_val = lp_state;
    if (autoD2FFF70D_val == libCOMI_ge_MissionObjectiveState_Available) {
        UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 1);
        UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateActive);
    }
    else if (autoD2FFF70D_val == libCOMI_ge_MissionObjectiveState_Completed) {
        UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 1);
        UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/lib_COMI_0B6E0658", "A", ObjectiveGetName(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective))));
        ObjectiveSetName(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), TextExpressionAssemble("Param/Expression/lib_COMI_0B6E0658"));
        libCOMI_gf_ZS_SetObjectiveProgressData(lp_objective, libCOMI_gf_MissionObjectiveItemCount(lp_objective));
    }
    else if (autoD2FFF70D_val == libCOMI_ge_MissionObjectiveState_Undiscovered) {
        UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateHidden);
    }
    else if (autoD2FFF70D_val == libCOMI_ge_MissionObjectiveState_Failed) {
        UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1, 0);
        ObjectiveSetState(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), c_objectiveStateFailed);
    }
    else {
    }
}

void libCOMI_gf_SetObjectiveRequiredCountCampaign (string lp_objective, int lp_requiredCount) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, libCOMI_gf_CM_ObjectiveRequiredCount(lp_objective), lp_requiredCount);
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_SetObjectiveTimerCampaign (string lp_objective, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableGetTimer(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)) != lp_timer)) {
        DataTableSetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective), lp_timer);
        libCOMI_gf_CM_UpdateObjectiveTimerCampaign(lp_objective);
    }

}

void libCOMI_gf_SetObjectiveTimerColorThresholdCampaign (string lp_objective, int lp_color, int lp_remainingTime) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(lp_color)), lp_remainingTime);
}

void libCOMI_gf_SetMissionObjectiveCustomText (string lp_objective, text lp_customText) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetText(true, (libCOMI_gf_CS_ObjectiveTableString(lp_objective) + "_" + "CustomToken"), lp_customText);
    libCOMI_gf_CM_UpdateObjectiveTextCampaign(lp_objective);
}

void libCOMI_gf_CM_UpdateObjectiveTextCampaign (string lp_objective) {
    // Variable Declarations
    text lv_name;
    text lv_bonusText;
    int lv_progress;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_progress = UserDataGetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
    lv_name = TextReplaceWord(UserDataGetText("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "FormatText", 1), StringExternal("Param/Value/lib_COMI_90EC773D"), libCOMI_gf_MissionObjectiveName(lp_objective), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_F72DF09B"), IntToText(lv_progress), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_7AA38B9D"), IntToText(libCOMI_gf_MissionObjectiveItemCountCoop(lp_objective)), c_stringReplaceAll, c_stringCase);
    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_9C9EACB0"), DataTableGetText(true, (libCOMI_gf_CS_ObjectiveTableString(lp_objective) + "_" + "CustomToken")), c_stringReplaceAll, c_stringCase);
    if ((libCOMI_gf_MissionObjectiveStateCheck(lp_objective, libCOMI_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_BEDEFD56", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_BEDEFD56");
    }

    lv_bonusText = libCOMI_gf_CS_CampaignObjectiveBonusText(lp_objective);
    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_5966D169", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_COMI_5966D169", "B", lv_bonusText);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_5966D169");
    }

    if ((libCOMI_gf_MissionObjectiveStateCheck(lp_objective, libCOMI_ge_MissionObjectiveState_Completed) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_E3BF1656", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_E3BF1656");
    }

    ObjectiveSetName(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), lv_name);
}

trigger auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger = null;
string auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective;

void libCOMI_gf_CM_UpdateObjectiveTimerCampaign (string lp_objective) {
    auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective = lp_objective;

    if (auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger == null) {
        auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger = TriggerCreate("auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_TriggerFunc (bool testConds, bool runActions) {
    string lp_objective = auto_libCOMI_gf_CM_UpdateObjectiveTimerCampaign_lp_objective;

    // Variable Declarations
    text lv_name;
    timer lv_timerCurrent;

    // Automatic Variable Declarations
    int auto3EF0D545_val;

    // Variable Initialization
    lv_timerCurrent = TimerCreate();

    // Implementation
    lv_timerCurrent = DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective));
    while ((libCOMI_gf_GameIsOver() == false) && (lv_timerCurrent == DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective)))) {
        lv_timerCurrent = DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective));
        auto3EF0D545_val = ObjectiveGetState(libCOMI_gf_CS_GetObjectiveForData(lp_objective));
        if (auto3EF0D545_val == c_objectiveStateActive) {
            lv_name = TextReplaceWord(UserDataGetText("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "FormatText", 1), StringExternal("Param/Value/lib_COMI_4D91C023"), libCOMI_gf_MissionObjectiveName(lp_objective), c_stringReplaceAll, c_stringCase);
            if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) > 0.0)) {
                if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) <= DataTableGetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(libCOMI_ge_ObjectiveTimerThresholds_Red))))) {
                    lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_251B217F"), TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), Color(100.00, 0.00, 0.00)), c_stringReplaceAll, c_stringCase);
                }
                else {
                    if ((TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))) <= DataTableGetInt(true, (libCOMI_gf_CM_ObjectiveTimer(lp_objective) + "_" + libCOMI_ge_ObjectiveTimerThresholds_Ident(libCOMI_ge_ObjectiveTimerThresholds_Yellow))))) {
                        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_A59236C2"), TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), Color(100.00, 100.00, 0.00)), c_stringReplaceAll, c_stringCase);
                    }
                    else {
                        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_COMI_6CC50938"), TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(DataTableGetTimer(true, libCOMI_gf_CM_ObjectiveTimer(lp_objective))))), c_stringReplaceAll, c_stringCase);
                    }
                }
            }
            else if (true) {
                lv_name = libCOMI_gf_MissionObjectiveName(lp_objective);
            }
            ObjectiveSetName(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), lv_name);
        }
        else if (auto3EF0D545_val == c_objectiveStateCompleted) {
            ObjectiveSetName(DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objective)), libCOMI_gf_MissionObjectiveName(lp_objective));
            return true;
        }
        else {
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libCOMI_gf_ObjectiveFailed (string lp_objective, int lp_index, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_ObjectiveCreate(lp_objective, lp_index, false);
    ObjectiveSetState(libCOMI_gf_MissionObjectiveStateCheck3(lp_objective, 1), c_objectiveStateFailed);
    libCOMI_gf_SetMissionObjectiveCustomText(lp_objective, StringToText(""));
    if ((lp_wait == true)) {
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }

}

void libCOMI_gf_ObjectiveComplete (string lp_objective, int lp_index, bool lp_wait) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_ObjectiveCreate(lp_objective, lp_index, false);
    ObjectiveSetState(libCOMI_gf_MissionObjectiveStateCheck3(lp_objective, 1), c_objectiveStateCompleted);
    if ((lp_wait == true)) {
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }

}

void libCOMI_gf_ObjectiveCreate (string lp_objective, int lp_index, bool lp_wait) {
    // Automatic Variable Declarations
    const int autoF5130391_ae = libCOMI_gv_cCC_OBJECTIVESMAX;
    int autoF5130391_var;

    // Implementation
    if ((libCOMI_gf_IsObjectiveCreated(lp_objective, lp_index) == true)) {
        return ;
    }

    libCOMI_gf_CreateObjectiveCampaign(lp_objective);
    autoF5130391_var = 1;
    for ( ; autoF5130391_var <= autoF5130391_ae; autoF5130391_var += 1 ) {
        if ((libCOMI_gv_cC_RegisteredObjectives[autoF5130391_var] == lp_objective)) {
            libCOMI_gv_createdObjectives[autoF5130391_var] = ObjectiveLastCreated();
        }

    }
    if ((lp_wait == true)) {
        Wait(libCOMI_gv_campaignObjectiveDelay, c_timeReal);
    }

}

bool libCOMI_gf_IsObjectiveCreated (string lp_objective, int lp_index) {
    // Variable Declarations
    int lv_objectiveIndex;

    // Automatic Variable Declarations
    const int auto9CBE28F1_ae = libCOMI_gv_cCC_OBJECTIVESMAX;
    int auto9CBE28F1_var;

    // Variable Initialization
    lv_objectiveIndex = 1;

    // Implementation
    auto9CBE28F1_var = 1;
    for ( ; auto9CBE28F1_var <= auto9CBE28F1_ae; auto9CBE28F1_var += 1 ) {
        if ((libCOMI_gv_cC_RegisteredObjectives[auto9CBE28F1_var] == lp_objective)) {
            if ((lv_objectiveIndex == lp_index)) {
                return true;
            }
            else {
                lv_objectiveIndex += 1;
            }
        }

    }
    return false;
}

int libCOMI_gf_MissionObjectiveStateCheck3 (string lp_objective, int lp_index) {
    // Variable Declarations
    int lv_objectiveIndex;

    // Automatic Variable Declarations
    const int auto33FBBFBB_ae = libCOMI_gv_cCC_OBJECTIVESMAX;
    int auto33FBBFBB_var;

    // Variable Initialization
    lv_objectiveIndex = 1;

    // Implementation
    auto33FBBFBB_var = 1;
    for ( ; auto33FBBFBB_var <= auto33FBBFBB_ae; auto33FBBFBB_var += 1 ) {
        if ((libCOMI_gv_cC_RegisteredObjectives[auto33FBBFBB_var] == lp_objective)) {
            if ((lv_objectiveIndex == lp_index)) {
                return libCOMI_gv_createdObjectives[auto33FBBFBB_var];
            }
            else {
                lv_objectiveIndex += 1;
            }
        }

    }
    return c_invalidObjectiveId;
}

int libCOMI_gf_MissionObjectiveStateCheck2 (string lp_objective, int lp_index) {
    // Variable Declarations
    int lv_objective;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = libCOMI_gf_MissionObjectiveStateCheck3(lp_objective, lp_index);

    // Implementation
    if ((lv_objective == c_invalidObjectiveId)) {
        return -1;
    }
    else {
        return ObjectiveGetState(lv_objective);
    }
}

void libCOMI_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress) {
    // Variable Declarations
    int lv_levelBefore;
    int lv_increase;
    int lv_currentXPLevel;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto2841DF22_g;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_CS_ObjectiveCountsDown(lp_objective) == true)) {
        lp_progress = (libCOMI_gf_MissionObjectiveItemCount(lp_objective) - lp_progress);
    }

    lv_increase = (lp_progress - libCOMI_gf_MissionObjectiveProgress(lp_objective));
    UserDataSetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Progress", 1, lp_progress);
    if (((libCOMI_gf_MissionObjectiveIsPrimary(lp_objective) == true) || (lv_increase <= 0))) {
        return ;
    }

    auto2841DF22_g = libCOMI_gf_GetNonDefeatedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto2841DF22_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_CC_PlayerSetXPScores(c_gameOverDefeat, lv_indexPlayer);
    }
}

text libCOMI_gf_MissionObjectiveDescription (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Description", c_playerAny));
}

bool libCOMI_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((UserDataGetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 1) && (lp_state == libCOMI_ge_MissionObjectiveState_Available)) {
        return true;
    }

    if ((UserDataGetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 1) && (lp_state == libCOMI_ge_MissionObjectiveState_Completed)) {
        return true;
    }

    if ((lp_state == libCOMI_ge_MissionObjectiveState_Undiscovered) && (UserDataGetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Available", 1) == 0) && (UserDataGetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Complete", 1) == 0)) {
        return true;
    }

    return false;
}

bool libCOMI_gf_MissionObjectiveIsPrimary (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gf_CS_GetObjectiveTypeInteger(lp_objective) == c_objectiveTypePrimary);
}

text libCOMI_gf_MissionObjectiveName (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "Name", c_playerAny));
}

int libCOMI_gf_MissionObjectiveItemCount (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "RequiredCount", c_playerAny);
}

int libCOMI_gf_MissionObjectiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "Progress", 1);
}

int libCOMI_gf_MissionRewardTotalEarned2 (string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int auto6584B5A8_ai;

    // Variable Initialization

    // Implementation
    auto6584B5A8_ai = 1;
    while (auto6584B5A8_ai <= libCOMI_gv_cCC_OBJECTIVESMAX) {    
        lv_objective = libCOMI_gv_cC_RegisteredObjectives[auto6584B5A8_ai];
        auto6584B5A8_ai = auto6584B5A8_ai + 1;
        if( lv_objective == null ) {
            break;
        }
        lv_count += libCOMI_gf_MissionObjectiveRewardsEarned(lv_objective, lp_type);

    }
    return lv_count;
}

int libCOMI_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_rewards;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    lv_rewards = FixedToInt(Round(((IntToFixed(libCOMI_gf_MissionObjectiveProgress(lp_objective))*IntToFixed(UserDataGetInt("GameSettings", "GameValues", "ExperienceBonusObjective", 1))*UserDataGetFixed("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "XPMultiplier", 1))/IntToFixed(libCOMI_gf_MissionObjectiveItemCount(lp_objective)))));
    return lv_rewards;
}

int libCOMI_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_rewards;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_MissionObjectiveIsPrimary(lp_objective) == true)) {
        return 0;
    }

    return UserDataGetInt("GameSettings", "GameValues", "ExperienceBonusObjective", 1);
}

int libCOMI_gf_MissionRewardTotalEarned3 (string lp_mission, string lp_type) {
    // Variable Declarations
    string lv_objective;
    int lv_count;

    // Automatic Variable Declarations
    int autoADE74DD6_ai;

    // Variable Initialization

    // Implementation
    autoADE74DD6_ai = 1;
    while (autoADE74DD6_ai <= libCOMI_gv_cCC_OBJECTIVESMAX) {    
        lv_objective = libCOMI_gv_cC_RegisteredObjectives[autoADE74DD6_ai];
        autoADE74DD6_ai = autoADE74DD6_ai + 1;
        if( lv_objective == null ) {
            break;
        }
        lv_count += libCOMI_gf_MissionObjectiveRewardsAvailable2(lv_objective, lp_type);

    }
    return lv_count;
}

int libCOMI_gf_MissionObjectiveRewards (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string autoED0D0FE5_val;

    // Variable Initialization

    // Implementation
    autoED0D0FE5_val = lp_type;
    if (autoED0D0FE5_val == "Experience") {
        return FixedToInt((UserDataGetInt("GameSettings", "GameValues", "ExperienceBonusObjective", 1) / libCOMI_gf_MissionObjectiveItemCount(lp_objective)));
    }
    else {
    }
    return 0;
}

int libCOMI_gf_MissionObjectiveRewards2 (string lp_objective, string lp_type) {
    // Variable Declarations
    int lv_amount;

    // Automatic Variable Declarations
    string auto54CF1B76_val;

    // Variable Initialization

    // Implementation
    auto54CF1B76_val = lp_type;
    if (auto54CF1B76_val == "Experience") {
        return UserDataGetInt("GameSettings", "GameValues", "ExperienceBonusObjective", 1);
    }
    else {
    }
    return 0;
}

text libCOMI_gf_CS_CampaignObjectiveBonusText (string lp_objective) {
    // Variable Declarations
    text lv_bonusText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_bonusText = UserDataGetText("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "RewardText", 1);
    if (((lv_bonusText != null) == false) && (libCOMI_gf_MissionObjectiveIsPrimary(lp_objective) == false)) {
        if ((libCOMI_gf_MissionObjectiveRewards2(lp_objective, "Experience") > 0)) {
            lv_bonusText = StringExternal("Param/Value/lib_COMI_1ECADB45");
        }

    }

    return lv_bonusText;
}

int libCOMI_gf_CS_GetObjectiveForData (string lp_objectiveData) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, libCOMI_gf_CS_ObjectiveTableString(lp_objectiveData));
}

string libCOMI_gf_CS_ObjectiveUserDataInstance (string lp_objective) {
    // Variable Declarations
    string lv_objectiveInstance;
    int lv_index;

    // Automatic Variable Declarations
    int autoB5D9E8BF_ae;
    const int autoB5D9E8BF_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = DataTableGetInt(true, ("PObjIndex_" + (lp_objective)));
    if ((lv_index == 0)) {
        lv_objectiveInstance = UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogObjective, (lp_objective), "UserReference", libCOMI_gv_cCC_DISREGARDPLAYER));
        autoB5D9E8BF_ae = UserDataInstanceCount("MissionObjective");
        lv_index = 1;
        for ( ; ( (autoB5D9E8BF_ai >= 0 && lv_index <= autoB5D9E8BF_ae) || (autoB5D9E8BF_ai < 0 && lv_index >= autoB5D9E8BF_ae) ) ; lv_index += autoB5D9E8BF_ai ) {
            if ((UserDataInstance("MissionObjective", lv_index) == lv_objectiveInstance)) {
                DataTableSetInt(true, ("PObjIndex_" + (lp_objective)), lv_index);
                break;
            }

        }
    }
    else {
        lv_objectiveInstance = UserDataInstance("MissionObjective", lv_index);
    }
    return lv_objectiveInstance;
}

int libCOMI_gf_CS_MissionObjectivePreviousProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("ZC_PrvObj_" + (lp_objective)));
}

int libCOMI_gf_CS_MissionObjectiveArchiveProgress (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("ZC_ArchiveObj_" + (lp_objective)));
}

int libCOMI_gf_CS_GetObjectiveTypeInteger (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return c_objectiveTypePrimary;
    }
    else {
        return c_objectiveTypeOptional;
    }
}

bool libCOMI_gf_CS_GetObjectiveTypeBoolean (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogObjective, (lp_objective), "Type", c_playerAny) == (c_objectiveTypePrimary))) {
        return true;
    }
    else {
        return false;
    }
}

string libCOMI_gf_CS_ObjectiveTableString (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return ("CS_Obj_" + (lp_objective));
}

bool libCOMI_gf_CS_ObjectiveCountsDown (string lp_objective) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("MissionObjective", libCOMI_gf_CS_ObjectiveUserDataInstance(lp_objective), "CountDown", 1) == 1);
}

void libCOMI_gf_GameOver (int lp_gameOverType) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Deprecated
}

void libCOMI_gf_RunMissionVictorySequence (trigger lp_victoryCinematic) {
    // Variable Declarations
    timer lv_maxWaitTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxWaitTimer = TimerCreate();

    // Deprecated
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libCOMI_gf_RunMissionVictorySequence2 (trigger lp_victoryCinematic, int lp_type) {
    // Variable Declarations
    timer lv_maxWaitTimer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxWaitTimer = TimerCreate();

    // Implementation
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
    Wait(2.0, c_timeReal);
    TransmissionClearAll();
    UnitPauseAll(true);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    TimerStart(lv_maxWaitTimer, 60.0, false, c_timeReal);
    TriggerQueueClear(c_triggerQueueRetain);
    TriggerQueuePause(false);
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!(((libCOMI_gv_cM_MissionVictoryActionQueyeEmpty == true) || (TimerGetRemaining(lv_maxWaitTimer) <= 0.0)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    TriggerExecute(lp_victoryCinematic, true, false);
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    libCOMI_gf_EndCampaignMission(lp_type);
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libCOMI_gf_EndCampaignMission (int lp_type) {
    // Variable Declarations
    int lv_playerResult;

    // Automatic Variable Declarations
    int autoD377B393_val;
    playergroup auto3A6D1149_g;
    int auto3A6D1149_var;
    playergroup auto240FEAFD_g;
    int auto240FEAFD_var;
    playergroup autoD1D3A5A6_g;
    int autoD1D3A5A6_var;
    playergroup autoF20E6D28_g;
    int autoF20E6D28_var;
    int auto2AA46C1A_val;

    // Variable Initialization
    lv_playerResult = c_gameOverVictory;

    // Implementation
    autoD377B393_val = lp_type;
    if (autoD377B393_val == c_gameOverVictory) {
        libCOMI_gv_cM_GameOverResult = libCOMI_ge_CampaignMissionGameResultType_Victory;
        SoundPlayForPlayer(SoundLink("UI_Victory_All", 0), c_maxPlayers, libCOMI_gf_GetAlliedCommandersPlayers(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_MissionFailed", 2), c_maxPlayers, libCOMI_gf_GetEnemyHumanPlayers(), 100.0, 0.0);
        auto3A6D1149_g = libCOMI_gf_GetHumanPlayers();
        auto3A6D1149_var = -1;
        while (true) {
            auto3A6D1149_var = PlayerGroupNextPlayer(auto3A6D1149_g, auto3A6D1149_var);
            if (auto3A6D1149_var < 0) { break; }
            if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), auto3A6D1149_var) == true)) {
                libCOMI_gv_cM_EndMissionResult[auto3A6D1149_var] = c_gameOverVictory;
            }
            else {
                libCOMI_gv_cM_EndMissionResult[auto3A6D1149_var] = c_gameOverDefeat;
            }
        }
    }
    else if (autoD377B393_val == c_gameOverDefeat) {
        libCOMI_gv_cM_GameOverResult = libCOMI_ge_CampaignMissionGameResultType_Defeat;
        SoundPlayForPlayer(SoundLink("UI_MissionFailed", 2), c_maxPlayers, libCOMI_gf_GetAlliedCommandersPlayers(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_Victory_All", 0), c_maxPlayers, libCOMI_gf_GetEnemyHumanPlayers(), 100.0, 0.0);
        auto240FEAFD_g = libCOMI_gf_GetHumanPlayers();
        auto240FEAFD_var = -1;
        while (true) {
            auto240FEAFD_var = PlayerGroupNextPlayer(auto240FEAFD_g, auto240FEAFD_var);
            if (auto240FEAFD_var < 0) { break; }
            if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), auto240FEAFD_var) == true)) {
                libCOMI_gv_cM_EndMissionResult[auto240FEAFD_var] = c_gameOverDefeat;
            }
            else {
                libCOMI_gv_cM_EndMissionResult[auto240FEAFD_var] = c_gameOverVictory;
            }
        }
    }
    else if (autoD377B393_val == c_gameOverTie) {
        libCOMI_gv_cM_GameOverResult = libCOMI_ge_CampaignMissionGameResultType_None;
        autoD1D3A5A6_g = libCOMI_gf_GetHumanPlayers();
        autoD1D3A5A6_var = -1;
        while (true) {
            autoD1D3A5A6_var = PlayerGroupNextPlayer(autoD1D3A5A6_g, autoD1D3A5A6_var);
            if (autoD1D3A5A6_var < 0) { break; }
            libCOMI_gv_cM_EndMissionResult[autoD1D3A5A6_var] = c_gameOverTie;
        }
    }
    else {
    }
    if ((lp_type == c_gameOverVictory)) {
        VictoryPanelAddTrackedStatistic("UnitsTotalCount");
        VictoryPanelAddTrackedStatistic("UnitsKilledCount");
        VictoryPanelAddTrackedStatistic("UnitsLostCount");
        VictoryPanelAddTrackedStatistic("StructuresKilledCount");
        VictoryPanelAddTrackedStatistic("StructuresLostCount");
    }

    TriggerSendEvent(libCOMI_gv_COOP_MISSION_STARTED_EVENT2);
    autoF20E6D28_g = libCOMI_gf_GetHumanPlayers();
    autoF20E6D28_var = -1;
    while (true) {
        autoF20E6D28_var = PlayerGroupNextPlayer(autoF20E6D28_g, autoF20E6D28_var);
        if (autoF20E6D28_var < 0) { break; }
        lv_playerResult = libCOMI_gv_cM_EndMissionResult[autoF20E6D28_var];
        auto2AA46C1A_val = lv_playerResult;
        if (auto2AA46C1A_val == c_gameOverVictory) {
            UIAlert("VictoryAlertCoop", autoF20E6D28_var, StringToText(""), null);
        }
        else if (auto2AA46C1A_val == c_gameOverDefeat) {
            UIAlert("DefeatAlertCoop", autoF20E6D28_var, StringToText(""), null);
            libCOMI_gf_SetPlayerDefeated(autoF20E6D28_var);
        }
        else if (auto2AA46C1A_val == c_gameOverTie) {
            UIAlert("DrawAlertCoop", autoF20E6D28_var, StringToText(""), null);
        }
        else {
        }
        libCOMI_gf_CU_FanfareDisplay(lv_playerResult, autoF20E6D28_var);
    }
    libCOMI_gf_CC_SaveAllTransitionData();
}

bool libCOMI_gf_GameIsOver () {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gv_cM_GameOverResult != libCOMI_ge_CampaignMissionGameResultType_None);
}

void libCOMI_gf_BeforeFanfare (int lp_type) {
    // Variable Declarations
    timer lv_maxWaitTimer;

    // Automatic Variable Declarations
    int auto41121428_ae;
    int auto41121428_var;
    unitgroup autoB4CDB5E1_g;
    int autoB4CDB5E1_u;
    unit autoB4CDB5E1_var;
    playergroup autoD7EDD582_g;
    int autoD7EDD582_var;

    // Variable Initialization
    lv_maxWaitTimer = TimerCreate();

    // Implementation
    GameCheatAllow(c_gameCheatVictory, false);
    GameCheatAllow(c_gameCheatDefeat, false);
    TriggerQueueClear(c_triggerQueueKill);
    TriggerStop(libCOMI_gt_CM_TransmissionSend);
    ConversationDataStop();
    TransmissionClearGroup(PlayerGroupAll());
    auto41121428_ae = UserDataInstanceCount("MissionTransmission");
    auto41121428_var = 1;
    for ( ; auto41121428_var <= auto41121428_ae; auto41121428_var += 1 ) {
        UserDataSetInt("MissionTransmission", UserDataInstance("MissionTransmission", auto41121428_var), "PlayingNow", 1, 0);
    }
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, false);
    UnitPauseAll(true);
    autoB4CDB5E1_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB4CDB5E1_u = UnitGroupCount(autoB4CDB5E1_g, c_unitCountAll);
    for (;; autoB4CDB5E1_u -= 1) {
        autoB4CDB5E1_var = UnitGroupUnitFromEnd(autoB4CDB5E1_g, autoB4CDB5E1_u);
        if (autoB4CDB5E1_var == null) { break; }
        UnitIssueOrder(autoB4CDB5E1_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    autoD7EDD582_g = PlayerGroupAll();
    autoD7EDD582_var = -1;
    while (true) {
        autoD7EDD582_var = PlayerGroupNextPlayer(autoD7EDD582_g, autoD7EDD582_var);
        if (autoD7EDD582_var < 0) { break; }
        UnitClearSelection(autoD7EDD582_var);
    }
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
}

void libCOMI_gf_AfterFanfare (int lp_type) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_WaitForMissionTransmission();
    Wait(libCOMI_gv_campaignVictoryDelay, c_timeGame);
    UISetCursorVisible(PlayerGroupAll(), true);
    libCOMI_gf_EndCampaignMission(lp_type);
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue, true, false);
}

void libCOMI_gf_ApplyCameraForAllPlayers (camerainfo lp_camera, fixed lp_time) {
    // Automatic Variable Declarations
    playergroup auto828A0AF7_g;
    int auto828A0AF7_var;

    // Implementation
    auto828A0AF7_g = libCOMI_gf_GetHumanPlayers();
    auto828A0AF7_var = -1;
    while (true) {
        auto828A0AF7_var = PlayerGroupNextPlayer(auto828A0AF7_g, auto828A0AF7_var);
        if (auto828A0AF7_var < 0) { break; }
        CameraLockInput(auto828A0AF7_var, true);
        CameraApplyInfo(auto828A0AF7_var, lp_camera, lp_time, -1, 10.0, true);
    }
}

fixed libCOMI_gf_ResourcesRadius () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MissionSettings", "CurrentMission", "ResourcesRadius", 1);
}

fixed libCOMI_gf_SafetyRadius () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetFixed("MissionSettings", "CurrentMission", "SafetyRadius", 1);
}

string libCOMI_gf_CC_CurrentMap () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cC_CurrentMap;
}

void libCOMI_gf_SetCurrentMap (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cC_CurrentMap = lp_map;
}

string libCOMI_gf_CC_MapAchievementTerm (string lp_map, int lp_difficulty) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return null;
    }

    return UserDataGetGameLink("Maps", libCOMI_gf_CC_MapUserDataInstance(lp_map), "CompletionAchievementTerms", libCOMI_gf_CC_DifficultyIndex(lp_difficulty));
}

string libCOMI_gf_CC_CampaignMapFile (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return "";
    }

    return CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "File", libCOMI_gv_cCC_DISREGARDPLAYER);
}

text libCOMI_gf_CC_CampaignMapName (string lp_map, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_map == null)) {
        return StringExternal("Param/Value/lib_COMI_0D78EA39");
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "Name", lp_player));
}

string libCOMI_gf_CC_MapScoreStatistic (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Maps", libCOMI_gf_CC_MapUserDataInstance(lp_map), "ScoreStatistic", 1);
}

string libCOMI_gf_CC_MapUserDataInstance (string lp_map) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogMap, (lp_map), "UserReference", libCOMI_gv_cCC_DISREGARDPLAYER));
}

bool libCOMI_gf_PlayerInCinematicModeCampaign () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto26F8757F_g;

    // Variable Initialization

    // Implementation
    auto26F8757F_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto26F8757F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerType(lv_indexPlayer) == c_playerTypeUser) && (libNtve_gf_PlayerInCinematicMode(lv_indexPlayer) == false)) {
            return false;
        }

    }
    return true;
}

void libCOMI_gf_SetScreenModeCoop (int lp_mode, fixed lp_duration, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gv_cM_ScreenMode[lp_player] == c_uiModeConsole) && (lp_mode != c_uiModeConsole)) {
        libCOMI_gf_CU_GPVisibilityAutoUpdate(false, lp_player, lp_duration);
    }
    else if ((libCOMI_gv_cM_ScreenMode[lp_player] != c_uiModeConsole) && (lp_mode == c_uiModeConsole)) {
        libCOMI_gf_CU_GPVisibilityAutoUpdate(true, lp_player, lp_duration);
    }
    UISetMode(PlayerGroupSingle(lp_player), lp_mode, lp_duration);
    libCOMI_gv_cM_ScreenMode[lp_player] = lp_mode;
}

void libCOMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_onOff == true)) {
        libCOMI_gv_cM_InCinematic = true;
    }
    else {
        libCOMI_gv_cM_InCinematic = false;
    }
    if ((lp_waitOptions == false)) {
        libCOMI_gf_CM_CinematicModeNoWait(lp_onOff, lp_duration);
    }
    else {
        libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    }
}

trigger auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = null;
bool auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
fixed auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

void libCOMI_gf_CM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration) {
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff = lp_onOff;
    auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration = lp_duration;

    if (auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger == null) {
        auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger = TriggerCreate("auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CM_CinematicModeNoWait_Trigger, false, false);
}

bool auto_libCOMI_gf_CM_CinematicModeNoWait_TriggerFunc (bool testConds, bool runActions) {
    bool lp_onOff = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_onOff;
    fixed lp_duration = auto_libCOMI_gf_CM_CinematicModeNoWait_lp_duration;

    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CM_CinematicModeInternal(lp_onOff, lp_duration);
    return true;
}

void libCOMI_gf_CM_CinematicModeInternal (bool lp_onOff, fixed lp_duration) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto7BC2F114_g;
    playergroup autoA04AE8FB_g;
    playergroup auto311CBA6C_g;

    // Variable Initialization
    lv_indexPlayer = 1;

    // Implementation
    if ((lp_onOff == true)) {
        auto7BC2F114_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto7BC2F114_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOMI_gf_CU_GPVisibilityAutoUpdate(false, lv_indexPlayer, lp_duration);
        }
        UISetMode(PlayerGroupAll(), c_uiModeFullscreen, lp_duration);
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

        libCOMI_gf_CM_CinematicModeActivate();
        libNtve_gf_GlobalCinematicSettingFixedSeedOnOff(true, false);
        auto311CBA6C_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto311CBA6C_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerScoreValueEnableAll(lv_indexPlayer, true);
        }
    }
    else {
        libNtve_gf_CinematicMode(false, PlayerGroupAll(), lp_duration);
        libNtve_gf_GlobalCinematicSetting(false);
        autoA04AE8FB_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoA04AE8FB_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOMI_gf_CU_GPVisibilityAutoUpdate(true, lv_indexPlayer, lp_duration);
        }
        if ((lp_duration > 0.0) && (lp_duration != c_transitionDurationImmediate)) {
            Wait(lp_duration, c_timeReal);
        }

    }
}

void libCOMI_gf_CM_CinematicModeActivate () {
    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup autoB3D6D2ED_g;
    playergroup auto375744B4_g;
    playergroup auto162A8743_g;
    playergroup auto54EA3DBC_g;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();

    // Implementation
    lv_validPlayers = PlayerGroupAll();
    autoB3D6D2ED_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(autoB3D6D2ED_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == true)) {
            PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
        }

    }
    if ((PlayerGroupCount(lv_validPlayers) == 0)) {
        return ;
    }

    UISetHotkeyAllowed(lv_validPlayers, c_hotkeyCameraFollow, false);
    libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, true);
    libNtve_gf__CineModeHideUI(lv_validPlayers);
    CinematicMode(lv_validPlayers, true, 0.0);
    UISetCursorVisible(lv_validPlayers, false);
    libNtve_gf_ShowHidePlacementModels(false);
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Cinematic, lv_validPlayers, MaxF(0.0, 1.5));
    auto375744B4_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto375744B4_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, 0.0);
    }
    auto162A8743_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto162A8743_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerPauseAllCharges(lv_pickedPlayer, true);
        PlayerPauseAllCooldowns(lv_pickedPlayer, true);
    }
    auto54EA3DBC_g = lv_validPlayers;
    lv_pickedPlayer = -1;
    while (true) {
        lv_pickedPlayer = PlayerGroupNextPlayer(auto54EA3DBC_g, lv_pickedPlayer);
        if (lv_pickedPlayer < 0) { break; }
        PlayerScoreValueEnableAll(lv_pickedPlayer, false);
    }
    UIFlyerHelperOverride(lv_validPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    TriggerSendEvent("CinematicModeOn");
}

string libCOMI_gf_CM_SoundDataTableName () {
    // Automatic Variable Declarations
    // Implementation
    return (libCOMI_gv_pMC_SoundDataTableIdentifier + IntToString(libCOMI_gv_cM_SoundDataTableIndex));
}

void libCOMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset) {
    // Variable Declarations
    bool lv_playerInCinematic;
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup autoEDCAAF8F_g;

    // Variable Initialization

    // Implementation
    autoEDCAAF8F_g = lp_players;
    lv_playerIndex = -1;
    while (true) {
        lv_playerIndex = PlayerGroupNextPlayer(autoEDCAAF8F_g, lv_playerIndex);
        if (lv_playerIndex < 0) { break; }
        if ((libNtve_gf_PlayerInCinematicMode(lv_playerIndex) == true)) {
            lv_playerInCinematic = true;
            break;
        }

    }
    if ((lv_playerInCinematic == false)) {
        return ;
    }

    SoundPlay(lp_soundLink, lp_players, lp_volume, lp_offset);
    libCOMI_gv_cM_SoundDataTableIndex += 1;
    DataTableSetSound(true, libCOMI_gf_CM_SoundDataTableName(), SoundLastPlayed());
}

void libCOMI_gf_StopCinematicSounds () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((libCOMI_gv_cM_SoundDataTableIndex > 0)) {
        SoundStop(DataTableGetSound(true, libCOMI_gf_CM_SoundDataTableName()), true);
        libCOMI_gv_cM_SoundDataTableIndex -= 1;
    }
}

void libCOMI_gf_MoveCameraForAllPlayers (point lp_point, fixed lp_time) {
    // Automatic Variable Declarations
    playergroup auto0E9199B0_g;
    int auto0E9199B0_var;

    // Implementation
    if ((lp_point == null)) {
        return ;
    }

    auto0E9199B0_g = libCOMI_gf_GetHumanPlayers();
    auto0E9199B0_var = -1;
    while (true) {
        auto0E9199B0_var = PlayerGroupNextPlayer(auto0E9199B0_g, auto0E9199B0_var);
        if (auto0E9199B0_var < 0) { break; }
        CameraLockInput(auto0E9199B0_var, true);
        CameraApplyInfo(auto0E9199B0_var, CameraInfoDefault(), lp_time, -1, 10.0, true);
        CameraPan(auto0E9199B0_var, lp_point, lp_time, -1, 10.0, false);
    }
}

int libCOMI_gf_CC_DifficultyIndex (int lp_difficulty) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoED602D01_val;

    // Variable Initialization

    // Implementation
    autoED602D01_val = lp_difficulty;
    if (autoED602D01_val == 1) {
        return 1;
    }
    else if (autoED602D01_val == 2) {
        return 2;
    }
    else if (autoED602D01_val == 3) {
        return 3;
    }
    else if (autoED602D01_val == 4) {
        return 4;
    }
    else if (autoED602D01_val == 5) {
        return 5;
    }
    else if (autoED602D01_val == 6) {
        return 6;
    }
    else {
        return 0;
    }
}

int libCOMI_gf_CC_DifficultyFromIndex (int lp_index) {
    // Automatic Variable Declarations
    int autoDD9138E6_val;

    // Implementation
    autoDD9138E6_val = lp_index;
    if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(1)) {
        return 1;
    }
    else if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(2)) {
        return 2;
    }
    else if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(3)) {
        return 3;
    }
    else if (autoDD9138E6_val == libCOMI_gf_CC_DifficultyIndex(4)) {
        return 4;
    }
    else {
        return 2;
    }
}

void libCOMI_gf_InitDifficulty () {
    // Variable Declarations
    int lv_i;
    int lv_player;
    int lv_i2;
    int lv_i3;
    int lv_difficulty;
    int lv_brutalPlusDiff;
    int lv_brutalPlusPoints;
    string lv_difficultyinstance;
    int lv_mutatorCount;
    int lv_retrymutatorindex;
    int lv_enemyAI1;
    int lv_enemyAI2;

    // Automatic Variable Declarations
    playergroup auto42AAC6CE_g;
    playergroup autoAC65407A_g;
    int autoAC65407A_var;
    const int auto1DB1ED34_ae = 2;
    const int auto1DB1ED34_ai = 1;
    const int auto389E0899_ae = 3;
    const int auto389E0899_ai = 1;
    string auto9578433B_userType;
    int auto9578433B_i;

    // Variable Initialization
    lv_difficulty = 2;
    lv_enemyAI1 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1);
    lv_enemyAI2 = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 2);

    // Implementation
    lv_difficulty = libCOMI_gf_IntegerToDifficulty(libCOMI_gv_selectedDifficulty);
    auto42AAC6CE_g = libCOMI_gv_all;
    lv_i = -1;
    while (true) {
        lv_i = PlayerGroupNextPlayer(auto42AAC6CE_g, lv_i);
        if (lv_i < 0) { break; }
        PlayerSetDifficulty(lv_i, lv_difficulty);
    }
    SetNextMissionDifficulty(PlayerGroupAll(), lv_difficulty);
    if (((libCOMI_gf_CC_DifficultyIndex(PlayerDifficulty(lv_enemyAI1)) != 0))) {
        autoAC65407A_g = libCOMI_gf_GetAlliedCommandersPlayers();
        autoAC65407A_var = -1;
        while (true) {
            autoAC65407A_var = PlayerGroupNextPlayer(autoAC65407A_g, autoAC65407A_var);
            if (autoAC65407A_var < 0) { break; }
            PlayerSetDifficulty(autoAC65407A_var, PlayerDifficulty(lv_enemyAI1));
        }
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_E7447647"), false);
    lv_brutalPlusDiff = PlayerBrutalPlusDifficulty(1);
    lv_player = 1;
    for ( ; ( (auto1DB1ED34_ai >= 0 && lv_player <= auto1DB1ED34_ae) || (auto1DB1ED34_ai < 0 && lv_player >= auto1DB1ED34_ae) ) ; lv_player += auto1DB1ED34_ai ) {
        TextExpressionSetToken("Param/Expression/lib_COMI_6AC7A3D8", "B", IntToText(lv_player));
        TextExpressionSetToken("Param/Expression/lib_COMI_6AC7A3D8", "A", StringToText(libARRA_gf_IIF((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player) == 4), "BRUTAL", "NOT BRUTAL")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6AC7A3D8"), false);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_6AB5C1A4", "A", IntToText(lv_brutalPlusDiff));
    TextExpressionSetToken("Param/Expression/lib_COMI_6AB5C1A4", "B", StringToText(libARRA_gf_IIF(((lv_brutalPlusDiff >= 1) && (lv_brutalPlusDiff <= UserDataInstanceCount("XMM_MutationDifficultyLevels"))), "WITHIN BOUNDS", "OUT OF BOUNDS")));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6AB5C1A4"), false);
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 4) && ((lv_brutalPlusDiff >= 1) && (lv_brutalPlusDiff <= UserDataInstanceCount("XMM_MutationDifficultyLevels")))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_4F9E6618"), false);
        TextExpressionSetToken("Param/Expression/lib_COMI_C8E147FC", "A", IntToText(PlayerRetryMutation(1, 1)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_C8E147FC"), false);
        if ((PlayerRetryMutation(1, 0) > 0)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_519C94CF"), false);
            libCOMI_gf_CT_SetMutationDifficultyLevel("Plus1");
            libCOMI_gv_cT_MAbomination_MutatorsCount = 0;
            lv_mutatorCount = 0;
            for ( ; ( (auto389E0899_ai >= 0 && lv_mutatorCount <= auto389E0899_ae) || (auto389E0899_ai < 0 && lv_mutatorCount >= auto389E0899_ae) ) ; lv_mutatorCount += auto389E0899_ai ) {
                if ((PlayerRetryMutation(1, lv_mutatorCount) > 0)) {
                    lv_retrymutatorindex = PlayerRetryMutation(1, lv_mutatorCount);
                    libCOMI_gv_cT_MAbomination_MutatorsCount += 1;
                    libCOMI_gv_cT_MAbomination_Mutators[libCOMI_gv_cT_MAbomination_MutatorsCount] = UserDataInstance("Mutators", lv_retrymutatorindex);
                    TextExpressionSetToken("Param/Expression/lib_COMI_677DD770", "A", IntToText(lv_mutatorCount));
                    TextExpressionSetToken("Param/Expression/lib_COMI_677DD770", "B", UserDataGetText("Mutators", libCOMI_gv_cT_MAbomination_Mutators[libCOMI_gv_cT_MAbomination_MutatorsCount], "Name", 1));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_677DD770"), false);
                    libCOMI_gf_EnableDisableMutator(true, libCOMI_gv_cT_MAbomination_Mutators[libCOMI_gv_cT_MAbomination_MutatorsCount]);
                    lv_brutalPlusPoints += UserDataGetInt("XMM_MutationAbominations", libCOMI_gf_CT_GetAbomFromMutator(libCOMI_gv_cT_MAbomination_Mutators[libCOMI_gv_cT_MAbomination_MutatorsCount]), "Points", 1);
                }

            }
            libCOMI_gf_CT_StoreMutatorScoreValues();
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_3789E61C"), false);
            auto9578433B_userType = "XMM_MutationDifficultyLevels";
            auto9578433B_i = 1;
            for ( ; auto9578433B_i <= UserDataInstanceCount(auto9578433B_userType) ; auto9578433B_i += 1 ) {
                lv_difficultyinstance = UserDataInstance(auto9578433B_userType, auto9578433B_i);
                if (((lv_brutalPlusPoints >= UserDataGetInt("XMM_MutationDifficultyLevels", lv_difficultyinstance, "PointsMin", 1)) && (lv_brutalPlusPoints <= UserDataGetInt("XMM_MutationDifficultyLevels", lv_difficultyinstance, "PointsMax", 1)))) {
                    TextExpressionSetToken("Param/Expression/lib_COMI_6F012790", "A", IntToText(libNtve_gf_UserDataInstanceGetIndex("XMM_MutationDifficultyLevels", lv_difficultyinstance)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_6F012790"), false);
                    libCOMI_gf_CT_SetMutationDifficultyLevel(lv_difficultyinstance);
                    break;
                }

            }
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_F79488DF"), false);
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_9515D9BA"), false);
            libCOMI_gf_CT_SetMutationDifficultyLevel(UserDataInstance("XMM_MutationDifficultyLevels", lv_brutalPlusDiff));
            lv_mutatorCount = libCOMI_gf_CT_GetRandomMutatorCount();
            libCOMI_gf_CreateMutationAbominationProbabilities(lv_mutatorCount, lv_mutatorCount, UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "PointsMin", 1), UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "PointsMax", 1));
        }
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_56E4E616", "A", IntToText(UserDataInstanceCount("XMM_MutationDifficultyLevels")));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMI_56E4E616"), false);
    }
}

void libCOMI_gf_CM_DifficultyApplySettings (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
}

int libCOMI_gf_GetMissionDifficulty () {
    // Variable Declarations
    fixed lv_difficulty;
    int lv_returnDiff;
    int lv_player01;
    int lv_player02;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnDiff = 2;
    lv_player01 = 1;
    lv_player02 = 2;

    // Implementation
    if ((PlayerType(2) == c_playerTypeNone)) {
        return libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01);
    }

    lv_difficulty = ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player01) + libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player02)) * 0.5);
    lv_returnDiff = RoundI(lv_difficulty);;
    return lv_returnDiff;
}

int libCOMI_gf_DifficultyLevelForPlayerCoop (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_IntegerToDifficulty(libCOMI_gv_selectedDifficulty);
}

int libCOMI_gf_GetDifficulty () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_selectedDifficulty;
}

int libCOMI_gf_DifficultyAsInteger (int lp_player) {
    // Variable Declarations
    int lv_difficulty;
    int lv_difficultyAsInt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    lv_difficulty = libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player);
    lv_difficultyAsInt = lv_difficulty;
    return lv_difficultyAsInt;
}

int libCOMI_gf_IntegerToDifficulty (int lp_difficulty) {
    // Variable Declarations
    int lv_difficulty;

    // Automatic Variable Declarations
    int autoF1DEBD5D_val;

    // Variable Initialization
    lv_difficulty = 2;

    // Implementation
    autoF1DEBD5D_val = lp_difficulty;
    if (autoF1DEBD5D_val == 1) {
        lv_difficulty = 1;
    }
    else if (autoF1DEBD5D_val == 2) {
        lv_difficulty = 2;
    }
    else if (autoF1DEBD5D_val == 3) {
        lv_difficulty = 3;
    }
    else if (autoF1DEBD5D_val == 4) {
        lv_difficulty = 4;
    }
    else if (autoF1DEBD5D_val == 5) {
        lv_difficulty = 5;
    }
    else if (autoF1DEBD5D_val == 6) {
        lv_difficulty = 6;
    }
    else {
    }
    return lv_difficulty;
}

int libCOMI_gf_DifficultyValueInt2 (int lp_difficulty, int lp_beginner, int lp_normal, int lp_advanced, int lp_expert, int lp_virtuoso, int lp_master) {
    // Automatic Variable Declarations
    int autoA10F946A_val;

    // Implementation
    autoA10F946A_val = lp_difficulty;
    if (autoA10F946A_val == 1) {
        return lp_beginner;
    }
    else if (autoA10F946A_val == 2) {
        return lp_normal;
    }
    else if (autoA10F946A_val == 3) {
        return lp_advanced;
    }
    else if (autoA10F946A_val == 4) {
        return lp_expert;
    }
    else if (autoA10F946A_val == 5) {
        return lp_virtuoso;
    }
    else if (autoA10F946A_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_1BD6E20E"), true);
        return -1;
    }
}

fixed libCOMI_gf_DifficultyValueFixed2 (int lp_difficulty, fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    // Automatic Variable Declarations
    int auto0E3D2A41_val;

    // Implementation
    auto0E3D2A41_val = lp_difficulty;
    if (auto0E3D2A41_val == 1) {
        return lp_beginner;
    }
    else if (auto0E3D2A41_val == 2) {
        return lp_normal;
    }
    else if (auto0E3D2A41_val == 3) {
        return lp_advanced;
    }
    else if (auto0E3D2A41_val == 4) {
        return lp_expert;
    }
    else if (auto0E3D2A41_val == 5) {
        return lp_virtuoso;
    }
    else if (auto0E3D2A41_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_AC873AC0"), true);
        return -1.0;
    }
}

string libCOMI_gf_DifficultyValueFixed3 (int lp_difficulty, string lp_beginner, string lp_normal, string lp_advanced, string lp_expert, string lp_virtuoso, string lp_master) {
    // Automatic Variable Declarations
    int autoB51CE0AB_val;

    // Implementation
    autoB51CE0AB_val = lp_difficulty;
    if (autoB51CE0AB_val == 1) {
        return lp_beginner;
    }
    else if (autoB51CE0AB_val == 2) {
        return lp_normal;
    }
    else if (autoB51CE0AB_val == 3) {
        return lp_advanced;
    }
    else if (autoB51CE0AB_val == 4) {
        return lp_expert;
    }
    else if (autoB51CE0AB_val == 5) {
        return lp_virtuoso;
    }
    else if (autoB51CE0AB_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_68A54BFE"), true);
        return null;
    }
}

bool libCOMI_gf_DifficultyValueFixed4 (int lp_difficulty, bool lp_beginner, bool lp_normal, bool lp_advanced, bool lp_expert, bool lp_virtuoso, bool lp_master) {
    // Automatic Variable Declarations
    int auto76AE2043_val;

    // Implementation
    auto76AE2043_val = lp_difficulty;
    if (auto76AE2043_val == 1) {
        return lp_beginner;
    }
    else if (auto76AE2043_val == 2) {
        return lp_normal;
    }
    else if (auto76AE2043_val == 3) {
        return lp_advanced;
    }
    else if (auto76AE2043_val == 4) {
        return lp_expert;
    }
    else if (auto76AE2043_val == 5) {
        return lp_virtuoso;
    }
    else if (auto76AE2043_val == 6) {
        return lp_master;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_74421686"), true);
        return false;
    }
}

int libCOMI_gf_MinimumDifficultyValueCoopInteger (int lp_casual, int lp_normal, int lp_hard, int lp_brutal, int lp_extreme, int lp_unlikely) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
    }

    return libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_casual, lp_normal, lp_hard, lp_brutal, lp_extreme, lp_unlikely);
}

fixed libCOMI_gf_MinimumDifficultyValueCoopReal (fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerDifficulty(1) <= libCOMI_gf_DifficultyLevelForPlayerCoop(2)) == true)) {
        return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(1), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
    }

    return libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(2), lp_beginner, lp_normal, lp_advanced, lp_expert, lp_virtuoso, lp_master);
}

string libCOMI_gf_CC_CommanderUserInstance (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogCommander, lp_commander) == false)) {
        return null;
    }

    return UserDataInstanceFromReference(CatalogFieldValueGet(c_gameCatalogCommander, (lp_commander), "UserReference", libCOMI_gv_cCC_DISREGARDPLAYER));
}

string libCOMI_gf_CC_CommanderData (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "ZZ_CommanderData", 1);
}

string libCOMI_gf_CC_CommanderRace (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "Race", 1);
}

int libCOMI_gf_CC_CommanderInternalIndex (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("Commanders", lp_commander, "ZZ_UniqueIndex", 1);
}

string libCOMI_gf_CC_CommanderConversationLink (string lp_characterInstance) {
    // Automatic Variable Declarations
    string auto217CEA32_val;

    // Implementation
    auto217CEA32_val = lp_characterInstance;
    if (auto217CEA32_val == "Raiders") {
        return "char_Raynor";
    }
    else if (auto217CEA32_val == "Swann") {
        return "char_Swann";
    }
    else if (auto217CEA32_val == "Kerrigan") {
        return "char_Kerrigan";
    }
    else if (auto217CEA32_val == "Zagara") {
        return "char_Zagara";
    }
    else if (auto217CEA32_val == "Artanis") {
        return "char_Artanis";
    }
    else if (auto217CEA32_val == "Vorazun") {
        return "char_Vorazun";
    }
    else if (auto217CEA32_val == "Karax") {
        return "char_Karax";
    }
    else if (auto217CEA32_val == "Abathur") {
        return "char_Abathur";
    }
    else if (auto217CEA32_val == "Alarak") {
        return "char_Alarak";
    }
    else if (auto217CEA32_val == "Nova") {
        return "char_Nova";
    }
    else if (auto217CEA32_val == "Stukov") {
        return "char_Stukov";
    }
    else if (auto217CEA32_val == "Fenix") {
        return "char_ProtossAI";
    }
    else if (auto217CEA32_val == "Dehaka") {
        return "char_Dehaka";
    }
    else if (auto217CEA32_val == "Horner") {
        return "char_Horner";
    }
    else if (auto217CEA32_val == "Tychus") {
        return "char_Tychus";
    }
    else if (auto217CEA32_val == "Zeratul") {
        return "char_ZeratulAC";
    }
    else if (auto217CEA32_val == "Stetmann") {
        return "char_BelshirScientist";
    }
    else if (auto217CEA32_val == "Mengsk") {
        return "char_MengskCommander";
    }
    else {
    }
    return "char_TerranAdjutant";
}

string libCOMI_gf_CC_CommanderPortraitModel (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetModel("Commanders", lp_commander, "PortraitModel", 1);
}

string libCOMI_gf_CC_CommanderPortraitActor (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("Commanders", lp_commander, "PortraitActor", 1);
}

string libCOMI_gf_CC_CommanderCustomImage (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Commanders", lp_commander, "CustomImage", 1);
}

text libCOMI_gf_CC_CommanderName (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Commanders", lp_commander, "Name", 1);
}

int libCOMI_gf_CC_CommanderGender (string lp_commander) {
    // Variable Declarations
    int lv_genderIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_genderIndex = UserDataGetInt("Commanders", lp_commander, "Gender", 1);
    return lv_genderIndex;
}

text libCOMI_gf_CC_CommanderDescription (string lp_commander) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Commanders", lp_commander, "Description", 1);
}

string libCOMI_gf_CC_CommanderSelectCutscene (string lp_commander) {
    // Variable Declarations
    string lv_sceneName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sceneName = "";

    // Implementation
    lv_sceneName = UserDataGetString("Commanders", lp_commander, "ZZ_SelectionScene", 1);
    return "Cutscenes\\" + lv_sceneName + ".SC2Cutscene";
}

string libCOMI_gf_CC_CommanderConvoTag (string lp_commander) {
    // Automatic Variable Declarations
    string autoDCF2BF00_val;

    // Implementation
    autoDCF2BF00_val = lp_commander;
    if (autoDCF2BF00_val == "Artanis") {
        return "Artanis";
    }
    else if (autoDCF2BF00_val == "Vorazun") {
        return "Vorazun";
    }
    else if (autoDCF2BF00_val == "Kerrigan") {
        return "Kerrigan";
    }
    else if (autoDCF2BF00_val == "Zagara") {
        return "Zagara";
    }
    else if (autoDCF2BF00_val == "Raiders") {
        return "Raynor";
    }
    else if (autoDCF2BF00_val == "Swann") {
        return "Swann";
    }
    else if (autoDCF2BF00_val == "Abathur") {
        return "Abathur";
    }
    else if (autoDCF2BF00_val == "Fenix") {
        return "Fenix";
    }
    else if (autoDCF2BF00_val == "Dehaka") {
        return "Dehaka";
    }
    else if (autoDCF2BF00_val == "Horner") {
        return "Horner";
    }
    else if (autoDCF2BF00_val == "Tychus") {
        return "Tychus";
    }
    else if (autoDCF2BF00_val == "Zeratul") {
        return "Zeratul";
    }
    else if (autoDCF2BF00_val == "Stetmann") {
        return "Stetmann";
    }
    else if (autoDCF2BF00_val == "Mengsk") {
        return "Mengsk";
    }
    else {
    }
    return "Raynor";
}

bool libCOMI_gf_CC_CommanderInGame (string lp_commander) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoC6869C70_g;

    // Variable Initialization

    // Implementation
    autoC6869C70_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoC6869C70_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_player) == lp_commander)) {
            return true;
        }

    }
    return false;
}

text libCOMI_gf_CC_CommanderGeneralTipTitle (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("X_GeneralTips", lp_tipID, "TipTitle", 1);
}

text libCOMI_gf_CC_CommanderGeneralTipDetails (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("X_GeneralTips", lp_tipID, "TipDetails", 1);
}

string libCOMI_gf_CC_CommanderGeneralTipIcon (string lp_tipID) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("X_GeneralTips", lp_tipID, "TipIcon", 1);
}

void libCOMI_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_point != null)) {
        if ((lp_actor != null)) {
            libNtve_gf_CreateActorAtPoint(lp_actor, lp_point);
        }

        if ((lp_sound != null)) {
            SoundPlayAtPoint(lp_sound, PlayerGroupAll(), lp_point, 0.0, 100.0, 0.0);
        }

    }

}

void libCOMI_gf_ResourcePickupAlly (int lp_player, int lp_minerals, int lp_vespene) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_minerals);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_vespene);
    SoundPlayForPlayer(SoundLink("UI_ResourcePickup", -1), lp_player, PlayerGroupSingle(lp_player), 100.0, 0.0);
}

void libCOMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_terms;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_terms = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_terms = ("ScopeContains " + lp_doodadType);
    }

    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_terms);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libCOMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_cacheUnit), lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
    UnitKill(lp_cacheUnit);
}

void libCOMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;

    // Automatic Variable Declarations
    int auto8ED25223_val;

    // Variable Initialization

    // Implementation
    auto8ED25223_val = lp_resourceType;
    if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Mineral) {
        PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperAdd, lp_resourceAmount);
    }
    else if (auto8ED25223_val == libCOMI_ge_CacheResourceType_Vespene) {
        PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperAdd, lp_resourceAmount);
    }
    else {
    }
    libCOMI_gf_DisplayRewardFloatingText(lp_location, lp_resourceType, lp_resourceAmount, lp_resourceIcon, lp_resourceText, lp_player);
}

void libCOMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player) {
    // Variable Declarations
    text lv_text;
    text lv_signPrefix;

    // Automatic Variable Declarations
    int auto2128925C_val;
    int autoC4309F63_val;

    // Variable Initialization

    // Implementation
    if ((lp_resourceAmount >= 0)) {
        lv_signPrefix = StringExternal("Param/Value/lib_COMI_3E03BDBE");
    }

    auto2128925C_val = lp_resourceType;
    if (auto2128925C_val == libCOMI_ge_CacheResourceType_Mineral) {
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "A", StringToText(("Kicker_Minerals")));
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_FA2F2D3B", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_FA2F2D3B");
    }
    else if (auto2128925C_val == libCOMI_ge_CacheResourceType_Vespene) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "A", StringToText(("Kicker_Gas")));
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "SIGN", lv_signPrefix);
        TextExpressionSetToken("Param/Expression/lib_COMI_3D845762", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_3D845762");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "A", StringToText(("Kicker_Zerg")));
        TextExpressionSetToken("Param/Expression/lib_COMI_261E2441", "B", IntToText(lp_resourceAmount));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_261E2441");
    }
    if ((lp_resourceIcon != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_F881F2B7", "B", StringToText(lp_resourceIcon));
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_F881F2B7");
    }
    else {
        autoC4309F63_val = lp_resourceType;
        if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Mineral) {
            TextExpressionSetToken("Param/Expression/lib_COMI_C99B9DE4", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_C99B9DE4");
        }
        else if (autoC4309F63_val == libCOMI_ge_CacheResourceType_Vespene) {
            TextExpressionSetToken("Param/Expression/lib_COMI_6CB2A27A", "A", lv_text);
            lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_6CB2A27A");
        }
        else {
        }
    }
    if (((lp_resourceText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "A", lv_text);
        TextExpressionSetToken("Param/Expression/lib_COMI_A8624C75", "B", lp_resourceText);
        lv_text = TextExpressionAssemble("Param/Expression/lib_COMI_A8624C75");
    }

    if ((lp_resourceAmount >= 0)) {
        SoundPlay(SoundLink("UI_ResourcePickup", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("UI_Mutator_MicroTransactions", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    }
    TextTagCreate(lv_text, 24, lp_location, 2.0, true, false, PlayerGroupSingle(lp_player));
    TextTagSetVelocity(TextTagLastCreated(), 0.7, 90.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\blank.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
}

text libCOMI_gf_FormatTimeCampaign (int lp_second) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_second < 3600)) {
        return TextTimeFormat(StringExternal("Param/Value/lib_COMI_D49AC1F7"), lp_second);
    }
    else {
        return TextTimeFormat(StringExternal("Param/Value/lib_COMI_F86CDF9E"), lp_second);
    }
}

void libCOMI_gf_PauseAITimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    AITimePause(lp_pauseUnpause);
    libCOMI_gv_cC_TimeAIPaused = lp_pauseUnpause;
}

void libCOMI_gf_CC_TimeAITemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libCOMI_gv_cC_TimeAIPaused;
    libCOMI_gf_PauseAITimeCampaign(lp_pauseUnpause);
    libCOMI_gv_cC_TimeAIPaused = lv_originalPauseState;
}

void libCOMI_gf_CC_TimeAITemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_PauseAITimeCampaign(libCOMI_gv_cC_TimeAIPaused);
}

void libCOMI_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause) {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(lp_pauseUnpause);
    libCOMI_gv_cC_TimeMissionPaused = lp_pauseUnpause;
}

void libCOMI_gf_CC_TimeMissionTemporarySet (bool lp_pauseUnpause) {
    // Variable Declarations
    bool lv_originalPauseState;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalPauseState = true;

    // Implementation
    lv_originalPauseState = libCOMI_gv_cC_TimeMissionPaused;
    libCOMI_gf_PauseMissionTimeCampaign(lp_pauseUnpause);
    libCOMI_gv_cC_TimeMissionPaused = lv_originalPauseState;
}

void libCOMI_gf_CC_TimeMissionTemporaryRestore () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_PauseMissionTimeCampaign(libCOMI_gv_cC_TimeMissionPaused);
}

void libCOMI_gf_Unpause () {
    // Automatic Variable Declarations
    // Implementation
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, false, true);
    GameSetMissionTimePaused(false);
    AITimePause(false);
    UnitPauseAll(false);
}

void libCOMI_gf_Pause () {
    // Automatic Variable Declarations
    // Implementation
    GameSetMissionTimePaused(true);
    AITimePause(true);
    UnitPauseAll(true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, false);
}

void libCOMI_gf_CM_UseUnitNameAsUnitTip (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "ZergDropPod") || (UnitGetType(lp_unit) == "ZergDropPodLarge") || (UnitGetType(lp_unit) == "TerranDropPod") || (UnitGetType(lp_unit) == "ZergDropPodCreep"))) {
        return ;
    }

    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_CM_ApplyCampaignTeachingToUnit (unit lp_teachUnit) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_teachingUnit = lp_teachUnit;
    TriggerSendEvent("Unit Teaching");
}

void libCOMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_3704A828", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_3704A828");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_50F2381C", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_50F2381C");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip) {
    // Variable Declarations
    text lv_tipStyled;
    text lv_subTipStyled;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_1C88F6E4", "A", lp_tip);
        lv_tipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_1C88F6E4");
    }
    else {
        lv_tipStyled = lp_tip;
    }
    if ((lp_subTip != null)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_08BB63F6", "A", lp_subTip);
        lv_subTipStyled = TextExpressionAssemble("Param/Expression/lib_COMI_08BB63F6");
    }
    else {
        lv_subTipStyled = lp_subTip;
    }
    UnitSetInfoText(lp_unit, lp_info, lv_tipStyled, lv_subTipStyled);
    UnitSetState(lp_unit, c_unitStateTooltipable, true);
}

void libCOMI_gf_CM_MissionAutoSave (text lp_description) {
    // Variable Declarations
    text lv_name;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");

    // Implementation
    libCOMI_gv_cM_MissionAutoSaveIndex += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_87B2D44D", "A", libCOMI_gf_CC_CampaignMapName(libCOMI_gf_CC_CurrentMap(), 1));
    lv_name = TextExpressionAssemble("Param/Expression/lib_COMI_87B2D44D");
    GameSaveCreate(lv_name, lp_description, "", true);
    Wait(1.0, c_timeGame);
    libCOMI_gv_cM_MissionAutoSaveDone = true;
}

void libCOMI_gf_CreateMissionAutosavePoint (text lp_description) {
    // Variable Declarations
    text lv_name;
    int lv_autosaveDialog;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringToText("");
    lv_autosaveDialog = c_invalidDialogId;

    // Implementation
    if ((libCOMI_gf_CC_CurrentMap() == null)) {
        return ;
    }

    libCOMI_gv_cM_MissionAutoSaveDone = false;
    libCOMI_gf_CM_MissionAutoSave(lp_description);
}

trigger auto_libCOMI_gf_CreateWarpInEffect_Trigger = null;
unit auto_libCOMI_gf_CreateWarpInEffect_lp_unit;

void libCOMI_gf_CreateWarpInEffect (unit lp_unit) {
    auto_libCOMI_gf_CreateWarpInEffect_lp_unit = lp_unit;

    if (auto_libCOMI_gf_CreateWarpInEffect_Trigger == null) {
        auto_libCOMI_gf_CreateWarpInEffect_Trigger = TriggerCreate("auto_libCOMI_gf_CreateWarpInEffect_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_CreateWarpInEffect_Trigger, false, false);
}

bool auto_libCOMI_gf_CreateWarpInEffect_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libCOMI_gf_CreateWarpInEffect_lp_unit;

    // Variable Declarations
    actor lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitAbilityEnable(lp_unit, "move", false);
    UnitAbilityEnable(lp_unit, "attack", false);
    if (((UnitGetType(lp_unit) == "HybridDestroyer") || (UnitGetType(lp_unit) == "HybridDominatorVoid") || (UnitGetType(lp_unit) == "HybridReaver") || (UnitGetType(lp_unit) == "HybridBehemoth") || (UnitGetType(lp_unit) == "HybridNemesis"))) {
        libNtve_gf_AttachModelToUnit(lp_unit, "HybridWarpInEffect", "Ref_Center");
    }
    else {
        libNtve_gf_AttachModelToUnit(lp_unit, "ProtossGenericWarpInOut", "Ref_Center");
    }
    lv_model = libNtve_gf_ActorLastCreated();
    Wait(5.0, c_timeAI);
    libNtve_gf_KillModel(lv_model);
    UnitAbilityEnable(lp_unit, "move", true);
    UnitAbilityEnable(lp_unit, "attack", true);
    return true;
}

trigger auto_libCOMI_gf_RunTriggeratMissionTime_Trigger = null;
fixed auto_libCOMI_gf_RunTriggeratMissionTime_lp_time;
trigger auto_libCOMI_gf_RunTriggeratMissionTime_lp_trigger;

void libCOMI_gf_RunTriggeratMissionTime (fixed lp_time, trigger lp_trigger) {
    auto_libCOMI_gf_RunTriggeratMissionTime_lp_time = lp_time;
    auto_libCOMI_gf_RunTriggeratMissionTime_lp_trigger = lp_trigger;

    if (auto_libCOMI_gf_RunTriggeratMissionTime_Trigger == null) {
        auto_libCOMI_gf_RunTriggeratMissionTime_Trigger = TriggerCreate("auto_libCOMI_gf_RunTriggeratMissionTime_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_RunTriggeratMissionTime_Trigger, false, false);
}

bool auto_libCOMI_gf_RunTriggeratMissionTime_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_libCOMI_gf_RunTriggeratMissionTime_lp_time;
    trigger lp_trigger = auto_libCOMI_gf_RunTriggeratMissionTime_lp_trigger;

    // Automatic Variable Declarations
    // Implementation
    while (!((lp_time <= GameGetMissionTime()))) {
        Wait(0.3, c_timeAI);
    }
    if ((libCOMI_gf_GameIsOver() == false)) {
        TriggerExecute(lp_trigger, true, false);
    }

    return true;
}

point libCOMI_gf_CM_NearbyGroundPathablePoint (point lp_initialDropPoint, fixed lp_distanceOffsetMin, fixed lp_distanceOffsetMax) {
    // Variable Declarations
    point lv_returnedDropPoint;
    point lv_testDropPoint;
    int lv_moveAttempts;

    // Automatic Variable Declarations
    const int auto773DC6B0_ae = 100;
    const int auto773DC6B0_ai = 1;

    // Variable Initialization

    // Implementation
    lv_returnedDropPoint = lp_initialDropPoint;
    lv_moveAttempts = 1;
    for ( ; ( (auto773DC6B0_ai >= 0 && lv_moveAttempts <= auto773DC6B0_ae) || (auto773DC6B0_ai < 0 && lv_moveAttempts >= auto773DC6B0_ae) ) ; lv_moveAttempts += auto773DC6B0_ai ) {
        lv_testDropPoint = PointWithOffsetPolar(lp_initialDropPoint, RandomFixed(lp_distanceOffsetMin, lp_distanceOffsetMax), libNtve_gf_RandomAngle());
        if ((PathingType(lv_testDropPoint) == c_pathingGround) && (PointPathingIsConnected(lv_testDropPoint, lp_initialDropPoint) == true) && (PointPathingPassable(lv_testDropPoint) == true)) {
            lv_returnedDropPoint = lv_testDropPoint;
            break;
        }

    }
    return lv_returnedDropPoint;
}

void libCOMI_gf_CM_DetectionUpgradesApply () {
    // Variable Declarations
    int lv_i;
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup autoFA1078A4_g;
    const int auto4E1B22AE_ae = 15;
    const int auto4E1B22AE_ai = 1;

    // Variable Initialization

    // Implementation
    autoFA1078A4_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(autoFA1078A4_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "DetectionFriendly", 1);
    }
    lv_i = 3;
    for ( ; ( (auto4E1B22AE_ai >= 0 && lv_i <= auto4E1B22AE_ae) || (auto4E1B22AE_ai < 0 && lv_i >= auto4E1B22AE_ae) ) ; lv_i += auto4E1B22AE_ai ) {
        if (((libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_Enemy) == true) || (libNtve_gf_PlayerIsEnemy(1, lv_i, libNtve_ge_PlayerRelation_EnemyMutual) == true)) && (libCOMI_gf_PlayerIsCommander(lv_i) == true)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_i, "DetectionEnemy", 1);
        }

    }
}

fixed libCOMI_gf_Lerp (fixed lp_valueZero, fixed lp_valueOne, fixed lp_amount) {
    // Automatic Variable Declarations
    // Implementation
    return ((1 - lp_amount) * lp_valueZero + lp_amount*lp_valueOne);
}

string libCOMI_gf_CC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player) {
    // Variable Declarations
    string lv_fieldPath;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_fieldPath = "";

    // Implementation
    lv_fieldPath = (lp_field + "[" + IntToString((lp_index - 1)) + "]");
    return CatalogFieldValueGet(lp_catalog, lp_entry, lv_fieldPath, lp_player);
}

string libCOMI_gf_CC_AICommanderByUniqueIndex (int lp_uniqueIndex) {
    // Variable Declarations
    string lv_aicommanderinstance;

    // Automatic Variable Declarations
    string autoB4244EC2_userType;
    int autoB4244EC2_i;

    // Variable Initialization

    // Implementation
    autoB4244EC2_userType = "Compositions";
    autoB4244EC2_i = 1;
    for ( ; autoB4244EC2_i <= UserDataInstanceCount(autoB4244EC2_userType) ; autoB4244EC2_i += 1 ) {
        lv_aicommanderinstance = UserDataInstance(autoB4244EC2_userType, autoB4244EC2_i);
        if ((UserDataGetInt("Compositions", lv_aicommanderinstance, "X_UniqueIndex", 1) == lp_uniqueIndex)) {
            return lv_aicommanderinstance;
        }

    }
    return null;
}

void libCOMI_gf_UT_Cooldown (int lp_pPlayer) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoFA2943E7_g;
    int autoFA2943E7_u;
    unit autoFA2943E7_var;
    int autoAE54DD76_ae;
    int autoAE54DD76_var;

    // Variable Initialization

    // Implementation
    UnitSetPropertyFixed(libCOMI_gf_CM_PlayerGetGlobalCaster3(lp_pPlayer), c_unitPropEnergyPercent, 100.0);
    autoFA2943E7_g = UnitGroup(null, lp_pPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFA2943E7_u = UnitGroupCount(autoFA2943E7_g, c_unitCountAll);
    for (;; autoFA2943E7_u -= 1) {
        autoFA2943E7_var = UnitGroupUnitFromEnd(autoFA2943E7_g, autoFA2943E7_u);
        if (autoFA2943E7_var == null) { break; }
        lv_unit = autoFA2943E7_var;
        UnitClearCooldowns(lv_unit, true);
        autoAE54DD76_ae = UnitAbilityCount(lv_unit);
        autoAE54DD76_var = 1;
        for ( ; autoAE54DD76_var <= autoAE54DD76_ae; autoAE54DD76_var += 1 ) {
            UnitAbilityReset(lv_unit, AbilityCommand(UnitAbilityGet(lv_unit, autoAE54DD76_var), 0), c_spendLocationAll);
        }
        if ((UnitGetProgressComplete(autoFA2943E7_var, 1) < 99.0)) {
            UnitSetProgressComplete(autoFA2943E7_var, 1, 99);
        }

        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "StargateMorph", 0.5);
        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "StargateWarpMorph", 0.5);
        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "StargateWarpMorphInstant", 0.5);
        UnitBehaviorSetDurationRemaining(autoFA2943E7_var, "StargateWarpMorphInstant", 0.5);
    }
    libARRA_gv_utilityPlayer = lp_pPlayer;
    TriggerSendEvent("Utility Cooldown");
}

void libCOMI_gf_UT_Horde_Multiply (unit lp_pUnit, fixed lp_pCoef) {
    // Variable Declarations
    int lv_vAmount;
    point lv_vIndexPoint;
    int lv_enemyPlayer;

    // Automatic Variable Declarations
    const int auto98028E52_ae = 1000;
    int auto98028E52_var;

    // Variable Initialization
    lv_enemyPlayer = libCOMI_gv_horde_Owner_Player;

    // Implementation
    if ((UnitGroupHasUnit(libCOMI_gv_uT_Horde_UG, lp_pUnit) == true)) {
        return ;
    }

    if ((PointPathingIsConnected(UnitGetPosition(lp_pUnit), libARRA_gf_GetPlayerStartPosition(EventPlayer())) == false)) {
        auto98028E52_var = 2;
        for ( ; auto98028E52_var <= auto98028E52_ae; auto98028E52_var += 1 ) {
            lv_vIndexPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pUnit), (auto98028E52_var * 2), libARRA_gf_GetPlayerStartPosition(EventPlayer()));
            if ((PathingType(lv_vIndexPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vIndexPoint, libARRA_gf_GetPlayerStartPosition(EventPlayer())) == true)) {
                break;
            }

        }
    }
    else {
        lv_vIndexPoint = UnitGetPosition(lp_pUnit);
    }
    lv_vAmount = (TruncI(lp_pCoef) - 1);
    if ((lv_vAmount >= 1)) {
        UnitCreate(lv_vAmount, UnitGetType(lp_pUnit), 0, lv_enemyPlayer, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAddUnitGroup(libCOMI_gv_uT_Horde_UG, UnitLastCreatedGroup());
    }

    if ((RandomFixed(0.0, 1.0) <= (lp_pCoef - Trunc(lp_pCoef)))) {
        UnitCreate(1, UnitGetType(lp_pUnit), 0, lv_enemyPlayer, lv_vIndexPoint, UnitGetFacing(lp_pUnit));
        UnitGroupAdd(libCOMI_gv_uT_Horde_UG, UnitLastCreated());
    }

}

void libCOMI_gf_UT_MasteryPointsUpdate (int lp_pTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vTotalMastery;

    // Automatic Variable Declarations
    int autoBD94830E_ai;
    int autoBD94830E_ae;
    int autoBD94830E_ac;

    // Variable Initialization

    // Implementation
    autoBD94830E_ai = 0;
    autoBD94830E_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (autoBD94830E_ai < autoBD94830E_ae) {
        autoBD94830E_ai = autoBD94830E_ai+1;
        autoBD94830E_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoBD94830E_ai), "Category", 1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_pTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoBD94830E_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoBD94830E_ai);
            lv_vIndex += 1;
            libCOMI_gf_UT_PlayerMasteryUpgradeLevelSet(lp_pTargetPlayer, lv_indexMasteryUpgrade, StringToInt(libNtve_gf_DialogItemEditValue(libCOMI_gv_uT_MasteryBoxes[lv_vIndex], 1)));
            lv_vTotalMastery += StringToInt(libNtve_gf_DialogItemEditValue(libCOMI_gv_uT_MasteryBoxes[lv_vIndex], 1));
        }    
    }
    if ((GameGetMissionTime() >= 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_43AB5B7B"));
        libCOMI_gf_UT_ApplyMasteryTech(lp_pTargetPlayer);
    }
    else {
        if ((PlayerStatus(2) != c_playerStatusActive)) {
            DialogControlHookup(libCOMI_gv_cU_CommanderPanel, c_triggerControlTypeLabel, "CompositionInfoAlly/Level/MasteryLevelLabel");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_vTotalMastery), PlayerGroupAll());
        }

    }
}

void libCOMI_gf_UT_MasteryChoiceCreateUpdate (int lp_vTargetPlayer) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;
    int lv_vIndex;
    int lv_vXButtonOffset;
    int lv_vYButtonOffset;

    // Automatic Variable Declarations
    int auto5E613333_ai;
    int auto5E613333_ae;
    int auto5E613333_ac;
    int auto0B882DFD_ai;
    int auto0B882DFD_ae;
    int auto0B882DFD_ac;

    // Variable Initialization
    lv_vXButtonOffset = 45;
    lv_vYButtonOffset = 45;

    // Implementation
    if ((libCOMI_gv_uT_MasteryDialog == c_invalidDialogId)) {
        TriggerEnable(libCOMI_gt_UT_MasteryButtonClicked, true);
        DialogCreate(600, 460, c_anchorRight, 250, -75, true);
        libCOMI_gv_uT_MasteryDialog = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetRenderPriority(DialogLastCreated(), 1050);
        DialogSetFullscreen(DialogLastCreated(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 30.0);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 610, 420, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
        TextExpressionSetToken("Param/Expression/lib_COMI_D7D6BBB4", "A", IntToText(libCOMI_gv_uT_MasteryTargetPlayer));
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, 194, -142, TextExpressionAssemble("Param/Expression/lib_COMI_D7D6BBB4"), ColorWithAlpha(0,0,0,0), false, 2.0);
        auto0B882DFD_ai = 0;
        auto0B882DFD_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (auto0B882DFD_ai < auto0B882DFD_ae) {
            auto0B882DFD_ai = auto0B882DFD_ai+1;
            auto0B882DFD_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto0B882DFD_ai), "Category", 1);
            if( libCOMI_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto0B882DFD_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto0B882DFD_ai);
                lv_vIndex += 1;
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorCenter, -10, (-125 + (50 * lv_vIndex)), libCOMI_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), ColorWithAlpha(0,0,0,0), false, 2.0);
                libCOMI_gv_uT_MasteryLabels[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), libCOMI_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 65, 65);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 200, (50*lv_vIndex -140));
                DialogControlCreateInPanel(DialogControlLastCreated(), c_triggerControlTypeEditBox);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 65, 50);
                libCOMI_gv_uT_MasteryBoxes[lv_vIndex] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), IntToString(libCOMI_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorCenter, 0, 210, StringToText(""), StringExternal("Param/Value/lib_COMI_617CB2B5"), "");
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libCOMI_gv_uT_MasteryButton = DialogControlLastCreated();
    }
    else {
        auto5E613333_ai = 0;
        auto5E613333_ae = UserDataInstanceCount("MasteryUpgrades")+1;
        while (auto5E613333_ai < auto5E613333_ae) {
            auto5E613333_ai = auto5E613333_ai+1;
            auto5E613333_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto5E613333_ai), "Category", 1);
            if( libCOMI_gf_ActiveCommanderForPlayer(lp_vTargetPlayer) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto5E613333_ai),"Commander",1) ) {
                lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", auto5E613333_ai);
                lv_vIndex += 1;
                libNtve_gf_SetDialogItemText(libCOMI_gv_uT_MasteryLabels[lv_vIndex], libCOMI_gf_UT_PlayerMasteryName(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_uT_MasteryLabels[lv_vIndex], libCOMI_gf_CC_PlayerMasteryTooltip(lv_indexMasteryUpgrade), PlayerGroupAll());
                libNtve_gf_SetDialogItemEditorValue(libCOMI_gv_uT_MasteryBoxes[lv_vIndex], IntToString(libCOMI_gf_UT_PlayerMasteryUpgradeLevel(lp_vTargetPlayer, lv_indexMasteryUpgrade)), PlayerGroupAll());
            }    
        }
    }
}

void libCOMI_gf_UT_ApplyMasteryTech (int lp_player) {
    // Variable Declarations
    string lv_indexMasteryUpgrade;

    // Automatic Variable Declarations
    int autoF36430B0_ai;
    int autoF36430B0_ae;
    int autoF36430B0_ac;

    // Variable Initialization

    // Implementation
    autoF36430B0_ai = 0;
    autoF36430B0_ae = UserDataInstanceCount("MasteryUpgrades")+1;
    while (autoF36430B0_ai < autoF36430B0_ae) {
        autoF36430B0_ai = autoF36430B0_ai+1;
        autoF36430B0_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", autoF36430B0_ai), "Category", 1);
        if( libCOMI_gf_ActiveCommanderForPlayer(lp_player) == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", autoF36430B0_ai),"Commander",1) ) {
            lv_indexMasteryUpgrade = UserDataInstance("MasteryUpgrades", autoF36430B0_ai);
            if ((libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade) != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, libCOMI_gf_CC_PlayerMasteryUpgradeData(lv_indexMasteryUpgrade), libCOMI_gf_CC_PlayerMasteryUpgradeLevel(lp_player, lv_indexMasteryUpgrade));
            }

        }    
    }
}

void libCOMI_gf_UT_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)] = lp_level;
    libCOMI_gf_CC_ScoreValueSet(lp_player, (("MasteryPoints" + IntToString(libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)))), lp_level);
}

int libCOMI_gf_UT_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cCX_PlayerMasteryPointsSpent[lp_player][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_CC_PlayerMasteryCommander(lp_masteryUpgrade))][libCOMI_gf_CC_PlayerMasteryInternalIndex(lp_masteryUpgrade)];
}

text libCOMI_gf_UT_PlayerMasteryName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    return StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade), "Face", c_playerAny), "Name", 1));
}

bool libCOMI_gf_UT_GL_ScoreUsed (string lp_pScore) {
    // Automatic Variable Declarations
    const int autoFB058A3A_ae = 100;
    int autoFB058A3A_var;

    // Implementation
    autoFB058A3A_var = 0;
    for ( ; autoFB058A3A_var <= autoFB058A3A_ae; autoFB058A3A_var += 1 ) {
        if ((lp_pScore == libCOMI_gv_uT_GL_ScoresUsed[autoFB058A3A_var])) {
            return true;
        }

    }
    return false;
}

string libCOMI_gf_UT_GL_PlayerMasteryTalent (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetGameLink("MasteryUpgrades", lp_masteryUpgrade, "TalentData", 1);
}

text libCOMI_gf_UT_GL_MasteryButtonName (string lp_masteryUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_PlayerMasteryTalent(lp_masteryUpgrade) == null)) {
        return StringToText((lp_masteryUpgrade));
    }

    TextExpressionSetToken("Param/Expression/lib_COMI_BBCA0567", "A", StringToText(CatalogFieldValueGet(c_gameCatalogButton, libCOMI_gf_UT_GL_PlayerMasteryTalent(lp_masteryUpgrade), "Name", c_playerAny)));
    return TextExpressionAssemble("Param/Expression/lib_COMI_BBCA0567");
}

text libCOMI_gf_UT_GL_AddScoreValueToText (text lp_pText, string lp_pScore, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_pScore == "KorhalRiftDamage") || (lp_pScore == "DamageDealtToVoidShards") || (lp_pScore == "KaldirShuttleDamage") || (lp_pScore == "TarsonisTrainDamage") || (lp_pScore == "JarbanPointCaptureKills") || (lp_pScore == "PartAndParcelCollection") || (lp_pScore == "MeinhoffDayNightInfestedKills") || (lp_pScore == "CradleOfDeathDamageDealttoConstructs"))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_F889ADA8", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_F889ADA8");
    }
    else if (((lp_pScore == "ZeratulDamage") || (lp_pScore == "AlarakDamage") || (lp_pScore == "FenixChampionDamage") || (lp_pScore == "DehakaDamage") || (lp_pScore == "VorazunCloakedDamage") || (lp_pScore == "SwannDrillDamage") || (lp_pScore == "FenixSuitDamage") || (lp_pScore == "ZagaraFrenzyDamage") || (lp_pScore == "RaynorHyperionDamage") || (lp_pScore == "StukovInfestedDamage") || (lp_pScore == "KerriganDamage") || (lp_pScore == "HornerMagMineDamage") || (lp_pScore == "NovaDamage") || (lp_pScore == "ArtanisSoADamage") || (lp_pScore == "AbathurMonsterDamage") || (lp_pScore == "VorazunBlackHoleDamage") || (lp_pScore == "ZagaraSuicideDamage") || (lp_pScore == "StukovMonstrosityDamage") || (lp_pScore == "StetmannGaryDamage") || (lp_pScore == "TychusReaperBombDamage") || (lp_pScore == "TychusGhostDominatedDamage") || (lp_pScore == "TychusOdinDamage") || (lp_pScore == "TychusFirebatOilDamage") || (lp_pScore == "TychusGrenadeDamage") || (lp_pScore == "TychusSpectrePulseDamage") || (lp_pScore == "TychusWarhoundTurretDamage") || (lp_pScore == "MengskRoyalGuardDamage") || (lp_pScore == "MengskTrooperDamage"))) {
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_16A90BEF", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_16A90BEF");
    }
    else if ((lp_pScore == "Devouroffcooldown")) {
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_148B4663", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_148B4663");
    }
    else if ((lp_pScore == "DamageDealtbyContaminatedStrike")) {
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "A", lp_pText);
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "C", StringToText((lp_pScore)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "D", IntToText((lp_pIndex + 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        TextExpressionSetToken("Param/Expression/lib_COMI_A0F11326", "B", IntToText(lp_pIndex));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_A0F11326");
    }
    else if (true) {
        if ((libCOMI_gf_UT_GL_IsSharedMissionScore(lp_pScore) == true)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_5C7A1C02", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_5C7A1C02");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "A", lp_pText);
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "D", IntToText((lp_pIndex + 1)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "C", StringToText((lp_pScore)));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            TextExpressionSetToken("Param/Expression/lib_COMI_21C9D3B1", "B", IntToText(lp_pIndex));
            lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_21C9D3B1");
        }
    }
    return lv_vText;
}

text libCOMI_gf_UT_GL_AddVariableValueToText (text lp_pText, text lp_pVariable, text lp_pVariableDescription, int lp_pIndex) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "A", lp_pText);
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "C", lp_pVariableDescription);
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "D", IntToText((lp_pIndex + 1)));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "E", lp_pVariable);
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    TextExpressionSetToken("Param/Expression/lib_COMI_1FCBE922", "B", IntToText(lp_pIndex));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_1FCBE922");
    return lv_vText;
}

bool libCOMI_gf_UT_GL_IsSharedMissionScore (string lp_pScore) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_pScore == "MSFortressLifeRemaining") || (lp_pScore == "MSHarvestingBotLifeRemaining") || (lp_pScore == "MSLockOverloadTime") || (lp_pScore == "MSScientistHealthRemaining") || (lp_pScore == "MSShuttleUptime") || (lp_pScore == "MSTempleLifeRemaining") || (lp_pScore == "ShakurasTempleLife") || (lp_pScore == "MSThrasherUptime") || (lp_pScore == "MSTrainDuration") || (lp_pScore == "SlaynPush") || (lp_pScore == "BelshirEscortHarvesterDamage") || (lp_pScore == "UlnarOverload") || (lp_pScore == "CharThrasherLife"))) {
        return true;
    }
    else {
        return false;
    }
}

void libCOMI_gf_UT_GL_GenerateNewLayout () {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    string lv_vMap;
    string lv_vMasteryUpgradeInstance;
    string lv_vCommanderInstance;
    int lv_vMasteryIndex;
    string lv_vCurrentScore;

    // Automatic Variable Declarations
    string autoB3CB654E_userType;
    int autoB3CB654E_i;
    int auto6F0366D6_ai;
    int auto6F0366D6_ae;
    int auto6F0366D6_ac;
    const int autoAB1D5940_ae = 6;
    int autoAB1D5940_var;
    string auto6AD9CA80_userType;
    int auto6AD9CA80_i;
    int autoC9CF5070_catalog;
    int autoC9CF5070_i;
    const int auto6B5E5959_ae = 2;
    int auto6B5E5959_var;
    string autoC43EC64E_userType;
    int autoC43EC64E_i;
    string autoDC0872E8_userType;
    int autoDC0872E8_i;

    // Variable Initialization
    lv_vText = StringToText("");

    // Implementation
    BankLoad("ReplayUILayouts", 1);
    TextExpressionSetToken("Param/Expression/lib_COMI_8060C82F", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_8060C82F");
    autoB3CB654E_userType = "Commanders";
    autoB3CB654E_i = 1;
    for ( ; autoB3CB654E_i <= UserDataInstanceCount(autoB3CB654E_userType) ; autoB3CB654E_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(autoB3CB654E_userType, autoB3CB654E_i);
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "C", lv_vText);
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "A", UserDataGetText("Commanders", lv_vCommanderInstance, "Name", 1));
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "B", IntToText(UserDataGetInt("Commanders", lv_vCommanderInstance, "ZZ_UniqueIndex", 1)));
        TextExpressionSetToken("Param/Expression/lib_COMI_7E8C5873", "A", UserDataGetText("Commanders", lv_vCommanderInstance, "Name", 1));
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_7E8C5873");
        lv_vMasteryIndex = 1;
        if ((lv_vCommanderInstance == "Mengsk")) {
            autoAB1D5940_var = 1;
            for ( ; autoAB1D5940_var <= autoAB1D5940_ae; autoAB1D5940_var += 1 ) {
                TextExpressionSetToken("Param/Expression/lib_COMI_B9E3AD23", "A", lv_vText);
                TextExpressionSetToken("Param/Expression/lib_COMI_B9E3AD23", "C", IntToText(lv_vMasteryIndex));
                TextExpressionSetToken("Param/Expression/lib_COMI_B9E3AD23", "B", IntToText(autoAB1D5940_var));
                lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_B9E3AD23");
                lv_vMasteryIndex += 1;
            }
        }
        else {
            auto6F0366D6_ai = 0;
            auto6F0366D6_ae = UserDataInstanceCount("MasteryUpgrades")+1;
            while (auto6F0366D6_ai < auto6F0366D6_ae) {
                auto6F0366D6_ai = auto6F0366D6_ai+1;
                auto6F0366D6_ac = UserDataGetInt("MasteryUpgrades", UserDataInstance("MasteryUpgrades", auto6F0366D6_ai), "Category", 1);
                if( lv_vCommanderInstance == UserDataGetUserInstance("MasteryUpgrades",UserDataInstance("MasteryUpgrades", auto6F0366D6_ai),"Commander",1) ) {
                    lv_vMasteryUpgradeInstance = UserDataInstance("MasteryUpgrades", auto6F0366D6_ai);
                    TextExpressionSetToken("Param/Expression/lib_COMI_46AA3484", "A", lv_vText);
                    TextExpressionSetToken("Param/Expression/lib_COMI_46AA3484", "C", IntToText(lv_vMasteryIndex));
                    TextExpressionSetToken("Param/Expression/lib_COMI_46AA3484", "B", libCOMI_gf_UT_GL_MasteryButtonName(lv_vMasteryUpgradeInstance));
                    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_46AA3484");
                    lv_vMasteryIndex += 1;
                }    
            }
        }
        TextExpressionSetToken("Param/Expression/lib_COMI_569A223E", "A", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_569A223E");
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_54C883DD", "A", lv_vText);
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_54C883DD");
    auto6AD9CA80_userType = "Commanders";
    auto6AD9CA80_i = 1;
    for ( ; auto6AD9CA80_i <= UserDataInstanceCount(auto6AD9CA80_userType) ; auto6AD9CA80_i += 1 ) {
        lv_vCommanderInstance = UserDataInstance(auto6AD9CA80_userType, auto6AD9CA80_i);
        if ((lv_vCommanderInstance != "Tychus")) {
            auto6B5E5959_var = 1;
            for ( ; auto6B5E5959_var <= auto6B5E5959_ae; auto6B5E5959_var += 1 ) {
                if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                    lv_vA += 1;
                    lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                    libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                }

            }
            lv_vCurrentScore = "Devouroffcooldown";
            if ((lv_vCommanderInstance == "Dehaka") && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

            lv_vCurrentScore = "DamageDealtbyContaminatedStrike";
            if ((lv_vCommanderInstance == "TerranMengsk") && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                lv_vA += 1;
                lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
            }

        }
        else {
            autoC9CF5070_catalog = c_gameCatalogScoreValue;
            autoC9CF5070_i = 1;
            for ( ; autoC9CF5070_i <= CatalogEntryCount(c_gameCatalogScoreValue) ; autoC9CF5070_i += 1 ) {
                lv_vCurrentScore = CatalogEntryGet(autoC9CF5070_catalog, autoC9CF5070_i);
                if ((StringSub((lv_vCurrentScore), 1, 6) == "Tychus")) {
                    if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false)) {
                        lv_vA += 1;
                        lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
                        libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
                    }

                }

            }
        }
    }
    autoC43EC64E_userType = "Maps";
    autoC43EC64E_i = 1;
    for ( ; autoC43EC64E_i <= UserDataInstanceCount(autoC43EC64E_userType) ; autoC43EC64E_i += 1 ) {
        lv_vMap = UserDataInstance(autoC43EC64E_userType, autoC43EC64E_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libCOMI_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == false)) {
            lv_vA += 1;
            lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_8DF61F6B", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_COMI_8DF61F6B", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_8DF61F6B");
    BankValueSetFromText(BankLastCreated(), "A", "PlayerScores", lv_vText);
    lv_vText = StringToText("");
    lv_vA = 0;
    autoDC0872E8_userType = "Maps";
    autoDC0872E8_i = 1;
    for ( ; autoDC0872E8_i <= UserDataInstanceCount(autoDC0872E8_userType) ; autoDC0872E8_i += 1 ) {
        lv_vMap = UserDataInstance(autoDC0872E8_userType, autoDC0872E8_i);
        lv_vCurrentScore = UserDataGetGameLink("Maps", lv_vMap, "ScoreStatistic", 1);
        if ((lv_vCurrentScore != null) && (libCOMI_gf_UT_GL_ScoreUsed(lv_vCurrentScore) == false) && (libCOMI_gf_UT_GL_IsSharedMissionScore(lv_vCurrentScore) == true)) {
            lv_vA += 1;
            lv_vText = libCOMI_gf_UT_GL_AddScoreValueToText(lv_vText, lv_vCurrentScore, lv_vA);
            libCOMI_gv_uT_GL_ScoresUsed[lv_vA] = lv_vCurrentScore;
        }

    }
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_6D6D943D"), StringExternal("Param/Value/lib_COMI_80A5717F"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_9A81E614"), StringExternal("Param/Value/lib_COMI_39232BF7"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_2B37AC46"), StringExternal("Param/Value/lib_COMI_0EF09523"), lv_vA);
    lv_vA += 1;
    lv_vText = libCOMI_gf_UT_GL_AddVariableValueToText(lv_vText, StringExternal("Param/Value/lib_COMI_7E52D2B5"), StringExternal("Param/Value/lib_COMI_0738FC84"), lv_vA);
    lv_vA += 1;
    TextExpressionSetToken("Param/Expression/lib_COMI_8F2F72F6", "A", lv_vText);
    TextExpressionSetToken("Param/Expression/lib_COMI_8F2F72F6", "B", IntToText(lv_vA));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_COMI_8F2F72F6");
    BankValueSetFromText(BankLastCreated(), "A", "SharedMissionMutatorScores", lv_vText);
    BankSave(BankLastCreated());
}

string libCOMI_gf_ActiveCommanderForPlayer3 (int lp_player) {
    // Variable Declarations
    string lv_commanderInstance;

    // Automatic Variable Declarations
    string auto68643B21_val;

    // Variable Initialization
    lv_commanderInstance = libCOMI_gv_cCX_PlayerCommander[lp_player];

    // Implementation
    auto68643B21_val = libCOMI_gv_cCX_PlayerCommander[lp_player];
    if (auto68643B21_val == "Abathur") {
        return "Abathur";
    }
    else if (auto68643B21_val == "Alarak") {
        return "Alarak";
    }
    else if (auto68643B21_val == "Artanis") {
        return "Artanis";
    }
    else if (auto68643B21_val == "Dehaka") {
        return "Dehaka";
    }
    else if (auto68643B21_val == "Fenix") {
        return "Fenix";
    }
    else if (auto68643B21_val == "Horner") {
        return "Horner";
    }
    else if (auto68643B21_val == "Karax") {
        return "Karax";
    }
    else if (auto68643B21_val == "Kerrigan") {
        return "Kerrigan";
    }
    else if (auto68643B21_val == "Nova") {
        return "Nova";
    }
    else if (auto68643B21_val == "Raiders") {
        return "Raynor";
    }
    else if (auto68643B21_val == "Stukov") {
        return "Stukov";
    }
    else if (auto68643B21_val == "Swann") {
        return "Swann";
    }
    else if (auto68643B21_val == "Tychus") {
        return "Tychus";
    }
    else if (auto68643B21_val == "Vorazun") {
        return "Vorazun";
    }
    else if (auto68643B21_val == "Zagara") {
        return "Zagara";
    }
    else if (auto68643B21_val == "Zeratul") {
        return "Zeratul";
    }
    else if (auto68643B21_val == "Stetmann") {
        return "Stetmann";
    }
    else if (auto68643B21_val == "Mengsk") {
        return "Mengsk";
    }
    else {
        return null;
    }
}

playergroup libCOMI_gf_UT_ActiveCommanderPlayers () {
    // Variable Declarations
    playergroup lv_vPG;

    // Automatic Variable Declarations
    const int autoFD53754A_ae = 2;
    int autoFD53754A_var;

    // Variable Initialization
    lv_vPG = PlayerGroupEmpty();

    // Implementation
    autoFD53754A_var = 1;
    for ( ; autoFD53754A_var <= autoFD53754A_ae; autoFD53754A_var += 1 ) {
        if ((PlayerStatus(autoFD53754A_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_vPG, autoFD53754A_var);
        }

    }
    return lv_vPG;
}

string libCOMI_gf_UT_CommanderLoadingImage (string lp_pCommander) {
    // Automatic Variable Declarations
    string auto05888844_val;

    // Implementation
    auto05888844_val = lp_pCommander;
    if (auto05888844_val == "Abathur") {
        return "Assets\\Textures\\ui_loading_coop_hero_abathur.dds";
    }
    else if (auto05888844_val == "Alarak") {
        return "Assets\\Textures\\ui_loading_coop_hero_alarak.dds";
    }
    else if (auto05888844_val == "Artanis") {
        return "Assets\\Textures\\ui_loading_coop_hero_artanis.dds";
    }
    else if (auto05888844_val == "Dehaka") {
        return "Assets\\Textures\\ui_loading_coop_hero_dehaka.dds";
    }
    else if (auto05888844_val == "Fenix") {
        return "Assets\\Textures\\ui_loading_coop_hero_fenix.dds";
    }
    else if (auto05888844_val == "Horner") {
        return "Assets\\Textures\\ui_loading_coop_hero_hanandhorner.dds";
    }
    else if (auto05888844_val == "Karax") {
        return "Assets\\Textures\\ui_loading_coop_hero_karax.dds";
    }
    else if (auto05888844_val == "Kerrigan") {
        return "Assets\\Textures\\ui_loading_coop_hero_kerrigan.dds";
    }
    else if (auto05888844_val == "Nova") {
        return "Assets\\Textures\\ui_loading_coop_hero_nova.dds";
    }
    else if (auto05888844_val == "Raynor") {
        return "Assets\\Textures\\ui_loading_coop_hero_raynor.dds";
    }
    else if (auto05888844_val == "Stukov") {
        return "Assets\\Textures\\ui_loading_coop_hero_stukov.dds";
    }
    else if (auto05888844_val == "Swann") {
        return "Assets\\Textures\\ui_loading_coop_hero_swann.dds";
    }
    else if (auto05888844_val == "Tychus") {
        return "Assets\\Textures\\ui_loading_coop_hero_tychus.dds";
    }
    else if (auto05888844_val == "Vorazun") {
        return "Assets\\Textures\\ui_loading_coop_hero_vorazun.dds";
    }
    else if (auto05888844_val == "Zagara") {
        return "Assets\\Textures\\ui_loading_coop_hero_zagara.dds";
    }
    else if (auto05888844_val == "Zeratul") {
        return "Assets\\Textures\\ui_loading_coop_hero_zeratul.dds";
    }
    else if (auto05888844_val == "Stetmann") {
        return "Assets\\Textures\\ui_loading_coop_hero_stetmann.dds";
    }
    else if (auto05888844_val == "Mengsk") {
        return "Assets\\Textures\\ui_loading_coop_hero_mengsk.dds";
    }
    else {
        return "Assets\\Textures\\blank.dds";
    }
}

string libCOMI_gf_ActiveCommanderForPlayer2 (string lp_pUserDataInstance) {
    // Automatic Variable Declarations
    string autoAFC49AC5_val;

    // Implementation
    autoAFC49AC5_val = lp_pUserDataInstance;
    if (autoAFC49AC5_val == "Abathur") {
        return "Abathur";
    }
    else if (autoAFC49AC5_val == "Alarak") {
        return "Alarak";
    }
    else if (autoAFC49AC5_val == "Artanis") {
        return "Artanis";
    }
    else if (autoAFC49AC5_val == "Dehaka") {
        return "Dehaka";
    }
    else if (autoAFC49AC5_val == "Fenix") {
        return "Fenix";
    }
    else if (autoAFC49AC5_val == "Horner") {
        return "Horner";
    }
    else if (autoAFC49AC5_val == "Karax") {
        return "Karax";
    }
    else if (autoAFC49AC5_val == "Kerrigan") {
        return "Kerrigan";
    }
    else if (autoAFC49AC5_val == "Nova") {
        return "Nova";
    }
    else if (autoAFC49AC5_val == "Raiders") {
        return "Raynor";
    }
    else if (autoAFC49AC5_val == "Stukov") {
        return "Stukov";
    }
    else if (autoAFC49AC5_val == "Swann") {
        return "Swann";
    }
    else if (autoAFC49AC5_val == "Tychus") {
        return "Tychus";
    }
    else if (autoAFC49AC5_val == "Vorazun") {
        return "Vorazun";
    }
    else if (autoAFC49AC5_val == "Zagara") {
        return "Zagara";
    }
    else if (autoAFC49AC5_val == "Zeratul") {
        return "Zeratul";
    }
    else if (autoAFC49AC5_val == "Stetmann") {
        return "Stetmann";
    }
    else if (autoAFC49AC5_val == "Mengsk") {
        return "Mengsk";
    }
    else {
        return null;
    }
}

int libCOMI_gf_UT_OtherPlayer (int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pPlayer == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

unit libCOMI_gf_CM_PlayerGetGlobalCaster3 (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_yY_GPCasterUnit[lp_player];
}

void libCOMI_gf_UT_CommanderHide (int lp_pCommanderMax) {
    // Variable Declarations
    int lv_commanderIndex;
    int lv_commanderButtons;

    // Automatic Variable Declarations
    const int auto6034FEA3_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto6034FEA3_ai = 1;

    // Variable Initialization
    lv_commanderButtons = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(libCOMI_gv_cU_CommanderPanel, c_triggerControlTypePanel, "CommanderButtons");
    lv_commanderButtons = DialogControlLastCreated();
    lv_commanderIndex = (lp_pCommanderMax + 1);
    for ( ; ( (auto6034FEA3_ai >= 0 && lv_commanderIndex <= auto6034FEA3_ae) || (auto6034FEA3_ai < 0 && lv_commanderIndex >= auto6034FEA3_ae) ) ; lv_commanderIndex += auto6034FEA3_ai ) {
        DialogControlHookup(lv_commanderButtons, c_triggerControlTypeButton, "CommanderButton" + IntToString(lv_commanderIndex));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
}

bool libCOMI_gf_UT_Bank_UnitExcluded (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pUnit != libCOMI_gf_CM_PlayerGetGlobalCaster2(1)) && (lp_pUnit != libCOMI_gf_CM_PlayerGetGlobalCaster2(2)) && (lp_pUnit != libCOMI_gf_OBSOLETE_AF_GetHeroUnit(1)) && (lp_pUnit != libCOMI_gf_OBSOLETE_AF_GetHeroUnit(2))) {
        return false;
    }
    else {
        return true;
    }
}

void libCOMI_gf_UT_Bank_SaveBank (int lp_pPlayer, string lp_pSaveName, string lp_pBankName) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vA;
    int lv_vB;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    const int lv_vSecLength = 6;

    // Automatic Variable Declarations
    const int auto60B37C9E_ae = libCOMI_gv_uT_Bank_MaxPlayers;
    int auto60B37C9E_var;
    unitgroup auto46BA53E6_g;
    int auto46BA53E6_u;
    unit auto46BA53E6_var;

    // Variable Initialization
    lv_vUnitSection = ("Units_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    BankSectionRemove(BankLastCreated(), lv_vUnitSection);
    auto60B37C9E_var = 1;
    for ( ; auto60B37C9E_var <= auto60B37C9E_ae; auto60B37C9E_var += 1 ) {
        auto46BA53E6_g = UnitGroup(null, auto60B37C9E_var, RegionEntireMap(), libCOMI_gv_uT_Bank_UnitFilter, 0);
        auto46BA53E6_u = UnitGroupCount(auto46BA53E6_g, c_unitCountAll);
        for (;; auto46BA53E6_u -= 1) {
            auto46BA53E6_var = UnitGroupUnitFromEnd(auto46BA53E6_g, auto46BA53E6_u);
            if (auto46BA53E6_var == null) { break; }
            if ((libCOMI_gf_UT_Bank_UnitExcluded(auto46BA53E6_var) == false)) {
                BankValueSetFromString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA), (FixedToString(PointGetX(UnitGetPosition(auto46BA53E6_var)), c_fixedPrecisionAny) + "," + FixedToString(PointGetY(UnitGetPosition(auto46BA53E6_var)), c_fixedPrecisionAny) + "," + FixedToString(UnitGetFacing(auto46BA53E6_var), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropLife, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropShields, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropEnergy, c_unitPropCurrent), c_fixedPrecisionAny) + "," + FixedToString(UnitGetPropertyFixed(auto46BA53E6_var, c_unitPropKills, c_unitPropCurrent), c_fixedPrecisionAny) + "," + IntToString(BoolToInt(libNtve_gf_UnitIsHidden(auto46BA53E6_var))) + "," + IntToString(UnitGetOwner(auto46BA53E6_var)) + "," + (UnitGetType(auto46BA53E6_var))));
                lv_vA += 1;
            }

        }
    }
    BankValueSetFromInt(BankLastCreated(), lv_vUnitSection, "MaxUnits", lv_vA);
    BankSave(BankLastCreated());
}

void libCOMI_gf_UT_Bank_RestoreBank (int lp_pPlayer, string lp_pSaveName, playergroup lp_pPlayerGroup, string lp_pBankName) {
    // Variable Declarations
    int lv_vA;
    int lv_vB;
    int lv_vMaxUnits;
    int lv_vMaxUpgrades;
    unitgroup lv_vUGRemoveTheseUnitsLater;
    unitgroup lv_vUGKeepTheseUnits;
    string lv_vUpgrade;
    string lv_vUnitSection;
    string lv_vUpgradeSection;
    string lv_vString;
    string lv_vUnitType;
    point lv_vPosition;
    int lv_vPlayer;
    unitgroup lv_vUGSameUnitsClose;
    unit lv_vUnit;

    // Automatic Variable Declarations
    int auto94EA2118_ae;
    const int auto94EA2118_ai = 1;
    playergroup auto490607D7_g;
    int auto490607D7_var;
    unitgroup autoCDD0299D_g;
    int autoCDD0299D_u;
    unit autoCDD0299D_var;
    unitgroup auto1C26FBAB_g;
    int auto1C26FBAB_u;
    unit auto1C26FBAB_var;

    // Variable Initialization
    lv_vUGRemoveTheseUnitsLater = UnitGroupEmpty();
    lv_vUGKeepTheseUnits = UnitGroupEmpty();
    lv_vUnitSection = ("Units_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vUpgradeSection = ("Upgrades_" + (libCOMI_gf_CC_CurrentMap()) + "_" + lp_pSaveName);
    lv_vString = "";
    lv_vUGSameUnitsClose = UnitGroupEmpty();

    // Implementation
    BankLoad(lp_pBankName, lp_pPlayer);
    lv_vMaxUnits = BankValueGetAsInt(BankLastCreated(), lv_vUnitSection, "MaxUnits");
    auto94EA2118_ae = (lv_vMaxUnits-1);
    lv_vA = 0;
    for ( ; ( (auto94EA2118_ai >= 0 && lv_vA <= auto94EA2118_ae) || (auto94EA2118_ai < 0 && lv_vA >= auto94EA2118_ae) ) ; lv_vA += auto94EA2118_ai ) {
        lv_vString = BankValueGetAsString(BankLastCreated(), lv_vUnitSection, IntToString(lv_vA));
        lv_vUnitType = UnitTypeFromString(libARRA_gf_UT_SeparatedSubstring(lv_vString, 10, ","));
        lv_vPosition = Point(StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 1, ",")), StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 2, ",")));
        lv_vPlayer = StringToInt(libARRA_gf_UT_SeparatedSubstring(lv_vString, 9, ","));
        lv_vUGSameUnitsClose = UnitGroup(lv_vUnitType, lv_vPlayer, RegionCircle(lv_vPosition, 0.2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) == 0)) {
            lv_vB += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_vUnitType, c_unitCreateIgnorePlacement, lv_vPlayer, lv_vPosition);
            UnitGroupAdd(lv_vUGKeepTheseUnits, UnitLastCreated());
            UnitSetFacing(UnitLastCreated(), StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 3, ",")), 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 6, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 7, ",")));
            if ((libARRA_gf_UT_SeparatedSubstring(lv_vString, 8, ",") == "1")) {
                libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
            }

        }
        else if ((PlayerGroupHasPlayer(lp_pPlayerGroup, lv_vPlayer) == true) && (UnitGroupCount(lv_vUGSameUnitsClose, c_unitCountAlive) >= 1)) {
            lv_vUnit = UnitGroupRandomUnit(lv_vUGSameUnitsClose, c_unitCountAlive);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 4, ",")));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, StringToFixed(libARRA_gf_UT_SeparatedSubstring(lv_vString, 5, ",")));
            UnitGroupAdd(lv_vUGKeepTheseUnits, lv_vUnit);
        }
    }
    auto490607D7_g = lp_pPlayerGroup;
    auto490607D7_var = -1;
    while (true) {
        auto490607D7_var = PlayerGroupNextPlayer(auto490607D7_g, auto490607D7_var);
        if (auto490607D7_var < 0) { break; }
        autoCDD0299D_g = UnitGroup(null, auto490607D7_var, RegionEntireMap(), libCOMI_gv_uT_Bank_UnitFilter, 0);
        autoCDD0299D_u = UnitGroupCount(autoCDD0299D_g, c_unitCountAll);
        for (;; autoCDD0299D_u -= 1) {
            autoCDD0299D_var = UnitGroupUnitFromEnd(autoCDD0299D_g, autoCDD0299D_u);
            if (autoCDD0299D_var == null) { break; }
            if ((libCOMI_gf_UT_Bank_UnitExcluded(autoCDD0299D_var) == false) && (UnitGroupHasUnit(lv_vUGKeepTheseUnits, autoCDD0299D_var) == false)) {
                UnitRemove(autoCDD0299D_var);
            }

        }
    }
    auto1C26FBAB_g = lv_vUGRemoveTheseUnitsLater;
    auto1C26FBAB_u = UnitGroupCount(auto1C26FBAB_g, c_unitCountAll);
    for (;; auto1C26FBAB_u -= 1) {
        auto1C26FBAB_var = UnitGroupUnitFromEnd(auto1C26FBAB_g, auto1C26FBAB_u);
        if (auto1C26FBAB_var == null) { break; }
        UnitRemove(auto1C26FBAB_var);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_FEE0C551", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_FEE0C551"));
}

point libCOMI_gf_PointWithPathingNearBase (playergroup lp_players) {
    // Variable Declarations
    point lv_vPoint;
    point lv_vPoint2;
    point lv_vPointP1;
    point lv_vPointP2;

    // Automatic Variable Declarations
    const int autoC80C6CDB_n = 30;
    int autoC80C6CDB_i;

    // Variable Initialization
    lv_vPoint = libCOMI_gf_GetPlayersBaseMiddlePoint(libCOMI_gf_AffectedPlayers());
    lv_vPointP1 = libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(lp_players, 1));

    // Implementation
    if ((PlayerGroupCount(lp_players) > 1)) {
        lv_vPointP2 = libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(lp_players, 2));
    }
    else {
        lv_vPointP2 = libNtve_gf_PointOffsetTowardsPoint(lv_vPointP1, 6.0, RegionRandomPoint(RegionEntireMap()));
    }
    for (autoC80C6CDB_i = 1; autoC80C6CDB_i <= autoC80C6CDB_n; autoC80C6CDB_i += 1) {
        lv_vPoint2 = RegionRandomPoint(RegionCircle(lv_vPoint, 40.0));
        if ((PointPathingCost(lv_vPoint, lv_vPoint2) != 65536)) {
            return lv_vPoint;
        }
        else {
            lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(lv_vPointP1, (DistanceBetweenPoints(lv_vPointP1, lv_vPointP2) * RandomFixed(0.0, 1.0)), lv_vPointP2);
        }
    }
    return lv_vPoint;
}

point libCOMI_gf_GetPlayersBaseMiddlePoint (playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((PlayerGroupCount(lp_players) == 1)) {
        return libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(lp_players, 1));
    }
    else {
        return PointInterpolate(libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(lp_players, 1)), libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(lp_players, 2)), 0.5);
    }
}

region libCOMI_gf_CT_MutatorSafetyZone () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cT_MutatorSafetyZone;
}

void libCOMI_gf_UT_SignalMutators () {
    // Variable Declarations
    string lv_vMutator;

    // Automatic Variable Declarations
    string auto1448B112_userType;
    int auto1448B112_i;

    // Variable Initialization

    // Implementation
    auto1448B112_userType = "Mutators";
    auto1448B112_i = 1;
    for ( ; auto1448B112_i <= UserDataInstanceCount(auto1448B112_userType) ; auto1448B112_i += 1 ) {
        lv_vMutator = UserDataInstance(auto1448B112_userType, auto1448B112_i);
        if ((libCOMI_gf_MutatorIsEnabled(lv_vMutator) == true)) {
            TechTreeUpgradeAddLevel(0, (("mutatorinfo_" + (lv_vMutator))), 1);
        }

    }
}

void libCOMI_gf_CU_RandomMutationSelectDisplay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == false)) {
        return ;
    }

    libCOMI_gf_CU_RandomMutationSelectCreate();
    DialogSetVisible(libCOMI_gv_cU_RandomMutationSelectDialog, PlayerGroupSingle(lp_player), true);
}

void libCOMI_gf_CU_RandomMutationSelectCreate () {
    // Variable Declarations
    fixed lv_maxPoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxPoints = 40.0;

    // Implementation
    if ((libCOMI_gv_cU_RandomMutationSelectDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libCOMI_gv_cU_RandomMutationSelectDialog = DialogLastCreated();
    DialogControlCreate(libCOMI_gv_cU_RandomMutationSelectDialog, c_triggerControlTypeSlider);
    libCOMI_gv_cU_RandomMutationSelectMinSlider = DialogControlLastCreated();
    DialogControlSetSize(libCOMI_gv_cU_RandomMutationSelectMinSlider, PlayerGroupAll(), 450, 50);
    DialogControlSetPosition(libCOMI_gv_cU_RandomMutationSelectMinSlider, PlayerGroupAll(), c_anchorTop, 0, 40);
    libNtve_gf_SetDialogItemMinimumValue(libCOMI_gv_cU_RandomMutationSelectMinSlider, 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(libCOMI_gv_cU_RandomMutationSelectMinSlider, lv_maxPoints, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libCOMI_gv_cU_RandomMutationSelectMinSlider, 0.0, PlayerGroupAll());
    DialogControlCreate(libCOMI_gv_cU_RandomMutationSelectDialog, c_triggerControlTypeSlider);
    libCOMI_gv_cU_RandomMutationSelectMaxSlider = DialogControlLastCreated();
    DialogControlSetSize(libCOMI_gv_cU_RandomMutationSelectMaxSlider, PlayerGroupAll(), 450, 50);
    DialogControlSetPosition(libCOMI_gv_cU_RandomMutationSelectMaxSlider, PlayerGroupAll(), c_anchorTop, 0, 90);
    libNtve_gf_SetDialogItemMinimumValue(libCOMI_gv_cU_RandomMutationSelectMaxSlider, 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(libCOMI_gv_cU_RandomMutationSelectMaxSlider, lv_maxPoints, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libCOMI_gv_cU_RandomMutationSelectMaxSlider, 0.0, PlayerGroupAll());
    DialogControlCreate(libCOMI_gv_cU_RandomMutationSelectDialog, c_triggerControlTypeSlider);
    libCOMI_gv_cU_RandomMutationSelectMinMutSlider = DialogControlLastCreated();
    DialogControlSetSize(libCOMI_gv_cU_RandomMutationSelectMinMutSlider, PlayerGroupAll(), 450, 50);
    DialogControlSetPosition(libCOMI_gv_cU_RandomMutationSelectMinMutSlider, PlayerGroupAll(), c_anchorTop, 0, 140);
    libNtve_gf_SetDialogItemMinimumValue(libCOMI_gv_cU_RandomMutationSelectMinMutSlider, 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(libCOMI_gv_cU_RandomMutationSelectMinMutSlider, 4.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libCOMI_gv_cU_RandomMutationSelectMinMutSlider, 1.0, PlayerGroupAll());
    DialogControlCreate(libCOMI_gv_cU_RandomMutationSelectDialog, c_triggerControlTypeSlider);
    libCOMI_gv_cU_RandomMutationSelectMaxMutSlider = DialogControlLastCreated();
    DialogControlSetSize(libCOMI_gv_cU_RandomMutationSelectMaxMutSlider, PlayerGroupAll(), 450, 50);
    DialogControlSetPosition(libCOMI_gv_cU_RandomMutationSelectMaxMutSlider, PlayerGroupAll(), c_anchorTop, 0, 190);
    libNtve_gf_SetDialogItemMinimumValue(libCOMI_gv_cU_RandomMutationSelectMaxMutSlider, 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(libCOMI_gv_cU_RandomMutationSelectMaxMutSlider, 4.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(libCOMI_gv_cU_RandomMutationSelectMaxMutSlider, 1.0, PlayerGroupAll());
    DialogControlCreate(libCOMI_gv_cU_RandomMutationSelectDialog, c_triggerControlTypeLabel);
    libCOMI_gv_cU_RandomMutationSelectLabel = DialogControlLastCreated();
    DialogControlSetSize(libCOMI_gv_cU_RandomMutationSelectLabel, PlayerGroupAll(), 450, 50);
    DialogControlSetPosition(libCOMI_gv_cU_RandomMutationSelectLabel, PlayerGroupAll(), c_anchorTop, 0, 240);
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_RandomMutationSelectLabel, StringToText(("Difficulty: [" + IntToString(RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMinSlider, 1))) + ", " + IntToString(RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMaxSlider, 1))) + "]")), PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(libCOMI_gv_cU_RandomMutationSelectDialog, 75, 50, c_anchorBottom, 0, 25, StringToText(""), StringToText("OK"), "");
    libCOMI_gv_cU_RandomMutationSelectOKButton = DialogControlLastCreated();
}

void libCOMI_gf_CU_RandomMutationSelectClose (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(libCOMI_gv_cU_RandomMutationSelectDialog, PlayerGroupSingle(lp_player), false);
}

void libCOMI_gf_CU_MutatorDisplay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CU_MutatorCreate();
    libCOMI_gf_CU_MutatorInitFromData(lp_player);
    libCOMI_gf_CU_MutatorUpdate(lp_player);
    DialogSetVisible(libCOMI_gv_cU_MutatorDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOMI_gt_CU_MutatorAcceptClicked, true);
    TriggerEnable(libCOMI_gt_CU_MutatorCancelClicked, true);
}

void libCOMI_gf_CU_MutatorCreate () {
    // Variable Declarations
    int lv_mutatorIndex;
    int lv_hookupFrame;

    // Automatic Variable Declarations
    const int auto728E6606_ae = libCOMI_gv_cUC_MUTATORMAXCOUNT;
    const int auto728E6606_ai = 1;

    // Variable Initialization
    lv_hookupFrame = c_invalidDialogControlId;

    // Implementation
    if ((libCOMI_gv_cU_MutatorDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_cU_MutatorDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libCOMI_gv_cU_MutatorDialog, c_triggerControlTypePanel, "Coop_MutatorSelection/MutatorSelectionTemplate");
    libCOMI_gv_cU_MutatorPanel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_MutatorPanel, c_triggerControlTypePanel, "ScrollableMutatorList");
    lv_hookupFrame = DialogControlLastCreated();
    DialogControlHookup(lv_hookupFrame, c_triggerControlTypePanel, "ContainerFrame");
    lv_hookupFrame = DialogControlLastCreated();
    lv_mutatorIndex = 1;
    for ( ; ( (auto728E6606_ai >= 0 && lv_mutatorIndex <= auto728E6606_ae) || (auto728E6606_ai < 0 && lv_mutatorIndex >= auto728E6606_ae) ) ; lv_mutatorIndex += auto728E6606_ai ) {
        DialogControlHookup(lv_hookupFrame, c_triggerControlTypePanel, "Item" + IntToString(lv_mutatorIndex));
        libCOMI_gv_cU_MutatorItemPanels[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MutatorItemPanels[lv_mutatorIndex], c_triggerControlTypeCheckBox, "ActiveCheckBox");
        libCOMI_gv_cU_MutatorCheckboxes[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MutatorItemPanels[lv_mutatorIndex], c_triggerControlTypeLabel, "NameLabel");
        libCOMI_gv_cU_MutatorNameLabels[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MutatorItemPanels[lv_mutatorIndex], c_triggerControlTypeLabel, "DescriptionLabel");
        libCOMI_gv_cU_MutatorDescriptionLabels[lv_mutatorIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libCOMI_gv_cU_MutatorPanel, c_triggerControlTypeButton, "AcceptButton");
    libCOMI_gv_cU_MutatorAcceptButton = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_MutatorPanel, c_triggerControlTypeButton, "CancelButton");
    libCOMI_gv_cU_MutatorCancelButton = DialogControlLastCreated();
}

void libCOMI_gf_CU_MutatorInitFromData (int lp_player) {
    // Variable Declarations
    string lv_indexMutator;
    int lv_mutatorCount;
    playergroup lv_updatePlayers;

    // Automatic Variable Declarations
    int autoA054C958_ai;
    int autoA054C958_ae;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    autoA054C958_ai = 1;
    autoA054C958_ae = UserDataInstanceCount("Mutators")+1;
    while (autoA054C958_ai < autoA054C958_ae) {
        lv_indexMutator = UserDataInstance("Mutators", autoA054C958_ai);
        autoA054C958_ai = autoA054C958_ai+1;
        lv_mutatorCount += 1;
        if ((lv_mutatorCount > libCOMI_gv_cUC_MUTATORMAXCOUNT)) {
            break;
        }

        libCOMI_gv_cU_MutatorItems[lv_mutatorCount] = lv_indexMutator;
        if ((libCOMI_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            libNtve_gf_SetDialogItemChecked(libCOMI_gv_cU_MutatorCheckboxes[lv_mutatorCount], true, lv_updatePlayers);
        }
        else {
            libNtve_gf_SetDialogItemChecked(libCOMI_gv_cU_MutatorCheckboxes[lv_mutatorCount], false, lv_updatePlayers);
        }
    }
}

void libCOMI_gf_CU_MutatorClose (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto75C8A275_g;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libCOMI_gv_cU_MutatorDialog, PlayerGroupSingle(lp_player), false);
    TriggerEnable(libCOMI_gt_CU_MutatorAcceptClicked, false);
    TriggerEnable(libCOMI_gt_CU_MutatorCancelClicked, false);
    if ((libCOMI_gv_cU_CommanderSelect_RefCount > 0)) {
        auto75C8A275_g = libCOMI_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto75C8A275_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
        }
    }

}

void libCOMI_gf_CU_MutatorUpdateData () {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto8F738690_ae = libCOMI_gv_cUC_MUTATORMAXCOUNT;
    const int auto8F738690_ai = 1;

    // Variable Initialization

    // Implementation
    lv_mutatorIndex = 1;
    for ( ; ( (auto8F738690_ai >= 0 && lv_mutatorIndex <= auto8F738690_ae) || (auto8F738690_ai < 0 && lv_mutatorIndex >= auto8F738690_ae) ) ; lv_mutatorIndex += auto8F738690_ai ) {
        if ((libCOMI_gv_cU_MutatorItems[lv_mutatorIndex] == null)) {
            continue;
        }

        if ((libNtve_gf_DialogItemIsChecked(libCOMI_gv_cU_MutatorCheckboxes[lv_mutatorIndex], 1) == true)) {
            libCOMI_gf_EnableDisableMutator(true, libCOMI_gv_cU_MutatorItems[lv_mutatorIndex]);
        }
        else {
            libCOMI_gf_EnableDisableMutator(false, libCOMI_gv_cU_MutatorItems[lv_mutatorIndex]);
        }
    }
}

void libCOMI_gf_CU_MutatorUpdate (int lp_player) {
    // Variable Declarations
    int lv_mutatorIndex;
    playergroup lv_updatePlayers;

    // Automatic Variable Declarations
    const int auto25748BB8_ae = libCOMI_gv_cUC_MUTATORMAXCOUNT;
    const int auto25748BB8_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    lv_mutatorIndex = 1;
    for ( ; ( (auto25748BB8_ai >= 0 && lv_mutatorIndex <= auto25748BB8_ae) || (auto25748BB8_ai < 0 && lv_mutatorIndex >= auto25748BB8_ae) ) ; lv_mutatorIndex += auto25748BB8_ai ) {
        if ((libCOMI_gv_cU_MutatorItems[lv_mutatorIndex] == null)) {
            DialogControlSetVisible(libCOMI_gv_cU_MutatorItemPanels[lv_mutatorIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_cU_MutatorItemPanels[lv_mutatorIndex], lv_updatePlayers, true);
        }
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MutatorNameLabels[lv_mutatorIndex], libCOMI_gf_CT_MutatorName(libCOMI_gv_cU_MutatorItems[lv_mutatorIndex]), lv_updatePlayers);
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MutatorDescriptionLabels[lv_mutatorIndex], libCOMI_gf_CT_MutatorDescription(libCOMI_gv_cU_MutatorItems[lv_mutatorIndex]), lv_updatePlayers);
    }
}

void libCOMI_gf_CU_CustomMutatorStartGame (trigger t) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, libCOMI_gv_cUC_CustomMutatorEventStart);
}

void libCOMI_gf_CU_CustomMutatorCreate () {
    // Variable Declarations
    int lv_itemIndex;
    int lv_indexPlayer;
    int lv_hookupFrame;
    int lv_menuContainer;
    int lv_selectionContainer;
    int lv_selectedContainer;
    int lv_playerCardsContainer;

    // Automatic Variable Declarations
    const int auto8877E20E_ae = libCOMI_gv_cUC_CustomMutatorItemsPerPage;
    const int auto8877E20E_ai = 1;
    const int auto587A91E8_ae = libCOMI_gv_cUC_CustomMutatorItemsActiveMax;
    const int auto587A91E8_ai = 1;
    playergroup autoF99EED8C_g;

    // Variable Initialization
    lv_hookupFrame = c_invalidDialogControlId;
    lv_menuContainer = c_invalidDialogControlId;
    lv_selectionContainer = c_invalidDialogControlId;
    lv_selectedContainer = c_invalidDialogControlId;
    lv_playerCardsContainer = c_invalidDialogControlId;

    // Implementation
    if ((libCOMI_gv_cU_CustomMutatorDialog != c_invalidDialogId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    libCOMI_gv_cU_CustomMutatorChatDisplayStandard = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_cU_CustomMutatorDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_CustomMutatorSelection/CustomMutatorFullsreenTemplate");
    libCOMI_gv_cU_CustomMutatorPanel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypePanel, "CustomMutatorMenuContainer");
    lv_menuContainer = DialogControlLastCreated();
    DialogControlHookup(lv_menuContainer, c_triggerControlTypePanel, "SelectionContainer");
    lv_selectionContainer = DialogControlLastCreated();
    DialogControlHookup(lv_selectionContainer, c_triggerControlTypePanel, "ItemsContainer");
    lv_hookupFrame = DialogControlLastCreated();
    lv_itemIndex = 1;
    for ( ; ( (auto8877E20E_ai >= 0 && lv_itemIndex <= auto8877E20E_ae) || (auto8877E20E_ai < 0 && lv_itemIndex >= auto8877E20E_ae) ) ; lv_itemIndex += auto8877E20E_ai ) {
        DialogControlHookup(lv_hookupFrame, c_triggerControlTypeButton, "Item" + IntToString(lv_itemIndex));
        libCOMI_gv_cU_CustomMutatorItemButtons[lv_itemIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorItemButtons[lv_itemIndex], c_triggerControlTypeImage, "Icon");
        libCOMI_gv_cU_CustomMutatorItemIcons[lv_itemIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorItemButtons[lv_itemIndex], c_triggerControlTypeLabel, "Label");
        libCOMI_gv_cU_CustomMutatorItemLabels[lv_itemIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_menuContainer, c_triggerControlTypePanel, "SelectedContainer");
    lv_selectedContainer = DialogControlLastCreated();
    DialogControlHookup(lv_selectedContainer, c_triggerControlTypePanel, "ItemsContainer");
    lv_hookupFrame = DialogControlLastCreated();
    lv_itemIndex = 1;
    for ( ; ( (auto587A91E8_ai >= 0 && lv_itemIndex <= auto587A91E8_ae) || (auto587A91E8_ai < 0 && lv_itemIndex >= auto587A91E8_ae) ) ; lv_itemIndex += auto587A91E8_ai ) {
        DialogControlHookup(lv_hookupFrame, c_triggerControlTypeButton, "Item" + IntToString(lv_itemIndex));
        libCOMI_gv_cU_CustomMutatorActiveItemButtons[lv_itemIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorActiveItemButtons[lv_itemIndex], c_triggerControlTypeLabel, "Label");
        libCOMI_gv_cU_CustomMutatorActiveItemLabels[lv_itemIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libCOMI_gv_cU_CustomMutatorPanel, c_triggerControlTypePanel, "PlayerCardsContainer");
    lv_playerCardsContainer = DialogControlLastCreated();
    autoF99EED8C_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF99EED8C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        DialogControlHookup(lv_playerCardsContainer, c_triggerControlTypePanel, "Player" + IntToString(lv_indexPlayer) + "Container");
        libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], c_triggerControlTypeLabel, "CommanderLabel");
        libCOMI_gv_cU_CustomMutatorCommanderNameLabel[lv_indexPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], c_triggerControlTypeLabel, "LevelLabel");
        libCOMI_gv_cU_CustomMutatorLevelLabel[lv_indexPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], c_triggerControlTypeLabel, "MasteryLevelLabel");
        libCOMI_gv_cU_CustomMutatorMasteryLevelLabel[lv_indexPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], c_triggerControlTypeLabel, "PlayerLabel");
        libCOMI_gv_cU_CustomMutatorPlayerNameLabel[lv_indexPlayer] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], c_triggerControlTypeImage, "CommanderImage");
        libCOMI_gv_cU_CustomMutatorCommanderImage[lv_indexPlayer] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_selectionContainer, c_triggerControlTypePanel, "HeaderContainer");
    lv_hookupFrame = DialogControlLastCreated();
    DialogControlHookup(lv_hookupFrame, c_triggerControlTypeLabel, "PageCount");
    libCOMI_gv_cU_CustomMutatorPageCountLabel = DialogControlLastCreated();
    DialogControlHookup(lv_hookupFrame, c_triggerControlTypeButton, "PageDownButton");
    libCOMI_gv_cU_CustomMutatorPagePrevButton = DialogControlLastCreated();
    DialogControlHookup(lv_hookupFrame, c_triggerControlTypeButton, "PageUpButton");
    libCOMI_gv_cU_CustomMutatorPageNextButton = DialogControlLastCreated();
    DialogControlHookup(lv_menuContainer, c_triggerControlTypeButton, "StartGameButton");
    libCOMI_gv_cU_CustomMutatorStartButton = DialogControlLastCreated();
    DialogControlHookup(lv_menuContainer, c_triggerControlTypeButton, "MenuButton");
    libCOMI_gv_cU_CustomMutatorMenuButton = DialogControlLastCreated();
    DialogControlHookup(lv_playerCardsContainer, c_triggerControlTypePanel, "Header");
    lv_hookupFrame = DialogControlLastCreated();
    DialogControlHookup(lv_hookupFrame, c_triggerControlTypeLabel, "Title");
    libCOMI_gv_cU_CustomMutatorMapNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_menuContainer, c_triggerControlTypePulldown, "GameSpeedPulldown");
    libCOMI_gv_cU_CustomMutatorSpeedDropDown = DialogControlLastCreated();
}

void libCOMI_gf_CU_CustomMutatorClose () {
    // Automatic Variable Declarations
    int auto3AF37135_val;

    // Implementation
    libCOMI_gf_CU_CustomMutatorUpdateData();
    UISetHotkeyAllowed(PlayerGroupAll(), c_hotkeyMenuAchievements, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    auto3AF37135_val = DialogControlGetSelectedItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, 1);
    if (auto3AF37135_val == 1) {
        GameSetSpeedValue(c_gameSpeedFaster);
    }
    else if (auto3AF37135_val == 2) {
        GameSetSpeedValue(c_gameSpeedFast);
    }
    else if (auto3AF37135_val == 3) {
        GameSetSpeedValue(c_gameSpeedNormal);
    }
    else if (auto3AF37135_val == 4) {
        GameSetSpeedValue(c_gameSpeedSlow);
    }
    else {
    }
    DialogControlSetVisible(libCOMI_gv_cU_CustomMutatorChatDisplayStandard, PlayerGroupAll(), true);
    DialogSetVisible(libCOMI_gv_cU_CustomMutatorDialog, PlayerGroupAll(), false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorChangePage, false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorToggleItem, false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorSuggestItem, false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorRemoveActiveItem, false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorStartGame, false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorOpenMenu, false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorLeaderLeaves, false);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorSpeedChange, false);
}

void libCOMI_gf_CU_CustomMutatorInitFromData () {
    // Variable Declarations
    string lv_indexMutator;
    int lv_indexPlayer;
    int lv_mutatorCount;

    // Automatic Variable Declarations
    int auto5781D2FD_ai;
    int auto5781D2FD_ae;
    playergroup auto321248D9_g;

    // Variable Initialization

    // Implementation
    auto5781D2FD_ai = 1;
    auto5781D2FD_ae = UserDataInstanceCount("Mutators")+1;
    while (auto5781D2FD_ai < auto5781D2FD_ae) {
        lv_indexMutator = UserDataInstance("Mutators", auto5781D2FD_ai);
        auto5781D2FD_ai = auto5781D2FD_ai+1;
        if ((libCOMI_gf_CT_MutatorCustomAllowed(lv_indexMutator) == false)) {
            continue;
        }

        libCOMI_gv_cU_CustomMutatorItemCount += 1;
        libCOMI_gv_cU_CustomMutatorItems[libCOMI_gv_cU_CustomMutatorItemCount] = lv_indexMutator;
        if ((lv_mutatorCount >= libCOMI_gv_cUC_MUTATORMAXCOUNT)) {
            break;
        }

    }
    libCOMI_gv_cU_CustomMutatorPageCount = CeilingI((libCOMI_gv_cU_CustomMutatorItemCount / libCOMI_gv_cUC_CustomMutatorItemsPerPage));
    libCOMI_gv_cU_CustomMutatorPageCount = CeilingI((IntToFixed(libCOMI_gv_cU_CustomMutatorItemCount) / IntToFixed(libCOMI_gv_cUC_CustomMutatorItemsPerPage)));
    auto321248D9_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto321248D9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorCommanderNameLabel[lv_indexPlayer], libCOMI_gf_CC_CommanderName(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorPlayerNameLabel[lv_indexPlayer], PlayerName(lv_indexPlayer), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorMasteryLevelLabel[lv_indexPlayer], IntToText(libCOMI_gf_CC_PlayerMasteryLevel(lv_indexPlayer)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorLevelLabel[lv_indexPlayer], IntToText(libCOMI_gf_CC_CommanderLevel(lv_indexPlayer, libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer))), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CustomMutatorCommanderImage[lv_indexPlayer], libCOMI_gf_CC_CommanderCustomImage(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer)), PlayerGroupAll());
        DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], PlayerGroupSingle(lv_indexPlayer), "PlayerState", "Self");
        DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], PlayerGroupSingle(libCOMI_gf_CC_PlayerAlly(lv_indexPlayer)), "PlayerState", "Ally");
        if ((lv_indexPlayer == 1)) {
            DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], PlayerGroupAll(), "LeaderState", "Leader");
        }
        else {
            DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], PlayerGroupAll(), "LeaderState", "NotLeader");
        }
        if ((libCOMI_gf_CC_PlayerMasteryLevel(lv_indexPlayer) > 0)) {
            DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], PlayerGroupAll(), "MasteryState", "Mastery");
        }
        else {
            DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorPlayerCard[lv_indexPlayer], PlayerGroupAll(), "MasteryState", "NoMastery");
        }
    }
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorMapNameLabel, libCOMI_gf_CC_CampaignMapName(libCOMI_gf_CC_CurrentMap(), 1), PlayerGroupAll());
    DialogControlSetEnabled(libCOMI_gv_cU_CustomMutatorStartButton, PlayerGroupSingle(2), false);
    libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorStartButton, StringExternal("Param/Value/lib_COMI_C0B4E22D"), PlayerGroupSingle(2));
    DialogControlAddItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupAll(), TextCase(StringExternal("UI/GameSpeed/Fasr"), true));
    libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorSpeedDropDown, StringExternal("Param/Value/lib_COMI_A40945FF"), PlayerGroupSingle(2));
    DialogControlSetEnabled(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupSingle(2), false);
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(1) != 4)) {
        DialogControlAddItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupAll(), TextCase(StringExternal("UI/GameSpeed/Fast"), true));
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupAll(), false);
        libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorSpeedDropDown, StringExternal("Param/Value/lib_COMI_5FD56F8C"), PlayerGroupSingle(1));
    }
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(1) != 4) && (libCOMI_gf_DifficultyLevelForPlayerCoop(1) != 3)) {
        DialogControlAddItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupAll(), TextCase(StringExternal("UI/GameSpeed/Norm"), true));
    }

    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(1) == 1)) {
        DialogControlAddItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupAll(), TextCase(StringExternal("UI/GameSpeed/Slow"), true));
    }

    DialogControlSelectItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupAll(), libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 2, 1, 1, 1));
    TriggerEnable(libCOMI_gt_CU_CustomMutatorSpeedChange, true);
}

void libCOMI_gf_CU_CustomMutatorUpdateData () {
    // Variable Declarations
    int lv_activeItemIndex;
    int lv_randomCount;
    int lv_randomIndex;

    // Automatic Variable Declarations
    int auto15A2E185_ae;
    const int auto15A2E185_ai = 1;
    int autoD8CF6A1B_ae;
    const int autoD8CF6A1B_ai = 1;

    // Variable Initialization

    // Implementation
    auto15A2E185_ae = libCOMI_gv_cU_CustomMutatorActiveItemCount;
    lv_activeItemIndex = 1;
    for ( ; ( (auto15A2E185_ai >= 0 && lv_activeItemIndex <= auto15A2E185_ae) || (auto15A2E185_ai < 0 && lv_activeItemIndex >= auto15A2E185_ae) ) ; lv_activeItemIndex += auto15A2E185_ai ) {
        if ((libCOMI_gv_cU_CustomMutatorActiveItems[lv_activeItemIndex] == 0)) {
            break;
        }

        if ((libCOMI_gv_cU_CustomMutatorItems[libCOMI_gv_cU_CustomMutatorActiveItems[lv_activeItemIndex]] == "Random")) {
            lv_randomCount += 1;
        }
        else {
            libCOMI_gf_EnableDisableMutator(true, libCOMI_gv_cU_CustomMutatorItems[libCOMI_gv_cU_CustomMutatorActiveItems[lv_activeItemIndex]]);
        }
    }
    autoD8CF6A1B_ae = lv_randomCount;
    lv_randomIndex = 1;
    for ( ; ( (autoD8CF6A1B_ai >= 0 && lv_randomIndex <= autoD8CF6A1B_ae) || (autoD8CF6A1B_ai < 0 && lv_randomIndex >= autoD8CF6A1B_ae) ) ; lv_randomIndex += autoD8CF6A1B_ai ) {
        libCOMI_gf_EnableDisableMutator(true, libCOMI_gf_CT_RandomUnusedCustomMutator());
    }
}

void libCOMI_gf_CU_CustomMutatorUpdate (int lp_player) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_frameIndex;
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoD829F88D_ae = libCOMI_gv_cUC_CustomMutatorItemsPerPage;
    const int autoD829F88D_ai = 1;
    const int auto8F7A04F4_ae = libCOMI_gv_cUC_CustomMutatorItemsActiveMax;
    const int auto8F7A04F4_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    lv_itemIndex = (libCOMI_gv_cUC_CustomMutatorItemsPerPage*(libCOMI_gv_cU_CustomMutatorPageSelection[lp_player]-1));
    lv_frameIndex = 1;
    for ( ; ( (autoD829F88D_ai >= 0 && lv_frameIndex <= autoD829F88D_ae) || (autoD829F88D_ai < 0 && lv_frameIndex >= autoD829F88D_ae) ) ; lv_frameIndex += autoD829F88D_ai ) {
        lv_itemIndex += 1;
        if ((lv_itemIndex > libCOMI_gv_cU_CustomMutatorItemCount)) {
            DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], lv_updatePlayers, "SelectionState", "Empty");
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], null, lv_updatePlayers);
        }
        else {
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorItemLabels[lv_frameIndex], libCOMI_gf_CT_MutatorName(libCOMI_gv_cU_CustomMutatorItems[lv_itemIndex]), lv_updatePlayers);
            libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_CustomMutatorItemIcons[lv_frameIndex], libCOMI_gf_CT_MutatorIcon(libCOMI_gv_cU_CustomMutatorItems[lv_itemIndex]), lv_updatePlayers);
            if ((libCOMI_gf_CT_MutatorCustomMultipleAllowed(libCOMI_gv_cU_CustomMutatorItems[lv_itemIndex]) == true)) {
                TextExpressionSetToken("Param/Expression/lib_COMI_7408EA39", "A", libCOMI_gf_CU_CustomMutatorTooltip(libCOMI_gv_cU_CustomMutatorItems[lv_itemIndex]));
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], TextExpressionAssemble("Param/Expression/lib_COMI_7408EA39"), lv_updatePlayers);
            }
            else {
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], libCOMI_gf_CU_CustomMutatorTooltip(libCOMI_gv_cU_CustomMutatorItems[lv_itemIndex]), lv_updatePlayers);
            }
            if ((libCOMI_gv_cU_CustomMutatorActiveItemCount >= libCOMI_gv_cUC_CustomMutatorItemsActiveMax) && ((libCOMI_gv_cU_CustomMutatorItemStates[lv_itemIndex] == false) || (libCOMI_gf_CT_MutatorCustomMultipleAllowed(libCOMI_gv_cU_CustomMutatorItems[lv_itemIndex]) == true))) {
                DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], lv_updatePlayers, "EnabledState", "Disabled");
            }
            else {
                DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], lv_updatePlayers, "EnabledState", "Enabled");
            }
            if ((libCOMI_gv_cU_CustomMutatorItems[lv_itemIndex] == "Random")) {
                DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], lv_updatePlayers, "SelectionState", "Random");
                libNtve_gf_SetDialogItemToggled(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], false, lv_updatePlayers);
            }
            else if ((libCOMI_gv_cU_CustomMutatorItemStates[lv_itemIndex] == true)) {
                DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], lv_updatePlayers, "SelectionState", "Toggled");
                libNtve_gf_SetDialogItemToggled(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], true, lv_updatePlayers);
            }
            else if (true) {
                DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], lv_updatePlayers, "SelectionState", "Normal");
                libNtve_gf_SetDialogItemToggled(libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex], false, lv_updatePlayers);
            }
        }
    }
    lv_itemIndex = 1;
    for ( ; ( (auto8F7A04F4_ai >= 0 && lv_itemIndex <= auto8F7A04F4_ae) || (auto8F7A04F4_ai < 0 && lv_itemIndex >= auto8F7A04F4_ae) ) ; lv_itemIndex += auto8F7A04F4_ai ) {
        if ((lv_itemIndex > libCOMI_gv_cU_CustomMutatorActiveItemCount)) {
            DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorActiveItemButtons[lv_itemIndex], lv_updatePlayers, "SelectedState", "Empty");
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorActiveItemButtons[lv_itemIndex], null, lv_updatePlayers);
        }
        else {
            DialogControlSetAnimationState(libCOMI_gv_cU_CustomMutatorActiveItemButtons[lv_itemIndex], lv_updatePlayers, "SelectedState", "Active");
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorActiveItemLabels[lv_itemIndex], libCOMI_gf_CT_MutatorName(libCOMI_gv_cU_CustomMutatorItems[libCOMI_gv_cU_CustomMutatorActiveItems[lv_itemIndex]]), lv_updatePlayers);
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_CustomMutatorActiveItemButtons[lv_itemIndex], libCOMI_gf_CU_CustomMutatorTooltip(libCOMI_gv_cU_CustomMutatorItems[libCOMI_gv_cU_CustomMutatorActiveItems[lv_itemIndex]]), lv_updatePlayers);
        }
    }
    if ((libCOMI_gv_cU_CustomMutatorPageSelection[lp_player] == 1)) {
        DialogControlSetEnabled(libCOMI_gv_cU_CustomMutatorPagePrevButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_CustomMutatorPagePrevButton, lv_updatePlayers, true);
    }
    if ((libCOMI_gv_cU_CustomMutatorPageSelection[lp_player] == libCOMI_gv_cU_CustomMutatorPageCount)) {
        DialogControlSetEnabled(libCOMI_gv_cU_CustomMutatorPageNextButton, lv_updatePlayers, false);
    }
    else {
        DialogControlSetEnabled(libCOMI_gv_cU_CustomMutatorPageNextButton, lv_updatePlayers, true);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_9205F897", "A", IntToText(libCOMI_gv_cU_CustomMutatorPageSelection[lp_player]));
    TextExpressionSetToken("Param/Expression/lib_COMI_9205F897", "B", IntToText(libCOMI_gv_cU_CustomMutatorPageCount));
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorPageCountLabel, TextExpressionAssemble("Param/Expression/lib_COMI_9205F897"), lv_updatePlayers);
}

void libCOMI_gf_CU_CustomMutatorDisplay () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto6A6CA4E0_g;

    // Variable Initialization

    // Implementation
    libCOMI_gf_CU_CustomMutatorCreate();
    libCOMI_gf_CU_CustomMutatorInitFromData();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, true);
    UISetHotkeyAllowed(PlayerGroupAll(), c_hotkeyMenuAchievements, false);
    DialogControlSetVisible(libCOMI_gv_cU_CustomMutatorChatDisplayStandard, PlayerGroupAll(), false);
    DialogSetVisible(libCOMI_gv_cU_CustomMutatorDialog, PlayerGroupAll(), true);
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarMutator, PlayerGroupAll());
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, true);
    auto6A6CA4E0_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6A6CA4E0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_CU_GPVisibilityAutoUpdate(false, lv_indexPlayer, c_transitionDurationImmediate);
        libCOMI_gf_CU_CustomMutatorUpdate(lv_indexPlayer);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_8EB4A42D", "DIFFICULTY", DifficultyNameCampaign(libCOMI_gf_DifficultyLevelForPlayerCoop(1)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COMI_8EB4A42D"));
    TriggerEnable(libCOMI_gt_CU_CustomMutatorChangePage, true);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorToggleItem, true);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorSuggestItem, true);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorRemoveActiveItem, true);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorStartGame, true);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorOpenMenu, true);
    TriggerEnable(libCOMI_gt_CU_CustomMutatorLeaderLeaves, true);
}

text libCOMI_gf_CU_CustomMutatorTooltip (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_COMI_272922B7", "NAME", libCOMI_gf_CT_MutatorName(lp_mutator));
    TextExpressionSetToken("Param/Expression/lib_COMI_272922B7", "DESC", libCOMI_gf_CT_MutatorDescription(lp_mutator));
    return TextExpressionAssemble("Param/Expression/lib_COMI_272922B7");
}

void libCOMI_gf_MM_MutatorDisplay (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_MM_MutatorCreate();
    libCOMI_gf_MM_MutatorInitFromData(lp_player);
    libCOMI_gf_MM_MutatorUpdate(lp_player);
    DialogSetVisible(libCOMI_gv_mM_MutatorDialog, PlayerGroupSingle(lp_player), true);
    TriggerEnable(libCOMI_gt_MM_MutatorAcceptClicked, true);
    TriggerEnable(libCOMI_gt_MM_MutatorCancelClicked, true);
}

void libCOMI_gf_MM_MutatorCreate () {
    // Variable Declarations
    int lv_mutatorIndex;
    int lv_hookupFrame;

    // Automatic Variable Declarations
    const int autoFDB35BF9_ae = libCOMI_gv_mM_MUTATORMAXCOUNT;
    const int autoFDB35BF9_ai = 1;

    // Variable Initialization
    lv_hookupFrame = c_invalidDialogControlId;

    // Implementation
    if ((libCOMI_gv_mM_MutatorDialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetRenderPriority(DialogLastCreated(), 1100);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_mM_MutatorDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libCOMI_gv_mM_MutatorDialog, c_triggerControlTypePanel, "Coop_MutatorSelection_EX/MutatorSelectionTemplate");
    libCOMI_gv_mM_MutatorPanel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_mM_MutatorPanel, c_triggerControlTypePanel, "ScrollableMutatorList");
    lv_hookupFrame = DialogControlLastCreated();
    DialogControlHookup(lv_hookupFrame, c_triggerControlTypePanel, "ContainerFrame");
    lv_hookupFrame = DialogControlLastCreated();
    lv_mutatorIndex = libCOMI_gv_mM_MUTATORMINCOUNT;
    for ( ; ( (autoFDB35BF9_ai >= 0 && lv_mutatorIndex <= autoFDB35BF9_ae) || (autoFDB35BF9_ai < 0 && lv_mutatorIndex >= autoFDB35BF9_ae) ) ; lv_mutatorIndex += autoFDB35BF9_ai ) {
        DialogControlHookup(lv_hookupFrame, c_triggerControlTypePanel, "Item" + IntToString(lv_mutatorIndex));
        libCOMI_gv_mM_MutatorItemPanels[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_mM_MutatorItemPanels[lv_mutatorIndex], c_triggerControlTypeLabel, "Number");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_mutatorIndex), PlayerGroupAll());
        DialogControlHookup(libCOMI_gv_mM_MutatorItemPanels[lv_mutatorIndex], c_triggerControlTypeCheckBox, "ActiveCheckBox");
        libCOMI_gv_mM_MutatorCheckboxes[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_mM_MutatorItemPanels[lv_mutatorIndex], c_triggerControlTypeLabel, "NameLabel");
        libCOMI_gv_mM_MutatorNameLabels[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_mM_MutatorItemPanels[lv_mutatorIndex], c_triggerControlTypeLabel, "DescriptionLabel");
        libCOMI_gv_mM_MutatorDescriptionLabels[lv_mutatorIndex] = DialogControlLastCreated();
    }
    DialogControlHookup(libCOMI_gv_mM_MutatorPanel, c_triggerControlTypeButton, "AcceptButton");
    libCOMI_gv_mM_MutatorAcceptButton = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_mM_MutatorPanel, c_triggerControlTypeButton, "CancelButton");
    libCOMI_gv_mM_MutatorCancelButton = DialogControlLastCreated();
}

void libCOMI_gf_MM_MutatorInitFromData (int lp_player) {
    // Variable Declarations
    string lv_indexMutator;
    int lv_mutatorCount;
    playergroup lv_updatePlayers;
    int lv_vA;

    // Automatic Variable Declarations
    const int auto2DDBF389_ae = libCOMI_gv_mM_MUTATORMAXCOUNT;
    const int auto2DDBF389_ai = 1;
    int auto9A25CA8C_ai;
    int auto9A25CA8C_ae;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    lv_vA = 1;
    for ( ; ( (auto2DDBF389_ai >= 0 && lv_vA <= auto2DDBF389_ae) || (auto2DDBF389_ai < 0 && lv_vA >= auto2DDBF389_ae) ) ; lv_vA += auto2DDBF389_ai ) {
        auto9A25CA8C_ai = 1;
        auto9A25CA8C_ae = UserDataInstanceCount("Mutators")+1;
        while (auto9A25CA8C_ai < auto9A25CA8C_ae) {
            lv_indexMutator = UserDataInstance("Mutators", auto9A25CA8C_ai);
            auto9A25CA8C_ai = auto9A25CA8C_ai+1;
            if ((UserDataGetInt("Mutators", lv_indexMutator, "ListOrder", 1) == lv_vA)) {
                lv_mutatorCount += 1;
                libCOMI_gv_mM_MutatorItems[lv_mutatorCount] = lv_indexMutator;
                if ((libCOMI_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
                    libNtve_gf_SetDialogItemChecked(libCOMI_gv_mM_MutatorCheckboxes[lv_mutatorCount], true, lv_updatePlayers);
                }
                else {
                    libNtve_gf_SetDialogItemChecked(libCOMI_gv_mM_MutatorCheckboxes[lv_mutatorCount], false, lv_updatePlayers);
                }
                break;
            }

        }
    }
}

void libCOMI_gf_MM_MutatorClose (int lp_player) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0E224C02_g;

    // Variable Initialization

    // Implementation
    DialogSetVisible(libCOMI_gv_mM_MutatorDialog, PlayerGroupSingle(lp_player), false);
    TriggerEnable(libCOMI_gt_MM_MutatorAcceptClicked, false);
    TriggerEnable(libCOMI_gt_MM_MutatorCancelClicked, false);
    if ((libCOMI_gv_cU_CommanderSelect_RefCount > 0)) {
        auto0E224C02_g = libCOMI_gf_HumanPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto0E224C02_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
        }
    }

}

void libCOMI_gf_MM_MutatorUpdateData () {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int autoD8270953_ae = libCOMI_gv_mM_MUTATORMAXCOUNT;
    const int autoD8270953_ai = 1;

    // Variable Initialization

    // Implementation
    lv_mutatorIndex = libCOMI_gv_mM_MUTATORMINCOUNT;
    for ( ; ( (autoD8270953_ai >= 0 && lv_mutatorIndex <= autoD8270953_ae) || (autoD8270953_ai < 0 && lv_mutatorIndex >= autoD8270953_ae) ) ; lv_mutatorIndex += autoD8270953_ai ) {
        if ((libCOMI_gv_mM_MutatorItems[lv_mutatorIndex] == null)) {
            continue;
        }

        if ((libNtve_gf_DialogItemIsChecked(libCOMI_gv_mM_MutatorCheckboxes[lv_mutatorIndex], 1) == true)) {
            libCOMI_gf_EnableDisableMutator(true, libCOMI_gv_mM_MutatorItems[lv_mutatorIndex]);
        }
        else {
            libCOMI_gf_EnableDisableMutator(false, libCOMI_gv_mM_MutatorItems[lv_mutatorIndex]);
        }
    }
}

void libCOMI_gf_MM_MutatorUpdate (int lp_player) {
    // Variable Declarations
    int lv_mutatorIndex;
    playergroup lv_updatePlayers;
    color lv_vUnfinishedColor;

    // Automatic Variable Declarations
    const int autoE84B7221_ae = libCOMI_gv_mM_MUTATORMAXCOUNT;
    const int autoE84B7221_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();
    lv_vUnfinishedColor = Color(41.57, 41.57, 41.57);

    // Implementation
    lv_updatePlayers = PlayerGroupSingle(lp_player);
    lv_mutatorIndex = libCOMI_gv_mM_MUTATORMINCOUNT;
    for ( ; ( (autoE84B7221_ai >= 0 && lv_mutatorIndex <= autoE84B7221_ae) || (autoE84B7221_ai < 0 && lv_mutatorIndex >= autoE84B7221_ae) ) ; lv_mutatorIndex += autoE84B7221_ai ) {
        if ((libCOMI_gv_mM_MutatorItems[lv_mutatorIndex] == null)) {
            DialogControlSetVisible(libCOMI_gv_mM_MutatorItemPanels[lv_mutatorIndex], lv_updatePlayers, false);
        }
        else {
            DialogControlSetVisible(libCOMI_gv_mM_MutatorItemPanels[lv_mutatorIndex], lv_updatePlayers, true);
        }
        libNtve_gf_SetDialogItemText(libCOMI_gv_mM_MutatorNameLabels[lv_mutatorIndex], libCOMI_gf_CT_MutatorName(libCOMI_gv_mM_MutatorItems[lv_mutatorIndex]), lv_updatePlayers);
        libNtve_gf_SetDialogItemText(libCOMI_gv_mM_MutatorDescriptionLabels[lv_mutatorIndex], libCOMI_gf_CT_MutatorDescription(libCOMI_gv_mM_MutatorItems[lv_mutatorIndex]), lv_updatePlayers);
        if ((UserDataGetInt("Mutators", libCOMI_gv_mM_MutatorItems[lv_mutatorIndex], "Unfinished", 1) == 1)) {
            TextExpressionSetToken("Param/Expression/lib_COMI_80A7430D", "A", UserDataGetText("Mutators", libCOMI_gv_mM_MutatorItems[lv_mutatorIndex], "Description", 1));
            libNtve_gf_SetDialogItemText(libCOMI_gv_mM_MutatorDescriptionLabels[lv_mutatorIndex], TextExpressionAssemble("Param/Expression/lib_COMI_80A7430D"), lv_updatePlayers);
            libNtve_gf_SetDialogItemColor(libCOMI_gv_mM_MutatorNameLabels[lv_mutatorIndex], lv_vUnfinishedColor, PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(libCOMI_gv_mM_MutatorDescriptionLabels[lv_mutatorIndex], lv_vUnfinishedColor, PlayerGroupAll());
        }

    }
}

void libCOMI_gf_CU_MutatorListCreate () {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto7BB62209_ae = libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL;
    const int auto7BB62209_ai = 1;
    const int autoCFAE56FD_ae = libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE;
    const int autoCFAE56FD_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gv_cU_MutatorListSmallPanel != c_invalidDialogControlId)) {
        return ;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MutatorSmallList");
    libCOMI_gv_cU_MutatorListSmallPanel = DialogControlLastCreated();
    lv_mutatorIndex = 1;
    for ( ; ( (auto7BB62209_ai >= 0 && lv_mutatorIndex <= auto7BB62209_ae) || (auto7BB62209_ai < 0 && lv_mutatorIndex >= auto7BB62209_ae) ) ; lv_mutatorIndex += auto7BB62209_ai ) {
        DialogControlHookup(libCOMI_gv_cU_MutatorListSmallPanel, c_triggerControlTypePanel, "MutatorItem" + IntToString(lv_mutatorIndex));
        libCOMI_gv_cU_MutatorListSmallItems[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MutatorListSmallItems[lv_mutatorIndex], c_triggerControlTypeImage, "MutatorIcon");
        libCOMI_gv_cU_MutatorListSmallIcon[lv_mutatorIndex] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MutatorLargeList");
    libCOMI_gv_cU_MutatorListLargePanel = DialogControlLastCreated();
    lv_mutatorIndex = 1;
    for ( ; ( (autoCFAE56FD_ai >= 0 && lv_mutatorIndex <= autoCFAE56FD_ae) || (autoCFAE56FD_ai < 0 && lv_mutatorIndex >= autoCFAE56FD_ae) ) ; lv_mutatorIndex += autoCFAE56FD_ai ) {
        DialogControlHookup(libCOMI_gv_cU_MutatorListLargePanel, c_triggerControlTypePanel, "MutatorItem" + IntToString(lv_mutatorIndex));
        libCOMI_gv_cU_MutatorListLargeItems[lv_mutatorIndex] = DialogControlLastCreated();
        DialogControlHookup(libCOMI_gv_cU_MutatorListLargeItems[lv_mutatorIndex], c_triggerControlTypeImage, "MutatorIcon");
        libCOMI_gv_cU_MutatorListLargeIcon[lv_mutatorIndex] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/MutatorNotification");
    libCOMI_gv_cU_MutatorListNotificationLabel = DialogControlLastCreated();
}

void libCOMI_gf_CU_MutatorListInit () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_CU_MutatorListCreate();
    if ((libCOMI_gf_CT_MutatorEnabledCount() > libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL)) {
        libCOMI_gf_CU_MutatorListInitLarge();
    }
    else {
        libCOMI_gf_CU_MutatorListInitSmall();
    }
}

void libCOMI_gf_CU_MutatorListInitSmall () {
    // Variable Declarations
    string lv_indexMutator;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    int auto69B24663_ai;
    int auto69B24663_ae;
    const int auto4D3F7194_ae = libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL;
    const int auto4D3F7194_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libCOMI_gv_cU_MutatorListSmallPanel, PlayerGroupAll(), true);
    DialogControlSetVisible(libCOMI_gv_cU_MutatorListLargePanel, PlayerGroupAll(), false);
    auto69B24663_ai = 1;
    auto69B24663_ae = UserDataInstanceCount("Mutators")+1;
    while (auto69B24663_ai < auto69B24663_ae) {
        lv_indexMutator = UserDataInstance("Mutators", auto69B24663_ai);
        auto69B24663_ai = auto69B24663_ai+1;
        if ((libCOMI_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            lv_mutatorIndex += 1;
            if ((lv_mutatorIndex > libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL)) {
                return ;
            }

            libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_MutatorListSmallIcon[lv_mutatorIndex], libCOMI_gf_CT_MutatorIcon(lv_indexMutator), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_COMI_4A7804D4", "NAME", libCOMI_gf_CT_MutatorName(lv_indexMutator));
            TextExpressionSetToken("Param/Expression/lib_COMI_4A7804D4", "DESCRIPTION", libCOMI_gf_CT_MutatorDescription(lv_indexMutator));
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_MutatorListSmallIcon[lv_mutatorIndex], TextExpressionAssemble("Param/Expression/lib_COMI_4A7804D4"), PlayerGroupAll());
            DialogControlSetVisible(libCOMI_gv_cU_MutatorListSmallItems[lv_mutatorIndex], PlayerGroupAll(), true);
        }

    }
    lv_mutatorIndex = (lv_mutatorIndex+1);
    for ( ; ( (auto4D3F7194_ai >= 0 && lv_mutatorIndex <= auto4D3F7194_ae) || (auto4D3F7194_ai < 0 && lv_mutatorIndex >= auto4D3F7194_ae) ) ; lv_mutatorIndex += auto4D3F7194_ai ) {
        DialogControlSetVisible(libCOMI_gv_cU_MutatorListSmallItems[lv_mutatorIndex], PlayerGroupAll(), false);
    }
}

void libCOMI_gf_CU_MutatorListInitLarge () {
    // Variable Declarations
    string lv_indexMutator;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    int autoB7F048F2_ai;
    int autoB7F048F2_ae;
    const int autoE10A73D5_ae = libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE;
    const int autoE10A73D5_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libCOMI_gv_cU_MutatorListSmallPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libCOMI_gv_cU_MutatorListLargePanel, PlayerGroupAll(), true);
    autoB7F048F2_ai = 1;
    autoB7F048F2_ae = UserDataInstanceCount("Mutators")+1;
    while (autoB7F048F2_ai < autoB7F048F2_ae) {
        lv_indexMutator = UserDataInstance("Mutators", autoB7F048F2_ai);
        autoB7F048F2_ai = autoB7F048F2_ai+1;
        if ((libCOMI_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            lv_mutatorIndex += 1;
            if ((lv_mutatorIndex > libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE)) {
                return ;
            }

            libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_MutatorListLargeIcon[lv_mutatorIndex], libCOMI_gf_CT_MutatorIcon(lv_indexMutator), PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_COMI_9EB4BB4C", "NAME", libCOMI_gf_CT_MutatorName(lv_indexMutator));
            TextExpressionSetToken("Param/Expression/lib_COMI_9EB4BB4C", "DESCRIPTION", libCOMI_gf_CT_MutatorDescription(lv_indexMutator));
            libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_MutatorListLargeIcon[lv_mutatorIndex], TextExpressionAssemble("Param/Expression/lib_COMI_9EB4BB4C"), PlayerGroupAll());
            DialogControlSetVisible(libCOMI_gv_cU_MutatorListLargeItems[lv_mutatorIndex], PlayerGroupAll(), true);
        }

    }
    lv_mutatorIndex = (lv_mutatorIndex+1);
    for ( ; ( (autoE10A73D5_ai >= 0 && lv_mutatorIndex <= autoE10A73D5_ae) || (autoE10A73D5_ai < 0 && lv_mutatorIndex >= autoE10A73D5_ae) ) ; lv_mutatorIndex += autoE10A73D5_ai ) {
        DialogControlSetVisible(libCOMI_gv_cU_MutatorListLargeItems[lv_mutatorIndex], PlayerGroupAll(), false);
    }
}

void libCOMI_gf_CU_MutatorListSetItem (int lp_index, string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(libCOMI_gv_cU_MutatorListSmallIcon[lp_index], libCOMI_gf_CT_MutatorIcon(lp_mutator), PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_COMI_94852538", "NAME", libCOMI_gf_CT_MutatorName(lp_mutator));
    TextExpressionSetToken("Param/Expression/lib_COMI_94852538", "DESCRIPTION", libCOMI_gf_CT_MutatorDescription(lp_mutator));
    libNtve_gf_SetDialogItemTooltip(libCOMI_gv_cU_MutatorListSmallIcon[lp_index], TextExpressionAssemble("Param/Expression/lib_COMI_94852538"), PlayerGroupAll());
    DialogControlSetVisible(libCOMI_gv_cU_MutatorListSmallItems[lp_index], PlayerGroupAll(), true);
}

void libCOMI_gf_CU_MutatorListHideItem (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libCOMI_gv_cU_MutatorListSmallItems[lp_index], PlayerGroupAll(), false);
}

void libCOMI_gf_CU_MutatorListShowNotification (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MutatorListNotificationLabel, lp_message, PlayerGroupAll());
    DialogControlSendAnimationEvent(libCOMI_gv_cU_MutatorListNotificationLabel, PlayerGroupAll(), "Show");
    TimerStart(libCOMI_gv_cU_MutatorListNotificationTimer, 5.0, false, c_timeReal);
    TriggerEnable(libCOMI_gt_CU_MutatorListNotificationExpired, true);
}

void libCOMI_gf_CU_MutatorListShowNotificationToPlayer (text lp_message, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_MutatorListNotificationLabel, lp_message, PlayerGroupSingle(lp_player));
    DialogControlSendAnimationEvent(libCOMI_gv_cU_MutatorListNotificationLabel, PlayerGroupSingle(lp_player), "Show");
    TimerStart(libCOMI_gv_cU_MutatorListNotificationTimer, 5.0, false, c_timeReal);
    TriggerEnable(libCOMI_gt_CU_MutatorListNotificationExpired, true);
}

int libCOMI_gf_AffectedPlayer (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_index == 0) || (lp_index > PlayerGroupCount(libCOMI_gf_AffectedPlayers())))) {
        return PlayerGroupPlayer(libCOMI_gf_AffectedPlayers(), RandomInt(1, PlayerGroupCount(libCOMI_gf_AffectedPlayers())));
    }
    else {
        return PlayerGroupPlayer(libCOMI_gf_AffectedPlayers(), lp_index);
    }
}

int libCOMI_gf_MutatorPlayer () {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), 1);
}

playergroup libCOMI_gf_MutatorPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_GetEnemyAIPlayers();
}

playergroup libCOMI_gf_AffectedPlayers () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gf_GetAlliedCommandersPlayers();
}

bool libCOMI_gf_ConnectedByGroundPath (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    if ((PathingType(lp_point) == c_pathingGround) && (PointPathingIsConnected(lp_point, libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(libCOMI_gf_AffectedPlayers(), 1))) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool libCOMI_gf_UnitIsAffectedByMutators (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_unit != "DisruptorPhased") && (lp_unit != "TerranDropPod") && (lp_unit != "ZergDropPodLarge") && (lp_unit != "ZergDropPod") && (lp_unit != "ZergDropPodCreep") && (lp_unit != "AdeptPhaseShift")) {
        return true;
    }
    else {
        return false;
    }
}

bool libCOMI_gf_UnitIsMutatorMissile (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_unit == "MutatorMissileNuke") || (lp_unit == "MutatorMissilePointDefense") || (lp_unit == "MutatorMissileSplitter") || (lp_unit == "MutatorMissileSplitterChild") || (lp_unit == "MutatorMissileStandard"))) {
        return true;
    }
    else {
        return false;
    }
}

bool libCOMI_gf_IsDistantFromAlliedCommandersStartPositions (point lp_point, fixed lp_distance, playergroup lp_players) {
    // Automatic Variable Declarations
    playergroup auto7BA55092_g;
    int auto7BA55092_var;

    // Implementation
    auto7BA55092_g = lp_players;
    auto7BA55092_var = -1;
    while (true) {
        auto7BA55092_var = PlayerGroupNextPlayer(auto7BA55092_g, auto7BA55092_var);
        if (auto7BA55092_var < 0) { break; }
        if ((DistanceBetweenPoints(lp_point, libARRA_gf_GetPlayerStartPosition(auto7BA55092_var)) < lp_distance)) {
            return false;
        }

    }
    return true;
}

bool libCOMI_gf_CT_ResourceSpawnLocationValid (point lp_spawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    if ((PathingType(lp_spawnPoint) != c_pathingGround)) {
        return false;
    }

    if ((UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(lp_spawnPoint, 7.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
        return false;
    }

    return true;
}

bool libCOMI_gf_CT_UnitSpawnedByMutator (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupHasUnit(libCOMI_gv_cT_SpawnedUnits, lp_unit);
}

void libCOMI_gf_CT_RegisterSpawnedUnit (unit lp_spawnedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_CurrentMap() == "AC_VeridiaCourier")) {
        UnitBehaviorAdd(lp_spawnedUnit, "LavaDamageCoopImmune", lp_spawnedUnit, 1);
    }

    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, lp_spawnedUnit);
}

void libCOMI_gf_CT_RegisterSpawnedUnitGroup (unitgroup lp_spawnedUnits) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto144E2AD6_g;
    int auto144E2AD6_u;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_CC_CurrentMap() == "AC_VeridiaCourier")) {
        auto144E2AD6_g = lp_spawnedUnits;
        auto144E2AD6_u = UnitGroupCount(auto144E2AD6_g, c_unitCountAll);
        for (;; auto144E2AD6_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto144E2AD6_g, auto144E2AD6_u);
            if (lv_indexUnit == null) { break; }
            UnitBehaviorAdd(lv_indexUnit, "LavaDamageCoopImmune", lv_indexUnit, 1);
        }
    }

    UnitGroupAddUnitGroup(libCOMI_gv_cT_SpawnedUnits, lp_spawnedUnits);
}

void libCOMI_gf_CT_Mutator_AttackWaveHook_WaveCreated (int lp_attackingPlayer, unitgroup lp_attackingUnitGroup, point lp_attackOrigin, int lp_attackTargetType) {
    // Automatic Variable Declarations
}

void libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent (int lp_attackingPlayer, unitgroup lp_attackingUnitGroup, point lp_attackOrigin, int lp_attackTargetType) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_attackingPlayer = lp_attackingPlayer;
    libCOMI_gv_attackTargetType = lp_attackTargetType;
    libCOMI_gv_attackingUnitGroup = lp_attackingUnitGroup;
    libCOMI_gv_attackOrigin = lp_attackOrigin;
    TriggerSendEvent("Wave Sent");
}

bool libCOMI_gf_MutatorIsEnabled (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "State", 1) == 1);
}

void libCOMI_gf_EnableDisableMutator (bool lp_enableDisable, string lp_mutator) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_intState;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        if ((libCOMI_gf_MutatorIsEnabled(lp_mutator) == false)) {
            libCOMI_gv_cT_MutatorEnabledCount += 1;
        }

        lv_intState = 1;
    }
    else {
        if ((libCOMI_gf_MutatorIsEnabled(lp_mutator) == true)) {
            TriggerSendEvent(("Mutator " + (lp_mutator) + " Shutdown"));
            libCOMI_gv_cT_MutatorEnabledCount -= 1;
        }

        lv_intState = 0;
    }
    UserDataSetInt("Mutators", lp_mutator, "State", 1, lv_intState);
}

void libCOMI_gf_SetMutatorWeeklyChallengeOn (int lp_challengeIndex) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto0B3C7116_g;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cT_MutatorIsWeeklyChallenge = true;
    auto0B3C7116_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto0B3C7116_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_CC_ScoreValueSet(lv_indexPlayer, "MutatorIsWeeklyChallenge", lp_challengeIndex);
    }
}

void libCOMI_gf_EnableMutatorCustomMode () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_cT_MutatorCustomMode = true;
}

unit libCOMI_gf_MM_EnemyStructureWithPathing () {
    // Variable Declarations
    unit lv_vUnit;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    const int auto9FBFD810_n = 100;
    int auto9FBFD810_i;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Implementation
    lv_vUG = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    for (auto9FBFD810_i = 1; auto9FBFD810_i <= auto9FBFD810_n; auto9FBFD810_i += 1) {
        lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
        if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_vUnit))) {
            return lv_vUnit;
        }

    }
    return lv_vUnit;
}

point libCOMI_gf_MM_PositionEnemyStructureWithPathing () {
    // Variable Declarations
    point lv_vPoint;
    unit lv_vUnit;

    // Automatic Variable Declarations
    const int autoCD2C03BB_n = 200;
    int autoCD2C03BB_i;

    // Variable Initialization
    lv_vUnit = libCOMI_gf_MM_EnemyStructureWithPathing();

    // Implementation
    if ((lv_vUnit != null) && (UnitIsAlive(lv_vUnit) == true)) {
        return UnitGetPosition(lv_vUnit);
    }
    else {
        for (autoCD2C03BB_i = 1; autoCD2C03BB_i <= autoCD2C03BB_n; autoCD2C03BB_i += 1) {
            lv_vPoint = RegionRandomPoint(RegionPlayableMap());
            if ((UnitGroupCount(UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(lv_vPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (PathingType(lv_vPoint) == c_pathingGround) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint)) {
                return lv_vPoint;
            }

        }
        return lv_vPoint;
    }
}

bool libCOMI_gf_MM_IsTrain (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_pUnit) == "FreightCar") || (UnitGetType(lp_pUnit) == "Caboose") || (UnitGetType(lp_pUnit) == "TarsonisEngineFast") || (UnitGetType(lp_pUnit) == "TarsonisEngine"))) {
        return true;
    }
    else {
        return false;
    }
}

void libCOMI_gf_MM_WaitForUnload (unitgroup lp_pTriggeringUG) {
    // Variable Declarations
    bool lv_vSomeGround;

    // Automatic Variable Declarations
    unitgroup auto55A87A87_g;
    int auto55A87A87_u;
    unit auto55A87A87_var;
    fixed auto200DD4B4_at;
    unitgroup auto22F14C8D_g;
    int auto22F14C8D_u;
    unit auto22F14C8D_var;
    fixed autoE893422D_at;
    fixed auto413466D1_at;

    // Variable Initialization

    // Implementation
    auto55A87A87_g = lp_pTriggeringUG;
    auto55A87A87_u = UnitGroupCount(auto55A87A87_g, c_unitCountAll);
    for (;; auto55A87A87_u -= 1) {
        auto55A87A87_var = UnitGroupUnitFromEnd(auto55A87A87_g, auto55A87A87_u);
        if (auto55A87A87_var == null) { break; }
        if ((libNtve_gf_UnitIsInsideTransport(auto55A87A87_var) == true)) {
            lv_vSomeGround = true;
            auto200DD4B4_at = 0;
            while (!((libNtve_gf_UnitIsInsideTransport(auto55A87A87_var) == false)) && auto200DD4B4_at <= 60.0) {
                Wait(1.0, c_timeGame);
                auto200DD4B4_at = auto200DD4B4_at + 1.0;
            }
            break;
        }

    }
    auto22F14C8D_g = lp_pTriggeringUG;
    auto22F14C8D_u = UnitGroupCount(auto22F14C8D_g, c_unitCountAll);
    for (;; auto22F14C8D_u -= 1) {
        auto22F14C8D_var = UnitGroupUnitFromEnd(auto22F14C8D_g, auto22F14C8D_u);
        if (auto22F14C8D_var == null) { break; }
        if ((UnitFilterMatch(auto22F14C8D_var, 1, UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
            lv_vSomeGround = true;
            autoE893422D_at = 0;
            while (!(libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(auto22F14C8D_var))) && autoE893422D_at <= 60.0) {
                Wait(1.0, c_timeGame);
                autoE893422D_at = autoE893422D_at + 1.0;
            }
            break;
        }

    }
    if ((lv_vSomeGround == false)) {
        auto413466D1_at = 0;
        while (!(libCOMI_gf_ConnectedByGroundPath(UnitGroupCenterOfGroup(lp_pTriggeringUG))) && auto413466D1_at <= 180.0) {
            Wait(1.0, c_timeGame);
            auto413466D1_at = auto413466D1_at + 1.0;
        }
        Wait(6.0, c_timeGame);
    }

}

trigger auto_libCOMI_gf_MM_AddToAttackWave_Check_Trigger = null;
unit auto_libCOMI_gf_MM_AddToAttackWave_Check_lp_pUnit;
unitgroup auto_libCOMI_gf_MM_AddToAttackWave_Check_lp_pUG;

void libCOMI_gf_MM_AddToAttackWave_Check (unit lp_pUnit, unitgroup lp_pUG) {
    auto_libCOMI_gf_MM_AddToAttackWave_Check_lp_pUnit = lp_pUnit;
    auto_libCOMI_gf_MM_AddToAttackWave_Check_lp_pUG = lp_pUG;

    if (auto_libCOMI_gf_MM_AddToAttackWave_Check_Trigger == null) {
        auto_libCOMI_gf_MM_AddToAttackWave_Check_Trigger = TriggerCreate("auto_libCOMI_gf_MM_AddToAttackWave_Check_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_MM_AddToAttackWave_Check_Trigger, false, false);
}

bool auto_libCOMI_gf_MM_AddToAttackWave_Check_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_libCOMI_gf_MM_AddToAttackWave_Check_lp_pUnit;
    unitgroup lp_pUG = auto_libCOMI_gf_MM_AddToAttackWave_Check_lp_pUG;

    // Automatic Variable Declarations
    const int autoB3ACBA66_n = 50;
    int autoB3ACBA66_i;
    unitgroup autoE0B0E697_g;
    int autoE0B0E697_u;
    unit autoE0B0E697_var;

    // Implementation
    AISetUnitScriptControlled(lp_pUnit, false);
    for (autoB3ACBA66_i = 1; autoB3ACBA66_i <= autoB3ACBA66_n; autoB3ACBA66_i += 1) {
        if ((AIUnitGetWave(lp_pUnit) == null)) {
            autoE0B0E697_g = lp_pUG;
            autoE0B0E697_u = UnitGroupCount(autoE0B0E697_g, c_unitCountAll);
            for (;; autoE0B0E697_u -= 1) {
                autoE0B0E697_var = UnitGroupUnitFromEnd(autoE0B0E697_g, autoE0B0E697_u);
                if (autoE0B0E697_var == null) { break; }
                if ((UnitWeaponCount(autoE0B0E697_var) >= 1) && (libNtve_gf_UnitIsInsideTransport(autoE0B0E697_var) == false) && (UnitIsAlive(autoE0B0E697_var) == true) && (AIUnitGetWave(autoE0B0E697_var) != null) && (UnitGetOwner(autoE0B0E697_var) == UnitGetOwner(lp_pUnit))) {
                    AIWaveAddUnit(AIUnitGetWave(autoE0B0E697_var), lp_pUnit);
                    break;
                }

            }
        }
        else {
            return true;
        }
        Wait(0.5, c_timeGame);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_568952AB"), false);
    return true;
}

text libCOMI_gf_CT_MutatorName (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mutators", lp_mutator, "Name", 1);
}

text libCOMI_gf_CT_MutatorDescription (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("Mutators", lp_mutator, "Description", 1);
}

string libCOMI_gf_CT_MutatorIcon (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetImagePath("Mutators", lp_mutator, "Icon", 1);
}

int libCOMI_gf_CT_MutatorEnabledCount () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cT_MutatorEnabledCount;
}

bool libCOMI_gf_CT_MutatorInWeeklyChallenge () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cT_MutatorIsWeeklyChallenge;
}

bool libCOMI_gf_CT_MutatorInCustom () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cT_MutatorCustomMode;
}

bool libCOMI_gf_CT_NearbyCliffs (point lp_testPoint, fixed lp_testDistance) {
    // Automatic Variable Declarations
    // Implementation
    if (((CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 0.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 45.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 90.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 135.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 180.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 225.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 270.0)) == true) || (CrossCliff(lp_testPoint, PointWithOffsetPolar(lp_testPoint, lp_testDistance, 315.0)) == true))) {
        return true;
    }
    else {
        return false;
    }
}

bool libCOMI_gf_CT_LineCrossesRegion (point lp_pointA, point lp_pointB, region lp_testRegion) {
    // Variable Declarations
    fixed lv_indexReal;

    // Automatic Variable Declarations
    const fixed auto4BBC8590_ae = 1.0;
    const fixed auto4BBC8590_ai = 0.05;

    // Variable Initialization

    // Implementation
    lv_indexReal = 0.0;
    for ( ; ( (auto4BBC8590_ai >= 0 && lv_indexReal <= auto4BBC8590_ae) || (auto4BBC8590_ai < 0 && lv_indexReal >= auto4BBC8590_ae) ) ; lv_indexReal += auto4BBC8590_ai ) {
        if ((RegionContainsPoint(lp_testRegion, PointInterpolate(lp_pointA, lp_pointB, lv_indexReal)) == true)) {
            return true;
        }

    }
    return false;
}

bool libCOMI_gf_CT_MutatorRandomAllowed (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "RandomAllowed", 1) == 1);
}

bool libCOMI_gf_CT_MutatorRandomFirstAllowed (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "RandomFirstAllowed", 1) == 1);
}

bool libCOMI_gf_CT_MutatorCustomAllowed (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "CustomAllowed", 1) == 1);
}

bool libCOMI_gf_CT_MutatorCustomMultipleAllowed (string lp_mutator) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetInt("Mutators", lp_mutator, "CustomAllowMultiple", 1) == 1);
}

string libCOMI_gf_CT_RandomUnusedCustomMutator () {
    // Variable Declarations
    string lv_randomMutator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_randomMutator = UserDataInstance("Mutators", RandomInt(1, UserDataInstanceCount("Mutators")));
        if ((libCOMI_gf_CT_MutatorCustomAllowed(lv_randomMutator) == true) && (lv_randomMutator != "Random") && (lv_randomMutator != "Vertigo") && (libCOMI_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

bool libCOMI_gf_CT_MutatorUnitIsMapObjective (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_unitType = UnitGetType(lp_unit);
    if (((UnitFilterMatch(lp_unit, 1, UnitFilter(0, 0, 0, (1 << (c_targetFilterMapBoss - 32)))) == false) || (lv_unitType == "VoidThrasher") || (lv_unitType == "Caboose") || (lv_unitType == "TarsonisEngineFast") || (lv_unitType == "TarsonisEngine") || (lv_unitType == "FreightCar") || (lv_unitType == "ACPirateCapitalShip") || (lv_unitType == "SlaynElemental") || (lv_unitType == "ArchAngelCoopAssault") || (lv_unitType == "ArchAngelCoopFighter") || (lv_unitType == "RedstoneSalamander") || (lv_unitType == "RedstoneSalamanderBurrowed") || (lv_unitType == "XelNagaConstruct") || (lv_unitType == "Blightbringer") || (lv_unitType == "BlightbringerBurrowed") || (lv_unitType == "NovaEradicator") || (lv_unitType == "ProtossFrigate") || (lv_unitType == "CODXelNagaConstruct"))) {
        return true;
    }

    return false;
}

void libCOMI_gf_CreateMutationAbominationProbabilities (int lp_minMutators, int lp_maxMutators, int lp_minPointValue, int lp_maxPointValue) {
    // Variable Declarations
    string lv_mutationabominationinstance;
    string lv_mutatoriter;
    int lv_pointindexiter;
    int lv_pointvalueindexiter;
    int lv_mutatorindexiter;
    int lv_mutatorsconsideredcount;
    int lv_player;

    // Automatic Variable Declarations
    const int auto8D453F81_ae = libCOMI_gv_cT_MAbomination_MutatorPointCeiling;
    const int auto8D453F81_ai = 1;
    string autoEDF770D7_userType;
    int autoEDF770D7_i;
    int auto5843056D_ai;
    int auto5843056D_ae;
    const int auto0A961692_ae = libCOMI_gv_cT_MAbomination_MutatorPointCeiling;
    const int auto0A961692_ai = 1;
    int autoBF4CBC26_n;
    int autoBF4CBC26_i;
    string auto2CB5509C_userType;
    int auto2CB5509C_i;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cT_MAbomination_MinMutators = lp_minMutators;
    libCOMI_gv_cT_MAbomination_MaxMutators = lp_maxMutators;
    libCOMI_gv_cT_MAbomination_MinPoints = lp_minPointValue;
    libCOMI_gv_cT_MAbomination_MaxPoints = lp_maxPointValue;
    libCOMI_gv_cT_MAbomination_MutatorsCount = 0;
    libCOMI_gv_cT_MAbomination_CombosCounted = 0;
    lv_pointindexiter = 1;
    for ( ; ( (auto8D453F81_ai >= 0 && lv_pointindexiter <= auto8D453F81_ae) || (auto8D453F81_ai < 0 && lv_pointindexiter >= auto8D453F81_ae) ) ; lv_pointindexiter += auto8D453F81_ai ) {
        libCOMI_gv_cT_MAbomination_MutatorPointPossibilities[lv_pointindexiter] = 0;
    }
    autoEDF770D7_userType = "XMM_MutationAbominations";
    autoEDF770D7_i = 1;
    for ( ; autoEDF770D7_i <= UserDataInstanceCount(autoEDF770D7_userType) ; autoEDF770D7_i += 1 ) {
        lv_mutationabominationinstance = UserDataInstance(autoEDF770D7_userType, autoEDF770D7_i);
        libCOMI_gv_cT_MAbomination_MutatorPointPossibilities[UserDataGetInt("XMM_MutationAbominations", lv_mutationabominationinstance, "Points", 1)] += 1;
    }
    libCOMI_gf_TraverseMutationAbominationPointIndex(1, 0, 0, true);
    auto5843056D_ai = 1;
    auto5843056D_ae = UserDataInstanceCount("Mutators")+1;
    while (auto5843056D_ai < auto5843056D_ae) {
        lv_mutatoriter = UserDataInstance("Mutators", auto5843056D_ai);
        auto5843056D_ai = auto5843056D_ai+1;
        libCOMI_gf_EnableDisableMutator(false, lv_mutatoriter);
    }
    lv_mutatorindexiter = 1;
    lv_pointindexiter = 1;
    for ( ; ( (auto0A961692_ai >= 0 && lv_pointindexiter <= auto0A961692_ae) || (auto0A961692_ai < 0 && lv_pointindexiter >= auto0A961692_ae) ) ; lv_pointindexiter += auto0A961692_ai ) {
        autoBF4CBC26_n = libCOMI_gv_cT_MAbomination_MutatorPointTemplate[lv_pointindexiter];
        for (autoBF4CBC26_i = 1; autoBF4CBC26_i <= autoBF4CBC26_n; autoBF4CBC26_i += 1) {
            lv_mutatorsconsideredcount = 0;
            auto2CB5509C_userType = "XMM_MutationAbominations";
            auto2CB5509C_i = 1;
            for ( ; auto2CB5509C_i <= UserDataInstanceCount(auto2CB5509C_userType) ; auto2CB5509C_i += 1 ) {
                lv_mutationabominationinstance = UserDataInstance(auto2CB5509C_userType, auto2CB5509C_i);
                if ((UserDataGetInt("XMM_MutationAbominations", lv_mutationabominationinstance, "Points", 1) == lv_pointindexiter) && (libCOMI_gf_MutatorIsEnabled(UserDataGetUserInstance("XMM_MutationAbominations", lv_mutationabominationinstance, "Mutator", 1)) == false)) {
                    lv_mutatorsconsideredcount += 1;
                    if ((RandomInt(1, lv_mutatorsconsideredcount) == lv_mutatorsconsideredcount)) {
                        libCOMI_gv_cT_MAbomination_Mutators[lv_mutatorindexiter] = UserDataGetUserInstance("XMM_MutationAbominations", lv_mutationabominationinstance, "Mutator", 1);
                    }

                }

            }
            libCOMI_gf_EnableDisableMutator(true, libCOMI_gv_cT_MAbomination_Mutators[lv_mutatorindexiter]);
            lv_mutatorindexiter += 1;
        }
    }
    libCOMI_gf_CT_StoreMutatorScoreValues();
}

void libCOMI_gf_TraverseMutationAbominationPointIndex (int lp_pointIndex, int lp_pointTotal, int lp_mutatorTotal, bool lp_setaTemplate) {
    // Variable Declarations
    int lv_mutatorcountiter;
    int lv_newpointtotal;
    int lv_newmutatortotal;
    int lv_nextpointindex;

    // Automatic Variable Declarations
    int autoD219E32D_ae;
    const int autoD219E32D_ai = 1;

    // Variable Initialization
    lv_nextpointindex = (lp_pointIndex + 1);

    // Implementation
    autoD219E32D_ae = libCOMI_gv_cT_MAbomination_MaxMutators;
    lv_mutatorcountiter = 0;
    for ( ; ( (autoD219E32D_ai >= 0 && lv_mutatorcountiter <= autoD219E32D_ae) || (autoD219E32D_ai < 0 && lv_mutatorcountiter >= autoD219E32D_ae) ) ; lv_mutatorcountiter += autoD219E32D_ai ) {
        libCOMI_gv_cT_MAbomination_ConsideredMutatorPointTemplate[lp_pointIndex] = lv_mutatorcountiter;
        lv_newpointtotal = (lp_pointTotal + lp_pointIndex * lv_mutatorcountiter);
        lv_newmutatortotal = (lp_mutatorTotal + lv_mutatorcountiter);
        if ((lv_newmutatortotal <= libCOMI_gv_cT_MAbomination_MaxMutators) && (lv_newpointtotal <= libCOMI_gv_cT_MAbomination_MaxPoints) && (lv_mutatorcountiter <= libCOMI_gv_cT_MAbomination_MutatorPointPossibilities[lp_pointIndex])) {
            if ((lv_mutatorcountiter > 0) && (lv_newmutatortotal >= libCOMI_gv_cT_MAbomination_MinMutators) && (lv_newpointtotal >= libCOMI_gv_cT_MAbomination_MinPoints)) {
                libCOMI_gf_ConsiderMutationAbominationPointTemplate(lp_pointIndex, lp_setaTemplate);
            }

            if ((lp_pointIndex < libCOMI_gv_cT_MAbomination_MutatorPointCeiling)) {
                libCOMI_gf_TraverseMutationAbominationPointIndex(lv_nextpointindex, lv_newpointtotal, lv_newmutatortotal, lp_setaTemplate);
            }

        }

    }
}

void libCOMI_gf_ConsiderMutationAbominationPointTemplate (int lp_currentPointIndex, bool lp_setaTemplate) {
    // Variable Declarations
    int lv_pointindexiter;
    int lv_pointvalueiter;
    int lv_combospossible;
    int lv_mutatorscount;
    int lv_pointscount;

    // Automatic Variable Declarations
    int auto1904A38C_ae;
    const int auto1904A38C_ai = 1;
    int auto97B49857_ae;
    const int auto97B49857_ai = 1;
    const int auto61207B1E_ae = 2;
    const int auto61207B1E_ai = -1;
    int autoE8EE5B2A_ae;
    const int autoE8EE5B2A_ai = 1;
    const int auto44C982C7_ae = libCOMI_gv_cT_MAbomination_MutatorPointCeiling;
    const int auto44C982C7_ai = 1;

    // Variable Initialization
    lv_combospossible = 1;

    // Implementation
    auto1904A38C_ae = lp_currentPointIndex;
    lv_pointindexiter = 1;
    for ( ; ( (auto1904A38C_ai >= 0 && lv_pointindexiter <= auto1904A38C_ae) || (auto1904A38C_ai < 0 && lv_pointindexiter >= auto1904A38C_ae) ) ; lv_pointindexiter += auto1904A38C_ai ) {
        lv_mutatorscount += libCOMI_gv_cT_MAbomination_ConsideredMutatorPointTemplate[lv_pointindexiter];
        lv_pointscount += (lv_pointindexiter * libCOMI_gv_cT_MAbomination_ConsideredMutatorPointTemplate[lv_pointindexiter]);
        auto97B49857_ae = (libCOMI_gv_cT_MAbomination_ConsideredMutatorPointTemplate[lv_pointindexiter] - 1);
        lv_pointvalueiter = 0;
        for ( ; ( (auto97B49857_ai >= 0 && lv_pointvalueiter <= auto97B49857_ae) || (auto97B49857_ai < 0 && lv_pointvalueiter >= auto97B49857_ae) ) ; lv_pointvalueiter += auto97B49857_ai ) {
            lv_combospossible *= (libCOMI_gv_cT_MAbomination_MutatorPointPossibilities[lv_pointindexiter] - lv_pointvalueiter);
        }
        lv_pointvalueiter = libCOMI_gv_cT_MAbomination_ConsideredMutatorPointTemplate[lv_pointindexiter];
        for ( ; ( (auto61207B1E_ai >= 0 && lv_pointvalueiter <= auto61207B1E_ae) || (auto61207B1E_ai < 0 && lv_pointvalueiter >= auto61207B1E_ae) ) ; lv_pointvalueiter += auto61207B1E_ai ) {
            lv_combospossible /= lv_pointvalueiter;
        }
    }
    libCOMI_gv_cT_MAbomination_CombosCounted += lv_combospossible;
    if ((lp_setaTemplate == true) && (RandomInt(1, libCOMI_gv_cT_MAbomination_CombosCounted) <= lv_combospossible)) {
        libCOMI_gv_cT_MAbomination_MutatorsCount = lv_mutatorscount;
        libCOMI_gv_cT_MAbomination_PointsSnapshot = lv_pointscount;
        autoE8EE5B2A_ae = lp_currentPointIndex;
        lv_pointindexiter = 1;
        for ( ; ( (autoE8EE5B2A_ai >= 0 && lv_pointindexiter <= autoE8EE5B2A_ae) || (autoE8EE5B2A_ai < 0 && lv_pointindexiter >= autoE8EE5B2A_ae) ) ; lv_pointindexiter += autoE8EE5B2A_ai ) {
            libCOMI_gv_cT_MAbomination_MutatorPointTemplate[lv_pointindexiter] = libCOMI_gv_cT_MAbomination_ConsideredMutatorPointTemplate[lv_pointindexiter];
        }
        lv_pointindexiter = (lp_currentPointIndex + 1);
        for ( ; ( (auto44C982C7_ai >= 0 && lv_pointindexiter <= auto44C982C7_ae) || (auto44C982C7_ai < 0 && lv_pointindexiter >= auto44C982C7_ae) ) ; lv_pointindexiter += auto44C982C7_ai ) {
            libCOMI_gv_cT_MAbomination_MutatorPointTemplate[lv_pointindexiter] = 0;
        }
    }

}

void libCOMI_gf_CreateMutationAbomination (int lp_minMutators, int lp_maxMutators, int lp_minPointValue, int lp_maxPointValue) {
    // Variable Declarations
    string lv_mutatoriter;
    int lv_mutatorindex;

    // Automatic Variable Declarations
    int auto08B7D388_ae;
    const int auto08B7D388_ai = 1;
    int autoEC9B19B6_ai;
    int autoEC9B19B6_ae;
    int auto42BE5A4C_ae;
    const int auto42BE5A4C_ai = 1;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cT_MAbomination_MinMutators = lp_minMutators;
    libCOMI_gv_cT_MAbomination_MaxMutators = lp_maxMutators;
    libCOMI_gv_cT_MAbomination_MinPoints = lp_minPointValue;
    libCOMI_gv_cT_MAbomination_MaxPoints = lp_maxPointValue;
    libCOMI_gv_cT_MAbomination_MutatorsCount = 0;
    libCOMI_gv_cT_MAbomination_CombosCounted = 0;
    auto08B7D388_ae = UserDataInstanceCount("XMM_MutationAbominations");
    lv_mutatorindex = 1;
    for ( ; ( (auto08B7D388_ai >= 0 && lv_mutatorindex <= auto08B7D388_ae) || (auto08B7D388_ai < 0 && lv_mutatorindex >= auto08B7D388_ae) ) ; lv_mutatorindex += auto08B7D388_ai ) {
        libCOMI_gf_IterateNextMutationAbomination(1, lv_mutatorindex, 0);
    }
    autoEC9B19B6_ai = 1;
    autoEC9B19B6_ae = UserDataInstanceCount("Mutators")+1;
    while (autoEC9B19B6_ai < autoEC9B19B6_ae) {
        lv_mutatoriter = UserDataInstance("Mutators", autoEC9B19B6_ai);
        autoEC9B19B6_ai = autoEC9B19B6_ai+1;
        libCOMI_gf_EnableDisableMutator(false, lv_mutatoriter);
    }
    auto42BE5A4C_ae = libCOMI_gv_cT_MAbomination_MutatorsCount;
    lv_mutatorindex = 1;
    for ( ; ( (auto42BE5A4C_ai >= 0 && lv_mutatorindex <= auto42BE5A4C_ae) || (auto42BE5A4C_ai < 0 && lv_mutatorindex >= auto42BE5A4C_ae) ) ; lv_mutatorindex += auto42BE5A4C_ai ) {
        libCOMI_gf_EnableDisableMutator(true, libCOMI_gv_cT_MAbomination_Mutators[lv_mutatorindex]);
    }
    libCOMI_gf_CT_StoreMutatorScoreValues();
}

void libCOMI_gf_IterateNextMutationAbomination (int lp_depthLevel, int lp_mutationAbominationIndex, int lp_currentPoints) {
    // Variable Declarations
    string lv_mutationabominationinstance;
    int lv_mutationabominationpoints;
    int lv_newpointtotal;
    int lv_iterindex;

    // Automatic Variable Declarations
    int auto9D17AEB4_ae;
    const int auto9D17AEB4_ai = 1;
    int autoE283B9FA_ae;
    const int autoE283B9FA_ai = 1;

    // Variable Initialization

    // Implementation
    if ((((lp_mutationAbominationIndex >= 1) && (lp_mutationAbominationIndex <= UserDataInstanceCount("XMM_MutationAbominations"))) == true)) {
        lv_mutationabominationinstance = UserDataInstance("XMM_MutationAbominations", lp_mutationAbominationIndex);
        lv_mutationabominationpoints = UserDataGetInt("XMM_MutationAbominations", lv_mutationabominationinstance, "Points", 1);
        lv_newpointtotal = (lp_currentPoints + lv_mutationabominationpoints);
    }
    else {
        return ;
    }
    if ((lv_newpointtotal > libCOMI_gv_cT_MAbomination_MaxPoints)) {
        return ;
    }

    libCOMI_gv_cT_MAbomination_ConsideredMutatorsCount = lp_depthLevel;
    libCOMI_gv_cT_MAbomination_ConsideredMutators[lp_depthLevel] = UserDataGetUserInstance("XMM_MutationAbominations", UserDataInstance("XMM_MutationAbominations", lp_mutationAbominationIndex), "Mutator", 1);
    if ((lv_newpointtotal >= libCOMI_gv_cT_MAbomination_MinPoints) && (lp_depthLevel >= libCOMI_gv_cT_MAbomination_MinMutators)) {
        libCOMI_gv_cT_MAbomination_CombosCounted += 1;
        if ((RandomInt(1, libCOMI_gv_cT_MAbomination_CombosCounted) == libCOMI_gv_cT_MAbomination_CombosCounted)) {
            libCOMI_gv_cT_MAbomination_CountSnapshot = libCOMI_gv_cT_MAbomination_CombosCounted;
            libCOMI_gv_cT_MAbomination_PointsSnapshot = lv_newpointtotal;
            libCOMI_gv_cT_MAbomination_MutatorsCount = lp_depthLevel;
            auto9D17AEB4_ae = lp_depthLevel;
            lv_iterindex = 1;
            for ( ; ( (auto9D17AEB4_ai >= 0 && lv_iterindex <= auto9D17AEB4_ae) || (auto9D17AEB4_ai < 0 && lv_iterindex >= auto9D17AEB4_ae) ) ; lv_iterindex += auto9D17AEB4_ai ) {
                libCOMI_gv_cT_MAbomination_Mutators[lv_iterindex] = libCOMI_gv_cT_MAbomination_ConsideredMutators[lv_iterindex];
            }
        }

    }

    if ((lp_depthLevel < libCOMI_gv_cT_MAbomination_MaxMutators) && (lv_newpointtotal < libCOMI_gv_cT_MAbomination_MaxPoints)) {
        autoE283B9FA_ae = UserDataInstanceCount("XMM_MutationAbominations");
        lv_iterindex = (lp_mutationAbominationIndex + 1);
        for ( ; ( (autoE283B9FA_ai >= 0 && lv_iterindex <= autoE283B9FA_ae) || (autoE283B9FA_ai < 0 && lv_iterindex >= autoE283B9FA_ae) ) ; lv_iterindex += autoE283B9FA_ai ) {
            if (((lv_newpointtotal + UserDataGetInt("XMM_MutationAbominations", UserDataInstance("XMM_MutationAbominations", lv_iterindex), "Points", 1)) <= libCOMI_gv_cT_MAbomination_MaxPoints)) {
                libCOMI_gf_IterateNextMutationAbomination((lp_depthLevel + 1), lv_iterindex, lv_newpointtotal);
            }
            else {
                return ;
            }
        }
    }

}

string libCOMI_gf_CT_GetMutationDifficultyLevel () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMI_gv_cT_MAbomination_DifficultyLevel;
}

void libCOMI_gf_CT_SetMutationDifficultyLevel (string lp_difficultyLevel) {
    // Variable Declarations
    int lv_mutatorcountiter;
    fixed lv_remainingpercentage;
    fixed lv_targetpercentage;
    fixed lv_actualpercentage;
    int lv_basepossibilities;
    int lv_totalbasepossibilities;
    int lv_totaluntargetedpossibilities;

    // Automatic Variable Declarations
    int auto26E617C0_ae;
    const int auto26E617C0_ai = 1;
    int auto4DAB4C1E_ae;
    const int auto4DAB4C1E_ai = 1;
    int auto92CCFFB6_ae;
    const int auto92CCFFB6_ai = 1;

    // Variable Initialization
    lv_remainingpercentage = 1.0;

    // Implementation
    if ((libCOMI_gf_CT_GetMutationDifficultyLevel() == lp_difficultyLevel)) {
        return ;
    }

    if ((libCOMI_gf_CT_GetMutationDifficultyLevel() != null)) {
        auto26E617C0_ae = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMax", 1);
        lv_mutatorcountiter = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMin", 1);
        for ( ; ( (auto26E617C0_ai >= 0 && lv_mutatorcountiter <= auto26E617C0_ae) || (auto26E617C0_ai < 0 && lv_mutatorcountiter >= auto26E617C0_ae) ) ; lv_mutatorcountiter += auto26E617C0_ai ) {
            DataTableValueRemove(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_TargetPercentage_", lv_mutatorcountiter));
            DataTableValueRemove(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_ActualPercentage_", lv_mutatorcountiter));
            DataTableValueRemove(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_WeightMod_", lv_mutatorcountiter));
            DataTableValueRemove(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_Possibilities_", lv_mutatorcountiter));
        }
        DataTableValueRemove(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_TargetPercentage_", 0));
        DataTableValueRemove(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_Possibilities_", 0));
    }

    libCOMI_gv_cT_MAbomination_DifficultyLevel = lp_difficultyLevel;
    if ((libCOMI_gf_CT_GetMutationDifficultyLevel() != null)) {
        auto4DAB4C1E_ae = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMax", 1);
        lv_mutatorcountiter = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMin", 1);
        for ( ; ( (auto4DAB4C1E_ai >= 0 && lv_mutatorcountiter <= auto4DAB4C1E_ae) || (auto4DAB4C1E_ai < 0 && lv_mutatorcountiter >= auto4DAB4C1E_ae) ) ; lv_mutatorcountiter += auto4DAB4C1E_ai ) {
            lv_basepossibilities = libCOMI_gf_CT_GetMutatorCountPossibilities(lv_mutatorcountiter, UserDataGetInt("XMM_MutationDifficultyLevels", "Plus1", "PointsMin", 1), UserDataGetInt("XMM_MutationDifficultyLevels", "Plus1", "PointsMax", 1));
            DataTableSetInt(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_Possibilities_", lv_mutatorcountiter), lv_basepossibilities);
            lv_totalbasepossibilities += lv_basepossibilities;
            lv_targetpercentage = libCOMI_gf_CT_GetMutatorCountTargetPercentageAtDifficultyLevel(lv_mutatorcountiter, libCOMI_gf_CT_GetMutationDifficultyLevel());
            DataTableSetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_TargetPercentage_", lv_mutatorcountiter), lv_targetpercentage);
            if ((lv_targetpercentage >= 0.0)) {
                lv_remainingpercentage -= lv_targetpercentage;
            }
            else {
                lv_totaluntargetedpossibilities += lv_basepossibilities;
            }
        }
        DataTableSetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_TargetPercentage_", 0), MaxF(lv_remainingpercentage, 0.0));
        DataTableSetInt(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_Possibilities_", 0), lv_basepossibilities);
        auto92CCFFB6_ae = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMax", 1);
        lv_mutatorcountiter = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMin", 1);
        for ( ; ( (auto92CCFFB6_ai >= 0 && lv_mutatorcountiter <= auto92CCFFB6_ae) || (auto92CCFFB6_ai < 0 && lv_mutatorcountiter >= auto92CCFFB6_ae) ) ; lv_mutatorcountiter += auto92CCFFB6_ai ) {
            lv_targetpercentage = DataTableGetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_TargetPercentage_", lv_mutatorcountiter));
            if ((lv_targetpercentage < 0.0) && (lv_remainingpercentage > 0.0) && (lv_totaluntargetedpossibilities > 0)) {
                lv_targetpercentage = (DataTableGetInt(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_Possibilities_", lv_mutatorcountiter)) / lv_totaluntargetedpossibilities * lv_remainingpercentage);
                DataTableSetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_TargetPercentage_", lv_mutatorcountiter), lv_targetpercentage);
            }
            else if ((lv_targetpercentage < 0.0)) {
                lv_targetpercentage = 0.0;
                DataTableSetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_TargetPercentage_", lv_mutatorcountiter), lv_targetpercentage);
            }
            lv_actualpercentage = (IntToFixed(DataTableGetInt(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_Possibilities_", lv_mutatorcountiter))) / IntToFixed(lv_totalbasepossibilities));
            DataTableSetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_ActualPercentage_", lv_mutatorcountiter), lv_actualpercentage);
            if ((lv_actualpercentage > 0.0)) {
                DataTableSetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_WeightMod_", lv_mutatorcountiter), (lv_targetpercentage / lv_actualpercentage));
            }
            else {
                DataTableSetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_WeightMod_", lv_mutatorcountiter), 0.0);
            }
        }
    }

}

fixed libCOMI_gf_CT_GetMutatorCountTargetPercentageAtDifficultyLevel (int lp_count, string lp_difficultyLevel) {
    // Variable Declarations
    string lv_countweightinstance;
    int lv_countiter;
    int lv_bestdifficultymatch;
    fixed lv_bestdifficultymatchtargetweight;
    fixed lv_totalweight;
    fixed lv_targetweight;
    int lv_minmutatorcount;
    int lv_maxmutatorcount;
    bool lv_foundmatch;

    // Automatic Variable Declarations
    int autoC780B861_ae;
    const int autoC780B861_ai = 1;
    string autoBF6A8965_userType;
    int autoBF6A8965_i;

    // Variable Initialization

    // Implementation
    if ((lp_difficultyLevel == null)) {
        return 0.0;
    }

    lv_minmutatorcount = UserDataGetInt("XMM_MutationDifficultyLevels", lp_difficultyLevel, "MutatorsMin", 1);
    lv_maxmutatorcount = UserDataGetInt("XMM_MutationDifficultyLevels", lp_difficultyLevel, "MutatorsMax", 1);
    autoC780B861_ae = lv_maxmutatorcount;
    lv_countiter = lv_minmutatorcount;
    for ( ; ( (autoC780B861_ai >= 0 && lv_countiter <= autoC780B861_ae) || (autoC780B861_ai < 0 && lv_countiter >= autoC780B861_ae) ) ; lv_countiter += autoC780B861_ai ) {
        lv_bestdifficultymatch = 0;
        lv_bestdifficultymatchtargetweight = 0;
        autoBF6A8965_userType = "XMM_MutationDifficultyCountTargets";
        autoBF6A8965_i = 1;
        for ( ; autoBF6A8965_i <= UserDataInstanceCount(autoBF6A8965_userType) ; autoBF6A8965_i += 1 ) {
            lv_countweightinstance = UserDataInstance(autoBF6A8965_userType, autoBF6A8965_i);
            if ((UserDataGetInt("XMM_MutationDifficultyCountTargets", lv_countweightinstance, "MutatorCount", 1) == lv_countiter) && (libNtve_gf_UserDataInstanceGetIndex("XMM_MutationDifficultyLevels", UserDataGetUserInstance("XMM_MutationDifficultyCountTargets", lv_countweightinstance, "MinDifficulty", 1)) > lv_bestdifficultymatch)) {
                lv_bestdifficultymatch = libNtve_gf_UserDataInstanceGetIndex("XMM_MutationDifficultyLevels", UserDataGetUserInstance("XMM_MutationDifficultyCountTargets", lv_countweightinstance, "MinDifficulty", 1));
                lv_bestdifficultymatchtargetweight = UserDataGetFixed("XMM_MutationDifficultyCountTargets", lv_countweightinstance, "TargetWeight", 1);
                if ((lv_countiter == lp_count)) {
                    lv_foundmatch = true;
                }

            }

        }
        lv_totalweight += lv_bestdifficultymatchtargetweight;
        if ((lv_countiter == lp_count)) {
            lv_targetweight = lv_bestdifficultymatchtargetweight;
        }

    }
    if ((lv_foundmatch == false)) {
        return -1.0;
    }

    if ((lv_totalweight > 0.0)) {
        return (lv_targetweight / 100);
    }

    return 0.0;
}

int libCOMI_gf_CT_GetMutatorCountPossibilities (int lp_mutatorCount, int lp_minPoints, int lp_maxPoints) {
    // Variable Declarations
    string lv_mutationabominationinstance;
    int lv_pointindexiter;

    // Automatic Variable Declarations
    const int auto621F99FD_ae = libCOMI_gv_cT_MAbomination_MutatorPointCeiling;
    const int auto621F99FD_ai = 1;
    string auto82BE8FC5_userType;
    int auto82BE8FC5_i;

    // Variable Initialization

    // Implementation
    libCOMI_gv_cT_MAbomination_MinMutators = lp_mutatorCount;
    libCOMI_gv_cT_MAbomination_MaxMutators = lp_mutatorCount;
    libCOMI_gv_cT_MAbomination_MinPoints = lp_minPoints;
    libCOMI_gv_cT_MAbomination_MaxPoints = lp_maxPoints;
    libCOMI_gv_cT_MAbomination_MutatorsCount = 0;
    libCOMI_gv_cT_MAbomination_CombosCounted = 0;
    lv_pointindexiter = 1;
    for ( ; ( (auto621F99FD_ai >= 0 && lv_pointindexiter <= auto621F99FD_ae) || (auto621F99FD_ai < 0 && lv_pointindexiter >= auto621F99FD_ae) ) ; lv_pointindexiter += auto621F99FD_ai ) {
        libCOMI_gv_cT_MAbomination_MutatorPointPossibilities[lv_pointindexiter] = 0;
    }
    auto82BE8FC5_userType = "XMM_MutationAbominations";
    auto82BE8FC5_i = 1;
    for ( ; auto82BE8FC5_i <= UserDataInstanceCount(auto82BE8FC5_userType) ; auto82BE8FC5_i += 1 ) {
        lv_mutationabominationinstance = UserDataInstance(auto82BE8FC5_userType, auto82BE8FC5_i);
        libCOMI_gv_cT_MAbomination_MutatorPointPossibilities[UserDataGetInt("XMM_MutationAbominations", lv_mutationabominationinstance, "Points", 1)] += 1;
    }
    libCOMI_gf_TraverseMutationAbominationPointIndex(1, 0, 0, false);
    return libCOMI_gv_cT_MAbomination_CombosCounted;
}

fixed libCOMI_gf_CT_GetMutatorCountWeightModifier (int lp_mutatorCount) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableValueExists(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_WeightMod_", lp_mutatorCount)) == true)) {
        return DataTableGetFixed(true, libCOMI_gf_CT_MutatorCountTableName("MutatorCount_WeightMod_", lp_mutatorCount));
    }

    return 0.0;
}

int libCOMI_gf_CT_GetRandomMutatorCount () {
    // Variable Declarations
    int lv_mincount;
    int lv_maxcount;
    int lv_mutatorcountiter;
    fixed lv_weight;
    fixed lv_totalweight;
    int lv_chosencount;

    // Automatic Variable Declarations
    int autoE7248627_ae;
    const int autoE7248627_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOMI_gf_CT_GetMutationDifficultyLevel() == null)) {
        return 0;
    }

    lv_mincount = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMin", 1);
    lv_maxcount = UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "MutatorsMax", 1);
    autoE7248627_ae = lv_maxcount;
    lv_mutatorcountiter = lv_mincount;
    for ( ; ( (autoE7248627_ai >= 0 && lv_mutatorcountiter <= autoE7248627_ae) || (autoE7248627_ai < 0 && lv_mutatorcountiter >= autoE7248627_ae) ) ; lv_mutatorcountiter += autoE7248627_ai ) {
        lv_weight = (libCOMI_gf_CT_GetMutatorCountPossibilities(lv_mutatorcountiter, UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "PointsMin", 1), UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "PointsMax", 1)) * libCOMI_gf_CT_GetMutatorCountWeightModifier(lv_mutatorcountiter));
        lv_totalweight += lv_weight;
        if ((RandomFixed(0.0, lv_totalweight) <= lv_weight)) {
            lv_chosencount = lv_mutatorcountiter;
        }

    }
    return lv_chosencount;
}

fixed libCOMI_gf_CT_GetRandomMutatorXPModifier () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CT_GetMutationDifficultyLevel() != null)) {
        return UserDataGetFixed("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "XPModifier", 1);
    }

    return 0.0;
}

string libCOMI_gf_CT_MutatorCountTableName (string lp_prefixType, int lp_mutatorCount) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_prefixType) + IntToString(lp_mutatorCount));
}

string libCOMI_gf_CT_GetAbomFromMutator (string lp_mutator) {
    // Variable Declarations
    string lv_mutabominstance;

    // Automatic Variable Declarations
    string auto47314E67_userType;
    int auto47314E67_i;

    // Variable Initialization

    // Implementation
    auto47314E67_userType = "XMM_MutationAbominations";
    auto47314E67_i = 1;
    for ( ; auto47314E67_i <= UserDataInstanceCount(auto47314E67_userType) ; auto47314E67_i += 1 ) {
        lv_mutabominstance = UserDataInstance(auto47314E67_userType, auto47314E67_i);
        if ((UserDataGetUserInstance("XMM_MutationAbominations", lv_mutabominstance, "Mutator", 1) == lp_mutator)) {
            return lv_mutabominstance;
        }

    }
    return null;
}

void libCOMI_gf_CT_StoreMutatorForPlayer (int lp_player, string lp_mutatorScoreValue, int lp_mutatorIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mutatorIndex <= libCOMI_gv_cT_MAbomination_MutatorsCount) && (libCOMI_gv_cT_MAbomination_Mutators[lp_mutatorIndex] != null)) {
        libCOMI_gf_CC_ScoreValueSet(lp_player, lp_mutatorScoreValue, libNtve_gf_UserDataInstanceGetIndex("Mutators", libCOMI_gv_cT_MAbomination_Mutators[lp_mutatorIndex]));
    }
    else {
        libCOMI_gf_CC_ScoreValueSet(lp_player, lp_mutatorScoreValue, 0);
    }
}

void libCOMI_gf_CT_StoreMutatorScoreValues () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto4C346AB4_g;

    // Variable Initialization

    // Implementation
    auto4C346AB4_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4C346AB4_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_CT_StoreMutatorForPlayer(lv_player, "MutatorTryAgain1", 1);
        libCOMI_gf_CT_StoreMutatorForPlayer(lv_player, "MutatorTryAgain2", 2);
        libCOMI_gf_CT_StoreMutatorForPlayer(lv_player, "MutatorTryAgain3", 3);
        libCOMI_gf_CT_StoreMutatorForPlayer(lv_player, "MutatorTryAgain4", 4);
    }
}

string libCOMI_gf_MM_RandomUnusedCustomMutator () {
    // Variable Declarations
    string lv_randomMutator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while (true) {
        lv_randomMutator = UserDataInstance("Mutators", RandomInt(1, UserDataInstanceCount("Mutators")));
        if ((libCOMI_gf_CT_MutatorCustomAllowed(lv_randomMutator) == true) && (lv_randomMutator != "Random") && (lv_randomMutator != "Vertigo") && (libCOMI_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

trigger auto_libCOMI_gf_MM_WarpIn_Trigger = null;
unit auto_libCOMI_gf_MM_WarpIn_lp_pUnit;

void libCOMI_gf_MM_WarpIn (unit lp_pUnit) {
    auto_libCOMI_gf_MM_WarpIn_lp_pUnit = lp_pUnit;

    if (auto_libCOMI_gf_MM_WarpIn_Trigger == null) {
        auto_libCOMI_gf_MM_WarpIn_Trigger = TriggerCreate("auto_libCOMI_gf_MM_WarpIn_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_MM_WarpIn_Trigger, false, false);
}

bool auto_libCOMI_gf_MM_WarpIn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_libCOMI_gf_MM_WarpIn_lp_pUnit;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create ProtossGenericWarpInOut");
    ActorSend(libNtve_gf_MainActorofUnit(lp_pUnit), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_MainActorofUnit(lp_pUnit), libNtve_gf_SetOpacity(1.0, 1.0));
    UnitBehaviorAdd(lp_pUnit, "ProtossGenericWarpInOut", lp_pUnit, 1);
    Wait(1.0, c_timeGame);
    UnitBehaviorRemove(lp_pUnit, "ProtossGenericWarpInOut", 1);
    ActorSend(libNtve_gf_MainActorofUnit(lp_pUnit), libNtve_gf_SetOpacity(1.0, 0.0));
    Wait(0.3, c_timeGame);
    return true;
}

void libCOMI_gf_MM_CopyBeneficialBehaviors (unit lp_pBehUnit, unit lp_pTargetUnit) {
    // Variable Declarations
    string lv_vBehavior;

    // Automatic Variable Declarations
    int auto8102E3D5_ae;
    int auto8102E3D5_var;

    // Variable Initialization

    // Implementation
    auto8102E3D5_ae = (UnitBehaviorCountAll(lp_pBehUnit) - 1);
    auto8102E3D5_var = 0;
    for ( ; auto8102E3D5_var <= auto8102E3D5_ae; auto8102E3D5_var += 1 ) {
        lv_vBehavior = UnitBehaviorGet(lp_pBehUnit, auto8102E3D5_var);
        if (((lv_vBehavior == "BiomassBuff1") || (lv_vBehavior == "BiomassBuff10") || (lv_vBehavior == "BiomassBuff100") || (lv_vBehavior == "BiomassBuff100PlusLife") || (lv_vBehavior == "BiomassBuff10PlusLife") || (lv_vBehavior == "AscendantSacrificeSelfBuff") || (lv_vBehavior == "DehakaEssenceDropPickupBuff") || (lv_vBehavior == "EssenceBuff1") || (lv_vBehavior == "EssenceBuff10") || (lv_vBehavior == "EssenceBuff100") || (lv_vBehavior == "EssenceBuff100PlusLife") || (lv_vBehavior == "EssenceBuff10PlusLife") || (lv_vBehavior == "DehakaGene4Creepers") || (lv_vBehavior == "DehakaGeneAttackSpeed") || (lv_vBehavior == "DehakaGeneCarapace") || (lv_vBehavior == "DehakaGeneCreeperHostGeneApply") || (lv_vBehavior == "DehakaGeneFireRoachGeneApply") || (lv_vBehavior == "DehakaGeneGuardianGeneApply") || (lv_vBehavior == "DehakaGeneImpalerGeneApply") || (lv_vBehavior == "DehakaGeneLifeLeech") || (lv_vBehavior == "DehakaGeneMutaliskGeneApply") || (lv_vBehavior == "DehakaGeneRavasaurGeneApply") || (lv_vBehavior == "DehakaGeneThorns") || (lv_vBehavior == "DehakaGeneTyrannosaurGeneApply"))) {
            UnitBehaviorAddPlayer(lp_pTargetUnit, lv_vBehavior, UnitGetOwner(lp_pTargetUnit), UnitBehaviorCount(lp_pBehUnit, lv_vBehavior));
        }

    }
    UnitXPAddXP(lp_pTargetUnit, null, UnitXPGetCurrentXP(lp_pBehUnit, null));
}

trigger auto_libCOMI_gf_MM_EnableMutator_Trigger = null;
string auto_libCOMI_gf_MM_EnableMutator_lp_pMutator;
bool auto_libCOMI_gf_MM_EnableMutator_lp_pNotification;
bool auto_libCOMI_gf_MM_EnableMutator_lp_pEnable;
int auto_libCOMI_gf_MM_EnableMutator_lp_pTimer;

void libCOMI_gf_MM_EnableMutator (string lp_pMutator, bool lp_pNotification, bool lp_pEnable, int lp_pTimer) {
    auto_libCOMI_gf_MM_EnableMutator_lp_pMutator = lp_pMutator;
    auto_libCOMI_gf_MM_EnableMutator_lp_pNotification = lp_pNotification;
    auto_libCOMI_gf_MM_EnableMutator_lp_pEnable = lp_pEnable;
    auto_libCOMI_gf_MM_EnableMutator_lp_pTimer = lp_pTimer;

    if (auto_libCOMI_gf_MM_EnableMutator_Trigger == null) {
        auto_libCOMI_gf_MM_EnableMutator_Trigger = TriggerCreate("auto_libCOMI_gf_MM_EnableMutator_TriggerFunc");
    }

    TriggerExecute(auto_libCOMI_gf_MM_EnableMutator_Trigger, false, false);
}

bool auto_libCOMI_gf_MM_EnableMutator_TriggerFunc (bool testConds, bool runActions) {
    string lp_pMutator = auto_libCOMI_gf_MM_EnableMutator_lp_pMutator;
    bool lp_pNotification = auto_libCOMI_gf_MM_EnableMutator_lp_pNotification;
    bool lp_pEnable = auto_libCOMI_gf_MM_EnableMutator_lp_pEnable;
    int lp_pTimer = auto_libCOMI_gf_MM_EnableMutator_lp_pTimer;

    // Variable Declarations
    text lv_vNewMutatorText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vNewMutatorText = StringExternal("Param/Value/lib_COMI_867DFB12");

    // Implementation
    if ((lp_pEnable == false)) {
        if ((libCOMI_gf_MutatorIsEnabled(lp_pMutator) == true)) {
            libCOMI_gf_EnableDisableMutator(false, lp_pMutator);
            if ((lp_pNotification == true)) {
                TextExpressionSetToken("Param/Expression/lib_COMI_B90A4264", "A", libCOMI_gf_CT_MutatorName(lp_pMutator));
                libCOMI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_COMI_B90A4264"));
            }

            libCOMI_gf_MM_UpdateMutators();
        }

        return true;
    }

    if ((libCOMI_gf_MutatorIsEnabled(lp_pMutator) == false)) {
        if ((lp_pNotification == true)) {
            SoundPlayForPlayer(SoundLink("ChaosStudio", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COMI_43668FDD", "A", libCOMI_gf_CT_MutatorName(lp_pMutator));
            libCOMI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_COMI_43668FDD"));
        }

        libCOMI_gf_EnableDisableMutator(true, lp_pMutator);
        TriggerSendEvent(("Mutator " + (lp_pMutator) + " Initialize"));
        libCOMI_gf_MM_UpdateMutators();
        if ((lp_pTimer > 0)) {
            Wait(lp_pTimer, c_timeGame);
            libCOMI_gf_EnableDisableMutator(false, lp_pMutator);
            if ((lp_pNotification == true)) {
                TextExpressionSetToken("Param/Expression/lib_COMI_B9D4DD65", "A", libCOMI_gf_CT_MutatorName(lp_pMutator));
                libCOMI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_COMI_B9D4DD65"));
            }

            libCOMI_gf_MM_UpdateMutators();
        }

    }

    return true;
}

void libCOMI_gf_MM_UpdateMutators () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CT_MutatorEnabledCount() > libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL)) {
        libCOMI_gf_CU_MutatorListInitLarge();
    }
    else {
        libCOMI_gf_CU_MutatorListInitSmall();
    }
}

void libCOMI_gf_MM_UnitScaleController (unit lp_pUnit, fixed lp_pModifier) {
    // Variable Declarations
    fixed lv_vDefaultScale;
    fixed lv_vScale;
    int lv_vCustomValue;
    int lv_vBiomassCountTotal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vScale = 1.0;
    lv_vCustomValue = libCOMI_gv_mM_UnitScale_CustomValue;

    // Implementation
    if ((UnitGetCustomValue(lp_pUnit, lv_vCustomValue) != 0.0)) {
        lv_vScale = UnitGetCustomValue(lp_pUnit, lv_vCustomValue);
    }
    else {
        lv_vScale = 1.0;
    }
    lv_vScale *= lp_pModifier;
    UnitSetCustomValue(lp_pUnit, lv_vCustomValue, lv_vScale);
    lv_vDefaultScale = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogActor, (UnitGetType(lp_pUnit)), "Scale", 0);
    if (((lv_vDefaultScale >= 0.5) && (lv_vDefaultScale <= 3.0)) && (lv_vDefaultScale != 1)) {
        lv_vScale *= lv_vDefaultScale;
    }

    if ((UnitBehaviorCount(lp_pUnit, "MutatorAvenger") >= 1)) {
        lv_vScale *= ((0.08 * UnitBehaviorCount(lp_pUnit, "MutatorAvenger")) + 1.0);
    }

    lv_vBiomassCountTotal = (UnitBehaviorCount(lp_pUnit, "BiomassBuff100") * 100);
    lv_vBiomassCountTotal += (UnitBehaviorCount(lp_pUnit, "BiomassBuff10") * 10);
    lv_vBiomassCountTotal += UnitBehaviorCount(lp_pUnit, "BiomassBuff1");
    if ((lv_vBiomassCountTotal > 100)) {
        lv_vBiomassCountTotal = 100;
    }

    if ((lv_vBiomassCountTotal > 0)) {
        lv_vScale *= ((0.0025 * lv_vBiomassCountTotal) + 1.25);
    }

    lv_vScale = libNtve_gf_ArithmeticRealClamp(lv_vScale, 0.35, 5.0);
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, (("SetScale " + FixedToString(lv_vScale, 1))));
}

void libCOMI_gf_MM_UnitCreationManual (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gv_mutatorHero = lp_pUnit;
    libCOMI_gv_mutatorPlayer = UnitGetOwner(lp_pUnit);
    TriggerSendEvent("Mutator Unit Creation");
}

string libCOMI_gf_CT_RandomUnusedCycleMutator () {
    // Variable Declarations
    int lv_attempts;
    string lv_randomMutator;

    // Automatic Variable Declarations
    const int auto4EEC0722_ae = 1000;
    const int auto4EEC0722_ai = 1;

    // Variable Initialization

    // Implementation
    lv_attempts = 1;
    for ( ; ( (auto4EEC0722_ai >= 0 && lv_attempts <= auto4EEC0722_ae) || (auto4EEC0722_ai < 0 && lv_attempts >= auto4EEC0722_ae) ) ; lv_attempts += auto4EEC0722_ai ) {
        lv_randomMutator = UserDataInstance("Mutators", RandomInt(1, UserDataInstanceCount("Mutators")));
        if ((libCOMI_gf_CT_MutatorRandomAllowed(lv_randomMutator) == true) && (libCOMI_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Default Map Initialize Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefaultMapInitializeTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = UserDataGetGameLink("MissionSettings", "CurrentMission", "Map", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_map != null)) {
        libCOMI_gf_LoadCoopMission(lv_map, libCOMI_gt_DefaultGameStartTrigger);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefaultMapInitializeTrigger_Init () {
    libCOMI_gt_DefaultMapInitializeTrigger = TriggerCreate("libCOMI_gt_DefaultMapInitializeTrigger_Func");
    TriggerAddEventMapInit(libCOMI_gt_DefaultMapInitializeTrigger);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default Game Start Trigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefaultGameStartTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefaultGameStartTrigger_Init () {
    libCOMI_gt_DefaultGameStartTrigger = TriggerCreate("libCOMI_gt_DefaultGameStartTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial Exploration
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_InitialExploration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_allyReveal;
    region lv_amonReveal;
    unit lv_unit;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoF7AF8F9B_g;
    playergroup autoE19D999D_g;

    // Variable Initialization
    lv_allyReveal = libCOMI_gf_GetRevealZone(1);
    lv_amonReveal = RegionFromName("Amon Initial Exploration");

    // Conditions
    if (testConds) {
        if (!((lv_allyReveal != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.0, c_timeReal);
    if ((lv_allyReveal != null)) {
        autoF7AF8F9B_g = libCOMI_gf_GetAlliedCommandersPlayers();
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoF7AF8F9B_g, lv_player);
            if (lv_player < 0) { break; }
            VisExploreArea(lv_player, lv_allyReveal, true, false);
        }
    }

    if ((lv_amonReveal != null)) {
        autoE19D999D_g = libCOMI_gv_vU_EnemyPlayers;
        lv_player = -1;
        while (true) {
            lv_player = PlayerGroupNextPlayer(autoE19D999D_g, lv_player);
            if (lv_player < 0) { break; }
            VisExploreArea(lv_player, lv_amonReveal, true, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_InitialExploration_Init () {
    libCOMI_gt_InitialExploration = TriggerCreate("libCOMI_gt_InitialExploration_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Mission Initialize
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_indexPlayer;
    int lv_itPlayer;
    int lv_playerInTeam;
    camerainfo lv_camera;
    point lv_point;
    int lv_expansionIndex;
    int lv_mAX_RECOMMENDED_ALLIED_PLAYERS;

    // Automatic Variable Declarations
    playergroup autoFD1992CB_g;
    playergroup auto6B1E1E16_g;
    playergroup auto4B79EFEC_g;
    playergroup auto12247ED8_g;
    playergroup auto6159EA35_g;
    playergroup autoFBC5769B_g;
    playergroup autoF780711E_g;
    int autoF780711E_var;

    // Variable Initialization
    lv_camera = CameraInfoDefault();
    lv_mAX_RECOMMENDED_ALLIED_PLAYERS = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_InitializeMutators, true);
    autoFD1992CB_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoFD1992CB_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "IsPlayerCommanderUpgrade", 1);
    }
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_8B843D5A"));
    libCOMI_gf_ApplyMissionTime();
    TriggerExecute(libARRA_gt_UT_Graph_Initialization, true, false);
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_F4C70C8D"));
    libCOMI_gf_PlayersandAllienceSettings();
    libCOMI_gf_InitEnemies();
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_65842B6C"));
    auto6B1E1E16_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6B1E1E16_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "IsPlayerCommanderUpgrade", 1);
        libCOMI_gf_CC_ApplyTechNew(lv_indexPlayer, libCOMI_gv_cC_PlayerLevel[lv_indexPlayer][libCOMI_gf_CC_CommanderInternalIndex(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer))], libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer), libCOMI_gf_CC_PlayerActivePrestigeInstance(lv_indexPlayer));
    }
    libCOMI_gf_CC_SharedUpgradesEnable();
    libCOMI_gf_CM_DetectionUpgradesApply();
    libCOMI_gf_SetPlayerColors();
    TriggerEnable(libCOMI_gt_CC_PrestigeUpgradeSupplement, true);
    libCOMI_gf_CC_ScoreInit();
    libCOMI_gv_cM_CombatTimer = TimerCreate();
    TimerStart(libCOMI_gv_cM_CombatTimer, 86400.0, false, c_timeGame);
    UnitEventSetNullVariableInvalid(true);
    TriggerSendEvent(libCOMI_gv_mISSIONPREPARED);
    lv_playerInTeam = 0;
    auto4B79EFEC_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4B79EFEC_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerInTeam += 1;
        PlayerSetRace(lv_itPlayer, libCOMI_gf_GetCommanderRace(libCOMI_gf_ActiveCommanderForPlayer(lv_itPlayer)));
        lv_point = libCOMI_gf_GetAllyStartPosition(lv_playerInTeam, 1, PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()));
        libARRA_gv_playerStartPosition[lv_itPlayer] = lv_point;
        libCOMI_gf_CreateStartingUnitsForPlayer(lv_itPlayer, lv_point);
        CameraInfoSetTarget(lv_camera, lv_point);
        CameraApplyInfo(lv_itPlayer, lv_camera, 0.0, -1, 0.0, true);
        lv_expansionIndex = 1;
        lv_point = libCOMI_gf_GetAllyExpansionPosition(lv_playerInTeam, lv_expansionIndex, PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()));
        while ((lv_point != null) && (lv_playerInTeam <= lv_mAX_RECOMMENDED_ALLIED_PLAYERS)) {
            libCOMI_gf_CreateExpansionUnitsForPlayer(lv_playerInTeam, lv_point);
            lv_expansionIndex += 1;
            lv_point = libCOMI_gf_GetAllyExpansionPosition(lv_playerInTeam, lv_expansionIndex, PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()));
        }
    }
    lv_playerInTeam = 0;
    auto12247ED8_g = libCOMI_gv_vU_EnemyAI;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto12247ED8_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerInTeam += 1;
        lv_point = PlayerStartLocation(PlayerGroupPlayer(libCOMI_gv_vU_EnemyAI, lv_playerInTeam));
        libARRA_gv_playerStartPosition[lv_itPlayer] = lv_point;
    }
    lv_playerInTeam = 0;
    auto6159EA35_g = libCOMI_gv_vU_EnemyPlayers;
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto6159EA35_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        lv_playerInTeam += 1;
        lv_point = PlayerStartLocation(PlayerGroupPlayer(libCOMI_gv_vU_SlotsEnemy, lv_playerInTeam));
        libARRA_gv_playerStartPosition[lv_itPlayer] = lv_point;
        lv_camera = CameraInfoDefault();
        CameraInfoSetTarget(lv_camera, lv_point);
        CameraApplyInfo(lv_player, lv_camera, 0.0, -1, 0.0, true);
    }
    autoFBC5769B_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoFBC5769B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        MeleeSetOption(lv_indexPlayer, c_meleeOptionPoints, true);
        PlayerSetState(lv_indexPlayer, c_playerStateXPGain, true);
        UserDataSetInt("Commanders", libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer), "InThisMission", 1, 1);
        libCOMI_gf_CM_DifficultyApplySettings(lv_indexPlayer);
    }
    libCOMI_gf_CM_CommanderVOInit();
    libCOMI_gf_PreparingMapProgress(StringExternal("Param/Value/lib_COMI_D1ACB22F"));
    TriggerSendEvent(libCOMI_gv_mISSIONINITIALIZED);
    libCOMI_gf_CreateHeroes();
    autoF780711E_g = libCOMI_gf_GetHumanPlayers();
    autoF780711E_var = -1;
    while (true) {
        autoF780711E_var = PlayerGroupNextPlayer(autoF780711E_g, autoF780711E_var);
        if (autoF780711E_var < 0) { break; }
        libCOMI_gf_TopBarNotificationsInitialization(autoF780711E_var);
        if ((UnitGroupCount(libCOMI_gv_yY_GPCasterGroup[autoF780711E_var], c_unitCountAlive) > 0)) {
            libNtve_gf_SetDialogItemUnitGroup(libCOMI_gv_cU_GPCmdPanel[autoF780711E_var], libCOMI_gv_yY_GPCasterGroup[autoF780711E_var], PlayerGroupSingle(autoF780711E_var));
        }

    }
    TriggerExecute(libCOMI_gt_CheckStartingSupplies, true, false);
    TriggerExecute(libCOMI_gt_CheckStartingResources, true, false);
    TriggerExecute(libCOMI_gt_PerformanceSleepArea, true, false);
    libCOMI_gf_InitAmon();
    TriggerEnable(libCOMI_gt_DefeatBaseDead, true);
    Wait(0.625, c_timeGame);
    TriggerSendEvent(libCOMI_gv_mISSIONREADY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionInitialize_Init () {
    libCOMI_gt_CM_CampaignMissionInitialize = TriggerCreate("libCOMI_gt_CM_CampaignMissionInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Mission Start
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionInitialize2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_gameSoundtrack;

    // Automatic Variable Declarations
    playergroup auto0957704D_g;
    playergroup auto0EDF980D_g;

    // Variable Initialization
    lv_gameSoundtrack = UserDataGetGameLink("MissionSettings", "CurrentMission", "GameSoundtrack", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    libCOMI_gf_CU_PrestigeBriefInit();
    libARRA_gf_EnableDisablePingPanel(true, libCOMI_gv_all);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    libCOMI_gv_cU_MissionUIContainer = DialogControlLastCreated();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ObjectivePanel");
    libCOMI_gv_cU_ObjectivePanel = DialogControlLastCreated();
    libCOMI_gf_CU_UpdateObjectivePanel();
    libCOMI_gf_CU_HelpInit();
    libARRA_gf_CU_MinimapAllyViewInit();
    libCOMI_gf_CM_ChatBarSetMode(libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal, PlayerGroupAll());
    Wait(0.0, c_timeGame);
    libCOMI_gv_gameHasBegun = true;
    TriggerExecute(libCOMI_gt_CM_CampaignMissionIntroZoomIn, true, true);
    Wait(0.0, c_timeGame);
    TriggerExecute(libCOMI_gt_InitialExploration, true, false);
    libCOMI_gf_Unpause();
    auto0957704D_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0957704D_g, lv_player);
        if (lv_player < 0) { break; }
        UIAlertPoint("Trigger", lv_player, StringExternal("Param/Value/lib_COMI_17C147D7"), null, libARRA_gf_GetPlayerStartPosition(lv_player));
        libCOMI_gf_CU_GPShowHide(true, lv_player, c_transitionDurationDefault);
    }
    auto0EDF980D_g = libCOMI_gv_vU_EnemyPlayers;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto0EDF980D_g, lv_player);
        if (lv_player < 0) { break; }
        UIAlertPoint("Trigger", lv_player, StringExternal("Param/Value/lib_COMI_4CE3C5EB"), null, libARRA_gf_GetPlayerStartPosition(lv_player));
        libCOMI_gf_CU_GPShowHide(true, lv_player, c_transitionDurationDefault);
    }
    TriggerExecute(libCOMI_gv_cM_CampaignMissionStartTrigger, true, false);
    TriggerSendEvent(libCOMI_gv_COOP_MISSION_STARTED_EVENT);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionInitialize2_Init () {
    libCOMI_gt_CM_CampaignMissionInitialize2 = TriggerCreate("libCOMI_gt_CM_CampaignMissionInitialize2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Starting Resources
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CheckStartingResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    playergroup autoD580D410_g;
    int autoD580D410_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoD580D410_g = libCOMI_gf_GetHumanPlayers();
    autoD580D410_var = -1;
    while (true) {
        autoD580D410_var = PlayerGroupNextPlayer(autoD580D410_g, autoD580D410_var);
        if (autoD580D410_var < 0) { break; }
        PlayerModifyPropertyInt(autoD580D410_var, c_playerPropMinerals, c_playerPropOperSetTo, 50);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CheckStartingResources_Init () {
    libCOMI_gt_CheckStartingResources = TriggerCreate("libCOMI_gt_CheckStartingResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Starting Supplies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CheckStartingSupplies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_count;

    // Automatic Variable Declarations
    playergroup auto1E3B2A2E_g;
    int auto1E3B2A2E_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1E3B2A2E_g = PlayerGroupAll();
    auto1E3B2A2E_var = -1;
    while (true) {
        auto1E3B2A2E_var = PlayerGroupNextPlayer(auto1E3B2A2E_g, auto1E3B2A2E_var);
        if (auto1E3B2A2E_var < 0) { break; }
        lv_count = TechTreeUpgradeCount(auto1E3B2A2E_var, "SuppliesMax", c_techCountCompleteOnly);
        if ((lv_count > 0)) {
            PlayerModifyPropertyInt(auto1E3B2A2E_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, (lv_count * 5));
        }
        else {
            PlayerModifyPropertyInt(auto1E3B2A2E_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 200);
        }
        lv_count = TechTreeUpgradeCount(auto1E3B2A2E_var, "SuppliesMade", c_techCountCompleteOnly);
        if ((lv_count > 0)) {
            PlayerModifyPropertyInt(auto1E3B2A2E_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, (lv_count * 5));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CheckStartingSupplies_Init () {
    libCOMI_gt_CheckStartingSupplies = TriggerCreate("libCOMI_gt_CheckStartingSupplies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuppliesMaxUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SuppliesMaxUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SuppliesMax"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(lv_player, c_playerPropSuppliesLimit, c_playerPropOperSetTo, TechTreeUpgradeCount(lv_player, "SuppliesMax", c_techCountCompleteOnly));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SuppliesMaxUpgrades_Init () {
    libCOMI_gt_SuppliesMaxUpgrades = TriggerCreate("libCOMI_gt_SuppliesMaxUpgrades_Func");
    TriggerEnable(libCOMI_gt_SuppliesMaxUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_SuppliesMaxUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SuppliesMadeUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SuppliesMadeUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "SuppliesMade"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(lv_player, c_playerPropSuppliesMade, c_playerPropOperSetTo, TechTreeUpgradeCount(lv_player, "SuppliesMade", c_techCountCompleteOnly));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SuppliesMadeUpgrades_Init () {
    libCOMI_gt_SuppliesMadeUpgrades = TriggerCreate("libCOMI_gt_SuppliesMadeUpgrades_Func");
    TriggerEnable(libCOMI_gt_SuppliesMadeUpgrades, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_SuppliesMadeUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_SharedUpgradesRecheck
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CC_SharedUpgradesRecheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CC_SharedUpgradesEnable();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CC_SharedUpgradesRecheck_Init () {
    libCOMI_gt_CC_SharedUpgradesRecheck = TriggerCreate("libCOMI_gt_CC_SharedUpgradesRecheck_Func");
    TriggerAddEventUnitResearchProgress(libCOMI_gt_CC_SharedUpgradesRecheck, null, c_unitProgressStageComplete);
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CC_SharedUpgradesRecheck, c_playerAny, "RefreshSharedUpgrades");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_PrestigeUpgradeSupplement
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CC_PrestigeUpgradeSupplement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_prestige;
    string lv_supplemental;
    int lv_index;

    // Automatic Variable Declarations
    int auto30C434F5_ae;
    const int auto30C434F5_ai = 1;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_prestige = libCOMI_gf_CC_PlayerActivePrestigeInstance(lv_player);
    if ((lv_prestige == null)) {
        return true;
    }

    auto30C434F5_ae = UserDataFieldValueCount("Prestiges", "ZZ_UpgradeSupplements");
    lv_index = 1;
    for ( ; ( (auto30C434F5_ai >= 0 && lv_index <= auto30C434F5_ae) || (auto30C434F5_ai < 0 && lv_index >= auto30C434F5_ae) ) ; lv_index += auto30C434F5_ai ) {
        lv_supplemental = UserDataGetUserInstance("Prestiges", lv_prestige, "ZZ_UpgradeSupplements", lv_index);
        if ((UserDataGetGameLink("PlayerPrestigeUpgradeSupplements", lv_supplemental, "Upgrade", 1) == EventUpgradeName())) {
            libCOMI_gf_CC_ApplyUpgradeSupplemental(lv_player, lv_supplemental);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CC_PrestigeUpgradeSupplement_Init () {
    libCOMI_gt_CC_PrestigeUpgradeSupplement = TriggerCreate("libCOMI_gt_CC_PrestigeUpgradeSupplement_Func");
    TriggerEnable(libCOMI_gt_CC_PrestigeUpgradeSupplement, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_CC_PrestigeUpgradeSupplement, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: SkinUpgrades
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SkinUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_upgrade;
    int lv_delta;
    string lv_inInstance;
    string lv_unitType;
    string lv_factionSkin;
    string lv_skin;

    // Automatic Variable Declarations
    int auto5C53C02A_ae;
    int auto5C53C02A_var;
    int auto7D243EEC_ae;
    int auto7D243EEC_var;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_upgrade = EventUpgradeName();
    lv_delta = EventUpgradeLevelDelta();

    // Conditions
    if (testConds) {
        if (!((lv_delta > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5C53C02A_ae = UserDataInstanceCount("Skins");
    auto5C53C02A_var = 1;
    for ( ; auto5C53C02A_var <= auto5C53C02A_ae; auto5C53C02A_var += 1 ) {
        if ((UserDataGetGameLink("Skins", UserDataInstance("Skins", auto5C53C02A_var), "Upgrade", 1) == EventUpgradeName())) {
            lv_factionSkin = UserDataInstance("Skins", auto5C53C02A_var);
            break;
        }

    }
    if ((lv_factionSkin == null)) {
        return true;
    }

    auto7D243EEC_ae = UserDataFieldValueCount("Skins", "Supplement");
    auto7D243EEC_var = 1;
    for ( ; auto7D243EEC_var <= auto7D243EEC_ae; auto7D243EEC_var += 1 ) {
        lv_skin = UserDataGetGameLink("Skins", lv_factionSkin, "Supplement", auto7D243EEC_var);
        if ((lv_skin != null)) {
            if ((lv_delta > 0)) {
                libNtve_gf_PlayerApplySkinReplacingExistingUnit(EventPlayer(), lv_skin, true);
            }
            else {
                libNtve_gf_PlayerApplySkinReplacingExistingUnit(EventPlayer(), lv_skin, false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SkinUpgrades_Init () {
    libCOMI_gt_SkinUpgrades = TriggerCreate("libCOMI_gt_SkinUpgrades_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_SkinUpgrades, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Autocasting
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_Autocasting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto3B14A1D2_ae;
    const int auto3B14A1D2_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUpgradeName() == "Autocasting"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3B14A1D2_ae = UserDataInstanceCount("X_AutocastedAbilities");
    lv_i = 1;
    for ( ; ( (auto3B14A1D2_ai >= 0 && lv_i <= auto3B14A1D2_ae) || (auto3B14A1D2_ai < 0 && lv_i >= auto3B14A1D2_ae) ) ; lv_i += auto3B14A1D2_ai ) {
        TechTreeAbilityAllow(EventPlayer(), UserDataGetAbilCmd("X_AutocastedAbilities", UserDataInstance("X_AutocastedAbilities", lv_i), "Ability", 1), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_Autocasting_Init () {
    libCOMI_gt_Autocasting = TriggerCreate("libCOMI_gt_Autocasting_Func");
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_Autocasting, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidIncome
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidIncome_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto1AF4A86A_g;
    int auto1AF4A86A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1AF4A86A_g = libCOMI_gv_vU_EnemyPlayers;
    auto1AF4A86A_var = -1;
    while (true) {
        auto1AF4A86A_var = PlayerGroupNextPlayer(auto1AF4A86A_g, auto1AF4A86A_var);
        if (auto1AF4A86A_var < 0) { break; }
        PlayerModifyPropertyInt(auto1AF4A86A_var, c_playerPropVespene, c_playerPropOperAdd, libCOMI_gv_voidIncomeVespene);
        PlayerModifyPropertyInt(auto1AF4A86A_var, c_playerPropMinerals, c_playerPropOperAdd, libCOMI_gv_voidIncomeMinerals);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidIncome_Init () {
    libCOMI_gt_VoidIncome = TriggerCreate("libCOMI_gt_VoidIncome_Func");
    TriggerEnable(libCOMI_gt_VoidIncome, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_VoidIncome, 2.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VoidIncomeIncrease
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidIncomeIncrease_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_voidIncomeMinerals += 2;
    libCOMI_gv_voidIncomeVespene += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidIncomeIncrease_Init () {
    libCOMI_gt_VoidIncomeIncrease = TriggerCreate("libCOMI_gt_VoidIncomeIncrease_Func");
    TriggerEnable(libCOMI_gt_VoidIncomeIncrease, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_VoidIncomeIncrease, 120.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Gameplay
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AmonGameplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    int lv_owner;
    int lv_player;

    // Automatic Variable Declarations
    playergroup autoD9A4FAEE_g;
    unitgroup auto224FDAE0_g;
    int auto224FDAE0_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(libCOMI_gf_GetEnemyHumanPlayers(), c_messageAreaChat, StringExternal("Param/Value/lib_COMI_17F93FCB"));
    autoD9A4FAEE_g = libCOMI_gv_vU_SlotsEnemy;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD9A4FAEE_g, lv_player);
        if (lv_player < 0) { break; }
        auto224FDAE0_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto224FDAE0_u = UnitGroupCount(auto224FDAE0_g, c_unitCountAll);
        for (;; auto224FDAE0_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto224FDAE0_g, auto224FDAE0_u);
            if (lv_unit == null) { break; }
            lv_unitType = UnitGetType(lv_unit);
            if ((PlayerGroupCount(libCOMI_gf_GetEnemyHumanPlayers()) > 1) && (lv_player == PlayerGroupPlayer(libCOMI_gv_vU_SlotsEnemy, 2))) {
                lv_owner = PlayerGroupPlayer(libCOMI_gf_GetEnemyHumanPlayers(), 2);
            }
            else {
                lv_owner = PlayerGroupPlayer(libCOMI_gf_GetEnemyHumanPlayers(), 1);
            }
            if ((libCOMI_gf_IsUnitfromFactionCategory(libCOMI_ge_UnitCategory_StructureDefense, lv_unitType, libCOMI_gv_selectedEnemyFaction) == false) && ((libCOMI_gf_IsUnitfromFactionCategory(libCOMI_ge_UnitCategory_Worker, lv_unitType, libCOMI_gv_selectedEnemyFaction) == true) || (libCOMI_gf_IsUnitfromFactionCategory(libCOMI_ge_UnitCategory_StructureMain, lv_unitType, libCOMI_gv_selectedEnemyFaction) == true) || (libCOMI_gf_IsUnitfromFactionCategory(libCOMI_ge_UnitCategory_StructureRefinery, lv_unitType, libCOMI_gv_selectedEnemyFaction) == true) || (libCOMI_gf_IsUnitfromFactionCategory(libCOMI_ge_UnitCategory_StructureSupply, lv_unitType, libCOMI_gv_selectedEnemyFaction) == true))) {
                UnitSetOwner(lv_unit, lv_owner, true);
            }

        }
    }
    Wait(180.0, c_timeGame);
    TriggerExecute(libCOMI_gt_AmonChangeOwner, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AmonGameplay_Init () {
    libCOMI_gt_AmonGameplay = TriggerCreate("libCOMI_gt_AmonGameplay_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Amon Change Owner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AmonChangeOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_isDefensiveStructutre;
    unit lv_unit;
    int lv_owner;
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto5F5C3C82_g;
    unitgroup auto8D32E6C4_g;
    int auto8D32E6C4_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5F5C3C82_g = libCOMI_gv_vU_SlotsEnemy;
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5F5C3C82_g, lv_player);
        if (lv_player < 0) { break; }
        auto8D32E6C4_g = UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8D32E6C4_u = UnitGroupCount(auto8D32E6C4_g, c_unitCountAll);
        for (;; auto8D32E6C4_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto8D32E6C4_g, auto8D32E6C4_u);
            if (lv_unit == null) { break; }
            if (true) {
            }

            if ((PlayerGroupCount(libCOMI_gv_vU_SlotsEnemy) > 1) && (lv_player == PlayerGroupPlayer(libCOMI_gv_vU_SlotsEnemy, 2))) {
                lv_owner = PlayerGroupPlayer(libCOMI_gv_vU_EnemyPlayers, 2);
            }
            else {
                lv_owner = PlayerGroupPlayer(libCOMI_gv_vU_EnemyPlayers, 1);
            }
            if ((libCOMI_gf_IsUnitfromFactionCategory(libCOMI_ge_UnitCategory_StructureDefense, UnitGetType(lv_unit), libCOMI_gv_selectedEnemyFaction) == false)) {
                UnitSetOwner(lv_unit, lv_owner, true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AmonChangeOwner_Init () {
    libCOMI_gt_AmonChangeOwner = TriggerCreate("libCOMI_gt_AmonChangeOwner_Func");
    TriggerAddEventChatMessage(libCOMI_gt_AmonChangeOwner, c_playerAny, "-amon power", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: set observer
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_setobserver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto5518A09E_g;
    int auto5518A09E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(libCOMI_gv_observerGroup, c_unitColorStyleNormal);
    auto5518A09E_g = PlayerGroupActive();
    auto5518A09E_var = -1;
    while (true) {
        auto5518A09E_var = PlayerGroupNextPlayer(auto5518A09E_g, auto5518A09E_var);
        if (auto5518A09E_var < 0) { break; }
        libNtve_gf_SetAllianceOneWay(libCOMI_gv_observer, auto5518A09E_var, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdDefeat, libCOMI_gv_observer, true);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdPassive, libCOMI_gv_observer, true);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdControl, libCOMI_gv_observer, true);
        PlayerSetAlliance(auto5518A09E_var, c_allianceIdVision, libCOMI_gv_observer, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_setobserver_Init () {
    libCOMI_gt_setobserver = TriggerCreate("libCOMI_gt_setobserver_Func");
    TriggerAddEventMapInit(libCOMI_gt_setobserver);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replace Doodads
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ReplaceDoodads_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    region lv_doodadsRegion;
    string lv_personality;
    string lv_faction;
    string lv_factionDoodadsRace;
    string lv_factionObjectsRace;

    // Automatic Variable Declarations
    playergroup autoD0252510_g;

    // Variable Initialization
    lv_doodadsRegion = RegionFromName("Doodads Replacement Area");
    lv_personality = libCOMI_gf_GetCoopAIPersonality(-1);
    lv_faction = UserDataGetUserInstance("Compositions", lv_personality, "Faction", 1);
    lv_factionDoodadsRace = UserDataGetGameLink("Factions", lv_faction, "Doodads", 1);
    lv_factionObjectsRace = UserDataGetGameLink("Factions", lv_faction, "Objects", 1);

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_DoodadsReplacement(lv_factionDoodadsRace, lv_factionObjectsRace, lv_doodadsRegion);
    autoD0252510_g = libCOMI_gf_GetEnemyPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoD0252510_g, lv_player);
        if (lv_player < 0) { break; }
        lv_doodadsRegion = RegionFromName(("Doodads Replacement Area " + IntToString(lv_player)));
        lv_personality = libCOMI_gf_GetCoopAIPersonality(lv_player);
        lv_faction = UserDataGetUserInstance("Compositions", lv_personality, "Faction", 1);
        lv_factionDoodadsRace = UserDataGetGameLink("Factions", lv_faction, "Doodads", 1);
        lv_factionObjectsRace = UserDataGetGameLink("Factions", lv_faction, "Objects", 1);
        libCOMI_gf_DoodadsReplacement(lv_factionDoodadsRace, lv_factionObjectsRace, lv_doodadsRegion);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ReplaceDoodads_Init () {
    libCOMI_gt_ReplaceDoodads = TriggerCreate("libCOMI_gt_ReplaceDoodads_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Fast Buff Hack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AttackFastBuffHack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitAbilityExists(lv_unit, "BroodLordHangar") == true)) {
        libCOMI_gf_SetUnitBuffMultiplier(lv_unit, (1.0 / UnitWeaponSpeedMultiplier(lv_unit, 1)), "TriggerQueueableRate", 1.01, libCOMI_ge_UnitBuffMultiplierMethod_Exponential);
    }

    UnitCreateEffectUnit(lv_unit, "TriggerInheritRateIterateMagazine", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AttackFastBuffHack_Init () {
    libCOMI_gt_AttackFastBuffHack = TriggerCreate("libCOMI_gt_AttackFastBuffHack_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_AttackFastBuffHack, null, c_unitBehaviorFlagFast, c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit New
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DmgandAttackSpeedInheritNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventUnitCreatedUnit();
    lv_parent = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DmgandAttackSpeedInheritNew_Init () {
    libCOMI_gt_DmgandAttackSpeedInheritNew = TriggerCreate("libCOMI_gt_DmgandAttackSpeedInheritNew_Func");
    TriggerAddEventUnitCreated(libCOMI_gt_DmgandAttackSpeedInheritNew, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dmg and Attack Speed Inherit Existing
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DmgandAttackSpeedInheritExisting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_child;
    unit lv_parent;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_child = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_parent = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_child, "TriggerInheritsParentBuffs") == true))) {
            return false;
        }

        if (!((UnitIsValid(lv_parent) == true))) {
            return false;
        }

        if (!((lv_child != lv_parent))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild(lv_parent, lv_child);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DmgandAttackSpeedInheritExisting_Init () {
    libCOMI_gt_DmgandAttackSpeedInheritExisting = TriggerCreate("libCOMI_gt_DmgandAttackSpeedInheritExisting_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_DmgandAttackSpeedInheritExisting, c_playerAny, "TriggerInheritRateDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CargoDeath
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CargoDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cargoUnit;
    unit lv_transportUnit;
    point lv_landingPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cargoUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_transportUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(lv_cargoUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(lv_cargoUnit, false);
    lv_landingPoint = UnitTypePlacementTestsFromPoint(UnitGetType(lv_cargoUnit), EventPlayer(), UnitGetPosition(lv_transportUnit), 3.0, c_placementTestCliffMask);
    if (((lv_landingPoint == null) || (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), EventPlayer()) != true))) {
        UnitSetPropertyFixed(lv_cargoUnit, c_unitPropShields, 0.0);
        UnitCreateEffectUnit(lv_cargoUnit, libCOMI_gv_cM_CargoDeathKillEffect, lv_cargoUnit);
    }
    else {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
        UnitSetPosition(lv_transportUnit, lv_landingPoint, false);
    }
    if ((UnitIsValid(lv_cargoUnit) == true)) {
        libNtve_gf_ShowHideUnit(lv_cargoUnit, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CargoDeath_Init () {
    libCOMI_gt_CM_CargoDeath = TriggerCreate("libCOMI_gt_CM_CargoDeath_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_CargoDeath, c_playerAny, libCOMI_gv_cM_CargoDeathNotifyEffect);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behaviors
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UnitBehaviors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "AllUnitBehaviorController") == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false)) {
        UnitBehaviorAdd(EventUnit(), "AllUnitBehaviorController", EventUnit(), 1);
    }

    if ((UnitHasBehavior2(EventUnit(), "ChronoBoostTarget") == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true) && ((libNtve_gf_UnitAbilityGetByType(EventUnit(), c_classIdCAbilWarpTrain, 1) != null) || (libNtve_gf_UnitAbilityGetByType(EventUnit(), c_classIdCAbilTrain, 1) != null) || (libNtve_gf_UnitAbilityGetByType(EventUnit(), c_classIdCAbilResearch, 1) != null))) {
        UnitBehaviorAdd(EventUnit(), "ChronoBoostTarget", EventUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UnitBehaviors_Init () {
    libCOMI_gt_UnitBehaviors = TriggerCreate("libCOMI_gt_UnitBehaviors_Func");
    TriggerAddEventUnitRegion(libCOMI_gt_UnitBehaviors, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Permanently Changes Owner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BehaviorPermanentlyChangesOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mindcontrolunit;
    string lv_mindcontrolbehavior;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mindcontrolunit = EventUnit();
    lv_mindcontrolbehavior = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(lv_mindcontrolunit, UnitBehaviorEffectPlayer(lv_mindcontrolunit, lv_mindcontrolbehavior, c_effectPlayerCaster, 0), true);
    if ((UnitHasBehavior2(lv_mindcontrolunit, "OnDeathControllerDeathPrevent") == false)) {
        UnitBehaviorAdd(lv_mindcontrolunit, "AllUnitBehaviorController", lv_mindcontrolunit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BehaviorPermanentlyChangesOwner_Init () {
    libCOMI_gt_BehaviorPermanentlyChangesOwner = TriggerCreate("libCOMI_gt_BehaviorPermanentlyChangesOwner_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libCOMI_gt_BehaviorPermanentlyChangesOwner, null, c_unitBehaviorFlagUser8, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Prevent Grant Kill Credit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DeathPreventGrantKillCredit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creditedunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_creditedunit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_creditedunit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(lv_creditedunit, c_unitPropKills, (UnitGetPropertyFixed(lv_creditedunit, c_unitPropKills, c_unitPropCurrent) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DeathPreventGrantKillCredit_Init () {
    libCOMI_gt_DeathPreventGrantKillCredit = TriggerCreate("libCOMI_gt_DeathPreventGrantKillCredit_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_DeathPreventGrantKillCredit, c_playerAny, "GrantKillCreditDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroPanelUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroPanelUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto1344F8FC_g;
    const int auto02E55A1D_ae = libCOMI_gv_oBSOLETE_CUC_HeroMaxCount;
    int auto02E55A1D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1344F8FC_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto1344F8FC_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto02E55A1D_var = 1;
        for ( ; auto02E55A1D_var <= auto02E55A1D_ae; auto02E55A1D_var += 1 ) {
            if ((libCOMI_gv_cU_HeroExists[lv_indexPlayer][auto02E55A1D_var] == true)) {
                libCOMI_gf_CU_UpdateHeroPanel(auto02E55A1D_var, lv_indexPlayer);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroPanelUpdate_Init () {
    libCOMI_gt_CU_HeroPanelUpdate = TriggerCreate("libCOMI_gt_CU_HeroPanelUpdate_Func");
    TriggerEnable(libCOMI_gt_CU_HeroPanelUpdate, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CU_HeroPanelUpdate, libCOMI_gv_cUC_HeroUpdateFrequency, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitDamaged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    playergroup autoF27784D0_g;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoF27784D0_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoF27784D0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((EventUnit() == libCOMI_gv_cU_HeroUnit[1][lv_indexPlayer])) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if ((EventUnit() == libCOMI_gv_cU_HeroUnit[2][lv_indexPlayer])) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    DialogControlSetVisible(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, true);
    if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.0)) {
    }
    else {
        DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
    }
    if ((EventUnitDamageAmount() < 5.0)) {
        if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.25)) {
            libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.26;
            DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.25, 0.0);
        }

    }
    else {
        if ((EventUnitDamageAmount() >= 5.0) && (EventUnitDamageAmount() <= 15.0)) {
            if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 0.5)) {
                libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 0.51;
                DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 0.5, 0.0);
            }

        }
        else {
            if ((libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] <= 1.0)) {
                libCOMI_gv_cU_VoidHeroUIDamageTimer[lv_index][lv_player] = 1.01;
                DialogControlFadeTransparency(libCOMI_gv_cU_HeroDialogDamageTakenImage[lv_index], lv_heroGroup, 1.0, 0.0);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroUnitDamaged_Init () {
    libCOMI_gt_CU_HeroUnitDamaged = TriggerCreate("libCOMI_gt_CU_HeroUnitDamaged_Func");
    TriggerEnable(libCOMI_gt_CU_HeroUnitDamaged, false);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libCOMI_gt_CU_HeroUnitDamaged, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroUnitVitalChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroUnitVitalChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexPlayer;
    int lv_player;
    playergroup lv_heroGroup;
    int lv_damageBar;
    int lv_damageBarWidth;
    int lv_damageBarHeight;

    // Automatic Variable Declarations
    playergroup auto39C38B3F_g;
    unit auto61B03EF3_val;
    int autoEDF6E590_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();
    lv_damageBar = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((EventUnitPropertyChangeFixed() < 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto39C38B3F_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto39C38B3F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto61B03EF3_val = EventUnit();
        if (auto61B03EF3_val == libCOMI_gv_cU_HeroUnit[1][lv_indexPlayer]) {
            lv_index = 1;
            lv_player = lv_indexPlayer;
            break;
        }
        else if (auto61B03EF3_val == libCOMI_gv_cU_HeroUnit[2][lv_indexPlayer]) {
            lv_index = 2;
            lv_player = lv_indexPlayer;
            break;
        }
        else {
        }
    }
    if ((lv_index == 0)) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(lv_player);
    autoEDF6E590_val = EventUnitProperty();
    if (autoEDF6E590_val == c_unitPropEnergy) {
        DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroEnergyBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOMI_gv_cU_HeroDialogEnergyBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergy, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropEnergyMax, c_unitPropCurrent)) * IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libCOMI_gv_cU_HeroDialogEnergyBarImage[lv_index], lv_player);
    }
    else if (autoEDF6E590_val == c_unitPropLife) {
        DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOMI_gv_cU_HeroDialogHealthBarImage[lv_index], c_anchorLeft, 0, 0);
        lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLife, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropLifeMax, c_unitPropCurrent)) * IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH)));
        lv_damageBarHeight = DialogControlGetHeight(libCOMI_gv_cU_HeroDialogHealthBarImage[lv_index], lv_player);
    }
    else if (autoEDF6E590_val == c_unitPropShields) {
        DialogControlCreateInPanelFromTemplate(libCOMI_gv_cU_HeroPanel[lv_index], c_triggerControlTypeImage, "HotS_GameUnitFrame/HeroHealthBarDamageTemplate/DamageBar");
        DialogControlSetPositionRelative(DialogControlLastCreated(), lv_heroGroup, c_anchorLeft, libCOMI_gv_cU_HeroDialogShieldBarImage[lv_index], c_anchorLeft, 0, 0);
        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            lv_damageBarWidth = FixedToInt((((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShields, c_unitPropCurrent) - EventUnitPropertyChangeFixed()) / UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][lv_player], c_unitPropShieldsMax, c_unitPropCurrent)) * IntToFixed(libCOMI_gv_cUC_HEROUIBARWIDTH)));
        }
        else {
            lv_damageBarWidth = 0;
        }
        lv_damageBarHeight = DialogControlGetHeight(libCOMI_gv_cU_HeroDialogShieldBarImage[lv_index], lv_player);
    }
    else {
    }
    lv_damageBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemRenderPriority(lv_damageBar, 506, lv_heroGroup);
    DialogControlSetVisible(lv_damageBar, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_damageBar, lv_heroGroup, true);
    DialogControlSetSize(lv_damageBar, PlayerGroupAll(), MaxI(MinI(lv_damageBarWidth, 244), 1), lv_damageBarHeight);
    Wait(1.0, c_timeReal);
    DialogControlFadeTransparency(lv_damageBar, lv_heroGroup, 1.0, 100.0);
    Wait(1.1, c_timeReal);
    DialogControlDestroy(lv_damageBar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroUnitVitalChange_Init () {
    libCOMI_gt_CU_HeroUnitVitalChange = TriggerCreate("libCOMI_gt_CU_HeroUnitVitalChange_Func");
    TriggerEnable(libCOMI_gt_CU_HeroUnitVitalChange, false);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][1]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitPropEnergy);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[1][2]"), c_unitPropShields);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HeroUnitVitalChange, UnitRefFromVariable("libCOMI_gv_cU_HeroUnit[2][2]"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HeroMouseHoverText
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HeroMouseHoverText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    playergroup lv_heroGroup;

    // Automatic Variable Declarations
    int auto1970325F_val;

    // Variable Initialization
    lv_heroGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGroup = PlayerGroupSingle(EventPlayer());
    if (((EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[1]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[1]))) {
        lv_index = 1;
    }
    else {
        if (((EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImage[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogBorderImageNoEnergy[2]) || (EventDialogControl() == libCOMI_gv_cU_HeroDialogButton[2]))) {
            lv_index = 2;
        }
        else {
            return true;
        }
    }
    auto1970325F_val = EventDialogControlEventType();
    if (auto1970325F_val == c_triggerControlEventTypeMouseEnter) {
        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropLifeMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropEnergyMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, true);
        }

        if ((UnitGetPropertyFixed(libCOMI_gv_cU_HeroUnit[lv_index][EventPlayer()], c_unitPropShieldsMax, c_unitPropCurrent) > 0)) {
            DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, true);
        }

    }
    else if (auto1970325F_val == c_triggerControlEventTypeMouseExit) {
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogHealthLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogEnergyLabel[lv_index], lv_heroGroup, false);
        DialogControlSetVisible(libCOMI_gv_cU_HeroDialogShieldLabel[lv_index], lv_heroGroup, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HeroMouseHoverText_Init () {
    libCOMI_gt_CU_HeroMouseHoverText = TriggerCreate("libCOMI_gt_CU_HeroMouseHoverText_Func");
    TriggerEnable(libCOMI_gt_CU_HeroMouseHoverText, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libCOMI_gt_CU_HeroMouseHoverText, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Died
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_HeroDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMI_gv_heroUnits, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_HeroHandleDeath(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_HeroDied_Init () {
    libCOMI_gt_HeroDied = TriggerCreate("libCOMI_gt_HeroDied_Func");
    TriggerAddEventUnitDied(libCOMI_gt_HeroDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Same Place Revive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SamePlaceRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;
    point lv_beaconPoint;
    unit lv_hero;
    fixed lv_facing;
    point lv_rally;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_beacon = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_beaconPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_facing = UnitGetFacing(lv_beacon);
    lv_rally = UnitRallyPointTargetPoint(lv_beacon, 1, 1);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    Wait(0.125, c_timeGame);
    UnitSetPosition(lv_hero, lv_beaconPoint, false);
    UnitSetFacing(lv_hero, lv_facing, 0.0);
    if ((lv_rally != null)) {
        UnitIssueOrder(lv_hero, OrderTargetingPoint(AbilityCommand("attack", 0), lv_rally), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SamePlaceRevive_Init () {
    libCOMI_gt_SamePlaceRevive = TriggerCreate("libCOMI_gt_SamePlaceRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_SamePlaceRevive, c_playerAny, "PortToMyCenter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_InstantRevive
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_InstantRevive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_LOGString("!!!");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_InstantRevive_Init () {
    libCOMI_gt_CM_InstantRevive = TriggerCreate("libCOMI_gt_CM_InstantRevive_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_CM_InstantRevive, c_playerAny, "HeroInstantRevive");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPBirthFinished
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_GPBirthFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_updatePlayers;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup auto3C7AD604_g;
    const int auto63439A9B_ae = 4;
    const int auto63439A9B_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto3C7AD604_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3C7AD604_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (auto63439A9B_ai >= 0 && lv_buttonIndex <= auto63439A9B_ae) || (auto63439A9B_ai < 0 && lv_buttonIndex >= auto63439A9B_ae) ) ; lv_buttonIndex += auto63439A9B_ai ) {
                if ((libCOMI_gv_cU_GPButtonHighlighted[lv_buttonIndex][lv_indexPlayer] == true) && (libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, true);
                }

            }
            if ((libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, true);
            }

            if ((libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, true);
            }

            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, true);
            libCOMI_gf_CU_GPCheckForEnergyHighlight(lv_indexPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_GPBirthFinished_Init () {
    libCOMI_gt_CU_GPBirthFinished = TriggerCreate("libCOMI_gt_CU_GPBirthFinished_Func");
    TriggerAddEventCutsceneBookmarkFired(libCOMI_gt_CU_GPBirthFinished, c_cutsceneNone, "2DBirth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPDeathRemove2D
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_GPDeathRemove2D_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    playergroup lv_updatePlayers;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    playergroup auto29B9C757_g;
    const int autoD5722FFF_ae = 4;
    const int autoD5722FFF_ai = 1;

    // Variable Initialization
    lv_updatePlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto29B9C757_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto29B9C757_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gv_cU_GPCutscene[lv_indexPlayer] != c_invalidDialogControlId) && (EventCutsceneId() == CutsceneGetTriggerControl(libCOMI_gv_cU_GPCutscene[lv_indexPlayer]))) {
            lv_updatePlayers = PlayerGroupSingle(lv_indexPlayer);
            lv_buttonIndex = 1;
            for ( ; ( (autoD5722FFF_ai >= 0 && lv_buttonIndex <= autoD5722FFF_ae) || (autoD5722FFF_ai < 0 && lv_buttonIndex >= autoD5722FFF_ae) ) ; lv_buttonIndex += autoD5722FFF_ai ) {
                if ((libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libCOMI_gv_cU_GPCmdButtonArrows[lv_buttonIndex][lv_indexPlayer], lv_updatePlayers, false);
                }

            }
            DialogControlSetVisible(libCOMI_gv_cU_GPCmdPanel[lv_indexPlayer], lv_updatePlayers, false);
            if ((libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyLabel[lv_indexPlayer], lv_updatePlayers, false);
            }

            if ((libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer] != c_invalidDialogControlId)) {
                DialogControlSetVisible(libCOMI_gv_cU_GPEnergyTooltip[lv_indexPlayer], lv_updatePlayers, false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_GPDeathRemove2D_Init () {
    libCOMI_gt_CU_GPDeathRemove2D = TriggerCreate("libCOMI_gt_CU_GPDeathRemove2D_Func");
    TriggerAddEventCutsceneBookmarkFired(libCOMI_gt_CU_GPDeathRemove2D, c_cutsceneNone, "2DDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_GPVitalChanges
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_GPVitalChanges_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == libCOMI_gv_yY_GPCasterUnit[1]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[2]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[3]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[4]) || (EventUnit() == libCOMI_gv_yY_GPCasterUnit[5])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_GPSoAUpdateVitals(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_GPVitalChanges_Init () {
    libCOMI_gt_CU_GPVitalChanges = TriggerCreate("libCOMI_gt_CU_GPVitalChanges_Func");
    TriggerEnable(libCOMI_gt_CU_GPVitalChanges, false);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_GPVitalChanges, null, c_unitPropEnergy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TopBar Notifications Enable/Disable
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_TopBarNotificationsEnableDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOMI_gt_AF_TopBarClicked) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_30742E10"));
        TriggerEnable(libCOMI_gt_AF_TopBarClicked, true);
        TriggerEnable(libCOMI_gt_AF_MouseEntersTopBar, true);
        TriggerEnable(libCOMI_gt_AF_MouseExitsTopBar, true);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_48CA3A24"));
        TriggerEnable(libCOMI_gt_AF_TopBarClicked, false);
        TriggerEnable(libCOMI_gt_AF_MouseEntersTopBar, false);
        TriggerEnable(libCOMI_gt_AF_MouseExitsTopBar, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_TopBarNotificationsEnableDisable_Init () {
    libCOMI_gt_TopBarNotificationsEnableDisable = TriggerCreate("libCOMI_gt_TopBarNotificationsEnableDisable_Func");
    TriggerAddEventChatMessage(libCOMI_gt_TopBarNotificationsEnableDisable, c_playerAny, "-topbar", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_TopBar Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_TopBarClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vButtonIndex;
    string lv_vCommander;
    string lv_vCaster;
    string lv_vUnitTypeCaster;
    string lv_vUnitTypeHero;
    string lv_vAbility;
    abilcmd lv_vAbilityCommand;
    int lv_vAbilityCooldown;
    fixed lv_vAbilityCost;
    fixed lv_vAbilityCharges;
    string lv_vAbilityCooldownLocation;
    string lv_vAbilityChargesLocation;
    string lv_vCooldownLink;
    text lv_vColor;
    text lv_vColorReady;
    soundlink lv_vSound;
    fixed lv_vCharges;
    int lv_vNotificationsActive;
    bool lv_vAbilityIsAvailable;
    fixed lv_vRemainingCooldown;
    unit lv_vUnitHero;
    unit lv_vUnitCaster;
    string lv_vButton;
    string lv_vButtonText;

    // Automatic Variable Declarations
    string autoC5694E41_val;

    // Variable Initialization
    lv_vPlayer = EventPlayer();
    lv_vButtonIndex = libCOMI_gf_GetClickedTopBarButtonIndex(c_invalidDialogControlId, lv_vPlayer);
    lv_vAbilityCooldownLocation = "";
    lv_vAbilityChargesLocation = "";
    lv_vCooldownLink = "";
    lv_vColor = StringExternal("Param/Value/lib_COMI_CF929640");
    lv_vColorReady = StringExternal("Param/Value/lib_COMI_8E6ACFC5");
    lv_vSound = SoundLink("UI_CampaignHintNotify", -1);
    lv_vButtonText = "";

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lv_vButtonIndex != -1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vCommander = libCOMI_gf_ActiveCommanderForPlayer(lv_vPlayer);
    lv_vCaster = libCOMI_gf_GetCasterDataForUnit(UnitGetType(libCOMI_gf_CM_PlayerGetGlobalCaster2(lv_vPlayer)));
    lv_vUnitTypeHero = UserDataGetUnit("Casters", lv_vCaster, "UnitHero", lv_vButtonIndex);
    lv_vUnitTypeCaster = UserDataGetUnit("Casters", lv_vCaster, "UnitCaster", lv_vButtonIndex);
    lv_vAbility = UserDataGetGameLink("Casters", lv_vCaster, "Ability", lv_vButtonIndex);
    lv_vNotificationsActive = UserDataGetInt("Casters", lv_vCaster, "Notifications", lv_vButtonIndex);
    if (((lv_vAbility == null) || (lv_vNotificationsActive == 0))) {
        return true;
    }
    lv_vAbilityCooldown = CatalogFieldValueGetFlagsAsInt(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_vPlayer);
    lv_vAbilityCharges = CatalogFieldValueGetFlagsAsInt(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Charge.CountMax", lv_vPlayer);
    lv_vAbilityCost = CatalogFieldValueGetFlagsAsInt(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Vital[" + IntToString(c_unitVitalEnergy) + "]", lv_vPlayer);
    lv_vAbilityCooldownLocation = CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Cooldown.Location", lv_vPlayer);
    lv_vAbilityChargesLocation = CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbility, "Cost[" + IntToString(0) + "].Charge.Location", lv_vPlayer);
    lv_vAbilityCommand = libARRA_gf_GetCardLayoutAbilityCommandForUnit(lv_vUnitCaster, lv_vButtonIndex, 0, 0);
    lv_vButton = libARRA_gf_GetCardLayoutButtonForUnit(lv_vUnitCaster, lv_vButtonIndex, 0, 0);
    lv_vButtonText = CatalogFieldValueGet(c_gameCatalogButton, lv_vButton, "Name", lv_vPlayer);
    if ((lv_vAbilityCooldownLocation == "Unit") && (UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == false) && (UnitAbilityExists(lv_vUnitHero, lv_vAbility) == true)) {
        if ((UnitAbilityCheck(lv_vUnitHero, lv_vAbility, true) == true)) {
            lv_vAbilityIsAvailable = true;
        }
    }
    else {
        if ((UnitAbilityCheck(lv_vUnitCaster, lv_vAbility, true) == true)) {
            lv_vAbilityIsAvailable = true;
        }
    }
    if ((lv_vUnitTypeHero != null)) {
        lv_vUnitHero = libCOMI_gf_GetHeroUnitBad(lv_vPlayer, lv_vUnitTypeHero);
    }
    if ((lv_vUnitTypeCaster != null)) {
        lv_vUnitCaster = libCOMI_gf_CM_PlayerGetGlobalCaster2(lv_vPlayer);
    }
    if (((lv_vButton == null) || ((lv_vAbilityCooldownLocation == "Unit") && (UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == false) && (UnitAbilityExists(lv_vUnitHero, lv_vAbility) == true) && (UnitGroupUnit(UnitSubgroupSelected(lv_vPlayer), 1) != lv_vUnitHero)))) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoC5694E41_val = lv_vAbilityCooldownLocation;
    if (autoC5694E41_val == "Player") {
        if ((lv_vAbilityCharges > 0.0)) {
            lv_vRemainingCooldown = PlayerGetChargeRegen(lv_vPlayer, lv_vCooldownLink);
        }
        else {
            lv_vRemainingCooldown = PlayerGetCooldown(lv_vPlayer, lv_vCooldownLink);
        }
    }
    else if (autoC5694E41_val == "Unit") {
        if ((UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == true)) {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitGetChargeRegen(lv_vUnitCaster, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitGetCooldown(lv_vUnitCaster, lv_vCooldownLink);
            }
        }
        else {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitGetChargeRegen(lv_vUnitHero, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitGetCooldown(lv_vUnitHero, lv_vCooldownLink);
            }
        }
    }
    else if (autoC5694E41_val == "Ability") {
        if ((UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == true)) {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitAbilityGetChargeRegen(lv_vUnitCaster, lv_vAbility, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitAbilityGetCooldown(lv_vUnitCaster, lv_vAbility, lv_vCooldownLink);
            }
        }
        else {
            if ((lv_vAbilityCharges > 0.0)) {
                lv_vRemainingCooldown = UnitAbilityGetChargeRegen(lv_vUnitHero, lv_vAbility, lv_vCooldownLink);
            }
            else {
                lv_vRemainingCooldown = UnitAbilityGetCooldown(lv_vUnitHero, lv_vAbility, lv_vCooldownLink);
            }
        }
    }
    else {
    }
    if ((lv_vAbilityCharges > 0.0)) {
        if ((UnitAbilityExists(lv_vUnitCaster, lv_vAbility) == true)) {
            lv_vCharges = UnitAbilityChargeInfo(lv_vUnitCaster, lv_vAbilityCommand, c_unitAbilChargeCountLeft);
        }
        else {
            lv_vCharges = UnitAbilityChargeInfo(lv_vUnitHero, lv_vAbilityCommand, c_unitAbilChargeCountLeft);
        }
    }

    if ((lv_vAbilityIsAvailable == false)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_AAA31BFF", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMI_AAA31BFF", "B", StringExternal(lv_vButtonText));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_AAA31BFF"));
    }
    else if ((lv_vCharges > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "B", StringExternal(lv_vButtonText));
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMI_DFE941DE", "A", FixedToText(lv_vCharges, 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_DFE941DE"));
    }
    else if ((((!(((lv_vAbilityCooldown > 0) && (lv_vAbilityCost > 0)))) && (lv_vRemainingCooldown == 0.0)) || (((lv_vAbilityCooldown > 0) && (lv_vAbilityCost > 0)) && (lv_vRemainingCooldown == 0.0) && (lv_vAbilityCost <= UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent))))) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_5AEDA22B", "C", lv_vColorReady);
        TextExpressionSetToken("Param/Expression/lib_COMI_5AEDA22B", "B", StringExternal(lv_vButtonText));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_5AEDA22B"));
    }
    else if ((lv_vRemainingCooldown > 0.0)) {
        SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "B", StringExternal(lv_vButtonText));
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "C", lv_vColor);
        TextExpressionSetToken("Param/Expression/lib_COMI_5A3C2E55", "A", FixedToText(lv_vRemainingCooldown, 0));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_5A3C2E55"));
    }
    else if (true) {
        if ((lv_vAbilityCost <= UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent))) {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "C", StringExternal(lv_vButtonText));
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "B", lv_vColorReady);
            TextExpressionSetToken("Param/Expression/lib_COMI_E2692B72", "A", FixedToText(UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_E2692B72"));
        }
        else {
            SoundPlayForPlayer(lv_vSound, c_maxPlayers, PlayerGroupAll(), 75.0, 0.0);
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "C", StringExternal(lv_vButtonText));
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "B", lv_vColor);
            TextExpressionSetToken("Param/Expression/lib_COMI_180F7ACC", "A", FixedToText(UnitGetPropertyFixed(lv_vUnitCaster, c_unitPropEnergy, c_unitPropCurrent), 0));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_180F7ACC"));
        }
    }
    Wait(0.2, c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_TopBarClicked_Init () {
    libCOMI_gt_AF_TopBarClicked = TriggerCreate("libCOMI_gt_AF_TopBarClicked_Func");
    TriggerEnable(libCOMI_gt_AF_TopBarClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_AF_TopBarClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseEntersTopBar
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_MouseEntersTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_topbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_MouseEntersTopBar_Init () {
    libCOMI_gt_AF_MouseEntersTopBar = TriggerCreate("libCOMI_gt_AF_MouseEntersTopBar_Func");
    TriggerEnable(libCOMI_gt_AF_MouseEntersTopBar, false);
    TriggerAddEventDialogControl(libCOMI_gt_AF_MouseEntersTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MouseExitsTopBar
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_MouseExitsTopBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_topbarButton[0][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[1][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[2][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[3][EventPlayer()]) || (EventDialogControl() == libCOMI_gv_topbarButton[4][EventPlayer()])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UISetCommandAllowed(PlayerGroupSingle(EventPlayer()), c_uiCommandAllowSmartClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_MouseExitsTopBar_Init () {
    libCOMI_gt_AF_MouseExitsTopBar = TriggerCreate("libCOMI_gt_AF_MouseExitsTopBar_Func");
    TriggerEnable(libCOMI_gt_AF_MouseExitsTopBar, false);
    TriggerAddEventDialogControl(libCOMI_gt_AF_MouseExitsTopBar, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VU_EnemyFactionChanged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VU_EnemyFactionChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_newValue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_newValue = libCOMI_gv_vU_EnemyFactionsList[DialogControlGetSelectedItem(libCOMI_gv_vU_CommanderEnemyFactionPulldown, EventPlayer())];

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_vU_CommanderEnemyFactionPulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_newValue == libCOMI_gv_selectedEnemyFaction)) {
        return true;
    }

    libCOMI_gf_VU_SetEnemyFaction(lv_newValue);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VU_EnemyFactionChanged_Init () {
    libCOMI_gt_VU_EnemyFactionChanged = TriggerCreate("libCOMI_gt_VU_EnemyFactionChanged_Func");
    TriggerAddEventDialogControl(libCOMI_gt_VU_EnemyFactionChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faction Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_FactionButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_new;
    string lv_old;
    int lv_i;

    // Automatic Variable Declarations
    int autoE964CBFC_ae;
    const int autoE964CBFC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE964CBFC_ae = libCOMI_gv_totalFactions;
    lv_i = 1;
    for ( ; ( (autoE964CBFC_ai >= 0 && lv_i <= autoE964CBFC_ae) || (autoE964CBFC_ai < 0 && lv_i >= autoE964CBFC_ae) ) ; lv_i += autoE964CBFC_ai ) {
        if ((EventDialogControl() == libCOMI_gv_raceButton[lv_i])) {
            lv_new = libCOMI_gv_raceFaction[lv_i];
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_FactionButtonClicked_Init () {
    libCOMI_gt_FactionButtonClicked = TriggerCreate("libCOMI_gt_FactionButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_FactionButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_CS_NewsControlButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_CS_NewsControlButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_aF_CS_NewsControlButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_aF_CS_NewsControlButtonClicked = true;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_CS_NewsControlButtonClicked_Init () {
    libCOMI_gt_AF_CS_NewsControlButtonClicked = TriggerCreate("libCOMI_gt_AF_CS_NewsControlButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_AF_CS_NewsControlButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommandsButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_CommandsButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_uT_CommandsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libARRA_gt_UT_Info, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_CommandsButtonClicked_Init () {
    libCOMI_gt_UT_CommandsButtonClicked = TriggerCreate("libCOMI_gt_UT_CommandsButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_UT_CommandsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_PlayerLeftInLobby
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_PlayerLeftInLobby_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gv_gameHasBegun == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_PlayerLeftInLobby_Init () {
    libCOMI_gt_CU_PlayerLeftInLobby = TriggerCreate("libCOMI_gt_CU_PlayerLeftInLobby_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CU_PlayerLeftInLobby, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Commander Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CommanderButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;
    int lv_oldPlayer;

    // Automatic Variable Declarations
    const int auto574C97CB_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto574C97CB_ai = 1;
    playergroup autoBF87CBE0_g;
    int autoBF87CBE0_var;
    const int auto39B6E204_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto39B6E204_ai = 1;
    const int auto7FCE6C74_ae = libCOMI_gv_mAX_TEAM_PLAYERS;
    const int auto7FCE6C74_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto574C97CB_ai >= 0 && lv_commIndex <= auto574C97CB_ae) || (auto574C97CB_ai < 0 && lv_commIndex >= auto574C97CB_ae) ) ; lv_commIndex += auto574C97CB_ai ) {
        if ((EventDialogControl() == libCOMI_gv_commanderOption[lv_commIndex].lv_button)) {
            autoBF87CBE0_g = libCOMI_gv_vU_SlotsPlayers;
            autoBF87CBE0_var = -1;
            while (true) {
                autoBF87CBE0_var = PlayerGroupNextPlayer(autoBF87CBE0_g, autoBF87CBE0_var);
                if (autoBF87CBE0_var < 0) { break; }
                if ((libCOMI_gv_cU_CommanderList[lv_commIndex] == libCOMI_gv_cCX_PlayerCommander[autoBF87CBE0_var])) {
                    lv_oldPlayer = autoBF87CBE0_var;
                    break;
                }

            }
            if ((lv_oldPlayer != 0)) {
                if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                    return true;
                }
                else {
                    libCOMI_gv_chosenTeam[lv_oldPlayer] = libCOMI_gv_chosenTeam[EventPlayer()];
                    libCOMI_gf_CU_CommanderSelect(lv_oldPlayer, libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
                }
            }

            libCOMI_gv_chosenTeam[EventPlayer()] = 1;
            libCOMI_gv_cCX_PlayerCommander[EventPlayer()] = libCOMI_gv_cU_CommanderList[lv_commIndex];
            libCOMI_gf_UpdateCommandersList();
            libCOMI_gf_CU_CommanderSelect(EventPlayer(), libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
        }

    }
    if (((libCOMI_gv_cCX_PlayerCommander[EventPlayer()] != null) || (libCOMI_gv_chosenTeam[EventPlayer()] != 1))) {
        if ((EventDialogControl() == libCOMI_gv_playRandomButton)) {
            libCOMI_gv_chosenTeam[EventPlayer()] = 1;
            libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
            libCOMI_gf_UpdateCommandersList();
        }

        lv_commIndex = 1;
        for ( ; ( (auto39B6E204_ai >= 0 && lv_commIndex <= auto39B6E204_ae) || (auto39B6E204_ai < 0 && lv_commIndex >= auto39B6E204_ae) ) ; lv_commIndex += auto39B6E204_ai ) {
            if ((EventDialogControl() == libCOMI_gv_randomOption[lv_commIndex].lv_button)) {
                lv_oldPlayer = libCOMI_gv_randomPlayers[lv_commIndex];
                if ((lv_oldPlayer != 0)) {
                    if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                        return true;
                    }
                    else {
                        libCOMI_gv_chosenTeam[lv_oldPlayer] = libCOMI_gv_chosenTeam[EventPlayer()];
                        libCOMI_gf_CU_CommanderSelect(lv_oldPlayer, libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
                    }
                }

                libCOMI_gv_chosenTeam[EventPlayer()] = 1;
                libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
                libCOMI_gf_UpdateCommandersList();
            }

        }
    }

    if ((libCOMI_gv_chosenTeam[EventPlayer()] != 2)) {
        if ((EventDialogControl() == libCOMI_gv_playAmonButton)) {
            libCOMI_gv_chosenTeam[EventPlayer()] = 2;
            libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
            libCOMI_gf_UpdateCommandersList();
        }

        lv_commIndex = 1;
        for ( ; ( (auto7FCE6C74_ai >= 0 && lv_commIndex <= auto7FCE6C74_ae) || (auto7FCE6C74_ai < 0 && lv_commIndex >= auto7FCE6C74_ae) ) ; lv_commIndex += auto7FCE6C74_ai ) {
            if ((EventDialogControl() == libCOMI_gv_amonOption[lv_commIndex].lv_button)) {
                lv_oldPlayer = libCOMI_gv_amonPlayers[lv_commIndex];
                if ((lv_oldPlayer != 0)) {
                    if ((PlayerType(lv_oldPlayer) == c_playerTypeUser)) {
                        return true;
                    }
                    else {
                        libCOMI_gv_chosenTeam[lv_oldPlayer] = libCOMI_gv_chosenTeam[EventPlayer()];
                        libCOMI_gf_CU_CommanderSelect(lv_oldPlayer, libCOMI_gv_cCX_PlayerCommander[EventPlayer()]);
                    }
                }

                libCOMI_gv_chosenTeam[EventPlayer()] = 2;
                libCOMI_gf_CU_CommanderSelect(EventPlayer(), null);
                libCOMI_gf_UpdateCommandersList();
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CommanderButtonClicked_Init () {
    libCOMI_gt_CommanderButtonClicked = TriggerCreate("libCOMI_gt_CommanderButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CommanderButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PrestigeAlly
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_PrestigeAlly_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_ChangeAllyPrestige();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_PrestigeAlly_Init () {
    libCOMI_gt_UT_PrestigeAlly = TriggerCreate("libCOMI_gt_UT_PrestigeAlly_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_PrestigeAlly, c_playerAny, "-pnext", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_CommanderClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto77CB66EC_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto77CB66EC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto77CB66EC_ai >= 0 && lv_commIndex <= auto77CB66EC_ae) || (auto77CB66EC_ai < 0 && lv_commIndex >= auto77CB66EC_ae) ) ; lv_commIndex += auto77CB66EC_ai ) {
        if (true) {
            if ((libCOMI_gv_cCX_PlayerCommander[libCOMI_gf_CC_PlayerAlly(EventPlayer())] == libCOMI_gv_cU_CommanderList[lv_commIndex])) {
                libCOMI_gv_uT_PrestigeIndex = 0;
                break;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_CommanderClicked_Init () {
    libCOMI_gt_UT_CommanderClicked = TriggerCreate("libCOMI_gt_UT_CommanderClicked_Func");
    TriggerEnable(libCOMI_gt_UT_CommanderClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_UT_CommanderClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderLevelUpClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderLevelUpClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_current;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_current = libCOMI_gf_CC_CommanderLevel(EventPlayer(), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));

    // Conditions
    if (testConds) {
        if (!((lv_current < 15))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderLevelUpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CC_PlayerLevelSet(EventPlayer(), (lv_current+1), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));
    libCOMI_gf_UpdatePlayerCommander(EventPlayer());
    libCOMI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderLevelUpClicked_Init () {
    libCOMI_gt_CU_CommanderLevelUpClicked = TriggerCreate("libCOMI_gt_CU_CommanderLevelUpClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderLevelUpClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderLevelDownClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderLevelDownClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_current;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_current = libCOMI_gf_CC_CommanderLevel(EventPlayer(), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));

    // Conditions
    if (testConds) {
        if (!((lv_current > 1))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderLevelDownButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CC_PlayerLevelSet(EventPlayer(), (lv_current-1), libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()));
    libCOMI_gf_UpdatePlayerCommander(EventPlayer());
    libCOMI_gf_UpdateCommandersList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderLevelDownClicked_Init () {
    libCOMI_gt_CU_CommanderLevelDownClicked = TriggerCreate("libCOMI_gt_CU_CommanderLevelDownClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderLevelDownClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMutatorChallengeSelected
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderMutatorChallengeSelected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMutator;
    int lv_challengeMutatorIndex;
    string lv_selectedChallenge;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int auto6C0298CE_ai;
    int auto6C0298CE_ae;
    int auto6BBBA997_ae;
    const int auto6BBBA997_ai = 1;
    int auto38052520_ai;
    int auto38052520_ae;
    playergroup autoBCE896D9_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderMutatorChallengePulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlGetSelectedItem(libCOMI_gv_cU_CommanderMutatorChallengePulldown, EventPlayer()) <= 1)) {
        auto38052520_ai = 1;
        auto38052520_ae = UserDataInstanceCount("Mutators")+1;
        while (auto38052520_ai < auto38052520_ae) {
            lv_indexMutator = UserDataInstance("Mutators", auto38052520_ai);
            auto38052520_ai = auto38052520_ai+1;
            libCOMI_gf_EnableDisableMutator(false, lv_indexMutator);
        }
    }
    else {
        auto6C0298CE_ai = 1;
        auto6C0298CE_ae = UserDataInstanceCount("Mutators")+1;
        while (auto6C0298CE_ai < auto6C0298CE_ae) {
            lv_indexMutator = UserDataInstance("Mutators", auto6C0298CE_ai);
            auto6C0298CE_ai = auto6C0298CE_ai+1;
            libCOMI_gf_EnableDisableMutator(false, lv_indexMutator);
        }
        lv_selectedChallenge = libCOMI_gv_cU_CommanderMutatorChallengeList[(DialogControlGetSelectedItem(libCOMI_gv_cU_CommanderMutatorChallengePulldown, EventPlayer())-1)];
        auto6BBBA997_ae = UserDataFieldValueCount("MutatorChallenges", "Mutators");
        lv_challengeMutatorIndex = 1;
        for ( ; ( (auto6BBBA997_ai >= 0 && lv_challengeMutatorIndex <= auto6BBBA997_ae) || (auto6BBBA997_ai < 0 && lv_challengeMutatorIndex >= auto6BBBA997_ae) ) ; lv_challengeMutatorIndex += auto6BBBA997_ai ) {
            if ((UserDataGetUserInstance("MutatorChallenges", lv_selectedChallenge, "Mutators", lv_challengeMutatorIndex) != null)) {
                libCOMI_gf_EnableDisableMutator(true, UserDataGetUserInstance("MutatorChallenges", lv_selectedChallenge, "Mutators", lv_challengeMutatorIndex));
            }
            else {
                break;
            }
        }
    }
    autoBCE896D9_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoBCE896D9_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderMutatorChallengeSelected_Init () {
    libCOMI_gt_CU_CommanderMutatorChallengeSelected = TriggerCreate("libCOMI_gt_CU_CommanderMutatorChallengeSelected_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderMutatorChallengeSelected, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_CS_AllyPrestigeChanged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_CS_AllyPrestigeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_aF_CS_AllyPrestigeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_ChangeAllyPrestige();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_CS_AllyPrestigeChanged_Init () {
    libCOMI_gt_AF_CS_AllyPrestigeChanged = TriggerCreate("libCOMI_gt_AF_CS_AllyPrestigeChanged_Func");
    TriggerAddEventDialogControl(libCOMI_gt_AF_CS_AllyPrestigeChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AllyMasteryButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_AllyMasteryButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerStatus(2) != c_playerStatusActive))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_uT_AllyMasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libCOMI_gv_uT_MasteryDialog, EventPlayer()) == true)) {
        TriggerExecute(libCOMI_gt_UT_MasteryButtonClicked, false, false);
    }
    else {
        TriggerEnable(libCOMI_gt_UT_CommanderSwitched, true);
        libCOMI_gv_uT_MasteryTargetPlayer = 2;
        libCOMI_gf_UT_MasteryChoiceCreateUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
        DialogSetVisible(libCOMI_gv_uT_MasteryDialog, PlayerGroupAll(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_AllyMasteryButtonClicked_Init () {
    libCOMI_gt_UT_AllyMasteryButtonClicked = TriggerCreate("libCOMI_gt_UT_AllyMasteryButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_UT_AllyMasteryButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMasteryClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderMasteryClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderMasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_MasteryDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderMasteryClicked_Init () {
    libCOMI_gt_CU_CommanderMasteryClicked = TriggerCreate("libCOMI_gt_CU_CommanderMasteryClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderMasteryClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommanderMasteryCheckboxToggle
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoD4BD7D8B_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderMasteryCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD4BD7D8B_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD4BD7D8B_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Init () {
    libCOMI_gt_CU_CommanderMasteryCheckboxToggle = TriggerCreate("libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_CommanderMasteryCheckboxToggle, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReadyButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ReadyButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_indexPerk;
    int[libCOMI_gv_mAX_PLAYERLEVEL + 1] lv_perkCount;
    int lv_ally;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ally = libCOMI_gf_CC_PlayerAlly(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderReadyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_CommanderPlayerReadySet(EventPlayer(), !(libCOMI_gv_cU_CommanderSelect_PlayerReady[EventPlayer()]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ReadyButtonClicked_Init () {
    libCOMI_gt_ReadyButtonClicked = TriggerCreate("libCOMI_gt_ReadyButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_ReadyButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CommandeAllyLeft
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CommandeAllyLeft_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CommandeAllyLeft_Init () {
    libCOMI_gt_CU_CommandeAllyLeft = TriggerCreate("libCOMI_gt_CU_CommandeAllyLeft_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CU_CommandeAllyLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryShiftTrackDown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryShiftTrackDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryShiftTrackDown_Init () {
    libCOMI_gt_CU_MasteryShiftTrackDown = TriggerCreate("libCOMI_gt_CU_MasteryShiftTrackDown_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackDown, false);
    TriggerAddEventKeyPressed(libCOMI_gt_CU_MasteryShiftTrackDown, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryShiftTrackUp
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryShiftTrackUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryShiftTrackUp_Init () {
    libCOMI_gt_CU_MasteryShiftTrackUp = TriggerCreate("libCOMI_gt_CU_MasteryShiftTrackUp_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryShiftTrackUp, false);
    TriggerAddEventKeyPressed(libCOMI_gt_CU_MasteryShiftTrackUp, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryLevelUpPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryLevelUpPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryLevelUpButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] += 10;
        if ((libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] > libCOMI_gv_cCC_MASTERY_MAX_LEVEL)) {
            libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] = libCOMI_gv_cCC_MASTERY_MAX_LEVEL;
        }

    }
    else {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] += 1;
    }
    libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryLevelUpPressed_Init () {
    libCOMI_gt_CU_MasteryLevelUpPressed = TriggerCreate("libCOMI_gt_CU_MasteryLevelUpPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryLevelUpPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryLevelUpPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryLevelDownPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryLevelDownPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryLevelDownButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] -= 10;
        if ((libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] < 0)) {
            libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] = 0;
        }

    }
    else {
        libCOMI_gv_cU_MasteryLevelCurrent[EventPlayer()] -= 1;
    }
    libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryLevelDownPressed_Init () {
    libCOMI_gt_CU_MasteryLevelDownPressed = TriggerCreate("libCOMI_gt_CU_MasteryLevelDownPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryLevelDownPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryLevelDownPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryItemPlusPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryItemPlusPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int autoBCC3E184_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int autoBCC3E184_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (autoBCC3E184_ai >= 0 && lv_itemIndex <= autoBCC3E184_ae) || (autoBCC3E184_ai < 0 && lv_itemIndex >= autoBCC3E184_ae) ) ; lv_itemIndex += autoBCC3E184_ai ) {
        if ((EventDialogControl() == libCOMI_gv_cU_MasteryPlusButtons[lv_itemIndex])) {
            if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] += MinI(libCOMI_gv_cU_MasteryCategoryPointsLeft[libCOMI_gf_CC_PlayerMasteryCategory(libCOMI_gv_cU_MasteryUpgrades[lv_itemIndex][EventPlayer()])][EventPlayer()], 10);
                if ((libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] > libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL)) {
                    libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL;
                }

            }
            else {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] += 1;
            }
            libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
        }

    }
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryItemPlusPressed_Init () {
    libCOMI_gt_CU_MasteryItemPlusPressed = TriggerCreate("libCOMI_gt_CU_MasteryItemPlusPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryItemPlusPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryItemPlusPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryItemMinusPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryItemMinusPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto58A3D77D_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto58A3D77D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (auto58A3D77D_ai >= 0 && lv_itemIndex <= auto58A3D77D_ae) || (auto58A3D77D_ai < 0 && lv_itemIndex >= auto58A3D77D_ae) ) ; lv_itemIndex += auto58A3D77D_ai ) {
        if ((EventDialogControl() == libCOMI_gv_cU_MasteryMinusButtons[lv_itemIndex])) {
            if ((libCOMI_gv_cU_MasteryShiftPressed[EventPlayer()] == true)) {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] -= 10;
                if ((libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] < 0)) {
                    libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = 0;
                }

            }
            else {
                libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] -= 1;
            }
            libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
        }

    }
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryItemMinusPressed_Init () {
    libCOMI_gt_CU_MasteryItemMinusPressed = TriggerCreate("libCOMI_gt_CU_MasteryItemMinusPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryItemMinusPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryItemMinusPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryResetPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryResetPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    const int auto21362FD9_ae = libCOMI_gv_cCC_MASTERIES_PER_COMMANDER;
    const int auto21362FD9_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryResetButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itemIndex = 1;
    for ( ; ( (auto21362FD9_ai >= 0 && lv_itemIndex <= auto21362FD9_ae) || (auto21362FD9_ai < 0 && lv_itemIndex >= auto21362FD9_ae) ) ; lv_itemIndex += auto21362FD9_ai ) {
        libCOMI_gv_cU_MasteryUpgradePointsSpent[lv_itemIndex][EventPlayer()] = 0;
    }
    libCOMI_gf_CU_MasteryUpdatePoints(EventPlayer());
    libCOMI_gf_CU_MasteryUpdate(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryResetPressed_Init () {
    libCOMI_gt_CU_MasteryResetPressed = TriggerCreate("libCOMI_gt_CU_MasteryResetPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryResetPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryResetPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MasteryAcceptPressed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MasteryAcceptPressed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itemIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MasteryAcceptButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_MasteryUpdateData(EventPlayer());
    libCOMI_gf_CU_MasteryClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MasteryAcceptPressed_Init () {
    libCOMI_gt_CU_MasteryAcceptPressed = TriggerCreate("libCOMI_gt_CU_MasteryAcceptPressed_Func");
    TriggerEnable(libCOMI_gt_CU_MasteryAcceptPressed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MasteryAcceptPressed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_PrestigeButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_PrestigeButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto013548D1_ae = libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK;
    const int auto013548D1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (auto013548D1_ai >= 0 && lv_index <= auto013548D1_ae) || (auto013548D1_ai < 0 && lv_index >= auto013548D1_ae) ) ; lv_index += auto013548D1_ai ) {
        if ((libCOMI_gv_cU_CommanderPrestigesButtons[lv_index].lv_button == EventDialogControl())) {
            libCOMI_gf_CU_PrestigeSelect(EventPlayer(), lv_index);
            DataTableSetInt(true, libCOMI_gf_CC_PrestigeCommanderTableKey(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), EventPlayer()), lv_index);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_PrestigeButtonClicked_Init () {
    libCOMI_gt_CU_PrestigeButtonClicked = TriggerCreate("libCOMI_gt_CU_PrestigeButtonClicked_Func");
    TriggerEnable(libCOMI_gt_CU_PrestigeButtonClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_PrestigeButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GameModePulldownUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_GameModePulldownUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_vU_GameModePulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetGameMode(DialogControlGetSelectedItem(libCOMI_gv_vU_GameModePulldown, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_GameModePulldownUsed_Init () {
    libCOMI_gt_GameModePulldownUsed = TriggerCreate("libCOMI_gt_GameModePulldownUsed_Func");
    TriggerEnable(libCOMI_gt_GameModePulldownUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_GameModePulldownUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DifficultyPulldownUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DifficultyPulldownUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_vU_CommanderDifficultyPulldown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetDifficulty(DialogControlGetSelectedItem(libCOMI_gv_vU_CommanderDifficultyPulldown, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DifficultyPulldownUsed_Init () {
    libCOMI_gt_DifficultyPulldownUsed = TriggerCreate("libCOMI_gt_DifficultyPulldownUsed_Func");
    TriggerEnable(libCOMI_gt_DifficultyPulldownUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_DifficultyPulldownUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI_Delayed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_SlimUI_Delayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= 5.0))) {
        Wait(0.5, c_timeGame);
    }
    UISetFrameVisible(libARRA_gv_aF_SlimUI_PlayerGroup, c_syncFrameTypeConsolePanel, false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), libARRA_gv_aF_SlimUI_PlayerGroup, "SlimUI_On");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_SlimUI_Delayed_Init () {
    libCOMI_gt_AF_SlimUI_Delayed = TriggerCreate("libCOMI_gt_AF_SlimUI_Delayed_Func");
    libCOMI_gf_CU_CommanderClosed(libCOMI_gt_AF_SlimUI_Delayed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_FlashArmyButtonHelpTip
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_FlashArmyButtonHelpTip_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libCOMI_gv_cU_ArmyButtonTipPanel, PlayerGroupAll(), "PlayArmyTip_Zerg", StringExternal("Param/Value/lib_COMI_2910AE3F"), null, null, null);
    TriggerEnable(libCOMI_gt_CU_ArmyButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_FlashArmyButtonHelpTip_Init () {
    libCOMI_gt_CU_FlashArmyButtonHelpTip = TriggerCreate("libCOMI_gt_CU_FlashArmyButtonHelpTip_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ArmyButtonUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_ArmyButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((EventDialogControl() == libCOMI_gv_cU_ArmyButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlInvokeAsText(libCOMI_gv_cU_ArmyButtonTipPanel, PlayerGroupAll(), "CloseArmyTip_Zerg", StringExternal("Param/Value/lib_COMI_0F577014"), null, null, null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_ArmyButtonUsed_Init () {
    libCOMI_gt_CU_ArmyButtonUsed = TriggerCreate("libCOMI_gt_CU_ArmyButtonUsed_Func");
    TriggerEnable(libCOMI_gt_CU_ArmyButtonUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_ArmyButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ArmyButtonMissionInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CS_ArmyButtonMissionInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    if ((true == true)) {
        if ((libCOMI_gf_DifficultyValueInt2(2, 1, 0, 0, 0, 0, 0) == 1)) {
            Wait(1.0, c_timeGame);
            while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
                Wait(0.5, c_timeGame);
            }
            Wait(0.5, c_timeGame);
            libCOMI_gf_DisplayArmyButton(false);
            libCOMI_gv_cU_ArmyButtonTipReady = true;
        }
        else {
            UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CS_ArmyButtonMissionInit_Init () {
    libCOMI_gt_CS_ArmyButtonMissionInit = TriggerCreate("libCOMI_gt_CS_ArmyButtonMissionInit_Func");
    TriggerEnable(libCOMI_gt_CS_ArmyButtonMissionInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_BB_BossHPChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libCOMI_gv_cU_BB_Boss) == false) || (libCOMI_gv_cU_BB_Boss == null))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        libCOMI_gf_RefreshSingularBossBarVoidCampaign();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_BB_BossHPChanged_Init () {
    libCOMI_gt_CU_BB_BossHPChanged = TriggerCreate("libCOMI_gt_CU_BB_BossHPChanged_Func");
    TriggerEnable(libCOMI_gt_CU_BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_BB_BossHPChanged, UnitRefFromVariable("libCOMI_gv_cU_BB_Boss"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_BB_BossHPChanged, UnitRefFromVariable("libCOMI_gv_cU_BB_Boss"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchLifeCheck
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HealthWatchLifeCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_old;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((UnitIsAlive(libCOMI_gv_cU_HealthWatchUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_old = libCOMI_gv_cU_HealthWatchLastHP;
    libCOMI_gv_cU_HealthWatchLastHP = (UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent));
    if ((libCOMI_gv_cU_HealthWatchLastHP < lv_old) && (libCOMI_gv_pUC_HealthWatchThreshold > ((UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) && (libCOMI_gv_cU_HealthWatchFlashing == false)) {
        TriggerExecute(libCOMI_gt_CU_HealthWatchFlash, true, false);
    }

    if ((libCOMI_gv_pUC_HealthWatchThreshold <= ((UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent))))) {
        libCOMI_gf_CM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HealthWatchLifeCheck_Init () {
    libCOMI_gt_CU_HealthWatchLifeCheck = TriggerCreate("libCOMI_gt_CU_HealthWatchLifeCheck_Func");
    TriggerEnable(libCOMI_gt_CU_HealthWatchLifeCheck, false);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HealthWatchLifeCheck, UnitRefFromVariable("libCOMI_gv_cU_HealthWatchUnit"), c_unitPropLife);
    TriggerAddEventUnitProperty(libCOMI_gt_CU_HealthWatchLifeCheck, UnitRefFromVariable("libCOMI_gv_cU_HealthWatchUnit"), c_unitPropShields);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchUnitDies
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HealthWatchUnitDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_StopHeroLowHPSound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HealthWatchUnitDies_Init () {
    libCOMI_gt_CU_HealthWatchUnitDies = TriggerCreate("libCOMI_gt_CU_HealthWatchUnitDies_Func");
    TriggerEnable(libCOMI_gt_CU_HealthWatchUnitDies, false);
    TriggerAddEventUnitDied(libCOMI_gt_CU_HealthWatchUnitDies, UnitRefFromVariable("libCOMI_gv_cU_HealthWatchUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchFlash
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HealthWatchFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9E8FA8A4_n = 3;
    int auto9E8FA8A4_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCOMI_gf_GameIsOver() == true) || (UnitIsAlive(libCOMI_gv_cU_HealthWatchUnit) == false) || (libCOMI_gv_cU_HealthWatchFlashing == true))) {
        return true;
    }

    libCOMI_gv_cU_HealthWatchFlashing = true;
    TriggerExecute(libCOMI_gt_CU_HealthWatchStartSound, true, false);
    for (auto9E8FA8A4_i = 1; auto9E8FA8A4_i <= auto9E8FA8A4_n; auto9E8FA8A4_i += 1) {
        if (((libCOMI_gf_GameIsOver() == true) || ((libCOMI_gv_pUC_HealthWatchThreshold * 100.0) <= ((UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropShields, c_unitPropCurrent))/(UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropLifeMax, c_unitPropCurrent)+UnitGetPropertyFixed(libCOMI_gv_cU_HealthWatchUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) || (UnitIsAlive(libCOMI_gv_cU_HealthWatchUnit) == false))) {
            break;
        }

        libCOMI_gf_CU_HealthWatchCreate();
        DialogControlFadeTransparency(libCOMI_gv_cU_HealthWatchImage, libCOMI_gf_HumanPlayers(), 0.25, 30.0);
        Wait(0.3, c_timeGame);
        DialogControlFadeTransparency(libCOMI_gv_cU_HealthWatchImage, libCOMI_gf_HumanPlayers(), 0.625, 100.0);
        Wait(0.8, c_timeGame);
    }
    DialogControlFadeTransparency(libCOMI_gv_cU_HealthWatchImage, libCOMI_gf_HumanPlayers(), 0.0, 100.0);
    libCOMI_gv_cU_HealthWatchFlashing = false;
    Wait(2.0, c_timeReal);
    if ((libCOMI_gv_cU_HealthWatchFlashing == false)) {
        libCOMI_gf_CM_StopHeroLowHPSound();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HealthWatchFlash_Init () {
    libCOMI_gt_CU_HealthWatchFlash = TriggerCreate("libCOMI_gt_CU_HealthWatchFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchStartSound
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HealthWatchStartSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin);
    if ((libCOMI_gv_cU_HealthWatchSoundStart == null)) {
        SoundPlay(SoundLink("TUIWarning", 0), PlayerGroupAll(), 100.0, 0.0);
        libCOMI_gv_cU_HealthWatchSoundStart = SoundLastPlayed();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HealthWatchStartSound_Init () {
    libCOMI_gt_CU_HealthWatchStartSound = TriggerCreate("libCOMI_gt_CU_HealthWatchStartSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchHeartLoop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HealthWatchHeartLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        SoundPlay(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1), PlayerGroupAll(), 100.0, 0.0);
        libCOMI_gv_cU_HealthWatchSoundHeartbeat = SoundLastPlayed();
        Wait(SoundLengthSync(SoundLink("UI_LowHealthWarning_HeartBeatLoop", -1)), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HealthWatchHeartLoop_Init () {
    libCOMI_gt_CU_HealthWatchHeartLoop = TriggerCreate("libCOMI_gt_CU_HealthWatchHeartLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_HealthWatchBreathLoop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_HealthWatchBreathLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        SoundPlay(SoundLink("UI_LowHealthWarning_BreathLoop", -1), PlayerGroupAll(), 100.0, 0.0);
        libCOMI_gv_cU_HealthWatchSoundBreath = SoundLastPlayed();
        Wait(SoundLengthSync(SoundLink("UI_LowHealthWarning_BreathLoop", -1)), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_HealthWatchBreathLoop_Init () {
    libCOMI_gt_CU_HealthWatchBreathLoop = TriggerCreate("libCOMI_gt_CU_HealthWatchBreathLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TargetingCancelButtonUsed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_TargetingCancelButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_TargetingCancelButton[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetInt(false, TriggerEventParamName(libCOMI_gv_cUC_TargetingEventCancel, libCOMI_gv_cUC_TargetingParamPlayer), EventPlayer());
    TriggerSendEvent(libCOMI_gv_cUC_TargetingEventCancel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_TargetingCancelButtonUsed_Init () {
    libCOMI_gt_CU_TargetingCancelButtonUsed = TriggerCreate("libCOMI_gt_CU_TargetingCancelButtonUsed_Func");
    TriggerEnable(libCOMI_gt_CU_TargetingCancelButtonUsed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_TargetingCancelButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingForceOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingForceOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto252FCEF8_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cM_SoAExitInstantly = true;
    auto252FCEF8_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto252FCEF8_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gv_cM_SoATargetingPhase[lv_indexPlayer] != libCOMI_ge_CM_SoATargetingPhaseType_None)) {
            libCOMI_gv_cM_SoATargetingTransitioning[lv_indexPlayer] = false;
            UISetTargetingOrder(PlayerGroupSingle(lv_indexPlayer), libCOMI_gv_yY_GPCasterGroup[lv_indexPlayer], null, false);
            libCOMI_gf_CM_SoATargetingCancel(lv_indexPlayer);
            libCOMI_gv_targetingPlayer = lv_indexPlayer;
            TriggerSendEvent("Targeting Mode Exit");
        }

    }
    libCOMI_gv_cM_SoATargetingUsageCount = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingForceOff_Init () {
    libCOMI_gt_CM_SoATargetingForceOff = TriggerCreate("libCOMI_gt_CM_SoATargetingForceOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_SoATargetingForceOff, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SoATargetingCancelFromUI
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SoATargetingCancelFromUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_SoATargetingCancel(libCOMI_gf_CU_TargetingTriggeringPlayer());
    UISetTargetingOrder(PlayerGroupSingle(libCOMI_gf_CU_TargetingTriggeringPlayer()), libNtve_gf_ConvertUnitToUnitGroup(libCOMI_gv_yY_GPCasterUnit[libCOMI_gf_CU_TargetingTriggeringPlayer()]), null, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SoATargetingCancelFromUI_Init () {
    libCOMI_gt_CM_SoATargetingCancelFromUI = TriggerCreate("libCOMI_gt_CM_SoATargetingCancelFromUI_Func");
    libCOMI_gf_CU_TargetingCancel(libCOMI_gt_CM_SoATargetingCancelFromUI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TimerWindowFlash
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_TimerWindowFlash_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSendAnimationEvent(libCOMI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "Highlight");
    Wait(libCOMI_gv_cU_TimerWindowHighlightDuration, c_timeReal);
    DialogControlSendAnimationEvent(libCOMI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "HighlightStop");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_TimerWindowFlash_Init () {
    libCOMI_gt_CU_TimerWindowFlash = TriggerCreate("libCOMI_gt_CU_TimerWindowFlash_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TimerWindowMoveForBossBar
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_TimerWindowMoveForBossBar_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((libCOMI_gv_cU_BB_Panel != c_invalidDialogControlId) && ((DialogControlIsVisible(libCOMI_gv_cU_BB_Panel, 1) == true) || (DialogControlIsVisible(libCOMI_gv_cU_BB_Panel, 2) == true))) {
            TimerWindowSetAnchor(libCOMI_gv_cU_TimerWindow, c_anchorTopRight, 0, 175);
        }
        else {
            TimerWindowSetAnchor(libCOMI_gv_cU_TimerWindow, c_anchorTopRight, 0, 50);
        }
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        Wait(0.5, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_TimerWindowMoveForBossBar_Init () {
    libCOMI_gt_CU_TimerWindowMoveForBossBar = TriggerCreate("libCOMI_gt_CU_TimerWindowMoveForBossBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_TimerWindowThresholdCrossed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_TimerWindowThresholdCrossed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowSetTimer(TimerWindowLastCreated(), TimerLastStarted());
    if ((TimerGetRemaining(libCOMI_gv_cU_TimerWindowTimer) <= libCOMI_gv_cU_TimerWindowDangerThreshold) && (libCOMI_gv_cU_TimerWindowInDanger == false)) {
        libCOMI_gv_cU_TimerWindowInDanger = true;
        DialogControlSendAnimationEvent(libCOMI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "Danger");
    }
    else if ((TimerGetRemaining(libCOMI_gv_cU_TimerWindowTimer) > libCOMI_gv_cU_TimerWindowDangerThreshold) && (libCOMI_gv_cU_TimerWindowInDanger == true)) {
        libCOMI_gv_cU_TimerWindowInDanger = false;
        DialogControlSendAnimationEvent(libCOMI_gv_cU_TimerWindowHighlightFrame, PlayerGroupAll(), "DangerStop");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_TimerWindowThresholdCrossed_Init () {
    libCOMI_gt_CU_TimerWindowThresholdCrossed = TriggerCreate("libCOMI_gt_CU_TimerWindowThresholdCrossed_Func");
    TriggerEnable(libCOMI_gt_CU_TimerWindowThresholdCrossed, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CU_TimerWindowThresholdCrossed, 1.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_WaveTimerWindowUpdateTime
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_WaveTimerWindowUpdateTime_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_windowIndex;

    // Automatic Variable Declarations
    const int autoA5AED898_ae = libCOMI_gv_cUC_WAVETIMERWINDOWMAX;
    const int autoA5AED898_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_windowIndex = 1;
        for ( ; ( (autoA5AED898_ai >= 0 && lv_windowIndex <= autoA5AED898_ae) || (autoA5AED898_ai < 0 && lv_windowIndex >= autoA5AED898_ae) ) ; lv_windowIndex += autoA5AED898_ai ) {
            libNtve_gf_SetDialogItemText(libCOMI_gv_cU_WaveTimerWindowTime[lv_windowIndex], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libCOMI_gv_cU_WaveTimerWindowTimers[lv_windowIndex]))), PlayerGroupAll());
        }
        Wait(0.05, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_WaveTimerWindowUpdateTime_Init () {
    libCOMI_gt_CU_WaveTimerWindowUpdateTime = TriggerCreate("libCOMI_gt_CU_WaveTimerWindowUpdateTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_ScoreClosed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_ScoreClosed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_ScoreContinueButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetInt(false, TriggerEventParamName(libCOMI_gv_cUC_ScoreEventClosed, libCOMI_gv_cUC_ScoreParameterPlayer), EventPlayer());
    TriggerSendEvent(libCOMI_gv_cUC_ScoreEventClosed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_ScoreClosed_Init () {
    libCOMI_gt_CU_ScoreClosed = TriggerCreate("libCOMI_gt_CU_ScoreClosed_Func");
    TriggerEnable(libCOMI_gt_CU_ScoreClosed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_ScoreClosed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_FanfareDismissed
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_FanfareDismissed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_cU_FanfareCloseButton) || (EventDialogControl() == libCOMI_gv_cU_FanfareConvertToReplayButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libCOMI_gv_cU_FanfareDialog, PlayerGroupSingle(EventPlayer()), false);
    TriggerExecute(libCOMI_gt_AF_Score, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_FanfareDismissed_Init () {
    libCOMI_gt_CU_FanfareDismissed = TriggerCreate("libCOMI_gt_CU_FanfareDismissed_Func");
    TriggerEnable(libCOMI_gt_CU_FanfareDismissed, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_FanfareDismissed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapListslectionChanged
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MapListslectionChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_selectMissionPulldownDialog))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UpdateMapSelection(EventPlayer(), DialogControlGetSelectedItem(libCOMI_gv_selectMissionPulldownDialog, EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MapListslectionChanged_Init () {
    libCOMI_gt_MapListslectionChanged = TriggerCreate("libCOMI_gt_MapListslectionChanged_Func");
    TriggerAddEventDialogControl(libCOMI_gt_MapListslectionChanged, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MapButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MapButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_votes;
    int lv_i;
    int lv_old;

    // Automatic Variable Declarations
    int autoC91347E2_ae;
    const int autoC91347E2_ai = 1;

    // Variable Initialization
    lv_old = libCOMI_gv_selected[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    autoC91347E2_ae = libCOMI_gv_totalMaps;
    lv_i = 1;
    for ( ; ( (autoC91347E2_ai >= 0 && lv_i <= autoC91347E2_ae) || (autoC91347E2_ai < 0 && lv_i >= autoC91347E2_ae) ) ; lv_i += autoC91347E2_ai ) {
        if ((EventDialogControl() == libCOMI_gv_missionButton[lv_i])) {
            libCOMI_gf_UpdateMapSelection(EventPlayer(), lv_i);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MapButtonClicked_Init () {
    libCOMI_gt_MapButtonClicked = TriggerCreate("libCOMI_gt_MapButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_MapButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MissionsButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MissionsButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_missionsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(libCOMI_gv_selectMissionDialogBig, EventPlayer()) == true)) {
        DialogSetVisible(libCOMI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(libCOMI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MissionsButtonClicked_Init () {
    libCOMI_gt_MissionsButtonClicked = TriggerCreate("libCOMI_gt_MissionsButtonClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_MissionsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Mission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_StartMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selected;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selected = DialogControlGetSelectedItem(libCOMI_gv_selectMissionPulldownDialog, 1);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_startMissionDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_selected == 1)) {
        lv_selected = RandomInt(2, libCOMI_gv_totalMaps);
    }

    if ((GameIsOnline() == true)) {
        OnlineMapToMapLoad(libCOMI_gv_mapSlots[lv_selected], PlayerGroupAll(), PlayerGroupEmpty());
    }
    else {
        GameSetNextMap(("coop/" + libCOMI_gv_mapFiles[lv_selected]));
        GameOver(1, c_gameOverVictory, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_StartMission_Init () {
    libCOMI_gt_StartMission = TriggerCreate("libCOMI_gt_StartMission_Func");
    TriggerEnable(libCOMI_gt_StartMission, false);
    TriggerAddEventDialogControl(libCOMI_gt_StartMission, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Missions Dialog
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CreateMissionsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_x;
    string lv_map;
    int lv_y;
    int lv_image;
    int lv_buttonWidth;
    int lv_buttonsInRow;

    // Automatic Variable Declarations
    int autoA303AEE5_ae;
    int autoA303AEE5_var;
    playergroup auto39CB0EC4_g;
    int auto39CB0EC4_var;

    // Variable Initialization
    lv_offsetX = 10;
    lv_offsetY = -60;
    lv_image = c_invalidDialogControlId;
    lv_buttonWidth = 180;
    lv_buttonsInRow = 9;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    DialogCreate(1000, 1000, c_anchorTopRight, 20, 20, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_selectMissionDialog = DialogLastCreated();
    DialogSetRenderPriority(libCOMI_gv_selectMissionDialog, 9000);
    DialogControlCreate(libCOMI_gv_selectMissionDialog, c_triggerControlTypePulldown);
    libCOMI_gv_selectMissionPulldownDialog = DialogControlLastCreated();
    DialogControlSetSize(libCOMI_gv_selectMissionPulldownDialog, libCOMI_gv_all, 470, 90);
    DialogControlSetPosition(libCOMI_gv_selectMissionPulldownDialog, libCOMI_gv_all, c_anchorTopRight, 390, -5);
    libNtve_gf_CreateDialogItemButton(libCOMI_gv_selectMissionDialog, 350, 80, c_anchorTopRight, 0, 0, StringExternal("Param/Value/lib_COMI_A3FDC3D3"), StringExternal("Param/Value/lib_COMI_8D7D1E1A"), "");
    libCOMI_gv_startMissionDialogButton = DialogControlLastCreated();
    DialogSetVisible(libCOMI_gv_selectMissionDialog, libCOMI_gv_all, true);
    DialogControlSetVisible(libCOMI_gv_selectMissionPulldownDialog, libCOMI_gv_all, true);
    DialogControlSetVisible(libCOMI_gv_startMissionDialogButton, libCOMI_gv_all, true);
    DialogCreate(1820, 970, c_anchorTopLeft, 120, 125, true);
    libCOMI_gv_selectMissionDialogBig = DialogLastCreated();
    DialogSetRenderPriority(libCOMI_gv_selectMissionDialogBig, 5000);
    DialogSetTitle(libCOMI_gv_selectMissionDialogBig, StringExternal("Param/Value/lib_COMI_033B1E98"));
    DialogSetVisible(libCOMI_gv_selectMissionDialogBig, libCOMI_gv_all, true);
    autoA303AEE5_ae = UserDataInstanceCount("Maps");
    autoA303AEE5_var = 1;
    for ( ; autoA303AEE5_var <= autoA303AEE5_ae; autoA303AEE5_var += 1 ) {
        lv_map = UserDataInstance("Maps", autoA303AEE5_var);
        if ((UserDataGetInt("Maps", lv_map, "Hidden", 1) == 0)) {
            if ((((UserDataGetInt("Maps", lv_map, "Map Slot", 1) != 0) && (GameIsOnline() == true)) || ((UserDataGetString("Maps", lv_map, "localFile", 1) != "") && (GameIsOnline() == false)))) {
                lv_x = (lv_offsetX + ((lv_buttonWidth + 10) * ((libCOMI_gv_totalMaps - (lv_buttonsInRow * (libCOMI_gv_totalMaps / lv_buttonsInRow))) - 0)));
                lv_y = (lv_offsetY + (140 * (libCOMI_gv_totalMaps / lv_buttonsInRow)));
                libCOMI_gv_totalMaps += 1;
                libCOMI_gv_mapNames[libCOMI_gv_totalMaps] = UserDataGetText("Maps", lv_map, "Name", 1);
                libCOMI_gv_mapSlots[libCOMI_gv_totalMaps] = UserDataGetInt("Maps", lv_map, "Map Slot", 1);
                libCOMI_gv_mapFiles[libCOMI_gv_totalMaps] = UserDataGetString("Maps", lv_map, "localFile", 1);
                DialogControlAddItem(libCOMI_gv_selectMissionPulldownDialog, libCOMI_gv_all, libCOMI_gv_mapNames[libCOMI_gv_totalMaps]);
                libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_buttonWidth, 130, c_anchorTopLeft, (lv_x + 50), (lv_y + 145), UserDataGetText("Maps", lv_map, "Description", 1), libCOMI_gv_mapNames[libCOMI_gv_totalMaps], UserDataGetImagePath("Maps", lv_map, "Image", 1));
                DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "Coop_CommanderSelection/CommanderButtonTemplate");
                DialogControlSetSize(DialogControlLastCreated(), libCOMI_gv_all, lv_buttonWidth, 130);
                DialogControlSetPosition(DialogControlLastCreated(), libCOMI_gv_all, c_anchorTopLeft, (lv_x + 50), (lv_y + 145));
                libCOMI_gv_missionButton[libCOMI_gv_totalMaps] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemTooltip(libCOMI_gv_missionButton[libCOMI_gv_totalMaps], UserDataGetText("Maps", lv_map, "Description", 1), libCOMI_gv_all);
                DialogControlHookup(libCOMI_gv_missionButton[libCOMI_gv_totalMaps], c_triggerControlTypeImage, "CheckMark");
                DialogControlSetVisible(DialogControlLastCreated(), libCOMI_gv_all, false);
                DialogControlSetVisible(libARRA_gf_HookUpDialogItemandshowforplayers("CommanderPortrait", c_triggerControlTypePortrait, libCOMI_gv_missionButton[libCOMI_gv_totalMaps], libCOMI_gv_all), libCOMI_gv_all, false);
                libCOMI_gv_missionImage[libCOMI_gv_totalMaps] = libARRA_gf_HookUpDialogItemandshowforplayers("Locked", c_triggerControlTypeImage, libCOMI_gv_missionButton[libCOMI_gv_totalMaps], libCOMI_gv_all);
                DialogControlSetVisible(libCOMI_gv_missionImage[libCOMI_gv_totalMaps], libCOMI_gv_all, false);
                libCOMI_gv_missionImage[libCOMI_gv_totalMaps] = libARRA_gf_HookUpDialogItemandshowforplayers("BackgroundImage", c_triggerControlTypeImage, libCOMI_gv_missionButton[libCOMI_gv_totalMaps], libCOMI_gv_all);
                libNtve_gf_SetDialogItemImage(libCOMI_gv_missionImage[libCOMI_gv_totalMaps], UserDataGetImagePath("Maps", lv_map, "Image", 1), libCOMI_gv_all);
                libCOMI_gv_missionText[libCOMI_gv_totalMaps] = libARRA_gf_HookUpDialogItemandshowforplayers("CommanderName", c_triggerControlTypeLabel, libCOMI_gv_missionButton[libCOMI_gv_totalMaps], libCOMI_gv_all);
                libNtve_gf_SetDialogItemText(libCOMI_gv_missionText[libCOMI_gv_totalMaps], libCOMI_gv_mapNames[libCOMI_gv_totalMaps], libCOMI_gv_all);
                libCOMI_gv_mapBorder[libCOMI_gv_totalMaps] = libARRA_gf_HookUpDialogItemandshowforplayers("SelectionBorder", c_triggerControlTypeImage, libCOMI_gv_missionButton[libCOMI_gv_totalMaps], libCOMI_gv_all);
                DialogControlSetVisible(libCOMI_gv_mapBorder[libCOMI_gv_totalMaps], libCOMI_gv_all, false);
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), (lv_buttonWidth - 20), 50, c_anchorTopLeft, (lv_x + 55), (lv_y + 230), libCOMI_gv_mapNames[libCOMI_gv_totalMaps], ColorWithAlpha(0,0,0,0), false, 2.0);
                libCOMI_gv_missionText[libCOMI_gv_totalMaps] = DialogControlLastCreated();
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "CenterJustified", libCOMI_gv_all);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize12", libCOMI_gv_all);
            }

        }

    }
    DialogControlSelectItem(libCOMI_gv_selectMissionPulldownDialog, libCOMI_gv_all, 1);
    DialogCreate(1200, 100, c_anchorBottomLeft, 120, 20, true);
    libCOMI_gv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(libCOMI_gv_dialog, 200, 80, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_COMI_1F33D1A1"), StringExternal("Param/Value/lib_COMI_F4C11E4E"), "");
    libCOMI_gv_missionsButton = DialogControlLastCreated();
    DialogControlSetVisible(libCOMI_gv_missionsButton, libCOMI_gv_all, true);
    DialogSetVisible(libCOMI_gv_dialog, libCOMI_gv_all, true);
    auto39CB0EC4_g = PlayerGroupActive();
    auto39CB0EC4_var = -1;
    while (true) {
        auto39CB0EC4_var = PlayerGroupNextPlayer(auto39CB0EC4_g, auto39CB0EC4_var);
        if (auto39CB0EC4_var < 0) { break; }
        libCOMI_gf_UpdateMapSelection(auto39CB0EC4_var, 1);
    }
    TriggerEnable(libCOMI_gt_StartMission, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CreateMissionsDialog_Init () {
    libCOMI_gt_CreateMissionsDialog = TriggerCreate("libCOMI_gt_CreateMissionsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_AutoRevealRegionController
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AutoRevealRegionController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoF67ED6CB_ae;
    const int autoF67ED6CB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        autoF67ED6CB_ae = (libARRA_gv_autoRevealers.lv_count - 1);
        lv_i = 0;
        for ( ; ( (autoF67ED6CB_ai >= 0 && lv_i <= autoF67ED6CB_ae) || (autoF67ED6CB_ai < 0 && lv_i >= autoF67ED6CB_ae) ) ; lv_i += autoF67ED6CB_ai ) {
            if ((UnitGroupCount(UnitGroup(null, libARRA_gv_autoRevealers.lv_triggeringPlayers[lv_i], libARRA_gv_autoRevealers.lv_triggeringRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 1), c_unitCountAlive) > 0)) {
                libCOMI_gf_EnableDisableRevealerCoop(libARRA_gv_autoRevealers.lv_revealers[lv_i], true);
            }
            else {
                libCOMI_gf_EnableDisableRevealerCoop(libARRA_gv_autoRevealers.lv_revealers[lv_i], false);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AutoRevealRegionController_Init () {
    libCOMI_gt_CM_AutoRevealRegionController = TriggerCreate("libCOMI_gt_CM_AutoRevealRegionController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Sleep Area
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PerformanceSleepArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_placedUnits;
    unit lv_sleepyUnit;
    playergroup lv_sleepyOwners;
    int lv_sleepyPlayer;
    region lv_performanceSleepArea;

    // Automatic Variable Declarations
    playergroup auto7CA2901F_g;
    playergroup auto3E5BA862_g;
    unitgroup autoB2DA6AC0_g;
    int autoB2DA6AC0_u;

    // Variable Initialization
    lv_placedUnits = UnitGroupEmpty();
    lv_sleepyOwners = PlayerGroupEmpty();
    lv_performanceSleepArea = libCOMI_gf_GetSleepZone();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_performanceSleepArea != null)) {
        auto7CA2901F_g = libCOMI_gv_vU_Enemies;
        lv_sleepyPlayer = -1;
        while (true) {
            lv_sleepyPlayer = PlayerGroupNextPlayer(auto7CA2901F_g, lv_sleepyPlayer);
            if (lv_sleepyPlayer < 0) { break; }
            UnitGroupAddUnitGroup(lv_placedUnits, UnitGroup(null, lv_sleepyPlayer, lv_performanceSleepArea, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        while (!((libCOMI_gv_gameHasBegun == true))) {
            Wait(1.0, c_timeGame);
        }
        auto3E5BA862_g = lv_sleepyOwners;
        lv_sleepyPlayer = -1;
        while (true) {
            lv_sleepyPlayer = PlayerGroupNextPlayer(auto3E5BA862_g, lv_sleepyPlayer);
            if (lv_sleepyPlayer < 0) { break; }
            if ((PlayerRace(lv_sleepyPlayer) == "Terr")) {
                Wait(30.0, c_timeAI);
                break;
            }

        }
        autoB2DA6AC0_g = lv_placedUnits;
        autoB2DA6AC0_u = UnitGroupCount(autoB2DA6AC0_g, c_unitCountAll);
        for (;; autoB2DA6AC0_u -= 1) {
            lv_sleepyUnit = UnitGroupUnitFromEnd(autoB2DA6AC0_g, autoB2DA6AC0_u);
            if (lv_sleepyUnit == null) { break; }
            libCOMI_gf_SleepWakeUpUnitCoop(lv_sleepyUnit, true, libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PerformanceSleepArea_Init () {
    libCOMI_gt_PerformanceSleepArea = TriggerCreate("libCOMI_gt_PerformanceSleepArea_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tasks Initialization
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_TasksInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto98A0B7E0_saved_task;
    int auto98A0B7E0_saved_parent;
    int auto281EF628_saved_task;
    int auto281EF628_saved_parent;
    int auto8A80374D_saved_task;
    int auto8A80374D_saved_parent;

    // Actions
    if (!runActions) {
        return true;
    }

    auto98A0B7E0_saved_task   = libARRA_gv_task;
    auto98A0B7E0_saved_parent = libARRA_gv_parent;
    libARRA_gv_parent = libARRA_gv_task;
    libARRA_gf_CreateTask("global");
    libARRA_gf_StoreRealForTask(libARRA_gv_task, "ObjectiveDelay", libCOMI_gv_campaignObjectiveDelay);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "Team", 1);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "EnemyTeam", 2);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, libARRA_gv_nPCNEUTRAL, 10);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, libARRA_gv_nPCALLY, 11);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, libARRA_gv_nPCENEMY, 12);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, libARRA_gv_nPCBONUS, 13);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, libARRA_gv_nPCHOSTILE, 14);
    libARRA_gf_StoreTriggerForTask(libARRA_gv_task, "Harass", libCOMI_gt_AttackDefaultVOResponse);
    libARRA_gf_StoreTriggerForTask(libARRA_gv_task, "Attack", libCOMI_gt_AttackDefaultVOResponse);
    libARRA_gf_StoreTriggerForTask(libARRA_gv_task, "End", libCOMI_gt_TaskCleanUpCoop);
    libARRA_gv_global = libARRA_gv_task;
    auto281EF628_saved_task   = libARRA_gv_task;
    auto281EF628_saved_parent = libARRA_gv_parent;
    libARRA_gv_parent = libARRA_gv_task;
    libARRA_gf_CreateTask("mission");
    libARRA_gv_mission = libARRA_gv_task;
    libARRA_gv_task   = auto281EF628_saved_task;
    libARRA_gv_parent = auto281EF628_saved_parent;
    auto8A80374D_saved_task   = libARRA_gv_task;
    auto8A80374D_saved_parent = libARRA_gv_parent;
    libARRA_gv_parent = libARRA_gv_task;
    libARRA_gf_CreateTask("amon");
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "Team", 2);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "EnemyTeam", 1);
    libARRA_gv_amon = libARRA_gv_task;
    libARRA_gv_task   = auto8A80374D_saved_task;
    libARRA_gv_parent = auto8A80374D_saved_parent;
    libARRA_gv_task   = auto98A0B7E0_saved_task;
    libARRA_gv_parent = auto98A0B7E0_saved_parent;
    libARRA_gv_task = libARRA_gv_global;
    libARRA_gv_parent = libARRA_gv_global;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_TasksInitialization_Init () {
    libCOMI_gt_TasksInitialization = TriggerCreate("libCOMI_gt_TasksInitialization_Func");
    TriggerAddEventGeneric(libCOMI_gt_TasksInitialization, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task.CleanUpCoop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_TaskCleanUpCoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TaskDestroyRevealersCoop(libARRA_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_TaskCleanUpCoop_Init () {
    libCOMI_gt_TaskCleanUpCoop = TriggerCreate("libCOMI_gt_TaskCleanUpCoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attacks Controller
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AttacksController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoA27A9A5C_saved_task;
    int autoA27A9A5C_saved_parent;
    int autoA27A9A5C_saved_listener;
    int auto7F528B1E_saved_task;
    int auto7F528B1E_saved_parent;
    int auto7F528B1E_saved_listener;
    int auto7A0222C3_saved_task;
    int auto7A0222C3_saved_parent;
    int auto47F68C7F_saved_task;
    int auto47F68C7F_saved_parent;
    int auto47F68C7F_saved_listener;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA27A9A5C_saved_task   = libARRA_gv_task;
    autoA27A9A5C_saved_parent = libARRA_gv_parent;
    autoA27A9A5C_saved_listener = libARRA_gv_listener;
    Wait((60.0 * libARRA_gf_RealForTask2(libARRA_gv_task, "AttackWavesDelay")), c_timeReal ); //Async
    libARRA_gv_task   = autoA27A9A5C_saved_task;
    libARRA_gv_parent = autoA27A9A5C_saved_parent;
    libARRA_gv_listener = autoA27A9A5C_saved_listener;
    if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
    auto7F528B1E_saved_task     = libARRA_gv_task;
    auto7F528B1E_saved_parent   = libARRA_gv_parent;
    auto7F528B1E_saved_listener = libARRA_gv_listener;
    do {
        if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
        libARRA_gf_SetTriggeringTask(libARRA_gv_task);
        auto7A0222C3_saved_task   = libARRA_gv_task;
        auto7A0222C3_saved_parent = libARRA_gv_parent;
        libARRA_gv_parent = libARRA_gv_task;
        libARRA_gf_CreateTask("attack-wave");
        libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", libARRA_gf_IntegerForTask2(libARRA_gv_task, "AttackWavesTech"));
        libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", libARRA_gf_IntegerForTask2(libARRA_gv_task, "AttackWavesSize"));
        libARRA_gf_StoreStringForTask(libARRA_gv_task, "AttackWavesRoutes", libARRA_gf_StringForTask2(libARRA_gv_task, "AttackWavesRoutes"));
        libARRA_gf_TaskRun(libARRA_gv_task, libCOMI_gt_BaseTargetAttack, false);
        libARRA_gv_task   = auto7A0222C3_saved_task;
        libARRA_gv_parent = auto7A0222C3_saved_parent;
        auto47F68C7F_saved_task   = libARRA_gv_task;
        auto47F68C7F_saved_parent = libARRA_gv_parent;
        auto47F68C7F_saved_listener = libARRA_gv_listener;
        Wait(((5.0 + RandomFixed(libARRA_gf_RealForTask2(libARRA_gv_task, "AttackWavesSpreadMin"), libARRA_gf_RealForTask2(libARRA_gv_task, "AttackWavesSpreadMax"))) * (60.0 * libARRA_gf_RealForTask2(libARRA_gv_task, "AttackWavesFrequency"))), c_timeReal ); //Async
        libARRA_gv_task   = auto47F68C7F_saved_task;
        libARRA_gv_parent = auto47F68C7F_saved_parent;
        libARRA_gv_listener = auto47F68C7F_saved_listener;
        if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
        if ((libARRA_gf_RealForTask2(libARRA_gv_task, "AttackWavesSpreadMin") > -2.0)) {
            libARRA_gf_StoreRealForTask(libARRA_gv_task, "AttackWavesSpreadMin", (libARRA_gf_RealForTask(libARRA_gv_task, "AttackWavesSpreadMin") + -0.125));
        }

        Wait(0.25, c_timeReal); //Async
    }
    while (true);
    libARRA_gv_task   = auto7F528B1E_saved_task;
    libARRA_gv_parent = auto7F528B1E_saved_parent;
    libARRA_gv_listener = auto7F528B1E_saved_listener;
    if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AttacksController_Init () {
    libCOMI_gt_AttacksController = TriggerCreate("libCOMI_gt_AttacksController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base Target Attack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_BaseTargetAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delay;
    int lv_attackTarget;
    int lv_size;
    int lv_tech;
    string lv_routes;
    trigger lv_harassTrigger;

    // Automatic Variable Declarations
    int autoEDDFBB2F_saved_task;
    int autoEDDFBB2F_saved_parent;
    int autoEDDFBB2F_saved_listener;

    // Variable Initialization
    lv_delay = libARRA_gf_RealForTask2(libARRA_gv_task, "AttackWaveDelay");
    lv_attackTarget = libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWaveTargetIndex");
    lv_size = libARRA_gf_IntegerForTask2(libARRA_gv_task, "AttackWavesSize");
    lv_tech = libARRA_gf_IntegerForTask2(libARRA_gv_task, "AttackWavesTech");
    lv_routes = libARRA_gf_StringForTask2(libARRA_gv_task, "AttackWavesRoutes");
    lv_harassTrigger = libARRA_gf_TriggerStoredForTask2(libARRA_gv_task, "Harass");

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_TaskRun(libARRA_gv_task, libARRA_gf_TriggerStoredForTask2(libARRA_gv_task, "Attack"), false);
    libCOMI_gf_TaskAttackWave(libARRA_gv_task, libCOMI_gf_RandomPriorityTarget(), lv_routes, lv_size, lv_tech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    if ((PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers()) > 3)) {
        autoEDDFBB2F_saved_task   = libARRA_gv_task;
        autoEDDFBB2F_saved_parent = libARRA_gv_parent;
        autoEDDFBB2F_saved_listener = libARRA_gv_listener;
        Wait(RandomFixed(1.0, 10.0), c_timeReal ); //Async
        libARRA_gv_task   = autoEDDFBB2F_saved_task;
        libARRA_gv_parent = autoEDDFBB2F_saved_parent;
        libARRA_gv_listener = autoEDDFBB2F_saved_listener;
        if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
        libCOMI_gf_TaskAttackWave(libARRA_gv_task, libCOMI_gf_RandomPriorityTarget(), lv_routes, lv_size, lv_tech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_BaseTargetAttack_Init () {
    libCOMI_gt_BaseTargetAttack = TriggerCreate("libCOMI_gt_BaseTargetAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Default VO Response
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AttackDefaultVOResponse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_TaskTransmission(libARRA_gv_task, "AttackWave", 2.0, 20.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AttackDefaultVOResponse_Init () {
    libCOMI_gt_AttackDefaultVOResponse = TriggerCreate("libCOMI_gt_AttackDefaultVOResponse_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default Mission Waves Tech Progression
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefaultMissionWavesTechProgression_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_minute;

    // Automatic Variable Declarations
    int autoB0B216CD_val;

    // Variable Initialization
    lv_minute = 60.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB0B216CD_val = PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers());
    if (autoB0B216CD_val == 1) {
        lv_minute = 75.0;
    }
    else if (autoB0B216CD_val == 2) {
        lv_minute = 60.0;
    }
    else if (autoB0B216CD_val == 3) {
        lv_minute = 55.0;
    }
    else if (autoB0B216CD_val == 4) {
        lv_minute = 50.0;
    }
    else if (autoB0B216CD_val == 5) {
        lv_minute = 45.0;
    }
    else {
    }
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", 1);
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesTech") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesTech") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesTech") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesTech") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesTech") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesTech", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesTech") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefaultMissionWavesTechProgression_Init () {
    libCOMI_gt_DefaultMissionWavesTechProgression = TriggerCreate("libCOMI_gt_DefaultMissionWavesTechProgression_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Default Mission Waves Size Progression
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefaultMissionWavesSizeProgression_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_minute;

    // Automatic Variable Declarations
    int auto7BC71B5B_val;

    // Variable Initialization
    lv_minute = 60.0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7BC71B5B_val = PlayerGroupCount(libCOMI_gf_GetAlliedCommandersPlayers());
    if (auto7BC71B5B_val == 1) {
        lv_minute = 75.0;
    }
    else if (auto7BC71B5B_val == 2) {
        lv_minute = 60.0;
    }
    else if (auto7BC71B5B_val == 3) {
        lv_minute = 55.0;
    }
    else if (auto7BC71B5B_val == 4) {
        lv_minute = 50.0;
    }
    else if (auto7BC71B5B_val == 5) {
        lv_minute = 45.0;
    }
    else {
    }
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", 1);
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesSize") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesSize") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesSize") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesSize") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesSize") + 1));
    Wait((5.0 * lv_minute), c_timeGame);
    libARRA_gf_StoreIntegerForTask(libARRA_gv_task, "AttackWavesSize", (libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWavesSize") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefaultMissionWavesSizeProgression_Init () {
    libCOMI_gt_DefaultMissionWavesSizeProgression = TriggerCreate("libCOMI_gt_DefaultMissionWavesSizeProgression_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Priority Target Attack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_PriorityTargetAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_delay;
    int lv_attackTarget;
    int lv_size;
    int lv_tech;
    string lv_routes;
    trigger lv_harassTrigger;

    // Automatic Variable Declarations
    int autoAFBD8034_saved_task;
    int autoAFBD8034_saved_parent;
    int autoAFBD8034_saved_listener;

    // Variable Initialization
    lv_delay = libARRA_gf_RealForTask2(libARRA_gv_task, "AttackWaveDelay");
    lv_attackTarget = libARRA_gf_IntegerForTask(libARRA_gv_task, "AttackWaveTargetIndex");
    lv_size = libARRA_gf_IntegerForTask2(libARRA_gv_task, "AttackWavesSize");
    lv_tech = libARRA_gf_IntegerForTask2(libARRA_gv_task, "AttackWavesTech");
    lv_routes = libARRA_gf_StringForTask2(libARRA_gv_task, "AttackWavesRoutes");
    lv_harassTrigger = libARRA_gf_TriggerStoredForTask2(libARRA_gv_task, "Harass");

    // Actions
    if (!runActions) {
        return true;
    }

    autoAFBD8034_saved_task   = libARRA_gv_task;
    autoAFBD8034_saved_parent = libARRA_gv_parent;
    autoAFBD8034_saved_listener = libARRA_gv_listener;
    Wait(lv_delay, c_timeReal ); //Async
    libARRA_gv_task   = autoAFBD8034_saved_task;
    libARRA_gv_parent = autoAFBD8034_saved_parent;
    libARRA_gv_listener = autoAFBD8034_saved_listener;
    if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
    libCOMI_gf_TaskAttackWave(libARRA_gv_task, libCOMI_gf_TaskGetPriorityTarget(libARRA_gv_task, lv_attackTarget), lv_routes, lv_size, lv_tech, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Special);
    libARRA_gf_TaskRun(libARRA_gv_task, lv_harassTrigger, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_PriorityTargetAttack_Init () {
    libCOMI_gt_PriorityTargetAttack = TriggerCreate("libCOMI_gt_PriorityTargetAttack_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AIDetectionManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AIDetectionManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point[7] lv_cloakedAttackerLocation;
    point lv_cloakedAttacker_Current;
    int lv_cloakedAttackerIter;
    bool lv_aIHasSeenCloakedUnit;
    bool lv_newCloakedAttacker;
    unit lv_bestDetector;
    unit lv_nearbyDetector;
    unitgroup lv_nearbyDetectors;
    string[6] lv_detectors;
    int lv_detectorsIter;
    unit lv_lastAttacker;
    int lv_playerWavesIter;
    int lv_playerIter;
    unit lv_attackWaveUnitIter;

    // Automatic Variable Declarations
    playergroup auto3F461774_g;
    int auto3F461774_var;
    int auto5B454CEB_ae;
    int auto5B454CEB_var;
    int auto62A946DE_ae;
    int auto62A946DE_var;
    playergroup autoE0B4BAF2_g;
    int autoE0B4BAF2_var;
    const int auto6C9E8A6C_ae = 5;
    const int auto6C9E8A6C_ai = 1;
    playergroup autoD7B3C3D7_g;
    int autoD7B3C3D7_var;
    const int auto7524CC91_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int auto7524CC91_ai = 1;
    int auto7A411C1C_ae;
    const int auto7A411C1C_ai = 1;
    unitgroup autoADEF27AE_g;
    int autoADEF27AE_u;

    // Variable Initialization
    lv_nearbyDetectors = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_detectors[1] = "Raven";
    lv_detectors[2] = "ScienceVessel";
    lv_detectors[3] = "Observer";
    lv_detectors[4] = "Oracle";
    lv_detectors[5] = "Overseer";
    auto3F461774_g = libCOMI_gf_GetEnemyPlayers();
    auto3F461774_var = -1;
    while (true) {
        auto3F461774_var = PlayerGroupNextPlayer(auto3F461774_g, auto3F461774_var);
        if (auto3F461774_var < 0) { break; }
        lv_aIHasSeenCloakedUnit = AISawCloakedUnit(auto3F461774_var);
        lv_cloakedAttacker_Current = AIGetCloakedAttacker(auto3F461774_var);
        if (((lv_aIHasSeenCloakedUnit == true) || (lv_cloakedAttacker_Current != null) || (libCOMI_gf_AISuspectDetectionDanger(auto3F461774_var) == true))) {
            libCOMI_gv_cM_CoopAI_AIDetection_Build = true;
            libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection = true;
        }

        if ((lv_cloakedAttacker_Current != null)) {
            lv_newCloakedAttacker = true;
            auto5B454CEB_ae = lv_cloakedAttackerIter;
            auto5B454CEB_var = 1;
            for ( ; auto5B454CEB_var <= auto5B454CEB_ae; auto5B454CEB_var += 1 ) {
                if ((DistanceBetweenPoints(lv_cloakedAttacker_Current, lv_cloakedAttackerLocation[auto5B454CEB_var]) < 5.0)) {
                    lv_newCloakedAttacker = false;
                    break;
                }

            }
            if ((lv_newCloakedAttacker == true)) {
                lv_cloakedAttackerIter += 1;
                lv_cloakedAttackerLocation[lv_cloakedAttackerIter] = lv_cloakedAttacker_Current;
            }

            lv_cloakedAttacker_Current = null;
        }

    }
    auto62A946DE_ae = lv_cloakedAttackerIter;
    auto62A946DE_var = 1;
    for ( ; auto62A946DE_var <= auto62A946DE_ae; auto62A946DE_var += 1 ) {
        autoE0B4BAF2_g = libCOMI_gv_cM_CoopAI_Players;
        autoE0B4BAF2_var = -1;
        while (true) {
            autoE0B4BAF2_var = PlayerGroupNextPlayer(autoE0B4BAF2_g, autoE0B4BAF2_var);
            if (autoE0B4BAF2_var < 0) { break; }
            lv_detectorsIter = 1;
            for ( ; ( (auto6C9E8A6C_ai >= 0 && lv_detectorsIter <= auto6C9E8A6C_ae) || (auto6C9E8A6C_ai < 0 && lv_detectorsIter >= auto6C9E8A6C_ae) ) ; lv_detectorsIter += auto6C9E8A6C_ai ) {
                lv_nearbyDetector = AIGrabUnit(autoE0B4BAF2_var, (lv_detectors[lv_detectorsIter]), c_prioStaticBully, lv_cloakedAttackerLocation[auto62A946DE_var]);
                UnitGroupAdd(lv_nearbyDetectors, lv_nearbyDetector);
            }
        }
        lv_bestDetector = UnitGroupClosestToPoint(lv_nearbyDetectors, lv_cloakedAttackerLocation[auto62A946DE_var]);
        if ((lv_bestDetector != null)) {
            libNtve_gf_AICast(lv_bestDetector, OrderTargetingPoint(AbilityCommand("attack", 0), lv_cloakedAttackerLocation[auto62A946DE_var]));
            autoD7B3C3D7_g = libCOMI_gf_GetEnemyPlayers();
            autoD7B3C3D7_var = -1;
            while (true) {
                autoD7B3C3D7_var = PlayerGroupNextPlayer(autoD7B3C3D7_g, autoD7B3C3D7_var);
                if (autoD7B3C3D7_var < 0) { break; }
                AIClearCloakedAttacker(autoD7B3C3D7_var, lv_cloakedAttackerLocation[auto62A946DE_var]);
            }
        }

        lv_nearbyDetectors = UnitGroupEmpty();
    }
    if ((libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == false)) {
        lv_playerIter = 3;
        for ( ; ( (auto7524CC91_ai >= 0 && lv_playerIter <= auto7524CC91_ae) || (auto7524CC91_ai < 0 && lv_playerIter >= auto7524CC91_ae) ) ; lv_playerIter += auto7524CC91_ai ) {
            auto7A411C1C_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
            lv_playerWavesIter = 0;
            for ( ; ( (auto7A411C1C_ai >= 0 && lv_playerWavesIter <= auto7A411C1C_ae) || (auto7A411C1C_ai < 0 && lv_playerWavesIter >= auto7A411C1C_ae) ) ; lv_playerWavesIter += auto7A411C1C_ai ) {
                if ((AIWaveUnitCount(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_playerIter][lv_playerWavesIter]) > 0)) {
                    autoADEF27AE_g = AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_playerIter][lv_playerWavesIter]);
                    autoADEF27AE_u = UnitGroupCount(autoADEF27AE_g, c_unitCountAll);
                    for (;; autoADEF27AE_u -= 1) {
                        lv_attackWaveUnitIter = UnitGroupUnitFromEnd(autoADEF27AE_g, autoADEF27AE_u);
                        if (lv_attackWaveUnitIter == null) { break; }
                        lv_lastAttacker = AILastAttacker(lv_attackWaveUnitIter);
                        if ((lv_lastAttacker != null) && (UnitFilterMatch(lv_lastAttacker, UnitGetOwner(lv_attackWaveUnitIter), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                            libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection = true;
                            break;
                        }

                    }
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AIDetectionManager_Init () {
    libCOMI_gt_CM_CoopAI_AIDetectionManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AIDetectionManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIDetectionManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AIDetectionManager, 2.8, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AIManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AIManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopIndex;
    int lv_playerArrayIndex;
    bool lv_firstWave;

    // Automatic Variable Declarations
    const int autoE4C113EF_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int autoE4C113EF_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopIndex = 0;
    for ( ; ( (autoE4C113EF_ai >= 0 && lv_loopIndex <= autoE4C113EF_ae) || (autoE4C113EF_ai < 0 && lv_loopIndex >= autoE4C113EF_ae) ) ; lv_loopIndex += autoE4C113EF_ai ) {
        lv_playerArrayIndex = (lv_loopIndex + (libCOMI_gv_cM_CoopAI_LastAIThinker + 1));
        lv_playerArrayIndex = ModI(lv_playerArrayIndex, (libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1));
        if ((libCOMI_gv_cM_CoopAIPlayer_Commander[lv_playerArrayIndex] != "None")) {
            libCOMI_gf_CM_AIThinkCoop(lv_playerArrayIndex);
            libCOMI_gv_cM_CoopAI_LastAIThinker = lv_playerArrayIndex;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AIManager_Init () {
    libCOMI_gt_CM_CoopAI_AIManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AIManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AIManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AIManager, 0.4375, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AttackWaveSetup
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AttackWaveSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_setupNextAttackWave;
    int lv_count;
    string lv_unitType;
    int lv_emptyWaveIndex;
    int lv_attackWaveIndex;
    wave lv_wave;
    int lv_startingTechStockIter;
    string lv_startingTechStockUnit;
    fixed lv_resourcesInWave;
    unit lv_resourceUnit;
    int lv_player;
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    const int auto5BD83473_ae = libCOMI_gv_cMC_CoopAI_MaxWaveCount;
    const int auto5BD83473_ai = 1;

    // Variable Initialization
    lv_count = 1;
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wave = EventPlayerWave();
    if ((lv_wave == null)) {
        return true;
    }

    lv_unitGroup = AIWaveGetUnits(EventPlayerWave());
    if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) == 0)) {
        return true;
    }

    lv_player = UnitGetOwner(UnitGroupUnit(lv_unitGroup, 1));
    if ((PlayerGroupHasPlayer(libCOMI_gv_cM_CoopAI_Players, lv_player) == false)) {
        return true;
    }

    lv_emptyWaveIndex = 0;
    for ( ; ( (auto5BD83473_ai >= 0 && lv_emptyWaveIndex <= auto5BD83473_ae) || (auto5BD83473_ai < 0 && lv_emptyWaveIndex >= auto5BD83473_ae) ) ; lv_emptyWaveIndex += auto5BD83473_ai ) {
        if ((libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_player][lv_emptyWaveIndex] == null)) {
            if ((lv_emptyWaveIndex > libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark)) {
                libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark = lv_emptyWaveIndex;
            }

            libCOMI_gv_cM_CoopAI_WaveShowPing[lv_player][lv_emptyWaveIndex] = true;
            libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_player][lv_emptyWaveIndex] = EventPlayerWave();
            if ((libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lv_player] == 1)) {
                libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lv_player][lv_emptyWaveIndex] = 0;
            }
            else {
                libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat[lv_player][lv_emptyWaveIndex] = UserDataGetInt("Compositions", libCOMI_gv_cM_CoopAIPlayer_Commander[lv_player], "X_BaseRetreatThreshold", 1);
            }
            break;
        }

    }
    libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count[lv_player] += 1;
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, true);
    if ((libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection == false)) {
        UnitGroupAddUnitGroup(libCOMI_gv_cM_CoopAI_AIDetection_AttackWave, lv_unitGroup);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AttackWaveSetup_Init () {
    libCOMI_gt_CM_CoopAI_AttackWaveSetup = TriggerCreate("libCOMI_gt_CM_CoopAI_AttackWaveSetup_Func");
    TriggerAddEventPlayerAIWave(libCOMI_gt_CM_CoopAI_AttackWaveSetup, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DropPod_Zerg_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DropPod_Zerg_DontWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_DropPod_Zerg_Wait(libCOMI_gv_cM_DropPod_TP_Location, libCOMI_gv_cM_DropPod_TP_Units, libCOMI_gv_cM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DropPod_Zerg_DontWait_Init () {
    libCOMI_gt_CM_DropPod_Zerg_DontWait = TriggerCreate("libCOMI_gt_CM_DropPod_Zerg_DontWait_Func");
    TriggerEnable(libCOMI_gt_CM_DropPod_Zerg_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DropPod_Terran_Don'tWait
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DropPod_Terran_DontWait_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_DropPod_Terran_Wait(libCOMI_gv_cM_DropPod_TP_Location, libCOMI_gv_cM_DropPod_TP_Units, libCOMI_gv_cM_DropPod_TP_Player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DropPod_Terran_DontWait_Init () {
    libCOMI_gt_CM_DropPod_Terran_DontWait = TriggerCreate("libCOMI_gt_CM_DropPod_Terran_DontWait_Func");
    TriggerEnable(libCOMI_gt_CM_DropPod_Terran_DontWait, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deffered Transmission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefferedTransmission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_defferedTransmissionLinkLocal;
    fixed lv_defferedTransmissionDelayLocal;
    fixed lv_defferedTransmissionDeferlocal;
    int lv_defferedTaskLocal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defferedTransmissionLinkLocal = libCOMI_gv_defferedTransmissionLink;
    lv_defferedTransmissionDelayLocal = libCOMI_gv_defferedTransmissionDelay;
    lv_defferedTransmissionDeferlocal = libCOMI_gv_defferedTransmissionDefer;
    lv_defferedTaskLocal = libCOMI_gv_defferedTask;

    // Conditions
    if (testConds) {
        if (!((UserDataGetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1) == 0))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1, 1);
    Wait(libCOMI_gv_defferedTransmissionDelay, c_timeReal);
    TriggerQueueEnter();
    if ((((lv_defferedTaskLocal != 0) && (libARRA_gf_TaskActive(lv_defferedTaskLocal) == false)) || (libCOMI_gf_GameIsOver() == true))) {
        UserDataSetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1, 0);
        return true;
    }

    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Speech);
    libCOMI_gf_SendMissionTransmission(lv_defferedTransmissionLinkLocal, true, -1);
    libCOMI_gf_SetAllSoundChannelVolumesCampaign(libCOMI_ge_VolumeChannelModeCampaign_Game);
    TriggerQueueExit();
    Wait(lv_defferedTransmissionDeferlocal, c_timeReal);
    UserDataSetInt("MissionTransmission", lv_defferedTransmissionLinkLocal, "Deffered", 1, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefferedTransmission_Init () {
    libCOMI_gt_DefferedTransmission = TriggerCreate("libCOMI_gt_DefferedTransmission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_HeroReviveQueue_HeroRevived
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_herounit;
    int lv_owner;
    string lv_herorevivesoundinstance;

    // Automatic Variable Declarations
    string auto5BDC1380_userType;
    int auto5BDC1380_i;

    // Variable Initialization
    lv_herounit = EventUnit();
    lv_owner = UnitGetOwner(lv_herounit);

    // Actions
    if (!runActions) {
        return true;
    }

    auto5BDC1380_userType = "HeroReviveSounds";
    auto5BDC1380_i = 1;
    for ( ; auto5BDC1380_i <= UserDataInstanceCount(auto5BDC1380_userType) ; auto5BDC1380_i += 1 ) {
        lv_herorevivesoundinstance = UserDataInstance(auto5BDC1380_userType, auto5BDC1380_i);
        if ((UserDataGetUnit("HeroReviveSounds", lv_herorevivesoundinstance, "HeroUnit", 1) == UnitGetType(lv_herounit)) && ((UserDataGetUpgrade("HeroReviveSounds", lv_herorevivesoundinstance, "RequiredUpgrade", 1) == null) || (TechTreeUpgradeCount(lv_owner, UserDataGetUpgrade("HeroReviveSounds", lv_herorevivesoundinstance, "RequiredUpgrade", 1), c_techCountCompleteOnly) > 0))) {
            libCOMI_gf_CM_HeroReviveQueue_PlaySound(SoundLink(UserDataGetSound("HeroReviveSounds", lv_herorevivesoundinstance, "HeroSound", 1), c_soundIndexAny), UserDataGetFixed("HeroReviveSounds", lv_herorevivesoundinstance, "HeroSoundDelay", 1), libCOMI_gf_GetAlliedCommandersPlayersCopy());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Init () {
    libCOMI_gt_CM_HeroReviveQueue_HeroRevived = TriggerCreate("libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Func");
    TriggerAddEventUnitRevive(libCOMI_gt_CM_HeroReviveQueue_HeroRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceSent
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceSent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceTradeAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent), PlayerGroupSingle(EventResourceTradeRecipient()));
    }
    else if ((EventResourceTradeAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent), PlayerGroupSingle(EventResourceTradeRecipient()));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent), PlayerGroupSingle(EventResourceTradeRecipient()));
    }
    libCOMI_gf_ThankYou(EventPlayer(), EventResourceTradeRecipient());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceSent_Init () {
    libCOMI_gt_CM_VOResourceSent = TriggerCreate("libCOMI_gt_CM_VOResourceSent_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceSent, false);
    TriggerAddEventResourceTrade(libCOMI_gt_CM_VOResourceSent, c_playerAny, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOResourceRequest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOResourceRequest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventResourceRequestAmount(c_resourceTypeMinerals) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested), PlayerGroupSingle(libCOMI_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if ((EventResourceRequestAmount(c_resourceTypeVespene) == 0)) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested), PlayerGroupSingle(libCOMI_gf_CC_PlayerAlly(EventPlayer())));
    }
    else if (true) {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(EventPlayer()), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(EventPlayer()), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested), PlayerGroupSingle(libCOMI_gf_CC_PlayerAlly(EventPlayer())));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOResourceRequest_Init () {
    libCOMI_gt_CM_VOResourceRequest = TriggerCreate("libCOMI_gt_CM_VOResourceRequest_Func");
    TriggerEnable(libCOMI_gt_CM_VOResourceRequest, false);
    TriggerAddEventResourceRequest(libCOMI_gt_CM_VOResourceRequest, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOUnitsLostCheck
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOUnitsLostCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_lastKnownArmySize;
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_highestArmySize;
    fixed lv_currentArmySize;
    int lv_indexPlayer;
    unit lv_indexUnit;
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_percentThreshold;

    // Automatic Variable Declarations
    playergroup auto6F85AF09_g;
    playergroup autoBA9689F6_g;
    unitgroup auto7D09EFD3_g;
    int auto7D09EFD3_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F85AF09_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6F85AF09_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer) == "Zagara")) {
            lv_percentThreshold[lv_indexPlayer] = 0.2;
        }
        else {
            lv_percentThreshold[lv_indexPlayer] = 0.4;
        }
    }
    while (true) {
        Wait(10.0, c_timeGame);
        if ((libCOMI_gf_GameIsOver() == true)) {
            return true;
        }

        autoBA9689F6_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoBA9689F6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_currentArmySize = 0;
            auto7D09EFD3_g = UnitGroup(null, lv_indexPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            auto7D09EFD3_u = UnitGroupCount(auto7D09EFD3_g, c_unitCountAll);
            for (;; auto7D09EFD3_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto7D09EFD3_g, auto7D09EFD3_u);
                if (lv_indexUnit == null) { break; }
                if (((UnitTestState(lv_indexUnit, c_unitStateUsingSupply) == false) || ((libNtve_gf_UnitIsHidden(lv_indexUnit) == true) && (libNtve_gf_UnitIsInsideTransport(lv_indexUnit) == false)))) {
                    continue;
                }
                else if ((UnitFilterMatch(lv_indexUnit, lv_indexPlayer, UnitFilter((1 << c_targetFilterWorker), 0, 0, 0)) == true) && (UnitGetType(lv_indexUnit) != "SCVMengsk")) {
                    continue;
                }
                lv_currentArmySize += UnitGetPropertyFixed(lv_indexUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
            if ((lv_currentArmySize > lv_highestArmySize[lv_indexPlayer])) {
                lv_highestArmySize[lv_indexPlayer] = lv_currentArmySize;
                continue;
            }

            if (((lv_lastKnownArmySize[lv_indexPlayer] - lv_currentArmySize) >= 10.0) && ((lv_currentArmySize / lv_highestArmySize[lv_indexPlayer]) <= lv_percentThreshold[lv_indexPlayer]) && ((lv_highestArmySize[lv_indexPlayer] - lv_currentArmySize) >= 20.0)) {
                libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_indexPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_indexPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost), PlayerGroupAll());
                Wait(60.0, c_timeGame);
                TriggerExecute(libCOMI_gt_CM_VOUnitsLostCheck, true, false);
                return true;
            }

            lv_lastKnownArmySize[lv_indexPlayer] = lv_currentArmySize;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOUnitsLostCheck_Init () {
    libCOMI_gt_CM_VOUnitsLostCheck = TriggerCreate("libCOMI_gt_CM_VOUnitsLostCheck_Func");
    TriggerEnable(libCOMI_gt_CM_VOUnitsLostCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemySpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemySpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyPlayer;
    int lv_userPlayer;
    unit lv_enemyUnit;
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_attackingPlayer;
    int lv_attackedPlayer;

    // Automatic Variable Declarations
    string auto14B6B300_val;

    // Variable Initialization
    lv_attackingUnit = EventUnitTarget();
    lv_attackedUnit = EventUnit();
    lv_attackingPlayer = UnitGetOwner(lv_attackingUnit);
    lv_attackedPlayer = UnitGetOwner(lv_attackedUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_attackedPlayer) == true) && ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyAIPlayers(), lv_attackingPlayer) == true) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyHumanPlayers(), lv_attackingPlayer) == true))) {
        lv_enemyPlayer = lv_attackingPlayer;
        lv_enemyUnit = lv_attackingUnit;
        lv_userPlayer = lv_attackedPlayer;
    }
    else if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), lv_attackingPlayer) == true) && ((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyAIPlayers(), lv_attackedPlayer) == true) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyHumanPlayers(), lv_attackedPlayer) == true))) {
        lv_enemyPlayer = lv_attackedPlayer;
        lv_enemyUnit = lv_attackedUnit;
        lv_userPlayer = lv_attackingPlayer;
    }
    else if (true) {
        return true;
    }
    if (((libARRA_gf_GetUnitRace(lv_enemyUnit) == "Hybr") || (libARRA_gf_GetUnitRace(lv_enemyUnit) == "Neut"))) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto14B6B300_val = PlayerRace(lv_enemyPlayer);
    if (auto14B6B300_val == "Prot") {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_userPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "Terr") {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_userPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran), PlayerGroupAll());
    }
    else if (auto14B6B300_val == "Zerg") {
        libCOMI_gf_CM_CommanderVOSend(libCOMI_gf_CC_PlayerAlly(lv_userPlayer), libCOMI_gf_CC_CommanderVOLine(libCOMI_gf_ActiveCommanderForPlayer(lv_userPlayer), libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg), PlayerGroupAll());
    }
    else {
    }
    libCOMI_gf_CU_EnemyBriefShowHide(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemySpotted_Init () {
    libCOMI_gt_CM_VOEnemySpotted = TriggerCreate("libCOMI_gt_CM_VOEnemySpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemySpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemySpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_VOEnemyCloakedSpotted
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_VOEnemyCloakedSpotted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_userPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitFilterMatch(EventUnitTarget(), EventPlayer(), UnitFilter((1 << c_targetFilterCloaked), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false) || (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), UnitGetOwner(EventUnitTarget())) == true) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(EventUnitTarget()), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false) || (TriggerQueueIsEmpty() == false))) {
        return true;
    }

    lv_userPlayer = EventPlayer();
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueEnter();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDetectPing", UnitGetPosition(EventUnitTarget()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 10.0, 270.0);
    libCOMI_gf_SendMissionTransmission("CloakedUnitsSpotted", true, lv_userPlayer);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_VOEnemyCloakedSpotted_Init () {
    libCOMI_gt_CM_VOEnemyCloakedSpotted = TriggerCreate("libCOMI_gt_CM_VOEnemyCloakedSpotted_Func");
    TriggerEnable(libCOMI_gt_CM_VOEnemyCloakedSpotted, false);
    TriggerAddEventUnitAttacked2(libCOMI_gt_CM_VOEnemyCloakedSpotted, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_TransmissionSend
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_TransmissionSend_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 1);
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libCOMI_gv_cM_TransmissionSource) == true)) {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", libCOMI_gf_CC_CommanderGender(libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gf_CC_PlayerAlly(libCOMI_gv_cM_TransmissionSource))));
        }

        UserDataSetInt("Commanders", libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 1);
    }
    else {
        if (((libCOMI_gv_cM_TransmissionCurrentType == "AttackWave") || (libCOMI_gv_cM_TransmissionCurrentType == "CloakedUnitsSpotted"))) {
            ConversationDataSetListenerGender("acAttackWave", c_genderDefault);
        }

    }
    libCOMI_gf_CM_TransmissionUpdateConvoPlayers(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1));
    ConversationDataRun(UserDataGetGameLink("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "Conversation", 1), libCOMI_gf_GetNonDefeatedPlayers(), c_conversationSkipNone, true);
    while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
        Wait(0.0625, c_timeGame);
    }
    if ((RandomInt(1, 100) <= UserDataGetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "ResponseChance", 1))) {
        ConversationDataRun("acResponses", libCOMI_gf_GetNonDefeatedPlayers(), c_conversationSkipNone, true);
        while (!((libCOMI_gf_CM_PlayerHasTransmission(1) == false) && (libCOMI_gf_CM_PlayerHasTransmission(2) == false))) {
            Wait(0.0625, c_timeGame);
        }
    }

    UserDataSetInt("MissionTransmission", libCOMI_gv_cM_TransmissionCurrentType, "PlayingNow", 1, 0);
    libCOMI_gv_cM_TransmissionCurrentType = null;
    if ((libCOMI_gv_cM_TransmissionSource != -1) && (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), libCOMI_gv_cM_TransmissionSource) == true)) {
        UserDataSetInt("Commanders", libCOMI_gf_ActiveCommanderForPlayer(libCOMI_gv_cM_TransmissionSource), "SendingTransmission", 1, 0);
    }

    libCOMI_gv_cM_TransmissionCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_TransmissionSend_Init () {
    libCOMI_gt_CM_TransmissionSend = TriggerCreate("libCOMI_gt_CM_TransmissionSend_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_SendTransmissionCampaignTick
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_SendTransmissionCampaignTick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCOMI_gv_cM_SendTransmissionCampaignIndex == 0) && (libCOMI_gv_cM_SendTransmissionCampaignPlayingTick > 0)) {
            libCOMI_gv_cM_SendTransmissionCampaignPlayingTick -= 1;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_SendTransmissionCampaignTick_Init () {
    libCOMI_gt_CM_SendTransmissionCampaignTick = TriggerCreate("libCOMI_gt_CM_SendTransmissionCampaignTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_AttackWavePingManager
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pingGroupIter;
    int lv_attackWavePlayerIterPrimary;
    int lv_attackWavePingIterPrimary;
    unit lv_pingableUnitIter;
    bool lv_addedUnitToGroup;
    bool lv_foundWorthyUnit;

    // Automatic Variable Declarations
    const int autoFAE2A104_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int autoFAE2A104_ai = 1;
    playergroup autoB34DF2A3_g;
    int autoDC457FFC_ae;
    const int autoDC457FFC_ai = 1;
    unitgroup auto8125420D_g;
    int auto8125420D_u;
    const int autoC3A72AF9_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int autoC3A72AF9_ai = 1;
    const int auto57362279_ae = libCOMI_gv_cMC_CoopAI_MaxPingCount;
    const int auto57362279_ai = 1;
    unitgroup auto04F62776_g;
    int auto04F62776_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingGroupIter = 0;
    for ( ; ( (autoFAE2A104_ai >= 0 && lv_pingGroupIter <= autoFAE2A104_ae) || (autoFAE2A104_ai < 0 && lv_pingGroupIter >= autoFAE2A104_ae) ) ; lv_pingGroupIter += autoFAE2A104_ai ) {
        UnitGroupClear(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]);
    }
    autoB34DF2A3_g = libCOMI_gv_cM_CoopAI_Players;
    lv_attackWavePlayerIterPrimary = -1;
    while (true) {
        lv_attackWavePlayerIterPrimary = PlayerGroupNextPlayer(autoB34DF2A3_g, lv_attackWavePlayerIterPrimary);
        if (lv_attackWavePlayerIterPrimary < 0) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gv_cM_CoopAI_DontPingPlayers, lv_attackWavePlayerIterPrimary) == true)) {
            continue;
        }

        autoDC457FFC_ae = libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
        lv_attackWavePingIterPrimary = 0;
        for ( ; ( (autoDC457FFC_ai >= 0 && lv_attackWavePingIterPrimary <= autoDC457FFC_ae) || (autoDC457FFC_ai < 0 && lv_attackWavePingIterPrimary >= autoDC457FFC_ae) ) ; lv_attackWavePingIterPrimary += autoDC457FFC_ai ) {
            if ((libCOMI_gv_cM_CoopAI_DontPingWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] == false) && (libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary] != null) && (AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary]) != null)) {
                auto8125420D_g = AIWaveGetUnits(libCOMI_gv_cM_CoopAIPlayer_AttackWaves[lv_attackWavePlayerIterPrimary][lv_attackWavePingIterPrimary]);
                auto8125420D_u = UnitGroupCount(auto8125420D_g, c_unitCountAll);
                for (;; auto8125420D_u -= 1) {
                    lv_pingableUnitIter = UnitGroupUnitFromEnd(auto8125420D_g, auto8125420D_u);
                    if (lv_pingableUnitIter == null) { break; }
                    lv_addedUnitToGroup = false;
                    lv_pingGroupIter = 0;
                    for ( ; ( (autoC3A72AF9_ai >= 0 && lv_pingGroupIter <= autoC3A72AF9_ae) || (autoC3A72AF9_ai < 0 && lv_pingGroupIter >= autoC3A72AF9_ae) ) ; lv_pingGroupIter += autoC3A72AF9_ai ) {
                        if (((UnitGroupCount(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], c_unitCountAlive) == 0) || ((UnitGroupCount(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]), UnitGetPosition(lv_pingableUnitIter)) <= libCOMI_gv_cM_CoopAI_PingCombineDist)))) {
                            UnitGroupAdd(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], lv_pingableUnitIter);
                            lv_addedUnitToGroup = true;
                            break;
                        }

                    }
                    if ((lv_addedUnitToGroup == false)) {
                        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_B90F2179"), true);
                    }

                }
            }

        }
    }
    lv_pingGroupIter = 0;
    for ( ; ( (auto57362279_ai >= 0 && lv_pingGroupIter <= auto57362279_ae) || (auto57362279_ai < 0 && lv_pingGroupIter >= auto57362279_ae) ) ; lv_pingGroupIter += auto57362279_ai ) {
        lv_foundWorthyUnit = false;
        auto04F62776_g = libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter];
        auto04F62776_u = UnitGroupCount(auto04F62776_g, c_unitCountAll);
        for (;; auto04F62776_u -= 1) {
            lv_pingableUnitIter = UnitGroupUnitFromEnd(auto04F62776_g, auto04F62776_u);
            if (lv_pingableUnitIter == null) { break; }
            if ((libCOMI_gf_CM_CoopAI_PingWorthyUnit(lv_pingableUnitIter) == true)) {
                lv_foundWorthyUnit = true;
                break;
            }

        }
        if ((lv_foundWorthyUnit == true)) {
            if ((libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), libARRA_gf_GetPlayerStartPosition(UnitGetOwner(UnitGroupUnit(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter], 1))), 270.0, "PingDiamond", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = PingLastCreated();
                PingSetTooltip(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], StringExternal("Param/Value/lib_COMI_488AE332"));
                PingSetScale(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], 0.3);
            }

            PingSetPosition(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter], UnitGroupCenterOfGroup(libCOMI_gv_cM_CoopAI_PingGroups[lv_pingGroupIter]));
        }
        else {
            PingDestroy(libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter]);
            libCOMI_gv_cM_CoopAI_PingGroupPing[lv_pingGroupIter] = c_invalidPingId;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init () {
    libCOMI_gt_CM_CoopAI_AttackWavePingManager = TriggerCreate("libCOMI_gt_CM_CoopAI_AttackWavePingManager_Func");
    TriggerEnable(libCOMI_gt_CM_CoopAI_AttackWavePingManager, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CM_CoopAI_AttackWavePingManager, 0.5625, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Ping Sound
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VoidPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MutatorIsEnabled("BlackFog") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("UI_TerranPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("UI_TerranPing", -1)), c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VoidPingSound_Init () {
    libCOMI_gt_VoidPingSound = TriggerCreate("libCOMI_gt_VoidPingSound_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_Score_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vBackgroundDialogPanel;
    string lv_vCommander;
    string lv_vCommander2;

    // Automatic Variable Declarations
    playergroup autoF6A1EDC0_g;
    int autoF6A1EDC0_var;

    // Variable Initialization
    lv_vBackgroundDialogPanel = c_invalidDialogControlId;
    lv_vCommander = libCOMI_gf_ActiveCommanderForPlayer3(1);
    lv_vCommander2 = libCOMI_gf_ActiveCommanderForPlayer3(2);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMI_gt_CM_AbortMission, false);
    Wait(0.0, c_timeReal);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UISetWorldVisible(PlayerGroupAll(), false);
    autoF6A1EDC0_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoF6A1EDC0_var = -1;
    while (true) {
        autoF6A1EDC0_var = PlayerGroupNextPlayer(autoF6A1EDC0_g, autoF6A1EDC0_var);
        if (autoF6A1EDC0_var < 0) { break; }
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[autoF6A1EDC0_var], PlayerGroupSingle(autoF6A1EDC0_var), false);
    }
    TriggerEnable(libARRA_gt_UT_Graph_Timer, false);
    libARRA_gf_UT_Graph_HideAllGraphsExcept(0, 1);
    libARRA_gf_UT_Graph_HideAllGraphsExcept(0, 2);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCOMI_gf_MuteUnmuteAllSoundChannelsExcept(true, c_soundCategoryUI, PlayerGroupAll());
    GameSetMissionTimePaused(true);
    UnitPauseAll(true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetRenderPriority(DialogLastCreated(), 550);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1100, 50, c_anchorTop, 0, 90, GameMapName(), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_MapTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 0.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 1050, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_EnemyCompName", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 1.5, 15.0);
    libCOMI_gf_AF_MutatorIconsCreate(DialogLastCreated());
    libCOMI_gf_AF_MasteryInfoCreate(DialogLastCreated(), 1);
    libCOMI_gf_AF_MasteryInfoCreate(DialogLastCreated(), 2);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "AF_ScoreBackground/Scorebackgrond");
    lv_vBackgroundDialogPanel = DialogControlLastCreated();
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_Image");
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageLeft");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOMI_gf_UT_CommanderLoadingImage(lv_vCommander), PlayerGroupAll());
    DialogControlHookup(lv_vBackgroundDialogPanel, c_triggerControlTypeImage, "Scorebackgrond_PlayerImageRight");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libCOMI_gf_UT_CommanderLoadingImage(lv_vCommander2), PlayerGroupAll());
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(lv_vBackgroundDialogPanel, PlayerGroupAll(), 1.5, 0.0);
    if ((libARRA_gv_uT_CheatUsed == true)) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 40, 30, c_anchorTopRight, 5, 5, StringExternal("Param/Value/lib_COMI_D9B5B9DD"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COMI_34E12E00"), PlayerGroupAll());
    }

    Wait(1.5, c_timeGame);
    TriggerExecute(libCOMI_gt_AF_Score_GraphsandCharts, true, false);
    TriggerExecute(libCOMI_gt_AF_Score_SwitchButtonCreate, true, false);
    TriggerExecute(libCOMI_gt_AF_Score_QuitButtonCreate, true, false);
    TriggerExecute(libCOMI_gt_AF_Score_MissionsButtonCreate, true, false);
    TriggerExecute(libCOMI_gt_CreateMissionsDialog, true, false);
    DialogSetVisible(libCOMI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_Score_Init () {
    libCOMI_gt_AF_Score = TriggerCreate("libCOMI_gt_AF_Score_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Graphs and Charts
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_Score_GraphsandCharts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    int lv_vIndex;
    string[11] lv_vUnitTemp;
    int[11] lv_vDamageTemp;
    int lv_vTotalDamage;

    // Automatic Variable Declarations
    const int auto64549114_ae = 2;
    int auto64549114_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph"));
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOMI_gv_aF_Score_KillGraph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/FullBackground"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/CloseImage"));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/InnerBackground"));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\white.dds", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/LeftAxisImage"));
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 0.0);
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/GraphFrame/RightAxisImage"));
    libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeAdd, PlayerGroupAll());
    auto64549114_var = 1;
    for ( ; auto64549114_var <= auto64549114_ae; auto64549114_var += 1 ) {
        libARRA_gf_UT_Graph_HideAllGraphsExcept(4, auto64549114_var);
    }
    libARRA_gf_UT_CreatePieChartfromDamageLog(1, -350, 75, c_anchorCenter, 0);
    libCOMI_gv_aF_Score_PieCharts[1] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libARRA_gf_UT_CreatePieChartfromDamageLog(2, 350, 75, c_anchorCenter, 8);
    libCOMI_gv_aF_Score_PieCharts[2] = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libCOMI_gv_aF_KillNumbers = DialogLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_Score_GraphsandCharts_Init () {
    libCOMI_gt_AF_Score_GraphsandCharts = TriggerCreate("libCOMI_gt_AF_Score_GraphsandCharts_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_SwitchButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_Score_SwitchButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 50, c_anchorBottomLeft, 80, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/lib_COMI_C4F2D389"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libCOMI_gv_aF_Score_FinalButtonLabel[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottomLeft, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOMI_gv_aF_Score_FinalButton[0] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COMI_5316E4A3"), PlayerGroupAll());
    TriggerEnable(libCOMI_gt_AF_Score_FinalButtonClicked, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_Score_SwitchButtonCreate_Init () {
    libCOMI_gt_AF_Score_SwitchButtonCreate = TriggerCreate("libCOMI_gt_AF_Score_SwitchButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_MissionsButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_Score_MissionsButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 50, c_anchorBottomLeft, 900, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 0, StringExternal("Param/Value/lib_COMI_67B18601"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 5000, PlayerGroupAll());
    libCOMI_gv_aF_Score_FinalButtonLabel[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 300, 50, c_anchorBottom, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 5000, PlayerGroupAll());
    libCOMI_gv_aF_Score_FinalButton[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COMI_F39CCBB4"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_Score_MissionsButtonCreate_Init () {
    libCOMI_gt_AF_Score_MissionsButtonCreate = TriggerCreate("libCOMI_gt_AF_Score_MissionsButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_QuitButtonCreate
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_Score_QuitButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(200, 50, c_anchorBottomRight, 75, 50, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 610);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/lib_COMI_BAEB517D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "FinalScoreButton", PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 4.0, 20.0);
    libCOMI_gv_aF_Score_FinalButtonLabel[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorBottomRight, 0, 0, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libCOMI_gv_aF_Score_FinalButton[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_COMI_FE1EA4ED"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_Score_QuitButtonCreate_Init () {
    libCOMI_gt_AF_Score_QuitButtonCreate = TriggerCreate("libCOMI_gt_AF_Score_QuitButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_Score_Final Button Clicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_Score_FinalButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8A6FD1CE_val;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_aF_Score_FinalButton[0]) || (EventDialogControl() == libCOMI_gv_aF_Score_FinalButton[1]) || (EventDialogControl() == libCOMI_gv_aF_Score_FinalButton[2])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8A6FD1CE_val = EventDialogControl();
    if (auto8A6FD1CE_val == libCOMI_gv_aF_Score_FinalButton[0]) {
        if ((libCOMI_gv_aF_Score_GraphVisible[EventPlayer()] == true)) {
            DialogControlFadeTransparency(libCOMI_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 100.0);
            Wait(0.5, c_timeGame);
            DialogSetVisible(libCOMI_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(libCOMI_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), true);
            libCOMI_gv_aF_Score_GraphVisible[EventPlayer()] = false;
        }
        else {
            DialogSetVisible(libCOMI_gv_aF_Score_PieCharts[1], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(libCOMI_gv_aF_Score_PieCharts[2], PlayerGroupSingle(EventPlayer()), false);
            DialogControlFadeTransparency(libCOMI_gv_aF_Score_KillGraph, PlayerGroupSingle(EventPlayer()), 0.3, 0.0);
            libCOMI_gv_aF_Score_GraphVisible[EventPlayer()] = true;
        }
    }
    else if (auto8A6FD1CE_val == libCOMI_gv_aF_Score_FinalButton[1]) {
        SoundPlayForPlayer(SoundLink("UI_Void_Error_Back", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        Wait(1.0, c_timeGame);
        GameOver(EventPlayer(), libCOMI_gv_cM_EndMissionResult[EventPlayer()], false, true);
    }
    else if (auto8A6FD1CE_val == libCOMI_gv_aF_Score_FinalButton[2]) {
        if ((DialogIsVisible(libCOMI_gv_selectMissionDialogBig, EventPlayer()) == true)) {
            DialogSetVisible(libCOMI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            DialogSetVisible(libCOMI_gv_selectMissionDialogBig, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_Score_FinalButtonClicked_Init () {
    libCOMI_gt_AF_Score_FinalButtonClicked = TriggerCreate("libCOMI_gt_AF_Score_FinalButtonClicked_Func");
    TriggerEnable(libCOMI_gt_AF_Score_FinalButtonClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_AF_Score_FinalButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDebugDisplay
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CC_ScoreDebugDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_humanPlayer;
    int lv_scorePlayer;

    // Automatic Variable Declarations
    playergroup auto7D19AFDB_g;
    playergroup autoA0199886_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7D19AFDB_g = libCOMI_gf_HumanPlayers();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto7D19AFDB_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        autoA0199886_g = libCOMI_gf_HumanPlayers();
        lv_scorePlayer = -1;
        while (true) {
            lv_scorePlayer = PlayerGroupNextPlayer(autoA0199886_g, lv_scorePlayer);
            if (lv_scorePlayer < 0) { break; }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CC_ScoreDebugDisplay_Init () {
    libCOMI_gt_CC_ScoreDebugDisplay = TriggerCreate("libCOMI_gt_CC_ScoreDebugDisplay_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CC_ScoreDebugDisplay, c_playerAny, "scores", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreEnemiesKilled
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CC_ScoreEnemiesKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() != c_playerAny))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetNonDefeatedPlayers(), libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(libNtve_gf_KillingPlayer(), "UnitsStructuresKilled", (PlayerScoreValueGetAsInt(libNtve_gf_KillingPlayer(), "UnitsStructuresKilled")+1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CC_ScoreEnemiesKilled_Init () {
    libCOMI_gt_CC_ScoreEnemiesKilled = TriggerCreate("libCOMI_gt_CC_ScoreEnemiesKilled_Func");
    TriggerAddEventUnitDied(libCOMI_gt_CC_ScoreEnemiesKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC_ScoreDynDmgTaken
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CC_ScoreDynDmgTaken_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scoreIndex;
    fixed lv_newScore;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int auto933A75B4_ae;
    const int auto933A75B4_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto933A75B4_ae = libCOMI_gv_cC_ScoreTrackedDmgTakenCount;
    lv_scoreIndex = 1;
    for ( ; ( (auto933A75B4_ai >= 0 && lv_scoreIndex <= auto933A75B4_ae) || (auto933A75B4_ai < 0 && lv_scoreIndex >= auto933A75B4_ae) ) ; lv_scoreIndex += auto933A75B4_ai ) {
        if ((UnitGroupHasUnit(DataTableGetUnitGroup(true, ("CC_ScoreGroup_" + IntToString(lv_scoreIndex))), EventUnit()) == true) && (PlayerGroupHasPlayer(libCOMI_gf_GetNonDefeatedPlayers(), EventUnitDamageSourcePlayer()) == true)) {
            lv_newScore = (DataTableGetFixed(true, ("CC_ScoreVal_" + IntToString(lv_scoreIndex) + "_" + IntToString(EventUnitDamageSourcePlayer()))) + EventUnitDamageAmount());
            DataTableSetFixed(true, ("CC_ScoreVal_" + IntToString(lv_scoreIndex) + "_" + IntToString(EventUnitDamageSourcePlayer())), lv_newScore);
            PlayerScoreValueSetFromInt(EventUnitDamageSourcePlayer(), (DataTableGetString(true, ("CC_ScoreType_" + IntToString(lv_scoreIndex)))), FixedToInt(lv_newScore));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CC_ScoreDynDmgTaken_Init () {
    libCOMI_gt_CC_ScoreDynDmgTaken = TriggerCreate("libCOMI_gt_CC_ScoreDynDmgTaken_Func");
    TriggerEnable(libCOMI_gt_CC_ScoreDynDmgTaken, false);
    TriggerAddEventUnitDamaged(libCOMI_gt_CC_ScoreDynDmgTaken, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat Base Dead
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CheatBaseDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2F48E04D_g;
    int auto2F48E04D_u;
    unit auto2F48E04D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F48E04D_g = UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter((1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2F48E04D_u = UnitGroupCount(auto2F48E04D_g, c_unitCountAll);
    for (;; auto2F48E04D_u -= 1) {
        auto2F48E04D_var = UnitGroupUnitFromEnd(auto2F48E04D_g, auto2F48E04D_u);
        if (auto2F48E04D_var == null) { break; }
        UnitKill(auto2F48E04D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CheatBaseDead_Init () {
    libCOMI_gt_CheatBaseDead = TriggerCreate("libCOMI_gt_CheatBaseDead_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CheatBaseDead, c_playerAny, "-cheatdead", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Fanfare - Base Dead
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefeatFanfareBaseDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_message;

    // Automatic Variable Declarations
    playergroup autoF484A481_g;
    int autoF484A481_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF484A481_g = libCOMI_gf_GetAlliedCommandersPlayers();
    autoF484A481_var = -1;
    while (true) {
        autoF484A481_var = PlayerGroupNextPlayer(autoF484A481_g, autoF484A481_var);
        if (autoF484A481_var < 0) { break; }
        if ((libCOMI_gv_lastKilledUnitOwner == autoF484A481_var)) {
            lv_message = StringExternal("Param/Value/lib_COMI_F5DB1EC5");
        }
        else {
            lv_message = StringExternal("Param/Value/lib_COMI_15B8BF74");
        }
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupSingle(autoF484A481_var), libCOMI_ge_CampaignMessageType_MissionFailed, lv_message, libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    libCOMI_gf_MoveCameraForAllPlayers(libCOMI_gv_lastKilledUnitPosition, 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefeatFanfareBaseDead_Init () {
    libCOMI_gt_DefeatFanfareBaseDead = TriggerCreate("libCOMI_gt_DefeatFanfareBaseDead_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Base Dead
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefeatBaseDead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((libCOMI_gf_PlayerInCinematicModeCampaign() == false))) {
            return false;
        }

        if (!((libNtve_gf_UnitGroupIsDead(UnitGroup(null, EventPlayer(), null, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gv_lastKilledUnitOwner = UnitGetOwner(EventUnit());
    libCOMI_gv_lastKilledUnitPosition = UnitGetPosition(EventUnit());
    libCOMI_gf_RunMissionVictorySequence2(libCOMI_gt_DefeatFanfareBaseDead, c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefeatBaseDead_Init () {
    libCOMI_gt_DefeatBaseDead = TriggerCreate("libCOMI_gt_DefeatBaseDead_Func");
    TriggerEnable(libCOMI_gt_DefeatBaseDead, false);
    TriggerAddEventUnitDied(libCOMI_gt_DefeatBaseDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Cheat
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_VictoryCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_VictoryCheat_Init () {
    libCOMI_gt_VictoryCheat = TriggerCreate("libCOMI_gt_VictoryCheat_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_VictoryCheat, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Defeat Cheat
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_DefeatCheat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libCOMI_gf_EndCampaignMission(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_DefeatCheat_Init () {
    libCOMI_gt_DefeatCheat = TriggerCreate("libCOMI_gt_DefeatCheat_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_DefeatCheat, c_playerAny, c_gameResultDefeat);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_Abort Mission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_AbortMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestStop();
    libCOMI_gv_cM_EndMissionResult[EventPlayer()] = c_gameOverDefeat;
    libCOMI_gf_CC_PlayerAwardMissionXP(c_gameOverDefeat, EventPlayer());
    libCOMI_gf_SetPlayerDefeated(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_AbortMission_Init () {
    libCOMI_gt_CM_AbortMission = TriggerCreate("libCOMI_gt_CM_AbortMission_Func");
    TriggerAddEventAbortMission(libCOMI_gt_CM_AbortMission, c_playerAny);
    TriggerAddEventGameMenuItemSelected(libCOMI_gt_CM_AbortMission, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionHandlePlayerQuit Nydus Tricks
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionHandlePlayerQuitNydusTricks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto34817916_g;
    int auto34817916_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libCOMI_gf_GameIsOver() == false)) {
        auto34817916_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
        auto34817916_var = -1;
        while (true) {
            auto34817916_var = PlayerGroupNextPlayer(auto34817916_g, auto34817916_var);
            if (auto34817916_var < 0) { break; }
            TechTreeUpgradeAddLevel(auto34817916_var, "NydusNetworkCoopAllyLeft", 1);
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionHandlePlayerQuitNydusTricks_Init () {
    libCOMI_gt_CM_MissionHandlePlayerQuitNydusTricks = TriggerCreate("libCOMI_gt_CM_MissionHandlePlayerQuitNydusTricks_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CM_MissionHandlePlayerQuitNydusTricks, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionHandlePlayerQuitGameEnd
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto4B8F39D4_g;
    playergroup auto3501898E_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B8F39D4_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto4B8F39D4_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerStatus(lv_player) == c_playerStatusActive)) {
            return true;
        }

    }
    auto3501898E_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto3501898E_g, lv_player);
        if (lv_player < 0) { break; }
        GameOver(lv_player, c_gameOverDefeat, false, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Init () {
    libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd = TriggerCreate("libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Func");
    TriggerAddEventPlayerLeft(libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionScoreScreenExited
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionScoreScreenExited_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerScoreValueGetAsInt(libCOMI_gf_CU_ScoreTriggeringPlayer(), "MutatorIsWeeklyChallenge") == 999)) {
        GameOver(libCOMI_gf_CU_ScoreTriggeringPlayer(), c_gameOverVictory, false, false);
        return true;
    }

    GameOver(libCOMI_gf_CU_ScoreTriggeringPlayer(), libCOMI_gv_cM_EndMissionResult[libCOMI_gf_CU_ScoreTriggeringPlayer()], false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionScoreScreenExited_Init () {
    libCOMI_gt_CM_MissionScoreScreenExited = TriggerCreate("libCOMI_gt_CM_MissionScoreScreenExited_Func");
    libCOMI_gf_CU_ScoreClosed(libCOMI_gt_CM_MissionScoreScreenExited);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCheatEndMission
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCheatEndMission_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_EndCampaignMission(c_gameOverVictory);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCheatEndMission_Init () {
    libCOMI_gt_CM_MissionVictoryCheatEndMission = TriggerCreate("libCOMI_gt_CM_MissionVictoryCheatEndMission_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueueOneMinute
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = true;
    Wait(60.0, c_timeReal);
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init () {
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute = TriggerCreate("libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_MissionVictoryCallbackBlockActionQueue
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = true;
    while (true) {
        Wait(10.0, c_timeReal);
    }
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Init () {
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue = TriggerCreate("libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_MissionEnds
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_MissionEnds_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_aF_MissionTime = GameGetMissionTime();
    PerfTestStop();
    TriggerStop(libCOMI_gt_CM_CampaignMissionPerfLog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_MissionEnds_Init () {
    libCOMI_gt_AF_MissionEnds = TriggerCreate("libCOMI_gt_AF_MissionEnds_Func");
    TriggerAddEventGeneric(libCOMI_gt_AF_MissionEnds, "UT_MissionEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOn_Init () {
    libCOMI_gt_CM_CinematicModeOn = TriggerCreate("libCOMI_gt_CM_CinematicModeOn_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOn, "CinematicModeOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CinematicModeOff
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CinematicModeOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CinematicModeOff_Init () {
    libCOMI_gt_CM_CinematicModeOff = TriggerCreate("libCOMI_gt_CM_CinematicModeOff_Func");
    TriggerAddEventGeneric(libCOMI_gt_CM_CinematicModeOff, "CinematicModeOff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionIntroZoomIn
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_originalDistance;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto3DF840ED_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationImmediate, true);
    CinematicFade(true, 1.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    auto3DF840ED_g = libCOMI_gf_GetAlliedCommandersPlayersCopy();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto3DF840ED_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_originalDistance = CameraGetDistance(lv_indexPlayer);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, (lv_originalDistance+8.0), 0.0, -1, 10.0);
        CameraSetValue(lv_indexPlayer, c_cameraValueDistance, lv_originalDistance, 1.5, -1, 10.0);
    }
    Wait(1.5, c_timeGame);
    libCOMI_gf_CinematicModeCampaign(false, 1.0, false);
    UnitPauseAll(false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init () {
    libCOMI_gt_CM_CampaignMissionIntroZoomIn = TriggerCreate("libCOMI_gt_CM_CampaignMissionIntroZoomIn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ResourcePickupAllyNew
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ResourcePickupAllyNew_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minerals;
    int lv_gas;
    int lv_itAllyPlayer;
    int lv_itPickupPlayer;

    // Automatic Variable Declarations
    playergroup auto8B695647_g;

    // Variable Initialization
    lv_minerals = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Minerals]", c_playerAny);
    lv_gas = CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "Resources[Vespene]", c_playerAny);
    lv_itPickupPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    auto8B695647_g = libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf(lv_itPickupPlayer);
    lv_itAllyPlayer = -1;
    while (true) {
        lv_itAllyPlayer = PlayerGroupNextPlayer(auto8B695647_g, lv_itAllyPlayer);
        if (lv_itAllyPlayer < 0) { break; }
        if ((lv_itPickupPlayer != lv_itAllyPlayer)) {
            libCOMI_gf_ResourcePickupAlly(lv_itAllyPlayer, lv_minerals, lv_gas);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ResourcePickupAllyNew_Init () {
    libCOMI_gt_ResourcePickupAllyNew = TriggerCreate("libCOMI_gt_ResourcePickupAllyNew_Func");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupEnvelopeMinerals50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals100");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupMinerals250");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletMinerals");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupEnvelopeGas50");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas100");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupGas200");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "PickupPalletGas");
    TriggerAddEventPlayerEffectUsed(libCOMI_gt_ResourcePickupAllyNew, c_playerAny, "MutatorPickupGas50");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitTeaching
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitTeaching_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD03D3C7E_g;
    int autoD03D3C7E_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD03D3C7E_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD03D3C7E_u = UnitGroupCount(autoD03D3C7E_g, c_unitCountAll);
    for (;; autoD03D3C7E_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoD03D3C7E_g, autoD03D3C7E_u);
        if (lv_indexUnit == null) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(lv_indexUnit)) == true)) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
            libCOMI_gf_CM_ApplyCampaignTeachingToUnit(lv_indexUnit);
        }

        if (((UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || (UnitFilterMatch(lv_indexUnit, 1, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            libCOMI_gf_CM_UseUnitNameAsUnitTip(lv_indexUnit);
        }

    }
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, true);
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, true);
    TriggerSendEvent("Unit Teaching Initiailize");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitTeaching_Init () {
    libCOMI_gt_CM_CampaignUnitTeaching = TriggerCreate("libCOMI_gt_CM_CampaignUnitTeaching_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_GameIsOver() == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayersCopy(), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnitCreatedUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitCreated_Init () {
    libCOMI_gt_CM_CampaignUnitCreated = TriggerCreate("libCOMI_gt_CM_CampaignUnitCreated_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_CM_CampaignUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitChangeOwner
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitChangeOwner_Init () {
    libCOMI_gt_CM_CampaignUnitChangeOwner = TriggerCreate("libCOMI_gt_CM_CampaignUnitChangeOwner_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitChangeOwner, false);
    TriggerAddEventUnitChangeOwner(libCOMI_gt_CM_CampaignUnitChangeOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignUnitInfoUnitMorphes
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_UseUnitNameAsUnitTip(EventUnit());
    libCOMI_gf_CM_ApplyCampaignTeachingToUnit(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init () {
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes = TriggerCreate("libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Func");
    TriggerEnable(libCOMI_gt_CM_CampaignUnitInfoUnitMorphes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cooldown
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Cooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Cooldown(EventPlayer());
    if ((PlayerGetAlliance(1, c_allianceIdControl, 2) == true)) {
        libCOMI_gf_UT_Cooldown(2);
    }

    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Cooldown_Init () {
    libCOMI_gt_UT_Cooldown = TriggerCreate("libCOMI_gt_UT_Cooldown_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Cooldown, c_playerAny, "-cdr", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Init
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_Init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto00F46C53_g;
    int auto00F46C53_u;
    unit auto00F46C53_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_uT_Horde_Chance = StringToFixed(StringWord(EventChatMessage(false), 2));
    libCOMI_gv_horde_Owner_Player = PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer()), 1);
    libCOMI_gv_horde_Target_Player = EventPlayer();
    auto00F46C53_g = UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto00F46C53_u = UnitGroupCount(auto00F46C53_g, c_unitCountAll);
    for (;; auto00F46C53_u -= 1) {
        auto00F46C53_var = UnitGroupUnitFromEnd(auto00F46C53_g, auto00F46C53_u);
        if (auto00F46C53_var == null) { break; }
        libCOMI_gf_UT_Horde_Multiply(auto00F46C53_var, libCOMI_gv_uT_Horde_Chance);
    }
    TextExpressionSetToken("Param/Expression/lib_COMI_A8B3022A", "A", IntToText(UnitGroupCount(libCOMI_gv_uT_Horde_UG, c_unitCountAlive)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_A8B3022A"));
    TriggerEnable(libCOMI_gt_UT_Horde_UnitCreated, true);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_Init_Init () {
    libCOMI_gt_UT_Horde_Init = TriggerCreate("libCOMI_gt_UT_Horde_Init_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Horde_Init, c_playerAny, "-horde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Remove
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vCreated;

    // Automatic Variable Declarations
    unitgroup auto7B429B4F_g;
    int auto7B429B4F_u;
    unit auto7B429B4F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B429B4F_g = libCOMI_gv_uT_Horde_UG;
    auto7B429B4F_u = UnitGroupCount(auto7B429B4F_g, c_unitCountAll);
    for (;; auto7B429B4F_u -= 1) {
        auto7B429B4F_var = UnitGroupUnitFromEnd(auto7B429B4F_g, auto7B429B4F_u);
        if (auto7B429B4F_var == null) { break; }
        UnitRemove(auto7B429B4F_var);
        UnitGroupRemove(libCOMI_gv_uT_Horde_UG, auto7B429B4F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_Remove_Init () {
    libCOMI_gt_UT_Horde_Remove = TriggerCreate("libCOMI_gt_UT_Horde_Remove_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Horde_Remove, c_playerAny, "-remhorde", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_Unit Created
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_UnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vIndexPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(UnitGroupAlliance(libCOMI_gv_horde_Target_Player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0), EventUnitCreatedUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMI_gv_uT_Horde_UG, EventUnitCreatedUnit()) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Interceptor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "InterceptorAiur"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Larva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DehakaLarva"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "KerriganInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Broodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "StukovInfestBroodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "BroodlingEscort"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Horde_Multiply(EventUnitCreatedUnit(), libCOMI_gv_uT_Horde_Chance);
    UnitGroupAddUnitGroup(libCOMI_gv_uT_Horde_UG_Wave, UnitLastCreatedGroup());
    TriggerExecute(libCOMI_gt_UT_Horde_SendWave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_UnitCreated_Init () {
    libCOMI_gt_UT_Horde_UnitCreated = TriggerCreate("libCOMI_gt_UT_Horde_UnitCreated_Func");
    TriggerEnable(libCOMI_gt_UT_Horde_UnitCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_UT_Horde_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Horde_SendWave
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Horde_SendWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(5.0, c_timeAI);
    AIAttackWaveUseGroup(libCOMI_gv_horde_Owner_Player, libCOMI_gv_uT_Horde_UG_Wave);
    AIAttackWaveSetGatherPoint(libCOMI_gv_horde_Owner_Player, UnitGroupCenterOfGroup(libCOMI_gv_uT_Horde_UG_Wave));
    AIAttackWaveSetTargetPoint(libCOMI_gv_horde_Owner_Player, libARRA_gf_GetPlayerStartPosition(libCOMI_gv_horde_Target_Player));
    AIAttackWaveSend(libCOMI_gv_horde_Owner_Player, 1, false);
    UnitGroupClear(libCOMI_gv_uT_Horde_UG_Wave);
    Wait(2.0, c_timeAI);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Horde_SendWave_Init () {
    libCOMI_gt_UT_Horde_SendWave = TriggerCreate("libCOMI_gt_UT_Horde_SendWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_encomps
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_encomps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const int lv_offsetBase = 50;
    int lv_offsetX;
    int lv_offsetY;
    const int lv_buttonSize = 54;
    int lv_iconSize;
    int lv_compositionCounter;
    int lv_iconCounter;
    string lv_enemyComp;
    color lv_color1;
    color lv_color2;
    color lv_color3;
    playergroup lv_vPG;

    // Automatic Variable Declarations
    fixed autoE084DC24_at;
    string auto4AE2C039_userType;
    int auto4AE2C039_i;
    const int auto9B7F0435_ae = 9;
    const int auto9B7F0435_ai = 1;
    int auto687C4102_val;
    int autoE95D26AB_val;

    // Variable Initialization
    lv_iconSize = (lv_buttonSize-4);
    lv_enemyComp = "BioMechStar";
    lv_color1 = Color(1.57, 55.69, 100.00);
    lv_color2 = Color(0.00, 80.39, 22.75);
    lv_color3 = Color(90.59, 33.73, 12.16);
    lv_vPG = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameGetMissionTime() < 2.0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        autoE084DC24_at = 0;
        while (!((GameGetMissionTime() >= 2.0)) && autoE084DC24_at <= 5.0) {
            Wait(0.5, c_timeGame);
            autoE084DC24_at = autoE084DC24_at + 0.5;
        }
        TriggerEnable(TriggerGetCurrent(), true);
    }

    if ((DialogIsVisible(libCOMI_gv_uT_encompsDialogs, EventPlayer()) == true)) {
        DialogSetVisible(libCOMI_gv_uT_encompsDialogs, lv_vPG, false);
        libNtve_gf_HideGameUI(true, lv_vPG);
        return true;
    }

    if ((libCOMI_gv_uT_encompsDialogs != c_invalidDialogId)) {
        DialogSetVisible(libCOMI_gv_uT_encompsDialogs, lv_vPG, true);
        libNtve_gf_HideGameUI(false, lv_vPG);
        return true;
    }

    libNtve_gf_HideGameUI(false, lv_vPG);
    DialogCreate(1920, 1120, c_anchorCenter, 0, -10, false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lv_vPG, true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libCOMI_gv_uT_encompsDialogs = DialogLastCreated();
    auto4AE2C039_userType = "XUT_encomps_CoopEnemyUnitsFormation";
    auto4AE2C039_i = 1;
    for ( ; auto4AE2C039_i <= UserDataInstanceCount(auto4AE2C039_userType) ; auto4AE2C039_i += 1 ) {
        lv_enemyComp = UserDataInstance(auto4AE2C039_userType, auto4AE2C039_i);
        lv_iconCounter = 1;
        for ( ; ( (auto9B7F0435_ai >= 0 && lv_iconCounter <= auto9B7F0435_ae) || (auto9B7F0435_ai < 0 && lv_iconCounter >= auto9B7F0435_ae) ) ; lv_iconCounter += auto9B7F0435_ai ) {
            if ((UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter) >= 1)) {
                lv_offsetX = (lv_offsetBase+lv_buttonSize*(lv_iconCounter - 1) - 10);
                lv_offsetY = (lv_offsetBase+lv_buttonSize*lv_compositionCounter);
                auto687C4102_val = UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (auto687C4102_val == 1) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonP");
                }
                else if (auto687C4102_val == 2) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonT");
                }
                else if (auto687C4102_val == 3) {
                    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "UT_Button/StandardGlueButtonZ");
                }
                else {
                }
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lv_buttonSize, lv_buttonSize);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, lv_offsetX, lv_offsetY);
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 33.0);
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_iconSize, lv_iconSize, c_anchorTop, lv_offsetX, lv_offsetY, StringToText(""), UserDataGetImagePath("XUT_encomps_CoopEnemyUnits", UserDataInstance("XUT_encomps_CoopEnemyUnits", UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Units", lv_iconCounter)), "Unit", 1), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EnemyCompStyle", PlayerGroupAll());
                autoE95D26AB_val = UserDataGetInt("XUT_encomps_CoopEnemyUnitsFormation", lv_enemyComp, "Race", 1);
                if (autoE95D26AB_val == 1) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color1, PlayerGroupAll());
                }
                else if (autoE95D26AB_val == 2) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color2, PlayerGroupAll());
                }
                else if (autoE95D26AB_val == 3) {
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_color3, PlayerGroupAll());
                }
                else {
                }
            }
            else {
                break;
            }
        }
        lv_compositionCounter = (lv_compositionCounter+1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_encomps_Init () {
    libCOMI_gt_UT_encomps = TriggerCreate("libCOMI_gt_UT_encomps_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_encomps, c_playerAny, "-encomps", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Mastery
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Mastery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_v2String;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v2String = StringWord(EventChatMessage(false), 2);

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_v2String == null)) {
        libCOMI_gv_uT_MasteryTargetPlayer = 1;
    }
    else {
        libCOMI_gv_uT_MasteryTargetPlayer = StringToInt(lv_v2String);
    }
    TriggerEnable(libCOMI_gt_UT_CommanderSwitched, true);
    libCOMI_gf_UT_MasteryChoiceCreateUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libCOMI_gv_uT_MasteryDialog, PlayerGroupSingle(EventPlayer()), true);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Mastery_Init () {
    libCOMI_gt_UT_Mastery = TriggerCreate("libCOMI_gt_UT_Mastery_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Mastery, c_playerAny, "-mastery", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MasteryButtonClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_MasteryButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_uT_MasteryButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_MasteryPointsUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
    DialogSetVisible(libCOMI_gv_uT_MasteryDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_MasteryButtonClicked_Init () {
    libCOMI_gt_UT_MasteryButtonClicked = TriggerCreate("libCOMI_gt_UT_MasteryButtonClicked_Func");
    TriggerEnable(libCOMI_gt_UT_MasteryButtonClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_UT_MasteryButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CommanderSwitched
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_CommanderSwitched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commIndex;

    // Automatic Variable Declarations
    const int auto937433C1_ae = libCOMI_gv_mAX_COMMANDERCOUNT;
    const int auto937433C1_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_commIndex = 1;
    for ( ; ( (auto937433C1_ai >= 0 && lv_commIndex <= auto937433C1_ae) || (auto937433C1_ai < 0 && lv_commIndex >= auto937433C1_ae) ) ; lv_commIndex += auto937433C1_ai ) {
        if (true) {
            libCOMI_gf_UT_MasteryPointsUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
            libCOMI_gf_UT_MasteryChoiceCreateUpdate(libCOMI_gv_uT_MasteryTargetPlayer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_CommanderSwitched_Init () {
    libCOMI_gt_UT_CommanderSwitched = TriggerCreate("libCOMI_gt_UT_CommanderSwitched_Func");
    TriggerEnable(libCOMI_gt_UT_CommanderSwitched, false);
    TriggerAddEventDialogControl(libCOMI_gt_UT_CommanderSwitched, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Attack Wave
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_SpawnAttackWave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vTech;
    int lv_vSize;
    fixed lv_vSupply;
    fixed lv_vVitals;
    int lv_vCost;

    // Automatic Variable Declarations
    string autoEBD9EF7A_val;
    string auto50EA72DD_val;
    unitgroup auto40795F13_g;
    int auto40795F13_u;
    unit auto40795F13_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEBD9EF7A_val = StringWord(EventChatMessage(false), 2);
    if (autoEBD9EF7A_val == "1") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest;
    }
    else if (autoEBD9EF7A_val == "2") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller;
    }
    else if (autoEBD9EF7A_val == "3") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__3Small;
    }
    else if (autoEBD9EF7A_val == "4") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__4Medium;
    }
    else if (autoEBD9EF7A_val == "5") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__5Large;
    }
    else if (autoEBD9EF7A_val == "6") {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__6Larger;
    }
    else {
        lv_vSize = libCOMI_ge_CoopAIAttackWaveBuckets__7Largest;
    }
    auto50EA72DD_val = StringWord(EventChatMessage(false), 3);
    if (auto50EA72DD_val == "1") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__1Early;
    }
    else if (auto50EA72DD_val == "2") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid;
    }
    else if (auto50EA72DD_val == "3") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__3Mid;
    }
    else if (auto50EA72DD_val == "4") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__4LateMid;
    }
    else if (auto50EA72DD_val == "5") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets__5Late;
    }
    else if (auto50EA72DD_val == "6") {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel06;
    }
    else {
        lv_vTech = libCOMI_ge_CoopAITechLevelBuckets_TechLevel07;
    }
    libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2(3, 4, lv_vSize, lv_vTech, CameraGetTarget(EventPlayer()), false);
    auto40795F13_g = libCOMI_gf_LastCreatedCoopAttackForce();
    auto40795F13_u = UnitGroupCount(auto40795F13_g, c_unitCountAll);
    for (;; auto40795F13_u -= 1) {
        auto40795F13_var = UnitGroupUnitFromEnd(auto40795F13_g, auto40795F13_u);
        if (auto40795F13_var == null) { break; }
        lv_vCost += UnitTypeGetCost(UnitGetType(auto40795F13_var), c_unitCostSumMineralsVespene);
        lv_vSupply += UnitGetPropertyFixed(auto40795F13_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vVitals += UnitGetPropertyFixed(auto40795F13_var, c_unitPropVitality, c_unitPropCurrent);
    }
    UnitGroupAddUnitGroup(libCOMI_gv_uT_LastAttackWave, libCOMI_gf_LastCreatedCoopAttackForce());
    if ((StringContains(EventChatMessage(false), "none", c_stringAnywhere, c_stringNoCase) == false)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_D80C54A7", "A", IntToText(lv_vCost));
        TextExpressionSetToken("Param/Expression/lib_COMI_D80C54A7", "B", FixedToText(lv_vSupply, c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMI_D80C54A7", "C", FixedToText(lv_vVitals, c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMI_D80C54A7"), 30, UnitGroupCenterOfGroup(libCOMI_gf_LastCreatedCoopAttackForce()), 5.0, true, false, PlayerGroupAll());
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 30.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_SpawnAttackWave_Init () {
    libCOMI_gt_UT_SpawnAttackWave = TriggerCreate("libCOMI_gt_UT_SpawnAttackWave_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_SpawnAttackWave, c_playerAny, "-aw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackWaveAttack
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_AttackWaveAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    const int auto7A797A3E_ae = 4;
    const int auto7A797A3E_ai = 1;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_98F3F3B8"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_F7F415BF"));
        lv_vPlayer = 3;
        for ( ; ( (auto7A797A3E_ai >= 0 && lv_vPlayer <= auto7A797A3E_ae) || (auto7A797A3E_ai < 0 && lv_vPlayer >= auto7A797A3E_ae) ) ; lv_vPlayer += auto7A797A3E_ai ) {
            lv_vUG = UnitGroupFilterPlayer(libCOMI_gv_uT_LastAttackWave, lv_vPlayer, 0);
            AIAttackWaveUseGroup(lv_vPlayer, lv_vUG);
            AIAttackWaveSetGatherPoint(lv_vPlayer, UnitGroupCenterOfGroup(lv_vUG));
            AIAttackWaveSetTargetPoint(lv_vPlayer, libARRA_gf_GetPlayerStartPosition(EventPlayer()));
            AIAttackWaveSend(lv_vPlayer, 0, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_AttackWaveAttack_Init () {
    libCOMI_gt_UT_AttackWaveAttack = TriggerCreate("libCOMI_gt_UT_AttackWaveAttack_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_AttackWaveAttack, c_playerAny, "-attack", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove Wave
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_RemoveWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto24B00911_g;
    int auto24B00911_u;
    unit auto24B00911_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto24B00911_g = libCOMI_gv_uT_LastAttackWave;
    auto24B00911_u = UnitGroupCount(auto24B00911_g, c_unitCountAll);
    for (;; auto24B00911_u -= 1) {
        auto24B00911_var = UnitGroupUnitFromEnd(auto24B00911_g, auto24B00911_u);
        if (auto24B00911_var == null) { break; }
        UnitRemove(auto24B00911_var);
        UnitGroupRemove(libCOMI_gv_uT_LastAttackWave, auto24B00911_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_RemoveWave_Init () {
    libCOMI_gt_UT_RemoveWave = TriggerCreate("libCOMI_gt_UT_RemoveWave_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_RemoveWave, c_playerAny, "-remw", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_NukeTest
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_NukeTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto39AB56E2_n = 20000;
    int auto39AB56E2_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegion = RegionPlayableMap();
    if ((GameIsOnline() == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_280C5318"));
    }

    for (auto39AB56E2_i = 1; auto39AB56E2_i <= auto39AB56E2_n; auto39AB56E2_i += 1) {
        lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
        if (((PathingType(lv_spawnLocation) != c_pathingGround) || (RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || (!(libARRA_gf_AnyUnitOfPlayerGroupInRegion(libCOMI_gf_GetAlliedCommandersPlayers(), RegionCircle(lv_spawnLocation, 50.0)))))) {
        }
        else {
            PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "NukeTestDamageCP", lv_spawnLocation);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_NukeTest_Init () {
    libCOMI_gt_UT_NukeTest = TriggerCreate("libCOMI_gt_UT_NukeTest_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_NukeTest, c_playerAny, "-nuketest", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_BileLauncherBombardment
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_AF_BileLauncherBombardment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeAbilityIsAllowed(EventPlayer(), AbilityCommand("AdvancedBombardment", 0)) == false)) {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("AdvancedBombardment", 0), true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_FCBCAB0F"));
    }
    else {
        TechTreeAbilityAllow(EventPlayer(), AbilityCommand("AdvancedBombardment", 0), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_1F09A68D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_AF_BileLauncherBombardment_Init () {
    libCOMI_gt_AF_BileLauncherBombardment = TriggerCreate("libCOMI_gt_AF_BileLauncherBombardment_Func");
    TriggerAddEventChatMessage(libCOMI_gt_AF_BileLauncherBombardment, c_playerAny, "-bile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle AI Debug Messages
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_ToggleAIDebugMessages_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_showAIDebugging == true)) {
        libCOMI_gv_showAIDebugging = false;
    }
    else {
        libCOMI_gv_showAIDebugging = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_ToggleAIDebugMessages_Init () {
    libCOMI_gt_ToggleAIDebugMessages = TriggerCreate("libCOMI_gt_ToggleAIDebugMessages_Func");
    TriggerAddEventChatMessage(libCOMI_gt_ToggleAIDebugMessages, c_playerAny, "togaidebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CoopAI_InitAIDebugging
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CoopAI_InitAIDebugging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(3, "CoopAIDebug.txt");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CoopAI_InitAIDebugging_Init () {
    libCOMI_gt_CM_CoopAI_InitAIDebugging = TriggerCreate("libCOMI_gt_CM_CoopAI_InitAIDebugging_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_CoopAI_InitAIDebugging, c_playerAny, "aidebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeToggle
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMovieCaptureModeToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cU_DebugMovieCaptureMode = !(libCOMI_gv_cU_DebugMovieCaptureMode);
    if ((libCOMI_gv_cU_DebugMovieCaptureMode == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_8E643243"), true);
        TriggerExecute(libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC, true, false);
        TriggerExecute(libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits, true, false);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_3AA59240"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMovieCaptureModeToggle_Init () {
    libCOMI_gt_CU_DebugMovieCaptureModeToggle = TriggerCreate("libCOMI_gt_CU_DebugMovieCaptureModeToggle_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugMovieCaptureModeToggle, c_playerAny, "-capturemode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMutatorSelect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMutatorSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[101] lv_mutatorChoices;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int autoBD5619AB_ae = 100;
    const int autoBD5619AB_ai = 1;
    const int auto95E02179_ae = 100;
    const int auto95E02179_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mutatorIndex = 1;
    for ( ; ( (autoBD5619AB_ai >= 0 && lv_mutatorIndex <= autoBD5619AB_ae) || (autoBD5619AB_ai < 0 && lv_mutatorIndex >= autoBD5619AB_ae) ) ; lv_mutatorIndex += autoBD5619AB_ai ) {
        lv_mutatorChoices[lv_mutatorIndex] = libCOMI_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex));
    }
    libCOMI_gf_CU_MutatorDisplay(EventPlayer());
    while (!(((libCOMI_gv_cU_MutatorDialog == c_invalidDialogId) || (DialogIsVisible(libCOMI_gv_cU_MutatorDialog, EventPlayer()) == false)))) {
        Wait(0.5, c_timeGame);
    }
    lv_mutatorIndex = 1;
    for ( ; ( (auto95E02179_ai >= 0 && lv_mutatorIndex <= auto95E02179_ae) || (auto95E02179_ai < 0 && lv_mutatorIndex >= auto95E02179_ae) ) ; lv_mutatorIndex += auto95E02179_ai ) {
        if ((libCOMI_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)) == true) && (lv_mutatorChoices[lv_mutatorIndex] != libCOMI_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)))) {
            TriggerSendEvent(("Mutator " + (UserDataInstance("Mutators", lv_mutatorIndex)) + " Initialize"));
        }

    }
    libCOMI_gf_CU_MutatorListInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMutatorSelect_Init () {
    libCOMI_gt_CU_DebugMutatorSelect = TriggerCreate("libCOMI_gt_CU_DebugMutatorSelect_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugMutatorSelect, c_playerAny, "mutsel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugRandomMutationSelect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugRandomMutationSelect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_CommanderSelect_RefCount == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_099C8D0A"), true);
    }

    if ((EventPlayer() != 1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMI_EE667A8C"), true);
    }

    libCOMI_gf_CU_RandomMutationSelectDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugRandomMutationSelect_Init () {
    libCOMI_gt_CU_DebugRandomMutationSelect = TriggerCreate("libCOMI_gt_CU_DebugRandomMutationSelect_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugRandomMutationSelect, c_playerAny, "randommutation", true);
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugRandomMutationSelect, c_playerAny, "randmut", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugCinMode
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugCinMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto318A2942_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto318A2942_val = StringWord(EventChatMessage(false), 2);
    if (auto318A2942_val == "1") {
        libCOMI_gf_CinematicModeCampaign(true, c_transitionDurationDefault, true);
    }
    else if (auto318A2942_val == "0") {
        libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationDefault, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugCinMode_Init () {
    libCOMI_gt_CU_DebugCinMode = TriggerCreate("libCOMI_gt_CU_DebugCinMode_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugCinMode, c_playerAny, "-cinmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugScreenmode
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugScreenmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto8ABE455D_val;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8ABE455D_val = StringWord(EventChatMessage(false), 2);
    if (auto8ABE455D_val == "full") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeFullscreen, c_transitionDurationDefault, EventPlayer());
    }
    else if (auto8ABE455D_val == "normal") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeConsole, c_transitionDurationDefault, EventPlayer());
    }
    else if (auto8ABE455D_val == "letter") {
        libCOMI_gf_SetScreenModeCoop(c_uiModeLetterboxed, c_transitionDurationDefault, EventPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugScreenmode_Init () {
    libCOMI_gt_CU_DebugScreenmode = TriggerCreate("libCOMI_gt_CU_DebugScreenmode_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugScreenmode, c_playerAny, "-screenmode", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugTogSoA
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugTogSoA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gv_cU_GPVisible[EventPlayer()] == false)) {
        libCOMI_gf_CU_GPShowHide(true, EventPlayer(), c_transitionDurationDefault);
    }
    else {
        libCOMI_gf_CU_GPShowHide(false, EventPlayer(), c_transitionDurationDefault);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugTogSoA_Init () {
    libCOMI_gt_CU_DebugTogSoA = TriggerCreate("libCOMI_gt_CU_DebugTogSoA_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CU_DebugTogSoA, c_playerAny, "-togsoa", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugTargetSpawnersSet
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugTargetSpawnersSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_parameter;

    // Automatic Variable Declarations
    string auto2C90CD67_val;
    playergroup autoE85E0ABA_g;
    int autoE85E0ABA_var;

    // Variable Initialization
    lv_parameter = "";

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_parameter = StringWord(EventChatMessage(false), 2);
    lv_parameter = StringCase(lv_parameter, false);
    auto2C90CD67_val = lv_parameter;
    if (auto2C90CD67_val == "on") {
        libCOMI_gv_cM_DebugAITargetSpawners = true;
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_EE76CFA8"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if (auto2C90CD67_val == "off") {
        libCOMI_gv_cM_DebugAITargetSpawners = false;
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_33955EE2"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else if (auto2C90CD67_val == "random") {
        if ((RandomInt(0, 1) == 1)) {
            libCOMI_gv_cM_DebugAITargetSpawners = true;
        }
        else {
            libCOMI_gv_cM_DebugAITargetSpawners = false;
        }
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_BE409C6F"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
    }
    else {
        libCOMI_gf_DisplayCampaignMessage(PlayerGroupAll(), libCOMI_ge_CampaignMessageType_Hint, StringExternal("Param/Value/lib_COMI_5A218560"), libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage);
        return true;
    }
    autoE85E0ABA_g = PlayerGroupAll();
    autoE85E0ABA_var = -1;
    while (true) {
        autoE85E0ABA_var = PlayerGroupNextPlayer(autoE85E0ABA_g, autoE85E0ABA_var);
        if (autoE85E0ABA_var < 0) { break; }
        AISetDifficulty(autoE85E0ABA_var, c_diffTargetSpawners, libCOMI_gv_cM_DebugAITargetSpawners);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugTargetSpawnersSet_Init () {
    libCOMI_gt_CM_DebugTargetSpawnersSet = TriggerCreate("libCOMI_gt_CM_DebugTargetSpawnersSet_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugTargetSpawnersSet, c_playerAny, "-TargetSpawners", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugSelectCommanders
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CT_DebugSelectCommanders_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_LoadCoopMission("COOP_Placeholder", libCOMI_gt_UT_StartTrigger);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CT_DebugSelectCommanders_Init () {
    libCOMI_gt_CT_DebugSelectCommanders = TriggerCreate("libCOMI_gt_CT_DebugSelectCommanders_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CT_DebugSelectCommanders, c_playerAny, "select commanders", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: VU_Drop
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_SimpleDropAttackExample2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup auto4B2F174C_g;
    int auto4B2F174C_u;
    int autoC2ED8588_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B2F174C_g = UnitGroup(null, c_playerAny, RegionCircle(RegionGetCenter(RegionPlayableMap()), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B2F174C_u = UnitGroupCount(auto4B2F174C_g, c_unitCountAll);
    for (;; auto4B2F174C_u -= 1) {
        lv_unit = UnitGroupUnitFromEnd(auto4B2F174C_g, auto4B2F174C_u);
        if (lv_unit == null) { break; }
        UnitKill(lv_unit);
    }
    autoC2ED8588_val = StringToInt(StringWord(EventChatMessage(false), 2));
    if (autoC2ED8588_val == 1) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoC2ED8588_val == 2) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoC2ED8588_val == 3) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__3Mid, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoC2ED8588_val == 4) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoC2ED8588_val == 5) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoC2ED8588_val == 6) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__6Larger, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else if (autoC2ED8588_val == 7) {
        libCOMI_gf_CreateCommanderDropAttack(3, libCOMI_ge_CoopAIAttackWaveBuckets__7Largest, libCOMI_ge_CoopAITechLevelBuckets_TechLevel07, RegionGetCenter(RegionPlayableMap()), RegionGetCenter(RegionPlayableMap()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_SimpleDropAttackExample2_Init () {
    libCOMI_gt_SimpleDropAttackExample2 = TriggerCreate("libCOMI_gt_SimpleDropAttackExample2_Func");
    TriggerAddEventChatMessage(libCOMI_gt_SimpleDropAttackExample2, c_playerAny, "-drop", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_DebugVictoryS
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_DebugVictoryS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_cineTrigger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerQueueClear(c_triggerQueueKill);
    TransmissionClearAll();
    libCOMI_gf_HideCampaignTransmissionPortrait();
    libCOMI_gv_cM_MissionVictoryActionQueyeEmpty = false;
    TriggerExecute(libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute, true, false);
    while (!((libCOMI_gv_cM_MissionVictoryActionQueyeEmpty == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerQueueClear(c_triggerQueueKill);
    lv_cineTrigger = TriggerCreate("gt_VictorySequence_Func");
    TriggerExecute(lv_cineTrigger, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_DebugVictoryS_Init () {
    libCOMI_gt_CM_DebugVictoryS = TriggerCreate("libCOMI_gt_CM_DebugVictoryS_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYS", true);
    TriggerAddEventChatMessage(libCOMI_gt_CM_DebugVictoryS, c_playerAny, "VICTORYSEQUENCE", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CM_CampaignMissionPerfLog
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CM_CampaignMissionPerfLog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeReal);
        PerfTestGetFPS();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CM_CampaignMissionPerfLog_Init () {
    libCOMI_gt_CM_CampaignMissionPerfLog = TriggerCreate("libCOMI_gt_CM_CampaignMissionPerfLog_Func");
    TriggerAddEventChatMessage(libCOMI_gt_CM_CampaignMissionPerfLog, c_playerAny, "logperf", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DebugMutatorSelect
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_DebugMutatorSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool[101] lv_mutatorChoices;
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int auto352EA358_ae = 100;
    const int auto352EA358_ai = 1;
    const int auto3A1EE682_ae = 100;
    const int auto3A1EE682_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Cheat();
    lv_mutatorIndex = 1;
    for ( ; ( (auto352EA358_ai >= 0 && lv_mutatorIndex <= auto352EA358_ae) || (auto352EA358_ai < 0 && lv_mutatorIndex >= auto352EA358_ae) ) ; lv_mutatorIndex += auto352EA358_ai ) {
        lv_mutatorChoices[lv_mutatorIndex] = libCOMI_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex));
    }
    libCOMI_gf_CU_MutatorDisplay(EventPlayer());
    while (!(((libCOMI_gv_cU_MutatorDialog == c_invalidDialogId) || (DialogIsVisible(libCOMI_gv_cU_MutatorDialog, EventPlayer()) == false)))) {
        Wait(0.5, c_timeGame);
    }
    lv_mutatorIndex = 1;
    for ( ; ( (auto3A1EE682_ai >= 0 && lv_mutatorIndex <= auto3A1EE682_ae) || (auto3A1EE682_ai < 0 && lv_mutatorIndex >= auto3A1EE682_ae) ) ; lv_mutatorIndex += auto3A1EE682_ai ) {
        if ((libCOMI_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)) == true) && (lv_mutatorChoices[lv_mutatorIndex] != libCOMI_gf_MutatorIsEnabled(UserDataInstance("Mutators", lv_mutatorIndex)))) {
            TriggerSendEvent(("Mutator " + (UserDataInstance("Mutators", lv_mutatorIndex)) + " Initialize"));
        }

    }
    libCOMI_gf_CU_MutatorListInit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_DebugMutatorSelect_Init () {
    libCOMI_gt_UT_DebugMutatorSelect = TriggerCreate("libCOMI_gt_UT_DebugMutatorSelect_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_DebugMutatorSelect, c_playerAny, "-mutsel", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Share Control
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_ShareControl_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetAlliance(2, c_allianceIdSpend, 1) == true)) {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_57E89B93"));
    }
    else {
        libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_B775FCC6"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_ShareControl_Init () {
    libCOMI_gt_UT_ShareControl = TriggerCreate("libCOMI_gt_UT_ShareControl_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_ShareControl, c_playerAny, "-share", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AllySupply
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_AllySupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AllySupplyPanel");
    if ((DialogControlIsVisible(EventDialogControl(), EventPlayer()) == false)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_AllySupply_Init () {
    libCOMI_gt_UT_AllySupply = TriggerCreate("libCOMI_gt_UT_AllySupply_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_AllySupply, c_playerAny, "-allysupply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Unlock
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Unlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CinematicModeCampaign(false, c_transitionDurationImmediate, true);
    CameraLockInput(EventPlayer(), false);
    UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
    DialogControlHookup(libCOMI_gv_cU_FanfarePanel, c_triggerControlTypeButton, "QuitButton");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Unlock_Init () {
    libCOMI_gt_UT_Unlock = TriggerCreate("libCOMI_gt_UT_Unlock_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Unlock, c_playerAny, "-unlock", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trigdebug
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Trigdebug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugWindowOpen(true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_7D8527FB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Trigdebug_Init () {
    libCOMI_gt_UT_Trigdebug = TriggerCreate("libCOMI_gt_UT_Trigdebug_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Trigdebug, c_playerAny, "-trigdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Ally
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Ally_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_b;

    // Automatic Variable Declarations
    playergroup autoD0721955_g;
    playergroup autoFCDB2F3D_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD0721955_g = libCOMI_gf_GetAlliedCommandersPlayers();
    lv_a = -1;
    while (true) {
        lv_a = PlayerGroupNextPlayer(autoD0721955_g, lv_a);
        if (lv_a < 0) { break; }
        autoFCDB2F3D_g = libCOMI_gf_GetAlliedCommandersPlayers();
        lv_b = -1;
        while (true) {
            lv_b = PlayerGroupNextPlayer(autoFCDB2F3D_g, lv_b);
            if (lv_b < 0) { break; }
            if ((lv_a == lv_b)) {
                continue;
            }

            if ((PlayerGetAlliance(lv_a, c_allianceIdControl, lv_b) == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_90CDBC78"));
                PlayerSetAlliance(lv_b, c_allianceIdControl, lv_a, true);
                PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, true);
                PlayerSetAlliance(lv_b, c_allianceIdPushable, lv_a, true);
                PlayerSetAlliance(lv_a, c_allianceIdPushable, lv_b, true);
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_09AE04FD"));
                PlayerSetAlliance(lv_b, c_allianceIdControl, lv_a, false);
                PlayerSetAlliance(lv_a, c_allianceIdControl, lv_b, false);
                PlayerSetAlliance(lv_b, c_allianceIdPushable, lv_a, false);
                PlayerSetAlliance(lv_a, c_allianceIdPushable, lv_b, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Ally_Init () {
    libCOMI_gt_UT_Ally = TriggerCreate("libCOMI_gt_UT_Ally_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Ally, c_playerAny, "-ally", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PvP
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_PvP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_PlayerIsEnemy(1, 2, libNtve_ge_PlayerRelation_Enemy) == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_88EFB3BF"));
        if (((PlayerGetAlliance(2, c_allianceIdControl, 1) == true) || (PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == true))) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
            PlayerSetAlliance(2, c_allianceIdControl, 1, true);
            PlayerSetAlliance(1, c_allianceIdControl, 2, true);
            PlayerSetAlliance(2, c_allianceIdSpend, 1, true);
            PlayerSetAlliance(1, c_allianceIdSpend, 2, true);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_9B30526B"));
        if ((PlayerGetAlliance(2, c_allianceIdControl, 1) == true)) {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
        }
        else {
            libNtve_gf_SetAlliance(1, 2, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_PvP_Init () {
    libCOMI_gt_UT_PvP = TriggerCreate("libCOMI_gt_UT_PvP_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_PvP, c_playerAny, "-pvp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeSuppressCC
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_commandPanel;
    int lv_tooltipAnchor;
    int[17] lv_commandButtons;
    int lv_indexPlayer;
    int lv_buttonIndex;

    // Automatic Variable Declarations
    const int autoDF3CE1DC_ae = 14;
    const int autoDF3CE1DC_ai = 1;
    const int auto1C1CB097_ae = 14;
    const int auto1C1CB097_ai = 1;
    const int autoD5510AEA_ae = 4;
    const int autoD5510AEA_ai = 1;
    playergroup autoDA2D7F69_g;

    // Variable Initialization
    lv_commandPanel = c_invalidDialogControlId;
    lv_tooltipAnchor = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lv_commandButtons[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel");
    lv_commandPanel = DialogControlLastCreated();
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeTooltip);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 1, 1);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, -100, -100);
    lv_tooltipAnchor = DialogControlLastCreated();
    lv_buttonIndex = 0;
    for ( ; ( (autoDF3CE1DC_ai >= 0 && lv_buttonIndex <= autoDF3CE1DC_ae) || (autoDF3CE1DC_ai < 0 && lv_buttonIndex >= autoDF3CE1DC_ae) ) ; lv_buttonIndex += autoDF3CE1DC_ai ) {
        if ((lv_buttonIndex < 10)) {
            DialogControlHookup(lv_commandPanel, c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_buttonIndex));
        }
        else {
            DialogControlHookup(lv_commandPanel, c_triggerControlTypeButton, "CommandButton" + IntToString(lv_buttonIndex));
        }
        lv_commandButtons[lv_buttonIndex] = DialogControlLastCreated();
    }
    while ((libCOMI_gv_cU_DebugMovieCaptureMode == true)) {
        lv_buttonIndex = 0;
        for ( ; ( (auto1C1CB097_ai >= 0 && lv_buttonIndex <= auto1C1CB097_ae) || (auto1C1CB097_ai < 0 && lv_buttonIndex >= auto1C1CB097_ae) ) ; lv_buttonIndex += auto1C1CB097_ai ) {
            libNtve_gf_SetDialogItemCustomTooltip(lv_commandButtons[lv_buttonIndex], lv_tooltipAnchor, PlayerGroupAll());
        }
        lv_buttonIndex = 1;
        for ( ; ( (autoD5510AEA_ai >= 0 && lv_buttonIndex <= autoD5510AEA_ae) || (autoD5510AEA_ai < 0 && lv_buttonIndex >= autoD5510AEA_ae) ) ; lv_buttonIndex += autoD5510AEA_ai ) {
            autoDA2D7F69_g = libCOMI_gf_HumanPlayers();
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(autoDA2D7F69_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                if ((libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lv_indexPlayer] != c_invalidDialogControlId)) {
                    libNtve_gf_SetDialogItemCustomTooltip(libCOMI_gv_cU_GPCmdButtons[lv_buttonIndex][lv_indexPlayer], lv_tooltipAnchor, PlayerGroupAll());
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Init () {
    libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC = TriggerCreate("libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_DebugMovieCaptureModeSupressUnits
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto4C54D223_g;
    int auto4C54D223_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4C54D223_g = UnitGroup(null, c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto4C54D223_u = UnitGroupCount(auto4C54D223_g, c_unitCountAll);
    for (;; auto4C54D223_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto4C54D223_g, auto4C54D223_u);
        if (lv_indexUnit == null) { break; }
        UnitSetState(lv_indexUnit, c_unitStateTooltipable, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Init () {
    libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits = TriggerCreate("libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_StartTrigger
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_StartTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_StartTrigger_Init () {
    libCOMI_gt_UT_StartTrigger = TriggerCreate("libCOMI_gt_UT_StartTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_-sbank
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_sbank_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Bank_SaveBank(EventPlayer(), StringWord(EventChatMessage(false), 2), libCOMI_gv_uT_Bank_DefaultBankName);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_A9DD11EC"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_sbank_Init () {
    libCOMI_gt_UT_sbank = TriggerCreate("libCOMI_gt_UT_sbank_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_sbank, c_playerAny, "-sbank", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_-rbank
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_rbank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_vPG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vPG = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vPG = PlayerGroupAll();
    }
    else {
        lv_vPG = PlayerGroupSingle(StringToInt(StringWord(EventChatMessage(false), 3)));
    }
    libCOMI_gf_UT_Bank_RestoreBank(EventPlayer(), StringWord(EventChatMessage(false), 2), lv_vPG, libCOMI_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_rbank_Init () {
    libCOMI_gt_UT_rbank = TriggerCreate("libCOMI_gt_UT_rbank_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_rbank, c_playerAny, "-rbank", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Refill Init
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_RefillInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    libCOMI_gf_UT_Bank_SaveBank(1, libCOMI_gv_uT_Bank_RefillSectionName, libCOMI_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_RefillInit_Init () {
    libCOMI_gt_UT_RefillInit = TriggerCreate("libCOMI_gt_UT_RefillInit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Refill
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_Refill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_UT_Bank_RestoreBank(1, libCOMI_gv_uT_Bank_RefillSectionName, libCOMI_gf_GetEnemyPlayers(), libCOMI_gv_uT_Bank_DefaultBankName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_Refill_Init () {
    libCOMI_gt_UT_Refill = TriggerCreate("libCOMI_gt_UT_Refill_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_Refill, c_playerAny, "-refill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libCOMI_gt_UT_UI_CtrlH) == false)) {
        TriggerEnable(libCOMI_gt_UT_UI_CtrlH, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_1E3289C5"));
    }
    else {
        TriggerEnable(libCOMI_gt_UT_UI_CtrlH, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_A4D26979"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_UI_Init () {
    libCOMI_gt_UT_UI = TriggerCreate("libCOMI_gt_UT_UI_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_UI, c_playerAny, "-uicoop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI_Ctrl+H
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_UI_CtrlH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    bool autoCF3DDC40_val;

    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF3DDC40_val = PlayerGroupHasPlayer(libARRA_gv_uT_UI_Hidden, EventPlayer());
    if (autoCF3DDC40_val == false) {
        PlayerGroupAdd(libARRA_gv_uT_UI_Hidden, EventPlayer());
        libCOMI_gf_CU_GPVisibilitySet(false, EventPlayer(), 1.0);
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, false);
        lv_vShowHide = false;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, -3000);
    }
    else if (autoCF3DDC40_val == true) {
        PlayerGroupRemove(libARRA_gv_uT_UI_Hidden, EventPlayer());
        libCOMI_gf_CU_GPVisibilitySet(true, EventPlayer(), 1.0);
        Wait(1.0, c_timeReal);
        DialogControlSetVisible(libCOMI_gv_cU_GPPanel[EventPlayer()], lv_vPGroup, true);
        lv_vShowHide = true;
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
        DialogControlSetPosition(DialogControlLastCreated(), lv_vPGroup, c_anchorTopLeft, 0, 0);
    }
    else {
    }
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeConsolePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeSupply, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeMenuBar, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeResourcePanel, lv_vShowHide);
    UISetFrameVisible(lv_vPGroup, c_syncFrameTypeObjectivePanel, lv_vShowHide);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_UI_CtrlH_Init () {
    libCOMI_gt_UT_UI_CtrlH = TriggerCreate("libCOMI_gt_UT_UI_CtrlH_Func");
    TriggerEnable(libCOMI_gt_UT_UI_CtrlH, false);
    TriggerAddEventKeyPressed(libCOMI_gt_UT_UI_CtrlH, c_playerAny, c_keyH, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 8
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_UnitDeath8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_RemoveUnitInfo(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_UnitDeath8_Init () {
    libCOMI_gt_MM_UnitDeath8 = TriggerCreate("libCOMI_gt_MM_UnitDeath8_Func");
    TriggerAddEventUnitDied(libCOMI_gt_MM_UnitDeath8, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRemoved Fix 2
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_UnitRemovedFix2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_RemoveUnitInfo(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_UnitRemovedFix2_Init () {
    libCOMI_gt_MM_UnitRemovedFix2 = TriggerCreate("libCOMI_gt_MM_UnitRemovedFix2_Func");
    TriggerAddEventUnitRemoved(libCOMI_gt_MM_UnitRemovedFix2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_RandomMutationSelectOK
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_RandomMutationSelectOK_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    text lv_mutationtext;
    int lv_mutatorindex;
    int lv_mindifficulty;
    int lv_maxdifficulty;
    int lv_minmutators;
    int lv_maxmutators;

    // Automatic Variable Declarations
    int autoB8711874_ae;
    const int autoB8711874_ai = 1;
    playergroup autoEC635B43_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_RandomMutationSelectOKButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mindifficulty = RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMinSlider, EventPlayer()));
    lv_maxdifficulty = MaxI(lv_mindifficulty, RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMaxSlider, EventPlayer())));
    lv_minmutators = RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMinMutSlider, EventPlayer()));
    lv_maxmutators = MaxI(lv_minmutators, RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMaxMutSlider, EventPlayer())));
    libCOMI_gf_CU_RandomMutationSelectClose(1);
    lv_mindifficulty = RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMinSlider, EventPlayer()));
    lv_maxdifficulty = MaxI(lv_mindifficulty, RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMaxSlider, EventPlayer())));
    if ((lv_maxdifficulty < lv_mindifficulty)) {
        lv_maxdifficulty = lv_mindifficulty;
    }

    if ((lv_maxdifficulty == 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_092CF6A6"));
    }
    else {
        libCOMI_gf_CreateMutationAbominationProbabilities(lv_minmutators, lv_maxmutators, lv_mindifficulty, lv_maxdifficulty);
        TextExpressionSetToken("Param/Expression/lib_COMI_F22E9921", "A", IntToText(libCOMI_gv_cT_MAbomination_MinMutators));
        TextExpressionSetToken("Param/Expression/lib_COMI_F22E9921", "B", IntToText(libCOMI_gv_cT_MAbomination_MaxMutators));
        TextExpressionSetToken("Param/Expression/lib_COMI_F22E9921", "C", IntToText(libCOMI_gv_cT_MAbomination_MinPoints));
        TextExpressionSetToken("Param/Expression/lib_COMI_F22E9921", "D", IntToText(libCOMI_gv_cT_MAbomination_MaxPoints));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_F22E9921"));
        TextExpressionSetToken("Param/Expression/lib_COMI_47F8D9A1", "A", IntToText(libCOMI_gv_cT_MAbomination_CombosCounted));
        TextExpressionSetToken("Param/Expression/lib_COMI_47F8D9A1", "B", IntToText(libCOMI_gv_cT_MAbomination_PointsSnapshot));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_47F8D9A1"));
        TextExpressionSetToken("Param/Expression/lib_COMI_5C0940C4", "A", IntToText(libCOMI_gv_cT_MAbomination_MutatorsCount));
        TextExpressionSetToken("Param/Expression/lib_COMI_5C0940C4", "B", UserDataGetText("Mutators", libCOMI_gv_cT_MAbomination_Mutators[1], "Name", 1));
        lv_mutationtext = TextExpressionAssemble("Param/Expression/lib_COMI_5C0940C4");
        autoB8711874_ae = libCOMI_gv_cT_MAbomination_MutatorsCount;
        lv_mutatorindex = 2;
        for ( ; ( (autoB8711874_ai >= 0 && lv_mutatorindex <= autoB8711874_ae) || (autoB8711874_ai < 0 && lv_mutatorindex >= autoB8711874_ae) ) ; lv_mutatorindex += autoB8711874_ai ) {
            lv_mutationtext = (lv_mutationtext + StringToText(", ") + UserDataGetText("Mutators", libCOMI_gv_cT_MAbomination_Mutators[lv_mutatorindex], "Name", 1));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lv_mutationtext);
    }
    autoEC635B43_g = libCOMI_gf_HumanPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoEC635B43_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_RandomMutationSelectOK_Init () {
    libCOMI_gt_CU_RandomMutationSelectOK = TriggerCreate("libCOMI_gt_CU_RandomMutationSelectOK_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_RandomMutationSelectOK, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_RandomMutationSelectSliderChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_RandomMutationSelectSliderChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libCOMI_gv_cU_RandomMutationSelectMinSlider) || (EventDialogControl() == libCOMI_gv_cU_RandomMutationSelectMaxSlider) || (EventDialogControl() == libCOMI_gv_cU_RandomMutationSelectMinMutSlider) || (EventDialogControl() == libCOMI_gv_cU_RandomMutationSelectMaxMutSlider)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_RandomMutationSelectLabel, StringToText(("Difficulty: [" + IntToString(RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMinSlider, 1))) + ", " + IntToString(RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMaxSlider, 1))) + "] Mutators: [" + IntToString(RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMinMutSlider, 1))) + ", " + IntToString(RoundI(libNtve_gf_DialogItemValue(libCOMI_gv_cU_RandomMutationSelectMaxMutSlider, 1))) + "]")), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_RandomMutationSelectSliderChange_Init () {
    libCOMI_gt_CU_RandomMutationSelectSliderChange = TriggerCreate("libCOMI_gt_CU_RandomMutationSelectSliderChange_Func");
    TriggerAddEventDialogControl(libCOMI_gt_CU_RandomMutationSelectSliderChange, 1, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MutatorAcceptClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MutatorAcceptClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MutatorAcceptButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_MutatorUpdateData();
    libCOMI_gf_CU_MutatorClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MutatorAcceptClicked_Init () {
    libCOMI_gt_CU_MutatorAcceptClicked = TriggerCreate("libCOMI_gt_CU_MutatorAcceptClicked_Func");
    TriggerEnable(libCOMI_gt_CU_MutatorAcceptClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MutatorAcceptClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MutatorCancelClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MutatorCancelClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_MutatorCancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CU_MutatorClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MutatorCancelClicked_Init () {
    libCOMI_gt_CU_MutatorCancelClicked = TriggerCreate("libCOMI_gt_CU_MutatorCancelClicked_Func");
    TriggerEnable(libCOMI_gt_CU_MutatorCancelClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_MutatorCancelClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EmpowerInit
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_EmpowerInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vHeath;
    string lv_vDamage;

    // Automatic Variable Declarations
    playergroup auto4747518E_g;
    int auto4747518E_var;
    unitgroup auto85FB6FEA_g;
    int auto85FB6FEA_u;
    unit auto85FB6FEA_var;

    // Variable Initialization
    lv_vHeath = "1";
    lv_vDamage = "1";

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vHeath = StringWord(EventChatMessage(false), 2);
    lv_vDamage = StringWord(EventChatMessage(false), 3);
    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vHeath = "0";
    }

    if ((StringWord(EventChatMessage(false), 3) == null)) {
        lv_vDamage = "0";
    }

    auto4747518E_g = libCOMI_gf_GetEnemyPlayers();
    auto4747518E_var = -1;
    while (true) {
        auto4747518E_var = PlayerGroupNextPlayer(auto4747518E_g, auto4747518E_var);
        if (auto4747518E_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeSpell) + "]", auto4747518E_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeRanged) + "]", auto4747518E_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeMelee) + "]", auto4747518E_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeSplash) + "]", auto4747518E_var, lv_vDamage);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(c_unitVitalLife) + "]", auto4747518E_var, lv_vHeath);
        CatalogFieldValueSet(c_gameCatalogBehavior, "Empower", "Modification.VitalMaxAdditiveMultiplierArray[" + IntToString(c_unitVitalShields) + "]", auto4747518E_var, lv_vHeath);
    }
    auto85FB6FEA_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto85FB6FEA_u = UnitGroupCount(auto85FB6FEA_g, c_unitCountAll);
    for (;; auto85FB6FEA_u -= 1) {
        auto85FB6FEA_var = UnitGroupUnitFromEnd(auto85FB6FEA_g, auto85FB6FEA_u);
        if (auto85FB6FEA_var == null) { break; }
        UnitBehaviorAddPlayer(auto85FB6FEA_var, "Empower", libCOMI_gf_MutatorPlayer(), 1);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_COMI_3514FDE9"));
    TriggerEnable(libCOMI_gt_UT_EmpowerUnitCreated, true);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_EmpowerInit_Init () {
    libCOMI_gt_UT_EmpowerInit = TriggerCreate("libCOMI_gt_UT_EmpowerInit_Func");
    TriggerAddEventChatMessage(libCOMI_gt_UT_EmpowerInit, c_playerAny, "-empower", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EmpowerUnitCreated
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_UT_EmpowerUnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "Empower", libCOMI_gf_MutatorPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_UT_EmpowerUnitCreated_Init () {
    libCOMI_gt_UT_EmpowerUnitCreated = TriggerCreate("libCOMI_gt_UT_EmpowerUnitCreated_Func");
    TriggerEnable(libCOMI_gt_UT_EmpowerUnitCreated, false);
    TriggerAddEventUnitCreated(libCOMI_gt_UT_EmpowerUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorChangePage
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorChangePage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == libCOMI_gv_cU_CustomMutatorPageNextButton)) {
        if ((libCOMI_gv_cU_CustomMutatorPageSelection[EventPlayer()] < libCOMI_gv_cU_CustomMutatorPageCount)) {
            libCOMI_gv_cU_CustomMutatorPageSelection[EventPlayer()] += 1;
        }

        libCOMI_gf_CU_CustomMutatorUpdate(EventPlayer());
    }
    else if ((EventDialogControl() == libCOMI_gv_cU_CustomMutatorPagePrevButton)) {
        if ((libCOMI_gv_cU_CustomMutatorPageSelection[EventPlayer()] > 1)) {
            libCOMI_gv_cU_CustomMutatorPageSelection[EventPlayer()] -= 1;
        }

        libCOMI_gf_CU_CustomMutatorUpdate(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorChangePage_Init () {
    libCOMI_gt_CU_CustomMutatorChangePage = TriggerCreate("libCOMI_gt_CU_CustomMutatorChangePage_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorChangePage, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorChangePage, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorToggleItem
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorToggleItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_frameIndex;
    int lv_clickedItemIndex;
    int lv_activeItemIndex;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    const int auto2D7C47B9_ae = libCOMI_gv_cUC_CustomMutatorItemsPerPage;
    const int auto2D7C47B9_ai = 1;
    int autoCA779360_ae;
    const int autoCA779360_ai = 1;
    int autoEAF1F8AD_ae;
    const int autoEAF1F8AD_ai = 1;
    playergroup auto46031D3A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_frameIndex = 1;
    for ( ; ( (auto2D7C47B9_ai >= 0 && lv_frameIndex <= auto2D7C47B9_ae) || (auto2D7C47B9_ai < 0 && lv_frameIndex >= auto2D7C47B9_ae) ) ; lv_frameIndex += auto2D7C47B9_ai ) {
        if ((EventDialogControl() == libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex])) {
            lv_clickedItemIndex = (libCOMI_gv_cUC_CustomMutatorItemsPerPage*(libCOMI_gv_cU_CustomMutatorPageSelection[1]-1)+lv_frameIndex);
            if ((libCOMI_gv_cU_CustomMutatorItemStates[lv_clickedItemIndex] == true) && (libCOMI_gf_CT_MutatorCustomMultipleAllowed(libCOMI_gv_cU_CustomMutatorItems[lv_clickedItemIndex]) == false)) {
                libCOMI_gv_cU_CustomMutatorItemStates[lv_clickedItemIndex] = false;
                autoCA779360_ae = libCOMI_gv_cU_CustomMutatorActiveItemCount;
                lv_activeItemIndex = 1;
                for ( ; ( (autoCA779360_ai >= 0 && lv_activeItemIndex <= autoCA779360_ae) || (autoCA779360_ai < 0 && lv_activeItemIndex >= autoCA779360_ae) ) ; lv_activeItemIndex += autoCA779360_ai ) {
                    if ((libCOMI_gv_cU_CustomMutatorActiveItems[lv_activeItemIndex] == lv_clickedItemIndex)) {
                        break;
                    }

                }
                autoEAF1F8AD_ae = (libCOMI_gv_cU_CustomMutatorActiveItemCount-1);
                lv_activeItemIndex = lv_activeItemIndex;
                for ( ; ( (autoEAF1F8AD_ai >= 0 && lv_activeItemIndex <= autoEAF1F8AD_ae) || (autoEAF1F8AD_ai < 0 && lv_activeItemIndex >= autoEAF1F8AD_ae) ) ; lv_activeItemIndex += autoEAF1F8AD_ai ) {
                    libCOMI_gv_cU_CustomMutatorActiveItems[lv_activeItemIndex] = libCOMI_gv_cU_CustomMutatorActiveItems[(lv_activeItemIndex+1)];
                }
                libCOMI_gv_cU_CustomMutatorActiveItems[libCOMI_gv_cU_CustomMutatorActiveItemCount] = 0;
                libCOMI_gv_cU_CustomMutatorActiveItemCount -= 1;
                SoundPlayForPlayer(SoundLink("AC_CM_UI_DeSelect", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            else {
                if ((libCOMI_gv_cU_CustomMutatorActiveItemCount >= libCOMI_gv_cUC_CustomMutatorItemsActiveMax)) {
                    return true;
                }

                libCOMI_gv_cU_CustomMutatorItemStates[lv_clickedItemIndex] = true;
                libCOMI_gv_cU_CustomMutatorActiveItemCount += 1;
                libCOMI_gv_cU_CustomMutatorActiveItems[libCOMI_gv_cU_CustomMutatorActiveItemCount] = lv_clickedItemIndex;
                SoundPlayForPlayer(SoundLink("AC_CM_UI_Select", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
            auto46031D3A_g = libCOMI_gf_HumanPlayers();
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(auto46031D3A_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                libCOMI_gf_CU_CustomMutatorUpdate(lv_indexPlayer);
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorToggleItem_Init () {
    libCOMI_gt_CU_CustomMutatorToggleItem = TriggerCreate("libCOMI_gt_CU_CustomMutatorToggleItem_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorToggleItem, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorToggleItem, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorSuggestItem
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorSuggestItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_frameIndex;
    int lv_clickedItemIndex;
    int lv_activeItemIndex;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    const int auto29937443_ae = libCOMI_gv_cUC_CustomMutatorItemsPerPage;
    const int auto29937443_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_frameIndex = 1;
    for ( ; ( (auto29937443_ai >= 0 && lv_frameIndex <= auto29937443_ae) || (auto29937443_ai < 0 && lv_frameIndex >= auto29937443_ae) ) ; lv_frameIndex += auto29937443_ai ) {
        if ((EventDialogControl() == libCOMI_gv_cU_CustomMutatorItemButtons[lv_frameIndex])) {
            lv_clickedItemIndex = (libCOMI_gv_cUC_CustomMutatorItemsPerPage*(libCOMI_gv_cU_CustomMutatorPageSelection[2]-1)+lv_frameIndex);
            TextExpressionSetToken("Param/Expression/lib_COMI_954EE9B0", "ID", IntToText(EventPlayer()));
            TextExpressionSetToken("Param/Expression/lib_COMI_954EE9B0", "PLAYER", PlayerName(EventPlayer()));
            TextExpressionSetToken("Param/Expression/lib_COMI_954EE9B0", "MUTATOR", libCOMI_gf_CT_MutatorName(libCOMI_gv_cU_CustomMutatorItems[lv_clickedItemIndex]));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_COMI_954EE9B0"));
            SoundPlayForPlayer(SoundLink("AC_CM_UI_Select", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorSuggestItem_Init () {
    libCOMI_gt_CU_CustomMutatorSuggestItem = TriggerCreate("libCOMI_gt_CU_CustomMutatorSuggestItem_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorSuggestItem, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorSuggestItem, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorRemoveActiveItem
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorRemoveActiveItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_activeItemIndex;
    int lv_removeItemIndex;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int auto60D8708E_ae;
    const int auto60D8708E_ai = 1;
    int auto7DBBC35C_ae;
    const int auto7DBBC35C_ai = 1;
    playergroup auto79B96D89_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto60D8708E_ae = libCOMI_gv_cU_CustomMutatorActiveItemCount;
    lv_activeItemIndex = 1;
    for ( ; ( (auto60D8708E_ai >= 0 && lv_activeItemIndex <= auto60D8708E_ae) || (auto60D8708E_ai < 0 && lv_activeItemIndex >= auto60D8708E_ae) ) ; lv_activeItemIndex += auto60D8708E_ai ) {
        if ((EventDialogControl() == libCOMI_gv_cU_CustomMutatorActiveItemButtons[lv_activeItemIndex])) {
            lv_removeItemIndex = lv_activeItemIndex;
            break;
        }

    }
    if ((lv_removeItemIndex == 0)) {
        return true;
    }

    libCOMI_gv_cU_CustomMutatorItemStates[libCOMI_gv_cU_CustomMutatorActiveItems[lv_removeItemIndex]] = false;
    auto7DBBC35C_ae = (libCOMI_gv_cU_CustomMutatorActiveItemCount-1);
    lv_activeItemIndex = lv_removeItemIndex;
    for ( ; ( (auto7DBBC35C_ai >= 0 && lv_activeItemIndex <= auto7DBBC35C_ae) || (auto7DBBC35C_ai < 0 && lv_activeItemIndex >= auto7DBBC35C_ae) ) ; lv_activeItemIndex += auto7DBBC35C_ai ) {
        libCOMI_gv_cU_CustomMutatorActiveItems[lv_activeItemIndex] = libCOMI_gv_cU_CustomMutatorActiveItems[(lv_activeItemIndex+1)];
    }
    libCOMI_gv_cU_CustomMutatorActiveItems[libCOMI_gv_cU_CustomMutatorActiveItemCount] = 0;
    libCOMI_gv_cU_CustomMutatorActiveItemCount -= 1;
    SoundPlayForPlayer(SoundLink("AC_CM_UI_DeSelect", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    auto79B96D89_g = libCOMI_gf_HumanPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto79B96D89_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMI_gf_CU_CustomMutatorUpdate(lv_indexPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorRemoveActiveItem_Init () {
    libCOMI_gt_CU_CustomMutatorRemoveActiveItem = TriggerCreate("libCOMI_gt_CU_CustomMutatorRemoveActiveItem_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorRemoveActiveItem, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorRemoveActiveItem, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorStartGame
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorStartGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_countdownSecond;

    // Automatic Variable Declarations
    const int autoF1CF94B9_ae = 1;
    const int autoF1CF94B9_ai = -1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CustomMutatorStartButton))) {
            return false;
        }

        if (!((libCOMI_gv_cU_CustomMutatorStartingUp == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cU_CustomMutatorStartingUp = true;
    DialogControlSendAnimationEvent(libCOMI_gv_cU_CustomMutatorPanel, PlayerGroupAll(), "CountdownStart");
    Wait(0.5, c_timeReal);
    SoundPlayForPlayer(SoundLink("AC_CM_UI_Countdown_4MxFull", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_countdownSecond = libCOMI_gv_cUC_CustomMutatorCountdownTime;
    for ( ; ( (autoF1CF94B9_ai >= 0 && lv_countdownSecond <= autoF1CF94B9_ae) || (autoF1CF94B9_ai < 0 && lv_countdownSecond >= autoF1CF94B9_ae) ) ; lv_countdownSecond += autoF1CF94B9_ai ) {
        DialogControlSendAnimationEvent(libCOMI_gv_cU_CustomMutatorPanel, PlayerGroupAll(), ("Countdown" + IntToString(lv_countdownSecond)));
        Wait(1.0, c_timeReal);
    }
    DialogControlSendAnimationEvent(libCOMI_gv_cU_CustomMutatorPanel, PlayerGroupAll(), "CountdownEnd");
    TriggerSendEvent(libCOMI_gv_cUC_CustomMutatorEventStart);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorStartGame_Init () {
    libCOMI_gt_CU_CustomMutatorStartGame = TriggerCreate("libCOMI_gt_CU_CustomMutatorStartGame_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorStartGame, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorStartGame, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorOpenMenu
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorOpenMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CustomMutatorMenuButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIShowStandardMenu(PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorOpenMenu_Init () {
    libCOMI_gt_CU_CustomMutatorOpenMenu = TriggerCreate("libCOMI_gt_CU_CustomMutatorOpenMenu_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorOpenMenu, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorOpenMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorLeaderLeaves
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorLeaderLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(2), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "Coop_CustomMutatorTemplates/StandardFakeDialogTemplate");
    libCOMI_gv_cU_CustomMutatorLeaderExitPanel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_CustomMutatorLeaderExitPanel, c_triggerControlTypeButton, "Button");
    libCOMI_gv_cU_CustomMutatorLeaderExitButton = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_CustomMutatorLeaderExitPanel, c_triggerControlTypeLabel, "TitleLabel");
    libCOMI_gv_cU_CustomMutatorLeaderExitTitleLabel = DialogControlLastCreated();
    DialogControlHookup(libCOMI_gv_cU_CustomMutatorLeaderExitPanel, c_triggerControlTypeLabel, "MessageLabel");
    libCOMI_gv_cU_CustomMutatorLeaderExitMessageLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorLeaderExitTitleLabel, StringExternal("Param/Value/lib_COMI_AE5CDF98"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libCOMI_gv_cU_CustomMutatorLeaderExitMessageLabel, StringExternal("Param/Value/lib_COMI_DBD7631D"), PlayerGroupAll());
    TriggerEnable(libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss, true);
    Wait(10.0, c_timeReal);
    GameOver(2, c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorLeaderLeaves_Init () {
    libCOMI_gt_CU_CustomMutatorLeaderLeaves = TriggerCreate("libCOMI_gt_CU_CustomMutatorLeaderLeaves_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorLeaderLeaves, false);
    TriggerAddEventPlayerLeft(libCOMI_gt_CU_CustomMutatorLeaderLeaves, 1, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorLeaderLeavesDismiss
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CustomMutatorLeaderExitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(EventPlayer(), c_gameOverDefeat, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss_Init () {
    libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss = TriggerCreate("libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_CustomMutatorSpeedChange
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_CustomMutatorSpeedChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CustomMutatorSpeedDropDown))) {
            return false;
        }

        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSelectItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, PlayerGroupSingle(2), DialogControlGetSelectedItem(libCOMI_gv_cU_CustomMutatorSpeedDropDown, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_CustomMutatorSpeedChange_Init () {
    libCOMI_gt_CU_CustomMutatorSpeedChange = TriggerCreate("libCOMI_gt_CU_CustomMutatorSpeedChange_Func");
    TriggerEnable(libCOMI_gt_CU_CustomMutatorSpeedChange, false);
    TriggerAddEventDialogControl(libCOMI_gt_CU_CustomMutatorSpeedChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MutatorAcceptClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_MutatorAcceptClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_mM_MutatorAcceptButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_MM_MutatorUpdateData();
    libCOMI_gf_MM_MutatorClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_MutatorAcceptClicked_Init () {
    libCOMI_gt_MM_MutatorAcceptClicked = TriggerCreate("libCOMI_gt_MM_MutatorAcceptClicked_Func");
    TriggerEnable(libCOMI_gt_MM_MutatorAcceptClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_MM_MutatorAcceptClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MutatorCancelClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_MutatorCancelClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_mM_MutatorCancelButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_MM_MutatorClose(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_MutatorCancelClicked_Init () {
    libCOMI_gt_MM_MutatorCancelClicked = TriggerCreate("libCOMI_gt_MM_MutatorCancelClicked_Func");
    TriggerEnable(libCOMI_gt_MM_MutatorCancelClicked, false);
    TriggerAddEventDialogControl(libCOMI_gt_MM_MutatorCancelClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_CommanderMutatorsClicked
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_CommanderMutatorsClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libCOMI_gv_cU_CommanderMutatorButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libCOMI_gf_MM_MutatorDisplay(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_CommanderMutatorsClicked_Init () {
    libCOMI_gt_MM_CommanderMutatorsClicked = TriggerCreate("libCOMI_gt_MM_CommanderMutatorsClicked_Func");
    TriggerAddEventDialogControl(libCOMI_gt_MM_CommanderMutatorsClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MutatorListNotificationExpired
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CU_MutatorListNotificationExpired_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlSendAnimationEvent(libCOMI_gv_cU_MutatorListNotificationLabel, PlayerGroupAll(), "Hide");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CU_MutatorListNotificationExpired_Init () {
    libCOMI_gt_CU_MutatorListNotificationExpired = TriggerCreate("libCOMI_gt_CU_MutatorListNotificationExpired_Func");
    TriggerEnable(libCOMI_gt_CU_MutatorListNotificationExpired, false);
    TriggerAddEventTimer(libCOMI_gt_CU_MutatorListNotificationExpired, libCOMI_gv_cU_MutatorListNotificationTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_InitPlayerX
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_PX_InitPlayerX_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;
    int lv_max_level;
    int lv_vA;

    // Automatic Variable Declarations
    const int auto78732230_ae = 5;
    const int auto78732230_ai = -1;
    playergroup autoFACE9C50_g;
    int autoFACE9C50_var;
    playergroup auto599F43BC_g;
    int auto599F43BC_var;
    int autoA0E3AE12_catalog;
    int autoA0E3AE12_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerType(libCOMI_gv_mM_PX_PlayerX) != c_playerTypeNone)) {
        lv_vA = 13;
        for ( ; ( (auto78732230_ai >= 0 && lv_vA <= auto78732230_ae) || (auto78732230_ai < 0 && lv_vA >= auto78732230_ae) ) ; lv_vA += auto78732230_ai ) {
            if ((PlayerType(lv_vA) == c_playerTypeNone)) {
                libCOMI_gv_mM_PX_PlayerX = lv_vA;
                libCOMI_gv_mM_PlayerX = lv_vA;
                break;
            }

        }
    }

    AICampaignStart(libCOMI_gv_mM_PX_PlayerX);
    PlayerSetColorIndex(libCOMI_gv_mM_PX_PlayerX, 7, true);
    TechTreeUpgradeAddLevel(libCOMI_gv_mM_PX_PlayerX, "overlordtransport", 1);
    TechTreeUpgradeAddLevel(libCOMI_gv_mM_PX_PlayerX, "overlordspeed", 1);
    autoFACE9C50_g = libCOMI_gf_GetEnemyPlayers();
    autoFACE9C50_var = -1;
    while (true) {
        autoFACE9C50_var = PlayerGroupNextPlayer(autoFACE9C50_g, autoFACE9C50_var);
        if (autoFACE9C50_var < 0) { break; }
        libNtve_gf_SetAlliance(libCOMI_gv_mM_PX_PlayerX, autoFACE9C50_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    }
    auto599F43BC_g = PlayerGroupAlliance(c_playerGroupAlly, 1);
    auto599F43BC_var = -1;
    while (true) {
        auto599F43BC_var = PlayerGroupNextPlayer(auto599F43BC_g, auto599F43BC_var);
        if (auto599F43BC_var < 0) { break; }
        libNtve_gf_SetAlliance(libCOMI_gv_mM_PX_PlayerX, auto599F43BC_var, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAlliance(libCOMI_gv_mM_PX_PlayerX, 1, libNtve_ge_AllianceSetting_Enemy);
    TriggerEnable(libCOMI_gt_MM_PX_UpgradeParityPlayerX, true);
    autoA0E3AE12_catalog = c_gameCatalogUpgrade;
    autoA0E3AE12_i = 1;
    for ( ; autoA0E3AE12_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; autoA0E3AE12_i += 1 ) {
        lv_vUpgrade = CatalogEntryGet(autoA0E3AE12_catalog, autoA0E3AE12_i);
        if ((lv_vUpgrade != "Player0102")) {
            lv_max_level = 0;
            lv_max_level = MaxI(lv_max_level, TechTreeUpgradeCount(libCOMI_gf_AffectedPlayer(1), lv_vUpgrade, c_techCountCompleteOnly));
            lv_max_level = MaxI(lv_max_level, TechTreeUpgradeCount(libCOMI_gf_AffectedPlayer(2), lv_vUpgrade, c_techCountCompleteOnly));
            lv_max_level = MaxI(lv_max_level, TechTreeUpgradeCount(libCOMI_gf_AffectedPlayer(3), lv_vUpgrade, c_techCountCompleteOnly));
            lv_max_level = MaxI(lv_max_level, TechTreeUpgradeCount(libCOMI_gf_AffectedPlayer(4), lv_vUpgrade, c_techCountCompleteOnly));
            lv_max_level = MaxI(lv_max_level, TechTreeUpgradeCount(libCOMI_gf_AffectedPlayer(5), lv_vUpgrade, c_techCountCompleteOnly));
            if ((lv_max_level > 0)) {
                TechTreeUpgradeAddLevel(libCOMI_gv_mM_PX_PlayerX, lv_vUpgrade, lv_max_level);
            }

        }

    }
    TriggerSendEvent("Mutators PlayerX Initialize");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_PX_InitPlayerX_Init () {
    libCOMI_gt_MM_PX_InitPlayerX = TriggerCreate("libCOMI_gt_MM_PX_InitPlayerX_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UpgradeParityPlayerX
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_PX_UpgradeParityPlayerX_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUpgradeLevelDelta() >= 1))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(240.0, c_timeGame);
    TechTreeUpgradeAddLevel(libCOMI_gv_mM_PX_PlayerX, EventUpgradeName(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_PX_UpgradeParityPlayerX_Init () {
    libCOMI_gt_MM_PX_UpgradeParityPlayerX = TriggerCreate("libCOMI_gt_MM_PX_UpgradeParityPlayerX_Func");
    TriggerEnable(libCOMI_gt_MM_PX_UpgradeParityPlayerX, false);
    TriggerAddEventUpgradeLevelChanged(libCOMI_gt_MM_PX_UpgradeParityPlayerX, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Mutators
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_InitializeMutators_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_indexMutator;

    // Automatic Variable Declarations
    playergroup autoE15AB9B6_g;
    int autoE15AB9B6_var;
    int auto81D6964A_ai;
    int auto81D6964A_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gv_cT_MutatorSafetyZone = libCOMI_gf_GetSafetyZone();
    libCOMI_gf_UT_SignalMutators();
    libCOMI_gf_CU_MutatorListInit();
    autoE15AB9B6_g = PlayerGroupAll();
    autoE15AB9B6_var = -1;
    while (true) {
        autoE15AB9B6_var = PlayerGroupNextPlayer(autoE15AB9B6_g, autoE15AB9B6_var);
        if (autoE15AB9B6_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(autoE15AB9B6_var, "ConstructingEnabled", 1);
    }
    if ((libCOMI_gf_MutatorIsEnabled("CycleRandom") == true)) {
        TriggerSendEvent(("Mutator " + ("CycleRandom") + " Initialize"));
    }

    auto81D6964A_ai = 1;
    auto81D6964A_ae = UserDataInstanceCount("Mutators")+1;
    while (auto81D6964A_ai < auto81D6964A_ae) {
        lv_indexMutator = UserDataInstance("Mutators", auto81D6964A_ai);
        auto81D6964A_ai = auto81D6964A_ai+1;
        if ((lv_indexMutator != "CycleRandom") && (libCOMI_gf_MutatorIsEnabled(lv_indexMutator) == true)) {
            TriggerSendEvent(("Mutator " + (lv_indexMutator) + " Initialize"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_InitializeMutators_Init () {
    libCOMI_gt_InitializeMutators = TriggerCreate("libCOMI_gt_InitializeMutators_Func");
    TriggerEnable(libCOMI_gt_InitializeMutators, false);
    TriggerAddEventGeneric(libCOMI_gt_InitializeMutators, libCOMI_gv_mISSIONINITIALIZED);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_EvilSoACast
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CT_EvilSoACast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unitgroup lv_playerUnits;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        lv_playerUnits = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_targetUnit = UnitGroupRandomUnit(lv_playerUnits, c_unitCountAlive);
        if ((lv_targetUnit == null)) {
            continue;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CT_EvilSoACast_Init () {
    libCOMI_gt_CT_EvilSoACast = TriggerCreate("libCOMI_gt_CT_EvilSoACast_Func");
    TriggerEnable(libCOMI_gt_CT_EvilSoACast, false);
    TriggerAddEventTimePeriodic(libCOMI_gt_CT_EvilSoACast, 115.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Random Mutator Fix
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_RandomMutatorFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vRandomEnabled;

    // Automatic Variable Declarations
    int auto90E88E72_ae;
    int auto90E88E72_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_MutatorIsEnabled("Random") == true)) {
        libCOMI_gf_EnableDisableMutator(false, "Random");
        lv_vRandomEnabled = true;
    }

    Wait(2.0, c_timeGame);
    if ((libCOMI_gv_mM_RandomMutatorCount >= 1)) {
        auto90E88E72_ae = libCOMI_gv_mM_RandomMutatorCount;
        auto90E88E72_var = 1;
        for ( ; auto90E88E72_var <= auto90E88E72_ae; auto90E88E72_var += 1 ) {
            libCOMI_gf_MM_EnableMutator(libCOMI_gf_MM_RandomUnusedCustomMutator(), false, true, 0);
        }
        return true;
    }

    if ((lv_vRandomEnabled == true)) {
        libCOMI_gf_MM_EnableMutator(libCOMI_gf_MM_RandomUnusedCustomMutator(), false, true, 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_RandomMutatorFix_Init () {
    libCOMI_gt_MM_RandomMutatorFix = TriggerCreate("libCOMI_gt_MM_RandomMutatorFix_Func");
    libCOMI_gf_CU_CommanderClosed(libCOMI_gt_MM_RandomMutatorFix);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_RandomMutator
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_MM_RandomMutator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vX;

    // Automatic Variable Declarations
    int auto8434BEE9_ae;
    int auto8434BEE9_var;

    // Variable Initialization
    lv_vX = StringToInt(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsMissionTimePaused() == true)) {
        TextExpressionSetToken("Param/Expression/lib_COMI_9A277074", "A", IntToText(lv_vX));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_COMI_9A277074"));
        libCOMI_gv_mM_RandomMutatorCount = lv_vX;
    }
    else {
        if ((lv_vX >= 1)) {
            auto8434BEE9_ae = StringToInt(StringWord(EventChatMessage(false), 2));
            auto8434BEE9_var = 1;
            for ( ; auto8434BEE9_var <= auto8434BEE9_ae; auto8434BEE9_var += 1 ) {
                libCOMI_gf_MM_EnableMutator(libCOMI_gf_MM_RandomUnusedCustomMutator(), true, true, 0);
                Wait(1.5, c_timeGame);
            }
        }
        else {
            libCOMI_gf_MM_EnableMutator(libCOMI_gf_MM_RandomUnusedCustomMutator(), true, true, 0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_MM_RandomMutator_Init () {
    libCOMI_gt_MM_RandomMutator = TriggerCreate("libCOMI_gt_MM_RandomMutator_Func");
    TriggerAddEventChatMessage(libCOMI_gt_MM_RandomMutator, c_playerAny, "-randommut", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeCycleRandom
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CT_InitializeCycleRandom_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mutatorIndex;

    // Automatic Variable Declarations
    const int autoEDBE0814_ae = 3;
    const int autoEDBE0814_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mutatorIndex = 1;
    for ( ; ( (autoEDBE0814_ai >= 0 && lv_mutatorIndex <= autoEDBE0814_ae) || (autoEDBE0814_ai < 0 && lv_mutatorIndex >= autoEDBE0814_ae) ) ; lv_mutatorIndex += autoEDBE0814_ai ) {
        while (true) {
            libCOMI_gv_cT_RandomMutators[lv_mutatorIndex] = libCOMI_gf_CT_RandomUnusedCycleMutator();
            if ((libCOMI_gf_CT_MutatorRandomFirstAllowed(libCOMI_gv_cT_RandomMutators[lv_mutatorIndex]) == true)) {
                break;
            }

        }
        libCOMI_gf_EnableDisableMutator(true, libCOMI_gv_cT_RandomMutators[lv_mutatorIndex]);
    }
    Wait(0.0625, c_timeGame);
    libCOMI_gf_CU_MutatorListSetItem(4, libCOMI_gv_cT_RandomMutators[3]);
    libCOMI_gf_CU_MutatorListSetItem(3, libCOMI_gv_cT_RandomMutators[2]);
    libCOMI_gf_CU_MutatorListSetItem(2, libCOMI_gv_cT_RandomMutators[1]);
    libCOMI_gf_CU_MutatorListSetItem(1, "CycleRandom");
    TriggerExecute(libCOMI_gt_CT_CycleRandomMutators, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CT_InitializeCycleRandom_Init () {
    libCOMI_gt_CT_InitializeCycleRandom = TriggerCreate("libCOMI_gt_CT_InitializeCycleRandom_Func");
    TriggerAddEventGeneric(libCOMI_gt_CT_InitializeCycleRandom, ("Mutator " + "CycleRandom" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownCycleRandom
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CT_ShutdownCycleRandom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CT_ShutdownCycleRandom_Init () {
    libCOMI_gt_CT_ShutdownCycleRandom = TriggerCreate("libCOMI_gt_CT_ShutdownCycleRandom_Func");
    TriggerAddEventGeneric(libCOMI_gt_CT_ShutdownCycleRandom, ("Mutator " + "CycleRandom" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_CycleRandomMutators
//--------------------------------------------------------------------------------------------------
bool libCOMI_gt_CT_CycleRandomMutators_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cycleIndex;
    string lv_newMutator;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMI_gv_cT_RandomCycleTimer, 270.0, false, c_timeGame);
    libNtve_gf_WaitForTimer(libCOMI_gv_cT_RandomCycleTimer, 0.0, false);
    while (true) {
        lv_newMutator = libCOMI_gf_CT_RandomUnusedCycleMutator();
        libCOMI_gf_EnableDisableMutator(false, libCOMI_gv_cT_RandomMutators[3]);
        libCOMI_gf_CU_MutatorListHideItem(4);
        SoundPlayForPlayer(SoundLink("MutatorRemoval", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(11.5, c_timeGame);
        SoundPlayForPlayer(SoundLink("ChaosStudio", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(3.25, c_timeGame);
        libCOMI_gv_cT_RandomMutators[3] = libCOMI_gv_cT_RandomMutators[2];
        libCOMI_gv_cT_RandomMutators[2] = libCOMI_gv_cT_RandomMutators[1];
        libCOMI_gv_cT_RandomMutators[1] = lv_newMutator;
        libCOMI_gf_EnableDisableMutator(true, lv_newMutator);
        libCOMI_gf_CU_MutatorListSetItem(4, libCOMI_gv_cT_RandomMutators[3]);
        libCOMI_gf_CU_MutatorListSetItem(3, libCOMI_gv_cT_RandomMutators[2]);
        libCOMI_gf_CU_MutatorListSetItem(2, libCOMI_gv_cT_RandomMutators[1]);
        TextExpressionSetToken("Param/Expression/lib_COMI_8A781658", "A", libCOMI_gf_CT_MutatorName(lv_newMutator));
        libCOMI_gf_CU_MutatorListShowNotification(TextExpressionAssemble("Param/Expression/lib_COMI_8A781658"));
        TriggerSendEvent(("Mutator " + (lv_newMutator) + " Initialize"));
        TimerStart(libCOMI_gv_cT_RandomCycleTimer, 90.0, false, c_timeGame);
        libNtve_gf_WaitForTimer(libCOMI_gv_cT_RandomCycleTimer, 0.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMI_gt_CT_CycleRandomMutators_Init () {
    libCOMI_gt_CT_CycleRandomMutators = TriggerCreate("libCOMI_gt_CT_CycleRandomMutators_Func");
    TriggerEnable(libCOMI_gt_CT_CycleRandomMutators, false);
}

void libCOMI_InitTriggers () {
    libCOMI_gt_DefaultMapInitializeTrigger_Init();
    libCOMI_gt_DefaultGameStartTrigger_Init();
    libCOMI_gt_InitialExploration_Init();
    libCOMI_gt_CM_CampaignMissionInitialize_Init();
    libCOMI_gt_CM_CampaignMissionInitialize2_Init();
    libCOMI_gt_CheckStartingResources_Init();
    libCOMI_gt_CheckStartingSupplies_Init();
    libCOMI_gt_SuppliesMaxUpgrades_Init();
    libCOMI_gt_SuppliesMadeUpgrades_Init();
    libCOMI_gt_CC_SharedUpgradesRecheck_Init();
    libCOMI_gt_CC_PrestigeUpgradeSupplement_Init();
    libCOMI_gt_SkinUpgrades_Init();
    libCOMI_gt_Autocasting_Init();
    libCOMI_gt_VoidIncome_Init();
    libCOMI_gt_VoidIncomeIncrease_Init();
    libCOMI_gt_AmonGameplay_Init();
    libCOMI_gt_AmonChangeOwner_Init();
    libCOMI_gt_setobserver_Init();
    libCOMI_gt_ReplaceDoodads_Init();
    libCOMI_gt_AttackFastBuffHack_Init();
    libCOMI_gt_DmgandAttackSpeedInheritNew_Init();
    libCOMI_gt_DmgandAttackSpeedInheritExisting_Init();
    libCOMI_gt_CM_CargoDeath_Init();
    libCOMI_gt_UnitBehaviors_Init();
    libCOMI_gt_BehaviorPermanentlyChangesOwner_Init();
    libCOMI_gt_DeathPreventGrantKillCredit_Init();
    libCOMI_gt_CU_HeroPanelUpdate_Init();
    libCOMI_gt_CU_HeroUnitDamaged_Init();
    libCOMI_gt_CU_HeroUnitVitalChange_Init();
    libCOMI_gt_CU_HeroMouseHoverText_Init();
    libCOMI_gt_HeroDied_Init();
    libCOMI_gt_SamePlaceRevive_Init();
    libCOMI_gt_CM_InstantRevive_Init();
    libCOMI_gt_CU_GPBirthFinished_Init();
    libCOMI_gt_CU_GPDeathRemove2D_Init();
    libCOMI_gt_CU_GPVitalChanges_Init();
    libCOMI_gt_TopBarNotificationsEnableDisable_Init();
    libCOMI_gt_AF_TopBarClicked_Init();
    libCOMI_gt_AF_MouseEntersTopBar_Init();
    libCOMI_gt_AF_MouseExitsTopBar_Init();
    libCOMI_gt_VU_EnemyFactionChanged_Init();
    libCOMI_gt_FactionButtonClicked_Init();
    libCOMI_gt_AF_CS_NewsControlButtonClicked_Init();
    libCOMI_gt_UT_CommandsButtonClicked_Init();
    libCOMI_gt_CU_PlayerLeftInLobby_Init();
    libCOMI_gt_CommanderButtonClicked_Init();
    libCOMI_gt_UT_PrestigeAlly_Init();
    libCOMI_gt_UT_CommanderClicked_Init();
    libCOMI_gt_CU_CommanderLevelUpClicked_Init();
    libCOMI_gt_CU_CommanderLevelDownClicked_Init();
    libCOMI_gt_CU_CommanderMutatorChallengeSelected_Init();
    libCOMI_gt_AF_CS_AllyPrestigeChanged_Init();
    libCOMI_gt_UT_AllyMasteryButtonClicked_Init();
    libCOMI_gt_CU_CommanderMasteryClicked_Init();
    libCOMI_gt_CU_CommanderMasteryCheckboxToggle_Init();
    libCOMI_gt_ReadyButtonClicked_Init();
    libCOMI_gt_CU_CommandeAllyLeft_Init();
    libCOMI_gt_CU_MasteryShiftTrackDown_Init();
    libCOMI_gt_CU_MasteryShiftTrackUp_Init();
    libCOMI_gt_CU_MasteryLevelUpPressed_Init();
    libCOMI_gt_CU_MasteryLevelDownPressed_Init();
    libCOMI_gt_CU_MasteryItemPlusPressed_Init();
    libCOMI_gt_CU_MasteryItemMinusPressed_Init();
    libCOMI_gt_CU_MasteryResetPressed_Init();
    libCOMI_gt_CU_MasteryAcceptPressed_Init();
    libCOMI_gt_CU_PrestigeButtonClicked_Init();
    libCOMI_gt_GameModePulldownUsed_Init();
    libCOMI_gt_DifficultyPulldownUsed_Init();
    libCOMI_gt_AF_SlimUI_Delayed_Init();
    libCOMI_gt_CU_FlashArmyButtonHelpTip_Init();
    libCOMI_gt_CU_ArmyButtonUsed_Init();
    libCOMI_gt_CS_ArmyButtonMissionInit_Init();
    libCOMI_gt_CU_BB_BossHPChanged_Init();
    libCOMI_gt_CU_HealthWatchLifeCheck_Init();
    libCOMI_gt_CU_HealthWatchUnitDies_Init();
    libCOMI_gt_CU_HealthWatchFlash_Init();
    libCOMI_gt_CU_HealthWatchStartSound_Init();
    libCOMI_gt_CU_HealthWatchHeartLoop_Init();
    libCOMI_gt_CU_HealthWatchBreathLoop_Init();
    libCOMI_gt_CU_TargetingCancelButtonUsed_Init();
    libCOMI_gt_CM_SoATargetingForceOff_Init();
    libCOMI_gt_CM_SoATargetingCancelFromUI_Init();
    libCOMI_gt_CU_TimerWindowFlash_Init();
    libCOMI_gt_CU_TimerWindowMoveForBossBar_Init();
    libCOMI_gt_CU_TimerWindowThresholdCrossed_Init();
    libCOMI_gt_CU_WaveTimerWindowUpdateTime_Init();
    libCOMI_gt_CU_ScoreClosed_Init();
    libCOMI_gt_CU_FanfareDismissed_Init();
    libCOMI_gt_MapListslectionChanged_Init();
    libCOMI_gt_MapButtonClicked_Init();
    libCOMI_gt_MissionsButtonClicked_Init();
    libCOMI_gt_StartMission_Init();
    libCOMI_gt_CreateMissionsDialog_Init();
    libCOMI_gt_CM_AutoRevealRegionController_Init();
    libCOMI_gt_PerformanceSleepArea_Init();
    libCOMI_gt_TasksInitialization_Init();
    libCOMI_gt_TaskCleanUpCoop_Init();
    libCOMI_gt_AttacksController_Init();
    libCOMI_gt_BaseTargetAttack_Init();
    libCOMI_gt_AttackDefaultVOResponse_Init();
    libCOMI_gt_DefaultMissionWavesTechProgression_Init();
    libCOMI_gt_DefaultMissionWavesSizeProgression_Init();
    libCOMI_gt_PriorityTargetAttack_Init();
    libCOMI_gt_CM_CoopAI_AIDetectionManager_Init();
    libCOMI_gt_CM_CoopAI_AIManager_Init();
    libCOMI_gt_CM_CoopAI_AttackWaveSetup_Init();
    libCOMI_gt_CM_DropPod_Zerg_DontWait_Init();
    libCOMI_gt_CM_DropPod_Terran_DontWait_Init();
    libCOMI_gt_DefferedTransmission_Init();
    libCOMI_gt_CM_HeroReviveQueue_HeroRevived_Init();
    libCOMI_gt_CM_VOResourceSent_Init();
    libCOMI_gt_CM_VOResourceRequest_Init();
    libCOMI_gt_CM_VOUnitsLostCheck_Init();
    libCOMI_gt_CM_VOEnemySpotted_Init();
    libCOMI_gt_CM_VOEnemyCloakedSpotted_Init();
    libCOMI_gt_CM_TransmissionSend_Init();
    libCOMI_gt_CM_SendTransmissionCampaignTick_Init();
    libCOMI_gt_CM_CoopAI_AttackWavePingManager_Init();
    libCOMI_gt_VoidPingSound_Init();
    libCOMI_gt_AF_Score_Init();
    libCOMI_gt_AF_Score_GraphsandCharts_Init();
    libCOMI_gt_AF_Score_SwitchButtonCreate_Init();
    libCOMI_gt_AF_Score_MissionsButtonCreate_Init();
    libCOMI_gt_AF_Score_QuitButtonCreate_Init();
    libCOMI_gt_AF_Score_FinalButtonClicked_Init();
    libCOMI_gt_CC_ScoreDebugDisplay_Init();
    libCOMI_gt_CC_ScoreEnemiesKilled_Init();
    libCOMI_gt_CC_ScoreDynDmgTaken_Init();
    libCOMI_gt_CheatBaseDead_Init();
    libCOMI_gt_DefeatFanfareBaseDead_Init();
    libCOMI_gt_DefeatBaseDead_Init();
    libCOMI_gt_VictoryCheat_Init();
    libCOMI_gt_DefeatCheat_Init();
    libCOMI_gt_CM_AbortMission_Init();
    libCOMI_gt_CM_MissionHandlePlayerQuitNydusTricks_Init();
    libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd_Init();
    libCOMI_gt_CM_MissionScoreScreenExited_Init();
    libCOMI_gt_CM_MissionVictoryCheatEndMission_Init();
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute_Init();
    libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue_Init();
    libCOMI_gt_AF_MissionEnds_Init();
    libCOMI_gt_CM_CinematicModeOn_Init();
    libCOMI_gt_CM_CinematicModeOff_Init();
    libCOMI_gt_CM_CampaignMissionIntroZoomIn_Init();
    libCOMI_gt_ResourcePickupAllyNew_Init();
    libCOMI_gt_CM_CampaignUnitTeaching_Init();
    libCOMI_gt_CM_CampaignUnitCreated_Init();
    libCOMI_gt_CM_CampaignUnitChangeOwner_Init();
    libCOMI_gt_CM_CampaignUnitInfoUnitMorphes_Init();
    libCOMI_gt_UT_Cooldown_Init();
    libCOMI_gt_UT_Horde_Init_Init();
    libCOMI_gt_UT_Horde_Remove_Init();
    libCOMI_gt_UT_Horde_UnitCreated_Init();
    libCOMI_gt_UT_Horde_SendWave_Init();
    libCOMI_gt_UT_encomps_Init();
    libCOMI_gt_UT_Mastery_Init();
    libCOMI_gt_UT_MasteryButtonClicked_Init();
    libCOMI_gt_UT_CommanderSwitched_Init();
    libCOMI_gt_UT_SpawnAttackWave_Init();
    libCOMI_gt_UT_AttackWaveAttack_Init();
    libCOMI_gt_UT_RemoveWave_Init();
    libCOMI_gt_UT_NukeTest_Init();
    libCOMI_gt_AF_BileLauncherBombardment_Init();
    libCOMI_gt_ToggleAIDebugMessages_Init();
    libCOMI_gt_CM_CoopAI_InitAIDebugging_Init();
    libCOMI_gt_CU_DebugMovieCaptureModeToggle_Init();
    libCOMI_gt_CU_DebugMutatorSelect_Init();
    libCOMI_gt_CU_DebugRandomMutationSelect_Init();
    libCOMI_gt_CU_DebugCinMode_Init();
    libCOMI_gt_CU_DebugScreenmode_Init();
    libCOMI_gt_CU_DebugTogSoA_Init();
    libCOMI_gt_CM_DebugTargetSpawnersSet_Init();
    libCOMI_gt_CT_DebugSelectCommanders_Init();
    libCOMI_gt_SimpleDropAttackExample2_Init();
    libCOMI_gt_CM_DebugVictoryS_Init();
    libCOMI_gt_CM_CampaignMissionPerfLog_Init();
    libCOMI_gt_UT_DebugMutatorSelect_Init();
    libCOMI_gt_UT_ShareControl_Init();
    libCOMI_gt_UT_AllySupply_Init();
    libCOMI_gt_UT_Unlock_Init();
    libCOMI_gt_UT_Trigdebug_Init();
    libCOMI_gt_UT_Ally_Init();
    libCOMI_gt_UT_PvP_Init();
    libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC_Init();
    libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits_Init();
    libCOMI_gt_UT_StartTrigger_Init();
    libCOMI_gt_UT_sbank_Init();
    libCOMI_gt_UT_rbank_Init();
    libCOMI_gt_UT_RefillInit_Init();
    libCOMI_gt_UT_Refill_Init();
    libCOMI_gt_UT_UI_Init();
    libCOMI_gt_UT_UI_CtrlH_Init();
    libCOMI_gt_MM_UnitDeath8_Init();
    libCOMI_gt_MM_UnitRemovedFix2_Init();
    libCOMI_gt_CU_RandomMutationSelectOK_Init();
    libCOMI_gt_CU_RandomMutationSelectSliderChange_Init();
    libCOMI_gt_CU_MutatorAcceptClicked_Init();
    libCOMI_gt_CU_MutatorCancelClicked_Init();
    libCOMI_gt_UT_EmpowerInit_Init();
    libCOMI_gt_UT_EmpowerUnitCreated_Init();
    libCOMI_gt_CU_CustomMutatorChangePage_Init();
    libCOMI_gt_CU_CustomMutatorToggleItem_Init();
    libCOMI_gt_CU_CustomMutatorSuggestItem_Init();
    libCOMI_gt_CU_CustomMutatorRemoveActiveItem_Init();
    libCOMI_gt_CU_CustomMutatorStartGame_Init();
    libCOMI_gt_CU_CustomMutatorOpenMenu_Init();
    libCOMI_gt_CU_CustomMutatorLeaderLeaves_Init();
    libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss_Init();
    libCOMI_gt_CU_CustomMutatorSpeedChange_Init();
    libCOMI_gt_MM_MutatorAcceptClicked_Init();
    libCOMI_gt_MM_MutatorCancelClicked_Init();
    libCOMI_gt_MM_CommanderMutatorsClicked_Init();
    libCOMI_gt_CU_MutatorListNotificationExpired_Init();
    libCOMI_gt_MM_PX_InitPlayerX_Init();
    libCOMI_gt_MM_PX_UpgradeParityPlayerX_Init();
    libCOMI_gt_InitializeMutators_Init();
    libCOMI_gt_CT_EvilSoACast_Init();
    libCOMI_gt_MM_RandomMutatorFix_Init();
    libCOMI_gt_MM_RandomMutator_Init();
    libCOMI_gt_CT_InitializeCycleRandom_Init();
    libCOMI_gt_CT_ShutdownCycleRandom_Init();
    libCOMI_gt_CT_CycleRandomMutators_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOMI_InitLib_completed = false;

void libCOMI_InitLib () {
    if (libCOMI_InitLib_completed) {
        return;
    }

    libCOMI_InitLib_completed = true;

    libCOMI_InitLibraries();
    libCOMI_InitVariables();
    libCOMI_InitCustomScript();
    libCOMI_InitTriggers();
}

