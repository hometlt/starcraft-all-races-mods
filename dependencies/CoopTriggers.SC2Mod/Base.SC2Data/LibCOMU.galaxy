include "TriggerLibs/NativeLib"
include "LibARRA"
include "LibCOMI_h"

include "LibCOMU_h"

//--------------------------------------------------------------------------------------------------
// Library: MUTATORS
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCOMU_InitLibraries () {
    libNtve_InitVariables();
    libARRA_InitVariables();
    libCOMI_InitVariables();
}

// Variable Initialization
bool libCOMU_InitVariables_completed = false;

void libCOMU_InitVariables () {
    int init_i;

    if (libCOMU_InitVariables_completed) {
        return;
    }

    libCOMU_InitVariables_completed = true;

    libCOMU_gv_cT_BarrierRecipients = UnitGroupEmpty();
    libCOMU_gv_cT_BlizzardSpacingTolerance = 10.0;
    libCOMU_gv_cT_RecentBlizzards = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libCOMU_gv_cT_BoomBotsDigits[init_i] = 4;
    }
    libCOMU_gv_cT_BoomBotsIndexStart = 40;
    libCOMU_gv_cT_BoomBotsInputTextTagIndex = 5;
    libCOMU_gv_mM_AddToAttackWave = UnitGroupEmpty();
    libCOMU_gv_mM_DM_TargetPlayer = 2;
    libCOMU_gv_cT_FoodHuntWarningLabel = c_invalidDialogControlId;
    libCOMU_gv_cT_FoodHuntAttackLabel = c_invalidDialogControlId;
    libCOMU_gv_mM_GW_NoBuildRegion = RegionEmpty();
    libCOMU_gv_cT_Gifts = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMU_gv_tT_C_AmonHeroMaxHeroTypes; init_i += 1) {
        libCOMU_gv_tT_AmonHeroSoundArray[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    for (init_i = 0; init_i <= libCOMU_gv_cTC_AmonHeroMaxHeroTypes; init_i += 1) {
        libCOMU_gv_cT_AmonHeroSoundArray[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    libCOMU_gv_cT_AmonHeroLastSpawnTimer = TimerCreate();
    libCOMU_gv_mM_MothershipTargets = UnitGroupEmpty();
    libCOMU_gv_mM_MotherShipBaseAvoidDistance = 25.0;
    libCOMU_gv_mM_MothershipUG = UnitGroupEmpty();
    libCOMU_gv_mM_UndeadUG = UnitGroupEmpty();
    libCOMU_gv_cT_OrderCostImmuneUnits = UnitGroupEmpty();
    libCOMU_gv_polarityTimer = TimerCreate();
    libCOMU_gv_cT_PolarityPlayer = 1;
    libCOMU_gv_cT_PolarityPlayerTrains = 1;
    libCOMU_gv_cT_PurifierBeamTargets = UnitGroupEmpty();
    libCOMU_gv_cT_PurifierBeamBaseAvoidDistance = 25.0;
    libCOMU_gv_cT_Reanimators = UnitGroupEmpty();
    libCOMU_gv_mM_ShapeshiftedUnits = UnitGroupEmpty();
    libCOMU_gv_mM_WaveUnitsWithShapeshifters = UnitGroupEmpty();
    libCOMU_gv_mM_ShapeshifterTimer = TimerCreate();
    for (init_i = 0; init_i <= libCOMU_gv_mM_AmonHeroMaxNumber; init_i += 1) {
        libCOMU_gv_mM_AmonHeroSoundArray[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    libCOMU_gv_mM_AmonSummonedHeroes = UnitGroupEmpty();
    libCOMU_gv_mM_AmonHeroPool = 1.0;
    libCOMU_gv_mM_AmonHeroAttackWaveUnits = UnitGroupEmpty();
    libCOMU_gv_cT_StolenStructures = UnitGroupEmpty();
    libCOMU_gv_cT_Tornadoes = UnitGroupEmpty();
    libCOMU_gv_cT_TempDamageReflectUnits = UnitGroupEmpty();
    libCOMU_gv_mM_Mists = UnitGroupEmpty();
    libCOMU_gv_mM_ShadowTerrorSize = 1.2;
    libCOMU_gv_candyChargeCmd = AbilityCommand("MutatorBuyCandy", 0);
    libCOMU_gv_cT_CandyBowlTextTag = c_textTagNone;
    libCOMU_gv_cT_VoidRifts = UnitGroupEmpty();
    libCOMU_gv_cT_VoidRiftLastSpawnedUnits = UnitGroupEmpty();
}

// Presets
// Functions
void libCOMU_gf_CT_ApplyAfraidOfTheDark (unit lp_orderedUnit, order lp_order) {
    // Variable Declarations
    point lv_orderLocation;
    int lv_microPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_microPlayer = UnitGetOwner(lp_orderedUnit);
    if (((libCOMI_gf_MutatorIsEnabled("UberDarkness") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), lv_microPlayer) == false) || (OrderGetFlag(lp_order, 8) == false))) {
        return ;
    }

    lv_orderLocation = OrderGetTargetPosition(lp_order);
    if (((VisIsVisibleForPlayer(lv_microPlayer, lv_orderLocation) == true) || (lv_orderLocation == null))) {
    }
    else {
        UnitIssueOrder(lp_orderedUnit, OrderTargetingPoint(OrderGetAbilityCommand(lp_order), UnitGetPosition(lp_orderedUnit)), c_orderQueueReplace);
    }
}

void libCOMU_gf_CT_RemoveAllCastersEnergy (unit lp_energyUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("OopsAllCasters") == false) || (UnitGetPropertyFixed(lp_energyUnit, c_unitPropEnergyMax, c_unitPropNormal) != 0.0))) {
        return ;
    }

    UnitSetPropertyFixed(lp_energyUnit, c_unitPropEnergyMax, 0.0);
    UnitSetPropertyFixed(lp_energyUnit, c_unitPropEnergy, 0.0);
    UnitSetPropertyFixed(lp_energyUnit, c_unitPropEnergyRegen, 0.0);
}

void libCOMU_gf_MM_ApplyAllSpellsEnergy (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCOMI_gf_MutatorIsEnabled("OopsAllCasters") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, c_unitPropCurrent) != 0.0) || (libCOMU_gf_CT_AllCastersBlacklistedUnit(lp_createdUnit) == true))) {
        return ;
    }

    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, 200.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergy, 50.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyRegen, 0.5625);
}

void libCOMU_gf_CT_ApplyAllSpellsEnergy (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCOMI_gf_MutatorIsEnabled("OopsAllCasters") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, c_unitPropCurrent) != 0.0) || (libCOMU_gf_CT_AllCastersBlacklistedUnit(lp_createdUnit) == true))) {
        return ;
    }

    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyMax, 200.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergy, 50.0);
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropEnergyRegen, 0.5625);
}

void libCOMU_gf_CT_AllCastersUseAbility (unit lp_caster, unit lp_target, int lp_ability) {
    // Automatic Variable Declarations
    int auto02DE27FB_val;

    // Implementation
    auto02DE27FB_val = lp_ability;
    if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPsiStorm) {
        UnitCreateEffectPoint(lp_caster, "PsiStormPersistent", UnitGetPosition(lp_target));
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersGuardianShield) {
        UnitCreateEffectUnit(lp_caster, "GuardianShieldPersistent", lp_caster);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersSeekerMissile) {
        UnitCreateEffectUnit(lp_caster, "SeekerMissileLaunchMissile", lp_target);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersFungal) {
        UnitCreateEffectPoint(lp_caster, "FungalGrowthLaunchMissile", UnitGetPosition(lp_target));
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) {
        UnitCreateEffectUnit(lp_caster, "IrradiateSet", lp_target);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersAbduct) {
        UnitCreateEffectUnit(lp_caster, "YoinkStartSwitch", lp_target);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersYamato) {
        UnitCreateEffectUnit(lp_caster, "Yamato", lp_target);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) {
        UnitCreateEffectUnit(lp_caster, "GravitonBeamUrun", lp_target);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersNeural) {
        UnitCreateEffectUnit(lp_caster, "NeuralParasiteLaunchMissile", lp_target);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPsiOrb) {
        UnitCreateEffectPoint(lp_caster, "VoidHighTemplarPsiOrbInitialPersistent", UnitGetPosition(lp_target));
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersTimeWarp) {
        UnitCreateEffectPoint(lp_caster, "TemporalFieldCreatePersistent", UnitGetPosition(lp_target));
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersVortex) {
        UnitCreateEffectPoint(lp_caster, "VoidSentryBlackHolePersistent", UnitGetPosition(lp_target));
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) {
        UnitCreateEffectUnit(lp_caster, "DefensiveMatrixSet", lp_caster);
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPDD) {
        UnitCreateEffectPoint(lp_caster, "PointDefenseDroneReleaseCreateUnit", libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_caster), 1.5, UnitGetPosition(lp_target)));
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) {
        UnitCreateEffectPoint(lp_caster, "CorsairMPDisruptionWebCreatePersistent", UnitGetPosition(lp_target));
    }
    else if (auto02DE27FB_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift) {
        UnitCreateEffectUnit(lp_caster, "HybridGeneralPhaseShiftSet", lp_target);
    }
    else {
    }
    UnitSetPropertyFixed(lp_caster, c_unitPropEnergy, (UnitGetPropertyFixed(lp_caster, c_unitPropEnergy, c_unitPropCurrent) - 50.0));
    libCOMU_gv_cT_StatAllCastersSpellsCast[UnitGetOwner(lp_target)] += 1;
    if ((UnitGetType(lp_caster) != "Caboose") && (UnitGetType(lp_caster) != "TarsonisEngineFast") && (UnitGetType(lp_caster) != "TarsonisEngine") && (UnitGetType(lp_caster) != "FreightCar") && (UnitGetType(lp_caster) != "ProtossFrigate")) {
        libNtve_gf_MakeUnitFacePoint(lp_caster, UnitGetPosition(lp_target), 0.1);
    }

}

int libCOMU_gf_CT_AllCastersAbilityPlayerCost (int lp_ability) {
    // Automatic Variable Declarations
    int auto00FDEC92_val;

    // Implementation
    auto00FDEC92_val = lp_ability;
    if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersVortex) {
        return 150;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersYamato) {
        return 80;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersNeural) {
        return 90;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) {
        return 20;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersGuardianShield) {
        return 20;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPDD) {
        return 20;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersSeekerMissile) {
        return 40;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPsiStorm) {
        return 40;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPsiOrb) {
        return 45;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) {
        return 45;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersFungal) {
        return 40;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersTimeWarp) {
        return 30;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) {
        return 20;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersAbduct) {
        return 20;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) {
        return 40;
    }
    else if (auto00FDEC92_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift) {
        return 40;
    }
    else {
    }
    return 50;
}

int libCOMU_gf_CT_AllCastersAbilityChance (int lp_ability, int lp_targetPlayer, unit lp_targetUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lp_targetPlayer) != 4) && (lp_ability == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersVortex)) {
        return 0;
    }
    else if ((UnitFilterMatch(lp_targetUnit, 1, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
        if ((lp_ability != libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPDD) && (lp_ability != libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersGuardianShield) && (lp_ability != libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) && (lp_ability != libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) && (lp_ability != libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift)) {
            return 0;
        }

        if ((lp_ability == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) && (UnitWeaponCount(lp_targetUnit) == 0)) {
            return 0;
        }

    }
    else if ((lp_ability == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersVortex)) {
        return 50;
    }
    else if ((lp_ability == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPhaseShift)) {
        return 0;
    }
    else if ((lp_ability == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb)) {
        return 10;
    }
    else if ((lp_ability == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) && (UnitFilterMatch(lp_targetUnit, 1, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterStructure), 0)) == false)) {
        return 0;
    }
    else if ((lp_ability == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) && (UnitFilterMatch(lp_targetUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic), 0)) == false)) {
        return 0;
    }
    return 100;
}

int libCOMU_gf_CT_AllCastersRandomAbility (int lp_targetPlayer, unit lp_targetUnit) {
    // Variable Declarations
    int[31] lv_abilityOptions;
    int lv_indexAbilityInt;
    int lv_indexAbility;
    int lv_abilityCount;

    // Automatic Variable Declarations
    int auto00E1FAB8_ae;
    const int auto00E1FAB8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOMU_gv_cT_AllCastersPlayerEnergy[lp_targetPlayer] < libCOMU_gv_cTC_AllCastersMinEnergyCost)) {
        return libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersNone;
    }

    if ((libCOMU_gv_cT_DebugAllCastersAbility != 0)) {
        lv_indexAbilityInt = libCOMU_gv_cT_DebugAllCastersAbility;
        lv_indexAbility = lv_indexAbilityInt;
        if ((libCOMU_gf_CT_AllCastersAbilityPlayerCost(lv_indexAbility) <= libCOMU_gv_cT_AllCastersPlayerEnergy[lp_targetPlayer])) {
            return lv_indexAbilityInt;
        }
        else {
            return libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersNone;
        }
    }

    auto00E1FAB8_ae = (libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersMax);
    lv_indexAbilityInt = 1;
    for ( ; ( (auto00E1FAB8_ai >= 0 && lv_indexAbilityInt <= auto00E1FAB8_ae) || (auto00E1FAB8_ai < 0 && lv_indexAbilityInt >= auto00E1FAB8_ae) ) ; lv_indexAbilityInt += auto00E1FAB8_ai ) {
        lv_indexAbility = lv_indexAbilityInt;
        if ((libCOMU_gf_CT_AllCastersAbilityPlayerCost(lv_indexAbility) <= libCOMU_gv_cT_AllCastersPlayerEnergy[lp_targetPlayer]) && (RandomInt(1, 100) <= libCOMU_gf_CT_AllCastersAbilityChance(lv_indexAbility, lp_targetPlayer, lp_targetUnit))) {
            lv_abilityCount += 1;
            lv_abilityOptions[lv_abilityCount] = lv_indexAbility;
        }

    }
    if ((lv_abilityCount == 0)) {
        return libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersNone;
    }

    return lv_abilityOptions[RandomInt(1, lv_abilityCount)];
}

fixed libCOMU_gf_CT_AllCastersAbilityRange (int lp_ability) {
    // Automatic Variable Declarations
    int auto2999FA7B_val;

    // Implementation
    auto2999FA7B_val = lp_ability;
    if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPsiStorm) {
        return 9.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersIrradiate) {
        return 9.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersAbduct) {
        return 9.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersGravitonBeam) {
        return 4.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersNeural) {
        return 7.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersTimeWarp) {
        return 9.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersVortex) {
        return 9.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDefensiveMatrix) {
        return 6.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersPDD) {
        return 9.0;
    }
    else if (auto2999FA7B_val == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersDisruptionWeb) {
        return 9.0;
    }
    else {
    }
    return 10.0;
}

bool libCOMU_gf_CT_AllCastersBlacklistedUnit (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "MutatorStormCloud") || (UnitGetType(lp_unit) == "MutatorTornado") || (UnitGetType(lp_unit) == "MutatorPurifierBeam") || (UnitGetType(lp_unit) == "MutatorCloakedMine"))) {
        return true;
    }
    else {
        return false;
    }
}

void libCOMU_gf_CT_RemoveAvenger (unit lp_avengeUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_MutatorIsEnabled("Avenger") == false)) {
        return ;
    }

    UnitBehaviorRemove(lp_avengeUnit, "MutatorAvenger", 100);
    libNtve_gf_SendActorMessageToUnit(lp_avengeUnit, "SetScale");
    libNtve_gf_SendActorMessageToUnit(lp_avengeUnit, "GlowStop");
}

void libCOMU_gf_CT_ApplyAvenger (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    fixed lv_actualDistance;
    int lv_index;
    fixed lv_supplyvalue;

    // Automatic Variable Declarations
    unitgroup autoF1DA6167_g;
    int autoF1DA6167_u;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Avenger") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == false))) {
        return ;
    }

    lv_supplyvalue = UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed);
    if ((lv_supplyvalue < 1)) {
        libCOMU_gv_cT_AvengerWimpCounter += 1;
        if ((ModI(libCOMU_gv_cT_AvengerWimpCounter, 2) == 1)) {
            return ;
        }

    }

    autoF1DA6167_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 3.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF1DA6167_u = UnitGroupCount(autoF1DA6167_g, c_unitCountAll);
    for (;; autoF1DA6167_u -= 1) {
        lv_nearbyUnit = UnitGroupUnitFromEnd(autoF1DA6167_g, autoF1DA6167_u);
        if (lv_nearbyUnit == null) { break; }
        if ((UnitWeaponCount(lv_nearbyUnit) == 0) && (UnitGetType(lv_nearbyUnit) != "VoidThrasher")) {
            continue;
        }

        lv_actualDistance = DistanceBetweenPoints(UnitGetPosition(lp_killedUnit), UnitGetPosition(lv_nearbyUnit));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_nearbyUnit), "Radius", c_playerAny));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_killedUnit), "Radius", c_playerAny));
        if ((lv_actualDistance > 1.25)) {
            continue;
        }

        UnitBehaviorAdd(lv_nearbyUnit, "MutatorAvenger", lp_killedUnit, MaxI(FixedToInt(lv_supplyvalue), 1));
        libCOMU_gv_cT_StatAvengerStacksApplied += FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, (("SetScale " + FixedToString(((0.08 * UnitBehaviorCount(lv_nearbyUnit, "MutatorAvenger")) + 1.0), 1))));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, "GlowStart");
    }
}

void libCOMU_gf_MM_ApplyAvenger (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    fixed lv_actualDistance;
    int lv_index;
    fixed lv_supplyvalue;

    // Automatic Variable Declarations
    unitgroup auto0DAA209C_g;
    int auto0DAA209C_u;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Avenger") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == false))) {
        return ;
    }

    lv_supplyvalue = UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed);
    if ((lv_supplyvalue < 1)) {
        libCOMU_gv_cT_AvengerWimpCounter += 1;
        if ((ModI(libCOMU_gv_cT_AvengerWimpCounter, 2) == 1)) {
            return ;
        }

    }

    auto0DAA209C_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 3.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DAA209C_u = UnitGroupCount(auto0DAA209C_g, c_unitCountAll);
    for (;; auto0DAA209C_u -= 1) {
        lv_nearbyUnit = UnitGroupUnitFromEnd(auto0DAA209C_g, auto0DAA209C_u);
        if (lv_nearbyUnit == null) { break; }
        if ((UnitWeaponCount(lv_nearbyUnit) == 0) && (UnitGetType(lv_nearbyUnit) != "VoidThrasher")) {
            continue;
        }

        lv_actualDistance = DistanceBetweenPoints(UnitGetPosition(lp_killedUnit), UnitGetPosition(lv_nearbyUnit));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_nearbyUnit), "Radius", c_playerAny));
        lv_actualDistance -= StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_killedUnit), "Radius", c_playerAny));
        if ((lv_actualDistance > 1.25)) {
            continue;
        }

        UnitBehaviorAdd(lv_nearbyUnit, "MutatorAvenger", lp_killedUnit, MaxI(FixedToInt(lv_supplyvalue), 1));
        libCOMU_gv_cT_StatAvengerStacksApplied += FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, (("SetScale " + FixedToString(((0.08 * UnitBehaviorCount(lv_nearbyUnit, "MutatorAvenger")) + 1.0), 1))));
        libNtve_gf_SendActorMessageToUnit(lv_nearbyUnit, "GlowStart");
    }
}

void libCOMU_gf_CT_ApplyBarrier (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Barrier") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0)) == false) || (UnitGroupHasUnit(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit) == true) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02"))) {
        return ;
    }

    UnitBehaviorAdd(lp_damagedUnit, "MutatorBarrier", lp_damagedUnit, 1);
    UnitGroupAdd(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit);
}

void libCOMU_gf_MM_ApplyBarrier (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Barrier") == false) || (UnitGroupHasUnit(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit) == true) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02"))) {
        return ;
    }

    UnitBehaviorAdd(lp_damagedUnit, "MutatorBarrier", lp_damagedUnit, 1);
    UnitGroupAdd(libCOMU_gv_cT_BarrierRecipients, lp_damagedUnit);
}

fixed libCOMU_gf_CT_MathNumberWrap (fixed lp_value, fixed lp_minAmount, fixed lp_maxAmount) {
    // Variable Declarations
    fixed lv_width;
    fixed lv_OffsetValue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_width = (lp_maxAmount - lp_minAmount);
    lv_OffsetValue = (lp_value - lp_minAmount);
    return ((lv_OffsetValue - (Floor((lv_OffsetValue / lv_width)) * lv_width)) + lp_minAmount);
}

trigger auto_libCOMU_gf_CT_DestroyBlizzard_Trigger = null;
unit auto_libCOMU_gf_CT_DestroyBlizzard_lp_blizzardUnit;

void libCOMU_gf_CT_DestroyBlizzard (unit lp_blizzardUnit) {
    auto_libCOMU_gf_CT_DestroyBlizzard_lp_blizzardUnit = lp_blizzardUnit;

    if (auto_libCOMU_gf_CT_DestroyBlizzard_Trigger == null) {
        auto_libCOMU_gf_CT_DestroyBlizzard_Trigger = TriggerCreate("auto_libCOMU_gf_CT_DestroyBlizzard_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_DestroyBlizzard_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_DestroyBlizzard_TriggerFunc (bool testConds, bool runActions) {
    unit lp_blizzardUnit = auto_libCOMU_gf_CT_DestroyBlizzard_lp_blizzardUnit;

    // Variable Declarations
    point lv_originalPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_originalPosition = UnitGetPosition(lp_blizzardUnit);
    while (true) {
        Wait(1.0, c_timeGame);
        if (((PointGetX(UnitGetPosition(lp_blizzardUnit)) >= libNtve_gf_WidthOfRegion(RegionPlayableMap())) || (PointGetY(UnitGetPosition(lp_blizzardUnit)) <= PointGetY(RegionGetBoundsMin(RegionPlayableMap()))))) {
            break;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lp_blizzardUnit), lv_originalPosition) >= libCOMU_gv_cT_BlizzardSpacingTolerance)) {
            UnitGroupRemove(libCOMU_gv_cT_RecentBlizzards, lp_blizzardUnit);
        }

    }
    UnitGroupRemove(libCOMU_gv_cT_RecentBlizzards, lp_blizzardUnit);
    UnitRemove(lp_blizzardUnit);
    return true;
}

void libCOMU_gf_MM_ApplyBloodlust (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Bloodlust") == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_pUnit), libCOMI_gf_AffectedPlayer(0), libNtve_ge_PlayerRelation_Enemy) == false) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitHasBehavior2(lp_pUnit, "MutatorBloodlust") == true) || (UnitHasBehavior2(lp_pUnit, "MutatorBloodlust2") == true) || (UnitHasBehavior2(lp_pUnit, "MutatorBloodlust3") == true))) {
        return ;
    }

    UnitBehaviorAddPlayer(lp_pUnit, "MutatorBloodlust", libCOMI_gf_MutatorPlayer(), 1);
    UnitBehaviorAddPlayer(lp_pUnit, "MutatorBloodlust2", libCOMI_gf_MutatorPlayer(), 1);
    UnitBehaviorAddPlayer(lp_pUnit, "MutatorBloodlust3", libCOMI_gf_MutatorPlayer(), 1);
}

void libCOMU_gf_CT_ApplyBoomBotPing (unit lp_createdUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_createdUnit), 270.0, "BeaconClaimPing", ColorWithAlpha(0.00, 50.20, 75.29, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMU_DC876213"));
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libARRA_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
}

void libCOMU_gf_CT_ApplyBoomBotPingCleanup (unit lp_killedUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if (((libCOMU_gv_cT_BoomBotCleanupEnabled == false) || (UnitGetType(lp_killedUnit) != "MutatorBoomBot"))) {
        return ;
    }

    lv_storedPing = libARRA_gf_PingStoredForUnit(lp_killedUnit, 1);
    if ((lv_storedPing != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(lv_storedPing);
    }

}

trigger auto_libCOMU_gf_CT_BoomBotsUpdate_Trigger = null;
unit auto_libCOMU_gf_CT_BoomBotsUpdate_lp_boomBot;

void libCOMU_gf_CT_BoomBotsUpdate (unit lp_boomBot) {
    auto_libCOMU_gf_CT_BoomBotsUpdate_lp_boomBot = lp_boomBot;

    if (auto_libCOMU_gf_CT_BoomBotsUpdate_Trigger == null) {
        auto_libCOMU_gf_CT_BoomBotsUpdate_Trigger = TriggerCreate("auto_libCOMU_gf_CT_BoomBotsUpdate_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_BoomBotsUpdate_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_BoomBotsUpdate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_boomBot = auto_libCOMU_gf_CT_BoomBotsUpdate_lp_boomBot;

    // Variable Declarations
    unit lv_boombothelper;
    int lv_codeplayer;
    int lv_defuseplayer;
    string lv_codestring;
    string lv_inputstring;
    int lv_codetexttag;
    int lv_inputtexttag;
    int lv_customvalueindex;
    playergroup lv_defuseplayeroptions;

    // Automatic Variable Declarations
    int auto36390897_ae;
    const int auto36390897_ai = 1;

    // Variable Initialization
    lv_codestring = "";
    lv_inputstring = "";
    lv_codetexttag = c_textTagNone;
    lv_inputtexttag = c_textTagNone;
    lv_defuseplayeroptions = PlayerGroupEmpty();

    // Implementation
    libCOMU_gv_cT_BoomBotsCount += 1;
    lv_codeplayer = ModI(libCOMU_gv_cT_BoomBotsCount, PlayerGroupCount(libCOMI_gf_AffectedPlayers()));
    if ((PlayerGroupCount(libCOMI_gf_AffectedPlayers()) > 1)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(libCOMI_gf_AffectedPlayers(), lv_defuseplayeroptions);
        PlayerGroupRemove(lv_defuseplayeroptions, lv_codeplayer);
        lv_defuseplayer = PlayerGroupPlayer(lv_defuseplayeroptions, RandomInt(1, PlayerGroupCount(lv_defuseplayeroptions)));
    }
    else {
        lv_defuseplayer = lv_codeplayer;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorBoomBotHelper", c_unitCreateIgnorePlacement, lv_defuseplayer, UnitGetPosition(lp_boomBot));
    lv_boombothelper = UnitLastCreated();
    UnitSetCustomValue(lv_boombothelper, libCOMU_gv_cT_BoomBotsIndexStart, libCOMU_gv_cT_BoomBotsDigits[lv_defuseplayer]);
    auto36390897_ae = (libCOMU_gv_cT_BoomBotsIndexStart + libCOMU_gv_cT_BoomBotsDigits[lv_defuseplayer]);
    lv_customvalueindex = (libCOMU_gv_cT_BoomBotsIndexStart + 1);
    for ( ; ( (auto36390897_ai >= 0 && lv_customvalueindex <= auto36390897_ae) || (auto36390897_ai < 0 && lv_customvalueindex >= auto36390897_ae) ) ; lv_customvalueindex += auto36390897_ai ) {
        UnitSetCustomValue(lv_boombothelper, lv_customvalueindex, RandomInt(1, 9));
        if ((lv_customvalueindex == (libCOMU_gv_cT_BoomBotsIndexStart+1))) {
            lv_codestring = FixedToString(UnitGetCustomValue(lv_boombothelper, lv_customvalueindex), 0);
            lv_inputstring = "?";
        }
        else {
            lv_codestring = (lv_codestring + "-" + FixedToString(UnitGetCustomValue(lv_boombothelper, lv_customvalueindex), 0));
            lv_inputstring = (lv_inputstring + "-?");
        }
    }
    TextExpressionSetToken("Param/Expression/lib_COMU_A0E6C44D", "A", StringToText(lv_codestring));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMU_A0E6C44D"), 24, UnitGetPosition(lp_boomBot), 3.0, true, true, PlayerGroupSingle(lv_codeplayer));
    lv_codetexttag = TextTagLastCreated();
    TextTagAttachToUnit(lv_codetexttag, lp_boomBot, 3.0);
    TextTagSetFogVisibility(lv_codetexttag, c_visTypeFog);
    TextExpressionSetToken("Param/Expression/lib_COMU_3FA5A8D0", "A", StringToText(lv_inputstring));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMU_3FA5A8D0"), 24, UnitGetPosition(lp_boomBot), 3.0, true, true, PlayerGroupSingle(lv_defuseplayer));
    lv_inputtexttag = TextTagLastCreated();
    TextTagAttachToUnit(lv_inputtexttag, lp_boomBot, 3.0);
    TextTagSetFogVisibility(lv_inputtexttag, c_visTypeFog);
    libARRA_gf_StoreTextTagForUnit(lv_boombothelper, libCOMU_gv_cT_BoomBotsInputTextTagIndex, lv_inputtexttag);
    while ((UnitIsAlive(lp_boomBot) == true) && (UnitIsAlive(lv_boombothelper) == true)) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_boomBot, lv_defuseplayer) == true)) {
            libNtve_gf_ShowHideUnit(lv_boombothelper, true);
        }
        else {
            libNtve_gf_ShowHideUnit(lv_boombothelper, false);
        }
        Wait(0.0625, c_timeGame);
        UnitSetPosition(lv_boombothelper, UnitGetPosition(lp_boomBot), true);
    }
    UnitKill(lp_boomBot);
    UnitRemove(lv_boombothelper);
    TextTagDestroy(lv_codetexttag);
    TextTagDestroy(lv_inputtexttag);
    return true;
}

void libCOMU_gf_CT_ApplyConcussiveAttacks (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("ConcussiveAttacks") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false))) {
        return ;
    }

    UnitCreateEffectUnit(lp_damagingUnit, "MutatorConcussiveAttacksAB", lp_damagedUnit);
}

void libCOMU_gf_MM_ApplyConcussiveAttacks (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("ConcussiveAttacks") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == false))) {
        return ;
    }

    UnitCreateEffectUnit(lp_damagingUnit, "MutatorConcussiveAttacksAB", lp_damagedUnit);
}

void libCOMU_gf_MM_DM_CopyBeneficialBehaviors (unit lp_pBehUnit, unit lp_pTargetUnit) {
    // Variable Declarations
    string lv_vBehavior;

    // Automatic Variable Declarations
    int auto44B7E588_ae;
    int auto44B7E588_var;

    // Variable Initialization

    // Implementation
    UnitXPAddXP(lp_pTargetUnit, null, UnitXPGetCurrentXP(lp_pBehUnit, null));
    auto44B7E588_ae = (UnitBehaviorCountAll(lp_pBehUnit) - 1);
    auto44B7E588_var = 0;
    for ( ; auto44B7E588_var <= auto44B7E588_ae; auto44B7E588_var += 1 ) {
        lv_vBehavior = UnitBehaviorGet(lp_pBehUnit, auto44B7E588_var);
        if (((lv_vBehavior == "BiomassBuff1") || (lv_vBehavior == "BiomassBuff10") || (lv_vBehavior == "BiomassBuff100") || (lv_vBehavior == "BiomassBuff100PlusLife") || (lv_vBehavior == "BiomassBuff10PlusLife") || (lv_vBehavior == "AscendantSacrificeSelfBuff") || (lv_vBehavior == "DehakaEssenceDropPickupBuff") || (lv_vBehavior == "EssenceBuff1") || (lv_vBehavior == "EssenceBuff10") || (lv_vBehavior == "EssenceBuff100") || (lv_vBehavior == "EssenceBuff100PlusLife") || (lv_vBehavior == "EssenceBuff10PlusLife") || (lv_vBehavior == "DehakaGene4Creepers") || (lv_vBehavior == "DehakaGeneAttackSpeed") || (lv_vBehavior == "DehakaGeneCarapace") || (lv_vBehavior == "DehakaGeneCreeperHostGeneApply") || (lv_vBehavior == "DehakaGeneFireRoachGeneApply") || (lv_vBehavior == "DehakaGeneGuardianGeneApply") || (lv_vBehavior == "DehakaGeneImpalerGeneApply") || (lv_vBehavior == "DehakaGeneLifeLeech") || (lv_vBehavior == "DehakaGeneMutaliskGeneApply") || (lv_vBehavior == "DehakaGeneRavasaurGeneApply") || (lv_vBehavior == "DehakaGeneThorns") || (lv_vBehavior == "DehakaGeneTyrannosaurGeneApply"))) {
            UnitBehaviorAddPlayer(lp_pTargetUnit, lv_vBehavior, UnitGetOwner(lp_pTargetUnit), UnitBehaviorCount(lp_pBehUnit, lv_vBehavior));
        }

    }
}

fixed libCOMU_gf_MM_DM_UnitCost (unit lp_pUnit) {
    // Automatic Variable Declarations
    string autoF637A1CD_val;

    // Implementation
    autoF637A1CD_val = UnitGetType(lp_pUnit);
    if (autoF637A1CD_val == "HyperionVoidCoop") {
        return 3000.0;
    }
    else if (autoF637A1CD_val == "StukovAleksander") {
        return 3000.0;
    }
    else if (autoF637A1CD_val == "StukovApocalisk") {
        return 2500.0;
    }
    else if (autoF637A1CD_val == "FenixKaldalisZealot") {
        return 400.0;
    }
    else if (autoF637A1CD_val == "FenixTalisAdept") {
        return 400.0;
    }
    else if (autoF637A1CD_val == "FenixTaldarinImmortal") {
        return 600.0;
    }
    else if (autoF637A1CD_val == "FenixMojoScout") {
        return 600.0;
    }
    else if (autoF637A1CD_val == "FenixWarbringerColossus") {
        return 800.0;
    }
    else if (autoF637A1CD_val == "FenixClolarionCarrier") {
        return 800.0;
    }
    else {
    }
    if ((UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeHeroic) == true)) {
        return 600.0;
    }
    else {
        return UnitTypeGetCost(UnitGetType(lp_pUnit), c_unitCostSumMineralsVespene);
    }
}

unitgroup libCOMU_gf_MM_DM_CreateWave (int lp_pPlayer, point lp_pPoint, fixed lp_pCost, string lp_transportType) {
    // Variable Declarations
    string lv_vUnitType;
    fixed lv_vTotalCost;
    fixed lv_vTotalCost2;
    unitgroup lv_vUG;
    unitgroup lv_vUG2;
    unitgroup lv_vUGOUT;
    fixed lv_vTargetCost;
    unit lv_vUnit;
    fixed lv_vCost;
    string lv_vBehavior;
    unit lv_vRandomUnit;
    unit lv_vTransportCurrent;
    unit lv_vUnitCreated;
    unitgroup lv_vTransports;
    int lv_vIter;
    string lv_detector;

    // Automatic Variable Declarations
    unitgroup autoCA8D30E3_g;
    int autoCA8D30E3_u;
    unit autoCA8D30E3_var;
    unitgroup auto4A0669AC_g;
    int auto4A0669AC_u;
    unit auto4A0669AC_var;
    const int auto11789EAA_n = 500;
    int auto11789EAA_i;
    string auto4A24CCFC_val;
    unitgroup auto65F699C0_g;
    int auto65F699C0_u;
    unit auto65F699C0_var;
    const int autoDD8D88F6_n = 1000;
    int autoDD8D88F6_i;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();
    lv_vUG2 = UnitGroupEmpty();
    lv_vUGOUT = UnitGroupEmpty();
    lv_vTargetCost = (lp_pCost * 2.5);
    lv_vTransports = UnitGroupEmpty();

    // Implementation
    TriggerSendEvent("UT_ATTACKWAVE_SPAWN");
    TextExpressionSetToken("Param/Expression/lib_COMU_827D8906", "A", FixedToText(lv_vTargetCost, 0));
    TextExpressionSetToken("Param/Expression/lib_COMU_827D8906", "B", StringToText(libNtve_gf_ConvertPointToString(lp_pPoint)));
    TextExpressionSetToken("Param/Expression/lib_COMU_827D8906", "C", StringToText((lp_transportType)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_827D8906"), false);
    if (libCOMU_gv_mM_DM_TargetPlayer >= 2) {
        libCOMU_gv_mM_DM_TargetPlayer = 1;
    }
    else {
        libCOMU_gv_mM_DM_TargetPlayer = libCOMU_gv_mM_DM_TargetPlayer + 1;
    }
    autoCA8D30E3_g = UnitGroup(null, libCOMU_gv_mM_DM_TargetPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterUnstoppable - 32))), 0);
    autoCA8D30E3_u = UnitGroupCount(autoCA8D30E3_g, c_unitCountAll);
    for (;; autoCA8D30E3_u -= 1) {
        autoCA8D30E3_var = UnitGroupUnitFromEnd(autoCA8D30E3_g, autoCA8D30E3_u);
        if (autoCA8D30E3_var == null) { break; }
        if (((UnitWeaponCount(autoCA8D30E3_var) >= 1) || (UnitGetType(autoCA8D30E3_var) == "Medic") || (UnitGetType(autoCA8D30E3_var) == "Monitor") || (UnitGetType(autoCA8D30E3_var) == "ScienceVessel") || (UnitGetType(autoCA8D30E3_var) == "Raven_BlackOps") || (UnitGetType(autoCA8D30E3_var) == "HHRaven")) && (UnitGetType(autoCA8D30E3_var) != "Interceptor") && (UnitGetType(autoCA8D30E3_var) != "FenixClolarionInterceptor") && (libCOMU_gf_MM_DM_UnitCost(autoCA8D30E3_var) > 0)) {
            UnitGroupAdd(lv_vUG, autoCA8D30E3_var);
            lv_vTotalCost += libCOMU_gf_MM_DM_UnitCost(autoCA8D30E3_var);
        }

    }
    if ((lv_vTotalCost <= 900.0)) {
        if (libCOMU_gv_mM_DM_TargetPlayer >= 2) {
            libCOMU_gv_mM_DM_TargetPlayer = 1;
        }
        else {
            libCOMU_gv_mM_DM_TargetPlayer = libCOMU_gv_mM_DM_TargetPlayer + 1;
        }
        auto4A0669AC_g = UnitGroup(null, libCOMU_gv_mM_DM_TargetPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterUnstoppable - 32))), 0);
        auto4A0669AC_u = UnitGroupCount(auto4A0669AC_g, c_unitCountAll);
        for (;; auto4A0669AC_u -= 1) {
            auto4A0669AC_var = UnitGroupUnitFromEnd(auto4A0669AC_g, auto4A0669AC_u);
            if (auto4A0669AC_var == null) { break; }
            if (((UnitWeaponCount(auto4A0669AC_var) >= 1) || (UnitGetType(auto4A0669AC_var) == "Medic") || (UnitGetType(auto4A0669AC_var) == "Monitor") || (UnitGetType(auto4A0669AC_var) == "ScienceVessel") || (UnitGetType(auto4A0669AC_var) == "Raven_BlackOps") || (UnitGetType(auto4A0669AC_var) == "HHRaven")) && (UnitGetType(auto4A0669AC_var) != "Interceptor") && (UnitGetType(auto4A0669AC_var) != "FenixClolarionInterceptor") && (libCOMU_gf_MM_DM_UnitCost(auto4A0669AC_var) > 0)) {
                UnitGroupAdd(lv_vUG2, auto4A0669AC_var);
                lv_vTotalCost2 += libCOMU_gf_MM_DM_UnitCost(auto4A0669AC_var);
            }

        }
        if (((lv_vTotalCost2 - 200.0) > lv_vTotalCost)) {
            lv_vUG = lv_vUG2;
        }
        else {
            if (libCOMU_gv_mM_DM_TargetPlayer >= 2) {
                libCOMU_gv_mM_DM_TargetPlayer = 1;
            }
            else {
                libCOMU_gv_mM_DM_TargetPlayer = libCOMU_gv_mM_DM_TargetPlayer + 1;
            }
        }
    }

    if ((lp_transportType == null)) {
        lv_vIter = 0;
        for (autoDD8D88F6_i = 1; autoDD8D88F6_i <= autoDD8D88F6_n; autoDD8D88F6_i += 1) {
            lv_vIter += 1;
            if ((lv_vTargetCost <= 0.0)) {
                break;
            }

            if (((UnitGroupCount(lv_vUG, c_unitCountAlive) == 0) || (lv_vIter > 400))) {
                if ((GameGetMissionTime() < 480.0)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, libCOMI_gv_mM_PlayerX, lp_pPoint);
                    lv_vTargetCost -= 800.0;
                }
                else {
                    if ((RandomInt(0, 100) > 50)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, libCOMI_gv_mM_PlayerX, lp_pPoint);
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, libCOMI_gv_mM_PlayerX, lp_pPoint);
                    }
                    lv_vTargetCost -= 500.0;
                }
                UnitBehaviorAddPlayer(UnitLastCreated(), "PXOwnership", libCOMI_gf_MutatorPlayer(), 1);
                UnitGroupAdd(lv_vUGOUT, UnitLastCreated());
            }

            lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
            if (((lv_vTargetCost - libCOMU_gf_MM_DM_UnitCost(lv_vUnit)) > -500.0)) {
                lv_vTargetCost -= libCOMU_gf_MM_DM_UnitCost(lv_vUnit);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(lv_vUnit), 0, libCOMI_gv_mM_PlayerX, lp_pPoint);
                UnitBehaviorAddPlayer(UnitLastCreated(), "PXOwnership", libCOMI_gf_MutatorPlayer(), 1);
                libCOMU_gf_MM_DM_CopyBeneficialBehaviors(lv_vUnit, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
                UnitGroupAdd(lv_vUGOUT, UnitLastCreated());
            }

        }
    }
    else {
        libCOMI_gv_cM_CoopAI_AttackForce_Transports = UnitGroupEmpty();
        lv_vIter = 0;
        for (auto11789EAA_i = 1; auto11789EAA_i <= auto11789EAA_n; auto11789EAA_i += 1) {
            lv_vIter += 1;
            if ((lv_vTargetCost <= 0.0)) {
                break;
            }

            if (((UnitGroupCount(lv_vUG, c_unitCountAlive) == 0) || (lv_vIter > 400))) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, libCOMI_gv_mM_PlayerX, lp_pPoint);
                UnitBehaviorAddPlayer(UnitLastCreated(), "PXOwnership", libCOMI_gf_MutatorPlayer(), 1);
                lv_vTargetCost -= 250.0;
                UnitGroupAdd(lv_vUGOUT, UnitLastCreated());
            }

            lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
            lv_vUnitType = UnitGetType(lv_vUnit);
            if (((lv_vTargetCost - libCOMU_gf_MM_DM_UnitCost(lv_vUnit)) > -500.0)) {
                if ((UnitGroupCount(libCOMU_gv_mM_AddToAttackWave, c_unitCountAlive) > 0)) {
                    lv_vUnit = UnitGroupRandomUnit(libCOMU_gv_mM_AddToAttackWave, c_unitCountAlive);
                    lv_vUnitType = UnitGetType(lv_vUnit);
                }
                else {
                    lv_vTargetCost -= libCOMU_gf_MM_DM_UnitCost(lv_vUnit);
                }
                if ((libCOMI_gf_UnitMoverExists(lv_vUnitType, "Fly") == false)) {
                    if (((lv_vTransportCurrent == null) || ((UnitCargoValue(lv_vTransportCurrent, c_unitCargoSpaceFree) * 0.75) < (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vUnitType, "CargoSize", lp_pPlayer) + 1)))) {
                        UnitCreate(1, lp_transportType, c_unitCreateIgnorePlacement, libCOMI_gv_mM_PlayerX, lp_pPoint, PointGetFacing(lp_pPoint));
                        lv_vTransportCurrent = UnitLastCreated();
                        UnitGroupAdd(lv_vUGOUT, lv_vTransportCurrent);
                        UnitGroupAdd(lv_vTransports, lv_vTransportCurrent);
                        UnitGroupAdd(libCOMI_gv_cM_CoopAI_AttackForce_Transports, lv_vTransportCurrent);
                    }

                    UnitCargoCreate(lv_vTransportCurrent, lv_vUnitType, 1);
                    lv_vUnitCreated = UnitCargoLastCreated();
                }
                else {
                    UnitCreate(1, lv_vUnitType, 0, libCOMI_gv_mM_PlayerX, lp_pPoint, libNtve_gf_RandomAngle());
                    auto4A24CCFC_val = lv_vUnitType;
                    if (auto4A24CCFC_val == "Scourge") {
                        if ((AIIsScriptControlled(UnitLastCreated()) == true)) {
                            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)), c_orderQueueAddToFront);
                        }
                        else {
                            libNtve_gf_AICast(UnitLastCreated(), Order(AbilityCommand("SuicideBuilding", 0)));
                        }
                    }
                    else {
                    }
                    lv_vUnitCreated = UnitLastCreated();
                }
                libCOMU_gf_MM_DM_CopyBeneficialBehaviors(lv_vUnit, lv_vUnitCreated);
                UnitBehaviorAddPlayer(lv_vUnitCreated, "PXOwnership", libCOMI_gf_MutatorPlayer(), 1);
                UnitSetPropertyFixed(lv_vUnitCreated, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(lv_vUnitCreated, c_unitPropShieldsPercent, 100.0);
                UnitSetPropertyFixed(lv_vUnitCreated, c_unitPropEnergyPercent, 100.0);
                UnitGroupAdd(lv_vUGOUT, lv_vUnitCreated);
                if ((UnitGroupHasUnit(libCOMU_gv_mM_AddToAttackWave, lv_vUnit) == true)) {
                    UnitGroupRemove(libCOMU_gv_mM_AddToAttackWave, lv_vUnit);
                    UnitRemove(lv_vUnit);
                }

            }

        }
        auto65F699C0_g = lv_vTransports;
        auto65F699C0_u = UnitGroupCount(auto65F699C0_g, c_unitCountAll);
        for (;; auto65F699C0_u -= 1) {
            auto65F699C0_var = UnitGroupUnitFromEnd(auto65F699C0_g, auto65F699C0_u);
            if (auto65F699C0_var == null) { break; }
            UnitBehaviorAddPlayer(auto65F699C0_var, "PXOwnership", libCOMI_gf_MutatorPlayer(), 1);
        }
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("Factions", libCOMI_gf_GetEnemyFaction(), "UnitDetector", 1), 0, libCOMI_gv_mM_PlayerX, lp_pPoint);
    UnitBehaviorAddPlayer(UnitLastCreated(), "PXOwnership", libCOMI_gf_MutatorPlayer(), 1);
    UnitGroupAdd(lv_vUGOUT, UnitLastCreated());
    return lv_vUGOUT;
}

void libCOMU_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn3 (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, bool lp_dropWarpin) {
    // Variable Declarations
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    fixed lv_totalResourceAmount;
    string lv_commanderUnitTier;
    int lv_unitTypeIter;
    playergroup lv_attackingPlayers;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unitgroup lv_playerAttackForce;

    // Automatic Variable Declarations
    unitgroup auto8D9C6247_g;
    int auto8D9C6247_u;
    unit auto8D9C6247_var;
    playergroup autoA893F8A7_g;

    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();
    lv_playerAttackForce = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    auto8D9C6247_g = libCOMU_gv_mM_AddToAttackWave;
    auto8D9C6247_u = UnitGroupCount(auto8D9C6247_g, c_unitCountAll);
    for (;; auto8D9C6247_u -= 1) {
        auto8D9C6247_var = UnitGroupUnitFromEnd(auto8D9C6247_g, auto8D9C6247_u);
        if (auto8D9C6247_var == null) { break; }
        UnitSetPosition(auto8D9C6247_var, lp_spawnLocation, false);
    }
    UnitGroupAddUnitGroup(lv_attackForce, libCOMU_gv_mM_AddToAttackWave);
    UnitGroupClear(libCOMU_gv_mM_AddToAttackWave);
    if ((libCOMU_gv_mM_DarkMirrorActive == true)) {
        lv_attackForce = libCOMU_gf_MM_DM_CreateWave(lp_playerA, lp_spawnLocation, libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, libCOMI_gf_GetMissionDifficulty()), null);
        DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
        DataTableSetPoint(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GatherPointName(), lp_spawnLocation);
        autoA893F8A7_g = PlayerGroupAll();
        lv_playerIter = -1;
        while (true) {
            lv_playerIter = PlayerGroupNextPlayer(autoA893F8A7_g, lv_playerIter);
            if (lv_playerIter < 0) { break; }
            lv_playerAttackForce = UnitGroupFilterPlayer(lv_attackForce, lv_playerIter, 0);
            libCOMI_gf_CT_Mutator_AttackWaveHook_WaveCreated(lv_playerIter, lv_playerAttackForce, lp_spawnLocation, libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase);
            UnitGroupAddUnitGroup(lv_attackForce, lv_playerAttackForce);
        }
        DataTableSetUnitGroup(true, "UT_ATTACKWAVE", lv_attackForce);
        if ((lp_dropWarpin == true)) {
            libCOMI_gf_DropPodWarpInUnitGroup(lv_attackForce, lp_spawnLocation);
        }

        return ;
    }

}

void libCOMU_gf_DMCreateCoopDropForceinTransportsatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, string lp_transportType) {
    // Variable Declarations
    playergroup lv_attackingPlayers;
    int lv_playerIter;
    fixed[3] lv_resourcesForPlayer;
    int lv_unitTypeIter;
    int lv_player;
    int lv_unitCount;
    string lv_unitTypeToCreate;
    unitgroup lv_attackForce;
    unit[3] lv_transportCurrent;
    string lv_transportType;
    unit lv_unitCreated;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackingPlayers = PlayerGroupEmpty();
    lv_attackForce = UnitGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_attackingPlayers, lp_playerA);
    PlayerGroupAdd(lv_attackingPlayers, lp_playerB);
    if ((libCOMU_gv_mM_DarkMirrorActive == true)) {
        lv_attackForce = libCOMU_gf_MM_DM_CreateWave(lp_playerA, lp_spawnLocation, libCOMI_gf_CM_CoopAI_GetResourceAmount(lp_resourceSize, libCOMI_gf_GetMissionDifficulty()), lp_transportType);
        DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
        DataTableSetPoint(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_GatherPointName(), lp_spawnLocation);
        DataTableSetUnitGroup(true, "UT_ATTACKWAVE", lv_attackForce);
        return ;
    }

    libCOMI_gf_CM_CoopAI_AttackForce_ClearTable();
    DataTableSetUnitGroup(libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope, libCOMI_gf_CM_CoopAI_AttackForce_ForceName(), lv_attackForce);
}

trigger auto_libCOMU_gf_CT_ApplyDamageBounce2_Trigger = null;
unit auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagedUnit;
unit auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagingUnit;
fixed auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount;
string auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagingEffect;

void libCOMU_gf_CT_ApplyDamageBounce2 (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_initialDamageAmount, string lp_damagingEffect) {
    auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagedUnit = lp_damagedUnit;
    auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagingUnit = lp_damagingUnit;
    auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount = lp_initialDamageAmount;
    auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagingEffect = lp_damagingEffect;

    if (auto_libCOMU_gf_CT_ApplyDamageBounce2_Trigger == null) {
        auto_libCOMU_gf_CT_ApplyDamageBounce2_Trigger = TriggerCreate("auto_libCOMU_gf_CT_ApplyDamageBounce2_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_ApplyDamageBounce2_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_ApplyDamageBounce2_TriggerFunc (bool testConds, bool runActions) {
    unit lp_damagedUnit = auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagedUnit;
    unit lp_damagingUnit = auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagingUnit;
    fixed lp_initialDamageAmount = auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_initialDamageAmount;
    string lp_damagingEffect = auto_libCOMU_gf_CT_ApplyDamageBounce2_lp_damagingEffect;

    // Variable Declarations
    fixed lv_searchRegionRadius;
    region lv_searchRegion;
    fixed lv_bounceTargetsUnitCount;
    unitgroup lv_bounceTargetsUnitGroup;
    fixed lv_difficultyDamageModifier;
    fixed lv_bouncePercentage;
    fixed lv_finalDamageAmount;
    fixed lv_bouncedDamageAmount;
    fixed lv_takenDamageAmount;

    // Automatic Variable Declarations
    unitgroup auto81595F20_g;
    int auto81595F20_u;
    unit auto81595F20_var;
    unitgroup auto0317252B_g;
    int auto0317252B_u;
    unit auto0317252B_var;

    // Variable Initialization
    lv_searchRegionRadius = 5.0;
    lv_bounceTargetsUnitGroup = UnitGroupEmpty();

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("DamageBounce") == false) || (EventUnitDamageEffect() == "AttackDummyImpact") || (EventUnitDamageEffect() == "DiffusionDummyImpact") || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), 0)) == false) || (UnitIsAlive(lp_damagedUnit) == false))) {
        return true;
    }

    lv_bouncePercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.3, 0.4, 0.5, 0.0, 0.0);
    lv_bouncedDamageAmount = (lp_initialDamageAmount * lv_bouncePercentage);
    lv_takenDamageAmount = (lp_initialDamageAmount - lv_bouncedDamageAmount);
    auto81595F20_g = UnitGroupAlliance(UnitGetOwner(lp_damagedUnit), c_unitAllianceAny, RegionCircle(UnitGetPosition(lp_damagedUnit), lv_searchRegionRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto81595F20_u = UnitGroupCount(auto81595F20_g, c_unitCountAll);
    for (;; auto81595F20_u -= 1) {
        auto81595F20_var = UnitGroupUnitFromEnd(auto81595F20_g, auto81595F20_u);
        if (auto81595F20_var == null) { break; }
        if ((auto81595F20_var != lp_damagedUnit)) {
            lv_bounceTargetsUnitCount += 1.0;
            UnitGroupAdd(lv_bounceTargetsUnitGroup, auto81595F20_var);
        }

    }
    if ((lv_bounceTargetsUnitCount != 0)) {
        auto0317252B_g = lv_bounceTargetsUnitGroup;
        auto0317252B_u = UnitGroupCount(auto0317252B_g, c_unitCountAll);
        for (;; auto0317252B_u -= 1) {
            auto0317252B_var = UnitGroupUnitFromEnd(auto0317252B_g, auto0317252B_u);
            if (auto0317252B_var == null) { break; }
            UnitDamage(lp_damagedUnit, "DiffusionDummyImpact", auto0317252B_var, (lv_bouncedDamageAmount / lv_bounceTargetsUnitCount));
        }
        if ((UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShields, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libARRA_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
        else {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLife, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libARRA_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
    }

    return true;
}

trigger auto_libCOMU_gf_CT_ApplyDamageBounce3_Trigger = null;
unit auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagedUnit;
unit auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagingUnit;
fixed auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_initialDamageAmount;
string auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagingEffect;

void libCOMU_gf_CT_ApplyDamageBounce3 (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_initialDamageAmount, string lp_damagingEffect) {
    auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagedUnit = lp_damagedUnit;
    auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagingUnit = lp_damagingUnit;
    auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_initialDamageAmount = lp_initialDamageAmount;
    auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagingEffect = lp_damagingEffect;

    if (auto_libCOMU_gf_CT_ApplyDamageBounce3_Trigger == null) {
        auto_libCOMU_gf_CT_ApplyDamageBounce3_Trigger = TriggerCreate("auto_libCOMU_gf_CT_ApplyDamageBounce3_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_ApplyDamageBounce3_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_ApplyDamageBounce3_TriggerFunc (bool testConds, bool runActions) {
    unit lp_damagedUnit = auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagedUnit;
    unit lp_damagingUnit = auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagingUnit;
    fixed lp_initialDamageAmount = auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_initialDamageAmount;
    string lp_damagingEffect = auto_libCOMU_gf_CT_ApplyDamageBounce3_lp_damagingEffect;

    // Variable Declarations
    fixed lv_searchRegionRadius;
    region lv_searchRegion;
    fixed lv_bounceTargetsUnitCount;
    unitgroup lv_bounceTargetsUnitGroup;
    fixed lv_difficultyDamageModifier;
    fixed lv_bouncePercentage;
    fixed lv_finalDamageAmount;
    fixed lv_bouncedDamageAmount;
    fixed lv_takenDamageAmount;

    // Automatic Variable Declarations
    unitgroup auto9A7A3C3C_g;
    int auto9A7A3C3C_u;
    unit auto9A7A3C3C_var;
    unitgroup auto19EC7CE4_g;
    int auto19EC7CE4_u;
    unit auto19EC7CE4_var;

    // Variable Initialization
    lv_searchRegionRadius = 5.0;
    lv_bounceTargetsUnitGroup = UnitGroupEmpty();

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("DamageBounce") == false) || (EventUnitDamageEffect() == "AttackDummyImpact") || (EventUnitDamageEffect() == "DiffusionDummyImpact") || (UnitIsAlive(lp_damagedUnit) == false))) {
        return true;
    }

    lv_bouncePercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.3, 0.4, 0.5, 0.0, 0.0);
    lv_bouncedDamageAmount = (lp_initialDamageAmount * lv_bouncePercentage);
    lv_takenDamageAmount = (lp_initialDamageAmount - lv_bouncedDamageAmount);
    auto9A7A3C3C_g = UnitGroupAlliance(UnitGetOwner(lp_damagedUnit), c_unitAllianceAny, RegionCircle(UnitGetPosition(lp_damagedUnit), lv_searchRegionRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto9A7A3C3C_u = UnitGroupCount(auto9A7A3C3C_g, c_unitCountAll);
    for (;; auto9A7A3C3C_u -= 1) {
        auto9A7A3C3C_var = UnitGroupUnitFromEnd(auto9A7A3C3C_g, auto9A7A3C3C_u);
        if (auto9A7A3C3C_var == null) { break; }
        if ((auto9A7A3C3C_var != lp_damagedUnit)) {
            lv_bounceTargetsUnitCount += 1.0;
            UnitGroupAdd(lv_bounceTargetsUnitGroup, auto9A7A3C3C_var);
        }

    }
    if ((lv_bounceTargetsUnitCount != 0)) {
        auto19EC7CE4_g = lv_bounceTargetsUnitGroup;
        auto19EC7CE4_u = UnitGroupCount(auto19EC7CE4_g, c_unitCountAll);
        for (;; auto19EC7CE4_u -= 1) {
            auto19EC7CE4_var = UnitGroupUnitFromEnd(auto19EC7CE4_g, auto19EC7CE4_u);
            if (auto19EC7CE4_var == null) { break; }
            UnitDamage(lp_damagedUnit, "DiffusionDummyImpact", auto19EC7CE4_var, (lv_bouncedDamageAmount / lv_bounceTargetsUnitCount));
        }
        if ((UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShieldsMax, c_unitPropCurrent) != 0.0)) {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShields, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libARRA_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
        else {
            UnitSetPropertyFixed(lp_damagedUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLife, c_unitPropCurrent) + lv_bouncedDamageAmount));
            if ((libARRA_gf_ActorForUnit(lp_damagedUnit, 420) == null)) {
                ActorCreate(ActorScopeFromUnit(lp_damagedUnit), "Diffusion_Shockwave_Coop", null, null, null);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, libNtve_gf_ActorLastCreated());
                Wait(2.0, c_timeGame);
                libARRA_gf_StoreActorForUnit(lp_damagedUnit, 420, null);
            }

        }
    }

    return true;
}

void libCOMU_gf_CT_ApplyDeathAOE (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    int auto41686782_ae;
    const int auto41686782_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("DeathAOE") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(lp_killedUnit)) == false))) {
        return ;
    }

    UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", UnitGetPosition(lp_killedUnit));
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) > 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        auto41686782_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (auto41686782_ai >= 0 && lv_indexAOE <= auto41686782_ae) || (auto41686782_ai < 0 && lv_indexAOE >= auto41686782_ae) ) ; lv_indexAOE += auto41686782_ai ) {
            UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), lv_aOESpawnArea)));
        }
    }

}

void libCOMU_gf_MM_ApplyDeathAOE (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    int auto47CC923E_ae;
    const int auto47CC923E_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("DeathAOE") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(lp_killedUnit)) == false))) {
        return ;
    }

    UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", UnitGetPosition(lp_killedUnit));
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) > 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        auto47CC923E_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (auto47CC923E_ai >= 0 && lv_indexAOE <= auto47CC923E_ae) || (auto47CC923E_ai < 0 && lv_indexAOE >= auto47CC923E_ae) ) ; lv_indexAOE += auto47CC923E_ai ) {
            UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathAOECP", RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), lv_aOESpawnArea)));
        }
    }

}

void libCOMU_gf_CT_ApplyDeathFire (unit lp_killedUnit) {
    // Variable Declarations
    int lv_indexFlame;
    fixed lv_fireSpawnArea;
    point lv_unitPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("FireFight") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "AdeptPhaseShift") || (UnitGetType(lp_killedUnit) == "DisruptorPhased"))) {
        return ;
    }

    lv_unitPosition = UnitGetPosition(lp_killedUnit);
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 1.0)) {
        if (((UnitGetType(lp_killedUnit) == "XelNagaConstruct") || (UnitHasBehavior2(lp_killedUnit, "HybridUnitDummy") == true))) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamSmallInitialCP", lv_unitPosition);
        }
    }
    else {
        if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 4.0)) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
    }
}

void libCOMU_gf_MM_ApplyDeathFire (unit lp_killedUnit) {
    // Variable Declarations
    int lv_indexFlame;
    fixed lv_fireSpawnArea;
    point lv_unitPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("FireFight") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitGetType(lp_killedUnit) == "AdeptPhaseShift") || (UnitGetType(lp_killedUnit) == "DisruptorPhased"))) {
        return ;
    }

    lv_unitPosition = UnitGetPosition(lp_killedUnit);
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 1.0)) {
        if (((UnitGetType(lp_killedUnit) == "XelNagaConstruct") || (UnitHasBehavior2(lp_killedUnit, "HybridUnitDummy") == true))) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamSmallInitialCP", lv_unitPosition);
        }
    }
    else {
        if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) <= 4.0)) {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamInitialCP", lv_unitPosition);
        }
        else {
            PlayerCreateEffectPoint(UnitGetOwner(lp_killedUnit), "MutatorScorchedEarthFireBeamLargeInitialCP", lv_unitPosition);
        }
    }
}

void libCOMU_gf_CT_ApplyDeathPull (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("DeathPull") == false) || (libCOMI_gf_MutatorIsEnabled("DeathAOE") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(lp_killedUnit)) == false))) {
        return ;
    }

    if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) <= 1.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentWeak", UnitGetPosition(lp_killedUnit));
    }
    else if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) >= 6.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentStrong", UnitGetPosition(lp_killedUnit));
    }
    else if (true) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistent", UnitGetPosition(lp_killedUnit));
    }
}

void libCOMU_gf_MM_ApplyDeathPull (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("DeathPull") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, 0, (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(lp_killedUnit)) == false))) {
        return ;
    }

    if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) <= 1.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentWeak", UnitGetPosition(lp_killedUnit));
    }
    else if ((UnitGetPropertyFixed(lp_killedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) >= 6.0)) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistentStrong", UnitGetPosition(lp_killedUnit));
    }
    else if (true) {
        UnitCreateEffectPoint(lp_killedUnit, "MutatorDeathPullPersistent", UnitGetPosition(lp_killedUnit));
    }
}

void libCOMU_gf_CT_ApplyEvolve (unit lp_killingUnit, unit lp_victimUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    int lv_index;
    fixed lv_killerSupply;
    fixed lv_victimSupply;
    fixed lv_newSupply;
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    int lv_tier;
    int lv_type;
    int lv_intSupply;
    int lv_intUnit;
    string lv_newUnitType;
    string[11][11] lv_unitTypes;
    point lv_spawnPosition;
    string lv_killerTier;
    string lv_killingUnitTestUnit;
    int lv_tierEndpoint;
    string lv_endpointTestUnit;

    // Automatic Variable Declarations
    const int auto9E114A72_ae = 10;
    const int auto9E114A72_ai = 1;
    const int autoF2A2351D_ae = 10;
    const int autoF2A2351D_ai = 1;
    const int autoC1B89A6E_ae = 1;
    const int autoC1B89A6E_ai = -1;
    const int auto10349771_ae = 1;
    const int auto10349771_ai = -1;
    string auto6C8DB878_val;

    // Variable Initialization

    // Implementation
    if ((RandomInt(0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 500, 400, 300, 200, 0, 0)) > FixedToInt(EventUnitDamageAmount()))) {
        return ;
    }

    if (((libCOMI_gf_MutatorIsEnabled("Evolve") == false) || (UnitIsAlive(lp_killingUnit) == false) || (UnitGetOwner(lp_killingUnit) == c_playerAny) || (UnitGetOwner(lp_killingUnit) == 0) || (UnitGetOwner(lp_victimUnit) == 0) || (UnitGetType(lp_killingUnit) == "MutatorKillBot") || (UnitGetType(lp_killingUnit) == "MutatorPropagator") || (UnitGetType(lp_killingUnit) == "MutatorBoomBot") || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killingUnit)) == false) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_victimUnit)) == true) || (UnitHasBehavior2(lp_killingUnit, "MutatorEvolve") == true) || (UnitFilterMatch(lp_killingUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_CT_MutatorUnitIsMapObjective(lp_killingUnit) == true))) {
        return ;
    }

    lv_tier = 1;
    for ( ; ( (auto9E114A72_ai >= 0 && lv_tier <= auto9E114A72_ae) || (auto9E114A72_ai < 0 && lv_tier >= auto9E114A72_ae) ) ; lv_tier += auto9E114A72_ai ) {
        lv_killerTier = UserDataInstance("EvolutionTiers", lv_tier);
        lv_type = 1;
        for ( ; ( (autoF2A2351D_ai >= 0 && lv_type <= autoF2A2351D_ae) || (autoF2A2351D_ai < 0 && lv_type >= autoF2A2351D_ae) ) ; lv_type += autoF2A2351D_ai ) {
            lv_killingUnitTestUnit = UserDataGetUnit("EvolutionTiers", lv_killerTier, "UnitsToEvolveInto", lv_type);
            if ((lv_killingUnitTestUnit == UnitGetType(lp_killingUnit))) {
                lv_killerSupply = lv_tier;
                break;
            }

        }
        if ((lv_killerSupply > 0.0)) {
            break;
        }

    }
    if ((lv_killerSupply == 0.0)) {
        lv_killerSupply = 1.0;
    }
    else {
        if ((lv_killerTier == "Tier10")) {
            return ;
        }

    }
    if ((UnitIsAlive(lp_victimUnit) == true)) {
        lv_victimSupply = 1.0;
    }
    else {
        if ((UnitGroupHasUnit(libCOMI_gv_heroUnits, lp_victimUnit) == true)) {
            lv_victimSupply = 10.0;
        }
        else {
            if ((UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) < 1)) {
                lv_victimSupply = 1.0;
            }
            else {
                lv_victimSupply = UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
        }
    }
    lv_newSupply = (lv_victimSupply + lv_killerSupply);
    lv_tier = MinI(FixedToInt(lv_newSupply), 10);
    for ( ; ( (autoC1B89A6E_ai >= 0 && lv_tier <= autoC1B89A6E_ae) || (autoC1B89A6E_ai < 0 && lv_tier >= autoC1B89A6E_ae) ) ; lv_tier += autoC1B89A6E_ai ) {
        lv_tierEndpoint = 8;
        for ( ; ( (auto10349771_ai >= 0 && lv_tierEndpoint <= auto10349771_ae) || (auto10349771_ai < 0 && lv_tierEndpoint >= auto10349771_ae) ) ; lv_tierEndpoint += auto10349771_ai ) {
            lv_endpointTestUnit = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", lv_tierEndpoint);
            if ((lv_endpointTestUnit != "")) {
                break;
            }

        }
        lv_newUnitType = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", RandomInt(1, lv_tierEndpoint));
        if ((lv_newUnitType != "")) {
            break;
        }

    }
    lv_spawnPosition = UnitGetPosition(lp_killingUnit);
    PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_killingUnit));
    UnitRemove(lp_killingUnit);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, UnitGetOwner(lp_killingUnit), lv_spawnPosition);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "MutatorEvolve", UnitLastCreated(), 1);
    auto6C8DB878_val = libARRA_gf_GetUnitRace(UnitLastCreated());
    if (auto6C8DB878_val == "Prot") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveProtoss");
    }
    else if (auto6C8DB878_val == "Terr") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveTerran");
    }
    else if (auto6C8DB878_val == "Zerg") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    UnitCreateEffectUnit(lp_victimUnit, "MutatorQuickEvolveMissleLaunch", UnitLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
}

void libCOMU_gf_MM_ApplyEvolve (unit lp_killingUnit, unit lp_victimUnit) {
    // Variable Declarations
    unit lv_nearbyUnit;
    int lv_index;
    fixed lv_killerSupply;
    fixed lv_victimSupply;
    fixed lv_newSupply;
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    int lv_tier;
    int lv_type;
    int lv_intSupply;
    int lv_intUnit;
    string lv_newUnitType;
    string[11][11] lv_unitTypes;
    point lv_spawnPosition;
    string lv_killerTier;
    string lv_killingUnitTestUnit;
    int lv_tierEndpoint;
    string lv_endpointTestUnit;

    // Automatic Variable Declarations
    const int auto44D5E92A_ae = 10;
    const int auto44D5E92A_ai = 1;
    const int auto2433B614_ae = 10;
    const int auto2433B614_ai = 1;
    const int auto7163458D_ae = 1;
    const int auto7163458D_ai = -1;
    const int autoC1669711_ae = 1;
    const int autoC1669711_ai = -1;
    string autoA2BDEF5A_val;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Evolve") == false) || (UnitIsAlive(lp_killingUnit) == false) || (UnitGetOwner(lp_killingUnit) == 0) || (UnitGetOwner(lp_victimUnit) == 0) || (UnitGetType(lp_killingUnit) == "MutatorKillBot") || (UnitGetType(lp_killingUnit) == "MutatorPropagator") || (UnitGetType(lp_killingUnit) == "MutatorBoomBot") || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_victimUnit)) == true) || (UnitHasBehavior2(lp_killingUnit, "MutatorEvolve") == true) || (UnitFilterMatch(lp_killingUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_CT_MutatorUnitIsMapObjective(lp_killingUnit) == true))) {
        return ;
    }

    lv_tier = 1;
    for ( ; ( (auto44D5E92A_ai >= 0 && lv_tier <= auto44D5E92A_ae) || (auto44D5E92A_ai < 0 && lv_tier >= auto44D5E92A_ae) ) ; lv_tier += auto44D5E92A_ai ) {
        lv_killerTier = UserDataInstance("EvolutionTiers", lv_tier);
        lv_type = 1;
        for ( ; ( (auto2433B614_ai >= 0 && lv_type <= auto2433B614_ae) || (auto2433B614_ai < 0 && lv_type >= auto2433B614_ae) ) ; lv_type += auto2433B614_ai ) {
            lv_killingUnitTestUnit = UserDataGetUnit("EvolutionTiers", lv_killerTier, "UnitsToEvolveInto", lv_type);
            if ((lv_killingUnitTestUnit == UnitGetType(lp_killingUnit))) {
                lv_killerSupply = lv_tier;
                break;
            }

        }
        if ((lv_killerSupply > 0.0)) {
            break;
        }

    }
    if ((lv_killerSupply == 0.0)) {
        lv_killerSupply = 1.0;
    }
    else {
        if ((lv_killerTier == "Tier10")) {
            return ;
        }

    }
    if ((UnitIsAlive(lp_victimUnit) == true)) {
        lv_victimSupply = 1.0;
    }
    else {
        if ((UnitGroupHasUnit(libCOMI_gv_heroUnits, lp_victimUnit) == true)) {
            lv_victimSupply = 10.0;
        }
        else {
            if ((UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) < 1)) {
                lv_victimSupply = 1.0;
            }
            else {
                lv_victimSupply = UnitGetPropertyFixed(lp_victimUnit, c_unitPropSuppliesUsed, c_unitPropCurrent);
            }
        }
    }
    lv_newSupply = (lv_victimSupply + lv_killerSupply);
    lv_tier = MinI(FixedToInt(lv_newSupply), 10);
    for ( ; ( (auto7163458D_ai >= 0 && lv_tier <= auto7163458D_ae) || (auto7163458D_ai < 0 && lv_tier >= auto7163458D_ae) ) ; lv_tier += auto7163458D_ai ) {
        lv_tierEndpoint = 8;
        for ( ; ( (autoC1669711_ai >= 0 && lv_tierEndpoint <= autoC1669711_ae) || (autoC1669711_ai < 0 && lv_tierEndpoint >= autoC1669711_ae) ) ; lv_tierEndpoint += autoC1669711_ai ) {
            lv_endpointTestUnit = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", lv_tierEndpoint);
            if ((lv_endpointTestUnit != "")) {
                break;
            }

        }
        lv_newUnitType = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", RandomInt(1, lv_tierEndpoint));
        if ((lv_newUnitType != "")) {
            break;
        }

    }
    lv_spawnPosition = UnitGetPosition(lp_killingUnit);
    PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_killingUnit));
    UnitRemove(lp_killingUnit);
    libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, UnitGetOwner(lp_killingUnit), lv_spawnPosition);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(UnitLastCreated(), "MutatorEvolve", UnitLastCreated(), 1);
    autoA2BDEF5A_val = libARRA_gf_GetUnitRace(UnitLastCreated());
    if (autoA2BDEF5A_val == "Prot") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveProtoss");
    }
    else if (autoA2BDEF5A_val == "Terr") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveTerran");
    }
    else if (autoA2BDEF5A_val == "Zerg") {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
    }
    UnitCreateEffectUnit(lp_victimUnit, "MutatorQuickEvolveMissleLaunch", UnitLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
}

void libCOMU_gf_MM_ApplyEndurance (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Endurance") == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (lp_pUnit == null) || (UnitHasBehavior2(lp_pUnit, "Endurance") == true) || (UnitHasBehavior2(lp_pUnit, "EnduranceTrain") == true) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterMapBoss - 32)), (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || (UnitHasBehavior2(lp_pUnit, "ExcludeEndurance") == true))) {
        return ;
    }

    if ((libCOMI_gf_MM_IsTrain(lp_pUnit) == true)) {
        UnitBehaviorAddPlayer(lp_pUnit, "EnduranceTrain", libCOMI_gf_MutatorPlayer(), 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_pUnit, "Endurance", libCOMI_gf_MutatorPlayer(), 1);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropShieldsPercent, 100.0);
    }
}

void libCOMU_gf_CT_ApplyFear (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Variable Declarations
    point lv_attackLocation;
    int lv_fearChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Fear") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_damagedUnit, "MutatorFear") == true) || (lp_damageAmount <= 0.0))) {
        return ;
    }
    else {
        lv_fearChance = libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 10, 15, 20, 100, 100);
        if ((RandomInt(0, FixedToInt((UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(lp_damagedUnit, c_unitPropShieldsMax, c_unitPropCurrent)))) <= lv_fearChance)) {
            if ((lp_damagingUnit != null) && (UnitIsValid(lp_damagingUnit) == true)) {
                lv_attackLocation = UnitGetPosition(lp_damagingUnit);
            }
            else {
                lv_attackLocation = PointWithOffsetPolar(UnitGetPosition(lp_damagedUnit), 1.0, libNtve_gf_RandomAngle());
            }
            UnitBehaviorAdd(lp_damagedUnit, "MutatorFear", lp_damagingUnit, 1);
            UnitIssueOrder(lp_damagedUnit, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_damagedUnit), -5.0, lv_attackLocation)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            while ((UnitHasBehavior2(lp_damagedUnit, "MutatorFear") == true) && (UnitIsAlive(lp_damagedUnit) == true)) {
                UnitIssueOrder(lp_damagedUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagedUnit), 3.0))), c_orderQueueReplace);
                Wait(0.5, c_timeGame);
            }
            UnitIssueOrder(lp_damagedUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
}

void libCOMU_gf_CT_ApplyFireworks (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;
    int lv_enemyUnitsRemaining;
    unit lv_fireworkTargetUnit;
    point lv_noTargetPoint;
    bool lv_targetUnitsNearby;

    // Automatic Variable Declarations
    int auto984A027E_ae;
    const int auto984A027E_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Fireworks") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(lp_killedUnit)) == false))) {
        return ;
    }

    if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_killedUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_targetUnitsNearby = true;
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
    }
    else {
        lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
        PointSetHeight(lv_noTargetPoint, 10.0);
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
    }
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) >= 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        auto984A027E_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (auto984A027E_ai >= 0 && lv_indexAOE <= auto984A027E_ae) || (auto984A027E_ai < 0 && lv_indexAOE >= auto984A027E_ae) ) ; lv_indexAOE += auto984A027E_ai ) {
            if ((lv_targetUnitsNearby == true)) {
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
            }
            else {
                lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
                PointSetHeight(lv_noTargetPoint, 10.0);
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
            }
        }
    }

}

void libCOMU_gf_MM_ApplyFireworks (unit lp_killedUnit) {
    // Variable Declarations
    fixed lv_aOESpawnArea;
    int lv_indexAOE;
    int lv_enemyUnitsRemaining;
    unit lv_fireworkTargetUnit;
    point lv_noTargetPoint;
    bool lv_targetUnitsNearby;

    // Automatic Variable Declarations
    int auto89380320_ae;
    const int auto89380320_ai = 1;

    // Variable Initialization
    lv_aOESpawnArea = 1.0;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Fireworks") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(lp_killedUnit)) == false))) {
        return ;
    }

    if ((UnitGroupCount(UnitGroupAlliance(UnitGetOwner(lp_killedUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killedUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        lv_targetUnitsNearby = true;
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
    }
    else {
        lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
        PointSetHeight(lv_noTargetPoint, 10.0);
        UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
    }
    if ((UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed) >= 2.0)) {
        if (((UnitGetType(lp_killedUnit) == "Caboose") || (UnitGetType(lp_killedUnit) == "TarsonisEngineFast") || (UnitGetType(lp_killedUnit) == "TarsonisEngine") || (UnitGetType(lp_killedUnit) == "FreightCar"))) {
            lv_aOESpawnArea = 2.0;
        }

        auto89380320_ae = FixedToInt(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed));
        lv_indexAOE = 1;
        for ( ; ( (auto89380320_ai >= 0 && lv_indexAOE <= auto89380320_ae) || (auto89380320_ai < 0 && lv_indexAOE >= auto89380320_ae) ) ; lv_indexAOE += auto89380320_ai ) {
            if ((lv_targetUnitsNearby == true)) {
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksTargetSearch", UnitGetPosition(lp_killedUnit));
            }
            else {
                lv_noTargetPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_killedUnit), 3.0));
                PointSetHeight(lv_noTargetPoint, 10.0);
                UnitCreateEffectPoint(lp_killedUnit, "MutatorFireworksMissileCP", lv_noTargetPoint);
            }
        }
    }

}

trigger auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_Trigger = null;
unit auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_lp_killedUnit;

void libCOMU_gf_CT_ApplyFoodHuntSpawn (unit lp_killedUnit) {
    auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_lp_killedUnit = lp_killedUnit;

    if (auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_Trigger == null) {
        auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_Trigger = TriggerCreate("auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_killedUnit = auto_libCOMU_gf_CT_ApplyFoodHuntSpawn_lp_killedUnit;

    // Variable Declarations
    unit lv_indexUnit;
    int lv_trainWave;
    bool lv_spawnInfested;
    bool lv_spawnKing;
    int lv_trainsLeft;
    int lv_kingPing;
    unit lv_theTurking;

    // Automatic Variable Declarations
    int autoE225DACA_val;
    unitgroup auto02334153_g;
    int auto02334153_u;
    unitgroup autoD159DB92_g;
    int autoD159DB92_u;
    const int autoB39CA114_n = 7;
    int autoB39CA114_i;

    // Variable Initialization
    lv_kingPing = c_invalidPingId;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("FoodHunt") == false) || ((UnitGetType(lp_killedUnit) != "Caboose") && (UnitGetType(lp_killedUnit) != "TarsonisEngineFast") && (UnitGetType(lp_killedUnit) != "TarsonisEngine") && (UnitGetType(lp_killedUnit) != "FreightCar")))) {
        return true;
    }

    lv_trainWave = FixedToInt(UnitGetCustomValue(lp_killedUnit, 1));
    lv_trainsLeft = (libCOMI_gf_MissionObjectiveItemCountCoop("AC_TarsonisTrain_Primary01") - lv_trainWave);
    if (((lv_trainWave == 3) || (lv_trainWave == 5))) {
        lv_spawnInfested = true;
    }

    if ((lv_spawnInfested == true)) {
        libCOMU_gv_cT_FoodHuntInfestedWaves += 1;
        autoE225DACA_val = libCOMU_gv_cT_FoodHuntInfestedWaves;
        if (autoE225DACA_val == 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 3, 3), "MutatorInfestedTurkey", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_killedUnit));
        }
        else if (autoE225DACA_val == 2) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 3, 4, 4, 4), "MutatorInfestedTurkey", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_killedUnit));
        }
        else if (autoE225DACA_val == 3) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 4, 6, 6, 6), "MutatorInfestedTurkey", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_killedUnit));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 4, 6, 6, 6), "MutatorInfestedTurkey", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_killedUnit));
        }
        UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        auto02334153_g = UnitLastCreatedGroup();
        auto02334153_u = UnitGroupCount(auto02334153_g, c_unitCountAll);
        for (;; auto02334153_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto02334153_g, auto02334153_u);
            if (lv_indexUnit == null) { break; }
            UnitSetState(lv_indexUnit, c_unitStateTooltipable, true);
        }
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        DialogControlSetVisible(libCOMU_gv_cT_FoodHuntAttackLabel, PlayerGroupAll(), true);
        SoundPlayForPlayer(SoundLink("MutatorInfestedTurkeysSpawnWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        UnitCreate(5, "MutatorTurkey", 0, 0, UnitGetPosition(lp_killedUnit), libNtve_gf_RandomAngle());
        UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        autoD159DB92_g = UnitLastCreatedGroup();
        autoD159DB92_u = UnitGroupCount(autoD159DB92_g, c_unitCountAll);
        for (;; autoD159DB92_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoD159DB92_g, autoD159DB92_u);
            if (lv_indexUnit == null) { break; }
            UnitSetState(lv_indexUnit, c_unitStateTooltipable, true);
        }
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    }
    if ((libCOMU_gv_cT_FoodHuntKingSpawned == false) && (lv_trainWave == 6)) {
        libCOMU_gv_cT_FoodHuntKingSpawned = true;
        lv_spawnKing = true;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorTurking", 0, libCOMI_gf_MutatorPlayer(), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_MutatorPlayer()));
        UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
        lv_theTurking = UnitLastCreated();
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
        SoundPlayForPlayer(SoundLink("MutatorTurkeyKingSpawned", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_PingAdvanced_Danger", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_AffectedPlayers(), UnitGetPosition(lv_theTurking), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        PingSetUnit(PingLastCreated(), lv_theTurking);
        lv_kingPing = PingLastCreated();
    }

    if (((lv_spawnInfested == true) || (lv_spawnKing == true))) {
        if ((lv_spawnKing == true)) {
            libNtve_gf_SetDialogItemText(libCOMU_gv_cT_FoodHuntAttackLabel, StringExternal("Param/Value/lib_COMU_8410468A"), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(libCOMU_gv_cT_FoodHuntAttackLabel, StringExternal("Param/Value/lib_COMU_6917562A"), PlayerGroupAll());
        }
        for (autoB39CA114_i = 1; autoB39CA114_i <= autoB39CA114_n; autoB39CA114_i += 1) {
            Wait(0.2, c_timeGame);
            DialogControlSetVisible(libCOMU_gv_cT_FoodHuntAttackLabel, PlayerGroupAll(), true);
            Wait(0.8, c_timeGame);
            DialogControlSetVisible(libCOMU_gv_cT_FoodHuntAttackLabel, PlayerGroupAll(), false);
        }
        if ((lv_spawnKing == true)) {
            while (!((UnitIsAlive(lv_theTurking) == false))) {
                Wait(0.5, c_timeGame);
            }
            libCOMI_gf_DestroyPingCoop(lv_kingPing);
        }

    }

    return true;
}

void libCOMU_gf_CT_ApplyFoodHuntBounty (unit lp_killedUnit) {
    // Variable Declarations
    int lv_currentFood;
    int lv_indexPlayer;
    int lv_foodBounty;
    int lv_totalLimit;

    // Automatic Variable Declarations
    playergroup autoEB7A40BB_g;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("FoodHunt") == false) || (UnitGetType(lp_killedUnit) != "MutatorTurkey"))) {
        return ;
    }

    lv_totalLimit = (libCOMU_gv_cT_FoodHuntOriginalSupplyLimit[1]+libCOMU_gv_cT_FoodHuntOriginalSupplyLimit[2]);
    lv_foodBounty = 2;
    autoEB7A40BB_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoEB7A40BB_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_currentFood = PlayerGetPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade);
        lv_currentFood = MinI((lv_currentFood+lv_foodBounty), lv_totalLimit);
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv_currentFood);
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_currentFood);
        libCOMI_gf_DisplayRewardFloatingText(UnitGetPosition(lp_killedUnit), libCOMI_ge_CacheResourceType_CustomResource, lv_foodBounty, "Assets\\Textures\\btn-doodad-zerg-ancientmeat.dds", null, lv_indexPlayer);
    }
}

void libCOMU_gf_CT_ApplyFoodHuntAggro (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Variable Declarations
    unitgroup lv_turkeyFriends;
    unit lv_indexTurkey;

    // Automatic Variable Declarations
    unitgroup auto9DAB5FAD_g;
    int auto9DAB5FAD_u;

    // Variable Initialization
    lv_turkeyFriends = UnitGroupEmpty();

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("FoodHunt") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (UnitGetType(lp_damagedUnit) != "MutatorTurkey"))) {
        return ;
    }

    lv_turkeyFriends = UnitGroup("MutatorTurkey", 0, RegionCircle(UnitGetPosition(lp_damagedUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9DAB5FAD_g = lv_turkeyFriends;
    auto9DAB5FAD_u = UnitGroupCount(auto9DAB5FAD_g, c_unitCountAll);
    for (;; auto9DAB5FAD_u -= 1) {
        lv_indexTurkey = UnitGroupUnitFromEnd(auto9DAB5FAD_g, auto9DAB5FAD_u);
        if (lv_indexTurkey == null) { break; }
        UnitSetOwner(lv_indexTurkey, libCOMI_gf_MutatorPlayer(), false);
        UnitSetInfoText(lv_indexTurkey, StringToText(""), StringExternal("Param/Value/lib_COMU_C622DC61"), StringToText(""));
    }
    if ((lp_damagingUnit != null) && (UnitIsValid(lp_damagingUnit) == true)) {
        UnitGroupIssueOrder(lv_turkeyFriends, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_damagingUnit)), c_orderQueueReplace);
    }

}

point libCOMU_gf_MM_GW_CreepTumorTarget (unit lp_pUnit) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int autoF66967CA_n = 20;
    int autoF66967CA_i;

    // Variable Initialization

    // Implementation
    for (autoF66967CA_i = 1; autoF66967CA_i <= autoF66967CA_n; autoF66967CA_i += 1) {
        lv_vPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pUnit), 5.0, libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))), RandomFixed(0.0, 6.0), libNtve_gf_RandomAngle());
        if ((UnitCountAlliance(c_playerAny, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (CreepIsPresent(lv_vPoint) == true) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint)) {
            return lv_vPoint;
        }

    }
    return lv_vPoint;
}

bool libCOMU_gf_MM_GW_NoBuildRegionClose (point lp_pPoint) {
    // Automatic Variable Declarations
    const int auto7059F3DC_n = 1000;
    int auto7059F3DC_i;

    // Implementation
    for (auto7059F3DC_i = 1; auto7059F3DC_i <= auto7059F3DC_n; auto7059F3DC_i += 1) {
        if ((DistanceBetweenPoints(lp_pPoint, RegionRandomPoint(libCOMU_gv_mM_GW_NoBuildRegion)) <= 8.0)) {
            return true;
        }

    }
    return false;
}

void libCOMU_gf_MM_GW_PathingInit () {
    // Automatic Variable Declarations
    string autoB27107FF_val;

    // Implementation
    TriggerEnable(libCOMU_gt_MM_GW_ConstructionStarted, true);
    autoB27107FF_val = libCOMI_gf_CC_CurrentMap();
    if (autoB27107FF_val == "AC_ShakurasTemple") {
        libCOMU_gf_MM_GW_Track(Point(26.0, 170.0), Point(56.5, 139.5));
        libCOMU_gf_MM_GW_Track(Point(60.5, 135.5), Point(75.5, 120.5));
        libCOMU_gf_MM_GW_Track(Point(170.0, 18.0), Point(140.5, 57.5));
        libCOMU_gf_MM_GW_Track(Point(136.5, 61.5), Point(124.5, 73.5));
        libCOMU_gf_MM_GW_Track(Point(17.0, 14.5), Point(57.5, 54.5));
        libCOMU_gf_MM_GW_Track(Point(61.5, 58.5), Point(79.5, 78.0));
    }
    else {
        TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent, true);
        TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod, true);
        TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn, true);
    }
}

trigger auto_libCOMU_gf_MM_GW_Track_Trigger = null;
point auto_libCOMU_gf_MM_GW_Track_lp_vPointStart;
point auto_libCOMU_gf_MM_GW_Track_lp_vPointEnd;

void libCOMU_gf_MM_GW_Track (point lp_vPointStart, point lp_vPointEnd) {
    auto_libCOMU_gf_MM_GW_Track_lp_vPointStart = lp_vPointStart;
    auto_libCOMU_gf_MM_GW_Track_lp_vPointEnd = lp_vPointEnd;

    if (auto_libCOMU_gf_MM_GW_Track_Trigger == null) {
        auto_libCOMU_gf_MM_GW_Track_Trigger = TriggerCreate("auto_libCOMU_gf_MM_GW_Track_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_MM_GW_Track_Trigger, false, false);
}

bool auto_libCOMU_gf_MM_GW_Track_TriggerFunc (bool testConds, bool runActions) {
    point lp_vPointStart = auto_libCOMU_gf_MM_GW_Track_lp_vPointStart;
    point lp_vPointEnd = auto_libCOMU_gf_MM_GW_Track_lp_vPointEnd;

    // Automatic Variable Declarations
    const int autoB979B6C5_n = 60;
    int autoB979B6C5_i;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GWDummy", c_unitCreateIgnorePlacement, libCOMI_gf_MutatorPlayer(), lp_vPointStart);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_vPointEnd), c_orderQueueReplace);
    RegionAddCircle(libCOMU_gv_mM_GW_NoBuildRegion, true, lp_vPointStart, 3.0);
    for (autoB979B6C5_i = 1; autoB979B6C5_i <= autoB979B6C5_n; autoB979B6C5_i += 1) {
        Wait(1.0, c_timeGame);
        RegionAddCircle(libCOMU_gv_mM_GW_NoBuildRegion, true, UnitGetPosition(UnitLastCreated()), 2.4);
        if ((DistanceBetweenPoints(UnitGetPosition(UnitLastCreated()), lp_vPointEnd) <= 0.5)) {
            break;
        }

    }
    UnitRemove(UnitLastCreated());
    return true;
}

void libCOMU_gf_MM_GW_Path (point lp_pPoint) {
    // Automatic Variable Declarations
    const int auto8C47BAD7_n = 60;
    int auto8C47BAD7_i;

    // Implementation
    if (((RegionContainsPoint(libCOMU_gv_mM_GW_NoBuildRegion, lp_pPoint) == true) || (PathingType(lp_pPoint) != c_pathingGround) || (UnitGroupCount(UnitGroup("GWDummy", c_playerAny, RegionCircle(lp_pPoint, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), c_unitCountAlive) > 0) || (libCOMU_gf_MM_GW_NoBuildRegionClose(lp_pPoint) == true))) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GWDummy", c_unitCreateIgnorePlacement, libCOMI_gf_MutatorPlayer(), lp_pPoint);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))), c_orderQueueReplace);
    if ((AIPathingCostUnit(UnitLastCreated(), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)), c_ignoreEnemyBuildings) == -1)) {
        UnitRemove(UnitLastCreated());
        return ;
    }

    if ((PointPathingCost(UnitGetPosition(UnitLastCreated()), libCOMI_gf_PointWithPathingNearBase(libCOMI_gf_AffectedPlayers())) == 65536)) {
        Wait(60.0, c_timeGame);
        if ((PointPathingCost(UnitGetPosition(UnitLastCreated()), libCOMI_gf_PointWithPathingNearBase(libCOMI_gf_AffectedPlayers())) == 65536)) {
            UnitRemove(UnitLastCreated());
            return ;
        }

    }

    RegionAddCircle(libCOMU_gv_mM_GW_NoBuildRegion, true, lp_pPoint, 3.0);
    for (auto8C47BAD7_i = 1; auto8C47BAD7_i <= auto8C47BAD7_n; auto8C47BAD7_i += 1) {
        Wait(1.0, c_timeGame);
        RegionAddCircle(libCOMU_gv_mM_GW_NoBuildRegion, true, UnitGetPosition(UnitLastCreated()), 2.0);
        if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(UnitGetPosition(UnitLastCreated()), 20.0, libCOMI_gf_AffectedPlayers()) == false)) {
            break;
        }

    }
    UnitRemove(UnitLastCreated());
}

void libCOMU_gf_CT_ApplyWinterCheer (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("GiftFight") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if ((lv_createdUnitType == "ProtossFrigate") && (libCOMU_gv_cT_GiftShuttlesOvercharged > 0)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorShuttleOvercharge", libCOMI_gf_MutatorPlayer(), 1);
        libCOMU_gv_cT_GiftShuttlesOvercharged -= 1;
        return ;
    }

    if ((lv_createdUnitType != "Hybrid") && (lv_createdUnitType != "HybridReaver") && (lv_createdUnitType != "HybridDestroyer") && (lv_createdUnitType != "HybridDominatorVoid") && (lv_createdUnitType != "HybridNemesis") && (lv_createdUnitType != "HybridBehemoth")) {
        return ;
    }

    libNtve_gf_SendActorMessageToUnit(lp_createdUnit, "Create MutatorWinterHat");
}

int libCOMU_gf_CT_GiftState (unit lp_gift) {
    // Variable Declarations
    int lv_giftStateInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_giftStateInt = FixedToInt(UnitGetCustomValue(lp_gift, 11));
    return lv_giftStateInt;
}

trigger auto_libCOMU_gf_CT_GiftSpawn_Trigger = null;
point auto_libCOMU_gf_CT_GiftSpawn_lp_spawnLocation;

void libCOMU_gf_CT_GiftSpawn (point lp_spawnLocation) {
    auto_libCOMU_gf_CT_GiftSpawn_lp_spawnLocation = lp_spawnLocation;

    if (auto_libCOMU_gf_CT_GiftSpawn_Trigger == null) {
        auto_libCOMU_gf_CT_GiftSpawn_Trigger = TriggerCreate("auto_libCOMU_gf_CT_GiftSpawn_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_GiftSpawn_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_GiftSpawn_TriggerFunc (bool testConds, bool runActions) {
    point lp_spawnLocation = auto_libCOMU_gf_CT_GiftSpawn_lp_spawnLocation;

    // Variable Declarations
    unit lv_gift;
    actor lv_spawnFX;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorGift", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lp_spawnLocation);
    lv_gift = UnitLastCreated();
    UnitGroupAdd(libCOMU_gv_cT_Gifts, lv_gift);
    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, lv_gift);
    libCOMU_gv_cT_GiftLastCreated = lv_gift;
    libNtve_gf_ShowHideUnit(lv_gift, false);
    libCOMI_gf_DisplayUnitProgressBar(lv_gift, StringExternal("Param/Value/lib_COMU_7E0966AD"), 1, 100);
    libCOMI_gf_ShowHideUnitProgressBar2(lv_gift, false);
    libCOMI_gf_ShowHideUnitProgressBar(lv_gift, false);
    SoundPlayForPlayer(SoundLink("ChristmasGiftPing", -1), c_maxPlayers, PlayerGroupAll(), 300.0, 0.0);
    libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "MutatorGift", lp_spawnLocation, ColorWithAlpha(50.20, 100.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.15);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMU_B52E4454"));
    libARRA_gf_StorePingForUnit(lv_gift, 1, PingLastCreated());
    libNtve_gf_CreateModelAtPoint("MutatorGift", lp_spawnLocation);
    lv_spawnFX = libNtve_gf_ActorLastCreated();
    ActorSend(lv_spawnFX, "SetOpacity 0.300000");
    ActorSend(lv_spawnFX, "SetTintColor 0,255,255");
    Wait(40.0, c_timeAI);
    libNtve_gf_KillModel(lv_spawnFX);
    libNtve_gf_ShowHideUnit(lv_gift, true);
    libCOMU_gf_CT_GiftSetState(lv_gift, libCOMU_ge_CT_GiftState_CT_GiftStateNeutral);
    return true;
}

void libCOMU_gf_CT_GiftSetState (unit lp_gift, int lp_state) {
    // Variable Declarations
    int lv_oldState;

    // Automatic Variable Declarations
    int autoFA110F88_val;

    // Variable Initialization

    // Implementation
    lv_oldState = libCOMU_gf_CT_GiftState(lp_gift);
    if ((lv_oldState == lp_state)) {
        return ;
    }

    if ((lv_oldState == libCOMU_ge_CT_GiftState_CT_GiftStateStealing)) {
        return ;
    }

    UnitSetCustomValue(lp_gift, 11, IntToFixed((lp_state)));
    libCOMU_gf_CT_GiftSetProgress(lp_gift, 0.0);
    autoFA110F88_val = lp_state;
    if (autoFA110F88_val == libCOMU_ge_CT_GiftState_CT_GiftStateNeutral) {
        libCOMI_gf_ShowHideUnitProgressBar(lp_gift, false);
    }
    else if (autoFA110F88_val == libCOMU_ge_CT_GiftState_CT_GiftStateContested) {
        libCOMI_gf_ShowHideUnitProgressBar(lp_gift, false);
    }
    else if (autoFA110F88_val == libCOMU_ge_CT_GiftState_CT_GiftStatePlayer) {
        libCOMI_gf_ShowHideUnitProgressBar(lp_gift, true);
    }
    else if (autoFA110F88_val == libCOMU_ge_CT_GiftState_CT_GiftStateEnemy) {
        libCOMI_gf_ShowHideUnitProgressBar(lp_gift, true);
    }
    else if (autoFA110F88_val == libCOMU_ge_CT_GiftState_CT_GiftStateStealing) {
        SoundPlayForPlayer(SoundLink("MutatorAmonGiftSteal", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_927B78AE"));
        libCOMI_gf_SetUnitProgresBarTitle(lp_gift, StringExternal("Param/Value/lib_COMU_15E2F7AD"));
        libCOMI_gf_ShowHideUnitProgressBar(lp_gift, true);
        libNtve_gf_CreateModelAtPoint("DisintegrationState", UnitGetPosition(lp_gift));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,0,0");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 3.000000");
        libARRA_gf_StoreActorForUnit(lp_gift, 6, libNtve_gf_ActorLastCreated());
    }
    else {
    }
}

void libCOMU_gf_CT_GiftSetProgress (unit lp_gift, fixed lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_progress >= 100.0)) {
        libCOMU_gf_CT_GiftClaim(lp_gift);
        return ;
    }

    UnitSetCustomValue(lp_gift, 12, lp_progress);
    libCOMI_gf_SetUnitProgressBarProgress(lp_gift, FixedToInt(lp_progress));
}

void libCOMU_gf_CT_GiftAddProgress (unit lp_gift, fixed lp_progress) {
    // Automatic Variable Declarations
    // Implementation
    libCOMU_gf_CT_GiftSetProgress(lp_gift, (UnitGetCustomValue(lp_gift, 12) + lp_progress));
}

trigger auto_libCOMU_gf_CT_GiftSendAttack_Trigger = null;
unit auto_libCOMU_gf_CT_GiftSendAttack_lp_gift;

void libCOMU_gf_CT_GiftSendAttack (unit lp_gift) {
    auto_libCOMU_gf_CT_GiftSendAttack_lp_gift = lp_gift;

    if (auto_libCOMU_gf_CT_GiftSendAttack_Trigger == null) {
        auto_libCOMU_gf_CT_GiftSendAttack_Trigger = TriggerCreate("auto_libCOMU_gf_CT_GiftSendAttack_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_GiftSendAttack_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_GiftSendAttack_TriggerFunc (bool testConds, bool runActions) {
    unit lp_gift = auto_libCOMU_gf_CT_GiftSendAttack_lp_gift;

    // Variable Declarations
    unitgroup lv_attackUnits;
    int lv_basePower;
    int lv_modifiedPower;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto399DB06C_g;
    int auto399DB06C_u;

    // Variable Initialization
    lv_attackUnits = UnitGroupEmpty();

    // Implementation
    lv_basePower = libCOMU_gv_cT_GiftAmonPower;
    Wait(10.0, c_timeGame);
    lv_modifiedPower = (lv_basePower+FixedToInt((GameGetMissionTime() / libCOMI_gf_MinimumDifficultyValueCoopReal(215.0, 215.0, 140.0, 120.0, 120.0, 120.0))));
    if ((lv_basePower >= 2)) {
        while (!((libCOMU_gf_CT_GiftState(lp_gift) != libCOMU_ge_CT_GiftState_CT_GiftStateSpawning))) {
            Wait(0.1, c_timeGame);
        }
        libCOMU_gv_cT_GiftAmonPower -= 1;
        libCOMU_gf_CT_GiftSetState(lp_gift, libCOMU_ge_CT_GiftState_CT_GiftStateStealing);
        return true;
    }
    else if ((lv_modifiedPower <= 1)) {
        lv_attackUnits = libCOMI_gf_CreateCoopAIAttackGroup2(3, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early);
    }
    else if ((lv_modifiedPower <= 3)) {
        lv_attackUnits = libCOMI_gf_CreateCoopAIAttackGroup2(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid);
    }
    else if ((lv_modifiedPower <= 6)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 8)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 9)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDestroyer", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 10)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__1Early, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridReaver", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 11)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__1Early, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 12)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if ((lv_modifiedPower <= 13)) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    else if (true) {
        lv_attackUnits = libCOMI_gf_CreateCommanderAttackGroupatPoint(3, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, UnitGetPosition(lp_gift));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridBehemoth", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridNemesis", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridDominatorVoid", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lp_gift));
        libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(UnitLastCreated()));
        UnitGroupAddUnitGroup(lv_attackUnits, UnitLastCreatedGroup());
    }
    DataTableSetUnitGroup(true, ("CT_GiftAtk_" + IntToString(UnitGetTag(lp_gift))), lv_attackUnits);
    AISetGroupScriptControlled(lv_attackUnits, false);
    auto399DB06C_g = lv_attackUnits;
    auto399DB06C_u = UnitGroupCount(auto399DB06C_g, c_unitCountAll);
    for (;; auto399DB06C_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto399DB06C_g, auto399DB06C_u);
        if (lv_indexUnit == null) { break; }
        libNtve_gf_AICast(lv_indexUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_gift)));
    }
    return true;
}

trigger auto_libCOMU_gf_CT_GiftSpawnHybridFX_Trigger = null;
point auto_libCOMU_gf_CT_GiftSpawnHybridFX_lp_location;

void libCOMU_gf_CT_GiftSpawnHybridFX (point lp_location) {
    auto_libCOMU_gf_CT_GiftSpawnHybridFX_lp_location = lp_location;

    if (auto_libCOMU_gf_CT_GiftSpawnHybridFX_Trigger == null) {
        auto_libCOMU_gf_CT_GiftSpawnHybridFX_Trigger = TriggerCreate("auto_libCOMU_gf_CT_GiftSpawnHybridFX_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_GiftSpawnHybridFX_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_GiftSpawnHybridFX_TriggerFunc (bool testConds, bool runActions) {
    point lp_location = auto_libCOMU_gf_CT_GiftSpawnHybridFX_lp_location;

    // Variable Declarations
    actor lv_spawnFX;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libNtve_gf_CreateModelAtPoint("HybridWarpInEffect", lp_location);
    lv_spawnFX = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_spawnFX);
    return true;
}

void libCOMU_gf_CT_GiftClaim (unit lp_gift) {
    // Variable Declarations
    unitgroup lv_attackingForce;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoAA8771E6_g;

    // Variable Initialization
    lv_attackingForce = UnitGroupEmpty();

    // Implementation
    lv_attackingForce = DataTableGetUnitGroup(true, ("CT_GiftAtk_" + IntToString(UnitGetTag(lp_gift))));
    if ((libCOMU_gf_CT_GiftState(lp_gift) == libCOMU_ge_CT_GiftState_CT_GiftStatePlayer)) {
        libCOMU_gv_cT_GiftAmonPower += 1;
        autoAA8771E6_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoAA8771E6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            libCOMU_gf_CT_GiftPlayerBonus(UnitGetPosition(lp_gift), RandomInt(1, libCOMU_gv_cTC_GiftPlayerBonuses), lv_indexPlayer);
        }
    }
    else if (((libCOMU_gf_CT_GiftState(lp_gift) == libCOMU_ge_CT_GiftState_CT_GiftStateEnemy) || (libCOMU_gf_CT_GiftState(lp_gift) == libCOMU_ge_CT_GiftState_CT_GiftStateStealing))) {
        libCOMU_gv_cT_GiftAmonPower -= 1;
        libCOMU_gf_CT_GiftEnemyBonus(UnitGetPosition(lp_gift), RandomInt(1, libCOMU_gv_cTC_GiftEnemyBonuses));
        if ((libARRA_gf_ActorForUnit(lp_gift, 6) != null)) {
            libNtve_gf_KillModel(libARRA_gf_ActorForUnit(lp_gift, 6));
        }

    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_9EA49371"), true);
        return ;
    }
    libCOMI_gf_ShowHideUnitProgressBar(lp_gift, false);
    libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(lp_gift, 1));
    UnitGroupRemove(libCOMU_gv_cT_Gifts, lp_gift);
    UnitKill(lp_gift);
    if ((lv_attackingForce != null)) {
        AISetGroupSuicide(lv_attackingForce, true);
    }

}

trigger auto_libCOMU_gf_CT_GiftPlayerBonus_Trigger = null;
point auto_libCOMU_gf_CT_GiftPlayerBonus_lp_giftLocation;
int auto_libCOMU_gf_CT_GiftPlayerBonus_lp_bonusType;
int auto_libCOMU_gf_CT_GiftPlayerBonus_lp_giftPlayer;

void libCOMU_gf_CT_GiftPlayerBonus (point lp_giftLocation, int lp_bonusType, int lp_giftPlayer) {
    auto_libCOMU_gf_CT_GiftPlayerBonus_lp_giftLocation = lp_giftLocation;
    auto_libCOMU_gf_CT_GiftPlayerBonus_lp_bonusType = lp_bonusType;
    auto_libCOMU_gf_CT_GiftPlayerBonus_lp_giftPlayer = lp_giftPlayer;

    if (auto_libCOMU_gf_CT_GiftPlayerBonus_Trigger == null) {
        auto_libCOMU_gf_CT_GiftPlayerBonus_Trigger = TriggerCreate("auto_libCOMU_gf_CT_GiftPlayerBonus_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_GiftPlayerBonus_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_GiftPlayerBonus_TriggerFunc (bool testConds, bool runActions) {
    point lp_giftLocation = auto_libCOMU_gf_CT_GiftPlayerBonus_lp_giftLocation;
    int lp_bonusType = auto_libCOMU_gf_CT_GiftPlayerBonus_lp_bonusType;
    int lp_giftPlayer = auto_libCOMU_gf_CT_GiftPlayerBonus_lp_giftPlayer;

    // Variable Declarations
    int lv_bonusAmount;
    int lv_attempts;
    unit lv_mineralPatch;
    unit lv_bonusUnit;
    unitgroup lv_bonusUnits;
    point lv_spawnLocation;
    sound lv_bonusSound;
    bool lv_oracleMade;

    // Automatic Variable Declarations
    int auto6C6B2DF5_val;
    int auto7C01F19E_ae;
    const int auto7C01F19E_ai = 1;
    const int auto1ABF8D02_ae = 50;
    const int auto1ABF8D02_ai = 1;
    const int auto8224E9CC_ae = 3;
    const int auto8224E9CC_ai = 1;
    const int auto794E5C4B_ae = 200;
    const int auto794E5C4B_ai = 1;
    unitgroup autoF92CF79A_g;
    int autoF92CF79A_u;

    // Variable Initialization
    lv_bonusUnits = UnitGroupEmpty();

    // Implementation
    SoundPlayForPlayer(SoundLink("ChristmasGiftAlly", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto6C6B2DF5_val = lp_bonusType;
    if (auto6C6B2DF5_val == 1) {
        libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_3D5109C2"), lp_giftPlayer);
        auto7C01F19E_ae = (15+(FixedToInt((GameGetMissionTime() / 60.0))));
        lv_bonusAmount = 1;
        for ( ; ( (auto7C01F19E_ai >= 0 && lv_bonusAmount <= auto7C01F19E_ae) || (auto7C01F19E_ai < 0 && lv_bonusAmount >= auto7C01F19E_ae) ) ; lv_bonusAmount += auto7C01F19E_ai ) {
            lv_attempts = 1;
            for ( ; ( (auto1ABF8D02_ai >= 0 && lv_attempts <= auto1ABF8D02_ae) || (auto1ABF8D02_ai < 0 && lv_attempts >= auto1ABF8D02_ae) ) ; lv_attempts += auto1ABF8D02_ai ) {
                lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
                if ((libCOMI_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == true)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorNaturalGas50", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
                    break;
                }

            }
        }
    }
    else if (auto6C6B2DF5_val == 2) {
        PlayerCreateEffectPoint(lp_giftPlayer, "SOAMapWideChronoSearch", lp_giftLocation);
        libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_ECC70714"), lp_giftPlayer);
    }
    else if (auto6C6B2DF5_val == 3) {
        if ((PlayerRace(lp_giftPlayer) == "Terr")) {
            UnitCreate(1, "HERC", 0, lp_giftPlayer, lp_giftLocation, libNtve_gf_RandomAngle());
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, lp_giftLocation, UnitLastCreatedGroup(), false, lp_giftPlayer);
            libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_A5D5B2B5"), lp_giftPlayer);
        }
        else if ((PlayerRace(lp_giftPlayer) == "Prot")) {
            UnitCreate(1, "Scout", 0, lp_giftPlayer, lp_giftLocation, libNtve_gf_RandomAngle());
            libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2(UnitLastCreated());
            libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_5916E9EC"), lp_giftPlayer);
        }
        else if (true) {
            UnitCreate(1, "QueenClassic", 0, lp_giftPlayer, lp_giftLocation, libNtve_gf_RandomAngle());
            UnitSetHeight(UnitLastCreated(), 16.0, 0.0);
            UnitSetHeight(UnitLastCreated(), UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropHeight), 3.0);
            libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_CC78230C"), lp_giftPlayer);
        }
    }
    else if (auto6C6B2DF5_val == 4) {
        libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_80E7DB63"), lp_giftPlayer);
        lv_bonusAmount = 1;
        for ( ; ( (auto8224E9CC_ai >= 0 && lv_bonusAmount <= auto8224E9CC_ae) || (auto8224E9CC_ai < 0 && lv_bonusAmount >= auto8224E9CC_ae) ) ; lv_bonusAmount += auto8224E9CC_ai ) {
            lv_mineralPatch = UnitGroupRandomUnit(UnitGroup("MineralField", c_playerAny, RegionCircle(libARRA_gf_GetPlayerStartPosition(lp_giftPlayer), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            PlayerCreateEffectUnit(lp_giftPlayer, "MutatorCalldownMULECreateUnit", lv_mineralPatch);
            if ((lv_oracleMade == false)) {
                lv_oracleMade = true;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorDancingOracle", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, libARRA_gf_GetPlayerStartPosition(lp_giftPlayer));
                UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
                UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
                UnitBehaviorAdd(UnitLastCreated(), "MULETimedLife", UnitLastCreated(), 1);
            }

        }
        SoundPlayForPlayer(SoundLink("Music_MuleParty", -1), c_maxPlayers, PlayerGroupSingle(lp_giftPlayer), 100.0, 1.0);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, true);
        lv_bonusSound = SoundLastPlayed();
        SoundWait(lv_bonusSound, 0.0, c_soundOffsetEnd);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, false);
    }
    else if (auto6C6B2DF5_val == 5) {
        lv_bonusUnits = UnitGroup(null, lp_giftPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_attempts = 1;
        for ( ; ( (auto794E5C4B_ai >= 0 && lv_attempts <= auto794E5C4B_ae) || (auto794E5C4B_ai < 0 && lv_attempts >= auto794E5C4B_ae) ) ; lv_attempts += auto794E5C4B_ai ) {
            lv_bonusUnit = UnitGroupRandomUnit(UnitGroup(null, lp_giftPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_bonusUnit == null)) {
                break;
            }

            if (((UnitWeaponCount(lv_bonusUnit) == 0) || (UnitIsValid(lv_bonusUnit) == false) || (UnitHasBehavior2(lv_bonusUnit, "MutatorAvenger") == true))) {
                UnitGroupRemove(lv_bonusUnits, lv_bonusUnit);
                continue;
            }

            TextExpressionSetToken("Param/Expression/lib_COMU_F87AC3BD", "UNIT", TextCase(UnitTypeGetName(UnitGetType(lv_bonusUnit)), true));
            libCOMI_gf_CU_MutatorListShowNotificationToPlayer(TextExpressionAssemble("Param/Expression/lib_COMU_F87AC3BD"), lp_giftPlayer);
            UnitBehaviorAdd(lv_bonusUnit, "MutatorAvenger", lv_bonusUnit, 10);
            if ((UnitHasBehavior2(lv_bonusUnit, "MutatorShrunk") == true)) {
                libNtve_gf_SendActorMessageToUnit(lv_bonusUnit, (("SetScale " + "0.9")));
            }
            else {
                libNtve_gf_SendActorMessageToUnit(lv_bonusUnit, (("SetScale " + "1.8")));
            }
            libNtve_gf_SendActorMessageToUnit(lv_bonusUnit, "GlowStart");
            return true;
        }
        libCOMU_gf_CT_GiftPlayerBonus(lp_giftLocation, 4, lp_giftPlayer);
    }
    else if (auto6C6B2DF5_val == 6) {
        libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_BA9234A4"), lp_giftPlayer);
        lv_bonusUnits = UnitGroup(null, lp_giftPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF92CF79A_g = lv_bonusUnits;
        autoF92CF79A_u = UnitGroupCount(autoF92CF79A_g, c_unitCountAll);
        for (;; autoF92CF79A_u -= 1) {
            lv_bonusUnit = UnitGroupUnitFromEnd(autoF92CF79A_g, autoF92CF79A_u);
            if (lv_bonusUnit == null) { break; }
            if ((UnitHasBehavior2(lv_bonusUnit, "MutatorKarmaIncreasedDamageVet") == true)) {
                UnitXPSetCurrentLevel(lv_bonusUnit, "MutatorKarmaIncreasedDamageVet", 0);
                UnitSetPropertyFixed(lv_bonusUnit, c_unitPropKills, 0.0);
            }

        }
    }
    else if (auto6C6B2DF5_val == 7) {
        libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_25EA4855"), lp_giftPlayer);
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.CountStart", lp_giftPlayer, "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.CountMax", lp_giftPlayer, "5");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_giftPlayer, "1");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Cost[" + IntToString(0) + "].Charge.TimeUse", lp_giftPlayer, "5.0");
        CatalogFieldValueSet(c_gameCatalogAbil, "ArchAngelCoopMissileShot", "Range[" + IntToString(0) + "]", lp_giftPlayer, "10");
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArchAngelCoopAssault", 0, lp_giftPlayer, lp_giftLocation);
        TechTreeAbilityAllow(lp_giftPlayer, AbilityCommand("ArchAngelCoopFighterMode", 0), false);
        TechTreeAbilityAllow(lp_giftPlayer, AbilityCommand("ArchAngelCoopRepel", 0), false);
    }
    else if (auto6C6B2DF5_val == 8) {
        libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_A9214DD3"), lp_giftPlayer);
        PlayerSetState(lp_giftPlayer, c_playerStateVespeneCostIgnored, true);
        PlayerSetState(lp_giftPlayer, c_playerStateMineralCostIgnored, true);
        SoundPlayForPlayer(SoundLink("MutatorShoppingSpree", -1), c_maxPlayers, PlayerGroupSingle(lp_giftPlayer), 100.0, 1.0);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, true);
        lv_bonusSound = SoundLastPlayed();
        Wait(10.0, c_timeGame);
        SoundStop(lv_bonusSound, true);
        SoundChannelMute(PlayerGroupSingle(lp_giftPlayer), c_soundCategoryMusic, false);
        PlayerSetState(lp_giftPlayer, c_playerStateVespeneCostIgnored, false);
        PlayerSetState(lp_giftPlayer, c_playerStateMineralCostIgnored, false);
    }
    else if (auto6C6B2DF5_val == 9) {
        if ((GameGetMissionTime() <= 480.0)) {
            libCOMU_gf_CT_GiftPlayerBonus(lp_giftLocation, RandomInt(1, libCOMU_gv_cTC_GiftPlayerBonuses), lp_giftPlayer);
            return true;
        }

        libCOMI_gf_CU_MutatorListShowNotificationToPlayer(StringExternal("Param/Value/lib_COMU_C63E8CE3"), lp_giftPlayer);
        PlayerCreateEffectPoint(lp_giftPlayer, "MutatorGiftHealingSearch", lp_giftLocation);
    }
    else if (auto6C6B2DF5_val == 10) {
    }
    else {
    }
    return true;
}

trigger auto_libCOMU_gf_CT_GiftEnemyBonus_Trigger = null;
point auto_libCOMU_gf_CT_GiftEnemyBonus_lp_giftLocation;
int auto_libCOMU_gf_CT_GiftEnemyBonus_lp_bonusType;

void libCOMU_gf_CT_GiftEnemyBonus (point lp_giftLocation, int lp_bonusType) {
    auto_libCOMU_gf_CT_GiftEnemyBonus_lp_giftLocation = lp_giftLocation;
    auto_libCOMU_gf_CT_GiftEnemyBonus_lp_bonusType = lp_bonusType;

    if (auto_libCOMU_gf_CT_GiftEnemyBonus_Trigger == null) {
        auto_libCOMU_gf_CT_GiftEnemyBonus_Trigger = TriggerCreate("auto_libCOMU_gf_CT_GiftEnemyBonus_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_GiftEnemyBonus_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_GiftEnemyBonus_TriggerFunc (bool testConds, bool runActions) {
    point lp_giftLocation = auto_libCOMU_gf_CT_GiftEnemyBonus_lp_giftLocation;
    int lp_bonusType = auto_libCOMU_gf_CT_GiftEnemyBonus_lp_bonusType;

    // Variable Declarations
    int lv_indexPlayer;
    string lv_bonusMutator;
    unitgroup lv_bonusUnits;
    unit lv_indexUnit;
    point lv_targetLocation;
    int lv_attempts;
    int lv_count;
    int lv_killBotKillCap;
    int lv_killBotKills;
    unit lv_killBot;
    int lv_killBotPing;
    int lv_killBotDialog;
    int lv_killBotLabel;

    // Automatic Variable Declarations
    int autoC35EF233_val;
    int autoCB33496B_ae;
    const int autoCB33496B_ai = 1;
    const int autoD251832F_ae = 100;
    const int autoD251832F_ai = 1;
    int autoD1524D39_val;
    unitgroup auto0CBF1FD0_g;
    int auto0CBF1FD0_u;
    unitgroup auto8336ADB6_g;
    int auto8336ADB6_u;
    unitgroup auto5D0D4BD3_g;
    int auto5D0D4BD3_u;
    unitgroup autoA3089793_g;
    int autoA3089793_u;

    // Variable Initialization
    lv_bonusUnits = UnitGroupEmpty();
    lv_killBotPing = c_invalidPingId;
    lv_killBotDialog = c_invalidDialogId;
    lv_killBotLabel = c_invalidDialogControlId;

    // Implementation
    SoundPlayForPlayer(SoundLink("ChristmasGiftEnemy", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoC35EF233_val = lp_bonusType;
    if (autoC35EF233_val == 1) {
        lv_bonusMutator = libCOMU_gf_CT_GiftRandomMutator();
        libCOMI_gf_EnableDisableMutator(true, lv_bonusMutator);
        libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_2FCD81E7"));
        TriggerSendEvent(("Mutator " + (lv_bonusMutator) + " Initialize"));
        libCOMI_gf_CU_MutatorListInit();
        Wait(180.0, c_timeGame);
        libCOMI_gf_EnableDisableMutator(false, lv_bonusMutator);
        libCOMI_gf_CU_MutatorListInit();
    }
    else if (autoC35EF233_val == 2) {
        libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_FC77327E"));
        autoCB33496B_ae = libCOMI_gf_MinimumDifficultyValueCoopInteger(10, 15, 25, 30, 30, 30);
        lv_count = 1;
        for ( ; ( (autoCB33496B_ai >= 0 && lv_count <= autoCB33496B_ae) || (autoCB33496B_ai < 0 && lv_count >= autoCB33496B_ae) ) ; lv_count += autoCB33496B_ai ) {
            lv_attempts = 1;
            for ( ; ( (autoD251832F_ai >= 0 && lv_attempts <= autoD251832F_ae) || (autoD251832F_ai < 0 && lv_attempts >= autoD251832F_ae) ) ; lv_attempts += autoD251832F_ai ) {
                lv_targetLocation = RegionRandomPoint(RegionPlayableMap());
                if ((PathingType(lv_targetLocation) == c_pathingGround) && libCOMI_gf_ConnectedByGroundPath(lv_targetLocation) && (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_targetLocation, 30.0, libCOMI_gf_AffectedPlayers()) == true) && (UnitCount(null, c_playerAny, RegionCircle(lv_targetLocation, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1) <= 0)) {
                    autoD1524D39_val = RandomInt(1, 3);
                    if (autoD1524D39_val == 1) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WidowMineBurrowed", 0, libCOMI_gf_MutatorPlayer(), lv_targetLocation);
                    }
                    else if (autoD1524D39_val == 2) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "BanelingBurrowed", 0, libCOMI_gf_MutatorPlayer(), lv_targetLocation);
                    }
                    else if (autoD1524D39_val == 3) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "OracleStasisTrap", 0, libCOMI_gf_MutatorPlayer(), lv_targetLocation);
                    }
                    else {
                    }
                    break;
                }

            }
        }
    }
    else if (autoC35EF233_val == 3) {
        lv_count = libCOMI_gf_MinimumDifficultyValueCoopInteger(8, 12, 15, 30, 30, 30);
        if ((GameGetMissionTime() >= 360.0)) {
            lv_count += libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 4, 8, 15, 15, 15);
        }

        if ((GameGetMissionTime() >= 600.0)) {
            lv_count += libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 5, 10, 15, 15, 15);
        }

        if ((UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 5)) {
            libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_515BB76E"));
            libNtve_gf_CreateUnitsWithDefaultFacing(lv_count, "Scourge", 0, libCOMI_gf_MutatorPlayer(), lp_giftLocation);
            lv_bonusUnits = UnitLastCreatedGroup();
            auto0CBF1FD0_g = lv_bonusUnits;
            auto0CBF1FD0_u = UnitGroupCount(auto0CBF1FD0_g, c_unitCountAll);
            for (;; auto0CBF1FD0_u -= 1) {
                lv_indexUnit = UnitGroupUnitFromEnd(auto0CBF1FD0_g, auto0CBF1FD0_u);
                if (lv_indexUnit == null) { break; }
                UnitSetHeight(lv_indexUnit, 16.0, 0.0);
                UnitSetHeight(lv_indexUnit, UnitTypeGetProperty(UnitGetType(lv_indexUnit), c_unitPropHeight), 3.0);
            }
            Wait(3.0, c_timeGame);
            AISetGroupScriptControlled(lv_bonusUnits, false);
            AISetGroupSuicide(lv_bonusUnits, true);
        }
        else {
            libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_EC0ECB53"));
            libNtve_gf_CreateUnitsWithDefaultFacing(lv_count, "BanelingBurrowed", 0, libCOMI_gf_MutatorPlayer(), PointWithOffsetPolar(lp_giftLocation, RandomFixed(0.0, 3.0), libNtve_gf_RandomAngle()));
            lv_bonusUnits = UnitLastCreatedGroup();
            UnitGroupIssueOrder(lv_bonusUnits, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
            Wait(1.0, c_timeGame);
            AISetGroupScriptControlled(lv_bonusUnits, false);
            AISetGroupSuicide(lv_bonusUnits, true);
        }
    }
    else if (autoC35EF233_val == 4) {
        libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_EED7C1C4"));
        libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 2, 2), "HybridReaver", 0, libCOMI_gf_MutatorPlayer(), lp_giftLocation);
        lv_bonusUnits = UnitLastCreatedGroup();
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1), "HybridDominatorVoid", 0, libCOMI_gf_MutatorPlayer(), lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
        }

        if ((GameGetMissionTime() > 500.0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 1, 1), "HybridDominatorVoid", 0, libCOMI_gf_MutatorPlayer(), lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1), "HybridBehemoth", 0, libCOMI_gf_MutatorPlayer(), lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
        }

        if ((GameGetMissionTime() > 700.0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 1, 1), "HybridBehemoth", 0, libCOMI_gf_MutatorPlayer(), lp_giftLocation);
            UnitGroupAddUnitGroup(lv_bonusUnits, UnitLastCreatedGroup());
        }

        auto8336ADB6_g = lv_bonusUnits;
        auto8336ADB6_u = UnitGroupCount(auto8336ADB6_g, c_unitCountAll);
        for (;; auto8336ADB6_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto8336ADB6_g, auto8336ADB6_u);
            if (lv_indexUnit == null) { break; }
            libCOMU_gf_CT_GiftSpawnHybridFX(UnitGetPosition(lv_indexUnit));
        }
        AISetGroupScriptControlled(lv_bonusUnits, false);
        AISetGroupSuicide(lv_bonusUnits, true);
    }
    else if (autoC35EF233_val == 5) {
        libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_B0A44331"));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorKillBot", 0, libCOMI_gf_MutatorPlayer(), lp_giftLocation);
        lv_killBot = UnitLastCreated();
        UnitSetState(lv_killBot, c_unitStateInvulnerable, true);
        libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_AffectedPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        lv_killBotPing = PingLastCreated();
        PingSetScale(lv_killBotPing, 0.45);
        PingSetUnit(lv_killBotPing, lv_killBot);
        PingSetTooltip(lv_killBotPing, StringExternal("Param/Value/lib_COMU_94B464B3"));
        UnitStatusBarOverride(lv_killBot, c_unitStatusGroupAll);
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "InfoLabel", lv_killBot);
        lv_killBotLabel = DialogControlLastCreated();
        AISetUnitSuicide(lv_killBot, true);
        if ((GameGetMissionTime() < 600.0)) {
            lv_killBotKillCap = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 5, 20, 30, 30, 30);
        }
        else {
            lv_killBotKillCap = libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 10, 30, 50, 50, 50);
        }
        lv_killBotKills = -1;
        TriggerEnable(libCOMU_gt_CT_GiftKillBotBanelingCredit, true);
        while (true) {
            if (((UnitIsValid(lv_killBot) == false) || (UnitIsAlive(lv_killBot) == false))) {
                libCOMI_gf_DestroyPingCoop(lv_killBotPing);
                return true;
            }

            if ((lv_killBotKills != libNtve_gf_UnitGetPropertyKills(lv_killBot, c_unitPropCurrent))) {
                lv_killBotKills = libNtve_gf_UnitGetPropertyKills(lv_killBot, c_unitPropCurrent);
                TextExpressionSetToken("Param/Expression/lib_COMU_DFEDE33D", "A", IntToText(lv_killBotKills));
                TextExpressionSetToken("Param/Expression/lib_COMU_DFEDE33D", "B", IntToText(lv_killBotKillCap));
                libNtve_gf_SetDialogItemText(lv_killBotLabel, TextExpressionAssemble("Param/Expression/lib_COMU_DFEDE33D"), PlayerGroupAll());
                if ((lv_killBotKills >= lv_killBotKillCap)) {
                    UnitKill(lv_killBot);
                }

            }

            Wait(0.5, c_timeGame);
        }
    }
    else if (autoC35EF233_val == 6) {
        libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_29AA3B26"));
        libCOMU_gv_cT_GiftShuttlesOvercharged += libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 5, 5, 5);
        auto5D0D4BD3_g = UnitGroup("ProtossFrigate", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5D0D4BD3_u = UnitGroupCount(auto5D0D4BD3_g, c_unitCountAll);
        for (;; auto5D0D4BD3_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto5D0D4BD3_g, auto5D0D4BD3_u);
            if (lv_indexUnit == null) { break; }
            if ((libCOMU_gv_cT_GiftShuttlesOvercharged == 0)) {
                break;
            }

            if ((UnitHasBehavior2(lv_indexUnit, "MutatorShuttleOvercharge") == false)) {
                UnitBehaviorAddPlayer(lv_indexUnit, "MutatorShuttleOvercharge", libCOMI_gf_MutatorPlayer(), 1);
                libCOMU_gv_cT_GiftShuttlesOvercharged -= 1;
            }

        }
    }
    else if (autoC35EF233_val == 7) {
        libCOMI_gf_CU_MutatorListShowNotification(StringExternal("Param/Value/lib_COMU_FC1D56A5"));
        TriggerEnable(libCOMU_gt_CT_GiftShrunkEffectOn, true);
        TriggerEnable(libCOMU_gt_CT_GiftShrunkEffectOff, true);
        autoA3089793_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA3089793_u = UnitGroupCount(autoA3089793_g, c_unitCountAll);
        for (;; autoA3089793_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoA3089793_g, autoA3089793_u);
            if (lv_indexUnit == null) { break; }
            UnitBehaviorAddPlayer(lv_indexUnit, "MutatorShrunk", libCOMI_gf_MutatorPlayer(), 1);
        }
    }
    else if (autoC35EF233_val == 8) {
    }
    else if (autoC35EF233_val == 9) {
    }
    else if (autoC35EF233_val == 10) {
    }
    else {
    }
    return true;
}

string libCOMU_gf_CT_GiftRandomMutator () {
    // Variable Declarations
    string lv_randomMutator;

    // Automatic Variable Declarations
    int autoD2FCB0C0_val;

    // Variable Initialization

    // Implementation
    while (true) {
        autoD2FCB0C0_val = RandomInt(1, 10);
        if (autoD2FCB0C0_val == 1) {
            lv_randomMutator = "Evolve";
        }
        else if (autoD2FCB0C0_val == 2) {
            lv_randomMutator = "JustDie";
        }
        else if (autoD2FCB0C0_val == 3) {
            lv_randomMutator = "HybridNuke";
        }
        else if (autoD2FCB0C0_val == 4) {
            lv_randomMutator = "AllEnemiesCloaked";
        }
        else if (autoD2FCB0C0_val == 5) {
            lv_randomMutator = "SpawnBroodlings";
        }
        else if (autoD2FCB0C0_val == 6) {
            lv_randomMutator = "InfestedTerranSpawner";
        }
        else if (autoD2FCB0C0_val == 7) {
            lv_randomMutator = "ConcussiveAttacks";
        }
        else if (autoD2FCB0C0_val == 8) {
            lv_randomMutator = "Nukes";
        }
        else if (autoD2FCB0C0_val == 9) {
            lv_randomMutator = "Blizzard";
        }
        else if (autoD2FCB0C0_val == 10) {
            lv_randomMutator = "DeathAOE";
        }
        else {
        }
        if ((libCOMI_gf_MutatorIsEnabled(lv_randomMutator) == false)) {
            return lv_randomMutator;
        }

    }
    return null;
}

void libCOMU_gf_CT_AmonHeroTychus_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    order lv_orderVariable;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitOrderIsValid(lp_aIUnit, Order(AbilityCommand("MutatorAmonTychusTossGrenade", 0))) == false) || (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonTychusTossGrenade", "Abil/MutatorAmonTychusTossGrenade") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonTychusTossGrenade") == true))) {
        return ;
    }

    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonTychusTossGrenade", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonTychusTossGrenadeDamage", "Amount", lp_owner);
    lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonTychusTossGrenadeDamage", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
    lv_score = 1;
    lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 3, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonTychusTossGrenade", 0), lv_target));
        return ;
    }

}

void libCOMU_gf_CT_AmonHeroRaynor_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_enemyUnitsNearby;
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_enemyUnitsNearby = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyNearbyFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    lv_enemyUnitsNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if (((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) <= 0) || (UnitOrderIsValid(lp_aIUnit, Order(AbilityCommand("MutatorAmonRaynorSnipe", 0))) == false) || (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonRaynorSnipe", "Abil/MutatorAmonRaynorSnipe") > 0.0) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonRaynorSnipe") == true))) {
        return ;
    }

    AISetFilterBits(lv_enemyNearbyFilter, libNtve_gv_visibleFilter);
    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonRaynorSnipe", "Range[" + IntToString(0) + "]", lp_owner);
    lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonRaynorSnipeDamage", "Amount", lp_owner);
    lv_score = 1;
    lv_abilityAoE = 0.5;
    lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 1, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
    if ((lv_target != null)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonRaynorSnipe", 0), lv_target));
        return ;
    }

}

void libCOMU_gf_CT_AmonHeroDehaka_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_canidates;
    aifilter lv_canidatesFilter;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_canidatesFilter = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGetCooldown(lp_aIUnit, "MutatorAmonDehakaHeal") <= 0.0) && ((UnitGetPropertyFixed(lp_aIUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_aIUnit, c_unitPropLife, c_unitPropCurrent)) > 150.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonDehakaHeal", 0)));
        return ;
    }

    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitGetCooldown(lp_aIUnit, "MutatorAmonDehakaMirrorImage") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonDehakaMirrorImage", 0), PointWithOffsetPolar(UnitGetPosition(lp_aIUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_aIUnit), UnitGroupCenterOfGroup(lv_enemiesNearby)))));
        return ;
    }

    if ((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonDehakaDrag") == false) && (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonDehakaDrag", "Drag") <= 0.0)) {
        lv_abilityRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonDehakaDrag", "Range[" + IntToString(0) + "]", lp_owner));
        AISetFilterAlliance(lv_canidatesFilter, c_playerGroupEnemy);
        AISetFilterBits(lv_canidatesFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
        AISetFilterRange(lv_canidatesFilter, lp_aIUnit, lv_abilityRange);
        AISetFilterLifeSortReference(lv_canidatesFilter, 100.0, 50);
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lp_nearByUnits);
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonDehakaDrag", 0), UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive))));
        return ;
    }

}

void libCOMU_gf_CT_AmonHeroDehakaBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCOMU_gf_CT_AmonHeroDehakaSpawn_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCOMU_gf_CT_AmonHeroDehakaSpawnBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCOMU_gf_CT_AmonHeroKarax_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonKhaydarinMonolith", "Abil/MutatorAmonKhaydarinMonolith") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonKhaydarinMonolith", 0), PointInterpolate(UnitGetPosition(lp_aIUnit), UnitGetPosition(UnitGroupRandomUnit(lp_nearByUnits, c_unitCountAlive)), -0.5)));
        return ;
    }

    if ((UnitGetCooldown(lp_aIUnit, "SpawnPhaseCannon") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonPhaseCannon", 0), PointInterpolate(UnitGetPosition(lp_aIUnit), UnitGetPosition(UnitGroupRandomUnit(lp_nearByUnits, c_unitCountAlive)), 0.5)));
        return ;
    }

}

void libCOMU_gf_CT_AmonHeroNova_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_canidates;
    aifilter lv_targetFilter2;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    fixed lv_autoAttackDamage;
    wave lv_wave;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    if (((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonNovaNuke") == true) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonNovaWeaponImprovedCanisterRifleSnipe") == true))) {
        return ;
    }

    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1) && (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonNovaNuke", "Abil/MutatorAmonNovaNuke") <= 0.0)) {
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonNovaNuke", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonNovaNukeDamage", "Amount", lp_owner);
        lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonNovaNukeDamage", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny));
        lv_score = 2;
        lv_target = AIBestTargetPoint(lv_enemiesNearby, 4, FixedToInt(lv_abilityDamage), lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            lv_wave = AIUnitGetWave(lp_aIUnit);
            UnitIssueOrder(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonNovaNuke", 0), lv_target), c_orderQueueReplace);
            Wait(0.5, c_timeAI);
            AISetUnitScriptControlled(lp_aIUnit, false);
            AIWaveAddUnit(lv_wave, lp_aIUnit);
            return ;
        }

    }

    if ((UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= 50.0)) {
        lv_abilityRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonNovaWeaponImprovedCanisterRifleSnipe", "Range[" + IntToString(0) + "]", c_playerAny));
        lv_abilityDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonNovaWeaponImprovedCanisterRifleSnipe", "Amount", c_playerAny));
        lv_autoAttackDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonNovaWeaponImprovedCanisterRifleCloaked", "Amount", lp_owner);
        AISetFilterLife(lv_targetFilter2, lv_autoAttackDamage, 524287.0);
        AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        AISetFilterRange(lv_targetFilter2, lp_aIUnit, lv_abilityRange);
        AISetFilterLifeSortReference(lv_targetFilter2, lv_abilityDamage, (lv_abilityDamage * 0.2));
        lv_canidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonNovaWeaponImprovedCanisterRifleSnipe", 0), UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive))));
        return ;
    }

}

void libCOMU_gf_CT_AmonHeroZagara_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_friendsNearby;
    aifilter lv_friendsNearbyFilter;
    unitgroup lv_canidates;
    unitgroup lv_harmlessCandidates;
    aifilter lv_targetFilter2;
    unitgroup lv_roachCandidates;
    aifilter lv_targetFilter3;
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;
    fixed lv_frenzyAoE;
    int lv_frenzyMinTargets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_friendsNearby = UnitGroupEmpty();
    lv_friendsNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_harmlessCandidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);
    lv_roachCandidates = UnitGroupEmpty();
    lv_targetFilter3 = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((PlayerGetCooldown(UnitGetOwner(lp_aIUnit), "MutatorAmonZagaraBanelingBarrage") <= 0.0)) {
        AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
        AISetFilterPlane(lv_targetFilter2, c_planeGround);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        AISetFilterRange(lv_targetFilter2, lp_aIUnit, 10.0);
        AISetFilterLifeSortReference(lv_targetFilter2, 160.0, 40);
        lv_canidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
        lv_harmlessCandidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
        if ((UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive)) != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraBanelingBarrage", 0), UnitGetPosition(UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive)))));
            return ;
        }
        else {
            if ((UnitGroupUnit(lv_harmlessCandidates, UnitGroupCount(lv_harmlessCandidates, c_unitCountAlive)) != null)) {
                libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraBanelingBarrage", 0), UnitGetPosition(UnitGroupUnit(lv_harmlessCandidates, UnitGroupCount(lv_harmlessCandidates, c_unitCountAlive)))));
                return ;
            }

        }
    }

    if ((PlayerGetCooldown(UnitGetOwner(lp_aIUnit), "MutatorAmonZagaraSpawnHunterKillers") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraSpawnHunterKillers", 0), PointWithOffsetPolar(UnitGetPosition(lp_aIUnit), 5.0, AngleBetweenPoints(UnitGetPosition(lp_aIUnit), UnitGroupCenterOfGroup(lv_enemiesNearby)))));
        return ;
    }

    AISetFilterPlane(lv_targetFilter3, c_planeGround);
    lv_roachCandidates = AIGetFilterGroup(lv_targetFilter3, lp_nearByUnits);
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonZagaraMassRoachDrop", "MutatorAmonZagaraInfestedPods") <= 0.0) && (UnitGroupCount(lv_roachCandidates, c_unitCountAlive) > 0)) {
        lv_abilityRange = 13.0;
        lv_abilityDamage = 500;
        lv_score = 3;
        lv_abilityAoE = 5.0;
        lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 2, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZagaraMassRoachDrop", 0), lv_target));
            return ;
        }

    }

    lv_frenzyMinTargets = 5;
    lv_frenzyAoE = 15.0;
    lv_friendsNearby = UnitGroupAlliance(lp_owner, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_aIUnit), lv_frenzyAoE), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv_frenzyMinTargets);
    if ((UnitGroupCount(lv_friendsNearby, c_unitCountAlive) >= lv_frenzyMinTargets) && (PlayerGetCooldown(UnitGetOwner(lp_aIUnit), "MutatorAmonZagaraMassFrenzy") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonZagaraMassFrenzy", 0)));
        return ;
    }

}

void libCOMU_gf_CT_AmonHeroZagaraBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCOMU_gf_CT_AmonHeroArtanis_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    int init_i;

    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unit lv_unitException;
    unit lv_victim;
    unitgroup lv_canidates;
    unitgroup[3] lv_potentialTargets;
    aifilter lv_targetFilter2;
    int lv_targetIndex;
    point lv_target;
    fixed lv_abilityRange;
    int lv_abilityDamage;
    fixed lv_abilityAoE;
    int lv_score;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_potentialTargets[init_i] = UnitGroupEmpty();
    }
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonArtanisAstralWind", "Abil/MutatorAmonArtanisAstralWind") <= 0.0) && ((UnitGetPropertyFixed(lp_aIUnit, c_unitPropShieldsMax, c_unitPropCurrent) - UnitGetPropertyFixed(lp_aIUnit, c_unitPropShields, c_unitPropCurrent)) > 150.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonArtanisAstralWind", 0)));
        return ;
    }

    if ((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonArtanisLightningDash", "Abil/MutatorAmonArtanisLightningDash") <= 0.0)) {
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonArtanisLightningDash", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = StringToInt(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonArtanisLightningDashDamage", "Amount", lp_owner));
        lv_abilityAoE = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonArtanisLightningDashSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_owner));
        lv_score = 2;
        lv_target = AIBestTargetPoint(UnitGroupFilterAlliance(lp_nearByUnits, lp_owner, c_unitAllianceEnemy, 0), 3, lv_abilityDamage, lv_score, lv_abilityAoE, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonArtanisLightningDash", 0), lv_target));
            return ;
        }

    }

}

void libCOMU_gf_CT_AmonHeroZeratul_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    aifilter lv_enemyNearbyFilter;
    unitgroup lv_canidates;
    aifilter lv_canidatesFilter;
    fixed lv_slashDamage;
    fixed lv_blinkDistance;
    unit lv_debugUnit;
    int lv_debugIndex;
    unitgroup lv_debugGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    lv_canidatesFilter = AIFilter(lp_owner);
    lv_debugGroup = UnitGroupEmpty();

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyNearbyFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    lv_enemyUnitsNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonPrologueVoidArmor", "Abil/MutatorAmonPrologueVoidArmor") <= 0.0)) {
        libNtve_gf_AICast(lp_aIUnit, Order(AbilityCommand("MutatorAmonPrologueVoidArmor", 0)));
        return ;
    }

    lv_slashDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonShadowBladeDamage", "Amount", lp_owner));
    lv_blinkDistance = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonZeratulBlink", "Range", lp_owner));
    AISetFilterPlane(lv_canidatesFilter, c_planeGround);
    AISetFilterLifeSortReference(lv_canidatesFilter, lv_slashDamage, (lv_slashDamage * 0.2));
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonZeratulBlink", "Abil/MutatorAmonZeratulBlink") <= 0.0)) {
        AISetFilterRange(lv_canidatesFilter, lp_aIUnit, lv_blinkDistance);
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lv_enemyUnitsNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonZeratulBlink", 0), UnitGetPosition(UnitGroupUnit(lv_canidates, UnitGroupCount(lv_canidates, c_unitCountAlive)))));
            return ;
        }

    }

    if ((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonShadowBlade") == false) && (UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonShadowBlade", "Abil/MutatorAmonShadowBlade") <= 0.0)) {
        AISetFilterRange(lv_canidatesFilter, lp_aIUnit, 1.0);
        lv_canidates = AIGetFilterGroup(lv_canidatesFilter, lv_enemyUnitsNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonShadowBlade", 0), UnitGroupUnit(lv_canidates, 1)));
            return ;
        }

    }

}

void libCOMU_gf_CT_AmonHeroKerrigan_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    int init_i;

    // Variable Declarations
    unitgroup lv_enemiesNearby;
    aifilter lv_enemyNearbyFilter;
    unit lv_unitException;
    unit lv_victim;
    unitgroup lv_canidates;
    unitgroup[3] lv_potentialTargets;
    aifilter lv_primalSlashTargetFilter;
    aifilter lv_failSafeTargetFilter;
    int lv_targetIndex;
    point lv_target;
    fixed lv_abilityRange;
    fixed lv_abilityRadius;
    int lv_abilityDamage;
    int lv_score;
    point lv_apocTargetLocation;

    // Automatic Variable Declarations
    unitgroup auto406256FF_g;
    int auto406256FF_u;

    // Variable Initialization
    lv_enemiesNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_canidates = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_potentialTargets[init_i] = UnitGroupEmpty();
    }
    lv_primalSlashTargetFilter = AIFilter(lp_owner);
    lv_failSafeTargetFilter = AIFilter(lp_owner);

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    lv_enemiesNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemiesNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    if (((UnitOrderHasAbil(lp_aIUnit, "MutatorAmonKerriganApocalypse") == true) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonKerriganPrimalSlash") == true) || (UnitHasBehavior2(lp_aIUnit, "MutatorAmonKerriganPsiStrikeWalkSpeed") == true) || (UnitOrderHasAbil(lp_aIUnit, "MutatorAmonKerriganPsiStrikeWalk") == true) || (UnitMoverExists(lp_aIUnit, "PrimalSlashUpgradedMover") == true))) {
        return ;
    }

    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 0, 0) == 1) && (UnitGetCooldown(lp_aIUnit, "Apocalypse") <= 0.0)) {
        lv_abilityRadius = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "Apocalypse", "AreaArray[" + IntToString(0) + "].Radius", lp_owner);
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonKerriganApocalypse", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "ApocalypseDamage", "Amount", lp_owner);
        lv_abilityRadius = MinI(FixedToInt(lv_abilityRadius), 4);
        lv_score = 1;
        lv_target = AIBestTargetPoint(lv_enemiesNearby, 4, lv_abilityDamage, lv_score, lv_abilityRadius, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeStructure);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonKerriganApocalypse", 0), lv_target));
            return ;
        }

    }

    auto406256FF_g = lv_enemiesNearby;
    auto406256FF_u = UnitGroupCount(auto406256FF_g, c_unitCountAll);
    for (;; auto406256FF_u -= 1) {
        lv_victim = UnitGroupUnitFromEnd(auto406256FF_g, auto406256FF_u);
        if (lv_victim == null) { break; }
        if ((UnitWeaponCount(lv_victim) <= 0) && (UnitFilterMatch(lv_victim, lp_owner, UnitFilter((1 << c_targetFilterStructure), 0, 0, 0)) == true)) {
            UnitGroupRemove(lv_enemiesNearby, lv_victim);
        }

    }
    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonKerriganPrimalSlash", "Abil/MutatorAmonKerriganPrimalSlash") <= 0.0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonKerriganPrimalSlash", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", c_playerAny)))) {
        lv_abilityRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MutatorAmonKerriganPrimalSlashPointSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_owner));
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonKerriganPrimalSlash", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonKerriganPrimalSlash", "Amount", lp_owner);
        AISetFilterLife(lv_primalSlashTargetFilter, lv_abilityDamage, 524287.0);
        AISetFilterPlane(lv_primalSlashTargetFilter, c_planeGround);
        AISetFilterRange(lv_primalSlashTargetFilter, lp_aIUnit, lv_abilityRadius);
        lv_canidates = AIGetFilterGroup(lv_primalSlashTargetFilter, lv_enemiesNearby);
        if ((UnitGroupCount(lv_canidates, c_unitCountAlive) > 0)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("MutatorAmonKerriganPrimalSlash", 0), UnitGroupUnit(lv_canidates, 1)));
            return ;
        }

    }

    if ((UnitAbilityGetCooldown(lp_aIUnit, "MutatorAmonKerriganPsiStrikeWalk", "Abil/MutatorAmonKerriganPsiStrikeWalk") <= 0.0) && (UnitGetPropertyFixed(lp_aIUnit, c_unitPropEnergy, c_unitPropCurrent) >= StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MutatorAmonKerriganPsiStrikeWalk", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", c_playerAny)))) {
        lv_abilityRadius = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonKerriganPsiStrikeTargetSearch", "AreaArray[" + IntToString(0) + "].Radius", lp_owner);
        lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "MutatorAmonKerriganPrimalSlash", "Range[" + IntToString(0) + "]", lp_owner);
        lv_abilityDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "MutatorAmonKerriganPsiStrikeDamage", "Amount", lp_owner);
        lv_score = 2;
        lv_canidates = UnitGroupFilter(null, c_playerAny, lv_enemiesNearby, UnitFilter(0, 0, (1 << c_targetFilterAir) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_target = AIBestTargetPoint(lv_canidates, 3, lv_abilityDamage, lv_score, lv_abilityRadius, UnitGetPosition(lp_aIUnit), lv_abilityRange, c_unitAttributeNone);
        if ((lv_target != null)) {
            libNtve_gf_AICast(lp_aIUnit, OrderTargetingPoint(AbilityCommand("MutatorAmonKerriganPsiStrikeWalk", 0), lv_target));
            return ;
        }

    }

}

void libCOMU_gf_CT_AmonHeroKerriganBurrowed_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Automatic Variable Declarations
}

void libCOMU_gf_CT_AmonHero_AddToWave (int lp_player, unitgroup lp_units, point lp_gatherPoint, int lp_targetType) {
    // Variable Declarations
    int lv_heroCount;
    int lv_numHeroesToSpawn;
    bool lv_playSweetener;

    // Automatic Variable Declarations
    int autoBA3182CD_ae;
    const int autoBA3182CD_ai = 1;

    // Variable Initialization
    lv_playSweetener = true;

    // Implementation
    if ((lp_targetType == libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleAirRamp)) {
        return ;
    }
    else if ((TimerGetRemaining(libCOMU_gv_cT_AmonHeroLastSpawnTimer) > 0.0) && (DistanceBetweenPoints(lp_gatherPoint, libCOMU_gv_cT_AmonHeroLastSpawnPoint) < 5.0)) {
        return ;
    }
    TimerStart(libCOMU_gv_cT_AmonHeroLastSpawnTimer, 10.0, false, c_timeGame);
    libCOMU_gv_cT_AmonHeroLastSpawnPoint = lp_gatherPoint;
    lv_numHeroesToSpawn = MinI(libCOMU_gv_cT_AmonHeroPool, libCOMU_gf_CT_AmonHero_HeroMaxPerWave(lp_targetType));
    autoBA3182CD_ae = lv_numHeroesToSpawn;
    lv_heroCount = 1;
    for ( ; ( (autoBA3182CD_ai >= 0 && lv_heroCount <= autoBA3182CD_ae) || (autoBA3182CD_ai < 0 && lv_heroCount >= autoBA3182CD_ae) ) ; lv_heroCount += autoBA3182CD_ai ) {
        libCOMU_gv_cT_AmonHeroPool -= 1;
        libCOMU_gv_cT_AmonHeroNumber += 1;
        if ((libCOMU_gv_cT_AmonHeroNumber < 10)) {
            UnitGroupAdd(lp_units, libCOMU_gf_CT_AmonHero_SpawnHero(lp_player, libCOMU_gv_cT_AmonHeroNumber, lp_gatherPoint, lv_playSweetener));
        }
        else if ((ModI(libCOMU_gv_cT_AmonHeroNumber, 3) == 1)) {
            UnitGroupAdd(lp_units, libCOMU_gf_CT_AmonHero_SpawnHero(lp_player, RandomInt(1, 3), lp_gatherPoint, lv_playSweetener));
        }
        else if ((ModI(libCOMU_gv_cT_AmonHeroNumber, 3) == 2)) {
            UnitGroupAdd(lp_units, libCOMU_gf_CT_AmonHero_SpawnHero(lp_player, RandomInt(4, 6), lp_gatherPoint, lv_playSweetener));
        }
        else if (true) {
            UnitGroupAdd(lp_units, libCOMU_gf_CT_AmonHero_SpawnHero(lp_player, RandomInt(7, 9), lp_gatherPoint, lv_playSweetener));
        }
        lv_playSweetener = false;
    }
}

unit libCOMU_gf_CT_AmonHero_SpawnHero (int lp_player, int lp_heroIndex, point lp_spawnPoint, bool lp_playSweeteners) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_cT_AmonHeroUnitTypeArray[lp_heroIndex], 0, lp_player, lp_spawnPoint);
    SoundPlayAtPointForPlayer(libCOMU_gv_cT_AmonHeroSoundArray[lp_heroIndex], c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
    if ((lp_playSweeteners == true)) {
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lp_spawnPoint, 0.0, 100.0, 0.0);
    }

    AISetUnitScriptControlled(UnitLastCreated(), false);
    return UnitLastCreated();
}

void libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime (fixed lp_missionTimeInMinutes, int lp_poolGranted) {
    // Automatic Variable Declarations
    // Implementation
    while (!((GameGetMissionTime() >= (lp_missionTimeInMinutes * 60.0 - 5)))) {
        Wait(1.0, c_timeGame);
    }
    libCOMU_gv_cT_AmonHeroPool += lp_poolGranted;
}

int libCOMU_gf_CT_AmonHero_HeroMaxPerWave (int lp_targetType) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_CC_CurrentMap() == "AC_ShakurasTemple") && (lp_targetType != libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleMainRamp)) {
        return 1;
    }
    else if ((libCOMI_gf_CC_CurrentMap() == "AC_BelshirEscort") && (lp_targetType == libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective)) {
        return 1;
    }
    return 6;
}

void libCOMU_gf_CT_ApplyHardenedWill (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("HardenedWill") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorHardenedWillSelfCycle", lp_createdUnit, 1);
}

void libCOMU_gf_MM_ApplyHardenedWill (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("HardenedWill") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorHardenedWillSelfCycle", lp_createdUnit, 1);
}

void libCOMU_gf_CT_ApplyHybridDeathNuke (unit lp_killedUnit) {
    // Variable Declarations
    point lv_unitLocation;
    string lv_killedUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("HybridNuke") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false))) {
        return ;
    }

    if (((UnitGetType(lp_killedUnit) == "Hybrid") || (UnitGetType(lp_killedUnit) == "Maar") || (UnitGetType(lp_killedUnit) == "HybridBehemoth") || (UnitGetType(lp_killedUnit) == "HybridDestroyer") || (UnitGetType(lp_killedUnit) == "HybridDominatorVoid") || (UnitGetType(lp_killedUnit) == "HybridGeneral") || (UnitGetType(lp_killedUnit) == "HybridNemesis") || (UnitGetType(lp_killedUnit) == "HybridReaver") || (UnitGetType(lp_killedUnit) == "HybridBehemothCoopBoss") || (UnitGetType(lp_killedUnit) == "HybridDominatorCoopBoss")) && (UnitHasBehavior2(lp_killedUnit, "HybridPnPMirrorImage") == false)) {
        lv_unitLocation = UnitGetPosition(lp_killedUnit);
        lv_killedUnitType = UnitGetType(lp_killedUnit);
        if (((UnitGetType(lp_killedUnit) == "HybridNemesis") || (UnitGetType(lp_killedUnit) == "HybridDominatorCoopBoss"))) {
            Wait(2.0, c_timeReal);
        }
        else {
            Wait(1.0, c_timeReal);
        }
        if ((lv_killedUnitType == "HybridDestroyer")) {
            PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "HybridNukeDamageSmall", lv_unitLocation);
        }
        else {
            PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "HybridNukeDamage", lv_unitLocation);
        }
    }

}

void libCOMU_gf_MM_ApplyIcollectIchange (unit lp_pKillingUnit, unit lp_pKilledUnit) {
    // Automatic Variable Declarations
    const int auto63C0070C_ae = 9;
    int auto63C0070C_var;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("ICollectIChange") == false) || (lp_pKillingUnit == null) || (UnitGetOwner(lp_pKillingUnit) == c_playerAny) || (UnitGetOwner(lp_pKilledUnit) == c_playerAny) || (UnitFilterMatch(lp_pKilledUnit, UnitGetOwner(lp_pKillingUnit), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) || (UnitFilterMatch(lp_pKillingUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) || ((UnitTypeGetCost(UnitGetType(lp_pKilledUnit), c_unitCostSumMineralsVespene) < UnitTypeGetCost(UnitGetType(lp_pKillingUnit), c_unitCostSumMineralsVespene)) && (UnitTypeTestAttribute(UnitGetType(lp_pKilledUnit), c_unitAttributeMapBoss) == false) && (UnitTypeTestAttribute(UnitGetType(lp_pKilledUnit), c_unitAttributeHeroic) == false)))) {
        return ;
    }

    UnitCreate(1, UnitGetType(lp_pKilledUnit), 0, UnitGetOwner(lp_pKillingUnit), UnitGetPosition(lp_pKillingUnit), UnitGetFacing(lp_pKillingUnit));
    auto63C0070C_var = 0;
    for ( ; auto63C0070C_var <= auto63C0070C_ae; auto63C0070C_var += 1 ) {
        if ((UnitGroupHasUnit(UnitControlGroup(UnitGetOwner(lp_pKillingUnit), auto63C0070C_var), lp_pKillingUnit) == true)) {
            UnitControlGroupAddUnit(UnitGetOwner(lp_pKillingUnit), auto63C0070C_var, UnitLastCreated());
        }

    }
    if ((UnitIsSelected(lp_pKillingUnit, UnitGetOwner(lp_pKillingUnit)) == true)) {
        UnitSelect(UnitLastCreated(), UnitGetOwner(lp_pKillingUnit), true);
    }

    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, UnitGetPropertyFixed(lp_pKillingUnit, c_unitPropKills, c_unitPropCurrent));
    UnitIssueOrder(UnitLastCreated(), UnitOrder(lp_pKillingUnit, 0), c_orderQueueReplace);
    UnitRemove(lp_pKillingUnit);
}

void libCOMU_gf_CT_ApplyInspiration (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Inspiration") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorInspirationSearch", lp_createdUnit, 1);
}

void libCOMU_gf_MM_ApplyInspiration (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Inspiration") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorInspirationSearch", lp_createdUnit, 1);
}

void libCOMU_gf_CT_ApplyInsubordination (unit lp_orderedUnit, order lp_order) {
    // Variable Declarations
    point lv_orderLocation;
    int lv_microPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_microPlayer = UnitGetOwner(lp_orderedUnit);
    if (((libCOMI_gf_MutatorIsEnabled("Insubordination") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), lv_microPlayer) == false) || (OrderGetFlag(lp_order, 8) == false) || (OrderGetTargetPosition(lp_order) == null) || (OrderGetTargetType(lp_order) == c_orderTargetNone) || (OrderGetTargetType(lp_order) == c_orderTargetNone))) {
        return ;
    }

    lv_orderLocation = OrderGetTargetPosition(lp_order);
    if ((RandomInt(0, 10) > libCOMI_gf_MinimumDifficultyValueCoopInteger(8, 6, 4, 2, 0, 0))) {
        UnitIssueOrder(lp_orderedUnit, OrderTargetingPoint(OrderGetAbilityCommand(lp_order), PointWithOffsetPolar(lv_orderLocation, RandomFixed(1.0, 15.0), RandomFixed(0.0, 360.0))), c_orderQueueReplace);
    }

}

void libCOMU_gf_CT_ApplyJustDie (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("JustDie") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_createdUnit)) == true) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), 0)) == false))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorMasterController", lp_createdUnit, 1);
}

trigger auto_libCOMU_gf_CT_KillBotsUpdate_Trigger = null;
unit auto_libCOMU_gf_CT_KillBotsUpdate_lp_killBot;
int auto_libCOMU_gf_CT_KillBotsUpdate_lp_killBotLevel;

void libCOMU_gf_CT_KillBotsUpdate (unit lp_killBot, int lp_killBotLevel) {
    auto_libCOMU_gf_CT_KillBotsUpdate_lp_killBot = lp_killBot;
    auto_libCOMU_gf_CT_KillBotsUpdate_lp_killBotLevel = lp_killBotLevel;

    if (auto_libCOMU_gf_CT_KillBotsUpdate_Trigger == null) {
        auto_libCOMU_gf_CT_KillBotsUpdate_Trigger = TriggerCreate("auto_libCOMU_gf_CT_KillBotsUpdate_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_KillBotsUpdate_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_KillBotsUpdate_TriggerFunc (bool testConds, bool runActions) {
    unit lp_killBot = auto_libCOMU_gf_CT_KillBotsUpdate_lp_killBot;
    int lp_killBotLevel = auto_libCOMU_gf_CT_KillBotsUpdate_lp_killBotLevel;

    // Variable Declarations
    int lv_killBotKillCap;
    int lv_killBotKills;
    int lv_killBotLabel;
    int lv_storedPing;
    unit lv_wakeupUnitIndex;

    // Automatic Variable Declarations
    int auto382E8ACB_val;
    unitgroup autoEA0ECF36_g;
    int autoEA0ECF36_u;

    // Variable Initialization
    lv_killBotLabel = c_invalidDialogControlId;
    lv_storedPing = c_invalidPingId;

    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "InfoLabel", lp_killBot);
    lv_killBotLabel = DialogControlLastCreated();
    auto382E8ACB_val = lp_killBotLevel;
    if (auto382E8ACB_val == 1) {
        lv_killBotKillCap = 5;
    }
    else if (auto382E8ACB_val == 2) {
        lv_killBotKillCap = 10;
    }
    else if (auto382E8ACB_val == 3) {
        lv_killBotKillCap = 15;
    }
    else {
    }
    lv_killBotKills = -1;
    while (true) {
        if (((UnitIsValid(lp_killBot) == false) || (UnitIsAlive(lp_killBot) == false))) {
            lv_storedPing = libARRA_gf_PingStoredForUnit(lp_killBot, 1);
            if ((lv_storedPing != c_invalidPingId)) {
                libCOMI_gf_DestroyPingCoop(lv_storedPing);
            }

            return true;
        }

        if ((lv_killBotKills != libNtve_gf_UnitGetPropertyKills(lp_killBot, c_unitPropCurrent))) {
            lv_killBotKills = libNtve_gf_UnitGetPropertyKills(lp_killBot, c_unitPropCurrent);
            TextExpressionSetToken("Param/Expression/lib_COMU_F910EDD9", "A", IntToText(lv_killBotKills));
            TextExpressionSetToken("Param/Expression/lib_COMU_F910EDD9", "B", IntToText(lv_killBotKillCap));
            libNtve_gf_SetDialogItemText(lv_killBotLabel, TextExpressionAssemble("Param/Expression/lib_COMU_F910EDD9"), PlayerGroupAll());
            if ((lv_killBotKills >= lv_killBotKillCap)) {
                UnitKill(lp_killBot);
            }

        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lp_killBot, libCOMI_gf_AffectedPlayer(1)) == false) && (libNtve_gf_UnitIsVisibleToPlayer(lp_killBot, libCOMI_gf_AffectedPlayer(2)) == false) && (libNtve_gf_UnitIsVisibleToPlayer(lp_killBot, libCOMI_gf_AffectedPlayer(3)) == false) && (libNtve_gf_UnitIsVisibleToPlayer(lp_killBot, libCOMI_gf_AffectedPlayer(4)) == false) && (libNtve_gf_UnitIsVisibleToPlayer(lp_killBot, libCOMI_gf_AffectedPlayer(5)) == false)) {
            autoEA0ECF36_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lp_killBot), (UnitGetPropertyFixed(lp_killBot, c_unitPropRadius, c_unitPropNormal) + 1.0)), UnitFilter(0, 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoEA0ECF36_u = UnitGroupCount(autoEA0ECF36_g, c_unitCountAll);
            for (;; autoEA0ECF36_u -= 1) {
                lv_wakeupUnitIndex = UnitGroupUnitFromEnd(autoEA0ECF36_g, autoEA0ECF36_u);
                if (lv_wakeupUnitIndex == null) { break; }
                libCOMI_gf_SleepWakeUpUnitCoop(lv_wakeupUnitIndex, false, libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions);
            }
        }

        Wait(0.5, c_timeGame);
    }
    return true;
}

void libCOMU_gf_CT_KillBot_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_enemyUnitsNearby;
    aifilter lv_enemyNearbyFilter;
    int lv_targetSelectionAttempts;
    int lv_targetSelectionIndex;
    unit lv_targetUnit;
    unit lv_possibleTargetUnit;

    // Automatic Variable Declarations
    int auto694A0AEB_ae;
    const int auto694A0AEB_ai = 1;

    // Variable Initialization
    lv_enemyUnitsNearby = UnitGroupEmpty();
    lv_enemyNearbyFilter = AIFilter(lp_owner);
    lv_targetSelectionAttempts = 100;

    // Implementation
    AISetFilterAlliance(lv_enemyNearbyFilter, c_playerGroupEnemy);
    AISetFilterBits(lv_enemyNearbyFilter, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))));
    AISetFilterRange(lv_enemyNearbyFilter, lp_aIUnit, (UnitGetPropertyFixed(lp_aIUnit, c_unitPropRadius, c_unitPropNormal) + 1.0));
    lv_enemyUnitsNearby = AIGetFilterGroup(lv_enemyNearbyFilter, lp_nearByUnits);
    if ((UnitGroupCount(lv_enemyUnitsNearby, c_unitCountAlive) <= 0)) {
        return ;
    }

    auto694A0AEB_ae = lv_targetSelectionAttempts;
    lv_targetSelectionIndex = 1;
    for ( ; ( (auto694A0AEB_ai >= 0 && lv_targetSelectionIndex <= auto694A0AEB_ae) || (auto694A0AEB_ai < 0 && lv_targetSelectionIndex >= auto694A0AEB_ae) ) ; lv_targetSelectionIndex += auto694A0AEB_ai ) {
        lv_possibleTargetUnit = UnitGroupRandomUnit(lv_enemyUnitsNearby, c_unitCountAlive);
        if ((UnitCanAttackTarget(lp_aIUnit, lv_possibleTargetUnit) == true)) {
            lv_targetUnit = lv_possibleTargetUnit;
            break;
        }
        else {
            UnitGroupRemove(lv_enemyUnitsNearby, lv_possibleTargetUnit);
        }
    }
    if ((lv_targetUnit == null)) {
        return ;
    }

    libNtve_gf_AICast(lp_aIUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit));
}

void libCOMU_gf_CT_ApplyKillKarma (unit lp_killer, unit lp_killedUnit) {
    // Variable Declarations
    int lv_totalKills;
    int lv_behaviorIndex;
    unit lv_actualKiller;
    string lv_creditor;
    int lv_creditorEffectUnit;

    // Automatic Variable Declarations
    int auto85BE7A0C_ae;
    const int auto85BE7A0C_ai = 1;
    string auto09043CCB_val;

    // Variable Initialization
    lv_creditor = "";
    lv_creditorEffectUnit = c_effectUnitCaster;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("KillKarma") == false) || (lp_killer == null) || (UnitIsValid(lp_killer) == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_killer)) == false))) {
        return ;
    }

    lv_actualKiller = lp_killer;
    if ((UnitGetMagazine(lp_killer) != null)) {
        lv_actualKiller = UnitGetMagazine(lp_killer);
    }
    else {
        auto85BE7A0C_ae = UnitBehaviorCountAll(lp_killer);
        lv_behaviorIndex = 1;
        for ( ; ( (auto85BE7A0C_ai >= 0 && lv_behaviorIndex <= auto85BE7A0C_ae) || (auto85BE7A0C_ai < 0 && lv_behaviorIndex >= auto85BE7A0C_ae) ) ; lv_behaviorIndex += auto85BE7A0C_ai ) {
            if (((UnitBehaviorGet(lp_killer, lv_behaviorIndex) == "") || (CatalogEntryScope(c_gameCatalogBehavior, UnitBehaviorGet(lp_killer, lv_behaviorIndex)) != "CBehaviorBuff"))) {
                continue;
            }

            lv_creditor = CatalogFieldValueGet(c_gameCatalogBehavior, UnitBehaviorGet(lp_killer, lv_behaviorIndex), "KillCredit.Value", c_playerAny);
            if ((lv_creditor != "Unknown")) {
                auto09043CCB_val = lv_creditor;
                if (auto09043CCB_val == "Caster") {
                    lv_creditorEffectUnit = c_effectUnitCaster;
                }
                else if (auto09043CCB_val == "Origin") {
                    lv_creditorEffectUnit = c_effectUnitOrigin;
                }
                else if (auto09043CCB_val == "Outer") {
                    lv_creditorEffectUnit = c_effectUnitOuter;
                }
                else if (auto09043CCB_val == "Source") {
                    lv_creditorEffectUnit = c_effectUnitSource;
                }
                else if (auto09043CCB_val == "Target") {
                    lv_creditorEffectUnit = c_effectUnitTarget;
                }
                else {
                }
                lv_actualKiller = UnitBehaviorEffectUnit(lp_killer, UnitBehaviorGet(lp_killer, lv_behaviorIndex), lv_creditorEffectUnit, 0);
                break;
            }

        }
    }
    if ((lv_actualKiller == null)) {
        return ;
    }

    lv_totalKills = libNtve_gf_UnitGetPropertyKills(lv_actualKiller, c_unitPropCurrent);
    UnitBehaviorAdd(lv_actualKiller, "MutatorKarmaIncreasedDamageVet", lv_actualKiller, 1);
    UnitXPSetCurrentLevel(lv_actualKiller, "MutatorKarmaIncreasedDamageVet", lv_totalKills);
}

void libCOMU_gf_CT_ApplyLifeLeech (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Variable Declarations
    fixed lv_leechPercentage;
    fixed lv_healAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("LifeLeech") == false) || (UnitIsAlive(lp_damagingUnit) == false) || (PlayerGroupHasPlayer(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_Ally, 1), UnitGetOwner(lp_damagingUnit)) == true) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false))) {
        return ;
    }
    else {
        lv_leechPercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.5, 0.75, 1.0, 1.0, 1.0);
        lv_healAmount = (lp_damageAmount * lv_leechPercentage);
        if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            UnitSetPropertyFixed(lp_damagingUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
        }
        else {
            if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
                UnitSetPropertyFixed(lp_damagingUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShields, c_unitPropCurrent) + lv_healAmount));
            }

        }
    }
}

void libCOMU_gf_MM_ApplyLifeLeech (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Variable Declarations
    fixed lv_leechPercentage;
    fixed lv_healAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("LifeLeech") == false) || (UnitIsAlive(lp_damagingUnit) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false))) {
        return ;
    }
    else {
        lv_leechPercentage = libCOMI_gf_MinimumDifficultyValueCoopReal(0.25, 0.5, 0.75, 1.0, 1.0, 1.0);
        lv_healAmount = (lp_damageAmount * lv_leechPercentage);
        if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0)) {
            UnitSetPropertyFixed(lp_damagingUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
        }
        else {
            if ((UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsPercent, c_unitPropCurrent) < 100.0) && (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
                UnitSetPropertyFixed(lp_damagingUnit, c_unitPropShields, (UnitGetPropertyFixed(lp_damagingUnit, c_unitPropShields, c_unitPropCurrent) + lv_healAmount));
            }

        }
    }
}

void libCOMU_gf_MM_ApplyLevelPlayingField (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("LevelPlayingField") == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (lp_pUnit == null) || (UnitHasBehavior2(lp_pUnit, "LevelPlayingField") == true) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false))) {
        return ;
    }
    else {
        UnitBehaviorAddPlayer(lp_pUnit, "LevelPlayingField", libCOMI_gf_MutatorPlayer(), 1);
    }
}

void libCOMU_gf_MM_ApplyMatryoshka (unit lp_pUnit, int lp_pKillingPlayer) {
    // Variable Declarations
    fixed lv_vScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Matryoshka") == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lp_pUnit), libCOMI_gf_AffectedPlayer(0), libNtve_ge_PlayerRelation_Enemy) == false) || ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) && (UnitGroupHasUnit(libCOMU_gv_mM_AmonSummonedHeroes, lp_pUnit) == false)) || (UnitGetType(lp_pUnit) == "TerranDropPod") || (UnitGetType(lp_pUnit) == "ZergDropPodLarge") || (UnitGetType(lp_pUnit) == "ZergDropPod") || (UnitGetType(lp_pUnit) == "KerriganInfestBroodling") || (UnitGetType(lp_pUnit) == "StukovInfestBroodling") || (UnitGetType(lp_pUnit) == "Broodling") || (UnitGetType(lp_pUnit) == "InfestedCivilian") || ((120.0 * UnitGetCustomValue(lp_pUnit, libCOMI_gv_mM_Matryoshka_CustomValue)) > UnitTypeGetProperty(UnitGetType(lp_pUnit), c_unitPropVitalityMax)) || (UnitGetCustomValue(lp_pUnit, libCOMI_gv_mM_Matryoshka_CustomValue) == 3.0) || ((lp_pKillingPlayer != 1) && (lp_pKillingPlayer != 2)))) {
        return ;
    }

    UnitCreate(1, UnitGetType(lp_pUnit), 0, UnitGetOwner(lp_pUnit), UnitGetPosition(lp_pUnit), UnitGetFacing(lp_pUnit));
    UnitSetCustomValue(UnitLastCreated(), libCOMI_gv_mM_Matryoshka_CustomValue, (UnitGetCustomValue(lp_pUnit, libCOMI_gv_mM_Matryoshka_CustomValue) + 1.0));
    UnitBehaviorAddPlayer(UnitLastCreated(), "Matryoshka", libCOMI_gf_MutatorPlayer(), FixedToInt(UnitGetCustomValue(UnitLastCreated(), libCOMI_gv_mM_Matryoshka_CustomValue)));
    UnitBehaviorAddPlayer(UnitLastCreated(), "HybridPnPMirrorImage", libCOMI_gf_MutatorPlayer(), 1);
    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "GlazeShadow"), "Destroy");
    ActorSendTo(libNtve_gf_MainActorofUnit(null), "GlazeShadow", "Destroy");
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropLifeMax) * Pow(0.5, UnitGetCustomValue(UnitLastCreated(), libCOMI_gv_mM_Matryoshka_CustomValue))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, (UnitTypeGetProperty(UnitGetType(UnitLastCreated()), c_unitPropShieldsMax) * Pow(0.5, UnitGetCustomValue(UnitLastCreated(), libCOMI_gv_mM_Matryoshka_CustomValue))));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, UnitGetPropertyFixed(lp_pUnit, c_unitPropEnergy, c_unitPropCurrent));
    UnitGroupAdd(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreated());
    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
    libCOMI_gf_MM_UnitScaleController(UnitLastCreated(), Pow(0.666, UnitGetCustomValue(UnitLastCreated(), libCOMI_gv_mM_Matryoshka_CustomValue)));
    libNtve_gf_CreateActorAtPoint("MatryoshkaRessurect", UnitGetPosition(UnitLastCreated()));
    if ((UnitGetType(lp_pUnit) == "MutatorVoidReanimator")) {
        UnitGroupAdd(libCOMU_gv_cT_Reanimators, UnitLastCreated());
    }

    AISetUnitScriptControlled(UnitLastCreated(), false);
    AISetUnitSuicide(UnitLastCreated(), true);
}

void libCOMU_gf_CT_ApplyMissileBirth (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    string autoAC4CEDBB_val;

    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCOMI_gf_MutatorIsEnabled("MissileBarrage") == false) || (UnitTestState(lp_createdUnit, c_unitStateUsingSupply) == false))) {
        return ;
    }

    autoAC4CEDBB_val = lv_createdUnitType;
    if (autoAC4CEDBB_val == "MutatorMissileStandard") {
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingMissileStandard", UnitGetPosition(lp_createdUnit), ColorWithAlpha(100.00, 52.55, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.2);
    }
    else if (autoAC4CEDBB_val == "MutatorMissileSplitter") {
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingMissileStandard", UnitGetPosition(lp_createdUnit), ColorWithAlpha(100.00, 52.55, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.2);
    }
    else if (autoAC4CEDBB_val == "MutatorMissileNuke") {
        libCOMI_gf_CreatePingCoop(PlayerGroupAll(), "PingNuke", UnitGetPosition(lp_createdUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
        PingSetScale(PingLastCreated(), 0.5);
    }
    else if (autoAC4CEDBB_val == "MutatorMissilePointDefense") {
        UnitSetState(lp_createdUnit, c_unitStateTooltipable, true);
        return ;
    }
    else {
        return ;
    }
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libARRA_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
    libCOMI_gf_CT_RegisterSpawnedUnit(lp_createdUnit);
}

void libCOMU_gf_CT_ApplyMissileDeath (unit lp_deadUnit) {
    // Variable Declarations
    string lv_deadUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_deadUnitType = UnitGetType(lp_deadUnit);
    if (((libCOMU_gv_cT_MissileCleanupEnabled == false) || ((lv_deadUnitType != "MutatorMissileStandard") && (lv_deadUnitType != "MutatorMissilePointDefense") && (lv_deadUnitType != "MutatorMissileSplitter") && (lv_deadUnitType != "MutatorMissileNuke")))) {
        return ;
    }

    libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(lp_deadUnit, 1));
}

void libCOMU_gf_CT_ApplyMomentOfSilence (unit lp_killedUnit) {
    // Variable Declarations
    point lv_unitLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("MomentOfSilence") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_killedUnit, "HybridPnPMirrorImage") == true))) {
        return ;
    }
    else {
        lv_unitLocation = UnitGetPosition(lp_killedUnit);
        if ((UnitGetType(lp_killedUnit) == "HybridNemesis")) {
            Wait(2.0, c_timeReal);
        }
        else {
            Wait(1.0, c_timeReal);
        }
        PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "MutatorMomentOfSilenceSearch", lv_unitLocation);
    }
}

void libCOMU_gf_MM_ApplyMomentOfSilence (unit lp_killedUnit) {
    // Variable Declarations
    point lv_unitLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("MomentOfSilence") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_killedUnit, "HybridPnPMirrorImage") == true))) {
        return ;
    }
    else {
        lv_unitLocation = UnitGetPosition(lp_killedUnit);
        if ((UnitGetType(lp_killedUnit) == "HybridNemesis")) {
            Wait(2.0, c_timeReal);
        }
        else {
            Wait(1.0, c_timeReal);
        }
        PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "MutatorMomentOfSilenceSearch", lv_unitLocation);
    }
}

bool libCOMU_gf_MM_MothershipTargetValid (unit lp_mothership, unit lp_target) {
    // Variable Declarations
    point lv_stepLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_target == null) || (UnitIsValid(lp_target) == false) || (UnitIsAlive(lp_target) == false))) {
        return false;
    }

    if (((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_target)) == false) || (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(UnitGetPosition(lp_target), libCOMU_gv_mM_MotherShipBaseAvoidDistance, libCOMI_gf_AffectedPlayers()) == false) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lp_target), 30.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
        return false;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_mothership), UnitGetPosition(lp_target)) > 10.0)) {
        lv_stepLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_mothership), 10.0, UnitGetPosition(lp_target));
        if (((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_stepLocation, libCOMU_gv_mM_MotherShipBaseAvoidDistance, libCOMI_gf_AffectedPlayers()) == false) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_stepLocation, 25.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0))) {
            return false;
        }

    }

    return true;
}

point libCOMU_gf_MM_MothershipSpawn () {
    // Variable Declarations
    point lv_vPoint;
    unit lv_vUnit;
    unitgroup lv_vStructures;
    unit lv_vMaxUnit;
    fixed lv_vMaxDistance;

    // Automatic Variable Declarations
    const int auto89B7C188_n = 500;
    int auto89B7C188_i;
    const int auto56BAD851_n = 100;
    int auto56BAD851_i;
    const int autoDA9FF857_n = 1000;
    int autoDA9FF857_i;

    // Variable Initialization
    lv_vStructures = UnitGroupEmpty();

    // Implementation
    lv_vStructures = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_vStructures, c_unitCountAlive) > 0)) {
        for (auto56BAD851_i = 1; auto56BAD851_i <= auto56BAD851_n; auto56BAD851_i += 1) {
            lv_vUnit = UnitGroupRandomUnit(lv_vStructures, c_unitCountAlive);
            if (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(UnitGetPosition(lv_vUnit), lv_vMaxDistance, libCOMI_gf_AffectedPlayers())) {
                lv_vMaxUnit = lv_vUnit;
                lv_vMaxDistance = DistanceBetweenPoints(UnitGetPosition(lv_vUnit), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)));
            }

            if (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(UnitGetPosition(lv_vUnit), 90.0, libCOMI_gf_AffectedPlayers()) && (UnitGroupCount(UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_vUnit), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("MothershipAiur06", c_playerAny, RegionCircle(UnitGetPosition(lv_vUnit), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                break;
            }

        }
        lv_vPoint = UnitGetPosition(lv_vMaxUnit);
    }
    else {
        for (auto89B7C188_i = 1; auto89B7C188_i <= auto89B7C188_n; auto89B7C188_i += 1) {
            lv_vPoint = RegionRandomPoint(RegionPlayableMap());
            if (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, 90.0, libCOMI_gf_AffectedPlayers()) && (UnitGroupCount(UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(lv_vPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("MothershipAiur06", c_playerAny, RegionCircle(lv_vPoint, 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                break;
            }

        }
    }
    if ((lv_vPoint == null)) {
        for (autoDA9FF857_i = 1; autoDA9FF857_i <= autoDA9FF857_n; autoDA9FF857_i += 1) {
            lv_vPoint = RegionRandomPoint(RegionPlayableMap());
            if (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, 60.0, libCOMI_gf_AffectedPlayers()) && (UnitGroupCount(UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(lv_vPoint, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(UnitGroup("MothershipAiur06", c_playerAny, RegionCircle(lv_vPoint, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                break;
            }

        }
    }

    return lv_vPoint;
}

void libCOMU_gf_MM_ApplyNecronomicon (unit lp_pKilledUnit, int lp_pKillingPlayer) {
    // Variable Declarations
    point lv_vStructureLocation;
    string lv_vBehavior;

    // Automatic Variable Declarations
    const int autoFA8F61C8_n = 100;
    int autoFA8F61C8_i;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Necronomicon") == false) || (UnitGetOwner(lp_pKilledUnit) == c_playerAny) || (libNtve_gf_PlayerIsEnemy(libNtve_gf_KillingPlayer(), libCOMI_gf_AffectedPlayer(0), libNtve_ge_PlayerRelation_Enemy) == false) || ((UnitFilterMatch(lp_pKilledUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) && ((UnitGetType(lp_pKilledUnit) != "SIInfestedTrooper") || (UnitGetType(lp_pKilledUnit) != "SIInfestedCivilian") || (UnitGetType(lp_pKilledUnit) != "SIInfestedMarine") || (UnitGetType(lp_pKilledUnit) != "SIVolatileInfested"))) || (UnitTypeTestFlag(UnitGetType(lp_pKilledUnit), c_unitFlagWorker) == true) || ((UnitWeaponCount(lp_pKilledUnit) == 0) && (UnitGetType(lp_pKilledUnit) != "Medic") && (UnitGetType(lp_pKilledUnit) != "Monitor") && (UnitGetType(lp_pKilledUnit) != "ScienceVessel") && (UnitGetType(lp_pKilledUnit) != "Raven_BlackOps") && (UnitGetType(lp_pKilledUnit) != "HHRaven")))) {
        return ;
    }

    for (autoFA8F61C8_i = 1; autoFA8F61C8_i <= autoFA8F61C8_n; autoFA8F61C8_i += 1) {
        lv_vStructureLocation = UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        if (libCOMI_gf_ConnectedByGroundPath(lv_vStructureLocation)) {
            break;
        }

    }
    libNtve_gf_UnitCreateFacingPoint(1, UnitGetType(lp_pKilledUnit), 0, libCOMI_gv_mM_PX_PlayerX, lv_vStructureLocation, libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)));
    libCOMI_gf_MM_CopyBeneficialBehaviors(lp_pKilledUnit, UnitLastCreated());
    libNtve_gf_CreateActorAtPoint("NecronomiconRessurect", UnitGetPosition(UnitLastCreated()));
    if (((UnitGetType(lp_pKilledUnit) == "Interceptor") || (UnitGetType(lp_pKilledUnit) == "InterceptorAiur") || (UnitGetType(lp_pKilledUnit) == "FenixClolarionInterceptor") || (UnitGetType(lp_pKilledUnit) == "FenixClolarionBomber") || (UnitGetType(lp_pKilledUnit) == "HHGriffon") || (UnitGetType(lp_pKilledUnit) == "SS_Interceptor") || (UnitGetType(lp_pKilledUnit) == "SelendisInterceptor") || (UnitGetType(lp_pKilledUnit) == "FlagshipInterceptor"))) {
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))), c_orderQueueReplace);
    }
    else {
        UnitGroupAdd(libCOMU_gv_mM_UndeadUG, UnitLastCreated());
    }
    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, 100.0);
    libCOMI_gf_MM_UnitCreationManual(UnitLastCreated());
}

trigger auto_libCOMU_gf_MM_ApplyNuclearMines_Trigger = null;
unit auto_libCOMU_gf_MM_ApplyNuclearMines_lp_pKilledUnit;

void libCOMU_gf_MM_ApplyNuclearMines (unit lp_pKilledUnit) {
    auto_libCOMU_gf_MM_ApplyNuclearMines_lp_pKilledUnit = lp_pKilledUnit;

    if (auto_libCOMU_gf_MM_ApplyNuclearMines_Trigger == null) {
        auto_libCOMU_gf_MM_ApplyNuclearMines_Trigger = TriggerCreate("auto_libCOMU_gf_MM_ApplyNuclearMines_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_MM_ApplyNuclearMines_Trigger, false, false);
}

bool auto_libCOMU_gf_MM_ApplyNuclearMines_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pKilledUnit = auto_libCOMU_gf_MM_ApplyNuclearMines_lp_pKilledUnit;

    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("NuclearMines") == false) || (UnitGetType(lp_pKilledUnit) != "NuclearMine"))) {
        return true;
    }

    lv_vPoint = UnitGetPosition(lp_pKilledUnit);
    Wait(1.2, c_timeGame);
    PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "HybridNukeDamage", lv_vPoint);
    return true;
}

trigger auto_libCOMU_gf_CT_OrbitalStrikeLaunch_Trigger = null;
unitgroup auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_targetCandidates;
int auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_unitTargetCount;
int auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_strikesPerTarget;
fixed auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_fireDelay;
fixed auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_targetDelay;

void libCOMU_gf_CT_OrbitalStrikeLaunch (unitgroup lp_targetCandidates, int lp_unitTargetCount, int lp_strikesPerTarget, fixed lp_fireDelay, fixed lp_targetDelay) {
    auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_targetCandidates = lp_targetCandidates;
    auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_unitTargetCount = lp_unitTargetCount;
    auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_strikesPerTarget = lp_strikesPerTarget;
    auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_fireDelay = lp_fireDelay;
    auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_targetDelay = lp_targetDelay;

    if (auto_libCOMU_gf_CT_OrbitalStrikeLaunch_Trigger == null) {
        auto_libCOMU_gf_CT_OrbitalStrikeLaunch_Trigger = TriggerCreate("auto_libCOMU_gf_CT_OrbitalStrikeLaunch_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_OrbitalStrikeLaunch_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_OrbitalStrikeLaunch_TriggerFunc (bool testConds, bool runActions) {
    unitgroup lp_targetCandidates = auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_targetCandidates;
    int lp_unitTargetCount = auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_unitTargetCount;
    int lp_strikesPerTarget = auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_strikesPerTarget;
    fixed lp_fireDelay = auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_fireDelay;
    fixed lp_targetDelay = auto_libCOMU_gf_CT_OrbitalStrikeLaunch_lp_targetDelay;

    // Variable Declarations
    actor[51] lv_targetModels;
    point[51] lv_targetPoints;
    point lv_expectedUnitLocation;
    int lv_targetIndex;
    int lv_unitIndex;
    unit lv_targetUnit;
    int lv_strikeIndex;
    int lv_totalStrikes;
    fixed lv_finalDelay;

    // Automatic Variable Declarations
    int autoF39A4D73_ae;
    const int autoF39A4D73_ai = 1;
    int auto2B15CBB6_ae;
    const int auto2B15CBB6_ai = 1;
    int auto2F08B45A_ae;
    const int auto2F08B45A_ai = 1;
    int auto71B3C6AC_ae;
    const int auto71B3C6AC_ai = 1;
    int autoA015BCF8_ae;
    const int autoA015BCF8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(lp_targetCandidates, c_unitCountAlive) <= 0)) {
        return true;
    }

    lv_finalDelay = lp_fireDelay;
    lv_totalStrikes = (lp_unitTargetCount * lp_strikesPerTarget);
    autoF39A4D73_ae = lp_unitTargetCount;
    lv_unitIndex = 1;
    for ( ; ( (autoF39A4D73_ai >= 0 && lv_unitIndex <= autoF39A4D73_ae) || (autoF39A4D73_ai < 0 && lv_unitIndex >= autoF39A4D73_ae) ) ; lv_unitIndex += autoF39A4D73_ai ) {
        lv_targetIndex += 1;
        lv_targetUnit = UnitGroupRandomUnit(lp_targetCandidates, c_unitCountAlive);
        if ((UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent) > 0.0)) {
            lv_expectedUnitLocation = PointWithOffsetPolar(UnitGetPosition(lv_targetUnit), (UnitGetPropertyFixed(lv_targetUnit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent)*2.0), UnitGetFacing(lv_targetUnit));
            lv_targetPoints[lv_targetIndex] = UnitGetPosition(lv_targetUnit);
            lv_targetIndex += 1;
            lv_targetPoints[lv_targetIndex] = lv_expectedUnitLocation;
            auto2F08B45A_ae = lp_strikesPerTarget;
            lv_strikeIndex = 3;
            for ( ; ( (auto2F08B45A_ai >= 0 && lv_strikeIndex <= auto2F08B45A_ae) || (auto2F08B45A_ai < 0 && lv_strikeIndex >= auto2F08B45A_ae) ) ; lv_strikeIndex += auto2F08B45A_ai ) {
                lv_targetIndex += 1;
                lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lv_expectedUnitLocation, 7.0));
            }
        }
        else {
            lv_expectedUnitLocation = UnitGetPosition(lv_targetUnit);
            lv_targetPoints[lv_targetIndex] = lv_expectedUnitLocation;
            auto2B15CBB6_ae = lp_strikesPerTarget;
            lv_strikeIndex = 2;
            for ( ; ( (auto2B15CBB6_ai >= 0 && lv_strikeIndex <= auto2B15CBB6_ae) || (auto2B15CBB6_ai < 0 && lv_strikeIndex >= auto2B15CBB6_ae) ) ; lv_strikeIndex += auto2B15CBB6_ai ) {
                lv_targetIndex += 1;
                lv_targetPoints[lv_targetIndex] = RegionRandomPoint(RegionCircle(lv_expectedUnitLocation, 7.0));
            }
        }
    }
    auto71B3C6AC_ae = lv_totalStrikes;
    lv_targetIndex = 1;
    for ( ; ( (auto71B3C6AC_ai >= 0 && lv_targetIndex <= auto71B3C6AC_ae) || (auto71B3C6AC_ai < 0 && lv_targetIndex >= auto71B3C6AC_ae) ) ; lv_targetIndex += auto71B3C6AC_ai ) {
        libNtve_gf_CreateActorAtPoint("MutatorOrbitalStrikeTarget", lv_targetPoints[lv_targetIndex]);
        lv_targetModels[lv_targetIndex] = libNtve_gf_ActorLastCreated();
        Wait(lp_targetDelay, c_timeGame);
        lv_finalDelay -= 0.08;
    }
    Wait(lv_finalDelay, c_timeGame);
    autoA015BCF8_ae = lv_totalStrikes;
    lv_targetIndex = 1;
    for ( ; ( (autoA015BCF8_ai >= 0 && lv_targetIndex <= autoA015BCF8_ae) || (autoA015BCF8_ai < 0 && lv_targetIndex >= autoA015BCF8_ae) ) ; lv_targetIndex += autoA015BCF8_ai ) {
        PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "MutatorOrbitalStrike", lv_targetPoints[lv_targetIndex]);
        ActorSend(lv_targetModels[lv_targetIndex], "Signal Destroy");
        Wait(0.08, c_timeGame);
    }
    return true;
}

void libCOMU_gf_CT_ApplyOrderCosts (unit lp_orderedUnit, order lp_order) {
    // Variable Declarations
    fixed lv_orderCost;
    bool lv_useVespene;
    int lv_microPlayer;
    string lv_abil;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abil = AbilityCommandGetAbility(OrderGetAbilityCommand(lp_order));

    // Implementation
    lv_microPlayer = OrderGetPlayer(lp_order);
    if (((libCOMI_gf_MutatorIsEnabled("OrderCosts") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), lv_microPlayer) == false) || (OrderGetFlag(lp_order, 8) == false) || (UnitGroupHasUnit(libCOMU_gv_cT_OrderCostImmuneUnits, lp_orderedUnit) == true))) {
        return ;
    }

    if ((PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals) <= 0)) {
        return ;
    }

    if (((UnitGroupHasUnit(libCOMI_gv_heroUnits, lp_orderedUnit) == true) || (lp_orderedUnit == libCOMI_gv_yY_GPCasterUnit[lv_microPlayer]) || (UnitHasBehavior2(lp_orderedUnit, "TychusHeroCount") == true))) {
        if ((PlayerGetPropertyInt(UnitGetOwner(lp_orderedUnit), c_playerPropVespene) > 0)) {
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), -0.4, 0.0), libCOMI_ge_CacheResourceType_Mineral, -10, null, null, lv_microPlayer);
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), 0.4, 0.0), libCOMI_ge_CacheResourceType_Vespene, -5, null, null, lv_microPlayer);
            libCOMU_gv_cT_StatOrderCostVespeneLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropVespene), 5);
            libCOMU_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), 10);
        }
        else {
            libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_orderedUnit), libCOMI_ge_CacheResourceType_Mineral, -10, null, null, lv_microPlayer);
            libCOMU_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), 10);
        }
    }
    else if (true) {
        if ((UnitTypeTestAttribute(UnitGetType(lp_orderedUnit), c_unitAttributeStructure) == true) && (AbilityClass(lv_abil) != c_classIdCAbilAttack) && (AbilityClass(lv_abil) != c_classIdCAbilMove) && (AbilityClass(lv_abil) != c_classIdCAbilStop) && (AbilityClass(lv_abil) != c_classIdCAbilTransport) && (AbilityClass(lv_abil) != c_classIdCAbilMorph) && (AbilityClass(lv_abil) != c_classIdCAbilMorphPlacement)) {
        }
        else {
            lv_orderCost = FixedToInt(Ceiling((UnitGetPropertyFixed(lp_orderedUnit, c_unitPropSuppliesUsed, c_unitPropCurrent) * -1.0)));
        }
        if (((UnitGetType(lp_orderedUnit) == "Brutalisk") || (UnitGetType(lp_orderedUnit) == "HotSLeviathan"))) {
            lv_useVespene = true;
        }

        if ((UnitTypeGetCost(UnitGetType(lp_orderedUnit), c_unitCostVespene) > 0) && (PlayerGetPropertyInt(lv_microPlayer, c_playerPropVespene) > 0) && (UnitGetType(lp_orderedUnit) != "Roach") && (UnitGetType(lp_orderedUnit) != "RoachVile")) {
            lv_useVespene = true;
        }

        if ((lv_useVespene == true)) {
            libCOMU_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), MaxI(AbsI(FixedToInt(lv_orderCost)), 1));
            libCOMU_gv_cT_StatOrderCostVespeneLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropVespene), MaxI(AbsI(FixedToInt(lv_orderCost)), 1));
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), -0.36, 0.0), libCOMI_ge_CacheResourceType_Mineral, MinI(FixedToInt(lv_orderCost), -1), null, null, lv_microPlayer);
            libCOMI_gf_GivePlayerResources(PointWithOffset(UnitGetPosition(lp_orderedUnit), 0.36, 0.0), libCOMI_ge_CacheResourceType_Vespene, MinI(FixedToInt(lv_orderCost), -1), null, null, lv_microPlayer);
        }
        else {
            lv_orderCost *= 2.0;
            libCOMI_gf_GivePlayerResources(UnitGetPosition(lp_orderedUnit), libCOMI_ge_CacheResourceType_Mineral, MinI(FixedToInt(lv_orderCost), -1), null, null, lv_microPlayer);
            libCOMU_gv_cT_StatOrderCostMineralsLost[lv_microPlayer] += MinI(PlayerGetPropertyInt(lv_microPlayer, c_playerPropMinerals), MaxI(AbsI(FixedToInt(lv_orderCost)), 1));
        }
    }
}

void libCOMU_gf_CT_ApplyPermaCloak (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("AllEnemiesCloaked") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetType(lp_createdUnit) == "MutatorStormCloud") || (UnitGetType(lp_createdUnit) == "MutatorTornado") || (UnitGetType(lp_createdUnit) == "VoidThrasher"))) {
        return ;
    }

    UnitBehaviorAddPlayer(lp_createdUnit, "MutatorPermanentlyCloaked", UnitGetOwner(lp_createdUnit), 1);
}

void libCOMU_gf_MM_ApplyPermaCloak (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("AllEnemiesCloaked") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)))) == false) || (UnitGetType(lp_createdUnit) == "MutatorStormCloud") || (UnitGetType(lp_createdUnit) == "MutatorTornado") || (UnitGetType(lp_createdUnit) == "VoidThrasher"))) {
        return ;
    }

    UnitBehaviorAddPlayer(lp_createdUnit, "MutatorPermanentlyCloaked", UnitGetOwner(lp_createdUnit), 1);
}

void libCOMU_gf_MM_ApplyPlague (unit lp_newUnit) {
    // Variable Declarations
    int lv_plagueChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Plague") == false) || (UnitFilterMatch(lp_newUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitGetType(lp_newUnit) == "AdeptPhaseShift") || (UnitGetType(lp_newUnit) == "DisruptorPhased") || (UnitGetType(lp_newUnit) == "BiomassPickup"))) {
        return ;
    }
    else {
        lv_plagueChance = libCOMI_gf_MinimumDifficultyValueCoopInteger(20, 10, 5, 3, 0, 0);
        if ((RandomInt(1, lv_plagueChance) == 1)) {
            UnitBehaviorAdd(lp_newUnit, "MutatorPlagueBehaviorVisual", lp_newUnit, 1);
        }

    }
}

void libCOMU_gf_CT_ApplyPlague (unit lp_newUnit) {
    // Variable Declarations
    int lv_plagueChance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Plague") == false) || (UnitGetOwner(lp_newUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_newUnit)) == false) || (UnitFilterMatch(lp_newUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitGetType(lp_newUnit) == "AdeptPhaseShift") || (UnitGetType(lp_newUnit) == "DisruptorPhased") || (UnitGetType(lp_newUnit) == "BiomassPickup"))) {
        return ;
    }
    else {
        lv_plagueChance = libCOMI_gf_MinimumDifficultyValueCoopInteger(20, 10, 5, 3, 0, 0);
        if ((RandomInt(1, lv_plagueChance) == 1)) {
            UnitBehaviorAdd(lp_newUnit, "MutatorPlagueBehaviorVisual", lp_newUnit, 1);
        }

    }
}

void libCOMU_gf_CT_ApplyPlagueOnDeath (unit lp_killedUnit) {
    // Variable Declarations
    unitgroup lv_playerUnitGroup;
    int lv_infectedUnitCount;
    int lv_infectedUnitCountMax;
    fixed lv_infectionRange;
    point lv_unitPosition;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto1FEA68BA_g;
    int auto1FEA68BA_u;

    // Variable Initialization
    lv_playerUnitGroup = UnitGroupEmpty();
    lv_infectionRange = 5.0;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Plague") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny))) {
        return ;
    }

    if (((UnitHasBehavior2(lp_killedUnit, "MutatorPlagueBehavior") == true) || (UnitHasBehavior2(lp_killedUnit, "MutatorPlagueBehaviorVisual") == true))) {
        lv_infectedUnitCountMax = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 3, 0, 0);
        auto1FEA68BA_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_killedUnit), lv_infectionRange), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto1FEA68BA_u = UnitGroupCount(auto1FEA68BA_g, c_unitCountAll);
        for (;; auto1FEA68BA_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto1FEA68BA_g, auto1FEA68BA_u);
            if (lv_indexUnit == null) { break; }
            if (((UnitHasBehavior2(lv_indexUnit, "MutatorPlagueBehavior") == false) && (UnitGetType(lv_indexUnit) != "AdeptPhaseShift") && (UnitGetType(lv_indexUnit) != "BiomassPickup") && (UnitGetType(lv_indexUnit) != "DisruptorPhased") && (UnitGetType(lv_indexUnit) != "Larva") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedOverlord") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedCivilian") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedMarine") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedDiamondBack") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedSiegeTank") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedBanshee") && (UnitGetType(lv_indexUnit) != "SICocoonQueen") && (UnitGetType(lv_indexUnit) != "SICocoonInfestedLiberator") && (UnitGetType(lv_indexUnit) != "DehakaTrainEgg") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggDrone") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggZergling") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggRoach") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggHydralisk") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggSwarmHost") && (UnitGetType(lv_indexUnit) != "DehakaTrainEggUltralisk") && (UnitGetType(lv_indexUnit) != "CODFlatbedTruck") && (UnitGetType(lv_indexUnit) != "CODFlatbedTruckFlying") && ((UnitGetOwner(lv_indexUnit) == 1) || (UnitGetOwner(lv_indexUnit) == 2)))) {
                UnitBehaviorAdd(lv_indexUnit, "MutatorPlagueBehavior", lv_indexUnit, 1);
                lv_infectedUnitCount += 1;
                if ((lv_infectedUnitCount >= lv_infectedUnitCountMax)) {
                    break;
                }

            }

        }
        UnitBehaviorRemove(lp_killedUnit, "MutatorPlagueBehavior", 1);
    }
    else {
        return ;
    }
}

void libCOMU_gf_MM_ApplyPolarity (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Polarity") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer1") == true) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer2") == true))) {
        return ;
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_TarsonisTrain") && ((UnitGetType(lp_createdUnit) == "Caboose") || (UnitGetType(lp_createdUnit) == "TarsonisEngineFast") || (UnitGetType(lp_createdUnit) == "TarsonisEngine") || (UnitGetType(lp_createdUnit) == "FreightCar"))) {
        libCOMU_gf_CT_Polarity_TrainApply(lp_createdUnit);
        return ;
    }

    if (libCOMU_gv_cT_PolarityPlayer >= 2) {
        libCOMU_gv_cT_PolarityPlayer = 1;
    }
    else {
        libCOMU_gv_cT_PolarityPlayer = libCOMU_gv_cT_PolarityPlayer + 1;
    }
    if ((libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCOMU_gv_cT_PolarityEnemies[libCOMU_gv_cT_PolarityPlayer], Point(0.0, 0.0));
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer] = UnitLastCreated();
    }

    UnitCreateEffectUnit(lp_createdUnit, "MutatorPolarityMimic", libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer]);
    if ((libCOMU_gv_cT_PolarityPlayer == 1)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer1", UnitGetOwner(lp_createdUnit), 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer2", UnitGetOwner(lp_createdUnit), 1);
    }
}

void libCOMU_gf_CT_ApplyPolarity (unit lp_createdUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Polarity") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer1") == true) || (UnitHasBehavior2(lp_createdUnit, "MutatorImmunetoPlayer2") == true))) {
        return ;
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_TarsonisTrain") && ((UnitGetType(lp_createdUnit) == "Caboose") || (UnitGetType(lp_createdUnit) == "TarsonisEngineFast") || (UnitGetType(lp_createdUnit) == "TarsonisEngine") || (UnitGetType(lp_createdUnit) == "FreightCar"))) {
        libCOMU_gf_CT_Polarity_TrainApply(lp_createdUnit);
        return ;
    }

    if (libCOMU_gv_cT_PolarityPlayer >= 2) {
        libCOMU_gv_cT_PolarityPlayer = 1;
    }
    else {
        libCOMU_gv_cT_PolarityPlayer = libCOMU_gv_cT_PolarityPlayer + 1;
    }
    if ((libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCOMU_gv_cT_PolarityEnemies[libCOMU_gv_cT_PolarityPlayer], Point(0.0, 0.0));
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer] = UnitLastCreated();
    }

    UnitCreateEffectUnit(lp_createdUnit, "MutatorPolarityMimic", libCOMU_gv_cT_PolarityCloneTarget[libCOMU_gv_cT_PolarityPlayer]);
    if ((libCOMU_gv_cT_PolarityPlayer == 1)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer1", UnitGetOwner(lp_createdUnit), 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer2", UnitGetOwner(lp_createdUnit), 1);
    }
}

void libCOMU_gf_CT_RemovePolarity (unit lp_polarityUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_MutatorIsEnabled("Polarity") == false)) {
        return ;
    }

    UnitBehaviorRemove(lp_polarityUnit, "MutatorImmunetoPlayer1", 1);
    UnitBehaviorRemove(lp_polarityUnit, "MutatorImmunetoPlayer2", 1);
    UnitCreateEffectUnit(lp_polarityUnit, "MutatorPolarityMimic", lp_polarityUnit);
}

void libCOMU_gf_CT_NullifyDamage (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_MutatorIsEnabled("Polarity") == false) && (lp_damageAmount > 0.0) && (((UnitGetOwner(lp_damagingUnit) == 1) && (UnitHasBehavior2(lp_damagedUnit, "MutatorImmunetoPlayer1") == true)) || ((UnitGetOwner(lp_damagingUnit) == 2) && (UnitHasBehavior2(lp_damagedUnit, "MutatorImmunetoPlayer2") == true)))) {
        UnitSetPropertyFixed(lp_damagedUnit, c_unitPropLife, (UnitGetPropertyFixed(lp_damagedUnit, c_unitPropLife, c_unitPropCurrent) + lp_damageAmount));
    }

}

void libCOMU_gf_CT_Polarity_Swap (unit lp_polarizedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_MutatorIsEnabled("Polarity") == false)) {
        return ;
    }
    else if ((UnitHasBehavior2(lp_polarizedUnit, "MutatorImmunetoPlayer1") == true)) {
        libCOMU_gf_CT_RemovePolarity(lp_polarizedUnit);
        UnitCreateEffectUnit(lp_polarizedUnit, "MutatorPolarityMimic", libCOMU_gv_cT_PolarityCloneTarget[2]);
        UnitBehaviorAdd(lp_polarizedUnit, "MutatorImmunetoPlayer2", lp_polarizedUnit, 1);
    }
    else if ((UnitHasBehavior2(lp_polarizedUnit, "MutatorImmunetoPlayer2") == true)) {
        libCOMU_gf_CT_RemovePolarity(lp_polarizedUnit);
        UnitCreateEffectUnit(lp_polarizedUnit, "MutatorPolarityMimic", libCOMU_gv_cT_PolarityCloneTarget[1]);
        UnitBehaviorAdd(lp_polarizedUnit, "MutatorImmunetoPlayer1", lp_polarizedUnit, 1);
    }
}

void libCOMU_gf_CT_Polarity_TrainApply (unit lp_createdUnit) {
    // Variable Declarations
    unit lv_indexTrain;
    unitgroup lv_trainCars;
    int lv_polarityPlayer;

    // Automatic Variable Declarations
    unitgroup auto14B4EB59_g;
    int auto14B4EB59_u;

    // Variable Initialization
    lv_trainCars = UnitGroupEmpty();

    // Implementation
    lv_trainCars = UnitGroup("Caboose", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngineFast", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("TarsonisEngine", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_trainCars, UnitGroup("FreightCar", c_playerAny, RegionCircle(UnitGetPosition(lp_createdUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupRemove(lv_trainCars, lp_createdUnit);
    auto14B4EB59_g = lv_trainCars;
    auto14B4EB59_u = UnitGroupCount(auto14B4EB59_g, c_unitCountAll);
    for (;; auto14B4EB59_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto14B4EB59_g, auto14B4EB59_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitHasBehavior2(lv_indexTrain, "MutatorImmunetoPlayer1") == true)) {
            lv_polarityPlayer = 1;
            break;
        }
        else if ((UnitHasBehavior2(lv_indexTrain, "MutatorImmunetoPlayer2") == true)) {
            lv_polarityPlayer = 2;
            break;
        }
    }
    if ((lv_polarityPlayer == 0)) {
        if (libCOMU_gv_cT_PolarityPlayerTrains >= 2) {
            libCOMU_gv_cT_PolarityPlayerTrains = 1;
        }
        else {
            libCOMU_gv_cT_PolarityPlayerTrains = libCOMU_gv_cT_PolarityPlayerTrains + 1;
        }
        lv_polarityPlayer = libCOMU_gv_cT_PolarityPlayerTrains;
    }

    if ((libCOMU_gv_cT_PolarityCloneTarget[lv_polarityPlayer] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCOMU_gv_cT_PolarityEnemies[lv_polarityPlayer], Point(0.0, 0.0));
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        libCOMU_gv_cT_PolarityCloneTarget[lv_polarityPlayer] = UnitLastCreated();
    }

    UnitCreateEffectUnit(lp_createdUnit, "MutatorPolarityMimic", libCOMU_gv_cT_PolarityCloneTarget[lv_polarityPlayer]);
    if ((lv_polarityPlayer == 1)) {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer1", UnitGetOwner(lp_createdUnit), 1);
    }
    else {
        UnitBehaviorAddPlayer(lp_createdUnit, "MutatorImmunetoPlayer2", UnitGetOwner(lp_createdUnit), 1);
    }
}

void libCOMU_gf_CT_ApplyPropagatorPing (unit lp_createdUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_createdUnit), 270.0, "BeaconClaimPing", ColorWithAlpha(0.00, 50.20, 75.29, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMU_DEEA7BC8"));
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libARRA_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
}

void libCOMU_gf_CT_ApplyPropagatorPingCleanup (unit lp_killedUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if (((libCOMU_gv_cT_PropagatorCleanupEnabled == false) || (UnitGetType(lp_killedUnit) != "MutatorPropagator"))) {
        return ;
    }

    lv_storedPing = libARRA_gf_PingStoredForUnit(lp_killedUnit, 1);
    if ((lv_storedPing != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(lv_storedPing);
    }

}

bool libCOMU_gf_CT_PurifierBeamTargetValid (unit lp_beam, unit lp_target) {
    // Variable Declarations
    point lv_stepLocation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_target == null) || (UnitIsValid(lp_target) == false) || (UnitIsAlive(lp_target) == false) || (UnitGetType(lp_target) == "PowerTowerStetmann"))) {
        return false;
    }

    if (((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_target)) == false) || (libNtve_gf_UnitInRegion(lp_target, libCOMI_gf_CT_MutatorSafetyZone()) == true))) {
        return false;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lp_beam), UnitGetPosition(lp_target)) > 10.0)) {
        lv_stepLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_beam), 10.0, UnitGetPosition(lp_target));
        if ((RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_stepLocation) == true)) {
            return false;
        }

    }

    return true;
}

void libCOMU_gf_CT_ApplyPhotonOverload (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("PhotonOverload") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (lp_damagingUnit == null) || (UnitIsValid(lp_damagingUnit) == false) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitTypeTestFlag(UnitGetType(lp_damagedUnit), c_unitFlagDestructible) == true) || (UnitGetType(lp_damagedUnit) == "TempleShakuras02") || (UnitHasBehavior2(lp_damagedUnit, "MutatorPhotonOvercharge") == true))) {
        return ;
    }

    UnitBehaviorAdd(lp_damagedUnit, "MutatorPhotonOvercharge", lp_damagedUnit, 1);
}

void libCOMU_gf_MM_ApplyRepulsiveField (unit lp_pDamagingUnit, unit lp_pDamagedUnit) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto6FFD0743_ae = 10;
    int auto6FFD0743_var;

    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("RepulsiveField") == false) || (lp_pDamagedUnit == lp_pDamagingUnit) || (lp_pDamagedUnit == null) || (lp_pDamagingUnit == null) || (UnitFilterMatch(lp_pDamagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), UnitGetOwner(lp_pDamagedUnit)) == false))) {
        return ;
    }

    if (((UnitTypeTestAttribute(UnitGetType(lp_pDamagedUnit), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(lp_pDamagedUnit), c_unitAttributeMassive) == true))) {
        lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pDamagedUnit), -0.8, UnitGetPosition(lp_pDamagingUnit));
    }
    else {
        lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pDamagedUnit), -1.6, UnitGetPosition(lp_pDamagingUnit));
    }
    if (((UnitFilterMatch(lp_pDamagedUnit, 1, UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == true) || ((PointPathingPassable(lv_vPoint) == true) && (PointPathingPassable(libNtve_gf_PointOffsetTowardsPoint(lv_vPoint, -0.5, UnitGetPosition(lp_pDamagingUnit))) == true)))) {
        UnitSetPosition(lp_pDamagedUnit, lv_vPoint, true);
    }
    else {
        auto6FFD0743_var = 1;
        for ( ; auto6FFD0743_var <= auto6FFD0743_ae; auto6FFD0743_var += 1 ) {
            lv_vPoint = libNtve_gf_PointOffsetTowardsPoint(lv_vPoint, 0.16, UnitGetPosition(lp_pDamagingUnit));
            if ((PointPathingPassable(libNtve_gf_PointOffsetTowardsPoint(lv_vPoint, -0.5, UnitGetPosition(lp_pDamagingUnit))) == true)) {
                UnitSetPosition(lp_pDamagedUnit, lv_vPoint, true);
                break;
            }

        }
    }
}

int libCOMU_gf_CT_CorpseNearestToLocation (point lp_location, fixed lp_maxDistance) {
    // Variable Declarations
    int lv_corpseIndex;
    int lv_bestIndex;
    fixed lv_bestDistance;
    fixed lv_testDistance;

    // Automatic Variable Declarations
    int auto7D9DFEF2_ae;
    const int auto7D9DFEF2_ai = 1;

    // Variable Initialization
    lv_bestDistance = 600.0;

    // Implementation
    auto7D9DFEF2_ae = libCOMU_gv_cT_CorpseCount;
    lv_corpseIndex = 1;
    for ( ; ( (auto7D9DFEF2_ai >= 0 && lv_corpseIndex <= auto7D9DFEF2_ae) || (auto7D9DFEF2_ai < 0 && lv_corpseIndex >= auto7D9DFEF2_ae) ) ; lv_corpseIndex += auto7D9DFEF2_ai ) {
        if ((libCOMU_gf_CT_CorpseBeingRevived(lv_corpseIndex) == true)) {
            continue;
        }

        lv_testDistance = DistanceBetweenPoints(lp_location, libCOMU_gv_cT_CorpseLocations[lv_corpseIndex]);
        if ((lv_testDistance < lv_bestDistance) && (lv_testDistance <= lp_maxDistance)) {
            lv_bestIndex = lv_corpseIndex;
            lv_bestDistance = lv_testDistance;
        }

    }
    return lv_bestIndex;
}

int libCOMU_gf_CT_CorpseAtRandom () {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMU_gv_cT_CorpseCount == 0)) {
        return 0;
    }

    return RandomInt(1, libCOMU_gv_cT_CorpseCount);
}

bool libCOMU_gf_CT_CorpseBeingRevived (int lp_corpseIndex) {
    // Variable Declarations
    unit lv_indexReanimator;

    // Automatic Variable Declarations
    unitgroup autoA375820B_g;
    int autoA375820B_u;

    // Variable Initialization

    // Implementation
    autoA375820B_g = libCOMU_gv_cT_Reanimators;
    autoA375820B_u = UnitGroupCount(autoA375820B_g, c_unitCountAll);
    for (;; autoA375820B_u -= 1) {
        lv_indexReanimator = UnitGroupUnitFromEnd(autoA375820B_g, autoA375820B_u);
        if (lv_indexReanimator == null) { break; }
        if ((libCOMU_gf_CT_CorpseTargetOfReanimator(lv_indexReanimator) == lp_corpseIndex)) {
            return true;
        }

    }
    return false;
}

int libCOMU_gf_CT_CorpseTargetOfReanimator (unit lp_reanimator) {
    // Automatic Variable Declarations
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_reanimator, 29));
}

string libCOMU_gf_CT_CorpseUnitType (int lp_corpseIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (DataTableGetString(true, ("CT_CorpseType_" + IntToString(lp_corpseIndex))));
}

void libCOMU_gf_CT_CorpseSetAsTarget (unit lp_reanimator, int lp_corpseIndex) {
    // Automatic Variable Declarations
    // Implementation
    UnitSetCustomValue(lp_reanimator, 29, lp_corpseIndex);
}

void libCOMU_gf_CT_CorpseCreate (unit lp_deadUnit) {
    // Variable Declarations
    int lv_corpseIndex;
    int lv_randomAttempt;

    // Automatic Variable Declarations
    const int auto3F825BF1_ae = 100;
    const int auto3F825BF1_ai = 1;

    // Variable Initialization

    // Implementation
    if ((libCOMU_gv_cT_CorpseCount >= libCOMU_gv_cTC_CorpseMaxCount)) {
        if ((UnitTypeGetProperty(UnitGetType(lp_deadUnit), c_unitPropSuppliesUsed) < 2.0)) {
            return ;
        }

        lv_randomAttempt = 1;
        for ( ; ( (auto3F825BF1_ai >= 0 && lv_randomAttempt <= auto3F825BF1_ae) || (auto3F825BF1_ai < 0 && lv_randomAttempt >= auto3F825BF1_ae) ) ; lv_randomAttempt += auto3F825BF1_ai ) {
            lv_corpseIndex = RandomInt(1, libCOMU_gv_cTC_CorpseMaxCount);
            if ((libCOMU_gf_CT_CorpseBeingRevived(lv_corpseIndex) == false)) {
                break;
            }
            else {
                lv_corpseIndex = 0;
            }
        }
    }
    else {
        libCOMU_gv_cT_CorpseCount += 1;
        lv_corpseIndex = libCOMU_gv_cT_CorpseCount;
    }
    if ((lv_corpseIndex == 0)) {
        return ;
    }

    libCOMU_gv_cT_CorpseLocations[lv_corpseIndex] = UnitGetPosition(lp_deadUnit);
    DataTableSetString(true, ("CT_CorpseType_" + IntToString(lv_corpseIndex)), (UnitGetType(lp_deadUnit)));
}

void libCOMU_gf_CT_CorpseRemove (int lp_corpseIndex) {
    // Variable Declarations
    unit lv_indexReanimator;

    // Automatic Variable Declarations
    unitgroup auto59E350A1_g;
    int auto59E350A1_u;

    // Variable Initialization

    // Implementation
    libCOMU_gv_cT_CorpseLocations[lp_corpseIndex] = libCOMU_gv_cT_CorpseLocations[libCOMU_gv_cT_CorpseCount];
    DataTableSetString(true, ("CT_CorpseType_" + IntToString(lp_corpseIndex)), (libCOMU_gf_CT_CorpseUnitType(libCOMU_gv_cT_CorpseCount)));
    auto59E350A1_g = libCOMU_gv_cT_Reanimators;
    auto59E350A1_u = UnitGroupCount(auto59E350A1_g, c_unitCountAll);
    for (;; auto59E350A1_u -= 1) {
        lv_indexReanimator = UnitGroupUnitFromEnd(auto59E350A1_g, auto59E350A1_u);
        if (lv_indexReanimator == null) { break; }
        if ((libCOMU_gf_CT_CorpseTargetOfReanimator(lv_indexReanimator) == libCOMU_gv_cT_CorpseCount)) {
            libCOMU_gf_CT_CorpseSetAsTarget(lv_indexReanimator, lp_corpseIndex);
            break;
        }

    }
    libCOMU_gv_cT_CorpseCount -= 1;
}

void libCOMU_gf_CT_ApplySideStep (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Variable Declarations
    int lv_safteyIndex;
    int lv_teleportRange;
    point lv_teleportPoint;
    point lv_departPoint;

    // Automatic Variable Declarations
    const int autoE299578B_ae = 10;
    const int autoE299578B_ai = 1;

    // Variable Initialization
    lv_teleportRange = 5;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("SideStep") == false) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagedUnit)) == true) || (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, UnitGetOwner(lp_damagingUnit)), UnitGetOwner(lp_damagedUnit)) == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_damagedUnit, "MutatorSideStep") == true) || (UnitWeaponCount(lp_damagedUnit) == 0) || (UnitHasBehavior2(lp_damagedUnit, "UnitKnockback") == true))) {
        return ;
    }

    lv_safteyIndex = 1;
    for ( ; ( (autoE299578B_ai >= 0 && lv_safteyIndex <= autoE299578B_ae) || (autoE299578B_ai < 0 && lv_safteyIndex >= autoE299578B_ae) ) ; lv_safteyIndex += autoE299578B_ai ) {
        if ((UnitIsAlive(lp_damagingUnit) == true) && (UnitIsAlive(lp_damagedUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_damagedUnit), UnitGetPosition(lp_damagingUnit)) < 20.0)) {
            lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagingUnit), lv_teleportRange));
        }
        else {
            if ((UnitIsAlive(lp_damagedUnit) == true)) {
                lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagedUnit), lv_teleportRange));
            }
            else {
                return ;
            }
        }
        if ((PathingType(lv_teleportPoint) == c_pathingGround)) {
            lv_departPoint = UnitGetPosition(lp_damagedUnit);
            PointSetFacing(lv_departPoint, AngleBetweenPoints(lv_departPoint, lv_teleportPoint));
            PointSetHeight(lv_departPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkOut", lv_departPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            UnitSetPosition(lp_damagedUnit, lv_teleportPoint, false);
            if ((UnitIsAlive(lp_damagingUnit) == true)) {
                libNtve_gf_MakeUnitFacePoint(lp_damagedUnit, UnitGetPosition(lp_damagingUnit), 0.0);
            }

            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, true);
            UnitBehaviorAdd(lp_damagedUnit, "MutatorSideStep", lp_damagedUnit, 1);
            PointSetFacing(lv_teleportPoint, AngleBetweenPoints(lv_teleportPoint, lv_departPoint));
            PointSetHeight(lv_teleportPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkIn", lv_teleportPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            Wait(0.25, c_timeGame);
            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, false);
            return ;
        }

    }
}

void libCOMU_gf_MM_ApplySideStep (unit lp_damagedUnit, unit lp_damagingUnit) {
    // Variable Declarations
    int lv_safteyIndex;
    int lv_teleportRange;
    point lv_teleportPoint;
    point lv_departPoint;

    // Automatic Variable Declarations
    const int autoD786E658_ae = 10;
    const int autoD786E658_ai = 1;

    // Variable Initialization
    lv_teleportRange = 5;

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("SideStep") == false) || (UnitFilterMatch(lp_damagedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)))) == false) || (UnitHasBehavior2(lp_damagedUnit, "MutatorSideStep") == true) || (UnitWeaponCount(lp_damagedUnit) == 0) || (UnitHasBehavior2(lp_damagedUnit, "UnitKnockback") == true))) {
        return ;
    }

    lv_safteyIndex = 1;
    for ( ; ( (autoD786E658_ai >= 0 && lv_safteyIndex <= autoD786E658_ae) || (autoD786E658_ai < 0 && lv_safteyIndex >= autoD786E658_ae) ) ; lv_safteyIndex += autoD786E658_ai ) {
        if ((UnitIsAlive(lp_damagingUnit) == true) && (UnitIsAlive(lp_damagedUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lp_damagedUnit), UnitGetPosition(lp_damagingUnit)) < 20.0)) {
            lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagingUnit), lv_teleportRange));
        }
        else {
            if ((UnitIsAlive(lp_damagedUnit) == true)) {
                lv_teleportPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lp_damagedUnit), lv_teleportRange));
            }
            else {
                return ;
            }
        }
        if ((PathingType(lv_teleportPoint) == c_pathingGround)) {
            lv_departPoint = UnitGetPosition(lp_damagedUnit);
            PointSetFacing(lv_departPoint, AngleBetweenPoints(lv_departPoint, lv_teleportPoint));
            PointSetHeight(lv_departPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkOut", lv_departPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            UnitSetPosition(lp_damagedUnit, lv_teleportPoint, false);
            if ((UnitIsAlive(lp_damagingUnit) == true)) {
                libNtve_gf_MakeUnitFacePoint(lp_damagedUnit, UnitGetPosition(lp_damagingUnit), 0.0);
            }

            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, true);
            UnitBehaviorAdd(lp_damagedUnit, "MutatorSideStep", lp_damagedUnit, 1);
            PointSetFacing(lv_teleportPoint, AngleBetweenPoints(lv_teleportPoint, lv_departPoint));
            PointSetHeight(lv_teleportPoint, UnitGetHeight(lp_damagedUnit));
            libNtve_gf_CreateModelWithPointFacing("DarkTemplarChampionBlinkIn", lv_teleportPoint);
            ActorSend(libNtve_gf_ActorLastCreated(), "SetOpacity 0.250000");
            Wait(0.25, c_timeGame);
            UnitSetState(lp_damagedUnit, c_unitStateInvulnerable, false);
            return ;
        }

    }
}

void libCOMU_gf_MM_ShapeshiftedUnit_Dies (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("Shapeshifters") == false) || (UnitGroupHasUnit(libCOMU_gv_mM_ShapeshiftedUnits, lp_pUnit) == false) || (UnitGetCustomValue(lp_pUnit, libCOMI_gv_mM_Shapeshifter_CustomValue) < 1))) {
        return ;
    }

    UnitCreate(1, "Shapeshifter", 0, UnitGetOwner(lp_pUnit), UnitGetPosition(lp_pUnit), UnitGetFacing(lp_pUnit));
    libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, UnitGetCustomValue(lp_pUnit, libCOMI_gv_mM_Shapeshifter_CustomValue));
}

void libCOMU_gf_MM_ApplyShapeshifterPing (unit lp_createdUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if (((UnitGetType(lp_createdUnit) != "Shapeshifter"))) {
        return ;
    }

    libCOMI_gf_CreatePingFacingAngleCoop(PlayerGroupAll(), UnitGetPosition(lp_createdUnit), 270.0, "PingCircle", ColorWithAlpha(54.90, 10.20, 100.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.25);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMU_7AFB8707"));
    PingSetUnit(PingLastCreated(), lp_createdUnit);
    libARRA_gf_StorePingForUnit(lp_createdUnit, 1, PingLastCreated());
}

void libCOMU_gf_MM_ApplyShapeshifterPingCleanup (unit lp_killedUnit) {
    // Variable Declarations
    int lv_storedPing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedPing = c_invalidPingId;

    // Implementation
    if ((UnitGetType(lp_killedUnit) != "Shapeshifter")) {
        return ;
    }

    lv_storedPing = libARRA_gf_PingStoredForUnit(lp_killedUnit, 1);
    if ((lv_storedPing != c_invalidPingId)) {
        libCOMI_gf_DestroyPingCoop(lv_storedPing);
    }

}

void libCOMU_gf_MM_Shapeshifter_AIThink (int lp_owner, unit lp_aIUnit, unitgroup lp_nearByUnits) {
    // Variable Declarations
    unitgroup lv_vCanidates;
    aifilter lv_targetFilter2;
    unit lv_vTargetUnit;

    // Automatic Variable Declarations
    int autoB9A60E27_ae;
    int autoB9A60E27_var;

    // Variable Initialization
    lv_vCanidates = UnitGroupEmpty();
    lv_targetFilter2 = AIFilter(lp_owner);

    // Implementation
    if (((UnitGroupCount(lp_nearByUnits, c_unitCountAlive) <= 0) || (UnitOrderHasAbil(lp_aIUnit, "Shapeshift") == true))) {
        return ;
    }

    AISetFilterRange(lv_targetFilter2, lp_aIUnit, 9.0);
    AISetFilterAlliance(lv_targetFilter2, c_playerGroupEnemy);
    AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
    lv_vCanidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
    if ((RandomInt(0, 100) >= 50) && (UnitGroupCount(lv_vCanidates, c_unitCountAlive) >= 1)) {
        lv_vTargetUnit = UnitGroupRandomUnit(lv_vCanidates, c_unitCountAlive);
        if ((UnitWeaponCount(lv_vTargetUnit) >= 1)) {
            libCOMU_gf_MM_Shapeshift_Use(lp_aIUnit, lv_vTargetUnit);
            return ;
        }

    }

    AISetFilterBits(lv_targetFilter2, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32))));
    AISetFilterLifeSortReference(lv_targetFilter2, 500.0, 150.0);
    lv_vCanidates = AIGetFilterGroup(lv_targetFilter2, lp_nearByUnits);
    autoB9A60E27_ae = UnitGroupCount(lv_vCanidates, c_unitCountAlive);
    autoB9A60E27_var = 1;
    for ( ; autoB9A60E27_var <= autoB9A60E27_ae; autoB9A60E27_var += 1 ) {
        lv_vTargetUnit = UnitGroupUnit(lv_vCanidates, autoB9A60E27_var);
        if ((UnitWeaponCount(lv_vTargetUnit) >= 1) && (UnitGetPropertyFixed(lv_vTargetUnit, c_unitPropVitalityMax, c_unitPropCurrent) >= 100.0)) {
            libCOMU_gf_MM_Shapeshift_Use(lp_aIUnit, lv_vTargetUnit);
            return ;
        }

    }
}

void libCOMU_gf_MM_Shapeshift_Use (unit lp_pShapeshifter, unit lp_pTargetUnit) {
    // Variable Declarations
    fixed lv_vShapeshifterLife;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(1.0, c_timeAI);
    libNtve_gf_CreateActorAtPoint("NecronomiconRessurect", UnitGetPosition(lp_pShapeshifter));
    Wait(1.0, c_timeAI);
    if (((UnitGetPropertyFixed(lp_pShapeshifter, c_unitPropLife, c_unitPropCurrent) < 10.0) || (UnitFilterMatch(lp_pShapeshifter, libCOMI_gf_MutatorPlayer(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32)))) == false) || (UnitIsAlive(lp_pTargetUnit) == false))) {
        return ;
    }

    libCOMI_gv_mutatorPlayer = libCOMI_gv_mM_PX_PlayerX;
    libCOMI_gv_mutatorHero = lp_pTargetUnit;
    TriggerSendEvent("Mutator ShapeShifters ShapeShiftUse");
    UnitCreate(1, UnitGetType(lp_pTargetUnit), 0, libCOMI_gv_mM_PX_PlayerX, UnitGetPosition(lp_pTargetUnit), UnitGetFacing(lp_pTargetUnit));
    libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    UnitBehaviorAddPlayer(UnitLastCreated(), "DarkArchonMindControlPrevention", libCOMI_gv_mM_PX_PlayerX, 1);
    UnitSetPosition(UnitLastCreated(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pShapeshifter), -1.0, UnitGetPosition(lp_pTargetUnit)), true);
    UnitBehaviorAddPlayer(UnitLastCreated(), "PXOwnership", libCOMI_gf_MutatorPlayer(), 1);
    SoundPlayAtPointForPlayer(SoundLink("Changeling_Disguise", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(UnitLastCreated()), 0.0, 100.0, 0.0);
    libCOMI_gf_MM_CopyBeneficialBehaviors(lp_pTargetUnit, UnitLastCreated());
    lv_vShapeshifterLife = UnitGetPropertyFixed(lp_pShapeshifter, c_unitPropLife, c_unitPropCurrent);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, (2*lv_vShapeshifterLife));
    lv_vShapeshifterLife -= UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLife, c_unitPropCurrent);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, lv_vShapeshifterLife);
    UnitSetCustomValue(UnitLastCreated(), libCOMI_gv_mM_Shapeshifter_CustomValue, (UnitGetPropertyFixed(lp_pShapeshifter, c_unitPropLife, c_unitPropCurrent) - UnitGetPropertyFixed(UnitLastCreated(), c_unitPropVitality, c_unitPropCurrent)));
    UnitGroupAdd(libCOMU_gv_mM_ShapeshiftedUnits, UnitLastCreated());
    libCOMI_gf_MM_UnitCreationManual(UnitLastCreated());
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create ShapeshifterGooTrail2");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create SymbioteCarapaceGlaze");
    UnitRemove(lp_pShapeshifter);
    AISetUnitSuicide(UnitLastCreated(), true);
}

void libCOMU_gf_MM_ShapeshifterSwapModel (unit lp_pShapeshifter) {
    // Automatic Variable Declarations
    string auto9CAC8783_val;
    int auto8CDF2149_val;
    int auto8126C888_val;
    int autoB6464E21_val;

    // Implementation
    auto9CAC8783_val = PlayerRace(3);
    if (auto9CAC8783_val == "Zerg") {
        auto8126C888_val = RandomInt(1, 3);
        if (auto8126C888_val == 1) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "ZerglingXPR", 0, "");
        }
        else if (auto8126C888_val == 2) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Hydralisk", 0, "");
        }
        else if (auto8126C888_val == 3) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "InfestedAbomination", 0, "");
        }
        else {
        }
    }
    else if (auto9CAC8783_val == "Terr") {
        autoB6464E21_val = RandomInt(1, 3);
        if (autoB6464E21_val == 1) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "HellionTank", 0, "");
        }
        else if (autoB6464E21_val == 2) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Goliath", 0, "");
        }
        else if (autoB6464E21_val == 3) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "SiegeTank", 0, "");
        }
        else {
        }
    }
    else {
        auto8CDF2149_val = RandomInt(1, 3);
        if (auto8CDF2149_val == 1) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Stalker_Ihanrii", 0, "");
        }
        else if (auto8CDF2149_val == 2) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Immortal", 0, "");
        }
        else if (auto8CDF2149_val == 3) {
            libNtve_gf_UnitSetVariation(lp_pShapeshifter, "Archon", 0, "");
        }
        else {
        }
    }
}

trigger auto_libCOMU_gf_MM_DelayedActorMessage_Trigger = null;
string auto_libCOMU_gf_MM_DelayedActorMessage_lp_pMessage;
unit auto_libCOMU_gf_MM_DelayedActorMessage_lp_pUnit;
fixed auto_libCOMU_gf_MM_DelayedActorMessage_lp_pTime;

void libCOMU_gf_MM_DelayedActorMessage (string lp_pMessage, unit lp_pUnit, fixed lp_pTime) {
    auto_libCOMU_gf_MM_DelayedActorMessage_lp_pMessage = lp_pMessage;
    auto_libCOMU_gf_MM_DelayedActorMessage_lp_pUnit = lp_pUnit;
    auto_libCOMU_gf_MM_DelayedActorMessage_lp_pTime = lp_pTime;

    if (auto_libCOMU_gf_MM_DelayedActorMessage_Trigger == null) {
        auto_libCOMU_gf_MM_DelayedActorMessage_Trigger = TriggerCreate("auto_libCOMU_gf_MM_DelayedActorMessage_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_MM_DelayedActorMessage_Trigger, false, false);
}

bool auto_libCOMU_gf_MM_DelayedActorMessage_TriggerFunc (bool testConds, bool runActions) {
    string lp_pMessage = auto_libCOMU_gf_MM_DelayedActorMessage_lp_pMessage;
    unit lp_pUnit = auto_libCOMU_gf_MM_DelayedActorMessage_lp_pUnit;
    fixed lp_pTime = auto_libCOMU_gf_MM_DelayedActorMessage_lp_pTime;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_pTime, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, lp_pMessage);
    return true;
}

void libCOMU_gf_MM_SetUnitMaxLifeShields (unit lp_pUnit, fixed lp_pLife, fixed lp_pShields, fixed lp_pEnergy) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pLife >= 0.0)) {
        UnitSetPropertyFixed(lp_pUnit, c_unitPropLifeMax, lp_pLife);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropLifePercent, 100.0);
    }

    if ((lp_pShields >= 0.0)) {
        UnitSetPropertyFixed(lp_pUnit, c_unitPropShieldsMax, lp_pShields);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropShieldsPercent, 100.0);
    }

    if ((lp_pEnergy >= 0.0)) {
        UnitSetPropertyFixed(lp_pUnit, c_unitPropEnergyMax, lp_pEnergy);
        UnitSetPropertyFixed(lp_pUnit, c_unitPropEnergyPercent, 100.0);
    }

}

void libCOMU_gf_MM_HeroSetUp (unit lp_pUnit) {
    // Variable Declarations
    unit lv_vUnit;
    int lv_vPlayer;
    string lv_vType;
    string lv_vHeroInstance;
    fixed lv_vHeroLife;
    fixed lv_vHeroShields;
    fixed lv_vHeroEnergy;
    fixed lv_vHeroEnergyRegen;
    int lv_vHeroBalanceCooldown;
    int lv_vHeroReduceAbilitiesDamage;
    int lv_vHeroReduceWeaponsDamage;
    int lv_vHeroDetector;
    string lv_vHeroAI;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUnit = lp_pUnit;
    lv_vPlayer = UnitGetOwner(lp_pUnit);
    lv_vType = UnitGetType(lv_vUnit);
    lv_vHeroInstance = libCOMU_gf_GetMutatorHeroInstanceByUnitType(UnitGetType(lp_pUnit));
    lv_vHeroLife = UserDataGetFixed("MutatorsHeroes", lv_vHeroInstance, "Life", 1);
    lv_vHeroShields = UserDataGetFixed("MutatorsHeroes", lv_vHeroInstance, "Shields", 1);
    lv_vHeroEnergy = UserDataGetFixed("MutatorsHeroes", lv_vHeroInstance, "Energy", 1);
    lv_vHeroEnergyRegen = UserDataGetFixed("MutatorsHeroes", lv_vHeroInstance, "EnergyRegeneration", 1);
    lv_vHeroBalanceCooldown = UserDataGetInt("MutatorsHeroes", lv_vHeroInstance, "HeroesBalanceCooldowns", 1);
    lv_vHeroReduceAbilitiesDamage = UserDataGetInt("MutatorsHeroes", lv_vHeroInstance, "ReduceAbilityDamage", 1);
    lv_vHeroReduceWeaponsDamage = UserDataGetInt("MutatorsHeroes", lv_vHeroInstance, "ReduceWeaponDamage", 1);
    lv_vHeroDetector = UserDataGetInt("MutatorsHeroes", lv_vHeroInstance, "Detector", 1);
    lv_vHeroAI = UserDataGetString("MutatorsHeroes", lv_vHeroInstance, "AI", 1);

    // Implementation
    UnitGroupAdd(libCOMU_gv_mM_AmonSummonedHeroes, lp_pUnit);
    UnitBehaviorAddPlayer(lp_pUnit, "AmonHeroDuration", lv_vPlayer, 1);
    UnitBehaviorAddPlayer(lp_pUnit, "noDevour", lv_vPlayer, 1);
    UnitBehaviorAddPlayer(lp_pUnit, "DarkArchonMindControlPrevention", lv_vPlayer, 1);
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, "Create MistGlaze");
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Life");
    libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetShowStatusBar 0 Shields");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "Subtitle", UnitGetOwner(lp_pUnit), "");
    libCOMU_gf_MM_SetUnitMaxLifeShields(lp_pUnit, lv_vHeroLife, lv_vHeroShields, lv_vHeroEnergy);
    if ((lv_vHeroBalanceCooldown >= 0)) {
        UnitBehaviorAddPlayer(lp_pUnit, "HeroesBalanceCooldowns", lv_vPlayer, 1);
    }
    if ((lv_vHeroReduceAbilitiesDamage >= 0)) {
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceAbilityDamage10", lv_vPlayer, lv_vHeroReduceAbilitiesDamage);
    }
    if ((lv_vHeroReduceWeaponsDamage >= 0)) {
        UnitBehaviorAddPlayer(lp_pUnit, "ReduceWeaponDamage10", lv_vPlayer, lv_vHeroReduceWeaponsDamage);
    }
    if ((lv_vHeroDetector >= 0)) {
        UnitBehaviorAddPlayer(lp_pUnit, "Detector11", lv_vPlayer, lv_vHeroDetector);
    }
    if ((lv_vHeroEnergyRegen >= 0)) {
        UnitSetPropertyFixed(lp_pUnit, c_unitPropEnergyRegen, lv_vHeroEnergyRegen);
    }
    if ((lv_vHeroAI != "")) {
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(lp_pUnit), "TacticalAIThink", lv_vPlayer, lv_vHeroAI);
    }
    libCOMI_gv_mutatorHero = lp_pUnit;
    TriggerSendEvent("Mutator Hero Created");
    libCOMU_gf_MM_SetUnitMaxLifeShields(lp_pUnit, (UnitGetPropertyFixed(lp_pUnit, c_unitPropLife, c_unitPropCurrent) * libCOMI_gf_MinimumDifficultyValueCoopReal(0.5, 0.65, 0.8, 1.0, 1.0, 1.0)), (UnitGetPropertyFixed(lp_pUnit, c_unitPropShields, c_unitPropCurrent) * libCOMI_gf_MinimumDifficultyValueCoopReal(0.5, 0.65, 0.8, 1.0, 1.0, 1.0)), -1.0);
}

string libCOMU_gf_GetMutatorHeroInstanceByUnitType (string lp_unit) {
    // Variable Declarations
    string lv_heroInstance;

    // Automatic Variable Declarations
    int auto23F668A7_ae;
    int auto23F668A7_var;

    // Variable Initialization

    // Implementation
    auto23F668A7_ae = UserDataInstanceCount("MutatorsHeroes");
    auto23F668A7_var = 1;
    for ( ; auto23F668A7_var <= auto23F668A7_ae; auto23F668A7_var += 1 ) {
        lv_heroInstance = UserDataInstance("MutatorsHeroes", auto23F668A7_var);
        if ((UserDataGetUnit("MutatorsHeroes", lv_heroInstance, "Unit", 1) == lp_unit)) {
            return lv_heroInstance;
        }
    }
    return null;
}

void libCOMU_gf_MM_AmonHeroSpawn (unitgroup lp_pUG) {
    // Variable Declarations
    int lv_vAmonHeroIndex;
    point lv_vWaveSpawnPoint;
    int lv_vSpawnAmount;
    unitgroup lv_vUG;
    int lv_vTries;
    int lv_vPlayer;

    // Automatic Variable Declarations
    int autoBC24B246_ae;
    int autoBC24B246_var;
    const int auto4FF48105_n = 1000;
    int auto4FF48105_i;

    // Variable Initialization
    lv_vAmonHeroIndex = 12;
    lv_vSpawnAmount = FixedToInt(libCOMU_gv_mM_AmonHeroPool);
    lv_vUG = lp_pUG;
    lv_vPlayer = UnitGetOwner(UnitGroupRandomUnit(lp_pUG, c_unitCountAlive));

    // Implementation
    if (((lv_vSpawnAmount <= 0) || (UnitGroupCount(lv_vUG, c_unitCountAlive) < 1))) {
        return ;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_8923A722"), false);
    UnitGroupAddUnitGroup(libCOMU_gv_mM_AmonHeroAttackWaveUnits, lv_vUG);
    if ((libCOMU_gv_mM_AmonHeroRecentWave == false) && (lv_vSpawnAmount == 1) && (GameGetMissionTime() >= 250.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_D5014725"), false);
        libCOMU_gv_mM_AmonHeroPool += 0.5;
    }

    libCOMU_gv_mM_AmonHeroRecentWave = true;
    if ((GameGetMissionTime() >= 600.0)) {
        lv_vSpawnAmount = libNtve_gf_ArithmeticIntClamp(lv_vSpawnAmount, 1, 2);
    }
    else {
        lv_vSpawnAmount = 1;
    }
    libCOMU_gv_mM_AmonHeroPool -= lv_vSpawnAmount;
    libCOMU_gv_mM_AmonHeroTotalHeroSpawned += lv_vSpawnAmount;
    libCOMI_gv_mutatorPlayer = lv_vPlayer;
    TriggerSendEvent("Mutator UsualSuspects Spawn");
    libCOMI_gf_MM_WaitForUnload(lp_pUG);
    autoBC24B246_ae = lv_vSpawnAmount;
    autoBC24B246_var = 1;
    for ( ; autoBC24B246_var <= autoBC24B246_ae; autoBC24B246_var += 1 ) {
        for (auto4FF48105_i = 1; auto4FF48105_i <= auto4FF48105_n; auto4FF48105_i += 1) {
            lv_vTries += 1;
            if ((GameGetMissionTime() >= 780.0)) {
                lv_vAmonHeroIndex = RandomInt(3, libCOMU_gv_mM_AmonHeroMaxNumber);
            }
            else if ((GameGetMissionTime() >= 300.0)) {
                lv_vAmonHeroIndex = RandomInt(3, 12);
            }
            else if (true) {
                lv_vAmonHeroIndex = RandomInt(1, 2);
            }
            if (((libCOMU_gv_mM_AmonHeroUsed[lv_vAmonHeroIndex] == false) || (lv_vTries > 200))) {
                libCOMU_gv_mM_AmonHeroUsed[lv_vAmonHeroIndex] = true;
                lv_vWaveSpawnPoint = UnitGroupCenterOfGroup(lv_vUG);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_mM_AmonHeroUnitTypeArray[lv_vAmonHeroIndex], 0, lv_vPlayer, lv_vWaveSpawnPoint);
                TextExpressionSetToken("Param/Expression/lib_COMU_6D399351", "A", UnitGetName(UnitLastCreated()));
                TextExpressionSetToken("Param/Expression/lib_COMU_6D399351", "B", StringToText(libARRA_gf_UT_PointXYToString(lv_vWaveSpawnPoint, ",", 1)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_6D399351"), false);
                libCOMU_gf_MM_HeroSetUp(UnitLastCreated());
                libCOMI_gf_MM_AddToAttackWave_Check(UnitLastCreated(), lv_vUG);
                libCOMU_gf_MM_AmonHeroPlaySound(lv_vAmonHeroIndex);
                libCOMI_gf_MM_WarpIn(UnitLastCreated());
                AISetUnitScriptControlled(UnitLastCreated(), false);
                break;
            }

        }
    }
    Wait(10.0, c_timeAI);
    libCOMU_gv_mM_AmonHeroRecentWave = false;
}

trigger auto_libCOMU_gf_MM_AmonHeroPlaySound_Trigger = null;
int auto_libCOMU_gf_MM_AmonHeroPlaySound_lp_pSoundIndex;

void libCOMU_gf_MM_AmonHeroPlaySound (int lp_pSoundIndex) {
    auto_libCOMU_gf_MM_AmonHeroPlaySound_lp_pSoundIndex = lp_pSoundIndex;

    if (auto_libCOMU_gf_MM_AmonHeroPlaySound_Trigger == null) {
        auto_libCOMU_gf_MM_AmonHeroPlaySound_Trigger = TriggerCreate("auto_libCOMU_gf_MM_AmonHeroPlaySound_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_MM_AmonHeroPlaySound_Trigger, false, false);
}

bool auto_libCOMU_gf_MM_AmonHeroPlaySound_TriggerFunc (bool testConds, bool runActions) {
    int lp_pSoundIndex = auto_libCOMU_gf_MM_AmonHeroPlaySound_lp_pSoundIndex;

    // Automatic Variable Declarations
    // Implementation
    TriggerQueueEnter();
    SoundPlayForPlayer(libCOMU_gv_mM_AmonHeroSoundArray[lp_pSoundIndex], c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    TriggerQueueExit();
    return true;
}

void libCOMU_gf_CT_ApplySpawnBroodling (unit lp_killedUnit) {
    // Variable Declarations
    unitgroup lv_broodlingGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_broodlingGroup = UnitGroupEmpty();

    // Implementation
    if (((EventUnitDamageDeathCheck(c_deathTypeTimeout) == true) || (libCOMI_gf_MutatorIsEnabled("SpawnBroodlings") == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCOMI_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "KerriganInfestBroodling", 0, UnitGetOwner(lp_killedUnit), UnitGetPosition(lp_killedUnit));
    UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_broodlingGroup, UnitLastCreatedGroup());
    libCOMU_gv_cT_StatBroodlingsSpawned += MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1);
    libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    AISetGroupScriptControlled(lv_broodlingGroup, false);
    AISetGroupSuicide(lv_broodlingGroup, true);
}

void libCOMU_gf_MM_ApplySpawnBroodling (unit lp_killedUnit) {
    // Variable Declarations
    unitgroup lv_broodlingGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_broodlingGroup = UnitGroupEmpty();

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("SpawnBroodlings") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCOMI_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod"))) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "KerriganInfestBroodling", 0, UnitGetOwner(lp_killedUnit), UnitGetPosition(lp_killedUnit));
    UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
    UnitGroupAddUnitGroup(lv_broodlingGroup, UnitLastCreatedGroup());
    libCOMU_gv_cT_StatBroodlingsSpawned += MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1);
    libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    AISetGroupScriptControlled(lv_broodlingGroup, false);
    AISetGroupSuicide(lv_broodlingGroup, true);
}

void libCOMU_gf_CT_ApplySpawnInfested (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((EventUnitDamageDeathCheck(c_deathTypeTimeout) == true) || (libCOMI_gf_MutatorIsEnabled("WalkingInfested") == false) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_killedUnit)) == false) || (UnitGetOwner(lp_killedUnit) == c_playerAny) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCOMI_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (libNtve_gf_KillingPlayer() == UnitGetOwner(lp_killedUnit)) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod") || (PathingType(UnitGetPosition(lp_killedUnit)) != c_pathingGround))) {
        return ;
    }
    else {
        lv_owner = UnitGetOwner(lp_killedUnit);
        libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "InfestedCivilian", c_unitCreateIgnorePlacement, lv_owner, UnitGetPosition(lp_killedUnit));
        UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
    }
}

void libCOMU_gf_MM_ApplySpawnInfested (unit lp_killedUnit) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("WalkingInfested") == false) || (UnitFilterMatch(lp_killedUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)))) == false) || (UnitGroupHasUnit(libCOMI_gv_cT_OnDeathSpawns, lp_killedUnit) == true) || (libNtve_gf_KillingPlayer() == UnitGetOwner(lp_killedUnit)) || (UnitGetType(lp_killedUnit) == "TerranDropPod") || (UnitGetType(lp_killedUnit) == "ZergDropPodLarge") || (UnitGetType(lp_killedUnit) == "ZergDropPod") || (PathingType(UnitGetPosition(lp_killedUnit)) != c_pathingGround))) {
        return ;
    }
    else {
        lv_owner = UnitGetOwner(lp_killedUnit);
        libNtve_gf_CreateUnitsWithDefaultFacing(MaxI(FixedToInt(Ceiling(UnitTypeGetProperty(UnitGetType(lp_killedUnit), c_unitPropSuppliesUsed))), 1), "InfestedCivilian", c_unitCreateIgnorePlacement, lv_owner, UnitGetPosition(lp_killedUnit));
        UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
        AISetGroupSuicide(UnitLastCreatedGroup(), true);
    }
}

void libCOMU_gf_CT_ApplyStructureSteal (unit lp_killingUnit, unit lp_deadStructure, int lp_killingPlayer) {
    // Variable Declarations
    string lv_structureType;
    int lv_moverType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_structureType = UnitGetType(lp_deadStructure);
    if ((lp_killingUnit != lp_deadStructure) && (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_killingUnit)) == true)) {
        UnitKill(lp_deadStructure);
        return ;
    }

    if (((libCOMI_gf_MutatorIsEnabled("StructureSteal") == false) || (UnitGetOwner(lp_deadStructure) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_deadStructure)) == true) || (UnitFilterMatch(lp_deadStructure, 1, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == false) || (UnitHasBehavior2(lp_deadStructure, "MutatorHouseHunters") == false) || (lv_structureType == "NydusNetworkAlly") || (lv_structureType == "NydusCanalAlly") || (lv_structureType == "GreaterNydusWormAlly") || (lv_structureType == "CybrosEscortDownloader") || (lv_structureType == "HHStarport") || (lv_structureType == "HHStarportFlying") || (lv_structureType == "TychusOdin") || (lv_structureType == "TychusResearchCenter") || (lv_structureType == "TychusResearchCenterUnlocked") || (lv_structureType == "PowerTowerStetmann"))) {
        UnitKill(lp_deadStructure);
        return ;
    }

    if ((UnitFilterMatch(lp_deadStructure, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0)) == false)) {
        if ((lv_structureType == "SIInfestedBunkerUprooted")) {
            UnitKill(lp_deadStructure);
        }

        return ;
    }

    UnitBehaviorRemove(lp_deadStructure, "MutatorHouseHunters", 1);
    UnitSetPropertyFixed(lp_deadStructure, c_unitPropLifePercent, 100.0);
    if ((UnitGetPropertyFixed(lp_deadStructure, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
        UnitSetPropertyFixed(lp_deadStructure, c_unitPropShieldsPercent, 100.0);
    }

    UnitSetOwner(lp_deadStructure, lp_killingPlayer, true);
    UnitGroupAdd(libCOMU_gv_cT_StolenStructures, lp_deadStructure);
    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, lp_deadStructure);
    UnitBehaviorRemove(UnitLastCreated(), "PowerUserBaseDefenseSmall", 1);
    UnitBehaviorRemove(UnitLastCreated(), "PowerUserQueue", 1);
    if ((lp_killingUnit != null) && (UnitGetPropertyFixed(lp_killingUnit, c_unitPropMovementSpeed, c_unitPropCurrent) != 0.0) && (UnitPathableToPoint(lp_killingUnit, libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)), 5.0, 100000.0) == false)) {
        UnitKill(lp_deadStructure);
    }

}

void libCOMU_gf_CT_ApplyStructureStealBehavior (unit lp_createdUnit) {
    // Variable Declarations
    string lv_structureType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_structureType = UnitGetType(lp_createdUnit);
    if (((libCOMI_gf_MutatorIsEnabled("StructureSteal") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == true) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), 0)) == false) || (lv_structureType == "DrakkenLaserDrillCoop") || (lv_structureType == "UnfinishedDrakkenLaserDrillCoop") || (lv_structureType == "DamagedSolarForge") || (lv_structureType == "SolarForge") || (lv_structureType == "NydusNetworkAlly") || (lv_structureType == "NydusCanalAlly") || (lv_structureType == "GreaterNydusWormAlly") || (lv_structureType == "HHStarport") || (lv_structureType == "HHStarportFlying") || (lv_structureType == "ToxicNest") || (lv_structureType == "ToxicNestBurrowed"))) {
        return ;
    }

    UnitBehaviorAdd(lp_createdUnit, "MutatorHouseHunters", lp_createdUnit, 1);
}

void libCOMU_gf_CT_RemoveStructureStealBehavior (unit lp_structure) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitHasBehavior2(lp_structure, "MutatorHouseHunters") == false))) {
        return ;
    }

    UnitBehaviorRemove(lp_structure, "MutatorHouseHunters", c_unitBehaviorCountAll);
}

void libCOMU_gf_MM_ApplySupremeCommander (unit lp_pUnit) {
    // Variable Declarations
    fixed lv_vRange;
    bool lv_vScale;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("SupremeCommander") == false) || (UnitGetOwner(lp_pUnit) == c_playerAny) || (lp_pUnit == null) || (UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (UnitHasBehavior2(lp_pUnit, "SupremeCommander") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderMassive") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderWorker") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderStructure") == true) || (UnitHasBehavior2(lp_pUnit, "SupremeCommanderTrain") == true))) {
        return ;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeStructure) == true)) {
        UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderStructure", libCOMI_gf_MutatorPlayer(), 1);
        return ;
    }

    if ((UnitGetCustomValue(lp_pUnit, libCOMI_gv_mM_HeroReviveScale_CustomValue) != libCOMI_gv_mM_HeroReviveScale_CustomValue)) {
        UnitSetCustomValue(lp_pUnit, libCOMI_gv_mM_HeroReviveScale_CustomValue, libCOMI_gv_mM_HeroReviveScale_CustomValue);
        lv_vScale = true;
    }

    if ((libCOMI_gf_MM_IsTrain(lp_pUnit) == true)) {
        libCOMI_gf_MM_UnitScaleController(lp_pUnit, 1.4);
        UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderTrain", libCOMI_gf_MutatorPlayer(), 1);
        return ;
    }

    if (((UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeMassive) == true) || (UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(lp_pUnit), c_unitAttributeMapBoss) == true))) {
        if ((lv_vScale == true)) {
            libCOMI_gf_MM_UnitScaleController(lp_pUnit, 1.55);
        }

        UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderMassive", libCOMI_gf_MutatorPlayer(), 1);
    }
    else {
        if ((UnitTypeTestFlag(UnitGetType(lp_pUnit), c_unitFlagWorker) == false) && (UnitGetType(lp_pUnit) != "TrooperMengsk")) {
            if ((lv_vScale == true)) {
                libCOMI_gf_MM_UnitScaleController(lp_pUnit, 0.7);
            }

            UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommander", libCOMI_gf_MutatorPlayer(), 1);
        }
        else {
            if ((lv_vScale == true)) {
                libCOMI_gf_MM_UnitScaleController(lp_pUnit, 0.7);
            }

            UnitBehaviorAddPlayer(lp_pUnit, "SupremeCommanderWorker", libCOMI_gf_MutatorPlayer(), 1);
        }
    }
}

void libCOMU_gf_CT_ApplyTempDamageReflect (unit lp_damagedUnit, unit lp_damagingUnit, fixed lp_damageAmount, string lp_damagingEffect) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("DamageReflect") == false) || (lp_damageAmount <= 0.0) || (UnitGetOwner(lp_damagingUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(lp_damagingUnit)) == false) || (lp_damagingEffect == "MutatorTempDamageReflect") || (lp_damagingEffect == "ZagaraVoidCoopBanelingBarrageExplodeSearchUnit") || (lp_damagingEffect == "ZagaraVoidCoopInfestedPodsImpactDamage") || (UnitFilterMatch(lp_damagingUnit, UnitGetOwner(lp_damagingUnit), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false))) {
        return ;
    }

    UnitGroupAdd(libCOMU_gv_cT_TempDamageReflectUnits, lp_damagingUnit);
    UnitSetCustomValue(lp_damagingUnit, libCOMU_gv_cTC_TempDamageCustomIndex, (UnitGetCustomValue(lp_damagingUnit, libCOMU_gv_cTC_TempDamageCustomIndex) + lp_damageAmount));
    UnitDamage(lp_damagingUnit, "MutatorTempDamageReflect", lp_damagingUnit, lp_damageAmount);
}

void libCOMU_gf_MM_DeathInTheMist (unit lp_pKilledUnit, unit lp_pKillingUnit) {
    // Automatic Variable Declarations
    // Implementation
    if (((libCOMI_gf_MutatorIsEnabled("TheMist") == false) || (UnitGetOwner(lp_pKilledUnit) == c_playerAny) || (UnitGetOwner(lp_pKillingUnit) == 1) || (UnitGetOwner(lp_pKillingUnit) == 2) || (lp_pKilledUnit == null) || (UnitFilterMatch(lp_pKilledUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == false) || (UnitGroupCount(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(lp_pKilledUnit), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
        return ;
    }

    UnitCreate(1, UnitGetType(lp_pKilledUnit), 0, libCOMI_gv_mM_PX_PlayerX, UnitGetPosition(lp_pKilledUnit), UnitGetFacing(lp_pKilledUnit));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 50.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MistGlaze");
    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
    Wait(0.3, c_timeGame);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "Reanimator_Resurrect_Coop", null, null, null);
}

trigger auto_libCOMU_gf_MM_TerrorSpawn_Trigger = null;
unit auto_libCOMU_gf_MM_TerrorSpawn_lp_pTargetUnit;

void libCOMU_gf_MM_TerrorSpawn (unit lp_pTargetUnit) {
    auto_libCOMU_gf_MM_TerrorSpawn_lp_pTargetUnit = lp_pTargetUnit;

    if (auto_libCOMU_gf_MM_TerrorSpawn_Trigger == null) {
        auto_libCOMU_gf_MM_TerrorSpawn_Trigger = TriggerCreate("auto_libCOMU_gf_MM_TerrorSpawn_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_MM_TerrorSpawn_Trigger, false, false);
}

bool auto_libCOMU_gf_MM_TerrorSpawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pTargetUnit = auto_libCOMU_gf_MM_TerrorSpawn_lp_pTargetUnit;

    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto7FD1585A_n = 500;
    int auto7FD1585A_i;

    // Variable Initialization

    // Implementation
    for (auto7FD1585A_i = 1; auto7FD1585A_i <= auto7FD1585A_n; auto7FD1585A_i += 1) {
        lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_pTargetUnit))), 7.0));
        if (libCOMI_gf_ConnectedByGroundPath(lv_vPoint) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 2.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            break;
        }

    }
    libNtve_gf_UnitCreateFacingPoint(1, "ShadowTerror", 0, libCOMI_gf_MutatorPlayer(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_pTargetUnit), 2.0, UnitGetPosition(UnitGroupClosestToPoint(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(lp_pTargetUnit)))), UnitGetPosition(lp_pTargetUnit));
    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
    UnitSetState(UnitLastCreated(), c_unitStatePaused, true);
    SoundPlayOnUnitForPlayer(SoundLink("ShadowTerrorSound", -1), c_maxPlayers, PlayerGroupAll(), UnitLastCreated(), 1.0, 200.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MistGlaze");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.001000");
    libCOMI_gf_MM_UnitScaleController(UnitLastCreated(), libCOMU_gv_mM_ShadowTerrorSize);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 1.000000 2.000000");
    Wait(0.5, c_timeGame);
    UnitSetState(UnitLastCreated(), c_unitStatePaused, false);
    Wait(6.0, c_timeGame);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitLastCreated()), -10.0, UnitGetPosition(lp_pTargetUnit))), c_orderQueueReplace);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.000000 1.500000");
    Wait(1.5, c_timeGame);
    UnitRemove(UnitLastCreated());
    return true;
}

trigger auto_libCOMU_gf_CT_TrickOrTreaterLogic_Trigger = null;
unit auto_libCOMU_gf_CT_TrickOrTreaterLogic_lp_civilianUnit;

void libCOMU_gf_CT_TrickOrTreaterLogic (unit lp_civilianUnit) {
    auto_libCOMU_gf_CT_TrickOrTreaterLogic_lp_civilianUnit = lp_civilianUnit;

    if (auto_libCOMU_gf_CT_TrickOrTreaterLogic_Trigger == null) {
        auto_libCOMU_gf_CT_TrickOrTreaterLogic_Trigger = TriggerCreate("auto_libCOMU_gf_CT_TrickOrTreaterLogic_TriggerFunc");
    }

    TriggerExecute(auto_libCOMU_gf_CT_TrickOrTreaterLogic_Trigger, false, false);
}

bool auto_libCOMU_gf_CT_TrickOrTreaterLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_civilianUnit = auto_libCOMU_gf_CT_TrickOrTreaterLogic_lp_civilianUnit;

    // Variable Declarations
    unit lv_nearbyUnit;
    int lv_index;
    fixed lv_killerSupply;
    fixed lv_victimSupply;
    fixed lv_newSupply;
    fixed lv_lifePercentage;
    fixed lv_shieldPercentage;
    int lv_tier;
    int lv_type;
    int lv_intSupply;
    int lv_intUnit;
    string lv_newUnitType;
    string[11][11] lv_unitTypes;
    point lv_spawnPosition;
    string lv_killerTier;
    string lv_killingUnitTestUnit;
    int lv_tierEndpoint;
    string lv_endpointTestUnit;
    int lv_tierCeiling;
    int lv_tierFloor;

    // Automatic Variable Declarations
    fixed auto3045BD6C_at;
    const int auto63C6EB58_ae = 1;
    const int auto63C6EB58_ai = -1;
    const int auto88F3D2BC_ae = 1;
    const int auto88F3D2BC_ai = -1;
    string auto67D5283B_val;

    // Variable Initialization

    // Implementation
    UnitSetState(lp_civilianUnit, c_unitStateInvulnerable, true);
    auto3045BD6C_at = 0;
    while (!((libNtve_gf_UnitInRegion(lp_civilianUnit, RegionCircle(UnitGetPosition(libCOMU_gv_cT_CandyBowlUnit), 3.0)) == true)) && auto3045BD6C_at <= 300.0) {
        Wait(1.0, c_timeGame);
        auto3045BD6C_at = auto3045BD6C_at + 1.0;
    }
    if ((libNtve_gf_UnitInRegion(lp_civilianUnit, RegionCircle(UnitGetPosition(libCOMU_gv_cT_CandyBowlUnit), 3.0)) == true) && (UnitAbilityChargeInfo(libCOMU_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft) >= 1)) {
        UnitAbilityAddChargeUsed(libCOMU_gv_cT_CandyBowlUnit, "MutatorBuyCandy", "Abil/MutatorBuyCandy", 1.0);
        UnitIssueOrder(lp_civilianUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lp_civilianUnit), c_animNameDefault, "Stand Victory", 0, c_animTimeDefault);
        TextTagSetText(libCOMU_gv_cT_CandyBowlTextTag, TextExpressionAssemble("Param/Expression/lib_COMU_03AF339A"));
        libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCOMU_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
        Wait(3.0, c_timeGame);
        UnitRemove(lp_civilianUnit);
    }
    else {
        UnitIssueOrder(lp_civilianUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        lv_tierFloor = 1;
        if ((GameGetMissionTime() < 120.0)) {
            lv_tierCeiling = 1;
        }
        else if ((GameGetMissionTime() < 240.0)) {
            lv_tierCeiling = 2;
        }
        else if ((GameGetMissionTime() < 360.0)) {
            lv_tierCeiling = 3;
        }
        else if ((GameGetMissionTime() < 420.0)) {
            lv_tierCeiling = 4;
            lv_tierFloor = 2;
        }
        else if ((GameGetMissionTime() < 450.0)) {
            lv_tierCeiling = 5;
            lv_tierFloor = 3;
        }
        else if ((GameGetMissionTime() < 480.0)) {
            lv_tierCeiling = 6;
            lv_tierFloor = 4;
        }
        else if ((GameGetMissionTime() < 510.0)) {
            lv_tierCeiling = 7;
            lv_tierFloor = 5;
        }
        else if ((GameGetMissionTime() < 540.0)) {
            lv_tierCeiling = 8;
            lv_tierFloor = 6;
        }
        else if ((GameGetMissionTime() < 570.0)) {
            lv_tierCeiling = 9;
            lv_tierFloor = 7;
        }
        else if ((GameGetMissionTime() < 600.0)) {
            lv_tierCeiling = 10;
            lv_tierFloor = 8;
        }
        lv_newSupply = RandomInt(lv_tierFloor, lv_tierCeiling);
        lv_tier = MinI(FixedToInt(lv_newSupply), 10);
        for ( ; ( (auto63C6EB58_ai >= 0 && lv_tier <= auto63C6EB58_ae) || (auto63C6EB58_ai < 0 && lv_tier >= auto63C6EB58_ae) ) ; lv_tier += auto63C6EB58_ai ) {
            lv_tierEndpoint = 8;
            for ( ; ( (auto88F3D2BC_ai >= 0 && lv_tierEndpoint <= auto88F3D2BC_ae) || (auto88F3D2BC_ai < 0 && lv_tierEndpoint >= auto88F3D2BC_ae) ) ; lv_tierEndpoint += auto88F3D2BC_ai ) {
                lv_endpointTestUnit = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", lv_tierEndpoint);
                if ((lv_endpointTestUnit != "")) {
                    break;
                }

            }
            lv_newUnitType = UserDataGetUnit("EvolutionTiers", UserDataInstance("EvolutionTiers", lv_tier), "UnitsToEvolveInto", RandomInt(1, lv_tierEndpoint));
            if ((lv_newUnitType != "")) {
                break;
            }

        }
        lv_spawnPosition = UnitGetPosition(lp_civilianUnit);
        PointSetFacing(lv_spawnPosition, UnitGetFacing(lp_civilianUnit));
        UnitRemove(lp_civilianUnit);
        libNtve_gf_CreateUnitsAtPoint2(1, lv_newUnitType, c_unitCreateIgnorePlacement, RandomInt(3, 4), lv_spawnPosition);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyPercent, 100.0);
        UnitBehaviorAdd(UnitLastCreated(), "MutatorEvolve", UnitLastCreated(), 1);
        auto67D5283B_val = libARRA_gf_GetUnitRace(UnitLastCreated());
        if (auto67D5283B_val == "Prot") {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveProtoss");
        }
        else if (auto67D5283B_val == "Terr") {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveTerran");
        }
        else if (auto67D5283B_val == "Zerg") {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create MutatorQuickEvolveZerg");
        }
        UnitCreateEffectUnit(lp_civilianUnit, "MutatorQuickEvolveMissleLaunch", UnitLastCreated());
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    return true;
}

void libCOMU_gf_CT_ApplyUberDarkness (string lp_upgrade, int lp_player) {
    // Automatic Variable Declarations
    string auto85398AE1_val;

    // Implementation
    auto85398AE1_val = lp_upgrade;
    if (auto85398AE1_val == "ZeratulArtifactTier3_RoboticsBay") {
        CatalogFieldValueSet(c_gameCatalogUnit, "ZeratulObserver", "Sight", lp_player, "0");
        CatalogFieldValueSet(c_gameCatalogUnit, "ZeratulObserverSiegeMode", "Sight", lp_player, "0");
    }
    else {
    }
}

void libCOMU_gf_CT_ApplyUnitSpeed (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCOMI_gf_MutatorIsEnabled("UnitSpeed") == false) || (UnitGetOwner(lp_createdUnit) == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(lp_createdUnit)) == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (lv_createdUnitType == "Caboose") || (lv_createdUnitType == "TarsonisEngineFast") || (lv_createdUnitType == "TarsonisEngine") || (lv_createdUnitType == "FreightCar") || (lv_createdUnitType == "ProtossFrigate") || (lv_createdUnitType == "MutatorStormCloud") || (lv_createdUnitType == "MutatorPurifierBeam") || (lv_createdUnitType == "MutatorTornado") || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) == 0.0) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) > 5.5))) {
        return ;
    }

    libCOMU_gv_cT_StatSpeedFreaksSpeedAdded += (5.5 - UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, 5.5);
}

void libCOMU_gf_CT_RemoveUnitSpeed (unit lp_speedUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((libCOMI_gf_MutatorIsEnabled("UnitSpeed") == false)) {
        return ;
    }

    UnitResetSpeed(lp_speedUnit);
}

void libCOMU_gf_MM_ApplyUnitSpeed (unit lp_createdUnit) {
    // Variable Declarations
    string lv_createdUnitType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_createdUnitType = UnitGetType(lp_createdUnit);
    if (((libCOMI_gf_MutatorIsEnabled("UnitSpeed") == false) || (UnitFilterMatch(lp_createdUnit, 1, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)))) == false) || (lv_createdUnitType == "Caboose") || (lv_createdUnitType == "TarsonisEngineFast") || (lv_createdUnitType == "TarsonisEngine") || (lv_createdUnitType == "FreightCar") || (lv_createdUnitType == "ProtossFrigate") || (lv_createdUnitType == "MutatorStormCloud") || (lv_createdUnitType == "MutatorPurifierBeam") || (lv_createdUnitType == "MutatorTornado") || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) == 0.0) || (UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent) > 5.5))) {
        return ;
    }

    libCOMU_gv_cT_StatSpeedFreaksSpeedAdded += (5.5 - UnitGetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, c_unitPropCurrent));
    UnitSetPropertyFixed(lp_createdUnit, c_unitPropBaseMovementSpeed, 5.5);
}

void libCOMU_gf_CT_VoidRiftCreate (int lp_forPlayer) {
    // Variable Declarations
    int lv_riftPlayer;
    int lv_spawnAttempt;
    point lv_riftLocation;
    fixed lv_maxDistance;

    // Automatic Variable Declarations
    const int autoB400F7EB_ae = 1000;
    const int autoB400F7EB_ai = 1;

    // Variable Initialization

    // Implementation
    if ((GameGetMissionTime() < 480.0)) {
        lv_maxDistance = 80.0;
    }
    else if (true) {
        lv_maxDistance = 500.0;
    }
    lv_spawnAttempt = 1;
    for ( ; ( (autoB400F7EB_ai >= 0 && lv_spawnAttempt <= autoB400F7EB_ae) || (autoB400F7EB_ai < 0 && lv_spawnAttempt >= autoB400F7EB_ae) ) ; lv_spawnAttempt += autoB400F7EB_ai ) {
        lv_riftLocation = RegionRandomPoint(RegionPlayableMap());
        if (((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_riftLocation, 30, libCOMI_gf_AffectedPlayers()) == false) || (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_riftLocation, lv_maxDistance, libCOMI_gf_AffectedPlayers()) == true) || (libCOMI_gf_CC_SpawnAllowedAtPoint(lv_riftLocation) == false) || (UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(lv_riftLocation, 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 3) || (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_riftLocation, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || libCOMI_gf_ConnectedByGroundPath(lv_riftLocation) || (UnitGroupCount(UnitGroup("MutatorVoidRift", c_playerAny, RegionCircle(lv_riftLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0) || ((libCOMI_gf_CC_CurrentMap() == "AC_UlnarLocks") && (GameGetMissionTime() < 300.0) && (AIPathingCostMap(lv_riftLocation, libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(libCOMI_gf_AffectedPlayers(), 1))) > 70)))) {
            lv_riftLocation = null;
            continue;
        }
        else {
            break;
        }
    }
    if ((lv_riftLocation == null)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorVoidRift", 0, lv_riftPlayer, lv_riftLocation);
    libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_riftLocation, 2.0, Color(100.00, 0.00, 0.00));
    libCOMU_gv_cT_VoidRiftCount += 1;
    UnitSetCustomValue(UnitLastCreated(), 0, libCOMU_gv_cT_VoidRiftCount);
    UnitGroupAdd(libCOMU_gv_cT_VoidRifts, UnitLastCreated());
    libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    DataTableSetTimer(true, ("RiftTimer" + IntToString(libCOMU_gv_cT_VoidRiftCount)), TimerCreate());
    TimerStart(DataTableGetTimer(true, ("RiftTimer" + IntToString(libCOMU_gv_cT_VoidRiftCount))), libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_forPlayer), 90.0, 70.0, 45.0, 30.0, 30.0, 30.0), false, c_timeAI);
    DataTableSetTimer(true, ("RiftTrickleTimer" + IntToString(libCOMU_gv_cT_VoidRiftCount)), TimerCreate());
    TimerStart(DataTableGetTimer(true, ("RiftTrickleTimer" + IntToString(libCOMU_gv_cT_VoidRiftCount))), libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_forPlayer), 20.0, 18.0, 13.0, 10.0, 10.0, 10.0), false, c_timeAI);
}

void libCOMU_gf_CT_VoidRiftBirthUnits (unit lp_spawningRift, unitgroup lp_birthUnits) {
    // Variable Declarations
    unit lv_birthingUnit;
    int lv_birthAttempt;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    unitgroup autoED385CB4_g;
    int autoED385CB4_u;
    const int auto0B9B8DB4_ae = 100;
    const int auto0B9B8DB4_ai = 1;

    // Variable Initialization

    // Implementation
    autoED385CB4_g = lp_birthUnits;
    autoED385CB4_u = UnitGroupCount(autoED385CB4_g, c_unitCountAll);
    for (;; autoED385CB4_u -= 1) {
        lv_birthingUnit = UnitGroupUnitFromEnd(autoED385CB4_g, autoED385CB4_u);
        if (lv_birthingUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_birthingUnit, false);
        lv_birthAttempt = 1;
        for ( ; ( (auto0B9B8DB4_ai >= 0 && lv_birthAttempt <= auto0B9B8DB4_ae) || (auto0B9B8DB4_ai < 0 && lv_birthAttempt >= auto0B9B8DB4_ae) ) ; lv_birthAttempt += auto0B9B8DB4_ai ) {
            lv_spawnLocation = PointWithOffsetPolar(UnitGetPosition(lp_spawningRift), 4.0, libNtve_gf_RandomAngle());
            if ((PathingType(lv_spawnLocation) == c_pathingGround) && libCOMI_gf_ConnectedByGroundPath(lv_spawnLocation)) {
                UnitSetPosition(lv_birthingUnit, lv_spawnLocation, false);
                if ((AIPathingCostUnit(lv_birthingUnit, libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(libCOMI_gf_AffectedPlayers(), 1)), c_ignoreEnemyBuildings) > 0)) {
                    break;
                }

            }

        }
        UnitSetPosition(lv_birthingUnit, lv_spawnLocation, false);
        UnitCreateEffectUnit(lp_spawningRift, "MutatorVoidRiftSpawnLM", lv_birthingUnit);
        libCOMU_gv_cT_StatVoidRiftUnitsSpawned += 1;
    }
}

void libCOMU_gf_CT_VoidRiftSpawnUnitsPlain (int lp_player, point lp_spawnLocation) {
    // Variable Declarations
    fixed lv_resourceValue;
    string lv_spawnType;
    int lv_maxRandom;
    fixed lv_difficultyMultiplier;

    // Automatic Variable Declarations
    int auto84D90EE7_val;

    // Variable Initialization
    lv_difficultyMultiplier = (2.0 + libCOMI_gf_CC_DifficultyIndex(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player)));

    // Implementation
    libCOMU_gv_cT_VoidRiftLastSpawnedUnits = UnitGroupEmpty();
    if ((GameGetMissionTime() >= 1200.0)) {
        lv_resourceValue = (200.0 * lv_difficultyMultiplier);
    }
    else if ((GameGetMissionTime() >= 500.0)) {
        lv_resourceValue = (100.0 * lv_difficultyMultiplier);
    }
    else if (true) {
        lv_resourceValue = (50.0 * lv_difficultyMultiplier);
    }
    if ((GameGetMissionTime() >= 1000.0)) {
        lv_maxRandom = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 10, 15, 19, 20, 20, 20);
    }
    else if ((GameGetMissionTime() >= 600.0)) {
        lv_maxRandom = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lp_player), 10, 10, 13, 16, 16, 16);
    }
    else if (true) {
        lv_maxRandom = 10;
    }
    while ((lv_resourceValue > 0.0)) {
        auto84D90EE7_val = RandomInt(1, lv_maxRandom);
        if (auto84D90EE7_val == 1) {
            lv_spawnType = "Zergling";
        }
        else if (auto84D90EE7_val == 2) {
            lv_spawnType = "Baneling";
        }
        else if (auto84D90EE7_val == 3) {
            lv_spawnType = "Roach";
        }
        else if (auto84D90EE7_val == 4) {
            lv_spawnType = "Hydralisk";
        }
        else if (auto84D90EE7_val == 5) {
            lv_spawnType = "Marine";
        }
        else if (auto84D90EE7_val == 6) {
            lv_spawnType = "Marauder";
        }
        else if (auto84D90EE7_val == 7) {
            lv_spawnType = "Hellion";
        }
        else if (auto84D90EE7_val == 8) {
            lv_spawnType = "Adept";
        }
        else if (auto84D90EE7_val == 9) {
            lv_spawnType = "Zealot";
        }
        else if (auto84D90EE7_val == 10) {
            lv_spawnType = "Stalker";
        }
        else if (auto84D90EE7_val == 11) {
            lv_spawnType = "SiegeTank";
        }
        else if (auto84D90EE7_val == 12) {
            lv_spawnType = "Immortal";
        }
        else if (auto84D90EE7_val == 13) {
            lv_spawnType = "Ravager";
        }
        else if (auto84D90EE7_val == 14) {
            lv_spawnType = "Mutalisk";
        }
        else if (auto84D90EE7_val == 15) {
            lv_spawnType = "VoidRay";
        }
        else if (auto84D90EE7_val == 16) {
            lv_spawnType = "Banshee";
        }
        else if (auto84D90EE7_val == 17) {
            lv_spawnType = "HighTemplar";
        }
        else if (auto84D90EE7_val == 18) {
            lv_spawnType = "Raven";
        }
        else if (auto84D90EE7_val == 19) {
            lv_spawnType = "Infestor";
        }
        else if (auto84D90EE7_val == 20) {
            lv_spawnType = "HybridDestroyer";
        }
        else {
            lv_spawnType = "Zergling";
        }
        if ((lv_spawnType == null)) {
            lv_spawnType = "Zergling";
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_spawnType, c_unitCreateIgnorePlacement, lp_player, lp_spawnLocation);
        libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
        UnitGroupAdd(libCOMU_gv_cT_VoidRiftLastSpawnedUnits, UnitLastCreated());
        lv_resourceValue -= UnitTypeGetCost(lv_spawnType, c_unitCostMinerals);
        lv_resourceValue -= UnitTypeGetCost(lv_spawnType, c_unitCostVespene);
    }
}

unitgroup libCOMU_gf_CT_VoidRiftLastSpawnedUnits () {
    // Automatic Variable Declarations
    // Implementation
    return libCOMU_gv_cT_VoidRiftLastSpawnedUnits;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Mutators PlayerX Initialize
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MutatorsPlayerXInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    if ((libCOMI_gf_MutatorIsEnabled("JustDie") == true)) {
        TechTreeUpgradeAddLevel(libCOMI_gv_mM_PX_PlayerX, "MutatorJustDie", 1);
    }

    TriggerEnable(libCOMU_gt_MM_PX_UnitDeathFix, true);
    TriggerEnable(libCOMU_gt_MM_PX_UnitDeathFix2, true);
    TriggerEnable(libCOMU_gt_MM_PX_UnitDamageFix, true);
    TriggerEnable(libCOMU_gt_MM_PX_UnitDamageFix2, true);
    TriggerEnable(libCOMU_gt_MM_PX_UnitCreationFix, true);
    TriggerEnable(libCOMU_gt_MM_LongRangeFix, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MutatorsPlayerXInitialize_Init () {
    libCOMU_gt_MutatorsPlayerXInitialize = TriggerCreate("libCOMU_gt_MutatorsPlayerXInitialize_Func");
    TriggerAddEventGeneric(libCOMU_gt_MutatorsPlayerXInitialize, "Mutators PlayerX Initialize");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitDeathFix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_PX_UnitDeathFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingPlayer() == libCOMI_gv_mM_PX_PlayerX))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyEvolve(libNtve_gf_KillingUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_PX_UnitDeathFix_Init () {
    libCOMU_gt_MM_PX_UnitDeathFix = TriggerCreate("libCOMU_gt_MM_PX_UnitDeathFix_Func");
    TriggerEnable(libCOMU_gt_MM_PX_UnitDeathFix, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_PX_UnitDeathFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitDeathFix 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_PX_UnitDeathFix2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libCOMI_gv_mM_PX_PlayerX))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitDamageDeathCheck(c_deathTypeTimeout) == false)) {
        libCOMU_gf_MM_ApplySpawnBroodling(EventUnit());
        libCOMU_gf_MM_ApplySpawnInfested(EventUnit());
    }

    libCOMU_gf_MM_ApplyDeathAOE(EventUnit());
    libCOMU_gf_MM_ApplyAvenger(EventUnit());
    libCOMU_gf_MM_ApplyDeathFire(EventUnit());
    libCOMU_gf_MM_ApplyFireworks(EventUnit());
    libCOMU_gf_MM_ApplyDeathPull(EventUnit());
    libCOMU_gf_MM_ApplyMomentOfSilence(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_PX_UnitDeathFix2_Init () {
    libCOMU_gt_MM_PX_UnitDeathFix2 = TriggerCreate("libCOMU_gt_MM_PX_UnitDeathFix2_Func");
    TriggerEnable(libCOMU_gt_MM_PX_UnitDeathFix2, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_PX_UnitDeathFix2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitCreationFix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_PX_UnitCreationFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == libCOMI_gv_mM_PX_PlayerX))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyPermaCloak(EventUnitCreatedUnit());
    libCOMU_gf_MM_ApplyUnitSpeed(EventUnitCreatedUnit());
    libCOMU_gf_MM_ApplyAllSpellsEnergy(EventUnitCreatedUnit());
    libCOMU_gf_MM_ApplyPolarity(EventUnitCreatedUnit());
    libCOMU_gf_MM_ApplyPlague(EventUnitCreatedUnit());
    libCOMU_gf_MM_ApplyHardenedWill(EventUnitCreatedUnit());
    libCOMU_gf_MM_ApplyInspiration(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_PX_UnitCreationFix_Init () {
    libCOMU_gt_MM_PX_UnitCreationFix = TriggerCreate("libCOMU_gt_MM_PX_UnitCreationFix_Func");
    TriggerEnable(libCOMU_gt_MM_PX_UnitCreationFix, false);
    TriggerAddEventUnitCreated(libCOMU_gt_MM_PX_UnitCreationFix, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitDamageFix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_PX_UnitDamageFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() == libCOMI_gv_mM_PX_PlayerX))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyConcussiveAttacks(EventUnit(), EventUnitDamageSourceUnit());
    libCOMU_gf_MM_ApplyLifeLeech(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    if ((RandomInt(0, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_GetMissionDifficulty(), 500, 400, 300, 200, 0, 0)) <= FixedToInt(EventUnitDamageAmount()))) {
        libCOMU_gf_MM_ApplyEvolve(EventUnitDamageSourceUnit(), EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_PX_UnitDamageFix_Init () {
    libCOMU_gt_MM_PX_UnitDamageFix = TriggerCreate("libCOMU_gt_MM_PX_UnitDamageFix_Func");
    TriggerEnable(libCOMU_gt_MM_PX_UnitDamageFix, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_MM_PX_UnitDamageFix, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PX_UnitDamageFix 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_PX_UnitDamageFix2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == libCOMI_gv_mM_PX_PlayerX))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyBarrier(EventUnit(), EventUnitDamageSourceUnit());
    libCOMU_gf_MM_ApplySideStep(EventUnit(), EventUnitDamageSourceUnit());
    libCOMU_gf_CT_ApplyDamageBounce3(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount(), EventUnitDamageEffect());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_PX_UnitDamageFix2_Init () {
    libCOMU_gt_MM_PX_UnitDamageFix2 = TriggerCreate("libCOMU_gt_MM_PX_UnitDamageFix2_Func");
    TriggerEnable(libCOMU_gt_MM_PX_UnitDamageFix2, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_MM_PX_UnitDamageFix2, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugDropPodSpawnNow
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugDropPodSpawnNow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MutatorIsEnabled("DropPods") == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "2")) {
        libCOMU_gv_cT_DebugDropPodSpawnNow[2] = true;
    }
    else {
        libCOMU_gv_cT_DebugDropPodSpawnNow[1] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugDropPodSpawnNow_Init () {
    libCOMU_gt_CT_DebugDropPodSpawnNow = TriggerCreate("libCOMU_gt_CT_DebugDropPodSpawnNow_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugDropPodSpawnNow, c_playerAny, "dropnow", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMakeVoidRift
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugMakeVoidRift_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MutatorIsEnabled("VoidRifts") == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_VoidRiftCreate(1);
    libCOMU_gf_CT_VoidRiftCreate(2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugMakeVoidRift_Init () {
    libCOMU_gt_CT_DebugMakeVoidRift = TriggerCreate("libCOMU_gt_CT_DebugMakeVoidRift_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugMakeVoidRift, c_playerAny, "riftme", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMakePurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugMakePurifierBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MutatorIsEnabled("PurifierBeam") == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_PurifierBeamController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugMakePurifierBeam_Init () {
    libCOMU_gt_CT_DebugMakePurifierBeam = TriggerCreate("libCOMU_gt_CT_DebugMakePurifierBeam_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugMakePurifierBeam, c_playerAny, "beammeup", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugRandomCycleNow
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugRandomCycleNow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MutatorIsEnabled("CycleRandom") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libCOMI_gv_cT_RandomCycleTimer, 0.5, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugRandomCycleNow_Init () {
    libCOMU_gt_CT_DebugRandomCycleNow = TriggerCreate("libCOMU_gt_CT_DebugRandomCycleNow_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugRandomCycleNow, c_playerAny, "cyclenow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugSpawnReanimator
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugSpawnReanimator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MutatorIsEnabled("Reanimators") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorVoidReanimator", 0, libCOMI_gf_MutatorPlayer(), CameraGetTarget(EventPlayer()));
    UnitGroupAdd(libCOMU_gv_cT_Reanimators, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugSpawnReanimator_Init () {
    libCOMU_gt_CT_DebugSpawnReanimator = TriggerCreate("libCOMU_gt_CT_DebugSpawnReanimator_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugSpawnReanimator, c_playerAny, "-reanim", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugAllCastersForceAbility
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugAllCastersForceAbility_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MutatorIsEnabled("OopsAllCasters") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_cT_DebugAllCastersAbility = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((libCOMU_gv_cT_DebugAllCastersAbility >= (libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersMax))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_D688AE85"), true);
        libCOMU_gv_cT_DebugAllCastersAbility = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugAllCastersForceAbility_Init () {
    libCOMU_gt_CT_DebugAllCastersForceAbility = TriggerCreate("libCOMU_gt_CT_DebugAllCastersForceAbility_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugAllCastersForceAbility, c_playerAny, "forcecast", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugAllCastersSetEnergy
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugAllCastersSetEnergy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MutatorIsEnabled("OopsAllCasters") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_cT_AllCastersPlayerEnergy[EventPlayer()] = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((libCOMU_gv_cT_DebugAllCastersAbility >= (libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersMax))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_C051D69D"), true);
        libCOMU_gv_cT_DebugAllCastersAbility = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugAllCastersSetEnergy_Init () {
    libCOMU_gt_CT_DebugAllCastersSetEnergy = TriggerCreate("libCOMU_gt_CT_DebugAllCastersSetEnergy_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugAllCastersSetEnergy, c_playerAny, "playerenergy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMissileMe
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugMissileMe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileLauncher;
    point lv_launchLocation;
    int lv_type;

    // Automatic Variable Declarations
    int autoA43082AB_val;
    int auto75355AB2_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCOMI_gf_MutatorPlayer(), Point(0.0, 0.0));
    lv_missileLauncher = UnitLastCreated();
    autoA43082AB_val = RandomInt(1, 4);
    if (autoA43082AB_val == 1) {
        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), libNtve_gf_HeightOfRegion(RegionEntireMap()));
    }
    else if (autoA43082AB_val == 2) {
        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), 0.0);
    }
    else if (autoA43082AB_val == 3) {
        lv_launchLocation = Point(0.0, RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
    }
    else if (autoA43082AB_val == 4) {
        lv_launchLocation = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
    }
    else {
    }
    UnitSetPosition(lv_missileLauncher, lv_launchLocation, false);
    CameraPan(EventPlayer(), lv_launchLocation, 0.0, -1, 10.0, false);
    if ((StringWord(EventChatMessage(false), 2) == "")) {
        lv_type = 1;
    }
    else {
        lv_type = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    auto75355AB2_val = lv_type;
    if (auto75355AB2_val == 2) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileSplitterLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    else if (auto75355AB2_val == 3) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissilePointDefenseLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    else if (auto75355AB2_val == 4) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissilePointDefenseNukeEscortLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    else if (auto75355AB2_val == 5) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileNukeLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    else {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileStandardLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    Wait(0.1, c_timeGame);
    UnitKill(lv_missileLauncher);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugMissileMe_Init () {
    libCOMU_gt_CT_DebugMissileMe = TriggerCreate("libCOMU_gt_CT_DebugMissileMe_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugMissileMe, c_playerAny, "missileme", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugMissileGo
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugMissileGo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missileLauncher;
    point lv_launchLocation;
    int lv_type;
    point lv_targetUnitPoint;

    // Automatic Variable Declarations
    int autoC9A48A33_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCOMI_gf_MutatorPlayer(), Point(0.0, 0.0));
    lv_missileLauncher = UnitLastCreated();
    UnitSetPosition(lv_missileLauncher, CameraGetTarget(1), false);
    if ((StringWord(EventChatMessage(false), 2) == "")) {
        lv_type = 1;
    }
    else {
        lv_type = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    autoC9A48A33_val = lv_type;
    if (autoC9A48A33_val == 2) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileSplitterLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    else if (autoC9A48A33_val == 3) {
        lv_targetUnitPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
        UnitCreateEffectPoint(lv_missileLauncher, "MutatorMissilePointDefenseLaunch", libNtve_gf_PointFromXYZ(PointGetX(lv_targetUnitPoint), PointGetY(lv_targetUnitPoint), 2.0));
    }
    else if (autoC9A48A33_val == 4) {
        lv_targetUnitPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
        UnitCreateEffectPoint(lv_missileLauncher, "MutatorMissilePointDefenseNukeEscortLaunch", libNtve_gf_PointFromXYZ(PointGetX(lv_targetUnitPoint), PointGetY(lv_targetUnitPoint), 2.0));
    }
    else if (autoC9A48A33_val == 5) {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileNukeLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    else {
        UnitCreateEffectUnit(lv_missileLauncher, "MutatorMissileStandardLaunch", UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive));
    }
    Wait(0.1, c_timeGame);
    UnitKill(lv_missileLauncher);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugMissileGo_Init () {
    libCOMU_gt_CT_DebugMissileGo = TriggerCreate("libCOMU_gt_CT_DebugMissileGo_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugMissileGo, c_playerAny, "missilego", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugPathCost
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugPathCost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAlive) > 0)) {
        TextExpressionSetToken("Param/Expression/lib_COMU_9C0FF2F9", "A", FixedToText(AIPathingCostMap(UnitGetPosition(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), libARRA_gf_GetPlayerStartPosition(1)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMU_9C0FF2F9", "B", FixedToText(AIPathingCostMap(UnitGetPosition(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), libARRA_gf_GetPlayerStartPosition(2)), c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_9C0FF2F9"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_COMU_E4EE57D5", "A", FixedToText(AIPathingCostMap(CameraGetTarget(EventPlayer()), libARRA_gf_GetPlayerStartPosition(1)), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMU_E4EE57D5", "B", FixedToText(AIPathingCostMap(CameraGetTarget(EventPlayer()), libARRA_gf_GetPlayerStartPosition(2)), c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_E4EE57D5"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugPathCost_Init () {
    libCOMU_gt_CT_DebugPathCost = TriggerCreate("libCOMU_gt_CT_DebugPathCost_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugPathCost, c_playerAny, "pathcost", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugCanPath
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugCanPath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, IntToText(AIPathingCostUnit(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)), c_ignoreEnemyBuildings)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugCanPath_Init () {
    libCOMU_gt_CT_DebugCanPath = TriggerCreate("libCOMU_gt_CT_DebugCanPath_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugCanPath, c_playerAny, "canpath", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugRiftSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugRiftSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_VoidRiftUnitMade, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, (StringWord(EventChatMessage(false), 2)), c_unitCreateIgnorePlacement, UnitGetOwner(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), UnitGetPosition(UnitGroupUnit(UnitGroupSelected(1), 1)));
    libCOMU_gf_CT_VoidRiftBirthUnits(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1), UnitLastCreatedGroup());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugRiftSpawn_Init () {
    libCOMU_gt_CT_DebugRiftSpawn = TriggerCreate("libCOMU_gt_CT_DebugRiftSpawn_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugRiftSpawn, c_playerAny, "riftspawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugGiftSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_GiftSpawn(CameraGetTarget(EventPlayer()));
    libCOMU_gf_CT_GiftSendAttack(libCOMU_gv_cT_GiftLastCreated);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugGiftSpawn_Init () {
    libCOMU_gt_CT_DebugGiftSpawn = TriggerCreate("libCOMU_gt_CT_DebugGiftSpawn_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugGiftSpawn, c_playerAny, "giftspawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftSetPower
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugGiftSetPower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_cT_GiftAmonPower = StringToInt(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugGiftSetPower_Init () {
    libCOMU_gt_CT_DebugGiftSetPower = TriggerCreate("libCOMU_gt_CT_DebugGiftSetPower_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugGiftSetPower, c_playerAny, "giftpower", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftPlayer
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugGiftPlayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_GiftPlayerBonus(CameraGetTarget(EventPlayer()), StringToInt(StringWord(EventChatMessage(false), 2)), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugGiftPlayer_Init () {
    libCOMU_gt_CT_DebugGiftPlayer = TriggerCreate("libCOMU_gt_CT_DebugGiftPlayer_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugGiftPlayer, c_playerAny, "giftme", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugGiftEnemy
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugGiftEnemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_GiftEnemyBonus(CameraGetTarget(EventPlayer()), StringToInt(StringWord(EventChatMessage(false), 2)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugGiftEnemy_Init () {
    libCOMU_gt_CT_DebugGiftEnemy = TriggerCreate("libCOMU_gt_CT_DebugGiftEnemy_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugGiftEnemy, c_playerAny, "giftenemy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugBoomBotSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugBoomBotSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCOMI_gf_MutatorIsEnabled("BoomBots") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorBoomBot", 0, libCOMI_gf_MutatorPlayer(), CameraGetTarget(EventPlayer()));
    libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
    libCOMU_gf_CT_ApplyBoomBotPing(UnitLastCreated());
    libCOMU_gf_CT_BoomBotsUpdate(UnitLastCreated());
    SoundPlayForPlayer(SoundLink("TUIWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugBoomBotSpawn_Init () {
    libCOMU_gt_CT_DebugBoomBotSpawn = TriggerCreate("libCOMU_gt_CT_DebugBoomBotSpawn_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugBoomBotSpawn, c_playerAny, "-boombot", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DebugBrutal+
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DebugBrutal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficultylevel;
    int lv_mutatorcount;
    int lv_player;

    // Automatic Variable Declarations
    string autoB9840892_val;
    playergroup auto021711F7_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringSub(EventChatMessage(false), 1, 7) == "brutal+"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB9840892_val = EventChatMessage(false);
    if (autoB9840892_val == "brutal+6") {
        lv_difficultylevel = 6;
    }
    else if (autoB9840892_val == "brutal+5") {
        lv_difficultylevel = 5;
    }
    else if (autoB9840892_val == "brutal+4") {
        lv_difficultylevel = 4;
    }
    else if (autoB9840892_val == "brutal+3") {
        lv_difficultylevel = 3;
    }
    else if (autoB9840892_val == "brutal+2") {
        lv_difficultylevel = 2;
    }
    else {
        lv_difficultylevel = 1;
    }
    libCOMI_gf_CT_SetMutationDifficultyLevel(UserDataInstance("XMM_MutationDifficultyLevels", lv_difficultylevel));
    lv_mutatorcount = libCOMI_gf_CT_GetRandomMutatorCount();
    libCOMI_gf_CreateMutationAbominationProbabilities(lv_mutatorcount, lv_mutatorcount, UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "PointsMin", 1), UserDataGetInt("XMM_MutationDifficultyLevels", libCOMI_gf_CT_GetMutationDifficultyLevel(), "PointsMax", 1));
    auto021711F7_g = libCOMI_gf_AffectedPlayers();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto021711F7_g, lv_player);
        if (lv_player < 0) { break; }
        libCOMI_gf_UpdatePlayerCommander(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DebugBrutal_Init () {
    libCOMU_gt_CT_DebugBrutal = TriggerCreate("libCOMU_gt_CT_DebugBrutal_Func");
    TriggerAddEventChatMessage(libCOMU_gt_CT_DebugBrutal, 1, "brutal+", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeAfraidOfTheDark
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeAfraidOfTheDark_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitOrdered3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeAfraidOfTheDark_Init () {
    libCOMU_gt_CT_InitializeAfraidOfTheDark = TriggerCreate("libCOMU_gt_CT_InitializeAfraidOfTheDark_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeAfraidOfTheDark, ("Mutator " + "AfraidOfTheDark" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownAfraidOfTheDark
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownAfraidOfTheDark_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitOrdered3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownAfraidOfTheDark_Init () {
    libCOMU_gt_CT_ShutdownAfraidOfTheDark = TriggerCreate("libCOMU_gt_CT_ShutdownAfraidOfTheDark_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownAfraidOfTheDark, ("Mutator " + "AfraidOfTheDark" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitOrdered 3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitOrdered3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyAfraidOfTheDark(EventUnit(), EventUnitOrder());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitOrdered3_Init () {
    libCOMU_gt_CT_UnitOrdered3 = TriggerCreate("libCOMU_gt_CT_UnitOrdered3_Func");
    TriggerEnable(libCOMU_gt_CT_UnitOrdered3, false);
    TriggerAddEventUnitOrder(libCOMU_gt_CT_UnitOrdered3, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AOTD Fix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_UT_AOTDFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    fixed lv_sightRange;
    int lv_catalogIndex;

    // Automatic Variable Declarations
    playergroup auto318A9FE5_g;
    int auto318A9FE5_var;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_MutatorIsEnabled("UberDarkness") == true)) {
        auto318A9FE5_g = libCOMI_gf_AffectedPlayers();
        auto318A9FE5_var = -1;
        while (true) {
            auto318A9FE5_var = PlayerGroupNextPlayer(auto318A9FE5_g, auto318A9FE5_var);
            if (auto318A9FE5_var < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, "CODFlatbedTruck", "Sight", auto318A9FE5_var, "0");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_UT_AOTDFix_Init () {
    libCOMU_gt_UT_AOTDFix = TriggerCreate("libCOMU_gt_UT_AOTDFix_Func");
    TriggerAddEventGeneric(libCOMU_gt_UT_AOTDFix, libCOMI_gv_mISSIONREADY);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeAllCasters
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeAllCasters_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto1B1F4F5D_g;
    int auto1B1F4F5D_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation4, true);
    auto1B1F4F5D_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto1B1F4F5D_u = UnitGroupCount(auto1B1F4F5D_g, c_unitCountAll);
    for (;; auto1B1F4F5D_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto1B1F4F5D_g, auto1B1F4F5D_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_ApplyAllSpellsEnergy(lv_indexUnit);
    }
    TriggerExecute(libCOMU_gt_CT_AllCastersPeriodicCast, true, false);
    TriggerEnable(libCOMU_gt_CT_OwnerChangesAllCasters, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeAllCasters_Init () {
    libCOMU_gt_CT_InitializeAllCasters = TriggerCreate("libCOMU_gt_CT_InitializeAllCasters_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeAllCasters, ("Mutator " + "AllCasters" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownAllCasters
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownAllCasters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation4, false);
    TriggerEnable(libCOMU_gt_CT_OwnerChangesAllCasters, false);
    TriggerStop(libCOMU_gt_CT_AllCastersPeriodicCast);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownAllCasters_Init () {
    libCOMU_gt_CT_ShutdownAllCasters = TriggerCreate("libCOMU_gt_CT_ShutdownAllCasters_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownAllCasters, ("Mutator " + "AllCasters" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation4
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyAllSpellsEnergy(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation4_Init () {
    libCOMU_gt_CT_UnitCreation4 = TriggerCreate("libCOMU_gt_CT_UnitCreation4_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation4, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation4, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OwnerChanges AllCasters
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_OwnerChangesAllCasters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerOld()) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerNew()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_RemoveAllCastersEnergy(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_OwnerChangesAllCasters_Init () {
    libCOMU_gt_CT_OwnerChangesAllCasters = TriggerCreate("libCOMU_gt_CT_OwnerChangesAllCasters_Func");
    TriggerEnable(libCOMU_gt_CT_OwnerChangesAllCasters, false);
    TriggerAddEventUnitChangeOwner(libCOMU_gt_CT_OwnerChangesAllCasters, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_AllCastersPeriodicCast
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_AllCastersPeriodicCast_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_periodicCastTimer;
    int[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_energyRegenRate;
    int[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_maxPlayerEnergy;
    int[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_requiredPlayerEnergy;
    int lv_indexPlayer;
    int lv_randomAbility;
    int lv_randomAbilityInt;
    fixed lv_range;
    int lv_targetAttempts;
    unitgroup lv_potentialTargets;
    unitgroup lv_potentialCasters;
    unit lv_target;
    unit lv_caster;

    // Automatic Variable Declarations
    playergroup auto9EF5BBF0_g;
    playergroup autoA0DD18AF_g;
    const int autoFB7D5BD4_ae = 10;
    const int autoFB7D5BD4_ai = 1;
    unitgroup auto9E9E4B8B_g;
    int auto9E9E4B8B_u;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_periodicCastTimer[init_i] = TimerCreate();
    }
    lv_potentialTargets = UnitGroupEmpty();
    lv_potentialCasters = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto9EF5BBF0_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto9EF5BBF0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] = FixedToInt(GameGetMissionTime());
    }
    while (true) {
        Wait(1.0, c_timeGame);
        autoA0DD18AF_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoA0DD18AF_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((GameGetMissionTime() <= 300.0)) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 40, 70, 90, 90, 90);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 40, 60, 80, 80, 80);
                libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 1, 1, 1, 1, 1);
            }
            else if ((GameGetMissionTime() <= 480.0)) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 40, 60, 90, 110, 110, 110);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 40, 60, 80, 80, 80);
                libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 1, 2, 4, 4, 4);
            }
            else if ((GameGetMissionTime() <= 600.0)) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 60, 80, 110, 140, 140, 140);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 20, 60, 80, 80, 80, 80);
                libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 1, 3, 6, 6, 6);
            }
            else if (true) {
                lv_maxPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 90, 120, 210, 290, 290, 290);
                lv_requiredPlayerEnergy[lv_indexPlayer] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 90, 90, 90, 150, 150, 150);
                libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] += libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 1, 2, 6, 10, 10, 10);
            }
            if ((libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] > lv_maxPlayerEnergy[lv_indexPlayer])) {
                libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] = lv_maxPlayerEnergy[lv_indexPlayer];
            }

            if ((libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] < lv_requiredPlayerEnergy[lv_indexPlayer])) {
                continue;
            }

            lv_potentialTargets = UnitGroup(null, lv_indexPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            lv_targetAttempts = 1;
            for ( ; ( (autoFB7D5BD4_ai >= 0 && lv_targetAttempts <= autoFB7D5BD4_ae) || (autoFB7D5BD4_ai < 0 && lv_targetAttempts >= autoFB7D5BD4_ae) ) ; lv_targetAttempts += autoFB7D5BD4_ai ) {
                if ((UnitGroupCount(lv_potentialTargets, c_unitCountAlive) <= 0)) {
                    break;
                }

                lv_target = UnitGroupRandomUnit(lv_potentialTargets, c_unitCountAlive);
                lv_randomAbility = libCOMU_gf_CT_AllCastersRandomAbility(lv_indexPlayer, lv_target);
                if ((lv_randomAbility == libCOMU_ge_CT_AllCastersAbilities_CT_AllCastersNone)) {
                    break;
                }

                lv_range = libCOMU_gf_CT_AllCastersAbilityRange(lv_randomAbility);
                lv_potentialCasters = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_indexPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_target), lv_range), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto9E9E4B8B_g = lv_potentialCasters;
                auto9E9E4B8B_u = UnitGroupCount(auto9E9E4B8B_g, c_unitCountAll);
                for (;; auto9E9E4B8B_u -= 1) {
                    lv_caster = UnitGroupUnitFromEnd(auto9E9E4B8B_g, auto9E9E4B8B_u);
                    if (lv_caster == null) { break; }
                    if ((UnitGetPropertyFixed(lv_caster, c_unitPropEnergy, c_unitPropCurrent) > 50.0)) {
                        libCOMU_gf_CT_AllCastersUseAbility(lv_caster, lv_target, lv_randomAbility);
                        libCOMU_gv_cT_AllCastersPlayerEnergy[lv_indexPlayer] -= libCOMU_gf_CT_AllCastersAbilityPlayerCost(lv_randomAbility);
                        UnitGroupRemove(lv_potentialTargets, lv_target);
                        break;
                    }

                }
                if ((TimerGetRemaining(lv_periodicCastTimer[lv_indexPlayer]) > 0.0)) {
                    break;
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_AllCastersPeriodicCast_Init () {
    libCOMU_gt_CT_AllCastersPeriodicCast = TriggerCreate("libCOMU_gt_CT_AllCastersPeriodicCast_Func");
    TriggerEnable(libCOMU_gt_CT_AllCastersPeriodicCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeAvenger
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeAvenger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath4, true);
    TriggerEnable(libCOMU_gt_OwnerChangesAvenger, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeAvenger_Init () {
    libCOMU_gt_CT_InitializeAvenger = TriggerCreate("libCOMU_gt_CT_InitializeAvenger_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeAvenger, ("Mutator " + "Avenger" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownAvenger
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownAvenger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath4, false);
    TriggerEnable(libCOMU_gt_OwnerChangesAvenger, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownAvenger_Init () {
    libCOMU_gt_CT_ShutdownAvenger = TriggerCreate("libCOMU_gt_CT_ShutdownAvenger_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownAvenger, ("Mutator " + "Avenger" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 4
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyAvenger(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath4_Init () {
    libCOMU_gt_CT_UnitDeath4 = TriggerCreate("libCOMU_gt_CT_UnitDeath4_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath4, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OwnerChanges Avenger
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_OwnerChangesAvenger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerOld()) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerNew()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_RemoveAvenger(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_OwnerChangesAvenger_Init () {
    libCOMU_gt_OwnerChangesAvenger = TriggerCreate("libCOMU_gt_OwnerChangesAvenger_Func");
    TriggerEnable(libCOMU_gt_OwnerChangesAvenger, false);
    TriggerAddEventUnitChangeOwner(libCOMU_gt_OwnerChangesAvenger, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Avenger Fix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_AvengerFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libCOMI_gf_MM_UnitScaleController(EventUnit(), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_AvengerFix_Init () {
    libCOMU_gt_MM_AvengerFix = TriggerCreate("libCOMU_gt_MM_AvengerFix_Func");
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_AvengerFix, null, "MutatorAvenger", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_AvengerFix, null, "MutatorAvenger", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBarrier
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeBarrier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeBarrier_Init () {
    libCOMU_gt_CT_InitializeBarrier = TriggerCreate("libCOMU_gt_CT_InitializeBarrier_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeBarrier, ("Mutator " + "Barrier" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBarrier
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownBarrier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownBarrier_Init () {
    libCOMU_gt_CT_ShutdownBarrier = TriggerCreate("libCOMU_gt_CT_ShutdownBarrier_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownBarrier, ("Mutator " + "Barrier" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyBarrier(EventUnit(), EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage2_Init () {
    libCOMU_gt_CT_UnitDamage2 = TriggerCreate("libCOMU_gt_CT_UnitDamage2_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage2, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage2, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBlackFog
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeBlackFog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_humanPlayer;

    // Automatic Variable Declarations
    playergroup autoE7520291_g;
    playergroup auto21312E9A_g;
    playergroup auto58431A24_g;
    playergroup autoCE320598_g;
    const int auto9E8E03BB_n = 50;
    int auto9E8E03BB_i;
    playergroup autoD053E3BD_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_VisionShareEnable(false);
    libCOMI_gf_CM_RevealersEnableDisable(false);
    autoE7520291_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE7520291_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        VisSetFoWAlpha(lv_indexPlayer, 100.0);
    }
    auto21312E9A_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto21312E9A_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), lv_indexPlayer) == false)) {
            TechTreeUpgradeAddLevel(lv_indexPlayer, "NoSnapshots", 1);
        }

    }
    auto58431A24_g = libCOMI_gf_AffectedPlayers();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto58431A24_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        libCOMI_gv_cT_MutatorVisionPlayers[lv_humanPlayer] = PlayerGroupEmpty();
        autoCE320598_g = PlayerGroupAll();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoCE320598_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), lv_indexPlayer) == false) && (PlayerGetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer) == true)) {
                PlayerGroupAdd(libCOMI_gv_cT_MutatorVisionPlayers[lv_humanPlayer], lv_indexPlayer);
                PlayerSetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer, false);
            }

        }
    }
    for (auto9E8E03BB_i = 1; auto9E8E03BB_i <= auto9E8E03BB_n; auto9E8E03BB_i += 1) {
        autoD053E3BD_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoD053E3BD_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            VisExploreArea(lv_indexPlayer, RegionEntireMap(), false, false);
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeBlackFog_Init () {
    libCOMU_gt_CT_InitializeBlackFog = TriggerCreate("libCOMU_gt_CT_InitializeBlackFog_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeBlackFog, ("Mutator " + "BlackFog" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBlackFog
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownBlackFog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    int lv_humanPlayer;

    // Automatic Variable Declarations
    playergroup auto6867D473_g;
    playergroup auto82E302F0_g;
    playergroup autoC8E0DEEA_g;
    playergroup auto451245A5_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_CM_VisionShareEnable(true);
    libCOMI_gf_CM_RevealersEnableDisable(true);
    auto6867D473_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6867D473_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        VisResetFoWAlpha(lv_indexPlayer);
    }
    auto82E302F0_g = PlayerGroupAll();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto82E302F0_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), lv_indexPlayer) == false)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "NoSnapshots", 0);
        }

    }
    autoC8E0DEEA_g = libCOMI_gf_AffectedPlayers();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(autoC8E0DEEA_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        auto451245A5_g = libCOMI_gv_cT_MutatorVisionPlayers[lv_humanPlayer];
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto451245A5_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerSetAlliance(lv_indexPlayer, c_allianceIdVision, lv_humanPlayer, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownBlackFog_Init () {
    libCOMU_gt_CT_ShutdownBlackFog = TriggerCreate("libCOMU_gt_CT_ShutdownBlackFog_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownBlackFog, ("Mutator " + "BlackFog" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBlizzard
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeBlizzard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_BlizzardSpawn, true);
    TriggerEnable(libCOMU_gt_CT_BlizzardEntersSafetyZone, true);
    TriggerEnable(libCOMU_gt_CT_BlizzardLeavesSafetyZone, true);
    TriggerExecute(libCOMU_gt_CT_BlizzardSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeBlizzard_Init () {
    libCOMU_gt_CT_InitializeBlizzard = TriggerCreate("libCOMU_gt_CT_InitializeBlizzard_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeBlizzard, ("Mutator " + "Blizzard" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBlizzard
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownBlizzard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_BlizzardSpawn, false);
    TriggerStop(libCOMU_gt_CT_BlizzardSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownBlizzard_Init () {
    libCOMU_gt_CT_ShutdownBlizzard = TriggerCreate("libCOMU_gt_CT_ShutdownBlizzard_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownBlizzard, ("Mutator " + "Blizzard" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BlizzardSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_BlizzardSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    point lv_destinationLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;
    fixed lv_drift;
    fixed lv_mapSizeModifier;
    fixed lv_moveDirection;
    fixed lv_xIntercept;
    fixed lv_yIntercept;
    fixed lv_spawnSpan;
    fixed lv_spawnDistance;
    point lv_midPoint;
    fixed lv_rightTriangleAngle;

    // Automatic Variable Declarations
    string autoEEACB9E5_val;
    const int auto3E5E16FE_ae = 100;
    const int auto3E5E16FE_ai = 1;

    // Variable Initialization
    lv_moveDirection = 90.0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoEEACB9E5_val = libCOMI_gf_CC_CurrentMap();
    if (autoEEACB9E5_val == "AC_CharThrasher") {
        lv_moveDirection = 320.0;
    }
    else if (autoEEACB9E5_val == "AC_CybrosEscort") {
        lv_moveDirection = 320.0;
    }
    else if (autoEEACB9E5_val == "AC_JarbanPointCapture") {
        lv_moveDirection = 320.0;
    }
    else {
        lv_moveDirection = 0.0;
    }
    lv_mapSizeModifier = (500.0 - libNtve_gf_HeightOfRegion(RegionPlayableMap()));
    lv_waitTime = ((libCOMI_gf_MinimumDifficultyValueCoopReal(4.0, 3.0, 2.0, 1.5, 0.1, 0.1) * lv_mapSizeModifier) / 100.0);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (auto3E5E16FE_ai >= 0 && lv_safetyInt <= auto3E5E16FE_ae) || (auto3E5E16FE_ai < 0 && lv_safetyInt >= auto3E5E16FE_ae) ) ; lv_safetyInt += auto3E5E16FE_ai ) {
            if ((lv_moveDirection == 0.0)) {
                lv_spawnLocation = Point(0.0, RandomFixed(0.0, (libNtve_gf_HeightOfRegion(RegionPlayableMap()) + lv_drift)));
                lv_destinationLocation = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), (PointGetY(lv_spawnLocation) - lv_drift));
            }
            else if (true) {
                lv_spawnSpan = (libNtve_gf_HeightOfRegion(RegionPlayableMap()) + libNtve_gf_WidthOfRegion(RegionPlayableMap()));
                lv_spawnDistance = RandomFixed(0.0, lv_spawnSpan);
                lv_rightTriangleAngle = libCOMU_gf_CT_MathNumberWrap(lv_moveDirection, 0.0, 90.0);
                if ((lv_spawnDistance > libNtve_gf_HeightOfRegion(RegionPlayableMap()))) {
                    lv_spawnLocation = Point((lv_spawnDistance - libNtve_gf_HeightOfRegion(RegionPlayableMap())), libNtve_gf_HeightOfRegion(RegionPlayableMap()));
                    lv_destinationLocation = PointWithOffsetPolar(lv_spawnLocation, ((libNtve_gf_WidthOfRegion(RegionEntireMap()) - PointGetX(lv_spawnLocation)) / Cos(lv_rightTriangleAngle)), lv_moveDirection);
                }
                else {
                    lv_spawnLocation = Point(0.0, lv_spawnDistance);
                    lv_destinationLocation = PointWithOffsetPolar(lv_spawnLocation, (PointGetY(lv_spawnLocation) / Cos(lv_rightTriangleAngle)), lv_moveDirection);
                }
            }
            if ((((UnitGroupCount(libCOMU_gv_cT_RecentBlizzards, c_unitCountAlive) > 0) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupClosestToPoint(libCOMU_gv_cT_RecentBlizzards, lv_spawnLocation)), lv_spawnLocation) < libCOMU_gv_cT_BlizzardSpacingTolerance)))) {
                continue;
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorStormCloud", c_unitCreateIgnorePlacement, libCOMI_gf_MutatorPlayer(), lv_spawnLocation);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_destinationLocation), c_orderQueueReplace);
                UnitGroupAdd(libCOMU_gv_cT_RecentBlizzards, UnitLastCreated());
                libCOMU_gf_CT_DestroyBlizzard(UnitLastCreated());
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_BlizzardSpawn_Init () {
    libCOMU_gt_CT_BlizzardSpawn = TriggerCreate("libCOMU_gt_CT_BlizzardSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_BlizzardSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StatBlizzardFreeze
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_StatBlizzardFreeze_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), UnitGetOwner(EventUnit())) == true)) {
        libCOMU_gv_cT_StatBlizzardUnitsFrozen[UnitGetOwner(EventUnit())] += 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_StatBlizzardFreeze_Init () {
    libCOMU_gt_CT_StatBlizzardFreeze = TriggerCreate("libCOMU_gt_CT_StatBlizzardFreeze_Func");
    TriggerEnable(libCOMU_gt_CT_StatBlizzardFreeze, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_CT_StatBlizzardFreeze, null, "MutatorStormCloudSlow", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BlizzardEntersSafetyZone
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_BlizzardEntersSafetyZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MutatorStormCloud"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "MutatorStormCloudBlizzardDisable", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_BlizzardEntersSafetyZone_Init () {
    libCOMU_gt_CT_BlizzardEntersSafetyZone = TriggerCreate("libCOMU_gt_CT_BlizzardEntersSafetyZone_Func");
    TriggerEnable(libCOMU_gt_CT_BlizzardEntersSafetyZone, false);
    TriggerAddEventUnitRegion(libCOMU_gt_CT_BlizzardEntersSafetyZone, null, libCOMI_gf_CT_MutatorSafetyZone(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BlizzardLeavesSafetyZone
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_BlizzardLeavesSafetyZone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC1821080_g;
    int autoC1821080_u;
    unit autoC1821080_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC1821080_g = UnitGroup("MutatorStormCloud", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC1821080_u = UnitGroupCount(autoC1821080_g, c_unitCountAll);
    for (;; autoC1821080_u -= 1) {
        autoC1821080_var = UnitGroupUnitFromEnd(autoC1821080_g, autoC1821080_u);
        if (autoC1821080_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoC1821080_var, libCOMI_gv_cT_MutatorSafetyZone) == true)) {
            UnitBehaviorAdd(autoC1821080_var, "MutatorStormCloudBlizzardDisable", autoC1821080_var, 1);
        }
        else {
            UnitBehaviorRemove(autoC1821080_var, "MutatorStormCloudBlizzardDisable", 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_BlizzardLeavesSafetyZone_Init () {
    libCOMU_gt_CT_BlizzardLeavesSafetyZone = TriggerCreate("libCOMU_gt_CT_BlizzardLeavesSafetyZone_Func");
    TriggerEnable(libCOMU_gt_CT_BlizzardLeavesSafetyZone, false);
    TriggerAddEventTimePeriodic(libCOMU_gt_CT_BlizzardLeavesSafetyZone, 2.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeBloodlust
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeBloodlust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA2CF4A26_g;
    int autoA2CF4A26_u;
    unit autoA2CF4A26_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation4, true);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent4, true);
    TriggerEnable(libCOMU_gt_MM_BloodlustActivated, true);
    Wait(0.5, c_timeReal);
    autoA2CF4A26_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoA2CF4A26_u = UnitGroupCount(autoA2CF4A26_g, c_unitCountAll);
    for (;; autoA2CF4A26_u -= 1) {
        autoA2CF4A26_var = UnitGroupUnitFromEnd(autoA2CF4A26_g, autoA2CF4A26_u);
        if (autoA2CF4A26_var == null) { break; }
        libCOMU_gf_MM_ApplyBloodlust(autoA2CF4A26_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeBloodlust_Init () {
    libCOMU_gt_MM_InitializeBloodlust = TriggerCreate("libCOMU_gt_MM_InitializeBloodlust_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeBloodlust, ("Mutator " + "Bloodlust" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownBloodlust
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownBloodlust_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto801E0137_g;
    int auto801E0137_u;
    unit auto801E0137_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation4, false);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent4, false);
    TriggerEnable(libCOMU_gt_MM_BloodlustActivated, false);
    auto801E0137_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto801E0137_u = UnitGroupCount(auto801E0137_g, c_unitCountAll);
    for (;; auto801E0137_u -= 1) {
        auto801E0137_var = UnitGroupUnitFromEnd(auto801E0137_g, auto801E0137_u);
        if (auto801E0137_var == null) { break; }
        UnitBehaviorRemovePlayer(auto801E0137_var, "MutatorBloodlust", libCOMI_gf_MutatorPlayer(), 1);
        UnitBehaviorRemovePlayer(auto801E0137_var, "MutatorBloodlust2", libCOMI_gf_MutatorPlayer(), 1);
        UnitBehaviorRemovePlayer(auto801E0137_var, "MutatorBloodlust3", libCOMI_gf_MutatorPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownBloodlust_Init () {
    libCOMU_gt_MM_ShutdownBloodlust = TriggerCreate("libCOMU_gt_MM_ShutdownBloodlust_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownBloodlust, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownBloodlust, ("Mutator " + "Bloodlust" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitCreation 4
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitCreation4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyBloodlust(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitCreation4_Init () {
    libCOMU_gt_MM_UnitCreation4 = TriggerCreate("libCOMU_gt_MM_UnitCreation4_Func");
    TriggerEnable(libCOMU_gt_MM_UnitCreation4, false);
    TriggerAddEventUnitCreated(libCOMU_gt_MM_UnitCreation4, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Unit Creation Event 4
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MutatorUnitCreationEvent4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyBloodlust(libCOMI_gv_mutatorHero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MutatorUnitCreationEvent4_Init () {
    libCOMU_gt_MutatorUnitCreationEvent4 = TriggerCreate("libCOMU_gt_MutatorUnitCreationEvent4_Func");
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent4, false);
    TriggerAddEventGeneric(libCOMU_gt_MutatorUnitCreationEvent4, "Mutator Unit Creation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_BloodlustActivated
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_BloodlustActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPointForPlayer(SoundLink("MutatorBloodlust", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 200.0, 0.0);
    Wait(RandomInt(2, 10), c_timeGame);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_BloodlustActivated_Init () {
    libCOMU_gt_MM_BloodlustActivated = TriggerCreate("libCOMU_gt_MM_BloodlustActivated_Func");
    TriggerEnable(libCOMU_gt_MM_BloodlustActivated, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_BloodlustActivated, null, "MutatorBloodlust", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_BloodlustActivated, null, "MutatorBloodlust2", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_BloodlustActivated, null, "MutatorBloodlust3", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitChangesOwner
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitChangesOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventUnitOwnerNew()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemovePlayer(EventUnit(), "MutatorBloodlust", libCOMI_gf_AffectedPlayer(1), 1);
    UnitBehaviorRemovePlayer(EventUnit(), "MutatorBloodlust2", libCOMI_gf_AffectedPlayer(1), 1);
    UnitBehaviorRemovePlayer(EventUnit(), "MutatorBloodlust3", libCOMI_gf_AffectedPlayer(1), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitChangesOwner_Init () {
    libCOMU_gt_MM_UnitChangesOwner = TriggerCreate("libCOMU_gt_MM_UnitChangesOwner_Func");
    TriggerEnable(libCOMU_gt_MM_UnitChangesOwner, false);
    TriggerAddEventUnitChangeOwner(libCOMU_gt_MM_UnitChangesOwner, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeBoomBots
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeBoomBots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto35D305D2_ae = 2;
    const int auto35D305D2_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath16, true);
    lv_player = 1;
    for ( ; ( (auto35D305D2_ai >= 0 && lv_player <= auto35D305D2_ae) || (auto35D305D2_ai < 0 && lv_player >= auto35D305D2_ae) ) ; lv_player += auto35D305D2_ai ) {
        libCOMU_gv_cT_BoomBotsDigits[lv_player] = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_player), 1, 2, 3, 4, 4, 4);
    }
    libCOMU_gv_cT_BoomBotCleanupEnabled = true;
    TriggerEnable(libCOMU_gt_CT_BoomBotsInput, true);
    TriggerExecute(libCOMU_gt_CT_BoomBotsSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeBoomBots_Init () {
    libCOMU_gt_CT_InitializeBoomBots = TriggerCreate("libCOMU_gt_CT_InitializeBoomBots_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeBoomBots, ("Mutator " + "BoomBots" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownBoomBots
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownBoomBots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath16, false);
    TriggerStop(libCOMU_gt_CT_BoomBotsSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownBoomBots_Init () {
    libCOMU_gt_CT_ShutdownBoomBots = TriggerCreate("libCOMU_gt_CT_ShutdownBoomBots_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownBoomBots, ("Mutator " + "BoomBots" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 16
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath16_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyBoomBotPingCleanup(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath16_Init () {
    libCOMU_gt_CT_UnitDeath16 = TriggerCreate("libCOMU_gt_CT_UnitDeath16_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath16, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath16, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BoomBotsSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_BoomBotsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;
    int lv_spawnCount;
    int lv_indexSpawn;

    // Automatic Variable Declarations
    int auto7CFEB633_ae;
    const int auto7CFEB633_ai = 1;
    const int autoC3D7CF28_ae = 100;
    const int autoC3D7CF28_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(270.0, 220.0, 170.0, 130.0, 130.0, 130.0)))) {
        Wait(10.0, c_timeGame);
    }
    TimerStart(lv_spawnTimer, 5.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((TimerGetRemaining(lv_spawnTimer) > 0.0)) {
            continue;
        }

        if ((GameGetMissionTime() <= 720.0)) {
            lv_spawnCount = 1;
        }
        else if (true) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
        }
        auto7CFEB633_ae = lv_spawnCount;
        lv_indexSpawn = 1;
        for ( ; ( (auto7CFEB633_ai >= 0 && lv_indexSpawn <= auto7CFEB633_ae) || (auto7CFEB633_ai < 0 && lv_indexSpawn >= auto7CFEB633_ae) ) ; lv_indexSpawn += auto7CFEB633_ai ) {
            lv_spawnAttempt = 1;
            for ( ; ( (autoC3D7CF28_ai >= 0 && lv_spawnAttempt <= autoC3D7CF28_ae) || (autoC3D7CF28_ai < 0 && lv_spawnAttempt >= autoC3D7CF28_ae) ) ; lv_spawnAttempt += autoC3D7CF28_ai ) {
                lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_spawningStructure))) {
                    break;
                }
                else {
                    lv_spawningStructure = null;
                }
            }
            if ((lv_spawningStructure == null)) {
                continue;
            }

            UnitCreate(1, "MutatorBoomBot", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
            libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            libCOMU_gf_CT_ApplyBoomBotPing(UnitLastCreated());
            libCOMU_gf_CT_BoomBotsUpdate(UnitLastCreated());
        }
        SoundPlayForPlayer(SoundLink("TUIWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((GameGetMissionTime() <= 720.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(140.0, 120.0, 100.0, 80.0, 80.0, 80.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 1080.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(130.0, 105.0, 77.5, 60.0, 60.0, 60.0), false, c_timeAI);
        }
        else if (true) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 90.0, 55.0, 40.0, 40.0, 40.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_BoomBotsSpawn_Init () {
    libCOMU_gt_CT_BoomBotsSpawn = TriggerCreate("libCOMU_gt_CT_BoomBotsSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_BoomBotsSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_BoomBotsInput
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_BoomBotsInput_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_boombothelper;
    int lv_remainingdigitcount;
    int lv_correctvalue;
    int lv_input;
    text lv_inputtext;
    int lv_customvalueindex;
    int lv_speedstacks;

    // Automatic Variable Declarations
    abilcmd autoCD529328_val;
    int auto6B242565_ae;
    const int auto6B242565_ai = 1;
    int auto789E5336_ae;
    const int auto789E5336_ai = 1;
    unitgroup auto1F0E61FB_g;
    int auto1F0E61FB_u;
    unit auto1F0E61FB_var;

    // Variable Initialization
    lv_boombothelper = EventUnit();
    lv_remainingdigitcount = FixedToInt(UnitGetCustomValue(lv_boombothelper, libCOMU_gv_cT_BoomBotsIndexStart));
    lv_correctvalue = FixedToInt(UnitGetCustomValue(lv_boombothelper, (libCOMU_gv_cT_BoomBotsIndexStart+libCOMU_gv_cT_BoomBotsDigits[EventPlayer()]-lv_remainingdigitcount+1)));
    lv_speedstacks = libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(EventPlayer()), 0, 1, 2, 4, 4, 4);

    // Actions
    if (!runActions) {
        return true;
    }

    autoCD529328_val = EventUnitAbility();
    if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 0)) {
        lv_input = 1;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 1)) {
        lv_input = 2;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 2)) {
        lv_input = 3;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 3)) {
        lv_input = 4;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 4)) {
        lv_input = 5;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 5)) {
        lv_input = 6;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 6)) {
        lv_input = 7;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 7)) {
        lv_input = 8;
    }
    else if (autoCD529328_val == AbilityCommand("MutatorBoomBotDefuse", 8)) {
        lv_input = 9;
    }
    else {
        return true;
    }
    if ((lv_input == lv_correctvalue) && (lv_remainingdigitcount > 1)) {
        lv_remainingdigitcount -= 1;
        UnitSetCustomValue(lv_boombothelper, libCOMU_gv_cT_BoomBotsIndexStart, lv_remainingdigitcount);
        TextExpressionSetToken("Param/Expression/lib_COMU_CEC6A06A", "A", FixedToText(UnitGetCustomValue(lv_boombothelper, (libCOMU_gv_cT_BoomBotsIndexStart+1)), 0));
        lv_inputtext = TextExpressionAssemble("Param/Expression/lib_COMU_CEC6A06A");
        auto6B242565_ae = (libCOMU_gv_cT_BoomBotsIndexStart + libCOMU_gv_cT_BoomBotsDigits[EventPlayer()] - lv_remainingdigitcount);
        lv_customvalueindex = (libCOMU_gv_cT_BoomBotsIndexStart + 2);
        for ( ; ( (auto6B242565_ai >= 0 && lv_customvalueindex <= auto6B242565_ae) || (auto6B242565_ai < 0 && lv_customvalueindex >= auto6B242565_ae) ) ; lv_customvalueindex += auto6B242565_ai ) {
            TextExpressionSetToken("Param/Expression/lib_COMU_139E6F06", "A", lv_inputtext);
            TextExpressionSetToken("Param/Expression/lib_COMU_139E6F06", "B", FixedToText(UnitGetCustomValue(lv_boombothelper, lv_customvalueindex), 0));
            lv_inputtext = TextExpressionAssemble("Param/Expression/lib_COMU_139E6F06");
        }
        TextExpressionSetToken("Param/Expression/lib_COMU_7C4087AF", "A", lv_inputtext);
        lv_inputtext = TextExpressionAssemble("Param/Expression/lib_COMU_7C4087AF");
        auto789E5336_ae = (libCOMU_gv_cT_BoomBotsIndexStart + libCOMU_gv_cT_BoomBotsDigits[EventPlayer()]);
        lv_customvalueindex = (libCOMU_gv_cT_BoomBotsIndexStart + libCOMU_gv_cT_BoomBotsDigits[EventPlayer()] - lv_remainingdigitcount + 1);
        for ( ; ( (auto789E5336_ai >= 0 && lv_customvalueindex <= auto789E5336_ae) || (auto789E5336_ai < 0 && lv_customvalueindex >= auto789E5336_ae) ) ; lv_customvalueindex += auto789E5336_ai ) {
            TextExpressionSetToken("Param/Expression/lib_COMU_28B79680", "A", lv_inputtext);
            lv_inputtext = TextExpressionAssemble("Param/Expression/lib_COMU_28B79680");
        }
        TextExpressionSetToken("Param/Expression/lib_COMU_6B5CE06A", "A", lv_inputtext);
        lv_inputtext = TextExpressionAssemble("Param/Expression/lib_COMU_6B5CE06A");
        TextExpressionSetToken("Param/Expression/lib_COMU_1A1ECCF5", "A", lv_inputtext);
        TextTagSetText(libARRA_gf_TextTagForUnit(lv_boombothelper, libCOMU_gv_cT_BoomBotsInputTextTagIndex), TextExpressionAssemble("Param/Expression/lib_COMU_1A1ECCF5"));
    }
    else if ((lv_input == lv_correctvalue)) {
        UnitRemove(lv_boombothelper);
    }
    else if (true) {
        UnitModifyCooldown(lv_boombothelper, "Abil/MutatorBoomBotDefuse", libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(EventPlayer()), 1.0, 3.0, 5.0, 8.0, 8.0, 8.0), c_cooldownOperationDefault);
        if ((lv_speedstacks > 0)) {
            auto1F0E61FB_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_boombothelper), 0.1), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1F0E61FB_u = UnitGroupCount(auto1F0E61FB_g, c_unitCountAll);
            for (;; auto1F0E61FB_u -= 1) {
                auto1F0E61FB_var = UnitGroupUnitFromEnd(auto1F0E61FB_g, auto1F0E61FB_u);
                if (auto1F0E61FB_var == null) { break; }
                UnitBehaviorAdd(auto1F0E61FB_var, "MutatorBoomBotSpeedUp", auto1F0E61FB_var, lv_speedstacks);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_BoomBotsInput_Init () {
    libCOMU_gt_CT_BoomBotsInput = TriggerCreate("libCOMU_gt_CT_BoomBotsInput_Func");
    TriggerEnable(libCOMU_gt_CT_BoomBotsInput, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_BoomBotsInput, null, AbilityCommand("MutatorBoomBotDefuse", 8), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeConcussiveAttacks
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeConcussiveAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeConcussiveAttacks_Init () {
    libCOMU_gt_CT_InitializeConcussiveAttacks = TriggerCreate("libCOMU_gt_CT_InitializeConcussiveAttacks_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeConcussiveAttacks, ("Mutator " + "ConcussiveAttacks" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownConcussiveAttacks
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownConcussiveAttacks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownConcussiveAttacks_Init () {
    libCOMU_gt_CT_ShutdownConcussiveAttacks = TriggerCreate("libCOMU_gt_CT_ShutdownConcussiveAttacks_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownConcussiveAttacks, ("Mutator " + "ConcussiveAttacks" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyConcussiveAttacks(EventUnit(), EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage1_Init () {
    libCOMU_gt_CT_UnitDamage1 = TriggerCreate("libCOMU_gt_CT_UnitDamage1_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage1, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage1, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeDarkMirror
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeDarkMirror_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const bool lv_cTrue = true;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_mM_DarkMirrorActive = lv_cTrue;
    libCOMI_gv_attackForceOverride = libCOMU_gt_DarkMirrorAttackForce;
    libCOMI_gv_dropForceOverride = libCOMU_gt_DarkMirrorDropForce;
    TriggerExecute(libCOMI_gt_MM_PX_InitPlayerX, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeDarkMirror_Init () {
    libCOMU_gt_MM_InitializeDarkMirror = TriggerCreate("libCOMU_gt_MM_InitializeDarkMirror_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeDarkMirror, ("Mutator " + "DarkMirror" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownDarkMirror
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownDarkMirror_Func (bool testConds, bool runActions) {
    // Variable Declarations
    const bool lv_cFalse = false;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_mM_DarkMirrorActive = lv_cFalse;
    libCOMI_gv_attackForceOverride = null;
    libCOMI_gv_dropForceOverride = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownDarkMirror_Init () {
    libCOMU_gt_MM_ShutdownDarkMirror = TriggerCreate("libCOMU_gt_MM_ShutdownDarkMirror_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownDarkMirror, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownDarkMirror, ("Mutator " + "DarkMirror" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: DarkMirror AttackForce
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_DarkMirrorAttackForce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn3(libCOMI_gv_attackForceOverridePlayerA, libCOMI_gv_attackForceOverridePlayerB, libCOMI_gv_attackForceOverrideResourceSize, libCOMI_gv_attackForceOverrideTechLevel, libCOMI_gv_attackForceOverrideSpawnLocation, libCOMI_gv_attackForceOverrideDropWarpIn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_DarkMirrorAttackForce_Init () {
    libCOMU_gt_DarkMirrorAttackForce = TriggerCreate("libCOMU_gt_DarkMirrorAttackForce_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DarkMirror DropForce
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_DarkMirrorDropForce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_DMCreateCoopDropForceinTransportsatLocationandWaitforthemtospawn(libCOMI_gv_attackForceOverridePlayerA, libCOMI_gv_attackForceOverridePlayerB, libCOMI_gv_attackForceOverrideResourceSize, libCOMI_gv_attackForceOverrideTechLevel, libCOMI_gv_attackForceOverrideSpawnLocation, libCOMI_gv_attackForceOverrideTransportType);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_DarkMirrorDropForce_Init () {
    libCOMU_gt_DarkMirrorDropForce = TriggerCreate("libCOMU_gt_DarkMirrorDropForce_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDamageBounce
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeDamageBounce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage7, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeDamageBounce_Init () {
    libCOMU_gt_CT_InitializeDamageBounce = TriggerCreate("libCOMU_gt_CT_InitializeDamageBounce_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeDamageBounce, ("Mutator " + "DamageBounce" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDamageBounce
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownDamageBounce_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage7, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownDamageBounce_Init () {
    libCOMU_gt_CT_ShutdownDamageBounce = TriggerCreate("libCOMU_gt_CT_ShutdownDamageBounce_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownDamageBounce, ("Mutator " + "DamageBounce" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 7
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyDamageBounce2(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount(), EventUnitDamageEffect());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage7_Init () {
    libCOMU_gt_CT_UnitDamage7 = TriggerCreate("libCOMU_gt_CT_UnitDamage7_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage7, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage7, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDeathAOE
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeDeathAOE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeDeathAOE_Init () {
    libCOMU_gt_CT_InitializeDeathAOE = TriggerCreate("libCOMU_gt_CT_InitializeDeathAOE_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeDeathAOE, ("Mutator " + "DeathAOE" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDeathAOE
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownDeathAOE_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownDeathAOE_Init () {
    libCOMU_gt_CT_ShutdownDeathAOE = TriggerCreate("libCOMU_gt_CT_ShutdownDeathAOE_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownDeathAOE, ("Mutator " + "DeathAOE" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyDeathAOE(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath3_Init () {
    libCOMU_gt_CT_UnitDeath3 = TriggerCreate("libCOMU_gt_CT_UnitDeath3_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath3, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDeathFire
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeDeathFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath5, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeDeathFire_Init () {
    libCOMU_gt_CT_InitializeDeathFire = TriggerCreate("libCOMU_gt_CT_InitializeDeathFire_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeDeathFire, ("Mutator " + "DeathFire" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDeathFire
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownDeathFire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath5, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownDeathFire_Init () {
    libCOMU_gt_CT_ShutdownDeathFire = TriggerCreate("libCOMU_gt_CT_ShutdownDeathFire_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownDeathFire, ("Mutator " + "DeathFire" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 5
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyDeathFire(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath5_Init () {
    libCOMU_gt_CT_UnitDeath5 = TriggerCreate("libCOMU_gt_CT_UnitDeath5_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath5, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath5, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDeathPull
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeDeathPull_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath13, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeDeathPull_Init () {
    libCOMU_gt_CT_InitializeDeathPull = TriggerCreate("libCOMU_gt_CT_InitializeDeathPull_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeDeathPull, ("Mutator " + "DeathPull" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDeathPull
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownDeathPull_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath13, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownDeathPull_Init () {
    libCOMU_gt_CT_ShutdownDeathPull = TriggerCreate("libCOMU_gt_CT_ShutdownDeathPull_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownDeathPull, ("Mutator " + "DeathPull" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 13
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath13_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyDeathPull(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath13_Init () {
    libCOMU_gt_CT_UnitDeath13 = TriggerCreate("libCOMU_gt_CT_UnitDeath13_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath13, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath13, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeDropPods
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeDropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_DropPodSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeDropPods_Init () {
    libCOMU_gt_CT_InitializeDropPods = TriggerCreate("libCOMU_gt_CT_InitializeDropPods_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeDropPods, ("Mutator " + "DropPods" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownDropPods
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownDropPods_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_DropPodSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownDropPods_Init () {
    libCOMU_gt_CT_ShutdownDropPods = TriggerCreate("libCOMU_gt_CT_ShutdownDropPods_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownDropPods, ("Mutator " + "DropPods" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DropPodSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DropPodSpawn_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_dropPodTimers;
    int lv_indexPlayer;
    unitgroup lv_attackGroup;
    unitgroup lv_targetCandidates;
    unit lv_dropTarget;
    point lv_dropLocation;
    point lv_targetLocation;
    int lv_dropPlayer;
    int[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_dropCount;
    int lv_dropSafetyIndex;

    // Automatic Variable Declarations
    playergroup auto39B81D4E_g;
    playergroup auto546C5DB4_g;
    unitgroup autoA95181C3_g;
    int autoA95181C3_u;
    const int auto356CA157_ae = 1000;
    const int auto356CA157_ai = 1;
    const int autoDBD06A2C_ae = 1000;
    const int autoDBD06A2C_ai = 1;
    int autoFC09871E_val;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_dropPodTimers[init_i] = TimerCreate();
    }
    lv_attackGroup = UnitGroupEmpty();
    lv_targetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto39B81D4E_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto39B81D4E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_dropPodTimers[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 360.0, 330.0, 310.0, 280.0, 0.0, 0.0), false, c_timeAI);
    }
    while (true) {
        Wait(10.0, c_timeAI);
        auto546C5DB4_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto546C5DB4_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((libCOMU_gv_cT_DebugDropPodSpawnNow[lv_indexPlayer] == true)) {
                libNtve_gf_StopTimer(lv_dropPodTimers[lv_indexPlayer]);
                libCOMU_gv_cT_DebugDropPodSpawnNow[lv_indexPlayer] = false;
            }

            if ((TimerGetRemaining(lv_dropPodTimers[lv_indexPlayer]) <= 0.0)) {
                lv_dropCount[lv_indexPlayer] += 1;
                if ((lv_indexPlayer == 1)) {
                    lv_dropPlayer = 3;
                }
                else {
                    lv_dropPlayer = 4;
                }
                lv_targetCandidates = UnitGroup(null, lv_indexPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoA95181C3_g = lv_targetCandidates;
                autoA95181C3_u = UnitGroupCount(autoA95181C3_g, c_unitCountAll);
                for (;; autoA95181C3_u -= 1) {
                    lv_dropTarget = UnitGroupUnitFromEnd(autoA95181C3_g, autoA95181C3_u);
                    if (lv_dropTarget == null) { break; }
                    if (((UnitWeaponCount(lv_dropTarget) == 0) || (UnitGetPropertyFixed(lv_dropTarget, c_unitPropSuppliesUsed, c_unitPropCurrent) <= 0.0) || (UnitGetType(lv_dropTarget) == "QueenCoop") || (UnitGetType(lv_dropTarget) == "QueenCoopBurrowed") || (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(UnitGetPosition(lv_dropTarget), 15.0, libCOMI_gf_AffectedPlayers()) == false))) {
                        UnitGroupRemove(lv_targetCandidates, lv_dropTarget);
                    }

                }
                if ((UnitGroupCount(lv_targetCandidates, c_unitCountAlive) <= 0)) {
                    lv_dropSafetyIndex = 1;
                    for ( ; ( (auto356CA157_ai >= 0 && lv_dropSafetyIndex <= auto356CA157_ae) || (auto356CA157_ai < 0 && lv_dropSafetyIndex >= auto356CA157_ae) ) ; lv_dropSafetyIndex += auto356CA157_ai ) {
                        lv_dropLocation = RegionRandomPoint(RegionCircle(libARRA_gf_GetPlayerStartPosition(lv_indexPlayer), 40.0));
                        if (((PathingType(lv_dropLocation) != c_pathingGround) || (PointPathingPassable(lv_dropLocation) == false) || (PointPathingIsConnected(lv_dropLocation, libARRA_gf_GetPlayerStartPosition(lv_indexPlayer)) == false) || (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_dropLocation, 25.0, libCOMI_gf_AffectedPlayers()) == false) || (UnitCount("MineralField", c_playerAny, RegionCircle(lv_dropLocation, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1) || (libCOMI_gf_CT_NearbyCliffs(lv_dropLocation, 3.0) == true))) {
                            lv_dropLocation = null;
                            continue;
                        }
                        else {
                            break;
                        }
                    }
                }
                else {
                    lv_targetLocation = UnitGetPosition(UnitGroupRandomUnit(lv_targetCandidates, c_unitCountAlive));
                    lv_dropSafetyIndex = 1;
                    for ( ; ( (autoDBD06A2C_ai >= 0 && lv_dropSafetyIndex <= autoDBD06A2C_ae) || (autoDBD06A2C_ai < 0 && lv_dropSafetyIndex >= autoDBD06A2C_ae) ) ; lv_dropSafetyIndex += autoDBD06A2C_ai ) {
                        lv_dropLocation = PointWithOffsetPolar(lv_targetLocation, 7.0, libNtve_gf_RandomAngle());
                        if (((PathingType(lv_dropLocation) != c_pathingGround) || (PointPathingPassable(lv_dropLocation) == false) || (PointPathingIsConnected(lv_dropLocation, libARRA_gf_GetPlayerStartPosition(lv_indexPlayer)) == false) || (libCOMI_gf_CT_NearbyCliffs(lv_dropLocation, 3.0) == true))) {
                            lv_dropLocation = null;
                            continue;
                        }
                        else {
                            break;
                        }
                    }
                }
                if ((lv_dropLocation == null)) {
                    continue;
                }

                autoFC09871E_val = lv_dropCount[lv_indexPlayer];
                if (autoFC09871E_val == 1) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_dropLocation);
                }
                else if (autoFC09871E_val == 2) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller, libCOMI_ge_CoopAITechLevelBuckets__1Early, lv_dropLocation);
                }
                else if (autoFC09871E_val == 3) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__3Small, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_dropLocation);
                }
                else if (autoFC09871E_val == 4) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid, lv_dropLocation);
                }
                else if (autoFC09871E_val == 5) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__3Mid, lv_dropLocation);
                }
                else if (autoFC09871E_val == 6) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__4Medium, libCOMI_ge_CoopAITechLevelBuckets__4LateMid, lv_dropLocation);
                }
                else if (autoFC09871E_val == 6) {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets__5Late, lv_dropLocation);
                }
                else {
                    lv_attackGroup = libCOMI_gf_CreateCommanderAttackGroupatPoint(lv_dropPlayer, libCOMI_ge_CoopAIAttackWaveBuckets__5Large, libCOMI_ge_CoopAITechLevelBuckets_TechLevel06, lv_dropLocation);
                }
                libCOMI_gf_CT_RegisterSpawnedUnitGroup(lv_attackGroup);
                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), lv_dropLocation, 2.0, Color(100.00, 0.00, 0.00));
                AISetGroupScriptControlled(lv_attackGroup, false);
                AISetGroupSuicide(lv_attackGroup, true);
                TimerStart(lv_dropPodTimers[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 240.0, 220.0, 160.0, 120.0, 0.0, 0.0), false, c_timeAI);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DropPodSpawn_Init () {
    libCOMU_gt_CT_DropPodSpawn = TriggerCreate("libCOMU_gt_CT_DropPodSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_DropPodSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeEvolve
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeEvolve_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath7, true);
    TriggerEnable(libCOMU_gt_CT_UnitDamage10, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeEvolve_Init () {
    libCOMU_gt_CT_InitializeEvolve = TriggerCreate("libCOMU_gt_CT_InitializeEvolve_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeEvolve, ("Mutator " + "Evolve" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownEvolve
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownEvolve_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath7, false);
    TriggerEnable(libCOMU_gt_CT_UnitDamage10, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownEvolve_Init () {
    libCOMU_gt_CT_ShutdownEvolve = TriggerCreate("libCOMU_gt_CT_ShutdownEvolve_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownEvolve, ("Mutator " + "Evolve" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 7
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyEvolve(libNtve_gf_KillingUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath7_Init () {
    libCOMU_gt_CT_UnitDeath7 = TriggerCreate("libCOMU_gt_CT_UnitDeath7_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath7, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath7, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 10
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyEvolve(EventUnitDamageSourceUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage10_Init () {
    libCOMU_gt_CT_UnitDamage10 = TriggerCreate("libCOMU_gt_CT_UnitDamage10_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage10, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage10, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeEntomb
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeEntomb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_EntombApply, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeEntomb_Init () {
    libCOMU_gt_CT_InitializeEntomb = TriggerCreate("libCOMU_gt_CT_InitializeEntomb_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeEntomb, ("Mutator " + "Entomb" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownEntomb
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownEntomb_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_EntombApply);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownEntomb_Init () {
    libCOMU_gt_CT_ShutdownEntomb = TriggerCreate("libCOMU_gt_CT_ShutdownEntomb_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownEntomb, ("Mutator " + "Entomb" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_EntombApply
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_EntombApply_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[3] lv_entombTimer;
    int lv_indexPlayer;
    unit lv_indexUnit;
    int[3] lv_entombChance;
    unit lv_mineralNode;
    unitgroup lv_mineralGroup;
    unitgroup lv_townHallGroup;

    // Automatic Variable Declarations
    unitgroup autoEDD0CD18_g;
    int autoEDD0CD18_u;
    playergroup auto032BF4AC_g;
    unitgroup auto930A294D_g;
    int auto930A294D_u;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_entombTimer[init_i] = TimerCreate();
    }
    lv_mineralGroup = UnitGroupEmpty();
    lv_townHallGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_entombChance[1] = 10;
    lv_entombChance[2] = 10;
    autoEDD0CD18_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEDD0CD18_u = UnitGroupCount(autoEDD0CD18_g, c_unitCountAll);
    for (;; autoEDD0CD18_u -= 1) {
        lv_mineralNode = UnitGroupUnitFromEnd(autoEDD0CD18_g, autoEDD0CD18_u);
        if (lv_mineralNode == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_mineralNode), "ResourceType", c_playerAny) == "Minerals")) {
            UnitGroupAdd(lv_mineralGroup, lv_mineralNode);
        }

    }
    while (true) {
        Wait(1.0, c_timeGame);
        auto032BF4AC_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto032BF4AC_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((GameGetMissionTime() >= libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 300.0, 240.0, 200.0, 160.0, 0.0, 0.0)) && (TimerGetRemaining(lv_entombTimer[lv_indexPlayer]) <= 0.0) && (libCOMI_gf_GameIsOver() == false)) {
                if ((libCOMI_gf_MutatorIsEnabled("CycleRandom") == true)) {
                    lv_entombChance[lv_indexPlayer] = 100;
                }
                else {
                    lv_entombChance[lv_indexPlayer] += 5;
                }
                TimerStart(lv_entombTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 240.0, 180.0, 150.0, 120.0, 0.0, 0.0), false, c_timeGame);
                lv_townHallGroup = libCOMI_gf_CC_TownHallsForPlayer(lv_indexPlayer);
                if ((UnitGroupCount(libCOMI_gf_CC_TownHallsForPlayer(lv_indexPlayer), c_unitCountAlive) >= 1)) {
                    auto930A294D_g = lv_mineralGroup;
                    auto930A294D_u = UnitGroupCount(auto930A294D_g, c_unitCountAll);
                    for (;; auto930A294D_u -= 1) {
                        lv_mineralNode = UnitGroupUnitFromEnd(auto930A294D_g, auto930A294D_u);
                        if (lv_mineralNode == null) { break; }
                        if ((UnitIsValid(lv_mineralNode) == false)) {
                            UnitGroupRemove(lv_mineralGroup, lv_mineralNode);
                            continue;
                        }

                        if ((DistanceBetweenPoints(UnitGetPosition(lv_mineralNode), UnitGetPosition(UnitGroupClosestToPoint(lv_townHallGroup, UnitGetPosition(lv_mineralNode)))) <= 15.0)) {
                            if ((RandomInt(1, 100) <= lv_entombChance[lv_indexPlayer])) {
                                if ((libCOMI_gf_MutatorIsEnabled("CycleRandom") == true)) {
                                    lv_entombChance[lv_indexPlayer] -= libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 50, 30, 10, 0, 0, 0);
                                }

                                UnitBehaviorAddPlayer(lv_mineralNode, "ResourceStun", libCOMI_gf_MutatorPlayer(), 1);
                                libCOMI_gf_PingMinimapCampaign(PlayerGroupAll(), UnitGetPosition(lv_mineralNode), 2.0, Color(100.00, 0.00, 0.00));
                            }

                        }

                    }
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_EntombApply_Init () {
    libCOMU_gt_CT_EntombApply = TriggerCreate("libCOMU_gt_CT_EntombApply_Func");
    TriggerEnable(libCOMU_gt_CT_EntombApply, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeEndurance
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeEndurance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto06AEE6B5_g;
    int auto06AEE6B5_u;
    unit auto06AEE6B5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation2, true);
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix2, true);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent2, true);
    Wait(0.5, c_timeReal);
    auto06AEE6B5_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto06AEE6B5_u = UnitGroupCount(auto06AEE6B5_g, c_unitCountAll);
    for (;; auto06AEE6B5_u -= 1) {
        auto06AEE6B5_var = UnitGroupUnitFromEnd(auto06AEE6B5_g, auto06AEE6B5_u);
        if (auto06AEE6B5_var == null) { break; }
        libCOMU_gf_MM_ApplyEndurance(auto06AEE6B5_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeEndurance_Init () {
    libCOMU_gt_MM_InitializeEndurance = TriggerCreate("libCOMU_gt_MM_InitializeEndurance_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeEndurance, ("Mutator " + "Endurance" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownEndurance
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownEndurance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5C976C82_g;
    int auto5C976C82_u;
    unit auto5C976C82_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation2, false);
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix2, false);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent2, false);
    auto5C976C82_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5C976C82_u = UnitGroupCount(auto5C976C82_g, c_unitCountAll);
    for (;; auto5C976C82_u -= 1) {
        auto5C976C82_var = UnitGroupUnitFromEnd(auto5C976C82_g, auto5C976C82_u);
        if (auto5C976C82_var == null) { break; }
        UnitBehaviorRemovePlayer(auto5C976C82_var, "Endurance", libCOMI_gf_MutatorPlayer(), 1);
        UnitBehaviorRemovePlayer(auto5C976C82_var, "EnduranceTrain", libCOMI_gf_MutatorPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownEndurance_Init () {
    libCOMU_gt_MM_ShutdownEndurance = TriggerCreate("libCOMU_gt_MM_ShutdownEndurance_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownEndurance, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownEndurance, ("Mutator " + "Endurance" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRevived Fix 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitRevivedFix2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyEndurance(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitRevivedFix2_Init () {
    libCOMU_gt_MM_UnitRevivedFix2 = TriggerCreate("libCOMU_gt_MM_UnitRevivedFix2_Func");
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix2, false);
    TriggerAddEventUnitRevive(libCOMU_gt_MM_UnitRevivedFix2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitCreation 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyEndurance(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitCreation2_Init () {
    libCOMU_gt_MM_UnitCreation2 = TriggerCreate("libCOMU_gt_MM_UnitCreation2_Func");
    TriggerEnable(libCOMU_gt_MM_UnitCreation2, false);
    TriggerAddEventUnitCreated(libCOMU_gt_MM_UnitCreation2, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Unit Creation Event 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MutatorUnitCreationEvent2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyEndurance(libCOMI_gv_mutatorHero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MutatorUnitCreationEvent2_Init () {
    libCOMU_gt_MutatorUnitCreationEvent2 = TriggerCreate("libCOMU_gt_MutatorUnitCreationEvent2_Func");
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent2, false);
    TriggerAddEventGeneric(libCOMU_gt_MutatorUnitCreationEvent2, "Mutator Unit Creation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeFear
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeFear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage11, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeFear_Init () {
    libCOMU_gt_CT_InitializeFear = TriggerCreate("libCOMU_gt_CT_InitializeFear_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeFear, ("Mutator " + "Fear" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownFear
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownFear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage11, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownFear_Init () {
    libCOMU_gt_CT_ShutdownFear = TriggerCreate("libCOMU_gt_CT_ShutdownFear_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownFear, ("Mutator " + "Fear" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 11
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libCOMU_gf_CT_ApplyFear(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage11_Init () {
    libCOMU_gt_CT_UnitDamage11 = TriggerCreate("libCOMU_gt_CT_UnitDamage11_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage11, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage11, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeFireworks
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeFireworks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath12, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeFireworks_Init () {
    libCOMU_gt_CT_InitializeFireworks = TriggerCreate("libCOMU_gt_CT_InitializeFireworks_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeFireworks, ("Mutator " + "Fireworks" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownFireworks
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownFireworks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath12, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownFireworks_Init () {
    libCOMU_gt_CT_ShutdownFireworks = TriggerCreate("libCOMU_gt_CT_ShutdownFireworks_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownFireworks, ("Mutator " + "Fireworks" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 12
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath12_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyFireworks(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath12_Init () {
    libCOMU_gt_CT_UnitDeath12 = TriggerCreate("libCOMU_gt_CT_UnitDeath12_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath12, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath12, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeFoodHunt
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeFoodHunt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    int lv_catalogIndex;
    int lv_foodMade;

    // Automatic Variable Declarations
    int autoA3DF73CA_ae;
    const int autoA3DF73CA_ai = 1;
    playergroup autoE308DE70_g;
    playergroup auto50DE586D_g;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath9, true);
    TriggerEnable(libCOMU_gt_CT_UnitDamage6, true);
    CatalogReferenceSet("Unit,MutatorTurking,LifeStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2000.0, 2500.0, 4000.0, 6000.0, 6000.0, 6000.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorTurking,LifeStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2000.0, 2500.0, 4000.0, 6000.0, 6000.0, 6000.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorTurking,LifeRegenRate", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 2.0, 15.0, 30.0, 30.0, 30.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorInfestedTurkey,LifeStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(75.0, 100.0, 125.0, 150.0, 150.0, 150.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorInfestedTurkey,LifeMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(75.0, 100.0, 125.0, 150.0, 150.0, 150.0), c_fixedPrecisionAny));
    ActorSend(ActorFrom("::Scene"), "SceneHaloSetWidth 0.300000");
    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorCenter, 0, 100, StringExternal("Param/Value/lib_COMU_6FE6FC64"), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCOMU_gv_cT_FoodHuntWarningLabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 1000, 50, c_anchorCenter, 0, 50, StringExternal("Param/Value/lib_COMU_12147283"), Color(100.00, 0.00, 0.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libCOMU_gv_cT_FoodHuntAttackLabel = DialogControlLastCreated();
    autoA3DF73CA_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (autoA3DF73CA_ai >= 0 && lv_catalogIndex <= autoA3DF73CA_ae) || (autoA3DF73CA_ai < 0 && lv_catalogIndex >= autoA3DF73CA_ae) ) ; lv_catalogIndex += autoA3DF73CA_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        autoE308DE70_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoE308DE70_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_foodMade = FixedToInt(UnitTypeGetProperty((lv_stringUnitID), c_unitPropSuppliesMade));
            if ((lv_foodMade > 0)) {
                CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Food", lv_indexPlayer, "0");
            }

        }
    }
    auto50DE586D_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto50DE586D_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libCOMU_gv_cT_FoodHuntOriginalSupplyLimit[lv_indexPlayer] = PlayerGetPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit);
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 80, 70, 60, 50, 50, 50));
        PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, libCOMI_gf_DifficultyValueInt2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 80, 70, 60, 50, 50, 50));
    }
    TriggerExecute(libCOMU_gt_CT_FoodHuntDepleteFood, true, false);
    TriggerExecute(libCOMU_gt_CT_FoodHuntSpawn, true, false);
    TriggerExecute(libCOMU_gt_CT_FoodHuntHungerDamage, true, false);
    TriggerEnable(libCOMU_gt_CT_FoodHuntFear, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeFoodHunt_Init () {
    libCOMU_gt_CT_InitializeFoodHunt = TriggerCreate("libCOMU_gt_CT_InitializeFoodHunt_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeFoodHunt, ("Mutator " + "FoodHunt" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownFoodHunt
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownFoodHunt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath9, false);
    TriggerEnable(libCOMU_gt_CT_UnitDamage6, false);
    TriggerStop(libCOMU_gt_CT_FoodHuntDepleteFood);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownFoodHunt_Init () {
    libCOMU_gt_CT_ShutdownFoodHunt = TriggerCreate("libCOMU_gt_CT_ShutdownFoodHunt_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownFoodHunt, ("Mutator " + "FoodHunt" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 9
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyFoodHuntSpawn(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath9_Init () {
    libCOMU_gt_CT_UnitDeath9 = TriggerCreate("libCOMU_gt_CT_UnitDeath9_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath9, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath9, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 6
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyFoodHuntAggro(EventUnit(), EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage6_Init () {
    libCOMU_gt_CT_UnitDamage6 = TriggerCreate("libCOMU_gt_CT_UnitDamage6_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage6, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage6, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntDepleteFood
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_FoodHuntDepleteFood_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_foodDepleteTimer;
    timer[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_foodDamageTimer;
    int lv_indexPlayer;
    int lv_currentFood;
    fixed lv_foodUpdateTime;
    int lv_depletionCount;
    fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_depleteRate;

    // Automatic Variable Declarations
    playergroup autoE9B86967_g;
    playergroup auto88B0722E_g;
    playergroup auto39A04678_g;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_foodDepleteTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_foodDamageTimer[init_i] = TimerCreate();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE9B86967_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoE9B86967_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        lv_depleteRate[lv_indexPlayer] = (250.0 * libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 5.0, 4.0, 2.0, 1.0, 1.0, 1.0));
        TimerStart(lv_foodDepleteTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 15.0, 14.0, 13.0, 11.0, 11.0, 11.0), false, c_timeAI);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        lv_depletionCount = 0;
        lv_currentFood = PlayerGetPropertyInt(libCOMI_gf_AffectedPlayer(1), c_playerPropSuppliesLimit);
        auto88B0722E_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto88B0722E_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((TimerGetRemaining(lv_foodDepleteTimer[lv_indexPlayer]) <= 0.0)) {
                lv_depletionCount += 1;
                lv_foodUpdateTime = (lv_depleteRate[lv_indexPlayer]*(1.0/MaxF(libCOMU_gv_cT_SharedSupplyIndividual[lv_indexPlayer], 1.0)));
                TimerStart(lv_foodDepleteTimer[lv_indexPlayer], lv_foodUpdateTime, false, c_timeAI);
            }

        }
        if ((lv_depletionCount > 0)) {
            lv_currentFood = MaxI((lv_currentFood-lv_depletionCount), 0);
            auto39A04678_g = libCOMI_gf_AffectedPlayers();
            lv_indexPlayer = -1;
            while (true) {
                lv_indexPlayer = PlayerGroupNextPlayer(auto39A04678_g, lv_indexPlayer);
                if (lv_indexPlayer < 0) { break; }
                PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv_currentFood);
                PlayerModifyPropertyInt(lv_indexPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_currentFood);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_FoodHuntDepleteFood_Init () {
    libCOMU_gt_CT_FoodHuntDepleteFood = TriggerCreate("libCOMU_gt_CT_FoodHuntDepleteFood_Func");
    TriggerEnable(libCOMU_gt_CT_FoodHuntDepleteFood, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntHungerDamage
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_FoodHuntHungerDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_hungryPlayer;
    timer lv_foodDamageTimer;
    int[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_hunger;
    int lv_damageCount;
    unitgroup lv_hungerUnits;
    unitgroup lv_hungerWorkers;
    unit lv_hungerTarget;
    int lv_foodindividual;

    // Automatic Variable Declarations
    playergroup auto1069A7E2_g;
    int auto1069A7E2_var;
    int auto67A9B421_ae;
    const int auto67A9B421_ai = 1;

    // Variable Initialization
    lv_hungryPlayer = libCOMI_gf_AffectedPlayer(0);
    lv_foodDamageTimer = TimerCreate();
    lv_hungerUnits = UnitGroupEmpty();
    lv_hungerWorkers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        if ((PlayerGetPropertyInt(libCOMI_gf_AffectedPlayer(1), c_playerPropSuppliesUsed) > PlayerGetPropertyInt(libCOMI_gf_AffectedPlayer(1), c_playerPropSuppliesMade))) {
            DialogControlSetVisible(libCOMU_gv_cT_FoodHuntWarningLabel, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libCOMU_gv_cT_FoodHuntWarningLabel, PlayerGroupAll(), false);
        }
        if ((PlayerGetPropertyInt(libCOMI_gf_AffectedPlayer(1), c_playerPropSuppliesUsed) > PlayerGetPropertyInt(libCOMI_gf_AffectedPlayer(1), c_playerPropSuppliesMade)) && (TimerGetRemaining(lv_foodDamageTimer) <= 0.0)) {
            TimerStart(lv_foodDamageTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(10.0, 8.0, 5.0, 3.0, 3.0, 3.0), false, c_timeAI);
            lv_hungerUnits = UnitGroup(null, lv_hungryPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            lv_hungerWorkers = UnitGroup(null, lv_hungryPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            auto1069A7E2_g = libCOMI_gf_AffectedPlayers();
            auto1069A7E2_var = -1;
            while (true) {
                auto1069A7E2_var = PlayerGroupNextPlayer(auto1069A7E2_g, auto1069A7E2_var);
                if (auto1069A7E2_var < 0) { break; }
                if ((libCOMU_gv_cT_SharedSupplyIndividual[auto1069A7E2_var] > lv_foodindividual)) {
                    lv_hungryPlayer = auto1069A7E2_var;
                }

            }
            lv_hunger[lv_hungryPlayer] += 1;
            auto67A9B421_ae = lv_hunger[lv_hungryPlayer];
            lv_damageCount = 1;
            for ( ; ( (auto67A9B421_ai >= 0 && lv_damageCount <= auto67A9B421_ae) || (auto67A9B421_ai < 0 && lv_damageCount >= auto67A9B421_ae) ) ; lv_damageCount += auto67A9B421_ai ) {
                if ((UnitGroupCount(lv_hungerUnits, c_unitCountAlive) > 0)) {
                    lv_hungerTarget = UnitGroupRandomUnit(lv_hungerUnits, c_unitCountAlive);
                    PlayerCreateEffectUnit(lv_hungryPlayer, "MutatorHungerDamage", lv_hungerTarget);
                    SoundPlayOnUnitForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), lv_hungerTarget, 0.0, 100.0, 0.0);
                }
                else if ((UnitGroupCount(lv_hungerWorkers, c_unitCountAlive) > 0)) {
                    lv_hungerTarget = UnitGroupRandomUnit(lv_hungerWorkers, c_unitCountAlive);
                    PlayerCreateEffectUnit(lv_hungryPlayer, "MutatorHungerDamage", lv_hungerTarget);
                    SoundPlayOnUnitForPlayer(SoundLink("InfestedCivilian_Moan", -1), c_maxPlayers, PlayerGroupAll(), lv_hungerTarget, 0.0, 100.0, 0.0);
                }
            }
        }
        else {
            if ((PlayerGetPropertyInt(libCOMI_gf_AffectedPlayer(1), c_playerPropSuppliesUsed) <= PlayerGetPropertyInt(libCOMI_gf_AffectedPlayer(1), c_playerPropSuppliesMade))) {
                lv_hunger[lv_hungryPlayer] = 0;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_FoodHuntHungerDamage_Init () {
    libCOMU_gt_CT_FoodHuntHungerDamage = TriggerCreate("libCOMU_gt_CT_FoodHuntHungerDamage_Func");
    TriggerEnable(libCOMU_gt_CT_FoodHuntHungerDamage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_FoodHuntSpawn_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_foodSpawnTimer;
    int lv_indexPlayer;
    int lv_spawnAttempt;
    point lv_spawnLocation;
    int lv_turkeyCount;

    // Automatic Variable Declarations
    const int auto8214D3A4_ae = 30;
    const int auto8214D3A4_ai = 1;
    const int auto342EEEC8_ae = 100;
    const int auto342EEEC8_ai = 1;
    playergroup auto15116D45_g;
    playergroup auto58EF16CA_g;
    const int auto6C3FC468_ae = 100;
    const int auto6C3FC468_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_foodSpawnTimer[init_i] = TimerCreate();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_turkeyCount = 1;
    for ( ; ( (auto8214D3A4_ai >= 0 && lv_turkeyCount <= auto8214D3A4_ae) || (auto8214D3A4_ai < 0 && lv_turkeyCount >= auto8214D3A4_ae) ) ; lv_turkeyCount += auto8214D3A4_ai ) {
        lv_spawnAttempt = 1;
        for ( ; ( (auto342EEEC8_ai >= 0 && lv_spawnAttempt <= auto342EEEC8_ae) || (auto342EEEC8_ai < 0 && lv_spawnAttempt >= auto342EEEC8_ae) ) ; lv_spawnAttempt += auto342EEEC8_ai ) {
            lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (PointPathingIsConnected(lv_spawnLocation, libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))) == false) || (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnLocation, 7.0, libCOMI_gf_AffectedPlayers()) == false) || (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnLocation, 40.0, libCOMI_gf_AffectedPlayers()) == true))) {
                continue;
            }

            UnitCreate(1, "MutatorTurkey", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation, libNtve_gf_RandomAngle());
            UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
            libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
            break;
        }
    }
    auto15116D45_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto15116D45_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_foodSpawnTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 8.0, 8.0, 8.0, 8.0, 8.0, 8.0), false, c_timeAI);
    }
    while (true) {
        Wait(1.0, c_timeAI);
        auto58EF16CA_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto58EF16CA_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((TimerGetRemaining(lv_foodSpawnTimer[lv_indexPlayer]) > 0.0)) {
                continue;
            }

            lv_spawnAttempt = 1;
            for ( ; ( (auto6C3FC468_ai >= 0 && lv_spawnAttempt <= auto6C3FC468_ae) || (auto6C3FC468_ai < 0 && lv_spawnAttempt >= auto6C3FC468_ae) ) ; lv_spawnAttempt += auto6C3FC468_ai ) {
                lv_spawnLocation = RegionRandomPoint(RegionRect((PointGetX(libARRA_gf_GetPlayerStartPosition(lv_indexPlayer))-50.0), (PointGetY(libARRA_gf_GetPlayerStartPosition(lv_indexPlayer))-30.0), (PointGetX(libARRA_gf_GetPlayerStartPosition(lv_indexPlayer))+50.0), (PointGetY(libARRA_gf_GetPlayerStartPosition(lv_indexPlayer))+30.0)));
                if (((PathingType(lv_spawnLocation) != c_pathingGround) || (PointPathingIsConnected(lv_spawnLocation, libARRA_gf_GetPlayerStartPosition(lv_indexPlayer)) == false) || (DistanceBetweenPoints(lv_spawnLocation, CameraGetTarget(libCOMI_gf_CC_PlayerAlly(lv_indexPlayer))) <= 20.0) || (DistanceBetweenPoints(lv_spawnLocation, CameraGetTarget(lv_indexPlayer)) <= 20.0))) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorTurkey", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
                UnitSetState(UnitLastCreated(), c_unitStateTooltipable, true);
                libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
                break;
            }
            TimerStart(lv_foodSpawnTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 8.0, 8.0, 8.0, 8.0, 8.0, 8.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_FoodHuntSpawn_Init () {
    libCOMU_gt_CT_FoodHuntSpawn = TriggerCreate("libCOMU_gt_CT_FoodHuntSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_FoodHuntSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_FoodHuntFear
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_FoodHuntFear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(EventUnit(), "MutatorInfestedTurkeyTerrifyingGobble") == true) && (UnitIsAlive(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 3.0))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_FoodHuntFear_Init () {
    libCOMU_gt_CT_FoodHuntFear = TriggerCreate("libCOMU_gt_CT_FoodHuntFear_Func");
    TriggerEnable(libCOMU_gt_CT_FoodHuntFear, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_CT_FoodHuntFear, null, "MutatorInfestedTurkeyTerrifyingGobble", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeGreatWall
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeGreatWall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;
    point lv_vWorkerSpawn;
    point lv_vCreepTumorSpawn;
    unit lv_vUnit;
    unitgroup lv_vUG;
    unitgroup lv_vCreepTumorBurrowed;
    fixed lv_vPeriod;
    bool lv_vEitherOr;
    int lv_vPlayer;
    int lv_vOtherPlayer;
    fixed lv_vStartDistance;
    fixed lv_vObjDistance;
    int lv_vRandom;
    fixed lv_vCoef;

    // Automatic Variable Declarations
    string auto2177AA04_val;
    const int auto60C9DCF3_ae = 12;
    int auto60C9DCF3_var;
    unitgroup autoD325384C_g;
    int autoD325384C_u;
    unit autoD325384C_var;
    unitgroup auto99A70F0C_g;
    int auto99A70F0C_u;
    unit auto99A70F0C_var;
    string auto8CDD3259_val;
    string auto3B6CDADE_val;
    const int auto9425BB96_n = 50;
    int auto9425BB96_i;
    const int autoF7FBC2DC_n = 200;
    int autoF7FBC2DC_i;
    int auto75B34D0D_val;
    unitgroup autoFB690F55_g;
    int autoFB690F55_u;
    unit autoFB690F55_var;
    string autoD3D9C63C_val;
    const int auto59329284_n = 50;
    int auto59329284_i;
    const int auto5D349A6C_n = 400;
    int auto5D349A6C_i;
    int auto6E7BF590_val;
    unitgroup autoC6A51333_g;
    int autoC6A51333_u;
    unit autoC6A51333_var;
    string auto38250853_val;
    unitgroup autoFC9EBDB4_g;
    int autoFC9EBDB4_u;
    unit autoFC9EBDB4_var;
    const int autoABF14AB3_n = 50;
    int autoABF14AB3_i;
    const int autoE3779C28_n = 400;
    int autoE3779C28_i;
    int autoE178642B_val;
    const int auto32928A99_n = 300;
    int auto32928A99_i;

    // Variable Initialization
    lv_vUG = UnitGroupEmpty();
    lv_vCreepTumorBurrowed = UnitGroupEmpty();
    lv_vPeriod = 1.2;
    lv_vPlayer = 4;
    lv_vOtherPlayer = 3;
    lv_vStartDistance = 35.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_GW_PathingInit();
    libCOMI_gf_GivePlayerResources(Point(0.0, 0.0), libCOMI_ge_CacheResourceType_Mineral, 10000000, null, null, lv_vPlayer);
    libCOMI_gf_GivePlayerResources(Point(0.0, 0.0), libCOMI_ge_CacheResourceType_Vespene, 10000000, null, null, lv_vPlayer);
    auto2177AA04_val = libCOMI_gf_CC_CurrentMap();
    if (auto2177AA04_val == "AC_ShakurasTemple") {
        lv_vStartDistance = 10.0;
        lv_vObjDistance = 30.0;
    }
    else if (auto2177AA04_val == "AC_MeinhoffDayNight") {
        lv_vStartDistance = 10.0;
    }
    else if (auto2177AA04_val == "AC_TarsonisTrain") {
        lv_vStartDistance = 10.0;
    }
    else {
    }
    auto60C9DCF3_var = 3;
    for ( ; auto60C9DCF3_var <= auto60C9DCF3_ae; auto60C9DCF3_var += 1 ) {
        libNtve_gf_SetUpgradeLevelForPlayer(auto60C9DCF3_var, "FireSuppressionSystems", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto60C9DCF3_var, "HailstormMissilePods", 1);
        CatalogFieldValueSet(c_gameCatalogBehavior, "ShrikeTurret", "Requirements", auto60C9DCF3_var, "");
        libNtve_gf_SetUpgradeLevelForPlayer(auto60C9DCF3_var, "NeosteelFrame", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto60C9DCF3_var, "TerranBuildingArmor", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto60C9DCF3_var, "HiSecAutoTracking", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto60C9DCF3_var, "ShieldBatteryStructureBarrier", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto60C9DCF3_var, "KaraxTurretRange", 1);
        TechTreeSpecificRequirementEnable(auto60C9DCF3_var, "HaveForge", false);
        TechTreeSpecificRequirementEnable(auto60C9DCF3_var, "HaveGateway", false);
        TechTreeSpecificRequirementEnable(auto60C9DCF3_var, "KaraxLevel05", false);
        TechTreeSpecificRequirementEnable(auto60C9DCF3_var, "HaveSpawningPool", false);
        TechTreeSpecificRequirementEnable(auto60C9DCF3_var, "HaveEvolutionChamber", false);
        TechTreeSpecificRequirementEnable(auto60C9DCF3_var, "HaveEngineeringBay", false);
        TechTreeSpecificRequirementEnable(auto60C9DCF3_var, "HaveBarracks", false);
    }
    autoD325384C_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD325384C_u = UnitGroupCount(autoD325384C_g, c_unitCountAll);
    for (;; autoD325384C_u -= 1) {
        autoD325384C_var = UnitGroupUnitFromEnd(autoD325384C_g, autoD325384C_u);
        if (autoD325384C_var == null) { break; }
        if ((UnitPathableToPoint(autoD325384C_var, libARRA_gf_GetPlayerStartPosition(PlayerGroupPlayer(libCOMI_gf_AffectedPlayers(), 1)), 10.0, 10000.0) == true)) {
            UnitSetOwner(autoD325384C_var, lv_vPlayer, true);
        }

    }
    auto99A70F0C_g = UnitGroup("CreepTumorBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto99A70F0C_u = UnitGroupCount(auto99A70F0C_g, c_unitCountAll);
    for (;; auto99A70F0C_u -= 1) {
        auto99A70F0C_var = UnitGroupUnitFromEnd(auto99A70F0C_g, auto99A70F0C_u);
        if (auto99A70F0C_var == null) { break; }
        UnitSetOwner(auto99A70F0C_var, lv_vPlayer, true);
    }
    Wait(2.0, c_timeGame);
    auto8CDD3259_val = libARRA_gf_GetUnitRace(UnitGroupRandomUnit(UnitGroup(null, lv_vPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive));
    if (auto8CDD3259_val == "Terr") {
        autoD3D9C63C_val = libCOMI_gf_CC_CurrentMap();
        if (autoD3D9C63C_val == "AC_ShakurasTemple") {
            lv_vPeriod = 0.9;
        }
        else if (autoD3D9C63C_val == "AC_TarsonisTrain") {
            lv_vPeriod = 0.5;
        }
        else {
            lv_vPeriod = 1.3;
        }
        while (true) {
            Wait(lv_vPeriod, c_timeGame);
            UnitGroupClear(lv_vUG);
            UnitGroupAddUnitGroup(lv_vUG, UnitGroupIdle(lv_vPlayer, true));
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) <= 10)) {
                lv_vWorkerSpawn = libCOMI_gf_MM_PositionEnemyStructureWithPathing();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SCV", 0, lv_vPlayer, lv_vWorkerSpawn);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GreatWallWorker", lv_vPlayer, 1);
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vUG, UnitLastCreated());
            }

            AISetGroupScriptControlled(lv_vUG, true);
            for (auto59329284_i = 1; auto59329284_i <= auto59329284_n; auto59329284_i += 1) {
                lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_vUnit))) {
                    break;
                }
                else {
                    lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                }
            }
            libNtve_gf_PauseUnit(lv_vUnit, false);
            UnitSetState(lv_vUnit, c_unitStateSleeping, false);
            for (auto5D349A6C_i = 1; auto5D349A6C_i <= auto5D349A6C_n; auto5D349A6C_i += 1) {
                lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 50.0));
                if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, lv_vStartDistance, libCOMI_gf_AffectedPlayers()) == true) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOMI_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (PathingType(lv_vPoint) == c_pathingGround) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 5000.0) == true) && (RegionContainsPoint(libCOMU_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                    break;
                }

            }
            auto6E7BF590_val = RandomInt(1, 3);
            if (auto6E7BF590_val == 1) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("TerranBuild", 6), lv_vPoint), c_orderQueueReplace);
            }
            else if (auto6E7BF590_val == 2) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("TerranBuild", 5), lv_vPoint), c_orderQueueReplace);
            }
            else if (auto6E7BF590_val == 3) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("TerranBuild", 0), lv_vPoint), c_orderQueueReplace);
            }
            else {
            }
            autoC6A51333_g = UnitGroup("CommandCenter", lv_vPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC6A51333_u = UnitGroupCount(autoC6A51333_g, c_unitCountAll);
            for (;; autoC6A51333_u -= 1) {
                autoC6A51333_var = UnitGroupUnitFromEnd(autoC6A51333_g, autoC6A51333_u);
                if (autoC6A51333_var == null) { break; }
                UnitIssueOrder(autoC6A51333_var, Order(AbilityCommand("UpgradeToPlanetaryFortress", 0)), c_orderQueueReplace);
            }
        }
    }
    else if (auto8CDD3259_val == "Prot") {
        auto38250853_val = libCOMI_gf_CC_CurrentMap();
        if (auto38250853_val == "AC_ShakurasTemple") {
            lv_vPeriod = 0.9;
        }
        else if (auto38250853_val == "AC_TarsonisTrain") {
            lv_vPeriod = 0.5;
        }
        else {
            lv_vPeriod = 1.2;
        }
        autoFC9EBDB4_g = UnitGroup(null, lv_vOtherPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFC9EBDB4_u = UnitGroupCount(autoFC9EBDB4_g, c_unitCountAll);
        for (;; autoFC9EBDB4_u -= 1) {
            autoFC9EBDB4_var = UnitGroupUnitFromEnd(autoFC9EBDB4_g, autoFC9EBDB4_u);
            if (autoFC9EBDB4_var == null) { break; }
            UnitSetOwner(autoFC9EBDB4_var, lv_vPlayer, true);
        }
        while (true) {
            Wait(lv_vPeriod, c_timeGame);
            UnitGroupClear(lv_vUG);
            UnitGroupAddUnitGroup(lv_vUG, UnitGroupIdle(lv_vPlayer, true));
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) <= 10)) {
                lv_vWorkerSpawn = libCOMI_gf_MM_PositionEnemyStructureWithPathing();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Probe", 0, lv_vPlayer, lv_vWorkerSpawn);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GreatWallWorker", lv_vPlayer, 1);
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vUG, UnitLastCreated());
            }

            AISetGroupScriptControlled(lv_vUG, true);
            for (autoABF14AB3_i = 1; autoABF14AB3_i <= autoABF14AB3_n; autoABF14AB3_i += 1) {
                lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_vUnit))) {
                    break;
                }
                else {
                    lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                }
            }
            libNtve_gf_PauseUnit(lv_vUnit, false);
            UnitSetState(lv_vUnit, c_unitStateSleeping, false);
            for (autoE3779C28_i = 1; autoE3779C28_i <= autoE3779C28_n; autoE3779C28_i += 1) {
                lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 50.0));
                if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, lv_vStartDistance, libCOMI_gf_AffectedPlayers()) == true) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOMI_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCount("Pylon", c_playerAny, RegionCircle(lv_vPoint, 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= 1) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (PathingType(lv_vPoint) == c_pathingGround) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 2.0, 5000.0) == true) && (RegionContainsPoint(libCOMU_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                    break;
                }

            }
            autoE178642B_val = RandomInt(1, 4);
            if (autoE178642B_val == 1) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 7), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoE178642B_val == 2) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 24), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoE178642B_val == 3) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 21), lv_vPoint), c_orderQueueReplace);
            }
            else if (autoE178642B_val == 4) {
                for (auto32928A99_i = 1; auto32928A99_i <= auto32928A99_n; auto32928A99_i += 1) {
                    lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 60.0));
                    if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, lv_vStartDistance, libCOMI_gf_AffectedPlayers()) == true) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOMI_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCount("Pylon", lv_vPlayer, RegionCircle(lv_vPoint, 9.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < 1) && (PathingType(lv_vPoint) == c_pathingGround) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 2.0, 5000.0) == true) && (RegionContainsPoint(libCOMU_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                        UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ProtossBuild", 1), lv_vPoint), c_orderQueueReplace);
                        break;
                    }

                }
            }
            else {
            }
        }
    }
    else {
        auto3B6CDADE_val = libCOMI_gf_CC_CurrentMap();
        if (auto3B6CDADE_val == "AC_ShakurasTemple") {
            lv_vPeriod = 0.2;
        }
        else if (auto3B6CDADE_val == "AC_TarsonisTrain") {
            lv_vPeriod = 0.2;
        }
        else {
            lv_vPeriod = 0.3;
        }
        while (true) {
            Wait(lv_vPeriod, c_timeGame);
            UnitGroupClear(lv_vUG);
            UnitGroupAddUnitGroup(lv_vUG, UnitGroupIdle(lv_vPlayer, true));
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) <= 10)) {
                lv_vWorkerSpawn = libCOMI_gf_MM_PositionEnemyStructureWithPathing();
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, lv_vPlayer, lv_vWorkerSpawn);
                UnitBehaviorAddPlayer(UnitLastCreated(), "GreatWallWorker", lv_vPlayer, 1);
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vUG, UnitLastCreated());
            }

            AISetGroupScriptControlled(lv_vUG, true);
            for (auto9425BB96_i = 1; auto9425BB96_i <= auto9425BB96_n; auto9425BB96_i += 1) {
                lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_vUnit))) {
                    break;
                }
                else {
                    lv_vUnit = UnitGroupRandomUnit(lv_vUG, c_unitCountAlive);
                }
            }
            libNtve_gf_PauseUnit(lv_vUnit, false);
            UnitSetState(lv_vUnit, c_unitStateSleeping, false);
            lv_vRandom = RandomInt(1, 3);
            if ((libCOMI_gf_CC_CurrentMap() == "AC_MeinhoffDayNight") && (lv_vRandom == 3)) {
                lv_vCoef = 3.0;
            }
            else {
                lv_vCoef = 1.0;
            }
            for (autoF7FBC2DC_i = 1; autoF7FBC2DC_i <= autoF7FBC2DC_n; autoF7FBC2DC_i += 1) {
                lv_vPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_vUnit), 40.0));
                if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, (lv_vStartDistance * lv_vCoef), libCOMI_gf_AffectedPlayers()) == true) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceEnemy, RegionCircle(lv_vPoint, 10.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) <= 1) && ((DistanceBetweenPoints(lv_vPoint, UnitGetPosition(UnitGroupUnit(UnitGroup("TempleShakuras02", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1))) >= lv_vObjDistance) || (libCOMI_gf_CC_CurrentMap() != "AC_ShakurasTemple")) && (UnitCountAlliance(lv_vPlayer, c_unitAllianceAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (CreepIsPresent(lv_vPoint) == true) && (PathingType(lv_vPoint) == c_pathingGround) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint) && (UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 5000.0) == true) && (RegionContainsPoint(libCOMU_gv_mM_GW_NoBuildRegion, lv_vPoint) == false)) {
                    break;
                }

            }
            auto75B34D0D_val = lv_vRandom;
            if (auto75B34D0D_val == 1) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ZergBuild", 14), lv_vPoint), c_orderQueueReplace);
            }
            else if (auto75B34D0D_val == 2) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ZergBuild", 15), lv_vPoint), c_orderQueueReplace);
            }
            else if (auto75B34D0D_val == 3) {
                UnitIssueOrder(lv_vUnit, OrderTargetingPoint(AbilityCommand("ZergBuild", 19), lv_vPoint), c_orderQueueReplace);
            }
            else {
            }
            lv_vCreepTumorBurrowed = UnitGroup("CreepTumorBurrowed", lv_vPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_vCreepTumorBurrowed, c_unitCountAlive) < 15)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepTumorBurrowed", 0, lv_vPlayer, UnitGetPosition(UnitGroupRandomUnit(UnitGroupAlliance(lv_vPlayer, c_unitAllianceAlly, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                UnitGroupAdd(lv_vCreepTumorBurrowed, UnitLastCreated());
            }

            autoFB690F55_g = lv_vCreepTumorBurrowed;
            autoFB690F55_u = UnitGroupCount(autoFB690F55_g, c_unitCountAll);
            for (;; autoFB690F55_u -= 1) {
                autoFB690F55_var = UnitGroupUnitFromEnd(autoFB690F55_g, autoFB690F55_u);
                if (autoFB690F55_var == null) { break; }
                libNtve_gf_AICast(autoFB690F55_var, OrderTargetingPoint(AbilityCommand("CreepTumorBuild", 0), libCOMU_gf_MM_GW_CreepTumorTarget(autoFB690F55_var)));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeGreatWall_Init () {
    libCOMU_gt_MM_InitializeGreatWall = TriggerCreate("libCOMU_gt_MM_InitializeGreatWall_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeGreatWall, ("Mutator " + "GreatWall" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownGreatWall
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownGreatWall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent, false);
    TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod, false);
    TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn, false);
    TriggerEnable(libCOMU_gt_MM_GW_ConstructionStarted, false);
    TriggerStop(libCOMU_gt_MM_InitializeGreatWall);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownGreatWall_Init () {
    libCOMU_gt_MM_ShutdownGreatWall = TriggerCreate("libCOMU_gt_MM_ShutdownGreatWall_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownGreatWall, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownGreatWall, ("Mutator " + "GreatWall" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_ConstructionStarted
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_GW_ConstructionStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), libCOMI_gf_AffectedPlayer(0), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnitProgressUnit(), libCOMU_gv_mM_GW_NoBuildRegion) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnitProgressUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_GW_ConstructionStarted_Init () {
    libCOMU_gt_MM_GW_ConstructionStarted = TriggerCreate("libCOMU_gt_MM_GW_ConstructionStarted_Func");
    TriggerEnable(libCOMU_gt_MM_GW_ConstructionStarted, false);
    TriggerAddEventUnitConstructProgress(libCOMU_gt_MM_GW_ConstructionStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_AICreatesAttackWave DropPod
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(EventUnitCreatedUnit())) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "TerranDropPod") || (UnitGetType(EventUnitCreatedUnit()) == "ZergDropPodLarge") || (UnitGetType(EventUnitCreatedUnit()) == "ZergDropPod")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = UnitGroupAlliance(UnitGetOwner(EventUnitCreatedUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnitCreatedUnit()), 2.5), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) >= 6)) {
        libCOMU_gf_MM_GW_Path(UnitGetPosition(EventUnitCreatedUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod_Init () {
    libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod = TriggerCreate("libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod_Func");
    TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod, false);
    TriggerAddEventUnitCreated(libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_AICreatesAttackWave WarpIn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitAbilityCheck(EventUnit(), "attack", false) == true))) {
            return false;
        }

        if (!((UnitAbilityCheck(EventUnit(), "move", false) == true))) {
            return false;
        }

        if (!((UnitWeaponCount(EventUnit()) >= 1))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeMapBoss) == false))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagWorker) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 2.5), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterUser1) | (1 << c_targetFilterWorker) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) >= 4)) {
        libCOMU_gf_MM_GW_Path(UnitGetPosition(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn_Init () {
    libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn = TriggerCreate("libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn_Func");
    TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn, null, "ProtossGenericWarpInOut", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GW_AICreatesAttackWave AI Event
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_PlayerIsEnemy(UnitGetOwner(UnitGroupRandomUnit(lv_vUG, c_unitCountAlive)), libCOMI_gf_AffectedPlayer(0), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) >= 4)) {
        libCOMU_gf_MM_GW_Path(UnitGetPosition(UnitGroupRandomUnit(lv_vUG, c_unitCountAlive)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent_Init () {
    libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent = TriggerCreate("libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent_Func");
    TriggerEnable(libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent, false);
    TriggerAddEventPlayerAIWave(libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeGiftFight
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeGiftFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto63C3F758_g;
    string auto3B5EA457_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation9, true);
    TriggerExecute(libCOMU_gt_CT_GiftFightControl, true, false);
    TriggerExecute(libCOMU_gt_CT_GiftFightSpawn, true, false);
    Wait(0.0625, c_timeGame);
    auto63C3F758_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto63C3F758_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto3B5EA457_val = PlayerRace(lv_indexPlayer);
        if (auto3B5EA457_val == "Terr") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto3B5EA457_val == "Prot") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto3B5EA457_val == "Zerg") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerrChristmas_Festive", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_Christmas_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeGiftFight_Init () {
    libCOMU_gt_CT_InitializeGiftFight = TriggerCreate("libCOMU_gt_CT_InitializeGiftFight_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeGiftFight, ("Mutator " + "GiftFight" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownGiftFight
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownGiftFight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation9, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownGiftFight_Init () {
    libCOMU_gt_CT_ShutdownGiftFight = TriggerCreate("libCOMU_gt_CT_ShutdownGiftFight_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownGiftFight, ("Mutator " + "GiftFight" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation9
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyWinterCheer(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation9_Init () {
    libCOMU_gt_CT_UnitCreation9 = TriggerCreate("libCOMU_gt_CT_UnitCreation9_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation9, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation9, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftFightSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_GiftFightSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_spawnTimer;
    point lv_spawnLocation;
    int lv_spawnAttempt;

    // Automatic Variable Declarations
    const int auto1E1E9A87_ae = 500;
    const int auto1E1E9A87_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_spawnTimer, 180.0, false, c_timeGame);
    while (true) {
        while (!((TimerGetRemaining(lv_spawnTimer) <= 0.0))) {
            Wait(1.0, c_timeGame);
        }
        lv_spawnAttempt = 1;
        for ( ; ( (auto1E1E9A87_ai >= 0 && lv_spawnAttempt <= auto1E1E9A87_ae) || (auto1E1E9A87_ai < 0 && lv_spawnAttempt >= auto1E1E9A87_ae) ) ; lv_spawnAttempt += auto1E1E9A87_ai ) {
            lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
            if (libCOMI_gf_ConnectedByGroundPath(lv_spawnLocation) && (PathingType(lv_spawnLocation) == c_pathingGround) && (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnLocation, 40.0, libCOMI_gf_AffectedPlayers()) == true) && (DistanceBetweenPoints(lv_spawnLocation, libCOMI_gf_GetAmonStartPosition(1, 1, PlayerGroupCount(libCOMI_gf_AffectedPlayers()))) >= 40.0) && (DistanceBetweenPoints(lv_spawnLocation, libCOMI_gf_GetAmonStartPosition(2, 1, PlayerGroupCount(libCOMI_gf_AffectedPlayers()))) >= 40.0) && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_spawnLocation, libCOMU_gv_cTC_GiftCaptureRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) <= 0)) {
                break;
            }
            else {
                lv_spawnLocation = null;
            }
        }
        if ((lv_spawnLocation == null)) {
            continue;
        }

        libCOMU_gf_CT_GiftSpawn(lv_spawnLocation);
        libCOMU_gf_CT_GiftSendAttack(libCOMU_gv_cT_GiftLastCreated);
        if ((GameGetMissionTime() > 1200.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(130.0, 130.0, 100.0, 100.0, 100.0, 100.0), false, c_timeGame);
        }
        else {
            TimerStart(lv_spawnTimer, 130.0, false, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_GiftFightSpawn_Init () {
    libCOMU_gt_CT_GiftFightSpawn = TriggerCreate("libCOMU_gt_CT_GiftFightSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_GiftFightSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftFightControl
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_GiftFightControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexGift;
    bool lv_playersPresent;
    bool lv_enemiesPresent;
    unitgroup lv_attackingForce;
    unit lv_indexAttacker;

    // Automatic Variable Declarations
    unitgroup auto63BC9A0B_g;
    int auto63BC9A0B_u;
    unitgroup auto07C9AB70_g;
    int auto07C9AB70_u;

    // Variable Initialization
    lv_attackingForce = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.1, c_timeAI);
        auto63BC9A0B_g = libCOMU_gv_cT_Gifts;
        auto63BC9A0B_u = UnitGroupCount(auto63BC9A0B_g, c_unitCountAll);
        for (;; auto63BC9A0B_u -= 1) {
            lv_indexGift = UnitGroupUnitFromEnd(auto63BC9A0B_g, auto63BC9A0B_u);
            if (lv_indexGift == null) { break; }
            lv_attackingForce = DataTableGetUnitGroup(true, ("CT_GiftAtk_" + IntToString(UnitGetTag(lv_indexGift))));
            if ((lv_attackingForce != null)) {
                AISetGroupScriptControlled(lv_attackingForce, false);
                auto07C9AB70_g = lv_attackingForce;
                auto07C9AB70_u = UnitGroupCount(auto07C9AB70_g, c_unitCountAll);
                for (;; auto07C9AB70_u -= 1) {
                    lv_indexAttacker = UnitGroupUnitFromEnd(auto07C9AB70_g, auto07C9AB70_u);
                    if (lv_indexAttacker == null) { break; }
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_indexAttacker), UnitGetPosition(lv_indexGift)) >= libCOMU_gv_cTC_GiftCaptureRadius) && (UnitOrderCount(lv_indexAttacker) == 0)) {
                        libNtve_gf_AICast(lv_indexAttacker, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_indexGift)));
                    }

                }
            }

            if ((UnitGroupCount(UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_indexGift), libCOMU_gv_cTC_GiftCaptureRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_playersPresent = true;
            }
            else {
                lv_playersPresent = false;
            }
            if ((UnitGroupCount(UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_indexGift), libCOMU_gv_cTC_GiftCaptureRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                lv_enemiesPresent = true;
            }
            else {
                lv_enemiesPresent = false;
            }
            if ((libCOMU_gf_CT_GiftState(lv_indexGift) == libCOMU_ge_CT_GiftState_CT_GiftStateSpawning)) {
                continue;
            }
            else if ((libCOMU_gf_CT_GiftState(lv_indexGift) == libCOMU_ge_CT_GiftState_CT_GiftStateStealing)) {
                libCOMU_gf_CT_GiftAddProgress(lv_indexGift, 1.0);
            }
            else if ((lv_enemiesPresent == true) && (lv_playersPresent == true)) {
                libCOMU_gf_CT_GiftSetState(lv_indexGift, libCOMU_ge_CT_GiftState_CT_GiftStateContested);
            }
            else if ((lv_enemiesPresent == true)) {
                libCOMU_gf_CT_GiftSetState(lv_indexGift, libCOMU_ge_CT_GiftState_CT_GiftStateEnemy);
                libCOMU_gf_CT_GiftAddProgress(lv_indexGift, 0.5);
            }
            else if ((lv_playersPresent == true)) {
                libCOMU_gf_CT_GiftSetState(lv_indexGift, libCOMU_ge_CT_GiftState_CT_GiftStatePlayer);
                libCOMU_gf_CT_GiftAddProgress(lv_indexGift, 0.5);
            }
            else if ((lv_playersPresent == false) && (lv_enemiesPresent == false)) {
                libCOMU_gf_CT_GiftSetState(lv_indexGift, libCOMU_ge_CT_GiftState_CT_GiftStateNeutral);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_GiftFightControl_Init () {
    libCOMU_gt_CT_GiftFightControl = TriggerCreate("libCOMU_gt_CT_GiftFightControl_Func");
    TriggerEnable(libCOMU_gt_CT_GiftFightControl, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftKillBotBanelingCredit
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_GiftKillBotBanelingCredit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "MutatorKillBot"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropKills, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropKills, c_unitPropCurrent) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_GiftKillBotBanelingCredit_Init () {
    libCOMU_gt_CT_GiftKillBotBanelingCredit = TriggerCreate("libCOMU_gt_CT_GiftKillBotBanelingCredit_Func");
    TriggerEnable(libCOMU_gt_CT_GiftKillBotBanelingCredit, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_CT_GiftKillBotBanelingCredit, c_playerAny, "HotSBanelingDeathExplodeLargeSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftShrunkEffectOn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_GiftShrunkEffectOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentScale;
    fixed lv_targetScale;
    fixed lv_step;

    // Automatic Variable Declarations
    const int autoBE0751B9_n = 10;
    int autoBE0751B9_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "MutatorAvenger") == true)) {
        lv_currentScale = 1.8;
        lv_targetScale = 0.9;
    }
    else {
        lv_currentScale = 1.0;
        lv_targetScale = 0.5;
    }
    lv_step = ((lv_targetScale - lv_currentScale) / 10.0);
    for (autoBE0751B9_i = 1; autoBE0751B9_i <= autoBE0751B9_n; autoBE0751B9_i += 1) {
        Wait(0.0625, c_timeGame);
        lv_currentScale += lv_step;
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_currentScale, c_fixedPrecisionAny))));
    }
    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_targetScale, c_fixedPrecisionAny))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_GiftShrunkEffectOn_Init () {
    libCOMU_gt_CT_GiftShrunkEffectOn = TriggerCreate("libCOMU_gt_CT_GiftShrunkEffectOn_Func");
    TriggerEnable(libCOMU_gt_CT_GiftShrunkEffectOn, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_CT_GiftShrunkEffectOn, null, "MutatorShrunk", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_GiftShrunkEffectOff
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_GiftShrunkEffectOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentScale;
    fixed lv_targetScale;
    fixed lv_step;

    // Automatic Variable Declarations
    const int auto10BBCE85_n = 10;
    int auto10BBCE85_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "MutatorAvenger") == true)) {
        lv_targetScale = 1.8;
        lv_currentScale = 0.9;
    }
    else {
        lv_targetScale = 1.0;
        lv_currentScale = 0.5;
    }
    lv_step = ((lv_targetScale - lv_currentScale) / 10.0);
    for (auto10BBCE85_i = 1; auto10BBCE85_i <= auto10BBCE85_n; auto10BBCE85_i += 1) {
        Wait(0.0625, c_timeGame);
        lv_currentScale += lv_step;
        libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_currentScale, c_fixedPrecisionAny))));
    }
    libNtve_gf_SendActorMessageToUnit(EventUnit(), (("SetScale " + FixedToString(lv_targetScale, c_fixedPrecisionAny))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_GiftShrunkEffectOff_Init () {
    libCOMU_gt_CT_GiftShrunkEffectOff = TriggerCreate("libCOMU_gt_CT_GiftShrunkEffectOff_Func");
    TriggerEnable(libCOMU_gt_CT_GiftShrunkEffectOff, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_CT_GiftShrunkEffectOff, null, "MutatorShrunk", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GiftShrunkEffectOn Fix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_GiftShrunkEffectOnFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.7, c_timeGame);
    libCOMI_gf_MM_UnitScaleController(EventUnit(), 0.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_GiftShrunkEffectOnFix_Init () {
    libCOMU_gt_MM_GiftShrunkEffectOnFix = TriggerCreate("libCOMU_gt_MM_GiftShrunkEffectOnFix_Func");
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_GiftShrunkEffectOnFix, null, "MutatorShrunk", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_GiftShrunkEffectOff Fix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_GiftShrunkEffectOffFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.7, c_timeGame);
    libCOMI_gf_MM_UnitScaleController(EventUnit(), 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_GiftShrunkEffectOffFix_Init () {
    libCOMU_gt_MM_GiftShrunkEffectOffFix = TriggerCreate("libCOMU_gt_MM_GiftShrunkEffectOffFix_Func");
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_GiftShrunkEffectOffFix, null, "MutatorShrunk", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TT_InitializeHeroesFromTheStorm (Old)
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_TT_InitializeHeroesFromTheStormOld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_raynorLife;
    fixed lv_tychusLife;
    fixed lv_dehakaLife;
    fixed lv_karaxLife;
    fixed lv_karaxShields;
    fixed lv_novaLife;
    fixed lv_zagaraLife;
    fixed lv_artanisLife;
    fixed lv_artanisShields;
    fixed lv_zeratulLife;
    fixed lv_zertaulShields;
    fixed lv_kerriganLife;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto04C2EE48_ae = libCOMU_gv_tT_C_AmonHeroMaxHeroTypes;
    const int auto04C2EE48_ai = 1;
    string auto9AED89F5_val;
    const int autoBB5D96DF_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int autoBB5D96DF_ai = 1;

    // Variable Initialization
    lv_raynorLife = 1000.0;
    lv_tychusLife = 1000.0;
    lv_dehakaLife = 1500.0;
    lv_karaxLife = 750.0;
    lv_karaxShields = 750.0;
    lv_novaLife = 2250.0;
    lv_zagaraLife = 2250.0;
    lv_artanisLife = 2000.0;
    lv_artanisShields = 2000.0;
    lv_zeratulLife = 2000.0;
    lv_zertaulShields = 2000.0;
    lv_kerriganLife = 5000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_tT_AmonHeroUnitTypeArray[1] = "MutatorAmonTychus";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[2] = "MutatorAmonRaynor";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[3] = "MutatorAmonDehaka";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[4] = "MutatorAmonKarax";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[5] = "MutatorAmonNova";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[6] = "MutatorAmonZagara";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[7] = "MutatorAmonZeratul";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[8] = "MutatorAmonArtanis";
    libCOMU_gv_tT_AmonHeroUnitTypeArray[9] = "MutatorAmonKerrigan";
    lv_heroIndex = 1;
    for ( ; ( (auto04C2EE48_ai >= 0 && lv_heroIndex <= auto04C2EE48_ae) || (auto04C2EE48_ai < 0 && lv_heroIndex >= auto04C2EE48_ae) ) ; lv_heroIndex += auto04C2EE48_ai ) {
        auto9AED89F5_val = libCOMU_gv_tT_AmonHeroUnitTypeArray[lv_heroIndex];
        if (auto9AED89F5_val == "MutatorAmonTychus") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonTychus_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonRaynor") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonRaynor_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonDehaka") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonDehaka_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonKarax") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKarax_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonNova") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonNova_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonZagara") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZagara_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonArtanis") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonArtanis_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonZeratul") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZeratul_BirthDialog", c_soundIndexAny);
        }
        else if (auto9AED89F5_val == "MutatorAmonKerrigan") {
            libCOMU_gv_tT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKerrigan_BirthDialog", c_soundIndexAny);
        }
        else {
        }
    }
    lv_player = 3;
    for ( ; ( (autoBB5D96DF_ai >= 0 && lv_player <= autoBB5D96DF_ae) || (autoBB5D96DF_ai < 0 && lv_player >= autoBB5D96DF_ae) ) ; lv_player += autoBB5D96DF_ai ) {
        if ((PlayerType(lv_player) == c_playerTypeComputer)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeMax", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeStart", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeMax", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeStart", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeMax", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeStart", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeMax", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeStart", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsMax", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsStart", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeMax", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeStart", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeMax", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeStart", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeMax", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeStart", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsMax", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsStart", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeMax", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeStart", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsMax", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsStart", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeMax", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeStart", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
        }

    }
    TriggerEnable(libCOMU_gt_TT_HeroesFromTheStormOld, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_TT_InitializeHeroesFromTheStormOld_Init () {
    libCOMU_gt_TT_InitializeHeroesFromTheStormOld = TriggerCreate("libCOMU_gt_TT_InitializeHeroesFromTheStormOld_Func");
    TriggerAddEventGeneric(libCOMU_gt_TT_InitializeHeroesFromTheStormOld, ("Mutator " + "HeroesfromtheStormOld" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: TT_ShutdownHeroesFromTheStorm (Old)
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_TT_ShutdownHeroesFromTheStormOld_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_TT_HeroesFromTheStormOld, false);
    TriggerStop(libCOMU_gt_TT_HeroesFromTheStormOld);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_TT_ShutdownHeroesFromTheStormOld_Init () {
    libCOMU_gt_TT_ShutdownHeroesFromTheStormOld = TriggerCreate("libCOMU_gt_TT_ShutdownHeroesFromTheStormOld_Func");
    TriggerAddEventGeneric(libCOMU_gt_TT_ShutdownHeroesFromTheStormOld, ("Mutator " + "HeroesfromtheStormOld" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: TT_HeroesFromTheStorm (Old)
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_TT_HeroesFromTheStormOld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_waveSpawnPoint;
    unit lv_heroUnit;
    int lv_i;
    int lv_randomHeroIndex1;
    int lv_randomHeroIndex2;
    int lv_randomHeroIndex3;

    // Automatic Variable Declarations
    int auto884DD71B_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waveSpawnPoint = UnitGroupCenterOfGroup(AIWaveGetUnits(EventPlayerWave()));
    libCOMU_gv_TT_AmonHeroNumber += 1;
    auto884DD71B_val = libCOMU_gv_TT_AmonHeroNumber;
    if (auto884DD71B_val == 1) {
        return true;
    }
    else if (auto884DD71B_val == 2) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[2], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[2], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 3) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[1], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[1], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 4) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 5) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 6) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 7) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 8) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[8], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[8], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 9) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[7], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[7], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else if (auto884DD71B_val == 10) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], 0, EventPlayer(), lv_waveSpawnPoint);
        SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[(libCOMU_gv_TT_AmonHeroNumber - 1)], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
        AISetUnitScriptControlled(UnitLastCreated(), false);
        AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
    }
    else {
        if ((ModI(libCOMU_gv_TT_AmonHeroNumber, 2) == 0)) {
            SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            SoundPlayAtPointForPlayer(SoundLink("MutatorAmonHero_BirthFX_Sur", c_soundIndexAny), c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            lv_randomHeroIndex1 = RandomInt(1, 3);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[lv_randomHeroIndex1], 0, EventPlayer(), lv_waveSpawnPoint);
            SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[lv_randomHeroIndex1], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
            lv_randomHeroIndex2 = RandomInt(4, 6);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[lv_randomHeroIndex2], 0, EventPlayer(), lv_waveSpawnPoint);
            SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[lv_randomHeroIndex2], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
            lv_randomHeroIndex3 = RandomInt(7, 9);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, libCOMU_gv_tT_AmonHeroUnitTypeArray[lv_randomHeroIndex3], 0, EventPlayer(), lv_waveSpawnPoint);
            SoundPlayAtPointForPlayer(libCOMU_gv_tT_AmonHeroSoundArray[lv_randomHeroIndex3], c_maxPlayers, PlayerGroupAll(), lv_waveSpawnPoint, 0.0, 100.0, 0.0);
            AISetUnitScriptControlled(UnitLastCreated(), false);
            AIWaveAddUnit(EventPlayerWave(), UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_TT_HeroesFromTheStormOld_Init () {
    libCOMU_gt_TT_HeroesFromTheStormOld = TriggerCreate("libCOMU_gt_TT_HeroesFromTheStormOld_Func");
    TriggerEnable(libCOMU_gt_TT_HeroesFromTheStormOld, false);
    TriggerAddEventPlayerAIWave(libCOMU_gt_TT_HeroesFromTheStormOld, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeHeroesFromTheStorm
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeHeroesFromTheStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_raynorLife;
    fixed lv_tychusLife;
    fixed lv_dehakaLife;
    fixed lv_karaxLife;
    fixed lv_karaxShields;
    fixed lv_novaLife;
    fixed lv_zagaraLife;
    fixed lv_artanisLife;
    fixed lv_artanisShields;
    fixed lv_zeratulLife;
    fixed lv_zertaulShields;
    fixed lv_kerriganLife;
    int lv_heroIndex;

    // Automatic Variable Declarations
    const int auto02C1020A_ae = libCOMU_gv_cTC_AmonHeroMaxHeroTypes;
    const int auto02C1020A_ai = 1;
    string autoCDDD6DD8_val;
    const int auto8D220E46_ae = libCOMI_gv_cMC_CoopAI_HighestPlayerIndex;
    const int auto8D220E46_ai = 1;

    // Variable Initialization
    lv_raynorLife = 1000.0;
    lv_tychusLife = 1000.0;
    lv_dehakaLife = 1500.0;
    lv_karaxLife = 750.0;
    lv_karaxShields = 750.0;
    lv_novaLife = 2250.0;
    lv_zagaraLife = 2250.0;
    lv_artanisLife = 2000.0;
    lv_artanisShields = 2000.0;
    lv_zeratulLife = 2000.0;
    lv_zertaulShields = 2000.0;
    lv_kerriganLife = 5000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_cT_AmonHeroUnitTypeArray[1] = "MutatorAmonRaynor";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[2] = "MutatorAmonTychus";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[3] = "MutatorAmonDehaka";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[4] = "MutatorAmonKarax";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[5] = "MutatorAmonNova";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[6] = "MutatorAmonZagara";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[7] = "MutatorAmonZeratul";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[8] = "MutatorAmonArtanis";
    libCOMU_gv_cT_AmonHeroUnitTypeArray[9] = "MutatorAmonKerrigan";
    lv_heroIndex = 1;
    for ( ; ( (auto02C1020A_ai >= 0 && lv_heroIndex <= auto02C1020A_ae) || (auto02C1020A_ai < 0 && lv_heroIndex >= auto02C1020A_ae) ) ; lv_heroIndex += auto02C1020A_ai ) {
        autoCDDD6DD8_val = libCOMU_gv_cT_AmonHeroUnitTypeArray[lv_heroIndex];
        if (autoCDDD6DD8_val == "MutatorAmonTychus") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonTychus_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonRaynor") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonRaynor_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonDehaka") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonDehaka_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonKarax") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKarax_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonNova") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonNova_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonZagara") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZagara_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonArtanis") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonArtanis_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonZeratul") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonZeratul_BirthDialog", c_soundIndexAny);
        }
        else if (autoCDDD6DD8_val == "MutatorAmonKerrigan") {
            libCOMU_gv_cT_AmonHeroSoundArray[lv_heroIndex] = SoundLink("MutatorAmonKerrigan_BirthDialog", c_soundIndexAny);
        }
        else {
        }
    }
    lv_player = 3;
    for ( ; ( (auto8D220E46_ai >= 0 && lv_player <= auto8D220E46_ae) || (auto8D220E46_ai < 0 && lv_player >= auto8D220E46_ae) ) ; lv_player += auto8D220E46_ai ) {
        if ((PlayerType(lv_player) == c_playerTypeComputer)) {
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeMax", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonRaynor", "LifeStart", lv_player, FixedToString(lv_raynorLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeMax", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonTychus", "LifeStart", lv_player, FixedToString(lv_tychusLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeMax", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonDehaka", "LifeStart", lv_player, FixedToString(lv_dehakaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeMax", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "LifeStart", lv_player, FixedToString(lv_karaxLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsMax", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKarax", "ShieldsStart", lv_player, FixedToString(lv_karaxShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeMax", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonNova", "LifeStart", lv_player, FixedToString(lv_novaLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeMax", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZagara", "LifeStart", lv_player, FixedToString(lv_zagaraLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeMax", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "LifeStart", lv_player, FixedToString(lv_artanisLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsMax", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonArtanis", "ShieldsStart", lv_player, FixedToString(lv_artanisShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeMax", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "LifeStart", lv_player, FixedToString(lv_zeratulLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsMax", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonZeratul", "ShieldsStart", lv_player, FixedToString(lv_zertaulShields, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeMax", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogUnit, "MutatorAmonKerrigan", "LifeStart", lv_player, FixedToString(lv_kerriganLife, c_fixedPrecisionAny));
        }

    }
    TriggerExecute(libCOMU_gt_CT_AmonHeroPool_Tracker, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeHeroesFromTheStorm_Init () {
    libCOMU_gt_CT_InitializeHeroesFromTheStorm = TriggerCreate("libCOMU_gt_CT_InitializeHeroesFromTheStorm_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeHeroesFromTheStorm, ("Mutator " + "HeroesFromTheStorm" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownHeroesFromTheStorm
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownHeroesFromTheStorm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownHeroesFromTheStorm_Init () {
    libCOMU_gt_CT_ShutdownHeroesFromTheStorm = TriggerCreate("libCOMU_gt_CT_ShutdownHeroesFromTheStorm_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownHeroesFromTheStorm, ("Mutator " + "HeroesFromTheStorm" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave Sent
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_WaveSent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_MutatorIsEnabled("HeroesFromTheStorm") == false) && (libCOMI_gv_attackTargetType != libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Special)) {
        libCOMU_gf_CT_AmonHero_AddToWave(libCOMI_gv_attackingPlayer, libCOMI_gv_attackingUnitGroup, libCOMI_gv_attackOrigin, libCOMI_gv_attackTargetType);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_WaveSent_Init () {
    libCOMU_gt_WaveSent = TriggerCreate("libCOMU_gt_WaveSent_Func");
    TriggerAddEventGeneric(libCOMU_gt_WaveSent, "Wave Sent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_AmonHeroPool_Tracker
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_AmonHeroPool_Tracker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerActiveCount(TriggerGetCurrent()) <= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gv_cT_AmonHeroNumber = 0;
    libCOMU_gv_cT_AmonHeroPool = 1;
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(5.0, 2);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(6.5, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(8.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(9.5, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(11.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(12.5, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(14.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(15.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(16.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(17.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(18.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(19.0, 1);
    libCOMU_gf_CT_AmonHero_GrantPoolAtMissionTime(20.0, 1);
    while (true) {
        Wait(30.0, c_timeGame);
        libCOMU_gv_cT_AmonHeroPool += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_AmonHeroPool_Tracker_Init () {
    libCOMU_gt_CT_AmonHeroPool_Tracker = TriggerCreate("libCOMU_gt_CT_AmonHeroPool_Tracker_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeHardenedWill
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeHardenedWill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoA727CC86_g;
    int autoA727CC86_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation10, true);
    autoA727CC86_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoA727CC86_u = UnitGroupCount(autoA727CC86_g, c_unitCountAll);
    for (;; autoA727CC86_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoA727CC86_g, autoA727CC86_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_ApplyHardenedWill(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeHardenedWill_Init () {
    libCOMU_gt_CT_InitializeHardenedWill = TriggerCreate("libCOMU_gt_CT_InitializeHardenedWill_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeHardenedWill, ("Mutator " + "HardenedWill" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownHardenedWill
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownHardenedWill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoB3330507_g;
    int autoB3330507_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation10, false);
    autoB3330507_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoB3330507_u = UnitGroupCount(autoB3330507_g, c_unitCountAll);
    for (;; autoB3330507_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoB3330507_g, autoB3330507_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorHardenedWillSelfCycle", c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownHardenedWill_Init () {
    libCOMU_gt_CT_ShutdownHardenedWill = TriggerCreate("libCOMU_gt_CT_ShutdownHardenedWill_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownHardenedWill, ("Mutator " + "HardenedWill" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation10
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyHardenedWill(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation10_Init () {
    libCOMU_gt_CT_UnitCreation10 = TriggerCreate("libCOMU_gt_CT_UnitCreation10_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation10, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation10, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeHybridDeathNuke
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeHybridDeathNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath6, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeHybridDeathNuke_Init () {
    libCOMU_gt_CT_InitializeHybridDeathNuke = TriggerCreate("libCOMU_gt_CT_InitializeHybridDeathNuke_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeHybridDeathNuke, ("Mutator " + "HybridDeathNuke" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownHybridDeathNuke
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownHybridDeathNuke_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath6, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownHybridDeathNuke_Init () {
    libCOMU_gt_CT_ShutdownHybridDeathNuke = TriggerCreate("libCOMU_gt_CT_ShutdownHybridDeathNuke_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownHybridDeathNuke, ("Mutator " + "HybridDeathNuke" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 6
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyHybridDeathNuke(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath6_Init () {
    libCOMU_gt_CT_UnitDeath6 = TriggerCreate("libCOMU_gt_CT_UnitDeath6_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath6, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath6, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeIcollectIchange
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeIcollectIchange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeIcollectIchange_Init () {
    libCOMU_gt_MM_InitializeIcollectIchange = TriggerCreate("libCOMU_gt_MM_InitializeIcollectIchange_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeIcollectIchange, ("Mutator " + "ICollectIChange" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownICollectIChange
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownICollectIChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath4, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownICollectIChange_Init () {
    libCOMU_gt_MM_ShutdownICollectIChange = TriggerCreate("libCOMU_gt_MM_ShutdownICollectIChange_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownICollectIChange, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownICollectIChange, ("Mutator " + "ICollectIChange" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 4
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitDeath4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyIcollectIchange(libNtve_gf_KillingUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitDeath4_Init () {
    libCOMU_gt_MM_UnitDeath4 = TriggerCreate("libCOMU_gt_MM_UnitDeath4_Func");
    TriggerEnable(libCOMU_gt_MM_UnitDeath4, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_UnitDeath4, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeInfestationStation
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeInfestationStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_InfestionStationStructureAttack, true);
    CatalogFieldValueSet(c_gameCatalogBehavior, "SIStukovInfestStructureFriendlyTarget", "Modification.VitalRegenArray[" + IntToString(c_unitVitalLife) + "]", libCOMI_gf_MutatorPlayer(), "5");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeInfestationStation_Init () {
    libCOMU_gt_MM_InitializeInfestationStation = TriggerCreate("libCOMU_gt_MM_InitializeInfestationStation_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeInfestationStation, ("Mutator " + "InfestationStation" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownInfestationStation
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownInfestationStation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_InfestionStationStructureAttack, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownInfestationStation_Init () {
    libCOMU_gt_MM_ShutdownInfestationStation = TriggerCreate("libCOMU_gt_MM_ShutdownInfestationStation_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownInfestationStation, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownInfestationStation, ("Mutator " + "InfestationStation" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InfestionStation Structure Attack
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InfestionStationStructureAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "TychusFireBatOilFireDamage"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SIStukovInfestStructureFriendlyTarget") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SIStukovInfestStructureEnemyTarget") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "RecentlyInfested") == false))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() >= 2.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ToxicNest"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ToxicNestBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumor"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorBurrowed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "CreepTumorUsed"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpiderMineBurrowed"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 75.0) && (RandomInt(0, 100) >= 95) && ((UnitGetOwner(EventUnit()) == 1) || (UnitGetOwner(EventUnit()) == 2))) {
        PlayerCreateEffectUnit(libCOMI_gf_MutatorPlayer(), "SIStukovInfestStructureEnemyTarget", EventUnit());
        UnitBehaviorAddPlayer(EventUnit(), "RecentlyInfested", libCOMI_gf_MutatorPlayer(), 1);
        return true;
    }

    if ((RandomInt(0, 100) >= 90) && (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), UnitGetOwner(EventUnit())) == true) && (UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 75.0)) {
        PlayerCreateEffectUnit(libCOMI_gf_MutatorPlayer(), "SIStukovInfestStructureFriendlyTarget", EventUnit());
        UnitBehaviorAddPlayer(EventUnit(), "RecentlyInfested", libCOMI_gf_MutatorPlayer(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InfestionStationStructureAttack_Init () {
    libCOMU_gt_MM_InfestionStationStructureAttack = TriggerCreate("libCOMU_gt_MM_InfestionStationStructureAttack_Func");
    TriggerEnable(libCOMU_gt_MM_InfestionStationStructureAttack, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_MM_InfestionStationStructureAttack, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeInspiration
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeInspiration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoDEA1E9B8_g;
    int autoDEA1E9B8_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation11, true);
    autoDEA1E9B8_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDEA1E9B8_u = UnitGroupCount(autoDEA1E9B8_g, c_unitCountAll);
    for (;; autoDEA1E9B8_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoDEA1E9B8_g, autoDEA1E9B8_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_ApplyInspiration(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeInspiration_Init () {
    libCOMU_gt_CT_InitializeInspiration = TriggerCreate("libCOMU_gt_CT_InitializeInspiration_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeInspiration, ("Mutator " + "Inspiration" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownInspiration
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownInspiration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoBF22A4D8_g;
    int autoBF22A4D8_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation11, false);
    autoBF22A4D8_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoBF22A4D8_u = UnitGroupCount(autoBF22A4D8_g, c_unitCountAll);
    for (;; autoBF22A4D8_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoBF22A4D8_g, autoBF22A4D8_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorInspirationSearch", c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownInspiration_Init () {
    libCOMU_gt_CT_ShutdownInspiration = TriggerCreate("libCOMU_gt_CT_ShutdownInspiration_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownInspiration, ("Mutator " + "Inspiration" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation11
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyInspiration(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation11_Init () {
    libCOMU_gt_CT_UnitCreation11 = TriggerCreate("libCOMU_gt_CT_UnitCreation11_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation11, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation11, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeInsubordination
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeInsubordination_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitOrdered2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeInsubordination_Init () {
    libCOMU_gt_CT_InitializeInsubordination = TriggerCreate("libCOMU_gt_CT_InitializeInsubordination_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeInsubordination, ("Mutator " + "Insubordination" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownInsubordination
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownInsubordination_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitOrdered2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownInsubordination_Init () {
    libCOMU_gt_CT_ShutdownInsubordination = TriggerCreate("libCOMU_gt_CT_ShutdownInsubordination_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownInsubordination, ("Mutator " + "Insubordination" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitOrdered 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitOrdered2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyInsubordination(EventUnit(), EventUnitOrder());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitOrdered2_Init () {
    libCOMU_gt_CT_UnitOrdered2 = TriggerCreate("libCOMU_gt_CT_UnitOrdered2_Func");
    TriggerEnable(libCOMU_gt_CT_UnitOrdered2, false);
    TriggerAddEventUnitOrder(libCOMU_gt_CT_UnitOrdered2, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeJustDie
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeJustDie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup autoB8B6730C_g;
    unitgroup auto743D6D35_g;
    int auto743D6D35_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation3, true);
    autoB8B6730C_g = libCOMI_gf_GetEnemyPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoB8B6730C_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "MutatorJustDie", 1);
    }
    auto743D6D35_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto743D6D35_u = UnitGroupCount(auto743D6D35_g, c_unitCountAll);
    for (;; auto743D6D35_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto743D6D35_g, auto743D6D35_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_ApplyJustDie(lv_indexUnit);
    }
    TriggerEnable(libCOMU_gt_CT_JustDiePolarityInteraction, true);
    if ((libCOMI_gf_CC_CurrentMap() == "AC_TarsonisTrain")) {
        TriggerEnable(libCOMU_gt_CT_JustDieTrainHealth, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeJustDie_Init () {
    libCOMU_gt_CT_InitializeJustDie = TriggerCreate("libCOMU_gt_CT_InitializeJustDie_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeJustDie, ("Mutator " + "JustDie" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownJustDie
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownJustDie_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup auto29F44F4F_g;
    unitgroup autoCD089ADA_g;
    int autoCD089ADA_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation3, false);
    auto29F44F4F_g = libCOMI_gf_GetEnemyPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto29F44F4F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "MutatorJustDie", 0);
    }
    autoCD089ADA_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCD089ADA_u = UnitGroupCount(autoCD089ADA_g, c_unitCountAll);
    for (;; autoCD089ADA_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoCD089ADA_g, autoCD089ADA_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorMasterController", c_unitBehaviorCountAll);
    }
    TriggerEnable(libCOMU_gt_CT_JustDiePolarityInteraction, false);
    TriggerEnable(libCOMU_gt_CT_JustDieTrainHealth, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownJustDie_Init () {
    libCOMU_gt_CT_ShutdownJustDie = TriggerCreate("libCOMU_gt_CT_ShutdownJustDie_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownJustDie, ("Mutator " + "JustDie" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyJustDie(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation3_Init () {
    libCOMU_gt_CT_UnitCreation3 = TriggerCreate("libCOMU_gt_CT_UnitCreation3_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation3, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation3, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_JustDieTrainHealth
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_JustDieTrainHealth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_trainUnit;
    unit lv_indexTrain;
    unitgroup lv_trainCars;
    fixed lv_trainID;

    // Automatic Variable Declarations
    unitgroup auto0C023CCA_g;
    int auto0C023CCA_u;
    unitgroup auto51264FBB_g;
    int auto51264FBB_u;

    // Variable Initialization
    lv_trainUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_trainCars = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_trainUnit) == "Caboose") || (UnitGetType(lv_trainUnit) == "TarsonisEngineFast") || (UnitGetType(lv_trainUnit) == "TarsonisEngine") || (UnitGetType(lv_trainUnit) == "FreightCar")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_trainID = UnitGetCustomValue(lv_trainUnit, 2);
    lv_trainCars = libCOMI_gf_ConjoinedTrainsofTrainCar(lv_trainUnit);
    UnitGroupRemove(lv_trainCars, lv_trainUnit);
    auto0C023CCA_g = lv_trainCars;
    auto0C023CCA_u = UnitGroupCount(auto0C023CCA_g, c_unitCountAll);
    for (;; auto0C023CCA_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto0C023CCA_g, auto0C023CCA_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitGetCustomValue(lv_indexTrain, 2) == lv_trainID) && (UnitHasBehavior2(lv_indexTrain, "MutatorMasterController") == true)) {
            UnitBehaviorRemove(lv_indexTrain, "MutatorMasterController", 1);
            UnitBehaviorAdd(lv_indexTrain, "MutatorJustDie", lv_indexTrain, 1);
        }
        else {
            UnitGroupRemove(lv_trainCars, lv_indexTrain);
        }
    }
    Wait(0.0625, c_timeGame);
    UnitGroupAdd(lv_trainCars, lv_trainUnit);
    auto51264FBB_g = lv_trainCars;
    auto51264FBB_u = UnitGroupCount(auto51264FBB_g, c_unitCountAll);
    for (;; auto51264FBB_u -= 1) {
        lv_indexTrain = UnitGroupUnitFromEnd(auto51264FBB_g, auto51264FBB_u);
        if (lv_indexTrain == null) { break; }
        if ((UnitGetCustomValue(lv_indexTrain, 2) == lv_trainID)) {
            UnitSetPropertyFixed(lv_indexTrain, c_unitPropLifePercent, 100.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_JustDieTrainHealth_Init () {
    libCOMU_gt_CT_JustDieTrainHealth = TriggerCreate("libCOMU_gt_CT_JustDieTrainHealth_Func");
    TriggerEnable(libCOMU_gt_CT_JustDieTrainHealth, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_CT_JustDieTrainHealth, c_playerAny, "MutatorJustDieAB");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_JustDiePolarityInteraction
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_JustDiePolarityInteraction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_Polarity_Swap(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_JustDiePolarityInteraction_Init () {
    libCOMU_gt_CT_JustDiePolarityInteraction = TriggerCreate("libCOMU_gt_CT_JustDiePolarityInteraction_Func");
    TriggerEnable(libCOMU_gt_CT_JustDiePolarityInteraction, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_CT_JustDiePolarityInteraction, null, "MutatorJustDie", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeKillBots
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeKillBots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_KillBotsSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeKillBots_Init () {
    libCOMU_gt_CT_InitializeKillBots = TriggerCreate("libCOMU_gt_CT_InitializeKillBots_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeKillBots, ("Mutator " + "KillBots" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownKillBots
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownKillBots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_KillBotsSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownKillBots_Init () {
    libCOMU_gt_CT_ShutdownKillBots = TriggerCreate("libCOMU_gt_CT_ShutdownKillBots_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownKillBots, ("Mutator " + "KillBots" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_KillBotsSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_KillBotsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;
    int lv_spawnCount;
    int lv_indexSpawn;
    int lv_killBotLevel;
    fixed lv_killBotPingSize;

    // Automatic Variable Declarations
    int autoAB13060B_ae;
    const int autoAB13060B_ai = 1;
    const int auto8969C149_ae = 100;
    const int auto8969C149_ai = 1;
    int autoF16AA54E_val;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(310.0, 290.0, 240.0, 200.0, 200.0, 200.0)))) {
        Wait(10.0, c_timeGame);
    }
    TimerStart(lv_spawnTimer, 5.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((TimerGetRemaining(lv_spawnTimer) > 0.0)) {
            continue;
        }

        if ((GameGetMissionTime() <= 400.0)) {
            lv_spawnCount = 1;
            lv_killBotLevel = 1;
        }
        else if ((GameGetMissionTime() <= 600.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
            lv_killBotLevel = 1;
        }
        else if ((GameGetMissionTime() <= 850.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
            lv_killBotLevel = 2;
        }
        else if ((GameGetMissionTime() <= 1150.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 3, 3, 3);
            lv_killBotLevel = 2;
        }
        else if ((GameGetMissionTime() <= 1300.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
            lv_killBotLevel = 3;
        }
        else if ((GameGetMissionTime() <= 1500.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 3, 3, 3, 3);
            lv_killBotLevel = 3;
        }
        else if (true) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 4, 4);
            lv_killBotLevel = 3;
        }
        autoAB13060B_ae = lv_spawnCount;
        lv_indexSpawn = 1;
        for ( ; ( (autoAB13060B_ai >= 0 && lv_indexSpawn <= autoAB13060B_ae) || (autoAB13060B_ai < 0 && lv_indexSpawn >= autoAB13060B_ae) ) ; lv_indexSpawn += autoAB13060B_ai ) {
            lv_spawnAttempt = 1;
            for ( ; ( (auto8969C149_ai >= 0 && lv_spawnAttempt <= auto8969C149_ae) || (auto8969C149_ai < 0 && lv_spawnAttempt >= auto8969C149_ae) ) ; lv_spawnAttempt += auto8969C149_ai ) {
                lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_spawningStructure)) && (libCOMI_gf_CT_NearbyCliffs(UnitGetPosition(lv_spawningStructure), 5.0) == false)) {
                    break;
                }
                else {
                    lv_spawningStructure = null;
                }
            }
            if ((lv_spawningStructure == null)) {
                continue;
            }

            autoF16AA54E_val = lv_killBotLevel;
            if (autoF16AA54E_val == 1) {
                UnitCreate(1, "MutatorMurderBot", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
                lv_killBotPingSize = 0.4;
            }
            else if (autoF16AA54E_val == 2) {
                UnitCreate(1, "MutatorDeathBot", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
                lv_killBotPingSize = 0.45;
            }
            else if (autoF16AA54E_val == 3) {
                UnitCreate(1, "MutatorKillBot", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
                lv_killBotPingSize = 0.5;
            }
            else {
            }
            libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            libNtve_gf_AICast(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))));
            UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupAll);
            libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_AffectedPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingTriangle", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
            PingSetScale(PingLastCreated(), lv_killBotPingSize);
            PingSetUnit(PingLastCreated(), UnitLastCreated());
            PingSetTooltip(PingLastCreated(), UnitGetName(UnitLastCreated()));
            libARRA_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
            libCOMU_gf_CT_KillBotsUpdate(UnitLastCreated(), lv_killBotLevel);
        }
        SoundPlayForPlayer(SoundLink("UI_KillBotsWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((GameGetMissionTime() <= 500.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(140.0, 120.0, 100.0, 80.0, 80.0, 80.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 800.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 110.0, 85.0, 65.0, 65.0, 65.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 1200.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 100.0, 80.0, 60.0, 60.0, 60.0), false, c_timeAI);
        }
        else if (true) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 100.0, 70.0, 55.0, 55.0, 55.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_KillBotsSpawn_Init () {
    libCOMU_gt_CT_KillBotsSpawn = TriggerCreate("libCOMU_gt_CT_KillBotsSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_KillBotsSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeKillKarma
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeKillKarma_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath11, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeKillKarma_Init () {
    libCOMU_gt_CT_InitializeKillKarma = TriggerCreate("libCOMU_gt_CT_InitializeKillKarma_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeKillKarma, ("Mutator " + "KillKarma" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownKillKarma
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownKillKarma_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath11, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownKillKarma_Init () {
    libCOMU_gt_CT_ShutdownKillKarma = TriggerCreate("libCOMU_gt_CT_ShutdownKillKarma_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownKillKarma, ("Mutator " + "KillKarma" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 11
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath11_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyKillKarma(libNtve_gf_KillingUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath11_Init () {
    libCOMU_gt_CT_UnitDeath11 = TriggerCreate("libCOMU_gt_CT_UnitDeath11_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath11, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath11, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLavaBurst
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeLavaBurst_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_LavaBurstSpawn, true);
    TriggerExecute(libCOMU_gt_CT_LavaBurstSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeLavaBurst_Init () {
    libCOMU_gt_CT_InitializeLavaBurst = TriggerCreate("libCOMU_gt_CT_InitializeLavaBurst_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeLavaBurst, ("Mutator " + "LavaBurst" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLavaBurst
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownLavaBurst_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_LavaBurstSpawn, false);
    TriggerStop(libCOMU_gt_CT_LavaBurstSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownLavaBurst_Init () {
    libCOMU_gt_CT_ShutdownLavaBurst = TriggerCreate("libCOMU_gt_CT_ShutdownLavaBurst_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownLavaBurst, ("Mutator " + "LavaBurst" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_LavaBurstSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_LavaBurstSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int autoEB25DD61_ae = 100;
    const int autoEB25DD61_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(4.0, 2.0, 0.5, 0.5, 0.1, 0.1);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (autoEB25DD61_ai >= 0 && lv_safetyInt <= autoEB25DD61_ae) || (autoEB25DD61_ai < 0 && lv_safetyInt >= autoEB25DD61_ae) ) ; lv_safetyInt += autoEB25DD61_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (libCOMI_gf_CC_SpawnAllowedAtPoint(lv_spawnLocation) == false) || (RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || (UnitCountAlliance(libCOMI_gf_MutatorPlayer(), c_unitAllianceEnemy, RegionCircle(lv_spawnLocation, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) || (UnitCountAlliance(libCOMI_gf_MutatorPlayer(), c_unitAllianceEnemy, RegionCircle(lv_spawnLocation, 35.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "LavaBurstInitialCP", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_LavaBurstSpawn_Init () {
    libCOMU_gt_CT_LavaBurstSpawn = TriggerCreate("libCOMU_gt_CT_LavaBurstSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_LavaBurstSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLifeLeech
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeLifeLeech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage5, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeLifeLeech_Init () {
    libCOMU_gt_CT_InitializeLifeLeech = TriggerCreate("libCOMU_gt_CT_InitializeLifeLeech_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeLifeLeech, ("Mutator " + "LifeLeech" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLifeLeech
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownLifeLeech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage5, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownLifeLeech_Init () {
    libCOMU_gt_CT_ShutdownLifeLeech = TriggerCreate("libCOMU_gt_CT_ShutdownLifeLeech_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownLifeLeech, ("Mutator " + "LifeLeech" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 5
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyLifeLeech(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage5_Init () {
    libCOMU_gt_CT_UnitDamage5 = TriggerCreate("libCOMU_gt_CT_UnitDamage5_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage5, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage5, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLongRange
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeLongRange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    string lv_stringUnitID;
    string lv_stringWeapon;
    fixed lv_sightRange;
    fixed lv_weaponRange;
    int lv_i;
    int lv_k;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto6F75DC6E_g;
    int auto91819D2F_ae;
    const int auto91819D2F_ai = 1;
    playergroup auto3C3B33DC_g;
    int auto28256806_ae;
    const int auto28256806_ai = 1;
    playergroup autoA28EB174_g;

    // Variable Initialization
    lv_stringUnitID = "";
    lv_stringWeapon = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F75DC6E_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6F75DC6E_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "MutatorLongRange", 1);
    }
    auto91819D2F_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_i = 1;
    for ( ; ( (auto91819D2F_ai >= 0 && lv_i <= auto91819D2F_ae) || (auto91819D2F_ai < 0 && lv_i >= auto91819D2F_ae) ) ; lv_i += auto91819D2F_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_i));
        lv_sightRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "Sight", 0)) + 3.0);
        if ((lv_sightRange > 32.0)) {
            lv_sightRange = 32.0;
        }

        auto3C3B33DC_g = libCOMI_gf_GetEnemyPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto3C3B33DC_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lv_indexPlayer, FixedToString(lv_sightRange, 2));
        }
        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) > 0)) {
            auto28256806_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) - 1);
            lv_k = 0;
            for ( ; ( (auto28256806_ai >= 0 && lv_k <= auto28256806_ae) || (auto28256806_ai < 0 && lv_k >= auto28256806_ae) ) ; lv_k += auto28256806_ai ) {
                lv_stringWeapon = CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray[" + IntToString(lv_k) + "].Link", 0);
                if ((lv_stringWeapon != "")) {
                    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lv_stringWeapon) == true)) {
                        if ((StringToInt(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Options[" + IntToString(2) + "]", 0)) == 0)) {
                            lv_weaponRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Range", 0)) + 3.0);
                            if ((lv_weaponRange > 499.0)) {
                                lv_weaponRange = 499.0;
                            }

                            autoA28EB174_g = libCOMI_gf_GetEnemyPlayers();
                            lv_indexPlayer = -1;
                            while (true) {
                                lv_indexPlayer = PlayerGroupNextPlayer(autoA28EB174_g, lv_indexPlayer);
                                if (lv_indexPlayer < 0) { break; }
                                CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "Range", lv_indexPlayer, FixedToString(lv_weaponRange, 2));
                                CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "MinScanRange", lv_indexPlayer, FixedToString((lv_weaponRange + 0.5), 2));
                            }
                        }

                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeLongRange_Init () {
    libCOMU_gt_CT_InitializeLongRange = TriggerCreate("libCOMU_gt_CT_InitializeLongRange_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeLongRange, ("Mutator " + "LongRange" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLongRange
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownLongRange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownLongRange_Init () {
    libCOMU_gt_CT_ShutdownLongRange = TriggerCreate("libCOMU_gt_CT_ShutdownLongRange_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownLongRange, ("Mutator " + "LongRange" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_LongRangeFix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_LongRangeFix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    string lv_stringUnitID;
    string lv_stringWeapon;
    fixed lv_sightRange;
    fixed lv_weaponRange;
    int lv_i;
    int lv_k;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    int auto0F2AAE1D_ae;
    const int auto0F2AAE1D_ai = 1;
    int auto8EF7CAAC_ae;
    const int auto8EF7CAAC_ai = 1;

    // Variable Initialization
    lv_stringUnitID = "";
    lv_stringWeapon = "";

    // Conditions
    if (testConds) {
        if (!(((EventUpgradeName() == null) || (PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true)))) {
            return false;
        }

        if (!((libCOMI_gf_MutatorIsEnabled("LongRange") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto0F2AAE1D_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_i = 1;
    for ( ; ( (auto0F2AAE1D_ai >= 0 && lv_i <= auto0F2AAE1D_ae) || (auto0F2AAE1D_ai < 0 && lv_i >= auto0F2AAE1D_ae) ) ; lv_i += auto0F2AAE1D_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_i));
        lv_sightRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "Sight", 0)) + 3.0);
        if ((lv_sightRange > 32.0)) {
            lv_sightRange = 32.0;
        }

        CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", libCOMI_gv_mM_PX_PlayerX, FixedToString(lv_sightRange, 2));
        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) > 0)) {
            auto8EF7CAAC_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray", 0) - 1);
            lv_k = 0;
            for ( ; ( (auto8EF7CAAC_ai >= 0 && lv_k <= auto8EF7CAAC_ae) || (auto8EF7CAAC_ai < 0 && lv_k >= auto8EF7CAAC_ae) ) ; lv_k += auto8EF7CAAC_ai ) {
                lv_stringWeapon = CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "WeaponArray[" + IntToString(lv_k) + "].Link", 0);
                if ((lv_stringWeapon != "")) {
                    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lv_stringWeapon) == true)) {
                        if ((StringToInt(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Options[" + IntToString(2) + "]", 0)) == 0)) {
                            lv_weaponRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_stringWeapon, "Range", 0)) + 3.0);
                            if ((lv_weaponRange > 499.0)) {
                                lv_weaponRange = 499.0;
                            }

                            CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "Range", libCOMI_gv_mM_PX_PlayerX, FixedToString(lv_weaponRange, 2));
                            CatalogFieldValueSet(c_gameCatalogWeapon, lv_stringWeapon, "MinScanRange", libCOMI_gv_mM_PX_PlayerX, FixedToString((lv_weaponRange + 0.5), 2));
                        }

                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_LongRangeFix_Init () {
    libCOMU_gt_MM_LongRangeFix = TriggerCreate("libCOMU_gt_MM_LongRangeFix_Func");
    TriggerEnable(libCOMU_gt_MM_LongRangeFix, false);
    TriggerAddEventUpgradeLevelChanged(libCOMU_gt_MM_LongRangeFix, c_playerAny);
    TriggerAddEventUnitDied(libCOMU_gt_MM_LongRangeFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeLaserDrill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mutatorPlayer;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto41AF3F6B_g;
    int auto41AF3F6B_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorLaserDrill", 0, lv_mutatorPlayer, libARRA_gf_GetPlayerStartPosition(lv_mutatorPlayer));
    libCOMU_gv_cT_LaserDrill = UnitLastCreated();
    auto41AF3F6B_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(libCOMU_gv_cT_LaserDrill), UnitGetPropertyFixed(libCOMU_gv_cT_LaserDrill, c_unitPropRadius, c_unitPropCurrent)), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto41AF3F6B_u = UnitGroupCount(auto41AF3F6B_g, c_unitCountAll);
    for (;; auto41AF3F6B_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto41AF3F6B_g, auto41AF3F6B_u);
        if (lv_indexUnit == null) { break; }
        UnitSetPosition(lv_indexUnit, libCOMI_gf_CM_NearbyGroundPathablePoint(UnitGetPosition(libCOMU_gv_cT_LaserDrill), UnitGetPropertyFixed(libCOMU_gv_cT_LaserDrill, c_unitPropRadius, c_unitPropCurrent), (UnitGetPropertyFixed(libCOMU_gv_cT_LaserDrill, c_unitPropRadius, c_unitPropCurrent) + 2.0)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeLaserDrill_Init () {
    libCOMU_gt_CT_InitializeLaserDrill = TriggerCreate("libCOMU_gt_CT_InitializeLaserDrill_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeLaserDrill, ("Mutator " + "LaserDrill" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownLaserDrill
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownLaserDrill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(libCOMU_gv_cT_LaserDrill);
    libCOMU_gv_cT_LaserDrill = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownLaserDrill_Init () {
    libCOMU_gt_CT_ShutdownLaserDrill = TriggerCreate("libCOMU_gt_CT_ShutdownLaserDrill_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownLaserDrill, ("Mutator " + "LaserDrill" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Laser Drill Beam Sound Region Clear
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MutatorLaserDrillBeamSoundRegionClear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMU_gv_mutatorLaserDrillSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMU_gv_mutatorLaserDrillSoundRegionActor), "Signal StopSound");
        libCOMU_gv_mutatorLaserDrillSoundRegion = RegionEmpty();
        libCOMU_gv_mutatorLaserDrillSoundRegionCreated = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MutatorLaserDrillBeamSoundRegionClear_Init () {
    libCOMU_gt_MutatorLaserDrillBeamSoundRegionClear = TriggerCreate("libCOMU_gt_MutatorLaserDrillBeamSoundRegionClear_Func");
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_MutatorLaserDrillBeamSoundRegionClear, c_playerAny, "MutatorLaserDrillSoundFinalEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Laser Drill Beam Sound Firing
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MutatorLaserDrillBeamSoundFiring_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_a;
    point lv_b;
    fixed lv_d;
    int lv_di;
    fixed lv_facing;
    int lv_i;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int auto81A71E4C_ae;
    const int auto81A71E4C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMU_gv_mutatorLaserDrillSoundRegionCreated == true)) {
        ActorScopeSend(ActorScopeFromActor(libCOMU_gv_mutatorLaserDrillSoundRegionActor), "Signal StopSound");
        libCOMU_gv_mutatorLaserDrillSoundRegion = RegionEmpty();
        libCOMU_gv_mutatorLaserDrillSoundRegionCreated = false;
    }

    lv_a = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_b = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_facing = AngleBetweenPoints(lv_a, lv_b);
    lv_d = DistanceBetweenPoints(lv_a, lv_b);
    lv_di = FixedToInt((lv_d / 5.0));
    lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * 5.0));
    lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * 5.0));
    libCOMU_gv_mutatorLaserDrillSoundRegion = RegionCircle(Point(lv_x, lv_y), 1.0);
    auto81A71E4C_ae = lv_di;
    lv_i = 1;
    for ( ; ( (auto81A71E4C_ai >= 0 && lv_i <= auto81A71E4C_ae) || (auto81A71E4C_ai < 0 && lv_i >= auto81A71E4C_ae) ) ; lv_i += auto81A71E4C_ai ) {
        lv_x = (PointGetX(lv_a) + (Cos(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        lv_y = (PointGetY(lv_a) + (Sin(lv_facing) * (IntToFixed(lv_i) * 5.0)));
        RegionAddCircle(libCOMU_gv_mutatorLaserDrillSoundRegion, true, Point(lv_x, lv_y), 3.0);
    }
    ActorRegionCreate(null, "MutatorLaserDrillBeamRegion", libCOMU_gv_mutatorLaserDrillSoundRegion);
    libCOMU_gv_mutatorLaserDrillSoundRegionActor = libNtve_gf_ActorLastCreated();
    libCOMU_gv_mutatorLaserDrillSoundRegionCreated = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MutatorLaserDrillBeamSoundFiring_Init () {
    libCOMU_gt_MutatorLaserDrillBeamSoundFiring = TriggerCreate("libCOMU_gt_MutatorLaserDrillBeamSoundFiring_Func");
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_MutatorLaserDrillBeamSoundFiring, c_playerAny, "MutatorLaserDrillSoundCP");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeLevelPlayingField
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeLevelPlayingField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto7ACF6A2D_g;
    int auto7ACF6A2D_u;
    unit auto7ACF6A2D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation1, true);
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix, true);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent1, true);
    Wait(0.5, c_timeReal);
    auto7ACF6A2D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7ACF6A2D_u = UnitGroupCount(auto7ACF6A2D_g, c_unitCountAll);
    for (;; auto7ACF6A2D_u -= 1) {
        auto7ACF6A2D_var = UnitGroupUnitFromEnd(auto7ACF6A2D_g, auto7ACF6A2D_u);
        if (auto7ACF6A2D_var == null) { break; }
        libCOMU_gf_MM_ApplyLevelPlayingField(auto7ACF6A2D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeLevelPlayingField_Init () {
    libCOMU_gt_MM_InitializeLevelPlayingField = TriggerCreate("libCOMU_gt_MM_InitializeLevelPlayingField_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeLevelPlayingField, ("Mutator " + "LevelPlayingField" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownLevelPlayingField
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownLevelPlayingField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto75AAC605_g;
    int auto75AAC605_u;
    unit auto75AAC605_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation1, false);
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix, false);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent1, false);
    auto75AAC605_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto75AAC605_u = UnitGroupCount(auto75AAC605_g, c_unitCountAll);
    for (;; auto75AAC605_u -= 1) {
        auto75AAC605_var = UnitGroupUnitFromEnd(auto75AAC605_g, auto75AAC605_u);
        if (auto75AAC605_var == null) { break; }
        UnitBehaviorRemovePlayer(auto75AAC605_var, "LevelPlayingField", libCOMI_gf_MutatorPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownLevelPlayingField_Init () {
    libCOMU_gt_MM_ShutdownLevelPlayingField = TriggerCreate("libCOMU_gt_MM_ShutdownLevelPlayingField_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownLevelPlayingField, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownLevelPlayingField, ("Mutator " + "LevelPlayingField" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRevived Fix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitRevivedFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyLevelPlayingField(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitRevivedFix_Init () {
    libCOMU_gt_MM_UnitRevivedFix = TriggerCreate("libCOMU_gt_MM_UnitRevivedFix_Func");
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix, false);
    TriggerAddEventUnitRevive(libCOMU_gt_MM_UnitRevivedFix, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Unit Creation Event 1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MutatorUnitCreationEvent1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyLevelPlayingField(libCOMI_gv_mutatorHero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MutatorUnitCreationEvent1_Init () {
    libCOMU_gt_MutatorUnitCreationEvent1 = TriggerCreate("libCOMU_gt_MutatorUnitCreationEvent1_Func");
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent1, false);
    TriggerAddEventGeneric(libCOMU_gt_MutatorUnitCreationEvent1, "Mutator Unit Creation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitCreation 1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitCreation1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyLevelPlayingField(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitCreation1_Init () {
    libCOMU_gt_MM_UnitCreation1 = TriggerCreate("libCOMU_gt_MM_UnitCreation1_Func");
    TriggerEnable(libCOMU_gt_MM_UnitCreation1, false);
    TriggerAddEventUnitCreated(libCOMU_gt_MM_UnitCreation1, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMagMines
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeMagMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "MutatorCloakedMine";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(50, 100, 150, 200, 100, 100);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if (libCOMI_gf_ConnectedByGroundPath(lv_spawnPoint) && (PathingType(lv_spawnPoint) == c_pathingGround) && (VisIsVisibleForPlayer(libCOMI_gf_AffectedPlayer(0), lv_spawnPoint) == false) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 5.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnPoint, 30, libCOMI_gf_AffectedPlayers()) == true) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            UnitCreate(1, lv_monsterType, 0, libCOMI_gf_MutatorPlayer(), lv_spawnPoint, libNtve_gf_RandomAngle());
            libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
            lv_spawnCount += 1;
        }
        else {
            lv_spawnAttempt += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeMagMines_Init () {
    libCOMU_gt_CT_InitializeMagMines = TriggerCreate("libCOMU_gt_CT_InitializeMagMines_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeMagMines, ("Mutator " + "MagMines" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMagMines
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownMagMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownMagMines_Init () {
    libCOMU_gt_CT_ShutdownMagMines = TriggerCreate("libCOMU_gt_CT_ShutdownMagMines_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownMagMines, ("Mutator " + "MagMines" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_MagMineSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_MagMineSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "MutatorCloakedMine";
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 5, 5, 100, 100);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if (libCOMI_gf_ConnectedByGroundPath(lv_spawnPoint) && (PathingType(lv_spawnPoint) == c_pathingGround) && (VisIsVisibleForPlayer(libCOMI_gf_AffectedPlayer(0), lv_spawnPoint) == false) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 5.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnPoint, 30, libCOMI_gf_AffectedPlayers()) == true) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            UnitCreate(1, lv_monsterType, 0, libCOMI_gf_MutatorPlayer(), lv_spawnPoint, libNtve_gf_RandomAngle());
            libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
            lv_spawnCount += 1;
        }
        else {
            lv_spawnAttempt += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_MagMineSpawn_Init () {
    libCOMU_gt_CT_MagMineSpawn = TriggerCreate("libCOMU_gt_CT_MagMineSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_MagMineSpawn, false);
    TriggerAddEventTimePeriodic(libCOMU_gt_CT_MagMineSpawn, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeMatryoshka
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeMatryoshka_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeMatryoshka_Init () {
    libCOMU_gt_MM_InitializeMatryoshka = TriggerCreate("libCOMU_gt_MM_InitializeMatryoshka_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeMatryoshka, ("Mutator " + "Matryoshka" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownMatryoshka
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownMatryoshka_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownMatryoshka_Init () {
    libCOMU_gt_MM_ShutdownMatryoshka = TriggerCreate("libCOMU_gt_MM_ShutdownMatryoshka_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownMatryoshka, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownMatryoshka, ("Mutator " + "Matryoshka" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitDeath2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyMatryoshka(EventUnit(), libNtve_gf_KillingPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitDeath2_Init () {
    libCOMU_gt_MM_UnitDeath2 = TriggerCreate("libCOMU_gt_MM_UnitDeath2_Func");
    TriggerEnable(libCOMU_gt_MM_UnitDeath2, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_UnitDeath2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMinedOut
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeMinedOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexResource;
    unitgroup lv_resourceNodes;
    int lv_resourceAmount;

    // Automatic Variable Declarations
    unitgroup autoA8663164_g;
    int autoA8663164_u;
    playergroup auto867E5724_g;
    int auto867E5724_var;

    // Variable Initialization
    lv_resourceNodes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_resourceNodes = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_resourceNodes, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoA8663164_g = lv_resourceNodes;
    autoA8663164_u = UnitGroupCount(autoA8663164_g, c_unitCountAll);
    for (;; autoA8663164_u -= 1) {
        lv_indexResource = UnitGroupUnitFromEnd(autoA8663164_g, autoA8663164_u);
        if (lv_indexResource == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
            lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
            if ((UnitHasBehavior2(lv_indexResource, "MineralFieldMinerals") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("MineralFieldMinerals"));
                UnitBehaviorRemove(lv_indexResource, "MineralFieldMinerals", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "MineralFieldMinerals750") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("MineralFieldMinerals750"));
                UnitBehaviorRemove(lv_indexResource, "MineralFieldMinerals750", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "HighYieldMineralFieldMinerals") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("HighYieldMineralFieldMinerals"));
                UnitBehaviorRemove(lv_indexResource, "HighYieldMineralFieldMinerals", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "HighYieldMineralFieldMinerals750") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("HighYieldMineralFieldMinerals750"));
                UnitBehaviorRemove(lv_indexResource, "HighYieldMineralFieldMinerals750", 1);
            }
            else if ((UnitHasBehavior2(lv_indexResource, "MineralFieldMineralsNoRemove") == true)) {
                DataTableSetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))), ("MineralFieldMineralsNoRemove"));
                UnitBehaviorRemove(lv_indexResource, "MineralFieldMineralsNoRemove", 1);
            }
            UnitBehaviorAddPlayer(lv_indexResource, "MutatorMineralsLowYield", 0, 1);
            UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
            libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorLowYield");
        }
        else if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Vespene") && (UnitFilterMatch(lv_indexResource, 1, UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0)) == true)) {
            if ((UnitHasBehavior2(lv_indexResource, "RawVespeneGeyserGas") == true)) {
                lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
                UnitBehaviorRemove(lv_indexResource, "RawVespeneGeyserGas", 1);
                UnitBehaviorAddPlayer(lv_indexResource, "MutatorVespeneRawLowYield", 0, 1);
                UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
                libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorLowYield");
            }

        }
    }
    TriggerExecute(libCOMU_gt_CT_ResourceSpawns, true, false);
    auto867E5724_g = libCOMI_gf_AffectedPlayers();
    auto867E5724_var = -1;
    while (true) {
        auto867E5724_var = PlayerGroupNextPlayer(auto867E5724_g, auto867E5724_var);
        if (auto867E5724_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogAbil, "MULEGather", "ResourceAmountMultiplier[" + IntToString(0) + "]", auto867E5724_var, "0.033333333333333333");
        CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene4", "Resources", auto867E5724_var, "-1");
        CatalogFieldValueSet(c_gameCatalogActor, "AutomatedAssimilatorTextKicker4", "Text", auto867E5724_var, "Button/Tooltip/AutomatedAssimilatorTextKicker1");
        CatalogFieldValueSet(c_gameCatalogEffect, "VespeneDroneGrantResourcesTrigger", "Resources[" + IntToString(1) + "]", auto867E5724_var, "1");
        CatalogFieldValueSet(c_gameCatalogActor, "VespeneDronePickupText", "Text", auto867E5724_var, "Button/Tooltip/VespeneDronePickupTextMinedOut");
        CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene", "Resources", auto867E5724_var, "-1");
        CatalogFieldValueSet(c_gameCatalogActor, "AutomatedRefineryTextKicker4", "Text", auto867E5724_var, "Button/Tooltip/AutomatedRefineryTextKicker1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeMinedOut_Init () {
    libCOMU_gt_CT_InitializeMinedOut = TriggerCreate("libCOMU_gt_CT_InitializeMinedOut_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeMinedOut, ("Mutator " + "MinedOut" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMinedOut
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownMinedOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexResource;
    unitgroup lv_resourceNodes;
    int lv_resourceAmount;

    // Automatic Variable Declarations
    unitgroup autoE9C3C8F5_g;
    int autoE9C3C8F5_u;
    playergroup autoEC558B3C_g;
    int autoEC558B3C_var;

    // Variable Initialization
    lv_resourceNodes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_ResourceSpawns);
    lv_resourceNodes = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    UnitGroupAddUnitGroup(lv_resourceNodes, UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    autoE9C3C8F5_g = lv_resourceNodes;
    autoE9C3C8F5_u = UnitGroupCount(autoE9C3C8F5_g, c_unitCountAll);
    for (;; autoE9C3C8F5_u -= 1) {
        lv_indexResource = UnitGroupUnitFromEnd(autoE9C3C8F5_g, autoE9C3C8F5_u);
        if (lv_indexResource == null) { break; }
        if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Minerals")) {
            lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
            UnitBehaviorRemove(lv_indexResource, "MutatorMineralsLowYield", 1);
            UnitBehaviorAddPlayer(lv_indexResource, (DataTableGetString(true, ("CT_ResType_" + IntToString(UnitGetTag(lv_indexResource))))), 0, 1);
            libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorNormalYield");
            UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
        }
        else if ((CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_indexResource), "ResourceType", c_playerAny) == "Vespene") && (UnitFilterMatch(lv_indexResource, 1, UnitFilter((1 << c_targetFilterRawResource), 0, 0, 0)) == true)) {
            if ((UnitHasBehavior2(lv_indexResource, "MutatorVespeneRawLowYield") == true)) {
                lv_resourceAmount = libNtve_gf_UnitGetPropertyResources(lv_indexResource, c_unitPropCurrent);
                UnitBehaviorAddPlayer(lv_indexResource, "RawVespeneGeyserGas", 0, 1);
                UnitBehaviorRemove(lv_indexResource, "MutatorVespeneRawLowYield", 1);
                UnitSetPropertyFixed(lv_indexResource, c_unitPropResources, lv_resourceAmount);
                libNtve_gf_SendActorMessageToUnit(lv_indexResource, "Signal MutatorNormalYield");
            }

        }
    }
    autoEC558B3C_g = libCOMI_gf_AffectedPlayers();
    autoEC558B3C_var = -1;
    while (true) {
        autoEC558B3C_var = PlayerGroupNextPlayer(autoEC558B3C_g, autoEC558B3C_var);
        if (autoEC558B3C_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogAbil, "MULEGather", "ResourceAmountMultiplier[" + IntToString(0) + "]", autoEC558B3C_var, "1.0");
        CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene4", "Resources", autoEC558B3C_var, "-4");
        CatalogFieldValueSet(c_gameCatalogActor, "AutomatedAssimilatorTextKicker4", "Text", autoEC558B3C_var, "<s val=\"Kicker_Refinery\">+4</s><IMG path=\"Assets\\Textures\\icon-gas-protoss.dds\" height=\"28\" width=\"28\"/>");
        CatalogFieldValueSet(c_gameCatalogEffect, "VespeneDroneGrantResourcesTrigger", "Resources[" + IntToString(1) + "]", autoEC558B3C_var, "2");
        CatalogFieldValueSet(c_gameCatalogActor, "VespeneDronePickupText", "Text", autoEC558B3C_var, "Player 1 <s val=\"Kicker_Gas\">+2 </s><IMG path=\"Assets\\Textures\\icon-gas-terran.dds\" height=\"28\" width=\"28\"/><n/>Player 2 <s val=\"Kicker_Gas\">+1 </s><IMG path=\"Assets\\Textures\\icon-gas-terran.dds\" height=\"28\" width=\"28\"/>");
        CatalogFieldValueSet(c_gameCatalogEffect, "AutoHarvestVespene", "Resources", autoEC558B3C_var, "-4");
        CatalogFieldValueSet(c_gameCatalogActor, "AutomatedRefineryTextKicker4", "Text", autoEC558B3C_var, "Button/Tooltip/AutomatedRefineryTextKicker4");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownMinedOut_Init () {
    libCOMU_gt_CT_ShutdownMinedOut = TriggerCreate("libCOMU_gt_CT_ShutdownMinedOut_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownMinedOut, ("Mutator " + "MinedOut" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ResourceSpawns
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ResourceSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyCount;
    bool lv_spawnIsOdd;
    int lv_mineralCount;
    int lv_vespeneCount;

    // Automatic Variable Declarations
    const int autoE1C3F1C8_ae = 100;
    const int autoE1C3F1C8_ai = 1;
    const int autoAB1B7588_ae = 100;
    const int autoAB1B7588_ai = 1;
    const int autoFD8527DF_ae = 100;
    const int autoFD8527DF_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while (true) {
        if (((GameGetMissionTime() > 180.0) || (lv_spawnIsOdd == true))) {
            lv_spawnRegion = RegionEntireMap();
        }
        else {
            lv_spawnRegion = RegionCircle(libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)), 30.0);
            RegionAddRegion(lv_spawnRegion, RegionCircle(libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)), 30.0));
        }
        lv_safetyCount = 1;
        for ( ; ( (autoE1C3F1C8_ai >= 0 && lv_safetyCount <= autoE1C3F1C8_ae) || (autoE1C3F1C8_ai < 0 && lv_safetyCount >= autoE1C3F1C8_ae) ) ; lv_safetyCount += autoE1C3F1C8_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if ((libCOMI_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                continue;
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorMineralCrystal", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
            lv_mineralCount += 50;
            break;
        }
        if ((lv_spawnIsOdd == true)) {
            lv_safetyCount = 1;
            for ( ; ( (autoAB1B7588_ai >= 0 && lv_safetyCount <= autoAB1B7588_ae) || (autoAB1B7588_ai < 0 && lv_safetyCount >= autoAB1B7588_ae) ) ; lv_safetyCount += autoAB1B7588_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCOMI_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorMineralCrystal", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
                lv_mineralCount += 50;
                break;
            }
            lv_safetyCount = 1;
            for ( ; ( (autoFD8527DF_ai >= 0 && lv_safetyCount <= autoFD8527DF_ae) || (autoFD8527DF_ai < 0 && lv_safetyCount >= autoFD8527DF_ae) ) ; lv_safetyCount += autoFD8527DF_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCOMI_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorNaturalGas50", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
                lv_vespeneCount += 50;
                break;
            }
        }

        lv_spawnIsOdd = !(lv_spawnIsOdd);
        if ((GameGetMissionTime() > 180.0)) {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(4.2, 5.0, 5.2, 5.4, 100.0, 100.0), c_timeGame);
        }
        else {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(5.0, 5.0, 6.0, 7.0, 100.0, 100.0), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ResourceSpawns_Init () {
    libCOMU_gt_CT_ResourceSpawns = TriggerCreate("libCOMU_gt_CT_ResourceSpawns_Func");
    TriggerEnable(libCOMU_gt_CT_ResourceSpawns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMineFields
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeMineFields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;
    string lv_monsterType2;
    int lv_widowMineSpawn;
    int lv_spiderMineSpawn;
    point lv_mineSpawnPoint;
    unit lv_mineInBase;

    // Automatic Variable Declarations
    playergroup autoF11B1AD0_g;
    int autoF11B1AD0_var;
    unitgroup autoC58FC08D_g;
    int autoC58FC08D_u;
    unit autoC58FC08D_var;

    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "WidowMineBurrowed";
    lv_monsterType2 = "MutatorSpiderMine";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(10, 15, 20, 25, 100, 100);
    libNtve_gf_SetUpgradeLevelForPlayer(libCOMI_gf_MutatorPlayer(), "WidowMakerStrongerMines", 1);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if (libCOMI_gf_ConnectedByGroundPath(lv_spawnPoint) && (PathingType(lv_spawnPoint) == c_pathingGround) && (VisIsVisibleForPlayer(libCOMI_gf_AffectedPlayer(0), lv_spawnPoint) == false) && (libCOMI_gf_CC_SpawnAllowedAtPoint(lv_spawnPoint) == true) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnPoint, 30, libCOMI_gf_AffectedPlayers()) == true) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("WidowMineBurrowed", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("SpiderMineBurrowed", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            lv_widowMineSpawn = 0;
            lv_spiderMineSpawn = 0;
            while ((lv_widowMineSpawn < 5)) {
                lv_mineSpawnPoint = RegionRandomPoint(RegionCircle(lv_spawnPoint, 5.0));
                if ((libCOMI_gf_CC_SpawnAllowedAtPoint(lv_mineSpawnPoint) == true) && (PathingType(lv_mineSpawnPoint) == c_pathingGround)) {
                    lv_widowMineSpawn = (lv_widowMineSpawn + 1);
                    UnitCreate(1, lv_monsterType, 0, libCOMI_gf_MutatorPlayer(), lv_mineSpawnPoint, libNtve_gf_RandomAngle());
                    libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
                }

            }
            while ((lv_spiderMineSpawn < 7)) {
                lv_mineSpawnPoint = RegionRandomPoint(RegionCircle(lv_spawnPoint, 5.0));
                if ((libCOMI_gf_CC_SpawnAllowedAtPoint(lv_mineSpawnPoint) == true) && (PathingType(lv_mineSpawnPoint) == c_pathingGround)) {
                    lv_spiderMineSpawn = (lv_spiderMineSpawn + 1);
                    UnitCreate(1, lv_monsterType2, 0, libCOMI_gf_MutatorPlayer(), lv_mineSpawnPoint, libNtve_gf_RandomAngle());
                    libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
                }

            }
            lv_spawnCount += 1;
        }
        else {
            lv_spawnAttempt += 1;
        }
    }
    autoF11B1AD0_g = libCOMI_gf_AffectedPlayers();
    autoF11B1AD0_var = -1;
    while (true) {
        autoF11B1AD0_var = PlayerGroupNextPlayer(autoF11B1AD0_g, autoF11B1AD0_var);
        if (autoF11B1AD0_var < 0) { break; }
        autoC58FC08D_g = UnitGroup(null, libCOMI_gf_MutatorPlayer(), RegionCircle(libARRA_gf_GetPlayerStartPosition(autoF11B1AD0_var), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC58FC08D_u = UnitGroupCount(autoC58FC08D_g, c_unitCountAll);
        for (;; autoC58FC08D_u -= 1) {
            autoC58FC08D_var = UnitGroupUnitFromEnd(autoC58FC08D_g, autoC58FC08D_u);
            if (autoC58FC08D_var == null) { break; }
            if (((UnitGetType(autoC58FC08D_var) == lv_monsterType) || (UnitGetType(autoC58FC08D_var) == lv_monsterType2))) {
                UnitKill(autoC58FC08D_var);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeMineFields_Init () {
    libCOMU_gt_CT_InitializeMineFields = TriggerCreate("libCOMU_gt_CT_InitializeMineFields_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeMineFields, ("Mutator " + "MineFields" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMineFields
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownMineFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(libCOMI_gf_MutatorPlayer(), "WidowMakerStrongerMines", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownMineFields_Init () {
    libCOMU_gt_CT_ShutdownMineFields = TriggerCreate("libCOMU_gt_CT_ShutdownMineFields_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownMineFields, ("Mutator " + "MineFields" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMissileBarrage
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeMissileBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_MissileBarrage, true, false);
    libCOMU_gv_cT_MissileCleanupEnabled = true;
    TriggerEnable(libCOMU_gt_CT_MissileDeath, true);
    TriggerEnable(libCOMU_gt_CT_UnitCreation5, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeMissileBarrage_Init () {
    libCOMU_gt_CT_InitializeMissileBarrage = TriggerCreate("libCOMU_gt_CT_InitializeMissileBarrage_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeMissileBarrage, ("Mutator " + "MissileBarrage" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMissileBarrage
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownMissileBarrage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_MissileBarrage);
    TriggerEnable(libCOMU_gt_CT_UnitCreation5, false);
    TriggerEnable(libCOMU_gt_CT_MissileDeath, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownMissileBarrage_Init () {
    libCOMU_gt_CT_ShutdownMissileBarrage = TriggerCreate("libCOMU_gt_CT_ShutdownMissileBarrage_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownMissileBarrage, ("Mutator " + "MissileBarrage" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation5
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyMissileBirth(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation5_Init () {
    libCOMU_gt_CT_UnitCreation5 = TriggerCreate("libCOMU_gt_CT_UnitCreation5_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation5, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation5, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_MissileBarrage
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_MissileBarrage_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit[7][libCOMI_gv_cCC_MAXPLAYERS + 1] lv_missileLauncher;
    unitgroup lv_launchTargets;
    unit lv_chosenTarget;
    timer[libCOMI_gv_cCC_MAXPLAYERS + 1] lv_barrageTimer;
    timer lv_nukeCD;
    int lv_indexLauncher;
    int lv_indexPlayer;
    point lv_launchLocation;
    int lv_launchAttempts;
    int lv_randomLaunchRoll;
    point lv_pDDTarget;
    unit lv_indexUnit;

    // Automatic Variable Declarations
    playergroup autoD62C3504_g;
    playergroup autoFD6E55D3_g;
    const int autoACFB1037_ae = 6;
    const int autoACFB1037_ai = 1;
    unitgroup auto25155917_g;
    int auto25155917_u;
    const int auto0BC6AE01_ae = 100;
    const int auto0BC6AE01_ai = 1;
    int auto74E72DD5_val;

    // Variable Initialization
    lv_launchTargets = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCOMI_gv_cCC_MAXPLAYERS; init_i += 1) {
        lv_barrageTimer[init_i] = TimerCreate();
    }
    lv_nukeCD = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD62C3504_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoD62C3504_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_barrageTimer[lv_indexPlayer], 5.0, false, c_timeAI);
    }
    TimerStart(lv_nukeCD, libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 0.0, 900.0, 600.0, 0.0, 0.0), false, c_timeAI);
    while (true) {
        Wait(1.0, c_timeAI);
        autoFD6E55D3_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoFD6E55D3_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_indexLauncher = 1;
            for ( ; ( (autoACFB1037_ai >= 0 && lv_indexLauncher <= autoACFB1037_ae) || (autoACFB1037_ai < 0 && lv_indexLauncher >= autoACFB1037_ae) ) ; lv_indexLauncher += autoACFB1037_ai ) {
                if (((lv_missileLauncher[lv_indexLauncher][lv_indexPlayer] == null) || (UnitIsAlive(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer]) == false) || (UnitIsValid(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer]) == false))) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InvisibleTargetDummy", c_unitCreateIgnorePlacement, libCOMI_gf_MutatorPlayer(), Point(0.0, 0.0));
                    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
                    lv_missileLauncher[lv_indexLauncher][lv_indexPlayer] = UnitLastCreated();
                    UnitSetHeight(lv_missileLauncher[lv_indexLauncher][lv_indexPlayer], 8.0, 0.0);
                }

            }
            if ((TimerGetRemaining(lv_barrageTimer[lv_indexPlayer]) <= 0.0)) {
                lv_launchTargets = UnitGroup(null, lv_indexPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto25155917_g = lv_launchTargets;
                auto25155917_u = UnitGroupCount(auto25155917_g, c_unitCountAll);
                for (;; auto25155917_u -= 1) {
                    lv_indexUnit = UnitGroupUnitFromEnd(auto25155917_g, auto25155917_u);
                    if (lv_indexUnit == null) { break; }
                    if ((UnitFilterMatch(lv_indexUnit, lv_indexPlayer, UnitFilter((1 << c_targetFilterPreventDefeat), 0, 0, 0)) == false)) {
                        UnitGroupRemove(lv_launchTargets, lv_indexUnit);
                    }

                }
                if ((UnitGroupCount(lv_launchTargets, c_unitCountAlive) <= 0)) {
                    continue;
                }

                lv_chosenTarget = UnitGroupRandomUnit(lv_launchTargets, c_unitCountAlive);
                lv_launchAttempts = 1;
                for ( ; ( (auto0BC6AE01_ai >= 0 && lv_launchAttempts <= auto0BC6AE01_ae) || (auto0BC6AE01_ai < 0 && lv_launchAttempts >= auto0BC6AE01_ae) ) ; lv_launchAttempts += auto0BC6AE01_ai ) {
                    auto74E72DD5_val = RandomInt(1, 4);
                    if (auto74E72DD5_val == 1) {
                        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), libNtve_gf_HeightOfRegion(RegionEntireMap()));
                    }
                    else if (auto74E72DD5_val == 2) {
                        lv_launchLocation = Point(RandomFixed(0.0, libNtve_gf_WidthOfRegion(RegionEntireMap())), 0.0);
                    }
                    else if (auto74E72DD5_val == 3) {
                        lv_launchLocation = Point(0.0, RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
                    }
                    else if (auto74E72DD5_val == 4) {
                        lv_launchLocation = Point(libNtve_gf_WidthOfRegion(RegionEntireMap()), RandomFixed(0.0, libNtve_gf_HeightOfRegion(RegionEntireMap())));
                    }
                    else {
                    }
                    if ((DistanceBetweenPoints(lv_launchLocation, libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))) > 50.0)) {
                        break;
                    }

                }
                if ((lv_launchAttempts >= 100)) {
                    continue;
                }

                UnitSetPosition(lv_missileLauncher[1][lv_indexPlayer], lv_launchLocation, false);
                lv_randomLaunchRoll = RandomInt(1, 100);
                if ((GameGetMissionTime() <= 300.0)) {
                    UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 45.0, 30.0, 20.0, 15.0, 0.0, 0.0), false, c_timeAI);
                }
                else if ((GameGetMissionTime() <= 600.0)) {
                    if ((lv_randomLaunchRoll <= 90)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    else {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 30.0, 20.0, 15.0, 5.0, 0.0, 0.0), false, c_timeAI);
                }
                else if ((GameGetMissionTime() <= 900.0)) {
                    if ((lv_randomLaunchRoll <= 20)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileSplitterLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 40)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    else if (true) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 30.0, 12.0, 4.0, 2.0, 0.0, 0.0), false, c_timeAI);
                }
                else if (true) {
                    if ((lv_randomLaunchRoll <= 10) && ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 3) || (libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4)) && (TimerGetRemaining(lv_nukeCD) <= 0.0)) {
                        SoundPlayForPlayer(SoundLink("Tychus04BriefingAlarm", 0), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                        TimerStart(lv_nukeCD, libCOMI_gf_MinimumDifficultyValueCoopReal(0.0, 0.0, 120.0, 60.0, 0.0, 0.0), false, c_timeAI);
                        lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0));
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0)), false);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0));
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                        UnitSetPosition(lv_missileLauncher[3][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0)), false);
                        UnitCreateEffectPoint(lv_missileLauncher[3][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        if ((libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer) == 4)) {
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+0.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[4][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 7.0, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+0.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[4][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[5][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))-30.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[5][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                            lv_pDDTarget = PointWithOffsetPolar(UnitGetPosition(lv_chosenTarget), 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0));
                            lv_pDDTarget = libNtve_gf_PointWithZOffset(lv_pDDTarget, 2.0);
                            UnitSetPosition(lv_missileLauncher[6][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.5, (AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))+30.0)), false);
                            UnitCreateEffectPoint(lv_missileLauncher[6][lv_indexPlayer], "MutatorMissilePointDefenseNukeEscortLaunch", lv_pDDTarget);
                        }

                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileNukeLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 40)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileSplitterLaunch", lv_chosenTarget);
                    }
                    else if ((lv_randomLaunchRoll <= 60)) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                        UnitSetPosition(lv_missileLauncher[2][lv_indexPlayer], PointWithOffsetPolar(lv_launchLocation, 4.0, AngleBetweenPoints(lv_launchLocation, UnitGetPosition(lv_chosenTarget))), false);
                        lv_pDDTarget = libNtve_gf_PointWithZOffset(UnitGetPosition(lv_chosenTarget), 2.0);
                        UnitCreateEffectPoint(lv_missileLauncher[2][lv_indexPlayer], "MutatorMissilePointDefenseLaunch", lv_pDDTarget);
                    }
                    else if (true) {
                        UnitCreateEffectUnit(lv_missileLauncher[1][lv_indexPlayer], "MutatorMissileStandardLaunch", lv_chosenTarget);
                    }
                    TimerStart(lv_barrageTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(PlayerDifficulty(lv_indexPlayer), 15.0, 6.0, 2.0, 1.0, 0.0, 0.0), false, c_timeAI);
                }
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_MissileBarrage_Init () {
    libCOMU_gt_CT_MissileBarrage = TriggerCreate("libCOMU_gt_CT_MissileBarrage_Func");
    TriggerEnable(libCOMU_gt_CT_MissileBarrage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_MissileDeath
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_MissileDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!(libCOMI_gf_UnitIsMutatorMissile(null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyMissileDeath(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_MissileDeath_Init () {
    libCOMU_gt_CT_MissileDeath = TriggerCreate("libCOMU_gt_CT_MissileDeath_Func");
    TriggerEnable(libCOMU_gt_CT_MissileDeath, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_MissileDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeMomentOfSilence
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeMomentOfSilence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath15, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeMomentOfSilence_Init () {
    libCOMU_gt_CT_InitializeMomentOfSilence = TriggerCreate("libCOMU_gt_CT_InitializeMomentOfSilence_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeMomentOfSilence, ("Mutator " + "MomentOfSilence" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownMomentOfSilence
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownMomentOfSilence_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath15, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownMomentOfSilence_Init () {
    libCOMU_gt_CT_ShutdownMomentOfSilence = TriggerCreate("libCOMU_gt_CT_ShutdownMomentOfSilence_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownMomentOfSilence, ("Mutator " + "MomentOfSilence" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 15
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath15_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyMomentOfSilence(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath15_Init () {
    libCOMU_gt_CT_UnitDeath15 = TriggerCreate("libCOMU_gt_CT_UnitDeath15_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath15, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath15, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeMothership
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_ShakurasTemple")) {
        libCOMU_gv_mM_MotherShipBaseAvoidDistance = 18.0;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(1500.0, 2000.0, 2500.0, 3000.0, 0.0, 0.0), 0));
    TriggerEnable(libCOMU_gt_MM_MissileDrop, true);
    TriggerEnable(libCOMU_gt_MM_MothershipCritical, true);
    TriggerEnable(libCOMU_gt_MM_PlanetCracker, true);
    Wait(10.0, c_timeAI);
    TriggerExecute(libCOMU_gt_MM_MothershipController, true, false);
    Wait(710.0, c_timeAI);
    TriggerExecute(libCOMU_gt_MM_MothershipController, true, false);
    Wait(300.0, c_timeAI);
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3000.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "LifeStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3000.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3000.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "MothershipAiur06", "ShieldsMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(2500.0, 3500.0, 4000.0, 4500.0, 0.0, 0.0), 0));
    Wait(300.0, c_timeAI);
    TriggerExecute(libCOMU_gt_MM_MothershipController, true, false);
    Wait(300.0, c_timeAI);
    TriggerExecute(libCOMU_gt_MM_MothershipController, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeMothership_Init () {
    libCOMU_gt_MM_InitializeMothership = TriggerCreate("libCOMU_gt_MM_InitializeMothership_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeMothership, ("Mutator " + "Mothership" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownMothership
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownMothership_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF1325A8D_g;
    int autoF1325A8D_u;
    unit autoF1325A8D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_MissileDrop, false);
    TriggerEnable(libCOMU_gt_MM_MothershipCritical, false);
    TriggerEnable(libCOMU_gt_MM_PlanetCracker, false);
    autoF1325A8D_g = libCOMU_gv_mM_MothershipUG;
    autoF1325A8D_u = UnitGroupCount(autoF1325A8D_g, c_unitCountAll);
    for (;; autoF1325A8D_u -= 1) {
        autoF1325A8D_var = UnitGroupUnitFromEnd(autoF1325A8D_g, autoF1325A8D_u);
        if (autoF1325A8D_var == null) { break; }
        UnitKill(autoF1325A8D_var);
    }
    TriggerStop(libCOMU_gt_MM_MothershipController);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownMothership_Init () {
    libCOMU_gt_MM_ShutdownMothership = TriggerCreate("libCOMU_gt_MM_ShutdownMothership_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownMothership, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownMothership, ("Mutator " + "Mothership" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MothershipController
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_MothershipController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vCurrentTarget;
    unitgroup lv_vTargetCandidates;
    unit lv_vMothership;
    point lv_vTargetLocation;
    int lv_vSearchAttempts;

    // Automatic Variable Declarations
    const int autoCC5D0CA4_ae = 100;
    const int autoCC5D0CA4_ai = 1;

    // Variable Initialization
    lv_vTargetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MothershipAiur06", 0, libCOMI_gf_MutatorPlayer(), libCOMU_gf_MM_MothershipSpawn());
    lv_vMothership = UnitLastCreated();
    UnitGroupAdd(libCOMU_gv_mM_MothershipUG, UnitLastCreated());
    UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingDiamond", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(73.33, 0.00, 73.33, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.4);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMU_557AC13C"));
    Wait(2.0, c_timeGame);
    while (true) {
        if ((lv_vCurrentTarget != null)) {
            UnitGroupRemove(libCOMU_gv_mM_MothershipTargets, lv_vCurrentTarget);
        }

        lv_vCurrentTarget = null;
        lv_vTargetCandidates = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        UnitGroupRemoveUnitGroup(lv_vTargetCandidates, libCOMU_gv_mM_MothershipTargets);
        while ((libCOMU_gf_MM_MothershipTargetValid(lv_vMothership, lv_vCurrentTarget) == false)) {
            if ((lv_vCurrentTarget != null)) {
                UnitGroupRemove(lv_vTargetCandidates, lv_vCurrentTarget);
                lv_vCurrentTarget = null;
            }

            if (((lv_vMothership == null) || (UnitGroupCount(lv_vTargetCandidates, c_unitCountAlive) <= 0))) {
                break;
            }

            lv_vCurrentTarget = UnitGroupClosestToPoint(lv_vTargetCandidates, UnitGetPosition(lv_vMothership));
        }
        if ((lv_vCurrentTarget != null)) {
            UnitIssueOrder(lv_vMothership, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_vCurrentTarget)), c_orderQueueReplace);
            UnitGroupAdd(libCOMU_gv_mM_MothershipTargets, lv_vCurrentTarget);
        }
        else {
            if (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(UnitGetPosition(lv_vMothership), 80.0, libCOMI_gf_AffectedPlayers())) {
                lv_vTargetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_vMothership), 10.0, libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)));
            }
            else {
                lv_vTargetLocation = PointWithOffsetPolar(UnitGetPosition(lv_vMothership), 10.0, libNtve_gf_RandomAngle());
            }
            lv_vSearchAttempts = 1;
            for ( ; ( (autoCC5D0CA4_ai >= 0 && lv_vSearchAttempts <= autoCC5D0CA4_ae) || (autoCC5D0CA4_ai < 0 && lv_vSearchAttempts >= autoCC5D0CA4_ae) ) ; lv_vSearchAttempts += autoCC5D0CA4_ai ) {
                if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vTargetLocation, libCOMU_gv_mM_MotherShipBaseAvoidDistance, libCOMI_gf_AffectedPlayers()) == true) && (UnitGroupCount(UnitGroup("PitAlarak", c_playerAny, RegionCircle(lv_vTargetLocation, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) && ((UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(lv_vTargetLocation, 20.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) <= 0) || (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vTargetLocation, 25.0, libCOMI_gf_AffectedPlayers()) == false))) {
                    UnitIssueOrder(lv_vMothership, OrderTargetingPoint(AbilityCommand("attack", 0), lv_vTargetLocation), c_orderQueueReplace);
                    break;
                }
                else {
                    lv_vTargetLocation = PointWithOffsetPolar(UnitGetPosition(lv_vMothership), 10.0, libNtve_gf_RandomAngle());
                }
            }
        }
        Wait(RandomFixed(4.0, 6.0), c_timeGame);
        if ((UnitIsAlive(lv_vMothership) == false)) {
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_MothershipController_Init () {
    libCOMU_gt_MM_MothershipController = TriggerCreate("libCOMU_gt_MM_MothershipController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Missile Drop
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_MissileDrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vMothership;
    unitgroup lv_vDummies;
    unitgroup lv_vMissiles;

    // Automatic Variable Declarations
    unitgroup auto087B51CB_g;
    int auto087B51CB_u;
    unit auto087B51CB_var;
    unitgroup autoC84EDD71_g;
    int autoC84EDD71_u;
    unit autoC84EDD71_var;
    unitgroup auto3600F07A_g;
    int auto3600F07A_u;
    unit auto3600F07A_var;

    // Variable Initialization
    lv_vDummies = UnitGroupEmpty();
    lv_vMissiles = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vMothership = EventUnit();
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_vMothership, "Create Shockwave");
    Wait(0.5, c_timeGame);
    auto087B51CB_g = UnitGroupAlliance(UnitGetOwner(lv_vMothership), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_vMothership), 10.0), UnitFilter((1 << c_targetFilterMissile), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto087B51CB_u = UnitGroupCount(auto087B51CB_g, c_unitCountAll);
    for (;; auto087B51CB_u -= 1) {
        auto087B51CB_var = UnitGroupUnitFromEnd(auto087B51CB_g, auto087B51CB_u);
        if (auto087B51CB_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DummyUnit", 0, UnitGetOwner(lv_vMothership), libNtve_gf_PointWithZOffset(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(auto087B51CB_var), 0.7, UnitGetPosition(lv_vMothership)), 0.0));
        UnitCreateEffectUnit(UnitLastCreated(), "FlagshipTimeBombApplyRedirectMissile", auto087B51CB_var);
        UnitGroupAdd(lv_vDummies, UnitLastCreated());
        UnitGroupAdd(lv_vMissiles, auto087B51CB_var);
    }
    Wait(8.0, c_timeGame);
    autoC84EDD71_g = lv_vDummies;
    autoC84EDD71_u = UnitGroupCount(autoC84EDD71_g, c_unitCountAll);
    for (;; autoC84EDD71_u -= 1) {
        autoC84EDD71_var = UnitGroupUnitFromEnd(autoC84EDD71_g, autoC84EDD71_u);
        if (autoC84EDD71_var == null) { break; }
        UnitRemove(autoC84EDD71_var);
    }
    auto3600F07A_g = lv_vMissiles;
    auto3600F07A_u = UnitGroupCount(auto3600F07A_g, c_unitCountAll);
    for (;; auto3600F07A_u -= 1) {
        auto3600F07A_var = UnitGroupUnitFromEnd(auto3600F07A_g, auto3600F07A_u);
        if (auto3600F07A_var == null) { break; }
        UnitRemove(auto3600F07A_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_MissileDrop_Init () {
    libCOMU_gt_MM_MissileDrop = TriggerCreate("libCOMU_gt_MM_MissileDrop_Func");
    TriggerEnable(libCOMU_gt_MM_MissileDrop, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_MissileDrop, null, "FinalB", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MothershipCritical
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_MothershipCritical_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMU_gv_mM_MothershipUG, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) <= 200.0))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("WormholeTransit", 0), libCOMU_gf_MM_MothershipSpawn()), c_orderQueueReplace);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("MothershipAiur06PlanetCracker", 1)), c_orderQueueReplace);
    libCOMI_gf_MM_UnitScaleController(EventUnit(), 1.0);
    Wait(0.5, c_timeGame);
    UnitBehaviorAddPlayer(EventUnit(), "MothershipRegen", libCOMI_gf_MutatorPlayer(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_MothershipCritical_Init () {
    libCOMU_gt_MM_MothershipCritical = TriggerCreate("libCOMU_gt_MM_MothershipCritical_Func");
    TriggerEnable(libCOMU_gt_MM_MothershipCritical, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_MM_MothershipCritical, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_PlanetCracker
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_PlanetCracker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vTargetCandidates;
    unitgroup lv_vArmedTargetCandidates;
    unit lv_vCurrentTarget;

    // Automatic Variable Declarations
    unitgroup auto8DB13DBF_g;
    int auto8DB13DBF_u;
    unit auto8DB13DBF_var;
    const int autoA7A190AE_n = 10;
    int autoA7A190AE_i;

    // Variable Initialization
    lv_vTargetCandidates = UnitGroupEmpty();
    lv_vArmedTargetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(EventUnit(), "MothershipAiur06PlanetCracker") == true) && (UnitIsAlive(EventUnit()) == true)) {
        lv_vCurrentTarget = null;
        UnitGroupClear(lv_vArmedTargetCandidates);
        lv_vTargetCandidates = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 8.0), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto8DB13DBF_g = lv_vTargetCandidates;
        auto8DB13DBF_u = UnitGroupCount(auto8DB13DBF_g, c_unitCountAll);
        for (;; auto8DB13DBF_u -= 1) {
            auto8DB13DBF_var = UnitGroupUnitFromEnd(auto8DB13DBF_g, auto8DB13DBF_u);
            if (auto8DB13DBF_var == null) { break; }
            if ((UnitHasBehavior2(auto8DB13DBF_var, "VoidSentryBlackHole") == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(lv_vCurrentTarget)) <= 4.0)) {
                lv_vCurrentTarget = auto8DB13DBF_var;
                break;
            }

            if ((UnitCanAttackTarget(auto8DB13DBF_var, EventUnit()) == true)) {
                UnitGroupAdd(lv_vArmedTargetCandidates, auto8DB13DBF_var);
            }

        }
        if ((lv_vCurrentTarget == null)) {
            if ((UnitGroupCount(lv_vArmedTargetCandidates, c_unitCountAlive) >= 1)) {
                lv_vCurrentTarget = UnitGroupClosestToPoint(lv_vArmedTargetCandidates, UnitGetPosition(EventUnit()));
            }
            else {
                lv_vCurrentTarget = UnitGroupClosestToPoint(lv_vTargetCandidates, UnitGetPosition(EventUnit()));
            }
        }

        UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, 0.35);
        for (autoA7A190AE_i = 1; autoA7A190AE_i <= autoA7A190AE_n; autoA7A190AE_i += 1) {
            UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_vCurrentTarget)), c_orderQueueReplace);
            Wait(0.2, c_timeGame);
            if ((UnitIsAlive(lv_vCurrentTarget) == false)) {
                break;
            }

        }
    }
    UnitSetPropertyFixed(EventUnit(), c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(EventUnit()), c_unitPropMovementSpeed));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_PlanetCracker_Init () {
    libCOMU_gt_MM_PlanetCracker = TriggerCreate("libCOMU_gt_MM_PlanetCracker_Func");
    TriggerEnable(libCOMU_gt_MM_PlanetCracker, false);
    TriggerAddEventUnitAbility(libCOMU_gt_MM_PlanetCracker, null, AbilityCommand("MothershipAiur06PlanetCracker", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeNukes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeNukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_NukeSpawn, true);
    TriggerExecute(libCOMU_gt_CT_NukeSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeNukes_Init () {
    libCOMU_gt_CT_InitializeNukes = TriggerCreate("libCOMU_gt_CT_InitializeNukes_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeNukes, ("Mutator " + "Nukes" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownNukes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownNukes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_NukeSpawn, false);
    TriggerStop(libCOMU_gt_CT_NukeSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownNukes_Init () {
    libCOMU_gt_CT_ShutdownNukes = TriggerCreate("libCOMU_gt_CT_ShutdownNukes_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownNukes, ("Mutator " + "Nukes" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_NukeSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_NukeSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int auto1AC79492_ae = 100;
    const int auto1AC79492_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(7.0, 5.0, 3.0, 2.0, 0.1, 0.1);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (auto1AC79492_ai >= 0 && lv_safetyInt <= auto1AC79492_ae) || (auto1AC79492_ai < 0 && lv_safetyInt >= auto1AC79492_ae) ) ; lv_safetyInt += auto1AC79492_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || (UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "MutatorNukePersistent", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_NukeSpawn_Init () {
    libCOMU_gt_CT_NukeSpawn = TriggerCreate("libCOMU_gt_CT_NukeSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_NukeSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeNecronomicon
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeNecronomicon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath1, true);
    Wait(2.0, c_timeGame);
    TriggerEnable(libCOMU_gt_MM_NecronomiconAttackWaveDefend, true);
    TriggerExecute(libCOMI_gt_MM_PX_InitPlayerX, true, false);
    TriggerExecute(libCOMU_gt_MM_NecronomiconAttackWave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeNecronomicon_Init () {
    libCOMU_gt_MM_InitializeNecronomicon = TriggerCreate("libCOMU_gt_MM_InitializeNecronomicon_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeNecronomicon, ("Mutator " + "Necronomicon" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownNecronomicon
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownNecronomicon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath1, false);
    TriggerEnable(libCOMU_gt_MM_NecronomiconAttackWaveDefend, false);
    TriggerStop(libCOMU_gt_MM_NecronomiconAttackWave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownNecronomicon_Init () {
    libCOMU_gt_MM_ShutdownNecronomicon = TriggerCreate("libCOMU_gt_MM_ShutdownNecronomicon_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownNecronomicon, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownNecronomicon, ("Mutator " + "Necronomicon" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitDeath1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyNecronomicon(EventUnit(), libNtve_gf_KillingPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitDeath1_Init () {
    libCOMU_gt_MM_UnitDeath1 = TriggerCreate("libCOMU_gt_MM_UnitDeath1_Func");
    TriggerEnable(libCOMU_gt_MM_UnitDeath1, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_UnitDeath1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_NecronomiconAttackWave
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_NecronomiconAttackWave_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBB75125B_n = 200;
    int autoBB75125B_i;

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoBB75125B_i = 1; autoBB75125B_i <= autoBB75125B_n; autoBB75125B_i += 1) {
        while (!((UnitGroupCount(libCOMU_gv_mM_UndeadUG, c_unitCountAlive) >= 30))) {
            Wait(5.0, c_timeGame);
        }
        UnitGroupIssueOrder(libCOMU_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))), c_orderQueueReplace);
        UnitGroupClear(libCOMU_gv_mM_UndeadUG);
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_NecronomiconAttackWave_Init () {
    libCOMU_gt_MM_NecronomiconAttackWave = TriggerCreate("libCOMU_gt_MM_NecronomiconAttackWave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_NecronomiconAttackWaveDefend
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_NecronomiconAttackWaveDefend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitGroupCount(libCOMU_gv_mM_UndeadUG, c_unitCountAlive) >= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(libCOMU_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    UnitGroupIssueOrder(libCOMU_gv_mM_UndeadUG, OrderTargetingPoint(AbilityCommand("attack", 0), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0))), c_orderQueueAddToEnd);
    UnitGroupClear(libCOMU_gv_mM_UndeadUG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_NecronomiconAttackWaveDefend_Init () {
    libCOMU_gt_MM_NecronomiconAttackWaveDefend = TriggerCreate("libCOMU_gt_MM_NecronomiconAttackWaveDefend_Func");
    TriggerEnable(libCOMU_gt_MM_NecronomiconAttackWaveDefend, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_MM_NecronomiconAttackWaveDefend, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeNuclearMines
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeNuclearMines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    point lv_vPoint;
    int lv_vSpawnCount;
    int lv_vMaxSpawnAttempts;
    int lv_vSpawnAttempt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vMaxSpawnAttempts = 3000;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath3, true);
    lv_vAmount = FixedToInt((libNtve_gf_HeightOfRegion(RegionEntireMap()) * (libNtve_gf_WidthOfRegion(RegionEntireMap()) / libCOMI_gf_MinimumDifficultyValueCoopReal(1000.0, 900.0, 800.0, 700.0, 0.0, 0.0))));
    while ((lv_vSpawnCount < lv_vAmount) && (lv_vSpawnAttempt < lv_vMaxSpawnAttempts)) {
        lv_vPoint = RegionRandomPoint(RegionEntireMap());
        if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, 40.0, libCOMI_gf_AffectedPlayers()) == true) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint) && (PathingType(lv_vPoint) == c_pathingGround) && (UnitCountAlliance(libCOMI_gf_MutatorPlayer(), c_unitAllianceEnemy, RegionCircle(lv_vPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) <= 1) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 1.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            lv_vSpawnCount += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NuclearMine", 0, libCOMI_gf_MutatorPlayer(), lv_vPoint);
            UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
            UnitSetTeamColorIndex(UnitLastCreated(), 10);
            libCOMI_gf_CreateDropPod(libCOMI_ge_DropPodRace_Terran, libCOMI_gf_CM_NearbyGroundPathablePoint(UnitGetPosition(UnitLastCreated()), 0.0, 6.0), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), false, libCOMI_gf_MutatorPlayer());
        }
        else {
            lv_vSpawnAttempt += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeNuclearMines_Init () {
    libCOMU_gt_MM_InitializeNuclearMines = TriggerCreate("libCOMU_gt_MM_InitializeNuclearMines_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeNuclearMines, ("Mutator " + "NuclearMines" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownNuclearMines
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownNuclearMines_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto28D37738_g;
    int auto28D37738_u;
    unit auto28D37738_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath3, false);
    auto28D37738_g = UnitGroup("NuclearMine", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto28D37738_u = UnitGroupCount(auto28D37738_g, c_unitCountAll);
    for (;; auto28D37738_u -= 1) {
        auto28D37738_var = UnitGroupUnitFromEnd(auto28D37738_g, auto28D37738_u);
        if (auto28D37738_var == null) { break; }
        UnitKill(auto28D37738_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownNuclearMines_Init () {
    libCOMU_gt_MM_ShutdownNuclearMines = TriggerCreate("libCOMU_gt_MM_ShutdownNuclearMines_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownNuclearMines, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownNuclearMines, ("Mutator " + "NuclearMines" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitDeath3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyNuclearMines(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitDeath3_Init () {
    libCOMU_gt_MM_UnitDeath3 = TriggerCreate("libCOMU_gt_MM_UnitDeath3_Func");
    TriggerEnable(libCOMU_gt_MM_UnitDeath3, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_UnitDeath3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeOldTimes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeOldTimes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vA;

    // Automatic Variable Declarations
    const int autoE836B60D_ae = 23;
    const int autoE836B60D_ai = 1;
    const int auto6C5F254B_ae = 5;
    const int auto6C5F254B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_OT_SelectionLimitations, true);
    TriggerEnable(libCOMU_gt_MM_OT_AntiSmartCast, true);
    TriggerEnable(libCOMU_gt_MM_OT_WorkerCreated, true);
    TriggerEnable(libCOMU_gt_MM_OT_NoBuildQueue, true);
    TriggerEnable(libCOMU_gt_MM_OT_RallyFix, true);
    TriggerExecute(libCOMU_gt_MM_OT_StructureHotkeyCheck, true, false);
    TriggerExecute(libCOMU_gt_MM_OT_WorkerBuildCheck, true, false);
    TriggerExecute(libCOMU_gt_MM_OT_InitialWorkerautomineStop, true, false);
    lv_vA = 12;
    for ( ; ( (autoE836B60D_ai >= 0 && lv_vA <= autoE836B60D_ae) || (autoE836B60D_ai < 0 && lv_vA >= autoE836B60D_ae) ) ; lv_vA += autoE836B60D_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame0/GroupUnitButton" + IntToString(lv_vA));
        DialogControlFadeTransparency(DialogControlLastCreated(), libCOMI_gf_AffectedPlayers(), 0.0, 100.0);
    }
    lv_vA = 0;
    for ( ; ( (auto6C5F254B_ai >= 0 && lv_vA <= auto6C5F254B_ae) || (auto6C5F254B_ai < 0 && lv_vA >= auto6C5F254B_ae) ) ; lv_vA += auto6C5F254B_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageButton" + IntToString(lv_vA));
        DialogControlFadeTransparency(DialogControlLastCreated(), libCOMI_gf_AffectedPlayers(), 0.0, 100.0);
    }
    UISetFrameVisible(libCOMI_gf_AffectedPlayers(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(libCOMI_gf_AffectedPlayers(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(libCOMI_gf_AffectedPlayers(), c_syncFrameTypePylonButton, false);
    Wait(4.0, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), libCOMI_gf_AffectedPlayers(), "MMBW_On");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeOldTimes_Init () {
    libCOMU_gt_MM_InitializeOldTimes = TriggerCreate("libCOMU_gt_MM_InitializeOldTimes_Func");
    TriggerEnable(libCOMU_gt_MM_InitializeOldTimes, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeOldTimes, ("Mutator " + "OldTimes" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownOldTimes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownOldTimes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_OT_SelectionLimitations, false);
    TriggerEnable(libCOMU_gt_MM_OT_AntiSmartCast, false);
    TriggerEnable(libCOMU_gt_MM_OT_WorkerCreated, false);
    TriggerEnable(libCOMU_gt_MM_OT_NoBuildQueue, false);
    TriggerEnable(libCOMU_gt_MM_OT_RallyFix, false);
    TriggerStop(libCOMU_gt_MM_OT_StructureHotkeyCheck);
    TriggerStop(libCOMU_gt_MM_OT_WorkerBuildCheck);
    TriggerStop(libCOMU_gt_MM_OT_InitialWorkerautomineStop);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownOldTimes_Init () {
    libCOMU_gt_MM_ShutdownOldTimes = TriggerCreate("libCOMU_gt_MM_ShutdownOldTimes_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownOldTimes, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownOldTimes, ("Mutator " + "OldTimes" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Initial Worker automine Stop
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_InitialWorkerautomineStop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF8930BBB_n = 4;
    int autoF8930BBB_i;
    playergroup auto3763DF4C_g;
    int auto3763DF4C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoF8930BBB_i = 1; autoF8930BBB_i <= autoF8930BBB_n; autoF8930BBB_i += 1) {
        Wait(0.5, c_timeGame);
        auto3763DF4C_g = libCOMI_gf_AffectedPlayers();
        auto3763DF4C_var = -1;
        while (true) {
            auto3763DF4C_var = PlayerGroupNextPlayer(auto3763DF4C_g, auto3763DF4C_var);
            if (auto3763DF4C_var < 0) { break; }
            UnitGroupIssueOrder(UnitGroup(null, auto3763DF4C_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_InitialWorkerautomineStop_Init () {
    libCOMU_gt_MM_OT_InitialWorkerautomineStop = TriggerCreate("libCOMU_gt_MM_OT_InitialWorkerautomineStop_Func");
    TriggerEnable(libCOMU_gt_MM_OT_InitialWorkerautomineStop, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Selection Limitations
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_SelectionLimitations_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;
    unitgroup lv_vNewUG;

    // Automatic Variable Declarations
    const int autoAC6FBFCD_ae = 12;
    int autoAC6FBFCD_var;
    unitgroup auto462D8F21_g;
    int auto462D8F21_u;
    unit auto462D8F21_var;

    // Variable Initialization
    lv_vUG = UnitGroupSelected(EventPlayer());
    lv_vNewUG = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGroupCount(lv_vUG, c_unitCountAlive) > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(lv_vUG, c_unitCountAlive) > 12)) {
        UnitGroupSelect(lv_vUG, EventPlayer(), false);
        autoAC6FBFCD_var = 1;
        for ( ; autoAC6FBFCD_var <= autoAC6FBFCD_ae; autoAC6FBFCD_var += 1 ) {
            UnitGroupAdd(lv_vNewUG, UnitGroupUnit(lv_vUG, autoAC6FBFCD_var));
        }
        Wait(0.0, c_timeGame);
        UnitGroupSelect(lv_vNewUG, EventPlayer(), true);
    }

    lv_vNewUG = UnitGroupSelected(EventPlayer());
    auto462D8F21_g = lv_vNewUG;
    auto462D8F21_u = UnitGroupCount(auto462D8F21_g, c_unitCountAll);
    for (;; auto462D8F21_u -= 1) {
        auto462D8F21_var = UnitGroupUnitFromEnd(auto462D8F21_g, auto462D8F21_u);
        if (auto462D8F21_var == null) { break; }
        if ((UnitTypeTestAttribute(UnitGetType(auto462D8F21_var), c_unitAttributeStructure) == true)) {
            UnitGroupRemove(lv_vNewUG, auto462D8F21_var);
            UnitGroupSelect(lv_vNewUG, EventPlayer(), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_SelectionLimitations_Init () {
    libCOMU_gt_MM_OT_SelectionLimitations = TriggerCreate("libCOMU_gt_MM_OT_SelectionLimitations_Func");
    TriggerEnable(libCOMU_gt_MM_OT_SelectionLimitations, false);
    TriggerAddEventUnitSelected(libCOMU_gt_MM_OT_SelectionLimitations, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Anti-Smart Cast
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_AntiSmartCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    unitgroup autoE9E1EA2F_g;
    int autoE9E1EA2F_u;
    unit autoE9E1EA2F_var;

    // Variable Initialization
    lv_vAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));
    lv_vUG = UnitGroupSelected(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(lv_vUG, c_unitCountAlive) > 1))) {
            return false;
        }

        if (!((AbilityClass(lv_vAbility) == c_classIdCAbilEffectTarget))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnit(), "AntiSmartCastCD", EventPlayer(), 1);
    UnitGroupRemove(lv_vUG, EventUnit());
    autoE9E1EA2F_g = lv_vUG;
    autoE9E1EA2F_u = UnitGroupCount(autoE9E1EA2F_g, c_unitCountAll);
    for (;; autoE9E1EA2F_u -= 1) {
        autoE9E1EA2F_var = UnitGroupUnitFromEnd(autoE9E1EA2F_g, autoE9E1EA2F_u);
        if (autoE9E1EA2F_var == null) { break; }
        if ((UnitGetType(EventUnit()) == UnitGetType(autoE9E1EA2F_var)) && (UnitHasBehavior2(autoE9E1EA2F_var, "AntiSmartCastCD") == false)) {
            UnitBehaviorAddPlayer(autoE9E1EA2F_var, "AntiSmartCastCD", EventPlayer(), 1);
            UnitIssueOrder(autoE9E1EA2F_var, EventUnitOrder(), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_AntiSmartCast_Init () {
    libCOMU_gt_MM_OT_AntiSmartCast = TriggerCreate("libCOMU_gt_MM_OT_AntiSmartCast_Func");
    TriggerEnable(libCOMU_gt_MM_OT_AntiSmartCast, false);
    TriggerAddEventUnitOrder(libCOMU_gt_MM_OT_AntiSmartCast, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Worker Created
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_WorkerCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vPoint = OrderGetTargetPosition(UnitOrder(EventUnitCreatedUnit(), 0));

    // Conditions
    if (testConds) {
        if (!((GameGetMissionTime() > 3.0))) {
            return false;
        }

        if (!((lv_vPoint != null))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagWorker) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("move", 0), lv_vPoint), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_WorkerCreated_Init () {
    libCOMU_gt_MM_OT_WorkerCreated = TriggerCreate("libCOMU_gt_MM_OT_WorkerCreated_Func");
    TriggerEnable(libCOMU_gt_MM_OT_WorkerCreated, false);
    TriggerAddEventUnitCreated(libCOMU_gt_MM_OT_WorkerCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_No Build Queue
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_NoBuildQueue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;

    // Automatic Variable Declarations
    int auto90F28CED_ae;
    int auto90F28CED_var;

    // Variable Initialization
    lv_vAbility = AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder()));

    // Conditions
    if (testConds) {
        if (!((AbilityClass(lv_vAbility) == c_classIdCAbilBuild))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagWorker) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto90F28CED_ae = (UnitOrderCount(EventUnit()) - 2);
    auto90F28CED_var = 0;
    for ( ; auto90F28CED_var <= auto90F28CED_ae; auto90F28CED_var += 1 ) {
        if ((AbilityClass(AbilityCommandGetAbility(OrderGetAbilityCommand(UnitOrder(EventUnit(), auto90F28CED_var)))) == c_classIdCAbilBuild)) {
            UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitIssueOrder(EventUnit(), EventUnitOrder(), c_orderQueueAddToEnd);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_NoBuildQueue_Init () {
    libCOMU_gt_MM_OT_NoBuildQueue = TriggerCreate("libCOMU_gt_MM_OT_NoBuildQueue_Func");
    TriggerEnable(libCOMU_gt_MM_OT_NoBuildQueue, false);
    TriggerAddEventUnitOrder(libCOMU_gt_MM_OT_NoBuildQueue, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Structure Hotkey Check
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_StructureHotkeyCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    playergroup auto784ECA8C_g;
    int auto784ECA8C_var;
    const int auto04B8E595_ae = 9;
    int auto04B8E595_var;
    unitgroup auto7D60BEF3_g;
    int auto7D60BEF3_u;
    unit auto7D60BEF3_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeGame);
        auto784ECA8C_g = libCOMI_gf_AffectedPlayers();
        auto784ECA8C_var = -1;
        while (true) {
            auto784ECA8C_var = PlayerGroupNextPlayer(auto784ECA8C_g, auto784ECA8C_var);
            if (auto784ECA8C_var < 0) { break; }
            auto04B8E595_var = 0;
            for ( ; auto04B8E595_var <= auto04B8E595_ae; auto04B8E595_var += 1 ) {
                lv_vUG = UnitControlGroup(auto784ECA8C_var, auto04B8E595_var);
                auto7D60BEF3_g = lv_vUG;
                auto7D60BEF3_u = UnitGroupCount(auto7D60BEF3_g, c_unitCountAll);
                for (;; auto7D60BEF3_u -= 1) {
                    auto7D60BEF3_var = UnitGroupUnitFromEnd(auto7D60BEF3_g, auto7D60BEF3_u);
                    if (auto7D60BEF3_var == null) { break; }
                    if ((UnitTypeTestAttribute(UnitGetType(auto7D60BEF3_var), c_unitAttributeStructure) == true) && (UnitGroupCount(lv_vUG, c_unitCountAlive) > 1)) {
                        UnitGroupRemove(lv_vUG, auto7D60BEF3_var);
                        UnitControlGroupRemoveUnits(auto784ECA8C_var, auto04B8E595_var, lv_vUG);
                        break;
                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_StructureHotkeyCheck_Init () {
    libCOMU_gt_MM_OT_StructureHotkeyCheck = TriggerCreate("libCOMU_gt_MM_OT_StructureHotkeyCheck_Func");
    TriggerEnable(libCOMU_gt_MM_OT_StructureHotkeyCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Worker Build Check
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_WorkerBuildCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    playergroup auto001A867D_g;
    int auto001A867D_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.125, c_timeGame);
        auto001A867D_g = libCOMI_gf_AffectedPlayers();
        auto001A867D_var = -1;
        while (true) {
            auto001A867D_var = PlayerGroupNextPlayer(auto001A867D_g, auto001A867D_var);
            if (auto001A867D_var < 0) { break; }
            lv_vUG = UnitGroupSelected(auto001A867D_var);
            if ((UnitGroupCount(lv_vUG, c_unitCountAlive) == 1) && (UnitTypeTestFlag(UnitGetType(UnitGroupUnit(lv_vUG, 1)), c_unitFlagWorker) == true)) {
                if ((TechTreeUpgradeCount(auto001A867D_var, "ConstructingEnabled", c_techCountCompleteOnly) != 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(auto001A867D_var, "ConstructingEnabled", 1);
                }

            }
            else {
                if ((TechTreeUpgradeCount(auto001A867D_var, "ConstructingEnabled", c_techCountCompleteOnly) != 0)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(auto001A867D_var, "ConstructingEnabled", 0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_WorkerBuildCheck_Init () {
    libCOMU_gt_MM_OT_WorkerBuildCheck = TriggerCreate("libCOMU_gt_MM_OT_WorkerBuildCheck_Func");
    TriggerEnable(libCOMU_gt_MM_OT_WorkerBuildCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_OT_Rally Fix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_OT_RallyFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("RallyHatchery", 1), OrderGetTargetPosition(EventUnitOrder())), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_OT_RallyFix_Init () {
    libCOMU_gt_MM_OT_RallyFix = TriggerCreate("libCOMU_gt_MM_OT_RallyFix_Func");
    TriggerEnable(libCOMU_gt_MM_OT_RallyFix, false);
    TriggerAddEventUnitOrder(libCOMU_gt_MM_OT_RallyFix, null, AbilityCommand("RallyHatchery", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeOrbitalStrike
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_OrbitalStrikes, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeOrbitalStrike_Init () {
    libCOMU_gt_CT_InitializeOrbitalStrike = TriggerCreate("libCOMU_gt_CT_InitializeOrbitalStrike_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeOrbitalStrike, ("Mutator " + "OrbitalStrike" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownOrbitalStrike
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownOrbitalStrike_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_OrbitalStrikes);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownOrbitalStrike_Init () {
    libCOMU_gt_CT_ShutdownOrbitalStrike = TriggerCreate("libCOMU_gt_CT_ShutdownOrbitalStrike_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownOrbitalStrike, ("Mutator " + "OrbitalStrike" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OrbitalStrikes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_OrbitalStrikes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_targetCandidates;
    unit lv_candidate;
    int lv_strikesPerTarget;
    int lv_strikeIndex;
    int lv_totalTargets;
    int lv_unitIndex;
    int lv_divisor;
    fixed lv_firingBreak;

    // Automatic Variable Declarations
    playergroup auto44349AD2_g;
    int auto44349AD2_var;
    unitgroup autoE903CC8A_g;
    int autoE903CC8A_u;
    unitgroup auto3FF39B5B_g;
    int auto3FF39B5B_u;

    // Variable Initialization
    lv_targetCandidates = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(240.0, 240.0, 180.0, 1.0, 1.0, 1.0), c_timeAI);
    while (true) {
        auto44349AD2_g = libCOMI_gf_AffectedPlayers();
        auto44349AD2_var = -1;
        while (true) {
            auto44349AD2_var = PlayerGroupNextPlayer(auto44349AD2_g, auto44349AD2_var);
            if (auto44349AD2_var < 0) { break; }
            UnitGroupAddUnitGroup(lv_targetCandidates, UnitGroup(null, auto44349AD2_var, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        autoE903CC8A_g = lv_targetCandidates;
        autoE903CC8A_u = UnitGroupCount(autoE903CC8A_g, c_unitCountAll);
        for (;; autoE903CC8A_u -= 1) {
            lv_candidate = UnitGroupUnitFromEnd(autoE903CC8A_g, autoE903CC8A_u);
            if (lv_candidate == null) { break; }
            if ((RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), UnitGetPosition(lv_candidate)) == true) && (true)) {
                UnitGroupRemove(lv_targetCandidates, lv_candidate);
            }

        }
        if ((UnitGroupCount(lv_targetCandidates, c_unitCountAlive) < 5)) {
            Wait(5.0, c_timeAI);
            continue;
        }

        if ((GameGetMissionTime() <= 300.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 2, 2, 2);
            lv_totalTargets = 10;
        }
        else if ((GameGetMissionTime() <= 500.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 3, 3, 3, 3);
        }
        else if ((GameGetMissionTime() <= 700.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 4, 4, 4, 4);
        }
        else if ((GameGetMissionTime() <= 1000.0)) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 4, 6, 8, 8, 8);
        }
        else if (true) {
            lv_totalTargets = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 5, 8, 10, 10, 10);
        }
        SoundPlayForPlayer(SoundLink("MutatorSoAPowerWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        libCOMU_gf_CT_OrbitalStrikeLaunch(lv_targetCandidates, lv_totalTargets, 3, 7.5, 0.12);
        lv_firingBreak = libCOMI_gf_MinimumDifficultyValueCoopReal(2.5, 3.0, 3.5, 4.0, 4.0, 4.0);
        Wait(lv_firingBreak, c_timeGame);
        auto3FF39B5B_g = lv_targetCandidates;
        auto3FF39B5B_u = UnitGroupCount(auto3FF39B5B_g, c_unitCountAll);
        for (;; auto3FF39B5B_u -= 1) {
            lv_candidate = UnitGroupUnitFromEnd(auto3FF39B5B_g, auto3FF39B5B_u);
            if (lv_candidate == null) { break; }
            if ((RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), UnitGetPosition(lv_candidate)) == true) && (true)) {
                UnitGroupRemove(lv_targetCandidates, lv_candidate);
            }

        }
        libCOMU_gf_CT_OrbitalStrikeLaunch(lv_targetCandidates, lv_totalTargets, 3, (7.5-lv_firingBreak), 0.08);
        Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(180.0, 140.0, 110.0, 80.0, 80.0, 80.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_OrbitalStrikes_Init () {
    libCOMU_gt_CT_OrbitalStrikes = TriggerCreate("libCOMU_gt_CT_OrbitalStrikes_Func");
    TriggerEnable(libCOMU_gt_CT_OrbitalStrikes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeOrderCosts
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeOrderCosts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitOrdered1, true);
    TriggerEnable(libCOMU_gt_CT_OrderCostCopyUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeOrderCosts_Init () {
    libCOMU_gt_CT_InitializeOrderCosts = TriggerCreate("libCOMU_gt_CT_InitializeOrderCosts_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeOrderCosts, ("Mutator " + "OrderCosts" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownOrderCosts
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownOrderCosts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitOrdered1, false);
    TriggerEnable(libCOMU_gt_CT_OrderCostCopyUsed, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownOrderCosts_Init () {
    libCOMU_gt_CT_ShutdownOrderCosts = TriggerCreate("libCOMU_gt_CT_ShutdownOrderCosts_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownOrderCosts, ("Mutator " + "OrderCosts" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitOrdered1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitOrdered1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyOrderCosts(EventUnit(), EventUnitOrder());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitOrdered1_Init () {
    libCOMU_gt_CT_UnitOrdered1 = TriggerCreate("libCOMU_gt_CT_UnitOrdered1_Func");
    TriggerEnable(libCOMU_gt_CT_UnitOrdered1, false);
    TriggerAddEventUnitOrder(libCOMU_gt_CT_UnitOrdered1, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OrderCostCopyUsed
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_OrderCostCopyUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libCOMU_gv_cT_OrderCostImmuneUnits, EventPlayerEffectUsedUnitImpact());
    Wait(0.0625, c_timeGame);
    UnitGroupRemove(libCOMU_gv_cT_OrderCostImmuneUnits, EventPlayerEffectUsedUnitImpact());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_OrderCostCopyUsed_Init () {
    libCOMU_gt_CT_OrderCostCopyUsed = TriggerCreate("libCOMU_gt_CT_OrderCostCopyUsed_Func");
    TriggerEnable(libCOMU_gt_CT_OrderCostCopyUsed, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_CT_OrderCostCopyUsed, c_playerAny, "CopyOrders");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeOutbreak
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeOutbreak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(170.0, 140.0, 130.0, 120.0, 120.0, 120.0)))) {
        Wait(1.0, c_timeGame);
    }
    if ((libCOMI_gf_MutatorIsEnabled("InfestedTerranSpawner") == true)) {
        TriggerEnable(libCOMU_gt_CT_OutbreakSpawn, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeOutbreak_Init () {
    libCOMU_gt_CT_InitializeOutbreak = TriggerCreate("libCOMU_gt_CT_InitializeOutbreak_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeOutbreak, ("Mutator " + "Outbreak" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownOutbreak
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownOutbreak_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_OutbreakSpawn, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownOutbreak_Init () {
    libCOMU_gt_CT_ShutdownOutbreak = TriggerCreate("libCOMU_gt_CT_ShutdownOutbreak_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownOutbreak, ("Mutator " + "Outbreak" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OutbreakSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_OutbreakSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_spawnedUnits;
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_extraSpawn;
    int lv_spawnAttempt;

    // Automatic Variable Declarations
    const int autoAE7B60B6_ae = 100;
    const int autoAE7B60B6_ai = 1;
    int autoCBD94259_ae;
    int autoCBD94259_var;

    // Variable Initialization
    lv_spawnedUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnAttempt = 1;
    for ( ; ( (autoAE7B60B6_ai >= 0 && lv_spawnAttempt <= autoAE7B60B6_ae) || (autoAE7B60B6_ai < 0 && lv_spawnAttempt >= autoAE7B60B6_ae) ) ; lv_spawnAttempt += autoAE7B60B6_ai ) {
        lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_targetStructure = UnitGroupRandomUnit(UnitGroup(null, RandomInt(1, 2), RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if ((lv_spawningStructure != null) && (lv_targetStructure != null) && (PointPathingIsConnected(UnitGetPosition(lv_spawningStructure), UnitGetPosition(lv_targetStructure)) == true)) {
            break;
        }

        lv_spawningStructure = null;
        lv_targetStructure = null;
    }
    if (((lv_spawningStructure == null) || (lv_targetStructure == null))) {
        return true;
    }

    if ((GameGetMissionTime() >= 900.0)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedMedic", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
        UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    }

    lv_minSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 3);
    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 3, 4, 5, 6);
    if ((GameGetMissionTime() >= 800.0)) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 1, 2, 2, 2, 2);
        lv_minSpawn += lv_extraSpawn;
        lv_maxSpawn += lv_extraSpawn;
    }

    autoCBD94259_ae = RandomInt(lv_minSpawn, lv_maxSpawn);
    autoCBD94259_var = 1;
    for ( ; autoCBD94259_var <= autoCBD94259_ae; autoCBD94259_var += 1 ) {
        if ((GameGetMissionTime() <= 400.0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedCivilian", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        }
        else if (((GameGetMissionTime() <= 1200.0) || (libCOMI_gf_DifficultyValueFixed4(libCOMI_gf_DifficultyLevelForPlayerCoop(1), true, true, false, false, false, false) == true) || (libCOMI_gf_DifficultyValueFixed4(libCOMI_gf_DifficultyLevelForPlayerCoop(2), true, true, false, false, false, false) == true))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "StukovInfestedTerran", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        }
        else if (true) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, UnitGetOwner(lv_spawningStructure), PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            UnitGroupAddUnitGroup(lv_spawnedUnits, UnitLastCreatedGroup());
        }
        UnitGroupIssueOrder(lv_spawnedUnits, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_targetStructure)), c_orderQueueReplace);
        UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, lv_spawnedUnits);
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(lv_spawnedUnits);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_OutbreakSpawn_Init () {
    libCOMU_gt_CT_OutbreakSpawn = TriggerCreate("libCOMU_gt_CT_OutbreakSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_OutbreakSpawn, false);
    TriggerAddEventTimePeriodic(libCOMU_gt_CT_OutbreakSpawn, 25.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePermaCloak
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializePermaCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoE692269A_g;
    int autoE692269A_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation1, true);
    autoE692269A_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoE692269A_u = UnitGroupCount(autoE692269A_g, c_unitCountAll);
    for (;; autoE692269A_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoE692269A_g, autoE692269A_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_ApplyPermaCloak(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializePermaCloak_Init () {
    libCOMU_gt_CT_InitializePermaCloak = TriggerCreate("libCOMU_gt_CT_InitializePermaCloak_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializePermaCloak, ("Mutator " + "PermaCloak" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPermaCloak
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownPermaCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoF575554C_g;
    int autoF575554C_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation1, false);
    autoF575554C_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF575554C_u = UnitGroupCount(autoF575554C_g, c_unitCountAll);
    for (;; autoF575554C_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoF575554C_g, autoF575554C_u);
        if (lv_indexUnit == null) { break; }
        UnitBehaviorRemove(lv_indexUnit, "MutatorPermanentlyCloaked", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownPermaCloak_Init () {
    libCOMU_gt_CT_ShutdownPermaCloak = TriggerCreate("libCOMU_gt_CT_ShutdownPermaCloak_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownPermaCloak, ("Mutator " + "PermaCloak" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyPermaCloak(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation1_Init () {
    libCOMU_gt_CT_UnitCreation1 = TriggerCreate("libCOMU_gt_CT_UnitCreation1_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation1, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation1, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePlague
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializePlague_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_difficultyModifier;

    // Automatic Variable Declarations
    unitgroup auto19F8DA70_g;
    int auto19F8DA70_u;
    unit auto19F8DA70_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation7, true);
    TriggerEnable(libCOMU_gt_CT_UnitDeath10, true);
    lv_difficultyModifier = libCOMI_gf_MinimumDifficultyValueCoopInteger(20, 10, 5, 3, 0, 0);
    auto19F8DA70_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto19F8DA70_u = UnitGroupCount(auto19F8DA70_g, c_unitCountAll);
    for (;; auto19F8DA70_u -= 1) {
        auto19F8DA70_var = UnitGroupUnitFromEnd(auto19F8DA70_g, auto19F8DA70_u);
        if (auto19F8DA70_var == null) { break; }
        if ((RandomInt(1, lv_difficultyModifier) == 1)) {
            UnitBehaviorAdd(auto19F8DA70_var, "MutatorPlagueBehaviorVisual", auto19F8DA70_var, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializePlague_Init () {
    libCOMU_gt_CT_InitializePlague = TriggerCreate("libCOMU_gt_CT_InitializePlague_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializePlague, ("Mutator " + "Plague" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPlague
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownPlague_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4AA18D49_g;
    int auto4AA18D49_u;
    unit auto4AA18D49_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation7, false);
    TriggerEnable(libCOMU_gt_CT_UnitDeath10, false);
    TriggerEnable(libCOMU_gt_CT_PlagueDeath, false);
    auto4AA18D49_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4AA18D49_u = UnitGroupCount(auto4AA18D49_g, c_unitCountAll);
    for (;; auto4AA18D49_u -= 1) {
        auto4AA18D49_var = UnitGroupUnitFromEnd(auto4AA18D49_g, auto4AA18D49_u);
        if (auto4AA18D49_var == null) { break; }
        UnitBehaviorRemove(auto4AA18D49_var, "MutatorPlagueBehavior", c_unitBehaviorCountAll);
        UnitBehaviorRemove(auto4AA18D49_var, "MutatorPlagueBehaviorVisual", c_unitBehaviorCountAll);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownPlague_Init () {
    libCOMU_gt_CT_ShutdownPlague = TriggerCreate("libCOMU_gt_CT_ShutdownPlague_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownPlague, ("Mutator " + "Plague" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation7
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyPlague(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation7_Init () {
    libCOMU_gt_CT_UnitCreation7 = TriggerCreate("libCOMU_gt_CT_UnitCreation7_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation7, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation7, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 10
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath10_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyPlagueOnDeath(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath10_Init () {
    libCOMU_gt_CT_UnitDeath10 = TriggerCreate("libCOMU_gt_CT_UnitDeath10_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath10, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath10, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PlagueDeath
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_PlagueDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "DisruptorPhased"))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "AdeptPhaseShift"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyPlague(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_PlagueDeath_Init () {
    libCOMU_gt_CT_PlagueDeath = TriggerCreate("libCOMU_gt_CT_PlagueDeath_Func");
    TriggerEnable(libCOMU_gt_CT_PlagueDeath, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_CT_PlagueDeath, c_playerAny, "MutatorPlagueDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePolarity
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializePolarity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_polarityPlayers;
    unit lv_indexUnit;
    int lv_indexPlayer;
    int lv_polarityPlayer;
    int lv_humanPlayer;
    int lv_enemyPlayer;
    string lv_upgrade;
    int lv_mainPlayer;
    int lv_polarityIndex;

    // Automatic Variable Declarations
    playergroup auto8DBED91D_g;
    unitgroup autoDA41741F_g;
    int autoDA41741F_u;

    // Variable Initialization
    lv_polarityPlayers = libCOMI_gf_AffectedPlayers();
    lv_polarityIndex = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation6, true);
    TriggerEnable(libCOMU_gt_CT_UnitDamage9, true);
    auto8DBED91D_g = lv_polarityPlayers;
    lv_polarityPlayer = -1;
    while (true) {
        lv_polarityPlayer = PlayerGroupNextPlayer(auto8DBED91D_g, lv_polarityPlayer);
        if (lv_polarityPlayer < 0) { break; }
        if ((PlayerGroupCount(libCOMI_gf_GetEnemyHumanPlayers()) > 0)) {
            lv_indexPlayer = PlayerGroupPlayer(libCOMI_gf_GetEnemyHumanPlayers(), lv_polarityIndex);
            libCOMU_gv_cT_PolarityEnemies[lv_polarityPlayer] = lv_indexPlayer;
            PlayerSetAlliance(lv_polarityPlayer, c_allianceIdPassive, lv_indexPlayer, true);
        }
        else {
            lv_indexPlayer = PlayerGroupPlayer(libCOMI_gf_GetEnemyAIPlayers(), lv_polarityIndex);
            libCOMU_gv_cT_PolarityEnemies[lv_polarityPlayer] = lv_indexPlayer;
            PlayerSetAlliance(lv_polarityPlayer, c_allianceIdPassive, lv_indexPlayer, true);
        }
        if ((lv_polarityIndex == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_polarityPlayer, "MutatorIsPlayer1", 1);
            lv_polarityIndex = 2;
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(lv_polarityPlayer, "MutatorIsPlayer2", 1);
            lv_polarityIndex = 1;
        }
    }
    autoDA41741F_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoDA41741F_u = UnitGroupCount(autoDA41741F_g, c_unitCountAll);
    for (;; autoDA41741F_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoDA41741F_g, autoDA41741F_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_ApplyPolarity(lv_indexUnit);
    }
    if ((PlayerGroupCount(libCOMI_gf_AffectedPlayers()) == 1)) {
        TimerStart(libCOMU_gv_polarityTimer, 30.0, true, c_timeReal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializePolarity_Init () {
    libCOMU_gt_CT_InitializePolarity = TriggerCreate("libCOMU_gt_CT_InitializePolarity_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializePolarity, ("Mutator " + "Polarity" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPolarity
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownPolarity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup auto216C5FC7_g;
    int auto216C5FC7_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation6, false);
    TriggerEnable(libCOMU_gt_CT_UnitDamage9, false);
    auto216C5FC7_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto216C5FC7_u = UnitGroupCount(auto216C5FC7_g, c_unitCountAll);
    for (;; auto216C5FC7_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(auto216C5FC7_g, auto216C5FC7_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_RemovePolarity(lv_indexUnit);
    }
    if ((PlayerGroupCount(libCOMI_gf_AffectedPlayers()) == 1)) {
        libNtve_gf_StopTimer(libCOMU_gv_polarityTimer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownPolarity_Init () {
    libCOMU_gt_CT_ShutdownPolarity = TriggerCreate("libCOMU_gt_CT_ShutdownPolarity_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownPolarity, ("Mutator " + "Polarity" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation6
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyPolarity(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation6_Init () {
    libCOMU_gt_CT_UnitCreation6 = TriggerCreate("libCOMU_gt_CT_UnitCreation6_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation6, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation6, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 9
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage9_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_NullifyDamage(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage9_Init () {
    libCOMU_gt_CT_UnitDamage9 = TriggerCreate("libCOMU_gt_CT_UnitDamage9_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage9, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage9, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PolarityTimer
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_PolarityTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto276EAE34_g;
    int auto276EAE34_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto276EAE34_g = libCOMI_gf_AffectedPlayers();
    auto276EAE34_var = -1;
    while (true) {
        auto276EAE34_var = PlayerGroupNextPlayer(auto276EAE34_g, auto276EAE34_var);
        if (auto276EAE34_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto276EAE34_var, "MutatorIsPlayer1", c_techCountQueuedOrBetter) == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(auto276EAE34_var, "MutatorIsPlayer2", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto276EAE34_var, "MutatorIsPlayer1", 0);
        }
        else {
            libNtve_gf_SetUpgradeLevelForPlayer(auto276EAE34_var, "MutatorIsPlayer1", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto276EAE34_var, "MutatorIsPlayer2", 0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_PolarityTimer_Init () {
    libCOMU_gt_PolarityTimer = TriggerCreate("libCOMU_gt_PolarityTimer_Func");
    TriggerAddEventTimer(libCOMU_gt_PolarityTimer, libCOMU_gv_polarityTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePropagate
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializePropagate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogReferenceSet("Unit,MutatorPropagator,LifeStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(200.0, 300.0, 350.0, 450.0, 450.0, 450.0), c_fixedPrecisionAny));
    CatalogReferenceSet("Unit,MutatorPropagator,LifeMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(200.0, 300.0, 350.0, 450.0, 450.0, 450.0), c_fixedPrecisionAny));
    TriggerEnable(libCOMU_gt_CT_PropagateClone, true);
    TriggerEnable(libCOMU_gt_CT_UnitDeath14, true);
    libCOMU_gv_cT_PropagatorCleanupEnabled = true;
    TriggerExecute(libCOMU_gt_CT_PropagatorSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializePropagate_Init () {
    libCOMU_gt_CT_InitializePropagate = TriggerCreate("libCOMU_gt_CT_InitializePropagate_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializePropagate, ("Mutator " + "Propagate" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 14
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath14_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyPropagatorPingCleanup(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath14_Init () {
    libCOMU_gt_CT_UnitDeath14 = TriggerCreate("libCOMU_gt_CT_UnitDeath14_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath14, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath14, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PropagateClone
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_PropagateClone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_MutatorPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLife, UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitSource), c_unitPropLife, c_unitPropCurrent));
    AISetUnitSuicide(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    libCOMI_gf_CT_RegisterSpawnedUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    libCOMU_gf_CT_ApplyPropagatorPing(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_PropagateClone_Init () {
    libCOMU_gt_CT_PropagateClone = TriggerCreate("libCOMU_gt_CT_PropagateClone_Func");
    TriggerEnable(libCOMU_gt_CT_PropagateClone, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_CT_PropagateClone, c_playerAny, "MutatorPropagateModifyClone");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PropagatorSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_PropagatorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;
    int lv_spawnCount;
    int lv_indexSpawn;

    // Automatic Variable Declarations
    int autoF17E7024_ae;
    const int autoF17E7024_ai = 1;
    const int autoD964A6BB_ae = 100;
    const int autoD964A6BB_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() >= libCOMI_gf_MinimumDifficultyValueCoopReal(330.0, 280.0, 230.0, 190.0, 190.0, 190.0)))) {
        Wait(10.0, c_timeGame);
    }
    TimerStart(lv_spawnTimer, 5.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((TimerGetRemaining(lv_spawnTimer) > 0.0)) {
            continue;
        }

        if ((GameGetMissionTime() <= 700.0)) {
            lv_spawnCount = 1;
        }
        else if ((GameGetMissionTime() <= 1100.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 2);
        }
        else if ((GameGetMissionTime() <= 1400.0)) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 3, 4, 4, 4);
        }
        else if (true) {
            lv_spawnCount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 4, 5, 5, 5);
        }
        autoF17E7024_ae = lv_spawnCount;
        lv_indexSpawn = 1;
        for ( ; ( (autoF17E7024_ai >= 0 && lv_indexSpawn <= autoF17E7024_ae) || (autoF17E7024_ai < 0 && lv_indexSpawn >= autoF17E7024_ae) ) ; lv_indexSpawn += autoF17E7024_ai ) {
            lv_spawnAttempt = 1;
            for ( ; ( (autoD964A6BB_ai >= 0 && lv_spawnAttempt <= autoD964A6BB_ae) || (autoD964A6BB_ai < 0 && lv_spawnAttempt >= autoD964A6BB_ae) ) ; lv_spawnAttempt += autoD964A6BB_ai ) {
                lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_spawningStructure))) {
                    break;
                }
                else {
                    lv_spawningStructure = null;
                }
            }
            if ((lv_spawningStructure == null)) {
                continue;
            }

            UnitCreate(1, "MutatorPropagator", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lv_spawningStructure), libNtve_gf_RandomAngle());
            libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
            AISetUnitSuicide(UnitLastCreated(), true);
            libCOMU_gf_CT_ApplyPropagatorPing(UnitLastCreated());
        }
        SoundPlayForPlayer(SoundLink("UI_ZergWarning", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        if ((GameGetMissionTime() <= 500.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(140.0, 120.0, 100.0, 80.0, 80.0, 80.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 800.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 100.0, 75.0, 55.0, 55.0, 55.0), false, c_timeAI);
        }
        else if ((GameGetMissionTime() <= 1200.0)) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 90.0, 70.0, 50.0, 50.0, 50.0), false, c_timeAI);
        }
        else if (true) {
            TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(120.0, 90.0, 55.0, 40.0, 40.0, 40.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_PropagatorSpawn_Init () {
    libCOMU_gt_CT_PropagatorSpawn = TriggerCreate("libCOMU_gt_CT_PropagatorSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_PropagatorSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializePurifierBeam_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCOMI_gf_CC_CurrentMap() == "AC_ShakurasTemple")) {
        libCOMU_gv_cT_PurifierBeamBaseAvoidDistance = 18.0;
    }

    TriggerExecute(libCOMU_gt_CT_PurifierBeamController, true, false);
    if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 1, 1, 1, 1) == 1)) {
        Wait(600.0, c_timeAI);
        if ((libCOMI_gf_MutatorIsEnabled("PurifierBeam") == false)) {
            return true;
        }

        TriggerExecute(libCOMU_gt_CT_PurifierBeamController, true, false);
        if ((libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 0, 0, 1, 1, 1) == 1)) {
            Wait(600.0, c_timeAI);
            if ((libCOMI_gf_MutatorIsEnabled("PurifierBeam") == false)) {
                return true;
            }

            TriggerExecute(libCOMU_gt_CT_PurifierBeamController, true, false);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializePurifierBeam_Init () {
    libCOMU_gt_CT_InitializePurifierBeam = TriggerCreate("libCOMU_gt_CT_InitializePurifierBeam_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializePurifierBeam, ("Mutator " + "PurifierBeam" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPurifierBeam
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownPurifierBeam_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexPurifierBeam;

    // Automatic Variable Declarations
    unitgroup auto736C6DF1_g;
    int auto736C6DF1_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_InitializePurifierBeam);
    TriggerStop(libCOMU_gt_CT_PurifierBeamController);
    auto736C6DF1_g = UnitGroup("MutatorPurifierBeam", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto736C6DF1_u = UnitGroupCount(auto736C6DF1_g, c_unitCountAll);
    for (;; auto736C6DF1_u -= 1) {
        lv_indexPurifierBeam = UnitGroupUnitFromEnd(auto736C6DF1_g, auto736C6DF1_u);
        if (lv_indexPurifierBeam == null) { break; }
        PingDestroy(libARRA_gf_PingStoredForUnit(lv_indexPurifierBeam, 1));
        UnitKill(lv_indexPurifierBeam);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownPurifierBeam_Init () {
    libCOMU_gt_CT_ShutdownPurifierBeam = TriggerCreate("libCOMU_gt_CT_ShutdownPurifierBeam_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownPurifierBeam, ("Mutator " + "PurifierBeam" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_PurifierBeamController
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_PurifierBeamController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_purifierBeam;
    point lv_targetLocation;
    int lv_searchAttempts;
    unitgroup lv_targetCandidates;
    unit lv_currentTarget;
    int lv_beamPing;

    // Automatic Variable Declarations
    const int autoA208DE0C_ae = 100;
    const int autoA208DE0C_ai = 1;

    // Variable Initialization
    lv_targetCandidates = UnitGroupEmpty();
    lv_beamPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((lv_purifierBeam == null) || (UnitIsValid(lv_purifierBeam) == false))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorPurifierBeam", 0, libCOMI_gf_MutatorPlayer(), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_MutatorPlayer()));
            lv_purifierBeam = UnitLastCreated();
            if ((lv_beamPing == c_invalidPingId)) {
                libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_AffectedPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
                lv_beamPing = PingLastCreated();
                libARRA_gf_StorePingForUnit(lv_purifierBeam, 1, lv_beamPing);
                PingSetScale(lv_beamPing, 0.45);
            }

            PingSetUnit(lv_beamPing, lv_purifierBeam);
            PingSetTooltip(lv_beamPing, StringExternal("Param/Value/lib_COMU_43763DBA"));
            Wait(1.0, c_timeAI);
            continue;
        }

        if ((lv_currentTarget != null)) {
            UnitGroupRemove(libCOMU_gv_cT_PurifierBeamTargets, lv_currentTarget);
        }

        lv_currentTarget = null;
        lv_targetCandidates = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        UnitGroupRemoveUnitGroup(lv_targetCandidates, libCOMU_gv_cT_PurifierBeamTargets);
        while ((libCOMU_gf_CT_PurifierBeamTargetValid(lv_purifierBeam, lv_currentTarget) == false)) {
            if ((lv_currentTarget != null)) {
                UnitGroupRemove(lv_targetCandidates, lv_currentTarget);
                lv_currentTarget = null;
            }

            if (((lv_purifierBeam == null) || (UnitGroupCount(lv_targetCandidates, c_unitCountAlive) <= 0))) {
                break;
            }

            lv_currentTarget = UnitGroupClosestToPoint(lv_targetCandidates, UnitGetPosition(lv_purifierBeam));
        }
        if ((lv_currentTarget != null)) {
            UnitIssueOrder(lv_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_currentTarget)), c_orderQueueReplace);
            UnitGroupAdd(libCOMU_gv_cT_PurifierBeamTargets, lv_currentTarget);
        }
        else {
            if (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(UnitGetPosition(lv_purifierBeam), 80.0, libCOMI_gf_AffectedPlayers())) {
                lv_targetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_purifierBeam), 10.0, libARRA_gf_GetPlayerStartPosition(libCOMI_gf_AffectedPlayer(0)));
            }
            else {
                lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_purifierBeam), 10.0, libNtve_gf_RandomAngle());
            }
            lv_searchAttempts = 1;
            for ( ; ( (autoA208DE0C_ai >= 0 && lv_searchAttempts <= autoA208DE0C_ae) || (autoA208DE0C_ai < 0 && lv_searchAttempts >= autoA208DE0C_ae) ) ; lv_searchAttempts += autoA208DE0C_ai ) {
                if ((RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_targetLocation) == false)) {
                    UnitIssueOrder(lv_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLocation), c_orderQueueReplace);
                    break;
                }
                else {
                    lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_purifierBeam), 10.0, libNtve_gf_RandomAngle());
                }
            }
        }
        Wait(RandomFixed(4.0, 6.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_PurifierBeamController_Init () {
    libCOMU_gt_CT_PurifierBeamController = TriggerCreate("libCOMU_gt_CT_PurifierBeamController_Func");
    TriggerEnable(libCOMU_gt_CT_PurifierBeamController, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializePhotonOverload
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializePhotonOverload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage4, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializePhotonOverload_Init () {
    libCOMU_gt_CT_InitializePhotonOverload = TriggerCreate("libCOMU_gt_CT_InitializePhotonOverload_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializePhotonOverload, ("Mutator " + "PhotonOverload" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownPhotonOverload
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownPhotonOverload_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage4, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownPhotonOverload_Init () {
    libCOMU_gt_CT_ShutdownPhotonOverload = TriggerCreate("libCOMU_gt_CT_ShutdownPhotonOverload_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownPhotonOverload, ("Mutator " + "PhotonOverload" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 4
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyPhotonOverload(EventUnit(), EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage4_Init () {
    libCOMU_gt_CT_UnitDamage4 = TriggerCreate("libCOMU_gt_CT_UnitDamage4_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage4, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage4, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeRepulsive Field
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeRepulsiveField_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vUpgrade;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDamageFix1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeRepulsiveField_Init () {
    libCOMU_gt_MM_InitializeRepulsiveField = TriggerCreate("libCOMU_gt_MM_InitializeRepulsiveField_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeRepulsiveField, ("Mutator " + "RepulsiveField" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownRepulsiveField
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownRepulsiveField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownRepulsiveField_Init () {
    libCOMU_gt_MM_ShutdownRepulsiveField = TriggerCreate("libCOMU_gt_MM_ShutdownRepulsiveField_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownRepulsiveField, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownRepulsiveField, ("Mutator " + "RepulsiveField" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDamage Fix 1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitDamageFix1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyRepulsiveField(EventUnitDamageSourceUnit(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitDamageFix1_Init () {
    libCOMU_gt_MM_UnitDamageFix1 = TriggerCreate("libCOMU_gt_MM_UnitDamageFix1_Func");
    TriggerEnable(libCOMU_gt_MM_UnitDamageFix1, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_MM_UnitDamageFix1, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeRipFieldGenerators
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeRipFieldGenerators_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vSpawnCount;
    point lv_vPoint;
    int lv_vMaxSpawnAttempts;
    int lv_vSpawnAttempt;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vMaxSpawnAttempts = 1200;

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "LifeMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(400.0, 500.0, 750.0, 1000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "LifeStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(400.0, 500.0, 750.0, 1000.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "ShieldsStart", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(750.0, 1000.0, 1250.0, 1500.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "RipFieldGenerator2", "ShieldsMax", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(750.0, 1000.0, 1250.0, 1500.0, 0.0, 0.0), 0));
    Wait(0.5, c_timeGame);
    lv_vAmount = 14;
    while ((lv_vSpawnCount < lv_vAmount) && (lv_vSpawnAttempt < lv_vMaxSpawnAttempts)) {
        lv_vPoint = RegionRandomPoint(RegionEntireMap());
        if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, 60.0, libCOMI_gf_AffectedPlayers()) == true) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint) && (PathingType(lv_vPoint) == c_pathingGround) && (UnitCountAlliance(libCOMI_gf_MutatorPlayer(), c_unitAllianceEnemy, RegionCircle(lv_vPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) <= 1) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 1.5), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitGroupCount(UnitGroup("RipFieldGenerator2", c_playerAny, RegionCircle(lv_vPoint, 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_vSpawnCount += 1;
            UnitCreate(1, "RipFieldGenerator2", 0, libCOMI_gf_MutatorPlayer(), lv_vPoint, 100.0);
            UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
            UnitSetTeamColorIndex(UnitLastCreated(), 10);
            VisRevealArea(libCOMI_gf_AffectedPlayer(0), RegionCircle(UnitGetPosition(UnitLastCreated()), 1.0), 0.5, false);
        }
        else {
            lv_vSpawnAttempt += 1;
        }
    }
    TriggerEnable(libCOMU_gt_MM_RipFieldGeneratorDamage, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeRipFieldGenerators_Init () {
    libCOMU_gt_MM_InitializeRipFieldGenerators = TriggerCreate("libCOMU_gt_MM_InitializeRipFieldGenerators_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeRipFieldGenerators, ("Mutator " + "RipFieldGenerators" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownRipFieldGenerators
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownRipFieldGenerators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto60CFBAFA_g;
    int auto60CFBAFA_u;
    unit auto60CFBAFA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_RipFieldGeneratorDamage, false);
    auto60CFBAFA_g = UnitGroup("RipFieldGenerator2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto60CFBAFA_u = UnitGroupCount(auto60CFBAFA_g, c_unitCountAll);
    for (;; auto60CFBAFA_u -= 1) {
        auto60CFBAFA_var = UnitGroupUnitFromEnd(auto60CFBAFA_g, auto60CFBAFA_u);
        if (auto60CFBAFA_var == null) { break; }
        UnitKill(auto60CFBAFA_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownRipFieldGenerators_Init () {
    libCOMU_gt_MM_ShutdownRipFieldGenerators = TriggerCreate("libCOMU_gt_MM_ShutdownRipFieldGenerators_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownRipFieldGenerators, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownRipFieldGenerators, ("Mutator " + "RipFieldGenerators" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_RipFieldGeneratorDamage
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_RipFieldGeneratorDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_vRegion;

    // Automatic Variable Declarations
    unitgroup autoA781A7D7_g;
    int autoA781A7D7_u;
    unit autoA781A7D7_var;
    unitgroup auto9C75CAE8_g;
    int auto9C75CAE8_u;
    unit auto9C75CAE8_var;

    // Variable Initialization
    lv_vRegion = RegionCircle(Point(1.0, 1.0), 0.0);

    // Conditions
    if (testConds) {
        if (!((libCOMI_gf_MutatorIsEnabled("RipFieldGenerators") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA781A7D7_g = UnitGroup("RipFieldGenerator2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA781A7D7_u = UnitGroupCount(autoA781A7D7_g, c_unitCountAll);
    for (;; autoA781A7D7_u -= 1) {
        autoA781A7D7_var = UnitGroupUnitFromEnd(autoA781A7D7_g, autoA781A7D7_u);
        if (autoA781A7D7_var == null) { break; }
        RegionAddRegion(lv_vRegion, RegionCircle(UnitGetPosition(autoA781A7D7_var), 30.0));
    }
    auto9C75CAE8_g = UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, lv_vRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9C75CAE8_u = UnitGroupCount(auto9C75CAE8_g, c_unitCountAll);
    for (;; auto9C75CAE8_u -= 1) {
        auto9C75CAE8_var = UnitGroupUnitFromEnd(auto9C75CAE8_g, auto9C75CAE8_u);
        if (auto9C75CAE8_var == null) { break; }
        UnitBehaviorAddPlayer(auto9C75CAE8_var, "RipFieldBurning", libCOMI_gf_MutatorPlayer(), 1);
        libNtve_gf_AttachActorToUnit(auto9C75CAE8_var, "XelNagaShieldDomeImpact", "Ref_Center");
    }
    if ((UnitGroupCount(UnitGroup("RipFieldGenerator2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_RipFieldGeneratorDamage_Init () {
    libCOMU_gt_MM_RipFieldGeneratorDamage = TriggerCreate("libCOMU_gt_MM_RipFieldGeneratorDamage_Func");
    TriggerEnable(libCOMU_gt_MM_RipFieldGeneratorDamage, false);
    TriggerAddEventTimePeriodic(libCOMU_gt_MM_RipFieldGeneratorDamage, 2.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownReducedVision
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownReducedVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto84C95479_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto84C95479_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto84C95479_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(lv_indexPlayer, "MutatorShortSighted", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownReducedVision_Init () {
    libCOMU_gt_CT_ShutdownReducedVision = TriggerCreate("libCOMU_gt_CT_ShutdownReducedVision_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownReducedVision, ("Mutator " + "ReducedVision" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeRedEnvelopes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeRedEnvelopes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    unit lv_indexResource;
    unitgroup lv_resourceNodes;
    int lv_resourceAmount;

    // Automatic Variable Declarations
    playergroup auto40EED1B3_g;
    string autoDC620749_val;

    // Variable Initialization
    lv_resourceNodes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_RedEnvelopeSpawns, true, false);
    Wait(0.0625, c_timeGame);
    auto40EED1B3_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto40EED1B3_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        autoDC620749_val = PlayerRace(lv_indexPlayer);
        if (autoDC620749_val == "Terr") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerranRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (autoDC620749_val == "Prot") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ProtossRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (autoDC620749_val == "Zerg") {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_ZergRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else {
            SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_TerranRedEnvelope", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Music_RedEnvelope_Intro", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeRedEnvelopes_Init () {
    libCOMU_gt_CT_InitializeRedEnvelopes = TriggerCreate("libCOMU_gt_CT_InitializeRedEnvelopes_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeRedEnvelopes, ("Mutator " + "RedEnvelopes" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownRedEnvelopes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownRedEnvelopes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_RedEnvelopeSpawns);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownRedEnvelopes_Init () {
    libCOMU_gt_CT_ShutdownRedEnvelopes = TriggerCreate("libCOMU_gt_CT_ShutdownRedEnvelopes_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownRedEnvelopes, ("Mutator " + "RedEnvelopes" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_RedEnvelopeSpawns
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_RedEnvelopeSpawns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyCount;
    bool lv_spawnIsOdd;
    int lv_mineralCount;
    int lv_vespeneCount;

    // Automatic Variable Declarations
    playergroup autoAD7CBA9E_g;
    int autoAD7CBA9E_var;
    const int auto18426732_ae = 100;
    const int auto18426732_ai = 1;
    const int autoFF54BB38_ae = 100;
    const int autoFF54BB38_ai = 1;
    const int autoD8402E69_ae = 100;
    const int autoD8402E69_ai = 1;

    // Variable Initialization
    lv_spawnRegion = RegionEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((GameGetMissionTime() > 180.0) || (lv_spawnIsOdd == true))) {
            lv_spawnRegion = RegionEntireMap();
        }
        else {
            autoAD7CBA9E_g = libCOMI_gf_AffectedPlayers();
            autoAD7CBA9E_var = -1;
            while (true) {
                autoAD7CBA9E_var = PlayerGroupNextPlayer(autoAD7CBA9E_g, autoAD7CBA9E_var);
                if (autoAD7CBA9E_var < 0) { break; }
                RegionAddRegion(lv_spawnRegion, RegionCircle(libARRA_gf_GetPlayerStartPosition(autoAD7CBA9E_var), 30.0));
            }
        }
        lv_safetyCount = 1;
        for ( ; ( (auto18426732_ai >= 0 && lv_safetyCount <= auto18426732_ae) || (auto18426732_ai < 0 && lv_safetyCount >= auto18426732_ae) ) ; lv_safetyCount += auto18426732_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if ((libCOMI_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                continue;
            }

            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorEnvelopeMineralPickup", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
            lv_mineralCount += 50;
            break;
        }
        if ((lv_spawnIsOdd == true)) {
            lv_safetyCount = 1;
            for ( ; ( (autoFF54BB38_ai >= 0 && lv_safetyCount <= autoFF54BB38_ae) || (autoFF54BB38_ai < 0 && lv_safetyCount >= autoFF54BB38_ae) ) ; lv_safetyCount += autoFF54BB38_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCOMI_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorEnvelopeMineralPickup", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
                lv_mineralCount += 50;
                break;
            }
            lv_safetyCount = 1;
            for ( ; ( (autoD8402E69_ai >= 0 && lv_safetyCount <= autoD8402E69_ae) || (autoD8402E69_ai < 0 && lv_safetyCount >= autoD8402E69_ae) ) ; lv_safetyCount += autoD8402E69_ai ) {
                lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
                if ((libCOMI_gf_CT_ResourceSpawnLocationValid(lv_spawnLocation) == false)) {
                    continue;
                }

                libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorEnvelopeGasPickup", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, lv_spawnLocation);
                lv_vespeneCount += 50;
                break;
            }
        }

        lv_spawnIsOdd = !(lv_spawnIsOdd);
        if ((GameGetMissionTime() > 180.0)) {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(4.2, 5.0, 5.2, 5.4, 100.0, 100.0), c_timeGame);
        }
        else {
            Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(5.0, 5.0, 6.0, 7.0, 100.0, 100.0), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_RedEnvelopeSpawns_Init () {
    libCOMU_gt_CT_RedEnvelopeSpawns = TriggerCreate("libCOMU_gt_CT_RedEnvelopeSpawns_Func");
    TriggerEnable(libCOMU_gt_CT_RedEnvelopeSpawns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeReanimators
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeReanimators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse, true);
    TriggerEnable(libCOMU_gt_CT_ReanimateUsed, true);
    TriggerExecute(libCOMU_gt_CT_ReanimatorSpawn, true, false);
    TriggerExecute(libCOMU_gt_CT_ReanimatorLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeReanimators_Init () {
    libCOMU_gt_CT_InitializeReanimators = TriggerCreate("libCOMU_gt_CT_InitializeReanimators_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeReanimators, ("Mutator " + "Reanimators" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownReanimators
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownReanimators_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse, false);
    TriggerStop(libCOMU_gt_CT_ReanimatorSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownReanimators_Init () {
    libCOMU_gt_CT_ShutdownReanimators = TriggerCreate("libCOMU_gt_CT_ShutdownReanimators_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownReanimators, ("Mutator " + "Reanimators" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_DeathTrigger_ReanimatorCorpse
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_type;
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_type = UnitGetType(lv_unit);
    lv_owner = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(lv_type))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!(libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((!(((EventUnitDamageDeathCheck(c_deathTypeTimeout) == true) || (lv_owner == c_playerAny) || (PlayerGroupHasPlayer(libCOMI_gf_GetEnemyPlayers(), lv_owner) == false) || (UnitFilterMatch(lv_unit, libCOMI_gf_AffectedPlayer(0), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == false) || (UnitFilterMatch(lv_unit, libCOMI_gf_MutatorPlayer(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy), 0)) == true) || (UnitGetType(lv_unit) == "MutatorVoidReanimator") || (libCOMI_gf_CT_MutatorUnitIsMapObjective(lv_unit) == true)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_CorpseCreate(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse_Init () {
    libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse = TriggerCreate("libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse_Func");
    TriggerEnable(libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ReanimatorSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ReanimatorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    int lv_spawnAttempt;
    timer lv_spawnTimer;
    unit lv_indexReanimator;

    // Automatic Variable Declarations
    unitgroup auto42073A8F_g;
    int auto42073A8F_u;
    const int autoFE8854C4_ae = 100;
    const int autoFE8854C4_ai = 1;

    // Variable Initialization
    lv_spawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_spawnTimer, 10.0, false, c_timeAI);
    while (true) {
        Wait(10.0, c_timeAI);
        if ((libCOMU_gv_cT_CorpseCount == 0)) {
            continue;
        }

        auto42073A8F_g = libCOMU_gv_cT_Reanimators;
        auto42073A8F_u = UnitGroupCount(auto42073A8F_g, c_unitCountAll);
        for (;; auto42073A8F_u -= 1) {
            lv_indexReanimator = UnitGroupUnitFromEnd(auto42073A8F_g, auto42073A8F_u);
            if (lv_indexReanimator == null) { break; }
            if ((UnitIsAlive(lv_indexReanimator) == false)) {
                UnitGroupRemove(libCOMU_gv_cT_Reanimators, lv_indexReanimator);
            }

        }
        if (((UnitGroupCount(libCOMU_gv_cT_Reanimators, c_unitCountAlive) >= libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 4, 4, 4)) || (TimerGetRemaining(lv_spawnTimer) > 0.0))) {
            continue;
        }

        lv_spawnAttempt = 1;
        for ( ; ( (autoFE8854C4_ai >= 0 && lv_spawnAttempt <= autoFE8854C4_ae) || (autoFE8854C4_ai < 0 && lv_spawnAttempt >= autoFE8854C4_ae) ) ; lv_spawnAttempt += autoFE8854C4_ai ) {
            lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_spawningStructure))) {
                break;
            }
            else {
                lv_spawningStructure = null;
            }
        }
        if ((lv_spawningStructure == null)) {
            continue;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorVoidReanimator", 0, libCOMI_gf_MutatorPlayer(), UnitGetPosition(lv_spawningStructure));
        libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "ProtossGenericWarpInOut", UnitLastCreated(), 1);
        Wait(2.0, c_timeAI);
        UnitBehaviorRemove(UnitLastCreated(), "ProtossGenericWarpInOut", 1);
        UnitGroupAdd(libCOMU_gv_cT_Reanimators, UnitLastCreated());
        TimerStart(lv_spawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(80.0, 70.0, 60.0, 55.0, 55.0, 55.0), false, c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ReanimatorSpawn_Init () {
    libCOMU_gt_CT_ReanimatorSpawn = TriggerCreate("libCOMU_gt_CT_ReanimatorSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_ReanimatorSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ReanimatorLogic
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ReanimatorLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reanimator;
    int lv_targetCorpse;
    fixed lv_targetSupply;

    // Automatic Variable Declarations
    unitgroup autoC9CA687E_g;
    int autoC9CA687E_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeAI);
        autoC9CA687E_g = libCOMU_gv_cT_Reanimators;
        autoC9CA687E_u = UnitGroupCount(autoC9CA687E_g, c_unitCountAll);
        for (;; autoC9CA687E_u -= 1) {
            lv_reanimator = UnitGroupUnitFromEnd(autoC9CA687E_g, autoC9CA687E_u);
            if (lv_reanimator == null) { break; }
            if ((libCOMU_gf_CT_CorpseTargetOfReanimator(lv_reanimator) == 0)) {
                if ((libCOMU_gv_cT_CorpseCount == 0)) {
                    continue;
                }

                lv_targetCorpse = libCOMU_gf_CT_CorpseNearestToLocation(UnitGetPosition(lv_reanimator), 550.0);
                if ((lv_targetCorpse == 0)) {
                    continue;
                }

                libCOMU_gf_CT_CorpseSetAsTarget(lv_reanimator, lv_targetCorpse);
                lv_targetSupply = UnitTypeGetProperty(libCOMU_gf_CT_CorpseUnitType(lv_targetCorpse), c_unitPropSuppliesUsed);
                if ((lv_targetSupply >= 6.0)) {
                    UnitIssueOrder(lv_reanimator, OrderTargetingPoint(AbilityCommand("MutatorReanimateSlow", 0), libCOMU_gv_cT_CorpseLocations[lv_targetCorpse]), c_orderQueueReplace);
                }
                else if ((lv_targetSupply > 2.0)) {
                    UnitIssueOrder(lv_reanimator, OrderTargetingPoint(AbilityCommand("MutatorReanimateStandard", 0), libCOMU_gv_cT_CorpseLocations[lv_targetCorpse]), c_orderQueueReplace);
                }
                else if (true) {
                    UnitIssueOrder(lv_reanimator, OrderTargetingPoint(AbilityCommand("MutatorReanimateFast", 0), libCOMU_gv_cT_CorpseLocations[lv_targetCorpse]), c_orderQueueReplace);
                }
                Wait(RandomFixed(0.1, 0.5), c_timeGame);
            }
            else {
                if ((UnitOrderCount(lv_reanimator) == 0)) {
                    Wait(0.0625, c_timeGame);
                    if ((UnitOrderCount(lv_reanimator) == 0)) {
                        libCOMU_gf_CT_CorpseSetAsTarget(lv_reanimator, 0);
                    }

                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ReanimatorLogic_Init () {
    libCOMU_gt_CT_ReanimatorLogic = TriggerCreate("libCOMU_gt_CT_ReanimatorLogic_Func");
    TriggerEnable(libCOMU_gt_CT_ReanimatorLogic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ReanimateUsed
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ReanimateUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_corpseIndex;
    string lv_reviveType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_corpseIndex = libCOMU_gf_CT_CorpseTargetOfReanimator(EventUnit());
    if ((lv_corpseIndex == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_A26C56DC"), true);
        return true;
    }

    lv_reviveType = libCOMU_gf_CT_CorpseUnitType(lv_corpseIndex);
    if ((lv_reviveType == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_E4D731B5"), true);
        return true;
    }

    UnitCreate(1, lv_reviveType, 0, libCOMI_gf_MutatorPlayer(), libCOMU_gv_cT_CorpseLocations[lv_corpseIndex], libNtve_gf_RandomAngle());
    UnitCreateEffectUnit(UnitLastCreated(), "ReanimateCleanupTargetBehaviorsSet", UnitLastCreated());
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "Reanimator_Resurrect_Coop", null, null, null);
    UnitGroupAdd(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreated());
    libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
    if ((lv_reviveType == "MutatorVoidReanimator")) {
        UnitGroupAdd(libCOMU_gv_cT_Reanimators, UnitLastCreated());
    }
    else {
        AISetUnitSuicide(UnitLastCreated(), true);
    }
    libCOMU_gf_CT_CorpseSetAsTarget(EventUnit(), 0);
    libCOMU_gf_CT_CorpseRemove(lv_corpseIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ReanimateUsed_Init () {
    libCOMU_gt_CT_ReanimateUsed = TriggerCreate("libCOMU_gt_CT_ReanimateUsed_Func");
    TriggerEnable(libCOMU_gt_CT_ReanimateUsed, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_ReanimateUsed, null, AbilityCommand("MutatorReanimateSlow", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_ReanimateUsed, null, AbilityCommand("MutatorReanimateStandard", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_ReanimateUsed, null, AbilityCommand("MutatorReanimateFast", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSideStep
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeSideStep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage3, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeSideStep_Init () {
    libCOMU_gt_CT_InitializeSideStep = TriggerCreate("libCOMU_gt_CT_InitializeSideStep_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeSideStep, ("Mutator " + "SideStep" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSideStep
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownSideStep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage3, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownSideStep_Init () {
    libCOMU_gt_CT_ShutdownSideStep = TriggerCreate("libCOMU_gt_CT_ShutdownSideStep_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownSideStep, ("Mutator " + "SideStep" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplySideStep(EventUnit(), EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage3_Init () {
    libCOMU_gt_CT_UnitDamage3 = TriggerCreate("libCOMU_gt_CT_UnitDamage3_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage3, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage3, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSharedSupply
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeSharedSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_SharedSupplyUpdate, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeSharedSupply_Init () {
    libCOMU_gt_CT_InitializeSharedSupply = TriggerCreate("libCOMU_gt_CT_InitializeSharedSupply_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeSharedSupply, ("Mutator " + "SharedSupply" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSharedSupply
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownSharedSupply_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_SharedSupplyUpdate);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownSharedSupply_Init () {
    libCOMU_gt_CT_ShutdownSharedSupply = TriggerCreate("libCOMU_gt_CT_ShutdownSharedSupply_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownSharedSupply, ("Mutator " + "SharedSupply" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_SharedSupplyUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_SharedSupplyUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_supplyDelta;
    fixed lv_combinedSupply;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto48E7AF6B_g;
    playergroup autoAA8BF894_g;
    playergroup auto494FC1BC_g;
    playergroup auto2B81FC8C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_combinedSupply = 0.0;
        auto48E7AF6B_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto48E7AF6B_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_combinedSupply += libCOMU_gv_cT_SharedSupplyIndividual[lv_indexPlayer];
        }
        autoAA8BF894_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(autoAA8BF894_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_supplyDelta = (PlayerGetPropertyFixed(lv_indexPlayer, c_playerPropSuppliesUsed) - lv_combinedSupply);
            libCOMU_gv_cT_SharedSupplyIndividual[lv_indexPlayer] += lv_supplyDelta;
        }
        lv_combinedSupply = 0.0;
        auto494FC1BC_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto494FC1BC_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            lv_combinedSupply += libCOMU_gv_cT_SharedSupplyIndividual[lv_indexPlayer];
        }
        auto2B81FC8C_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto2B81FC8C_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            PlayerModifyPropertyFixed(lv_indexPlayer, c_playerPropSuppliesUsed, c_playerPropOperSetTo, lv_combinedSupply);
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_SharedSupplyUpdate_Init () {
    libCOMU_gt_CT_SharedSupplyUpdate = TriggerCreate("libCOMU_gt_CT_SharedSupplyUpdate_Func");
    TriggerEnable(libCOMU_gt_CT_SharedSupplyUpdate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeShortSighted
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeShortSighted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    fixed lv_sightRange;
    int lv_catalogIndex;
    fixed lv_sightFraction;

    // Automatic Variable Declarations
    playergroup autoC4C31C27_g;
    int auto2CAE58D1_ae;
    const int auto2CAE58D1_ai = 1;
    playergroup auto30DAF9A8_g;

    // Variable Initialization
    lv_stringUnitID = "";
    lv_sightFraction = 0.4;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC4C31C27_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC4C31C27_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUpgradeAddLevel(lv_indexPlayer, "MutatorShortSighted", 1);
    }
    auto2CAE58D1_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (auto2CAE58D1_ai >= 0 && lv_catalogIndex <= auto2CAE58D1_ae) || (auto2CAE58D1_ai < 0 && lv_catalogIndex >= auto2CAE58D1_ae) ) ; lv_catalogIndex += auto2CAE58D1_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        lv_sightRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lv_stringUnitID, "Sight", 0)) * lv_sightFraction);
        if ((lv_sightRange < 1.0)) {
            lv_sightRange = 1.0;
        }

        auto30DAF9A8_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto30DAF9A8_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lv_indexPlayer, FixedToString(lv_sightRange, 2));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeShortSighted_Init () {
    libCOMU_gt_CT_InitializeShortSighted = TriggerCreate("libCOMU_gt_CT_InitializeShortSighted_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeShortSighted, ("Mutator " + "ShortSighted" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownShortSighted
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownShortSighted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownShortSighted_Init () {
    libCOMU_gt_CT_ShutdownShortSighted = TriggerCreate("libCOMU_gt_CT_ShutdownShortSighted_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownShortSighted, ("Mutator " + "ShortSighted" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeShapeshifters
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeShapeshifters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath7, true);
    TriggerEnable(libCOMU_gt_MM_UnitRemovedFix7, true);
    TriggerExecute(libCOMI_gt_MM_PX_InitPlayerX, true, false);
    TriggerExecute(libCOMU_gt_MM_Shapeshifter_Spawn, true, false);
    TriggerEnable(libCOMU_gt_MM_ShapeshiftersInWaves, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeShapeshifters_Init () {
    libCOMU_gt_MM_InitializeShapeshifters = TriggerCreate("libCOMU_gt_MM_InitializeShapeshifters_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeShapeshifters, ("Mutator " + "Shapeshifters" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownShapeshifters
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownShapeshifters_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBC812C64_g;
    int autoBC812C64_u;
    unit autoBC812C64_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath7, false);
    TriggerEnable(libCOMU_gt_MM_UnitRemovedFix7, false);
    autoBC812C64_g = UnitGroup("Shapeshifter", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC812C64_u = UnitGroupCount(autoBC812C64_g, c_unitCountAll);
    for (;; autoBC812C64_u -= 1) {
        autoBC812C64_var = UnitGroupUnitFromEnd(autoBC812C64_g, autoBC812C64_u);
        if (autoBC812C64_var == null) { break; }
        UnitKill(autoBC812C64_var);
    }
    TriggerStop(libCOMU_gt_MM_Shapeshifter_Spawn);
    TriggerEnable(libCOMU_gt_MM_ShapeshiftersInWaves, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownShapeshifters_Init () {
    libCOMU_gt_MM_ShutdownShapeshifters = TriggerCreate("libCOMU_gt_MM_ShutdownShapeshifters_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownShapeshifters, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownShapeshifters, ("Mutator " + "Shapeshifters" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 7
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitDeath7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ShapeshiftedUnit_Dies(EventUnit());
    libCOMU_gf_MM_ApplyShapeshifterPingCleanup(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitDeath7_Init () {
    libCOMU_gt_MM_UnitDeath7 = TriggerCreate("libCOMU_gt_MM_UnitDeath7_Func");
    TriggerEnable(libCOMU_gt_MM_UnitDeath7, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_UnitDeath7, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRemoved Fix 7
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitRemovedFix7_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplyShapeshifterPingCleanup(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitRemovedFix7_Init () {
    libCOMU_gt_MM_UnitRemovedFix7 = TriggerCreate("libCOMU_gt_MM_UnitRemovedFix7_Func");
    TriggerEnable(libCOMU_gt_MM_UnitRemovedFix7, false);
    TriggerAddEventUnitRemoved(libCOMU_gt_MM_UnitRemovedFix7, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Shapeshifter_Spawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_Shapeshifter_Spawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_vSpawnTimer;
    int lv_vAmount;
    int lv_vStationaryPercentage;

    // Automatic Variable Declarations
    string autoF8683667_val;
    int autoF70424AF_ae;
    int autoF70424AF_var;

    // Variable Initialization
    lv_vSpawnTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    autoF8683667_val = libCOMI_gf_CC_CurrentMap();
    {
        lv_vStationaryPercentage = 100;
    }
    Wait(230.0, c_timeGame);
    while (true) {
        if ((TimerGetRemaining(lv_vSpawnTimer) > 0.0)) {
            Wait(1.0, c_timeGame);
            continue;
        }
        else {
            if ((GameGetMissionTime() <= 420.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 1, 1, 2, 2);
            }
            else if ((GameGetMissionTime() <= 600.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 3, 4);
            }
            else if ((GameGetMissionTime() <= 900.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 5, 6);
            }
            else if ((GameGetMissionTime() <= 1200.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 4, 5, 6, 7);
            }
            else if ((GameGetMissionTime() <= 1500.0)) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 5, 6, 7, 8);
            }
            else if (true) {
                lv_vAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(3, 4, 5, 7, 8, 9);
            }
            SoundPlayForPlayer(SoundLink("Changeling_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            autoF70424AF_ae = lv_vAmount;
            autoF70424AF_var = 1;
            for ( ; autoF70424AF_var <= autoF70424AF_ae; autoF70424AF_var += 1 ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Shapeshifter", 0, libCOMI_gf_MutatorPlayer(), libCOMI_gf_MM_PositionEnemyStructureWithPathing());
                libCOMI_gf_DropPodWarpInUnitGroup(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), UnitGetPosition(UnitLastCreated()));
                libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
                if ((RandomInt(1, 100) <= lv_vStationaryPercentage)) {
                    libCOMU_gf_MM_ShapeshifterSwapModel(UnitLastCreated());
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create SymbioteCarapaceGlaze");
                    libCOMI_gf_MM_UnitScaleController(UnitLastCreated(), 0.5);
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetWalkAnimMoveSpeed 1.5");
                }
                else {
                    AISetUnitSuicide(UnitLastCreated(), true);
                    libCOMU_gf_MM_ApplyShapeshifterPing(UnitLastCreated());
                }
            }
            TimerStart(lv_vSpawnTimer, libCOMI_gf_MinimumDifficultyValueCoopReal(130.0, 120.0, 110.0, 100.0, 90.0, 80.0), false, c_timeAI);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_Shapeshifter_Spawn_Init () {
    libCOMU_gt_MM_Shapeshifter_Spawn = TriggerCreate("libCOMU_gt_MM_Shapeshifter_Spawn_Func");
    TriggerEnable(libCOMU_gt_MM_Shapeshifter_Spawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShapeshiftersInWaves
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShapeshiftersInWaves_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSpawnAmount;
    unitgroup lv_vUG;
    int lv_vPlayer;

    // Automatic Variable Declarations
    string autoFE8CC8CC_val;
    int auto673EAD8F_n;
    int auto673EAD8F_i;

    // Variable Initialization
    lv_vUG = AIWaveGetUnits(EventPlayerWave());
    lv_vPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((TimerGetRemaining(libCOMU_gv_mM_ShapeshifterTimer) < 1.0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMU_gv_mM_WaveUnitsWithShapeshifters, UnitGroupRandomUnit(AIWaveGetUnits(EventPlayerWave()), c_unitCountAlive)) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), libCOMI_gf_AffectedPlayer(0), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFE8CC8CC_val = libCOMI_gf_CC_CurrentMap();
    if (autoFE8CC8CC_val == "AC_ShakurasTemple") {
        TimerStart(libCOMU_gv_mM_ShapeshifterTimer, 1.0, false, c_timeGame);
    }
    else if (autoFE8CC8CC_val == "AC_TarsonisTrain") {
        TimerStart(libCOMU_gv_mM_ShapeshifterTimer, 1.0, false, c_timeGame);
    }
    else if (autoFE8CC8CC_val == "AC_KaldirShuttle") {
        TimerStart(libCOMU_gv_mM_ShapeshifterTimer, 1.0, false, c_timeGame);
    }
    else {
        TimerStart(libCOMU_gv_mM_ShapeshifterTimer, 60.0, false, c_timeGame);
    }
    UnitGroupAddUnitGroup(libCOMU_gv_mM_WaveUnitsWithShapeshifters, AIWaveGetUnits(EventPlayerWave()));
    if ((GameGetMissionTime() < 600.0)) {
        lv_vSpawnAmount = 1;
    }
    else if ((GameGetMissionTime() < 900.0)) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 0, 0);
    }
    else if ((GameGetMissionTime() < 1200.0)) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 2, 3, 0, 0);
    }
    else if ((GameGetMissionTime() < 1500.0)) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 2, 3, 4, 0, 0);
    }
    else if (true) {
        lv_vSpawnAmount = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 4, 5, 0, 0);
    }
    libCOMI_gf_MM_WaitForUnload(lv_vUG);
    SoundPlayForPlayer(SoundLink("Changeling_What", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto673EAD8F_n = lv_vSpawnAmount;
    for (auto673EAD8F_i = 1; auto673EAD8F_i <= auto673EAD8F_n; auto673EAD8F_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Shapeshifter", 0, lv_vPlayer, UnitGroupCenterOfGroup(lv_vUG));
        TextExpressionSetToken("Param/Expression/lib_COMU_7CF47F17", "A", FixedToText(PointGetX(UnitGetPosition(UnitLastCreated())), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_COMU_7CF47F17", "B", FixedToText(PointGetY(UnitGetPosition(UnitLastCreated())), c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_7CF47F17"), false);
        libCOMU_gf_MM_ShapeshifterSwapModel(UnitLastCreated());
        libCOMI_gf_MM_AddToAttackWave_Check(UnitLastCreated(), lv_vUG);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "Create SymbioteCarapaceGlaze");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetScale");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetWalkAnimMoveSpeed 1.5");
        UnitGroupAdd(libCOMU_gv_mM_WaveUnitsWithShapeshifters, UnitLastCreated());
        libCOMI_gf_CT_RegisterSpawnedUnit(UnitLastCreated());
        libCOMI_gf_MM_WarpIn(UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShapeshiftersInWaves_Init () {
    libCOMU_gt_MM_ShapeshiftersInWaves = TriggerCreate("libCOMU_gt_MM_ShapeshiftersInWaves_Func");
    TriggerEnable(libCOMU_gt_MM_ShapeshiftersInWaves, false);
    TriggerAddEventPlayerAIWave(libCOMU_gt_MM_ShapeshiftersInWaves, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeTheUsualSuspects
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeTheUsualSuspects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_amonHeroDurationBehavior;
    int lv_vPlayer;
    int lv_vHeroIndex;
    int lv_vCurrentTier;
    int lv_vTier;
    string lv_vHeroInstance;
    string lv_vFrame;

    // Automatic Variable Declarations
    playergroup auto822DC134_g;
    int auto822DC134_var;
    const int auto5D159C32_ae = 4;
    const int auto5D159C32_ai = 1;
    int autoBF0A458F_ae;
    int autoBF0A458F_var;
    playergroup auto5B0BDF3B_g;
    int auto5B0BDF3B_var;

    // Variable Initialization
    lv_amonHeroDurationBehavior = UserDataGetFixed("MissionSettings", "CurrentMission", "AmonHeroDuration", 1);
    lv_vFrame = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto822DC134_g = libCOMI_gf_GetEnemyPlayers();
    auto822DC134_var = -1;
    while (true) {
        auto822DC134_var = PlayerGroupNextPlayer(auto822DC134_g, auto822DC134_var);
        if (auto822DC134_var < 0) { break; }
        CatalogFieldValueSet(c_gameCatalogBehavior, "AmonHeroDuration", "Duration", lv_vPlayer, FixedToString(lv_amonHeroDurationBehavior, c_fixedPrecisionAny));
    }
    lv_vCurrentTier = 1;
    for ( ; ( (auto5D159C32_ai >= 0 && lv_vCurrentTier <= auto5D159C32_ae) || (auto5D159C32_ai < 0 && lv_vCurrentTier >= auto5D159C32_ae) ) ; lv_vCurrentTier += auto5D159C32_ai ) {
        autoBF0A458F_ae = UserDataInstanceCount("MutatorsHeroes");
        autoBF0A458F_var = 1;
        for ( ; autoBF0A458F_var <= autoBF0A458F_ae; autoBF0A458F_var += 1 ) {
            lv_vHeroInstance = UserDataInstance("MutatorsHeroes", autoBF0A458F_var);
            lv_vTier = UserDataGetInt("MutatorsHeroes", lv_vHeroInstance, "Tier", 1);
            if ((lv_vTier != lv_vCurrentTier)) {
                continue;
            }
            lv_vHeroIndex += 1;
            libCOMU_gv_mM_AmonHeroUnitTypeArray[lv_vHeroIndex] = UserDataGetUnit("MutatorsHeroes", lv_vHeroInstance, "Unit", 1);
            libCOMU_gv_mM_AmonHeroSoundArray[lv_vHeroIndex] = SoundLink(UserDataGetSound("MutatorsHeroes", lv_vHeroInstance, "Sound", 1), c_soundIndexAny);
            auto5B0BDF3B_g = libCOMI_gf_GetEnemyPlayers();
            auto5B0BDF3B_var = -1;
            while (true) {
                auto5B0BDF3B_var = PlayerGroupNextPlayer(auto5B0BDF3B_g, auto5B0BDF3B_var);
                if (auto5B0BDF3B_var < 0) { break; }
                if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, libCOMU_gv_mM_AmonHeroUnitTypeArray[lv_vHeroIndex], "ShieldsMax", c_playerAny) > 0.0)) {
                    lv_vFrame = "Coop_UnitStatus/MutatorAmonHeroUnitShieldedStatusFrameTemplate";
                }
                else if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogActor, libCOMU_gv_mM_AmonHeroUnitTypeArray[lv_vHeroIndex], "BarOffset", c_playerAny) > 150.0)) {
                    lv_vFrame = "MM_Templates/AmonHeroAvatarOfEssenceStatusFrameTemplate";
                }
                else if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogActor, libCOMU_gv_mM_AmonHeroUnitTypeArray[lv_vHeroIndex], "BarOffset", c_playerAny) > 100.0)) {
                    lv_vFrame = "MM_Templates/MutatorAmonHeroUnitStatusFrameTemplate";
                }
                else if (true) {
                    lv_vFrame = "Coop_UnitStatus/MutatorAmonHeroUnitStatusFrameTemplate";
                }
                CatalogFieldValueSet(c_gameCatalogActor, libCOMU_gv_mM_AmonHeroUnitTypeArray[lv_vHeroIndex], "CustomUnitStatusFrame", lv_vPlayer, lv_vFrame);
            }
        }
    }
    TriggerEnable(libCOMU_gt_MM_AmonHeroWaveSent, true);
    TriggerEnable(libCOMU_gt_MM_AmonHeroHookTriggered, true);
    TriggerEnable(libCOMU_gt_MM_AmonHeroDuration, true);
    TriggerEnable(libCOMU_gt_MM_AmonHeroDies, true);
    TriggerExecute(libCOMU_gt_MM_AmonHeroPoolAdd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeTheUsualSuspects_Init () {
    libCOMU_gt_MM_InitializeTheUsualSuspects = TriggerCreate("libCOMU_gt_MM_InitializeTheUsualSuspects_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeTheUsualSuspects, ("Mutator " + "TheUsualSuspects" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownTheUsualSuspects
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownTheUsualSuspects_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto42863D83_g;
    int auto42863D83_u;
    unit auto42863D83_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto42863D83_g = libCOMU_gv_mM_AmonSummonedHeroes;
    auto42863D83_u = UnitGroupCount(auto42863D83_g, c_unitCountAll);
    for (;; auto42863D83_u -= 1) {
        auto42863D83_var = UnitGroupUnitFromEnd(auto42863D83_g, auto42863D83_u);
        if (auto42863D83_var == null) { break; }
        UnitKill(auto42863D83_var);
    }
    TriggerEnable(libCOMU_gt_MM_AmonHeroWaveSent, false);
    TriggerEnable(libCOMU_gt_MM_AmonHeroHookTriggered, false);
    TriggerEnable(libCOMU_gt_MM_AmonHeroDuration, false);
    TriggerEnable(libCOMU_gt_MM_AmonHeroDies, false);
    TriggerStop(libCOMU_gt_MM_AmonHeroPoolAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownTheUsualSuspects_Init () {
    libCOMU_gt_MM_ShutdownTheUsualSuspects = TriggerCreate("libCOMU_gt_MM_ShutdownTheUsualSuspects_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownTheUsualSuspects, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownTheUsualSuspects, ("Mutator " + "TheUsualSuspects" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroPoolAdd
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_AmonHeroPoolAdd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE70E09FE_n = 7;
    int autoE70E09FE_i;
    const int auto64D5D934_n = 11;
    int auto64D5D934_i;

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((GameGetMissionTime() > 220.0))) {
        Wait(3.0, c_timeGame);
    }
    libCOMU_gv_mM_AmonHeroPool += 1.0;
    for (autoE70E09FE_i = 1; autoE70E09FE_i <= autoE70E09FE_n; autoE70E09FE_i += 1) {
        Wait(90.0, c_timeGame);
        libCOMU_gv_mM_AmonHeroPool += 1.0;
    }
    for (auto64D5D934_i = 1; auto64D5D934_i <= auto64D5D934_n; auto64D5D934_i += 1) {
        Wait(60.0, c_timeGame);
        libCOMU_gv_mM_AmonHeroPool += 1.0;
    }
    while (true) {
        Wait(30.0, c_timeGame);
        libCOMU_gv_mM_AmonHeroPool += 1.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_AmonHeroPoolAdd_Init () {
    libCOMU_gt_MM_AmonHeroPoolAdd = TriggerCreate("libCOMU_gt_MM_AmonHeroPoolAdd_Func");
    TriggerEnable(libCOMU_gt_MM_AmonHeroPoolAdd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroWaveSent
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_AmonHeroWaveSent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = AIWaveGetUnits(EventPlayerWave());

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMU_gv_mM_AmonHeroAttackWaveUnits, UnitGroupRandomUnit(AIWaveGetUnits(EventPlayerWave()), c_unitCountAlive)) == false))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), libCOMI_gf_AffectedPlayer(0), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vUG = AIWaveGetUnits(EventPlayerWave());
    TextExpressionSetToken("Param/Expression/lib_COMU_A260720E", "A", StringToText(libARRA_gf_UT_PointXYToString(UnitGroupCenterOfGroup(lv_vUG), ",", 1)));
    TextExpressionSetToken("Param/Expression/lib_COMU_A260720E", "B", IntToText(UnitGroupCount(lv_vUG, c_unitCountAlive)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_A260720E"), false);
    libCOMU_gf_MM_AmonHeroSpawn(lv_vUG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_AmonHeroWaveSent_Init () {
    libCOMU_gt_MM_AmonHeroWaveSent = TriggerCreate("libCOMU_gt_MM_AmonHeroWaveSent_Func");
    TriggerEnable(libCOMU_gt_MM_AmonHeroWaveSent, false);
    TriggerAddEventPlayerAIWave(libCOMU_gt_MM_AmonHeroWaveSent, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroHookTriggered
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_AmonHeroHookTriggered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vUG;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vUG = DataTableGetUnitGroup(true, "MM_WaveSentGroup");

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_COMU_08DA5151", "C", IntToText(UnitGetOwner(UnitGroupRandomUnit(lv_vUG, c_unitCountAlive))));
    TextExpressionSetToken("Param/Expression/lib_COMU_08DA5151", "A", StringToText(libARRA_gf_UT_PointXYToString(UnitGroupCenterOfGroup(lv_vUG), ",", 1)));
    TextExpressionSetToken("Param/Expression/lib_COMU_08DA5151", "B", IntToText(UnitGroupCount(lv_vUG, c_unitCountAlive)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_08DA5151"), false);
    libCOMU_gf_MM_AmonHeroSpawn(lv_vUG);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_AmonHeroHookTriggered_Init () {
    libCOMU_gt_MM_AmonHeroHookTriggered = TriggerCreate("libCOMU_gt_MM_AmonHeroHookTriggered_Func");
    TriggerEnable(libCOMU_gt_MM_AmonHeroHookTriggered, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_AmonHeroHookTriggered, "MM_WaveSentHook");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroDuration
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_AmonHeroDuration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_COMU_2F0FFC84"), false);
    libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), libCOMI_gf_GetPlayersBaseMiddlePoint(libCOMI_gf_AffectedPlayers())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_AmonHeroDuration_Init () {
    libCOMU_gt_MM_AmonHeroDuration = TriggerCreate("libCOMU_gt_MM_AmonHeroDuration_Func");
    TriggerEnable(libCOMU_gt_MM_AmonHeroDuration, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_AmonHeroDuration, null, "AmonHeroDuration", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_AmonHeroDies
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_AmonHeroDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libCOMU_gv_mM_AmonSummonedHeroes, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(5.0, c_timeGame);
    if ((EventUnit() != null)) {
        UnitRemove(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_AmonHeroDies_Init () {
    libCOMU_gt_MM_AmonHeroDies = TriggerCreate("libCOMU_gt_MM_AmonHeroDies_Func");
    TriggerEnable(libCOMU_gt_MM_AmonHeroDies, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_AmonHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSluggishness
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeSluggishness_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    int lv_catalogIndex;

    // Automatic Variable Declarations
    int auto7E88D347_ae;
    const int auto7E88D347_ai = 1;
    playergroup auto90B76645_g;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E88D347_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (auto7E88D347_ai >= 0 && lv_catalogIndex <= auto7E88D347_ae) || (auto7E88D347_ai < 0 && lv_catalogIndex >= auto7E88D347_ae) ) ; lv_catalogIndex += auto7E88D347_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        if ((UnitTypeTestFlag((lv_stringUnitID), c_unitFlagWorker) == true)) {
            continue;
        }

        auto90B76645_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto90B76645_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "TurningRate", lv_indexPlayer, FixedToString(50.0, 2));
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Acceleration", lv_indexPlayer, FixedToString(0.5, 2));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeSluggishness_Init () {
    libCOMU_gt_CT_InitializeSluggishness = TriggerCreate("libCOMU_gt_CT_InitializeSluggishness_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeSluggishness, ("Mutator " + "Sluggishness" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSluggishness
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownSluggishness_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownSluggishness_Init () {
    libCOMU_gt_CT_ShutdownSluggishness = TriggerCreate("libCOMU_gt_CT_ShutdownSluggishness_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownSluggishness, ("Mutator " + "Sluggishness" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSpawnBroodling
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeSpawnBroodling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeSpawnBroodling_Init () {
    libCOMU_gt_CT_InitializeSpawnBroodling = TriggerCreate("libCOMU_gt_CT_InitializeSpawnBroodling_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeSpawnBroodling, ("Mutator " + "SpawnBroodlings" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSpawnBroodling
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownSpawnBroodling_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownSpawnBroodling_Init () {
    libCOMU_gt_CT_ShutdownSpawnBroodling = TriggerCreate("libCOMU_gt_CT_ShutdownSpawnBroodling_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownSpawnBroodling, ("Mutator " + "SpawnBroodlings" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 1
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplySpawnBroodling(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath1_Init () {
    libCOMU_gt_CT_UnitDeath1 = TriggerCreate("libCOMU_gt_CT_UnitDeath1_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath1, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeSpawnInfested
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeSpawnInfested_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath2, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeSpawnInfested_Init () {
    libCOMU_gt_CT_InitializeSpawnInfested = TriggerCreate("libCOMU_gt_CT_InitializeSpawnInfested_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeSpawnInfested, ("Mutator " + "SpawnInfested" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownSpawnInfested
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownSpawnInfested_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDeath2, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownSpawnInfested_Init () {
    libCOMU_gt_CT_ShutdownSpawnInfested = TriggerCreate("libCOMU_gt_CT_ShutdownSpawnInfested_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownSpawnInfested, ("Mutator " + "SpawnInfested" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDeath 2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDeath2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplySpawnInfested(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDeath2_Init () {
    libCOMU_gt_CT_UnitDeath2 = TriggerCreate("libCOMU_gt_CT_UnitDeath2_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDeath2, false);
    TriggerAddEventUnitDied(libCOMU_gt_CT_UnitDeath2, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeStructureSteal
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeStructureSteal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto02C45B4F_g;
    playergroup autoC01B81EC_g;
    unitgroup auto375334DE_g;
    int auto375334DE_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation8, true);
    TriggerExecute(libCOMU_gt_CT_StructureStealLogic, true, false);
    TriggerEnable(libCOMU_gt_CT_StructureStealUnitTrained, true);
    TriggerEnable(libCOMU_gt_CT_StructureStealTrigger, true);
    TriggerEnable(libCOMU_gt_CT_OwnerChangesStructureSteal, true);
    auto02C45B4F_g = libCOMI_gf_GetEnemyPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto02C45B4F_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TechTreeUnitAllow(lv_indexPlayer, "HydraliskStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "CorruptorStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "ZerglingStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "UltraliskStetmann", false);
        TechTreeUnitAllow(lv_indexPlayer, "InfestorStetmann", false);
    }
    autoC01B81EC_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoC01B81EC_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto375334DE_g = UnitGroup(null, lv_indexPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
        auto375334DE_u = UnitGroupCount(auto375334DE_g, c_unitCountAll);
        for (;; auto375334DE_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto375334DE_g, auto375334DE_u);
            if (lv_indexUnit == null) { break; }
            libCOMU_gf_CT_ApplyStructureStealBehavior(lv_indexUnit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeStructureSteal_Init () {
    libCOMU_gt_CT_InitializeStructureSteal = TriggerCreate("libCOMU_gt_CT_InitializeStructureSteal_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeStructureSteal, ("Mutator " + "StructureSteal" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownStructureSteal
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownStructureSteal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoAFCDA5EF_g;
    unitgroup auto8C2C93E7_g;
    int auto8C2C93E7_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation8, false);
    TriggerEnable(libCOMU_gt_CT_StructureStealTrigger, false);
    TriggerEnable(libCOMU_gt_CT_OwnerChangesStructureSteal, false);
    autoAFCDA5EF_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoAFCDA5EF_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto8C2C93E7_g = UnitGroup(null, lv_indexPlayer, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
        auto8C2C93E7_u = UnitGroupCount(auto8C2C93E7_g, c_unitCountAll);
        for (;; auto8C2C93E7_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(auto8C2C93E7_g, auto8C2C93E7_u);
            if (lv_indexUnit == null) { break; }
            libCOMU_gf_CT_RemoveStructureStealBehavior(lv_indexUnit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownStructureSteal_Init () {
    libCOMU_gt_CT_ShutdownStructureSteal = TriggerCreate("libCOMU_gt_CT_ShutdownStructureSteal_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownStructureSteal, ("Mutator " + "StructureSteal" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation8
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyStructureStealBehavior(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation8_Init () {
    libCOMU_gt_CT_UnitCreation8 = TriggerCreate("libCOMU_gt_CT_UnitCreation8_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation8, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation8, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OwnerChanges StructureSteal
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_OwnerChangesStructureSteal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerOld()) == true))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerNew()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_RemoveStructureStealBehavior(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_OwnerChangesStructureSteal_Init () {
    libCOMU_gt_CT_OwnerChangesStructureSteal = TriggerCreate("libCOMU_gt_CT_OwnerChangesStructureSteal_Func");
    TriggerEnable(libCOMU_gt_CT_OwnerChangesStructureSteal, false);
    TriggerAddEventUnitChangeOwner(libCOMU_gt_CT_OwnerChangesStructureSteal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StructureStealLogic
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_StructureStealLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexStructure;
    int lv_abilityIndex;
    int lv_commandIndex;
    int lv_commandCount;
    string lv_structureAbility;

    // Automatic Variable Declarations
    unitgroup auto8B16354C_g;
    int auto8B16354C_u;
    int autoD8196C4C_ae;
    const int autoD8196C4C_ai = 1;
    int autoA1283C56_val;
    const int auto0A9E56CE_ae = 29;
    const int auto0A9E56CE_ai = 1;
    const int autoE331E288_ae = 29;
    const int autoE331E288_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(2.0, c_timeAI);
        auto8B16354C_g = libCOMU_gv_cT_StolenStructures;
        auto8B16354C_u = UnitGroupCount(auto8B16354C_g, c_unitCountAll);
        for (;; auto8B16354C_u -= 1) {
            lv_indexStructure = UnitGroupUnitFromEnd(auto8B16354C_g, auto8B16354C_u);
            if (lv_indexStructure == null) { break; }
            UnitIssueOrder(lv_indexStructure, OrderTargetingPoint(AbilityCommand("Rally", 0), UnitGetPosition(lv_indexStructure)), c_orderQueueReplace);
            autoD8196C4C_ae = UnitAbilityCount(lv_indexStructure);
            lv_abilityIndex = 1;
            for ( ; ( (autoD8196C4C_ai >= 0 && lv_abilityIndex <= autoD8196C4C_ae) || (autoD8196C4C_ai < 0 && lv_abilityIndex >= autoD8196C4C_ae) ) ; lv_abilityIndex += autoD8196C4C_ai ) {
                lv_structureAbility = UnitAbilityGet(lv_indexStructure, lv_abilityIndex);
                if ((UnitAbilityCheck(lv_indexStructure, lv_structureAbility, true) == false)) {
                    continue;
                }

                autoA1283C56_val = AbilityClass(lv_structureAbility);
                if (autoA1283C56_val == c_classIdCAbilTrain) {
                    lv_commandCount = 0;
                    lv_commandIndex = 0;
                    for ( ; ( (auto0A9E56CE_ai >= 0 && lv_commandIndex <= auto0A9E56CE_ae) || (auto0A9E56CE_ai < 0 && lv_commandIndex >= auto0A9E56CE_ae) ) ; lv_commandIndex += auto0A9E56CE_ai ) {
                        if ((AbilityCommand(lv_structureAbility, lv_commandIndex) != null) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateDisabled) == false) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateHidden) == false) && (UnitOrderIsValid(lv_indexStructure, Order(AbilityCommand(lv_structureAbility, lv_commandIndex))) == true)) {
                            lv_commandCount += 1;
                        }

                    }
                    if ((lv_commandCount == 0)) {
                        break;
                    }

                    lv_commandCount = RandomInt(1, lv_commandCount);
                    lv_commandIndex = 0;
                    for ( ; ( (autoE331E288_ai >= 0 && lv_commandIndex <= autoE331E288_ae) || (autoE331E288_ai < 0 && lv_commandIndex >= autoE331E288_ae) ) ; lv_commandIndex += autoE331E288_ai ) {
                        if ((AbilityCommand(lv_structureAbility, lv_commandIndex) != null) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateDisabled) == false) && (UnitCheckAbilCmdState(lv_indexStructure, AbilityCommand(lv_structureAbility, lv_commandIndex), c_cmdStateHidden) == false) && (UnitOrderIsValid(lv_indexStructure, Order(AbilityCommand(lv_structureAbility, lv_commandIndex))) == true)) {
                            lv_commandCount -= 1;
                            if ((lv_commandCount == 0)) {
                                UnitIssueOrder(lv_indexStructure, Order(AbilityCommand(lv_structureAbility, lv_commandIndex)), c_orderQueueReplace);
                                break;
                            }

                        }

                    }
                }
                else {
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_StructureStealLogic_Init () {
    libCOMU_gt_CT_StructureStealLogic = TriggerCreate("libCOMU_gt_CT_StructureStealLogic_Func");
    TriggerEnable(libCOMU_gt_CT_StructureStealLogic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StructureStealTrigger
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_StructureStealTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_AffectedPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyStructureSteal(EventPlayerEffectUsedUnit(c_effectUnitTarget), EventPlayerEffectUsedUnit(c_effectUnitCaster), 3);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_StructureStealTrigger_Init () {
    libCOMU_gt_CT_StructureStealTrigger = TriggerCreate("libCOMU_gt_CT_StructureStealTrigger_Func");
    TriggerEnable(libCOMU_gt_CT_StructureStealTrigger, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_CT_StructureStealTrigger, c_playerAny, "MutatorHouseHuntersDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StructureStealUnitTrained
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_StructureStealUnitTrained_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libCOMU_gv_cT_StolenStructures, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AISetUnitSuicide(EventUnitProgressUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_StructureStealUnitTrained_Init () {
    libCOMU_gt_CT_StructureStealUnitTrained = TriggerCreate("libCOMU_gt_CT_StructureStealUnitTrained_Func");
    TriggerEnable(libCOMU_gt_CT_StructureStealUnitTrained, false);
    TriggerAddEventUnitTrainProgress(libCOMU_gt_CT_StructureStealUnitTrained, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeStoneZealots
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeStoneZealots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_StoneZealotsSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeStoneZealots_Init () {
    libCOMU_gt_CT_InitializeStoneZealots = TriggerCreate("libCOMU_gt_CT_InitializeStoneZealots_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeStoneZealots, ("Mutator " + "StoneZealots" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownStoneZealots
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownStoneZealots_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_StoneZealotsSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownStoneZealots_Init () {
    libCOMU_gt_CT_ShutdownStoneZealots = TriggerCreate("libCOMU_gt_CT_ShutdownStoneZealots_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownStoneZealots, ("Mutator " + "StoneZealots" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_StoneZealotsSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_StoneZealotsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnPoint;
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_maxSpawnAttempts;
    int lv_spawnCount;
    int lv_extraSpawn;
    int lv_spawnAttempt;
    unit lv_monster;
    string lv_monsterType;
    unitgroup lv_attackGroup;

    // Automatic Variable Declarations
    unitgroup auto48BA221D_g;
    int auto48BA221D_u;

    // Variable Initialization
    lv_maxSpawn = 50;
    lv_maxSpawnAttempts = 1000;
    lv_monsterType = "MutatorStoneZealot";
    lv_attackGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(15, 25, 50, 100, 100, 100);
    while ((lv_spawnCount <= lv_maxSpawn) && (lv_spawnAttempt <= lv_maxSpawnAttempts)) {
        lv_spawnPoint = RegionRandomPoint(RegionEntireMap());
        if (libCOMI_gf_ConnectedByGroundPath(lv_spawnPoint) && (PathingType(lv_spawnPoint) == c_pathingGround) && (libCOMI_gf_CC_SpawnAllowedAtPoint(lv_spawnPoint) == true) && (VisIsVisibleForPlayer(libCOMI_gf_AffectedPlayer(0), lv_spawnPoint) == false) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 5.0), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_spawnPoint, 10.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCountAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0) && (libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnPoint, 30, libCOMI_gf_AffectedPlayers()) == true) && (UnitCount("CelestialLock", c_playerAny, RegionCircle(lv_spawnPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("DuelBubbleUnit", c_playerAny, RegionCircle(lv_spawnPoint, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0)) {
            UnitCreate(1, lv_monsterType, 0, libCOMI_gf_MutatorPlayer(), lv_spawnPoint, libNtve_gf_RandomAngle());
            lv_spawnCount += 1;
            TextExpressionSetToken("Param/Expression/lib_COMU_99C2DFA3", "A", IntToText(lv_spawnCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_99C2DFA3"), true);
        }
        else {
            lv_spawnAttempt += 1;
            TextExpressionSetToken("Param/Expression/lib_COMU_61B39E7A", "A", IntToText(lv_spawnAttempt));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_COMU_61B39E7A"), true);
        }
    }
    UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
    Wait(120.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        auto48BA221D_g = UnitGroup(null, libCOMI_gf_MutatorPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto48BA221D_u = UnitGroupCount(auto48BA221D_g, c_unitCountAll);
        for (;; auto48BA221D_u -= 1) {
            lv_monster = UnitGroupUnitFromEnd(auto48BA221D_g, auto48BA221D_u);
            if (lv_monster == null) { break; }
            if ((UnitGetType(lv_monster) == lv_monsterType)) {
                AISetUnitSuicide(lv_monster, true);
                break;
            }

        }
        Wait(libCOMI_gf_MinimumDifficultyValueCoopInteger(240, 120, 60, 30, 0, 0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_StoneZealotsSpawn_Init () {
    libCOMU_gt_CT_StoneZealotsSpawn = TriggerCreate("libCOMU_gt_CT_StoneZealotsSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_StoneZealotsSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeSupremeCommander
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeSupremeCommander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAEB7308D_g;
    int autoAEB7308D_u;
    unit autoAEB7308D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation3, true);
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix3, true);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent3, true);
    TriggerEnable(libCOMU_gt_MM_UltraliskSizeFix, true);
    Wait(0.5, c_timeReal);
    autoAEB7308D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAEB7308D_u = UnitGroupCount(autoAEB7308D_g, c_unitCountAll);
    for (;; autoAEB7308D_u -= 1) {
        autoAEB7308D_var = UnitGroupUnitFromEnd(autoAEB7308D_g, autoAEB7308D_u);
        if (autoAEB7308D_var == null) { break; }
        libCOMU_gf_MM_ApplySupremeCommander(autoAEB7308D_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeSupremeCommander_Init () {
    libCOMU_gt_MM_InitializeSupremeCommander = TriggerCreate("libCOMU_gt_MM_InitializeSupremeCommander_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeSupremeCommander, ("Mutator " + "SupremeCommander" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownSupremeCommander
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownSupremeCommander_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5E222142_g;
    int auto5E222142_u;
    unit auto5E222142_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitCreation3, false);
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix3, false);
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent3, false);
    auto5E222142_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5E222142_u = UnitGroupCount(auto5E222142_g, c_unitCountAll);
    for (;; auto5E222142_u -= 1) {
        auto5E222142_var = UnitGroupUnitFromEnd(auto5E222142_g, auto5E222142_u);
        if (auto5E222142_var == null) { break; }
        UnitBehaviorRemovePlayer(auto5E222142_var, "SupremeCommanderMassive", libCOMI_gf_MutatorPlayer(), 1);
        UnitBehaviorRemovePlayer(auto5E222142_var, "SupremeCommander", libCOMI_gf_MutatorPlayer(), 1);
        UnitBehaviorRemovePlayer(auto5E222142_var, "SupremeCommanderStructure", libCOMI_gf_MutatorPlayer(), 1);
        UnitBehaviorRemovePlayer(auto5E222142_var, "SupremeCommanderTrain", libCOMI_gf_MutatorPlayer(), 1);
        UnitBehaviorRemovePlayer(auto5E222142_var, "SupremeCommanderWorker", libCOMI_gf_MutatorPlayer(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownSupremeCommander_Init () {
    libCOMU_gt_MM_ShutdownSupremeCommander = TriggerCreate("libCOMU_gt_MM_ShutdownSupremeCommander_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownSupremeCommander, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownSupremeCommander, ("Mutator " + "SupremeCommander" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitCreation 3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitCreation3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplySupremeCommander(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitCreation3_Init () {
    libCOMU_gt_MM_UnitCreation3 = TriggerCreate("libCOMU_gt_MM_UnitCreation3_Func");
    TriggerEnable(libCOMU_gt_MM_UnitCreation3, false);
    TriggerAddEventUnitCreated(libCOMU_gt_MM_UnitCreation3, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitRevived Fix 3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitRevivedFix3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplySupremeCommander(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitRevivedFix3_Init () {
    libCOMU_gt_MM_UnitRevivedFix3 = TriggerCreate("libCOMU_gt_MM_UnitRevivedFix3_Func");
    TriggerEnable(libCOMU_gt_MM_UnitRevivedFix3, false);
    TriggerAddEventUnitRevive(libCOMU_gt_MM_UnitRevivedFix3, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutator Unit Creation Event 3
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MutatorUnitCreationEvent3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_ApplySupremeCommander(libCOMI_gv_mutatorHero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MutatorUnitCreationEvent3_Init () {
    libCOMU_gt_MutatorUnitCreationEvent3 = TriggerCreate("libCOMU_gt_MutatorUnitCreationEvent3_Func");
    TriggerEnable(libCOMU_gt_MutatorUnitCreationEvent3, false);
    TriggerAddEventGeneric(libCOMU_gt_MutatorUnitCreationEvent3, "Mutator Unit Creation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_Ultralisk Size Fix
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UltraliskSizeFix_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_MM_UnitScaleController(EventUnit(), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UltraliskSizeFix_Init () {
    libCOMU_gt_MM_UltraliskSizeFix = TriggerCreate("libCOMU_gt_MM_UltraliskSizeFix_Func");
    TriggerEnable(libCOMU_gt_MM_UltraliskSizeFix, false);
    TriggerAddEventUnitBehaviorChange(libCOMU_gt_MM_UltraliskSizeFix, null, "TorrasqueTimerBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTornadoes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeTornadoes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_harvestableSpawnBufferDistance;
    int lv_tornadoCount;
    int lv_spawnAttempt;
    point lv_spawnLocation;

    // Automatic Variable Declarations
    int auto9E51399C_n;
    int auto9E51399C_i;
    const int autoDBBF9915_ae = 1000;
    const int autoDBBF9915_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "MutatorTornadoAOESearchDamage", "Amount", libCOMI_gf_MutatorPlayer(), IntToString(libCOMI_gf_MinimumDifficultyValueCoopInteger(5, 10, 15, 25, 25, 25)));
    lv_tornadoCount += MaxI(FixedToInt((libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 19.0)), 1);
    lv_tornadoCount += MaxI(FixedToInt((libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 19.0)), 1);
    if ((libCOMI_gf_CC_CurrentMap() == "AC_VeridiaCourier")) {
        lv_harvestableSpawnBufferDistance = 5;
    }
    else {
        lv_harvestableSpawnBufferDistance = 15;
    }
    auto9E51399C_n = lv_tornadoCount;
    for (auto9E51399C_i = 1; auto9E51399C_i <= auto9E51399C_n; auto9E51399C_i += 1) {
        lv_spawnAttempt = 1;
        for ( ; ( (autoDBBF9915_ai >= 0 && lv_spawnAttempt <= autoDBBF9915_ae) || (autoDBBF9915_ai < 0 && lv_spawnAttempt >= autoDBBF9915_ae) ) ; lv_spawnAttempt += autoDBBF9915_ai ) {
            lv_spawnLocation = RegionRandomPoint(RegionPlayableMap());
            if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_spawnLocation, 30, libCOMI_gf_AffectedPlayers()) == true) && (libCOMI_gf_CC_SpawnAllowedAtPoint(lv_spawnLocation) == true) && libCOMI_gf_ConnectedByGroundPath(lv_spawnLocation) && (RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == false)) {
                break;
            }

        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorTornado", 0, libCOMI_gf_MutatorPlayer(), lv_spawnLocation);
        UnitGroupAdd(libCOMU_gv_cT_Tornadoes, UnitLastCreated());
    }
    TriggerExecute(libCOMU_gt_CT_TornadoMovement, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeTornadoes_Init () {
    libCOMU_gt_CT_InitializeTornadoes = TriggerCreate("libCOMU_gt_CT_InitializeTornadoes_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeTornadoes, ("Mutator " + "Tornadoes" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTornadoes
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownTornadoes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexTornado;

    // Automatic Variable Declarations
    unitgroup auto7BFC748F_g;
    int auto7BFC748F_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7BFC748F_g = libCOMU_gv_cT_Tornadoes;
    auto7BFC748F_u = UnitGroupCount(auto7BFC748F_g, c_unitCountAll);
    for (;; auto7BFC748F_u -= 1) {
        lv_indexTornado = UnitGroupUnitFromEnd(auto7BFC748F_g, auto7BFC748F_u);
        if (lv_indexTornado == null) { break; }
        UnitKill(lv_indexTornado);
        UnitGroupRemove(libCOMU_gv_cT_Tornadoes, lv_indexTornado);
    }
    TriggerStop(libCOMU_gt_CT_TornadoMovement);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownTornadoes_Init () {
    libCOMU_gt_CT_ShutdownTornadoes = TriggerCreate("libCOMU_gt_CT_ShutdownTornadoes_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownTornadoes, ("Mutator " + "Tornadoes" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TornadoMovement
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_TornadoMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexTornado;
    point lv_targetLocation;
    int lv_searchAttempts;
    unitgroup lv_nearbyTornadoes;

    // Automatic Variable Declarations
    unitgroup auto0FCE11A7_g;
    int auto0FCE11A7_u;
    const int autoF1DABE08_ae = 10;
    const int autoF1DABE08_ai = 1;

    // Variable Initialization
    lv_nearbyTornadoes = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto0FCE11A7_g = libCOMU_gv_cT_Tornadoes;
        auto0FCE11A7_u = UnitGroupCount(auto0FCE11A7_g, c_unitCountAll);
        for (;; auto0FCE11A7_u -= 1) {
            lv_indexTornado = UnitGroupUnitFromEnd(auto0FCE11A7_g, auto0FCE11A7_u);
            if (lv_indexTornado == null) { break; }
            lv_searchAttempts = 1;
            for ( ; ( (autoF1DABE08_ai >= 0 && lv_searchAttempts <= autoF1DABE08_ae) || (autoF1DABE08_ai < 0 && lv_searchAttempts >= autoF1DABE08_ae) ) ; lv_searchAttempts += autoF1DABE08_ai ) {
                lv_nearbyTornadoes = UnitGroup("MutatorTornado", c_playerAny, RegionCircle(UnitGetPosition(lv_indexTornado), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                UnitGroupRemove(lv_nearbyTornadoes, lv_indexTornado);
                if ((UnitGroupCount(lv_nearbyTornadoes, c_unitCountAlive) > 0)) {
                    lv_targetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupUnit(lv_nearbyTornadoes, 1)), (DistanceBetweenPoints(UnitGetPosition(UnitGroupUnit(lv_nearbyTornadoes, 1)), UnitGetPosition(lv_indexTornado)) + 10.0), UnitGetPosition(lv_indexTornado));
                }
                else {
                    lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_indexTornado), 10.0, libNtve_gf_RandomAngle());
                }
                if ((RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_targetLocation) == false)) {
                    break;
                }
                else {
                    lv_targetLocation = null;
                }
            }
            if ((lv_targetLocation != null)) {
                UnitIssueOrder(lv_indexTornado, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLocation), c_orderQueueReplace);
            }

        }
        Wait(RandomFixed(4.0, 6.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_TornadoMovement_Init () {
    libCOMU_gt_CT_TornadoMovement = TriggerCreate("libCOMU_gt_CT_TornadoMovement_Func");
    TriggerEnable(libCOMU_gt_CT_TornadoMovement, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTempDamageReflect
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeTempDamageReflect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage8, true);
    TriggerExecute(libCOMU_gt_CT_TempDamageReflectHealing, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeTempDamageReflect_Init () {
    libCOMU_gt_CT_InitializeTempDamageReflect = TriggerCreate("libCOMU_gt_CT_InitializeTempDamageReflect_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeTempDamageReflect, ("Mutator " + "TempDamageReflect" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTempDamageReflect
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownTempDamageReflect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitDamage8, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownTempDamageReflect_Init () {
    libCOMU_gt_CT_ShutdownTempDamageReflect = TriggerCreate("libCOMU_gt_CT_ShutdownTempDamageReflect_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownTempDamageReflect, ("Mutator " + "TempDamageReflect" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitDamage 8
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitDamage8_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyTempDamageReflect(EventUnit(), EventUnitDamageSourceUnit(), EventUnitDamageAmount(), EventUnitDamageEffect());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitDamage8_Init () {
    libCOMU_gt_CT_UnitDamage8 = TriggerCreate("libCOMU_gt_CT_UnitDamage8_Func");
    TriggerEnable(libCOMU_gt_CT_UnitDamage8, false);
    TriggerAddEventUnitDamaged(libCOMU_gt_CT_UnitDamage8, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TempDamageReflectHealing
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_TempDamageReflectHealing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageRemaining;
    fixed lv_healRemaining;
    unit lv_indexUnit;
    fixed lv_healAmount;
    fixed lv_healTotal;

    // Automatic Variable Declarations
    unitgroup autoE434077F_g;
    int autoE434077F_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.1, c_timeGame);
        autoE434077F_g = libCOMU_gv_cT_TempDamageReflectUnits;
        autoE434077F_u = UnitGroupCount(autoE434077F_g, c_unitCountAll);
        for (;; autoE434077F_u -= 1) {
            lv_indexUnit = UnitGroupUnitFromEnd(autoE434077F_g, autoE434077F_u);
            if (lv_indexUnit == null) { break; }
            if (((UnitIsValid(lv_indexUnit) == false) || (UnitIsAlive(lv_indexUnit) == false))) {
                UnitGroupRemove(libCOMU_gv_cT_TempDamageReflectUnits, lv_indexUnit);
                continue;
            }

            lv_healRemaining = libCOMI_gf_MinimumDifficultyValueCoopReal(1.0, 1.0, 1.0, 1.0, 1.0, 1.0);
            lv_healTotal = lv_healRemaining;
            lv_healRemaining = MinF(lv_healRemaining, UnitGetCustomValue(lv_indexUnit, libCOMU_gv_cTC_TempDamageCustomIndex));
            lv_healAmount = MinF((UnitGetPropertyFixed(lv_indexUnit, c_unitPropLifeMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_indexUnit, c_unitPropLife, c_unitPropCurrent)), lv_healRemaining);
            if ((lv_healAmount > 0.0)) {
                UnitSetPropertyFixed(lv_indexUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_indexUnit, c_unitPropLife, c_unitPropCurrent) + lv_healAmount));
            }

            lv_healRemaining -= lv_healAmount;
            lv_healAmount = MinF((UnitGetPropertyFixed(lv_indexUnit, c_unitPropShieldsMax, c_unitPropCurrent) - UnitGetPropertyFixed(lv_indexUnit, c_unitPropShields, c_unitPropCurrent)), lv_healRemaining);
            if ((lv_healAmount > 0.0)) {
                UnitSetPropertyFixed(lv_indexUnit, c_unitPropShields, (UnitGetPropertyFixed(lv_indexUnit, c_unitPropShields, c_unitPropCurrent) + lv_healAmount));
            }

            UnitSetCustomValue(lv_indexUnit, libCOMU_gv_cTC_TempDamageCustomIndex, (UnitGetCustomValue(lv_indexUnit, libCOMU_gv_cTC_TempDamageCustomIndex) - lv_healTotal));
            if ((UnitGetCustomValue(lv_indexUnit, libCOMU_gv_cTC_TempDamageCustomIndex) <= 0.0)) {
                UnitGroupRemove(libCOMU_gv_cT_TempDamageReflectUnits, lv_indexUnit);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_TempDamageReflectHealing_Init () {
    libCOMU_gt_CT_TempDamageReflectHealing = TriggerCreate("libCOMU_gt_CT_TempDamageReflectHealing_Func");
    TriggerEnable(libCOMU_gt_CT_TempDamageReflectHealing, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTemporalField
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeTemporalField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_TemporalFieldSpawn, true);
    TriggerExecute(libCOMU_gt_CT_TemporalFieldSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeTemporalField_Init () {
    libCOMU_gt_CT_InitializeTemporalField = TriggerCreate("libCOMU_gt_CT_InitializeTemporalField_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeTemporalField, ("Mutator " + "TemporalField" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTemporalField
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownTemporalField_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_TemporalFieldSpawn, false);
    TriggerStop(libCOMU_gt_CT_TemporalFieldSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownTemporalField_Init () {
    libCOMU_gt_CT_ShutdownTemporalField = TriggerCreate("libCOMU_gt_CT_ShutdownTemporalField_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownTemporalField, ("Mutator " + "TemporalField" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TemporalFieldSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_TemporalFieldSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyCount;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnRegion = RegionPlayableMap();
    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(8.0, 6.0, 4.0, 3.0, 0.1, 0.1);
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        while (true) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (libCOMI_gf_CC_SpawnAllowedAtPoint(lv_spawnLocation) == false) || (RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "MutatorGravitonBombInitialCP", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_TemporalFieldSpawn_Init () {
    libCOMU_gt_CT_TemporalFieldSpawn = TriggerCreate("libCOMU_gt_CT_TemporalFieldSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_TemporalFieldSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTimeWarp
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeTimeWarp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_TimeWarpSpawn, true);
    TriggerExecute(libCOMU_gt_CT_TimeWarpSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeTimeWarp_Init () {
    libCOMU_gt_CT_InitializeTimeWarp = TriggerCreate("libCOMU_gt_CT_InitializeTimeWarp_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeTimeWarp, ("Mutator " + "TimeWarp" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTimeWarp
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownTimeWarp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_TimeWarpSpawn, false);
    TriggerStop(libCOMU_gt_CT_TimeWarpSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownTimeWarp_Init () {
    libCOMU_gt_CT_ShutdownTimeWarp = TriggerCreate("libCOMU_gt_CT_ShutdownTimeWarp_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownTimeWarp, ("Mutator " + "TimeWarp" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TimeWarpSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_TimeWarpSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_spawnLocation;
    region lv_spawnRegion;
    int lv_safetyInt;
    fixed lv_waitTime;

    // Automatic Variable Declarations
    const int autoF9AA7C4A_ae = 100;
    const int autoF9AA7C4A_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waitTime = libCOMI_gf_MinimumDifficultyValueCoopReal(8.0, 6.0, 4.0, 3.0, 0.1, 0.1);
    lv_spawnRegion = RegionPlayableMap();
    while ((libCOMI_gf_GameIsOver() == false)) {
        Wait(lv_waitTime, c_timeGame);
        lv_safetyInt = 1;
        for ( ; ( (autoF9AA7C4A_ai >= 0 && lv_safetyInt <= autoF9AA7C4A_ae) || (autoF9AA7C4A_ai < 0 && lv_safetyInt >= autoF9AA7C4A_ae) ) ; lv_safetyInt += autoF9AA7C4A_ai ) {
            lv_spawnLocation = RegionRandomPoint(lv_spawnRegion);
            if (((PathingType(lv_spawnLocation) != c_pathingGround) || (RegionContainsPoint(libCOMI_gf_CT_MutatorSafetyZone(), lv_spawnLocation) == true) || (UnitCountAlliance(libCOMI_gf_MutatorPlayer(), c_unitAllianceEnemy, RegionCircle(lv_spawnLocation, 50.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0))) {
                continue;
            }
            else {
                PlayerCreateEffectPoint(libCOMI_gf_MutatorPlayer(), "MutatorTimeWarpInitialCP", lv_spawnLocation);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_TimeWarpSpawn_Init () {
    libCOMU_gt_CT_TimeWarpSpawn = TriggerCreate("libCOMU_gt_CT_TimeWarpSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_TimeWarpSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_InitializeTheMist
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_InitializeTheMist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSpawnCount;
    int lv_vMaxSpawnAttempts;
    int lv_vSpawnAttempt;
    point lv_vPoint;
    int lv_vDistance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vMaxSpawnAttempts = 3000;
    lv_vDistance = 21;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath5, true);
    TriggerEnable(libCOMU_gt_MM_MistTerrorDies, true);
    TriggerEnable(libCOMU_gt_MM_ScannerSweepCounter, true);
    TriggerExecute(libCOMU_gt_MM_MistMovement, true, false);
    TriggerExecute(libCOMU_gt_MM_TerrorSpawn, true, false);
    TriggerExecute(libCOMI_gt_MM_PX_InitPlayerX, true, true);
    while ((lv_vSpawnAttempt < lv_vMaxSpawnAttempts)) {
        if ((lv_vSpawnAttempt >= 2500)) {
            lv_vDistance = 21;
            lv_vPoint = RegionRandomPoint(RegionEntireMap());
        }
        else {
            lv_vPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
        if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_vPoint, 25.0, libCOMI_gf_AffectedPlayers()) == true) && (UnitCount("ShadowCloudEpilogue01", c_playerAny, RegionCircle(lv_vPoint, lv_vDistance), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount(null, c_playerAny, RegionCircle(lv_vPoint, 22.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && libCOMI_gf_ConnectedByGroundPath(lv_vPoint)) {
            lv_vSpawnCount += 1;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ShadowCloudEpilogue01", 0, libCOMI_gf_MutatorPlayer(), lv_vPoint);
            UnitGroupAdd(libCOMI_gv_cT_SpawnedUnits, UnitLastCreated());
            UnitGroupAdd(libCOMU_gv_mM_Mists, UnitLastCreated());
        }
        else {
            lv_vSpawnAttempt += 1;
        }
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamage", "Amount", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(30.0, 40.0, 50.0, 60.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamageAOE", "Amount", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(10.0, 15.0, 20.0, 25.0, 0.0, 0.0), 0));
    Wait(900.0, c_timeAI);
    libCOMU_gv_mM_ShadowTerrorSize = 1.4;
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsSearch", "AreaArray[" + IntToString(0) + "].Radius", libCOMI_gf_MutatorPlayer(), "2");
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamage", "Amount", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(60.0, 70.0, 80.0, 90.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogEffect, "ShadowTerrorClawsDamageAOE", "Amount", libCOMI_gf_MutatorPlayer(), FixedToString(libCOMI_gf_MinimumDifficultyValueCoopReal(25.0, 30.0, 35.0, 40.0, 0.0, 0.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "ShadowTerror", "LifeMax", libCOMI_gf_MutatorPlayer(), "15000");
    CatalogFieldValueSet(c_gameCatalogUnit, "ShadowTerror", "LifeStart", libCOMI_gf_MutatorPlayer(), "15000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_InitializeTheMist_Init () {
    libCOMU_gt_MM_InitializeTheMist = TriggerCreate("libCOMU_gt_MM_InitializeTheMist_Func");
    TriggerAddEventGeneric(libCOMU_gt_MM_InitializeTheMist, ("Mutator " + "TheMist" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ShutdownMist
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ShutdownMist_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2E986F43_g;
    int auto2E986F43_u;
    unit auto2E986F43_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_MM_UnitDeath5, false);
    auto2E986F43_g = libCOMU_gv_mM_Mists;
    auto2E986F43_u = UnitGroupCount(auto2E986F43_g, c_unitCountAll);
    for (;; auto2E986F43_u -= 1) {
        auto2E986F43_var = UnitGroupUnitFromEnd(auto2E986F43_g, auto2E986F43_u);
        if (auto2E986F43_var == null) { break; }
        UnitRemove(auto2E986F43_var);
    }
    TriggerEnable(libCOMU_gt_MM_ScannerSweepCounter, false);
    TriggerStop(libCOMU_gt_MM_MistMovement);
    TriggerStop(libCOMU_gt_MM_TerrorSpawn);
    TriggerEnable(libCOMU_gt_MM_MistTerrorDies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ShutdownMist_Init () {
    libCOMU_gt_MM_ShutdownMist = TriggerCreate("libCOMU_gt_MM_ShutdownMist_Func");
    TriggerEnable(libCOMU_gt_MM_ShutdownMist, false);
    TriggerAddEventGeneric(libCOMU_gt_MM_ShutdownMist, ("Mutator " + "TheMist" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_UnitDeath 5
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_UnitDeath5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(libCOMI_gf_UnitIsAffectedByMutators(UnitGetType(EventUnit())))) {
            return false;
        }

        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((libCOMI_gf_UnitIsMutatorMissile(UnitGetType(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_MM_DeathInTheMist(EventUnit(), libNtve_gf_KillingUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_UnitDeath5_Init () {
    libCOMU_gt_MM_UnitDeath5 = TriggerCreate("libCOMU_gt_MM_UnitDeath5_Func");
    TriggerEnable(libCOMU_gt_MM_UnitDeath5, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_UnitDeath5, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MistMovement
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_MistMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexMist;
    point lv_targetLocation;
    int lv_searchAttempts;
    unitgroup lv_nearbyMists;
    int lv_left_or_Right;

    // Automatic Variable Declarations
    unitgroup auto99D52A45_g;
    int auto99D52A45_u;
    const int autoDF0C8258_ae = 50;
    const int autoDF0C8258_ai = 1;

    // Variable Initialization
    lv_nearbyMists = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto99D52A45_g = libCOMU_gv_mM_Mists;
        auto99D52A45_u = UnitGroupCount(auto99D52A45_g, c_unitCountAll);
        for (;; auto99D52A45_u -= 1) {
            lv_indexMist = UnitGroupUnitFromEnd(auto99D52A45_g, auto99D52A45_u);
            if (lv_indexMist == null) { break; }
            lv_nearbyMists = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(lv_indexMist), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupRemove(lv_nearbyMists, lv_indexMist);
            if ((UnitGroupCount(lv_nearbyMists, c_unitCountAlive) > 0)) {
                lv_targetLocation = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_indexMist), -3.0, UnitGetPosition(UnitGroupRandomUnit(lv_nearbyMists, c_unitCountAlive)));
            }
            else {
                lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_indexMist), 8.0, libNtve_gf_RandomAngle());
            }
            if ((UnitGroupCount(lv_nearbyMists, c_unitCountAlive) == 0)) {
                lv_searchAttempts = 1;
                for ( ; ( (autoDF0C8258_ai >= 0 && lv_searchAttempts <= autoDF0C8258_ae) || (autoDF0C8258_ai < 0 && lv_searchAttempts >= autoDF0C8258_ae) ) ; lv_searchAttempts += autoDF0C8258_ai ) {
                    lv_targetLocation = PointWithOffsetPolar(UnitGetPosition(lv_indexMist), 8.0, libNtve_gf_RandomAngle());
                    if ((libCOMI_gf_IsDistantFromAlliedCommandersStartPositions(lv_targetLocation, 25.0, libCOMI_gf_AffectedPlayers()) == true) && (UnitCount(null, c_playerAny, RegionCircle(lv_targetLocation, 20.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 0) && (UnitCount("ShadowCloudEpilogue01", c_playerAny, RegionCircle(lv_targetLocation, 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) == 1) && libCOMI_gf_ConnectedByGroundPath(lv_targetLocation)) {
                        break;
                    }
                    else {
                        lv_targetLocation = null;
                    }
                }
            }

            if ((lv_targetLocation != null) && ((UnitGroupCount(lv_nearbyMists, c_unitCountAlive) > 0) || (RandomInt(0, 100) >= 92))) {
                UnitIssueOrder(lv_indexMist, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetLocation), c_orderQueueReplace);
            }

        }
        Wait(RandomFixed(8.0, 15.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_MistMovement_Init () {
    libCOMU_gt_MM_MistMovement = TriggerCreate("libCOMU_gt_MM_MistMovement_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_TerrorSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_TerrorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vTargets;
    int lv_i;
    unit lv_vPickedTarget;
    fixed lv_vInterval;

    // Automatic Variable Declarations
    unitgroup auto97546052_g;
    int auto97546052_u;
    unit auto97546052_var;
    int auto6EBB2E8D_ae;
    int auto6EBB2E8D_var;
    const int autoF421A738_n = 1000;
    int autoF421A738_i;

    // Variable Initialization
    lv_vTargets = UnitGroupEmpty();
    lv_vInterval = 10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vInterval = libCOMI_gf_MinimumDifficultyValueCoopReal(40.0, 40.0, 35.0, 30.0, 0.0, 0.0);
    while (true) {
        Wait(RandomFixed((lv_vInterval * 0.5), (lv_vInterval * 1.8)), c_timeGame);
        UnitGroupClear(lv_vTargets);
        auto97546052_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto97546052_u = UnitGroupCount(auto97546052_g, c_unitCountAll);
        for (;; auto97546052_u -= 1) {
            auto97546052_var = UnitGroupUnitFromEnd(auto97546052_g, auto97546052_u);
            if (auto97546052_var == null) { break; }
            UnitGroupAddUnitGroup(lv_vTargets, UnitGroupAlliance(libCOMI_gf_AffectedPlayer(0), c_unitAllianceAlly, RegionCircle(UnitGetPosition(auto97546052_var), 8.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        }
        if ((UnitGroupCount(lv_vTargets, c_unitCountAlive) >= 1)) {
            lv_i = MaxI(MinI((UnitGroupCount(lv_vTargets, c_unitCountAlive) / 30), 5), 1);
            auto6EBB2E8D_ae = lv_i;
            auto6EBB2E8D_var = 1;
            for ( ; auto6EBB2E8D_var <= auto6EBB2E8D_ae; auto6EBB2E8D_var += 1 ) {
                for (autoF421A738_i = 1; autoF421A738_i <= autoF421A738_n; autoF421A738_i += 1) {
                    lv_vPickedTarget = UnitGroupRandomUnit(lv_vTargets, c_unitCountAlive);
                    if ((UnitGroupCount(UnitGroup("ShadowTerror", c_playerAny, RegionCircle(UnitGetPosition(lv_vPickedTarget), 20.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (PathingType(UnitGetPosition(lv_vPickedTarget)) == c_pathingGround)) {
                        libCOMU_gf_MM_TerrorSpawn(lv_vPickedTarget);
                        break;
                    }

                }
            }
        }

        if ((GameGetMissionTime() >= 600.0)) {
            lv_vInterval = libCOMI_gf_MinimumDifficultyValueCoopReal(35.0, 30.0, 25.0, 20.0, 0.0, 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_TerrorSpawn_Init () {
    libCOMU_gt_MM_TerrorSpawn = TriggerCreate("libCOMU_gt_MM_TerrorSpawn_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_ScannerSweepCounter
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_ScannerSweepCounter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        Wait(RandomFixed(1.0, 3.0), c_timeGame);
        SoundPlayAtPointForPlayer(SoundLink("EventEP03_ThunderOneShot", -1), c_maxPlayers, PlayerGroupAll(), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0, 500.0, 0.0);
        Wait(1.5, c_timeGame);
        GameDestroyEffects(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 1.0, 1, "ScannerSweep");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_ScannerSweepCounter_Init () {
    libCOMU_gt_MM_ScannerSweepCounter = TriggerCreate("libCOMU_gt_MM_ScannerSweepCounter_Func");
    TriggerEnable(libCOMU_gt_MM_ScannerSweepCounter, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_MM_ScannerSweepCounter, c_playerAny, "ScannerSweep");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM_MistTerrorDies
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MM_MistTerrorDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2CC0B013_g;
    int auto2CC0B013_u;
    unit auto2CC0B013_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ShadowTerror"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2CC0B013_g = UnitGroup("ShadowCloudEpilogue01", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto2CC0B013_u = UnitGroupCount(auto2CC0B013_g, c_unitCountAll);
    for (;; auto2CC0B013_u -= 1) {
        auto2CC0B013_var = UnitGroupUnitFromEnd(auto2CC0B013_g, auto2CC0B013_u);
        if (auto2CC0B013_var == null) { break; }
        ActorSend(libNtve_gf_MainActorofUnit(auto2CC0B013_var), libNtve_gf_SetOpacity(0.0, 10.0));
        Wait(10.0, c_timeGame);
        UnitRemove(auto2CC0B013_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MM_MistTerrorDies_Init () {
    libCOMU_gt_MM_MistTerrorDies = TriggerCreate("libCOMU_gt_MM_MistTerrorDies_Func");
    TriggerEnable(libCOMU_gt_MM_MistTerrorDies, false);
    TriggerAddEventUnitDied(libCOMU_gt_MM_MistTerrorDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeTrickOrTreat
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeTrickOrTreat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_initialCandy;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup autoA5A3C408_g;
    string auto512CE2B9_val;

    // Variable Initialization
    lv_initialCandy = -10.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorCandyBowl", 0, libCOMI_gv_vU_PLAYER_NEUTRAL, libCOMI_gf_GetPlayersBaseMiddlePoint(libCOMI_gf_AffectedPlayers()));
    libCOMU_gv_cT_CandyBowlUnit = UnitLastCreated();
    UnitStatusBarClearOverride(libCOMU_gv_cT_CandyBowlUnit);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_COMU_DB1AC958"), 24, UnitGetPosition(libCOMU_gv_cT_CandyBowlUnit), 3.0, true, false, PlayerGroupAll());
    libCOMU_gv_cT_CandyBowlTextTag = TextTagLastCreated();
    TriggerEnable(libCOMU_gt_CT_CandyBowlTextUpdate, true);
    libCOMI_gf_DisplaySingularBossBarVoidCampaign("Assets\\Textures\\btn-tips-scrap.dds", StringExternal("Param/Value/lib_COMU_066CB91C"), 50);
    UnitAbilityAddChargeUsed(libCOMU_gv_cT_CandyBowlUnit, "MutatorBuyCandy", "Abil/MutatorBuyCandy", lv_initialCandy);
    libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCOMU_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
    if ((libCOMI_gf_MutatorIsEnabled("TrickOrTreat") == true)) {
        TriggerEnable(libCOMU_gt_CT_TrickOrTreatSpawn, true);
    }

    Wait(1.0, c_timeGame);
    libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCOMU_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
    Wait(0.0625, c_timeGame);
    autoA5A3C408_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(autoA5A3C408_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        auto512CE2B9_val = PlayerRace(lv_indexPlayer);
        if (auto512CE2B9_val == "Terr") {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_TerrHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto512CE2B9_val == "Prot") {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_ProtHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto512CE2B9_val == "Zerg") {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_ZergHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else {
            SoundtrackDefault(PlayerGroupSingle(lv_indexPlayer), c_soundtrackCategoryMusic, "Music_TerrHalloween", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
    }
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "HalloweenMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeTrickOrTreat_Init () {
    libCOMU_gt_CT_InitializeTrickOrTreat = TriggerCreate("libCOMU_gt_CT_InitializeTrickOrTreat_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeTrickOrTreat, ("Mutator " + "TrickOrTreat" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownTrickOrTreat
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownTrickOrTreat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_TrickOrTreatSpawn, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownTrickOrTreat_Init () {
    libCOMU_gt_CT_ShutdownTrickOrTreat = TriggerCreate("libCOMU_gt_CT_ShutdownTrickOrTreat_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownTrickOrTreat, ("Mutator " + "TrickOrTreat" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MU_CandyBowlMassBuy
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_MU_CandyBowlMassBuy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    order lv_order;
    int lv_p;
    unit lv_u;
    int lv_i;
    fixed lv_charge;

    // Automatic Variable Declarations
    const int autoD68BC062_ae = 9;
    const int autoD68BC062_ai = 1;

    // Variable Initialization
    lv_order = EventUnitOrder();
    lv_p = OrderGetPlayer(lv_order);
    lv_u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((OrderGetFlag(lv_order, c_cmdQueued) == true)) {
        lv_order = Order(OrderGetAbilityCommand(lv_order));
        OrderSetPlayer(lv_order,lv_p);
        TriggerEnable(TriggerGetCurrent(), false);
        lv_i = 1;
        for ( ; ( (autoD68BC062_ai >= 0 && lv_i <= autoD68BC062_ae) || (autoD68BC062_ai < 0 && lv_i >= autoD68BC062_ae) ) ; lv_i += autoD68BC062_ai ) {
            if ((UnitOrderIsValid(lv_u, lv_order) == true)) {
                UnitIssueOrder(lv_u, lv_order, c_orderQueueAddToEnd);
            }
            else {
                break;
            }
        }
        ActorCreate(ActorScopeFromUnit(lv_u), "CandyBowlCandyX", null, null, null);
        ActorSend(libNtve_gf_ActorLastCreated(), (("SetText " + ("+" + IntToString(lv_i)))));
        TriggerEnable(TriggerGetCurrent(), true);
        Wait(0.0, c_timeGame);
        ActorScopeSend(ActorScopeFromUnit(EventUnit()), "Signal CandyCountHide");
    }

    Wait(0.0625, c_timeGame);
    lv_charge = UnitAbilityChargeInfo(lv_u, libCOMU_gv_candyChargeCmd, c_unitAbilChargeCountLeft);
    if ((lv_charge == 0.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply A");
    }
    else if ((lv_charge < 25.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply B");
    }
    else if ((lv_charge < 50.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply C");
    }
    else if ((lv_charge == 50.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupRemoveAll");
        libNtve_gf_SendActorMessageToUnit(lv_u, "AnimGroupApply D");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_MU_CandyBowlMassBuy_Init () {
    libCOMU_gt_MU_CandyBowlMassBuy = TriggerCreate("libCOMU_gt_MU_CandyBowlMassBuy_Func");
    TriggerAddEventUnitOrder(libCOMU_gt_MU_CandyBowlMassBuy, null, libCOMU_gv_candyChargeCmd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_TrickOrTreatSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_TrickOrTreatSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spawningStructure;
    unit lv_targetStructure;
    int lv_minSpawn;
    int lv_maxSpawn;
    int lv_extraSpawn;
    int lv_spawnAttempt;

    // Automatic Variable Declarations
    const int autoA94311A5_ae = 100;
    const int autoA94311A5_ai = 1;
    int auto98B99042_ae;
    int auto98B99042_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_spawnAttempt = 1;
    for ( ; ( (autoA94311A5_ai >= 0 && lv_spawnAttempt <= autoA94311A5_ae) || (autoA94311A5_ai < 0 && lv_spawnAttempt >= autoA94311A5_ae) ) ; lv_spawnAttempt += autoA94311A5_ai ) {
        lv_spawningStructure = UnitGroupRandomUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        lv_targetStructure = UnitGroupRandomUnit(UnitGroup(null, RandomInt(1, 2), RegionPlayableMap(), UnitFilter((1 << c_targetFilterStructure) | (1 << c_targetFilterPreventDefeat), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
        if (libCOMI_gf_ConnectedByGroundPath(UnitGetPosition(lv_spawningStructure))) {
            break;
        }

    }
    lv_minSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 3);
    lv_maxSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 1, 2, 2, 2, 3);
    if ((GameGetMissionTime() <= 360.0)) {
    }
    else if ((GameGetMissionTime() <= 720.0)) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(0, 1, 2, 2, 2, 2);
    }
    else if ((GameGetMissionTime() <= 1080.0)) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(1, 2, 2, 3, 4, 4);
    }
    else if (true) {
        lv_extraSpawn = libCOMI_gf_MinimumDifficultyValueCoopInteger(2, 3, 3, 4, 5, 5);
    }
    lv_minSpawn += lv_extraSpawn;
    lv_maxSpawn += lv_extraSpawn;
    auto98B99042_ae = RandomInt(lv_minSpawn, lv_maxSpawn);
    auto98B99042_var = 1;
    for ( ; auto98B99042_var <= auto98B99042_ae; auto98B99042_var += 1 ) {
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            libCOMU_gf_CT_TrickOrTreaterLogic(UnitLastCreated());
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, PointWithOffsetPolar(UnitGetPosition(lv_spawningStructure), 1.0, libNtve_gf_RandomAngle()));
            libCOMU_gf_CT_TrickOrTreaterLogic(UnitLastCreated());
        }
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), libCOMI_gf_GetPlayersBaseMiddlePoint(PlayerGroupEmpty())), c_orderQueueReplace);
        UnitGroupAddUnitGroup(libCOMI_gv_cT_OnDeathSpawns, UnitLastCreatedGroup());
        libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_TrickOrTreatSpawn_Init () {
    libCOMU_gt_CT_TrickOrTreatSpawn = TriggerCreate("libCOMU_gt_CT_TrickOrTreatSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_TrickOrTreatSpawn, false);
    TriggerAddEventTimePeriodic(libCOMU_gt_CT_TrickOrTreatSpawn, 30.0, c_timeAI);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_CandyBowlTextUpdate
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_CandyBowlTextUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign(FixedToInt(UnitAbilityChargeInfo(libCOMU_gv_cT_CandyBowlUnit, AbilityCommand("MutatorBuyCandy", 0), c_unitAbilChargeCountLeft)), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_CandyBowlTextUpdate_Init () {
    libCOMU_gt_CT_CandyBowlTextUpdate = TriggerCreate("libCOMU_gt_CT_CandyBowlTextUpdate_Func");
    TriggerEnable(libCOMU_gt_CT_CandyBowlTextUpdate, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_CandyBowlTextUpdate, UnitRefFromVariable("libCOMU_gv_cT_CandyBowlUnit"), AbilityCommand("MutatorBuyCandy", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeUberDarkness
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeUberDarkness_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;
    string lv_stringUnitID;
    fixed lv_sightRange;
    int lv_catalogIndex;

    // Automatic Variable Declarations
    int auto9AFF4A66_ae;
    const int auto9AFF4A66_ai = 1;
    playergroup auto829A59D6_g;

    // Variable Initialization
    lv_stringUnitID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UpgradeChanged, true);
    GameSetLighting("MutatorVeryDark", 0.0);
    auto9AFF4A66_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_catalogIndex = 1;
    for ( ; ( (auto9AFF4A66_ai >= 0 && lv_catalogIndex <= auto9AFF4A66_ae) || (auto9AFF4A66_ai < 0 && lv_catalogIndex >= auto9AFF4A66_ae) ) ; lv_catalogIndex += auto9AFF4A66_ai ) {
        lv_stringUnitID = (CatalogEntryGet(c_gameCatalogUnit, lv_catalogIndex));
        if ((UnitTypeTestAttribute(UnitTypeFromString(lv_stringUnitID), c_unitAttributeMapBoss) == true)) {
            continue;
        }
        else if ((UnitTypeTestAttribute(UnitTypeFromString(lv_stringUnitID), c_unitAttributeStructure) == true)) {
            if ((libCOMI_gf_CC_UnitTypeIsTownHall((lv_stringUnitID)) == true) && (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, (lv_stringUnitID), "Speed", c_playerAny) <= 0.0)) {
                lv_sightRange = libCOMI_gf_MinimumDifficultyValueCoopReal(9.0, 9.0, 7.0, 7.0, 7.0, 7.0);
            }
            else {
                lv_sightRange = libCOMI_gf_MinimumDifficultyValueCoopReal(4.0, 3.0, 2.0, 2.0, 2.0, 2.0);
            }
        }
        else if (true) {
            lv_sightRange = 0.0;
        }
        auto829A59D6_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto829A59D6_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, lv_stringUnitID, "Sight", lv_indexPlayer, FixedToString(lv_sightRange, 2));
        }
    }
    TriggerExecute(libCOMU_gt_CT_UberDarknessSpotlight, true, false);
    TriggerExecute(libCOMU_gt_CT_InitializeBlackFog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeUberDarkness_Init () {
    libCOMU_gt_CT_InitializeUberDarkness = TriggerCreate("libCOMU_gt_CT_InitializeUberDarkness_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeUberDarkness, ("Mutator " + "UberDarkness" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownUberDarkness
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownUberDarkness_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UpgradeChanged, false);
    TriggerStop(libCOMU_gt_CT_UberDarknessSpotlight);
    TriggerExecute(libCOMU_gt_CT_ShutdownBlackFog, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownUberDarkness_Init () {
    libCOMU_gt_CT_ShutdownUberDarkness = TriggerCreate("libCOMU_gt_CT_ShutdownUberDarkness_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownUberDarkness, ("Mutator " + "UberDarkness" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UpgradeChanged
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UpgradeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyUberDarkness(EventUpgradeName(), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UpgradeChanged_Init () {
    libCOMU_gt_CT_UpgradeChanged = TriggerCreate("libCOMU_gt_CT_UpgradeChanged_Func");
    TriggerEnable(libCOMU_gt_CT_UpgradeChanged, false);
    TriggerAddEventUpgradeLevelChanged(libCOMU_gt_CT_UpgradeChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UberDarknessSpotlight
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UberDarknessSpotlight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_spotlightArea;
    int lv_humanPlayer;
    int lv_spotlightPlayer;
    unitgroup lv_nearbyUnits;
    fixed lv_distance;

    // Automatic Variable Declarations
    playergroup auto5F37148D_g;
    playergroup auto0528BC22_g;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.0625, c_timeGame);
        auto5F37148D_g = libCOMI_gf_AffectedPlayers();
        lv_spotlightPlayer = -1;
        while (true) {
            lv_spotlightPlayer = PlayerGroupNextPlayer(auto5F37148D_g, lv_spotlightPlayer);
            if (lv_spotlightPlayer < 0) { break; }
            lv_nearbyUnits = UnitGroupAlliance(lv_spotlightPlayer, c_unitAllianceAlly, RegionCircle(CameraGetTarget(lv_spotlightPlayer), 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) == 0)) {
                continue;
            }

            lv_distance = DistanceBetweenPoints(CameraGetTarget(lv_spotlightPlayer), UnitGetPosition(UnitGroupClosestToPoint(lv_nearbyUnits, CameraGetTarget(lv_spotlightPlayer))));
            lv_spotlightArea = RegionCircle(CameraGetTarget(lv_spotlightPlayer), (libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_spotlightPlayer), 8.0, 7.0, 4.0, 4.0, 4.0, 4.0)+(3.0*(1.0-(lv_distance/12.0)))));
            lv_spotlightArea = RegionCircle(CameraGetTarget(lv_spotlightPlayer), (4.0+(libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_spotlightPlayer), 7.0, 6.0, 3.0, 3.0, 3.0, 3.0)*(1.0-(lv_distance/12.0)))));
            auto0528BC22_g = libCOMI_gf_AffectedPlayers();
            lv_humanPlayer = -1;
            while (true) {
                lv_humanPlayer = PlayerGroupNextPlayer(auto0528BC22_g, lv_humanPlayer);
                if (lv_humanPlayer < 0) { break; }
                VisRevealArea(lv_humanPlayer, lv_spotlightArea, 0.0625, false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UberDarknessSpotlight_Init () {
    libCOMU_gt_CT_UberDarknessSpotlight = TriggerCreate("libCOMU_gt_CT_UberDarknessSpotlight_Func");
    TriggerEnable(libCOMU_gt_CT_UberDarknessSpotlight, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeUndyingEvil
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeUndyingEvil_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MutatorHybridImmortal", 0, libCOMI_gf_MutatorPlayer(), libARRA_gf_GetPlayerStartPosition(libCOMI_gf_MutatorPlayer()));
    libCOMI_gf_CreatePingFacingAngleCoop(libCOMI_gf_AffectedPlayers(), UnitGetPosition(UnitLastCreated()), 270.0, "PingBoss", ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetScale(PingLastCreated(), 0.6);
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/lib_COMU_C5BDE234"));
    libARRA_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    AISetUnitSuicide(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeUndyingEvil_Init () {
    libCOMU_gt_CT_InitializeUndyingEvil = TriggerCreate("libCOMU_gt_CT_InitializeUndyingEvil_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeUndyingEvil, ("Mutator " + "UndyingEvil" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownUndyingEvil
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownUndyingEvil_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hybridImmortal;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hybridImmortal = UnitGroupUnit(UnitGroup("MutatorHybridImmortal", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    libCOMI_gf_DestroyPingCoop(libARRA_gf_PingStoredForUnit(lv_hybridImmortal, 1));
    UnitRemove(lv_hybridImmortal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownUndyingEvil_Init () {
    libCOMU_gt_CT_ShutdownUndyingEvil = TriggerCreate("libCOMU_gt_CT_ShutdownUndyingEvil_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownUndyingEvil, ("Mutator " + "UndyingEvil" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeUnitSpeed
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeUnitSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoDE23EFBF_g;
    int autoDE23EFBF_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation2, true);
    TriggerEnable(libCOMU_gt_CT_OwnerChangesUnitSpeed, true);
    TriggerEnable(libCOMU_gt_CT_SpeedFreaksMorphCleanup, true);
    autoDE23EFBF_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE23EFBF_u = UnitGroupCount(autoDE23EFBF_g, c_unitCountAll);
    for (;; autoDE23EFBF_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoDE23EFBF_g, autoDE23EFBF_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_ApplyUnitSpeed(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeUnitSpeed_Init () {
    libCOMU_gt_CT_InitializeUnitSpeed = TriggerCreate("libCOMU_gt_CT_InitializeUnitSpeed_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeUnitSpeed, ("Mutator " + "UnitSpeed" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownUnitSpeed
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownUnitSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoDE461F12_g;
    int autoDE461F12_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_UnitCreation2, false);
    TriggerEnable(libCOMU_gt_CT_OwnerChangesUnitSpeed, false);
    TriggerEnable(libCOMU_gt_CT_SpeedFreaksMorphCleanup, false);
    autoDE461F12_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", libCOMI_gf_AffectedPlayer(0), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDE461F12_u = UnitGroupCount(autoDE461F12_g, c_unitCountAll);
    for (;; autoDE461F12_u -= 1) {
        lv_indexUnit = UnitGroupUnitFromEnd(autoDE461F12_g, autoDE461F12_u);
        if (lv_indexUnit == null) { break; }
        libCOMU_gf_CT_RemoveUnitSpeed(lv_indexUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownUnitSpeed_Init () {
    libCOMU_gt_CT_ShutdownUnitSpeed = TriggerCreate("libCOMU_gt_CT_ShutdownUnitSpeed_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownUnitSpeed, ("Mutator " + "UnitSpeed" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_UnitCreation2
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_UnitCreation2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_ApplyUnitSpeed(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_UnitCreation2_Init () {
    libCOMU_gt_CT_UnitCreation2 = TriggerCreate("libCOMU_gt_CT_UnitCreation2_Func");
    TriggerEnable(libCOMU_gt_CT_UnitCreation2, false);
    TriggerAddEventUnitCreated(libCOMU_gt_CT_UnitCreation2, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_OwnerChanges UnitSpeed
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_OwnerChangesUnitSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerOld()) == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(libCOMI_gf_GetAlliedCommandersPlayers(), EventUnitOwnerNew()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCOMU_gf_CT_RemoveUnitSpeed(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_OwnerChangesUnitSpeed_Init () {
    libCOMU_gt_CT_OwnerChangesUnitSpeed = TriggerCreate("libCOMU_gt_CT_OwnerChangesUnitSpeed_Func");
    TriggerEnable(libCOMU_gt_CT_OwnerChangesUnitSpeed, false);
    TriggerAddEventUnitChangeOwner(libCOMU_gt_CT_OwnerChangesUnitSpeed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_SpeedFreaksMorphCleanup
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_SpeedFreaksMorphCleanup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, c_unitPropNormal) == 0.0) || (UnitGetPropertyFixed(EventUnit(), c_unitPropBaseMovementSpeed, c_unitPropNormal) > 5.5))) {
        libCOMU_gf_CT_RemoveUnitSpeed(EventUnit());
    }
    else {
        libCOMU_gf_CT_ApplyUnitSpeed(EventUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_SpeedFreaksMorphCleanup_Init () {
    libCOMU_gt_CT_SpeedFreaksMorphCleanup = TriggerCreate("libCOMU_gt_CT_SpeedFreaksMorphCleanup_Func");
    TriggerEnable(libCOMU_gt_CT_SpeedFreaksMorphCleanup, false);
    TriggerAddEventUnitAbility(libCOMU_gt_CT_SpeedFreaksMorphCleanup, null, null, c_abilMorphStageStatsStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeVertigo
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeVertigo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cameraRoll;

    // Automatic Variable Declarations
    playergroup auto19D70A94_g;
    int auto19D70A94_var;
    playergroup auto5360DB2F_g;
    int auto5360DB2F_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeGame);
    while ((libCOMI_gf_GameIsOver() == false)) {
        SoundPlayForPlayer(SoundLink("MutatorVertigo", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        lv_cameraRoll = RandomFixed(0.0, 360.0);
        CinematicFade(false, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        auto19D70A94_g = libCOMI_gf_AffectedPlayers();
        auto19D70A94_var = -1;
        while (true) {
            auto19D70A94_var = PlayerGroupNextPlayer(auto19D70A94_g, auto19D70A94_var);
            if (auto19D70A94_var < 0) { break; }
            CameraSetValue(auto19D70A94_var, c_cameraValueRoll, lv_cameraRoll, 0.0, 0.0, 10.0);
        }
        CinematicFade(true, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
        Wait(libCOMI_gf_MinimumDifficultyValueCoopInteger(60, 40, 30, 20, 1, 1), c_timeGame);
    }
    CinematicFade(false, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    auto5360DB2F_g = libCOMI_gf_AffectedPlayers();
    auto5360DB2F_var = -1;
    while (true) {
        auto5360DB2F_var = PlayerGroupNextPlayer(auto5360DB2F_g, auto5360DB2F_var);
        if (auto5360DB2F_var < 0) { break; }
        CameraSetValue(auto5360DB2F_var, c_cameraValueRoll, 0.0, 0.0, 100.0, 0.0);
    }
    CinematicFade(true, 0.25, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeVertigo_Init () {
    libCOMU_gt_CT_InitializeVertigo = TriggerCreate("libCOMU_gt_CT_InitializeVertigo_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeVertigo, ("Mutator " + "Vertigo" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownVertigo
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownVertigo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_InitializeVertigo);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownVertigo_Init () {
    libCOMU_gt_CT_ShutdownVertigo = TriggerCreate("libCOMU_gt_CT_ShutdownVertigo_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownVertigo, ("Mutator " + "Vertigo" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeVoidRifts
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeVoidRifts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libCOMU_gt_CT_VoidRiftUnitMade, true);
    TriggerExecute(libCOMU_gt_CT_VoidRiftSpawn, true, false);
    TriggerExecute(libCOMU_gt_CT_VoidRiftMakeUnits, true, false);
    Wait(2.0, c_timeGame);
    VisRevealArea(libCOMI_gf_MutatorPlayer(), RegionPlayableMap(), 0.1, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeVoidRifts_Init () {
    libCOMU_gt_CT_InitializeVoidRifts = TriggerCreate("libCOMU_gt_CT_InitializeVoidRifts_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeVoidRifts, ("Mutator " + "VoidRifts" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownVoidRifts
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownVoidRifts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_VoidRiftSpawn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownVoidRifts_Init () {
    libCOMU_gt_CT_ShutdownVoidRifts = TriggerCreate("libCOMU_gt_CT_ShutdownVoidRifts_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownVoidRifts, ("Mutator " + "VoidRifts" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_VoidRiftUnitMade
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_VoidRiftUnitMade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libCOMI_gf_MutatorPlayers(), EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitTarget), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    AISetUnitSuicide(EventPlayerEffectUsedUnit(c_effectUnitTarget), true);
    AISetUnitScriptControlled(EventPlayerEffectUsedUnit(c_effectUnitTarget), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_VoidRiftUnitMade_Init () {
    libCOMU_gt_CT_VoidRiftUnitMade = TriggerCreate("libCOMU_gt_CT_VoidRiftUnitMade_Func");
    TriggerEnable(libCOMU_gt_CT_VoidRiftUnitMade, false);
    TriggerAddEventPlayerEffectUsed(libCOMU_gt_CT_VoidRiftUnitMade, c_playerAny, "MutatorVoidRiftSpawnLMImpactDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_VoidRiftMakeUnits
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_VoidRiftMakeUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rift;
    timer lv_riftTimer;
    timer lv_riftTrickleTimer;
    unitgroup lv_riftSpawnUnits;
    unit lv_riftSpawnedUnit;
    int lv_spawnAttempts;
    point lv_spawnLocation;
    fixed lv_tricklePeriod;
    int lv_trickleOption;
    bool lv_customMode;

    // Automatic Variable Declarations
    unitgroup auto5CF3AC25_g;
    int auto5CF3AC25_u;
    int auto25BCDEE5_val;

    // Variable Initialization
    lv_riftTimer = TimerCreate();
    lv_riftTrickleTimer = TimerCreate();
    lv_riftSpawnUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_customMode = libCOMI_gf_CT_MutatorInCustom();
    while (true) {
        Wait(1.0, c_timeAI);
        auto5CF3AC25_g = libCOMU_gv_cT_VoidRifts;
        auto5CF3AC25_u = UnitGroupCount(auto5CF3AC25_g, c_unitCountAll);
        for (;; auto5CF3AC25_u -= 1) {
            lv_rift = UnitGroupUnitFromEnd(auto5CF3AC25_g, auto5CF3AC25_u);
            if (lv_rift == null) { break; }
            if ((lv_customMode == true)) {
                lv_tricklePeriod = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lv_rift)), 42.0, 36.0, 30.0, 24.0, 24.0, 24.0);
            }
            else {
                lv_tricklePeriod = libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lv_rift)), 21.0, 18.0, 15.0, 12.0, 12.0, 12.0);
            }
            lv_riftTimer = DataTableGetTimer(true, ("RiftTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))));
            lv_riftTrickleTimer = DataTableGetTimer(true, ("RiftTrickleTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))));
            if ((UnitIsAlive(lv_rift) == false)) {
                libNtve_gf_StopTimer(lv_riftTimer);
                libNtve_gf_StopTimer(lv_riftTrickleTimer);
                DataTableSetTimer(true, ("RiftTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))), null);
                DataTableSetTimer(true, ("RiftTrickleTimer" + IntToString(FixedToInt(UnitGetCustomValue(lv_rift, 0)))), null);
                UnitGroupRemove(libCOMU_gv_cT_VoidRifts, lv_rift);
                continue;
            }

            if ((TimerGetRemaining(lv_riftTimer) <= 0.0)) {
                libCOMU_gf_CT_VoidRiftSpawnUnitsPlain(UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                libCOMU_gf_CT_VoidRiftBirthUnits(lv_rift, libCOMU_gf_CT_VoidRiftLastSpawnedUnits());
                TimerStart(lv_riftTimer, libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(UnitGetOwner(lv_rift)), 150.0, 130.0, 110.0, 90.0, 90.0, 90.0), false, c_timeAI);
            }
            else {
                if ((TimerGetRemaining(lv_riftTrickleTimer) <= 0.0)) {
                    lv_trickleOption = RandomInt(1, 3);
                    auto25BCDEE5_val = lv_trickleOption;
                    if (auto25BCDEE5_val == 1) {
                        if ((lv_customMode == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Roach", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                    }
                    else if (auto25BCDEE5_val == 2) {
                        if ((lv_customMode == true)) {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marauder", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                        else {
                            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Marine", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                        }
                    }
                    else if (auto25BCDEE5_val == 3) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zealot", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(2, "Zergling", c_unitCreateIgnorePlacement, UnitGetOwner(lv_rift), UnitGetPosition(lv_rift));
                    }
                    libCOMI_gf_CT_RegisterSpawnedUnitGroup(UnitLastCreatedGroup());
                    libCOMU_gf_CT_VoidRiftBirthUnits(lv_rift, UnitLastCreatedGroup());
                    if ((lv_trickleOption == 3) && (lv_customMode == false)) {
                        TimerStart(lv_riftTrickleTimer, (lv_tricklePeriod * 2.0), false, c_timeAI);
                    }
                    else {
                        TimerStart(lv_riftTrickleTimer, lv_tricklePeriod, false, c_timeAI);
                    }
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_VoidRiftMakeUnits_Init () {
    libCOMU_gt_CT_VoidRiftMakeUnits = TriggerCreate("libCOMU_gt_CT_VoidRiftMakeUnits_Func");
    TriggerEnable(libCOMU_gt_CT_VoidRiftMakeUnits, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_VoidRiftSpawn
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_VoidRiftSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(140.0, c_timeAI);
    while (true) {
        if ((GameGetMissionTime() >= 480.0)) {
            libCOMU_gf_CT_VoidRiftCreate(1);
            libCOMU_gf_CT_VoidRiftCreate(2);
        }

        libCOMU_gf_CT_VoidRiftCreate(1);
        libCOMU_gf_CT_VoidRiftCreate(2);
        Wait(libCOMI_gf_MinimumDifficultyValueCoopReal(180.0, 150.0, 110.0, 90.0, 80.0, 80.0), c_timeAI);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_VoidRiftSpawn_Init () {
    libCOMU_gt_CT_VoidRiftSpawn = TriggerCreate("libCOMU_gt_CT_VoidRiftSpawn_Func");
    TriggerEnable(libCOMU_gt_CT_VoidRiftSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_InitializeWorkerSleep
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_InitializeWorkerSleep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCOMU_gt_CT_WorkerSleep, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_InitializeWorkerSleep_Init () {
    libCOMU_gt_CT_InitializeWorkerSleep = TriggerCreate("libCOMU_gt_CT_InitializeWorkerSleep_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_InitializeWorkerSleep, ("Mutator " + "WorkerSleep" + " Initialize"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_ShutdownWorkerSleep
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_ShutdownWorkerSleep_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(libCOMU_gt_CT_WorkerSleep);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_ShutdownWorkerSleep_Init () {
    libCOMU_gt_CT_ShutdownWorkerSleep = TriggerCreate("libCOMU_gt_CT_ShutdownWorkerSleep_Func");
    TriggerAddEventGeneric(libCOMU_gt_CT_ShutdownWorkerSleep, ("Mutator " + "WorkerSleep" + " Shutdown"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: CT_WorkerSleep
//--------------------------------------------------------------------------------------------------
bool libCOMU_gt_CT_WorkerSleep_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    timer[3] lv_sleepTimer;
    int lv_indexPlayer;
    unit lv_sleepyWorker;
    unitgroup lv_workerGroup;
    unit lv_indexWorker;

    // Automatic Variable Declarations
    playergroup auto988F0CA4_g;
    playergroup auto8AFB545B_g;
    unitgroup auto70C29629_g;
    int auto70C29629_u;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_sleepTimer[init_i] = TimerCreate();
    }
    lv_workerGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto988F0CA4_g = libCOMI_gf_AffectedPlayers();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto988F0CA4_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        TimerStart(lv_sleepTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 60.0, 45.0, 30.0, 20.0, 0.0, 0.0), false, c_timeGame);
    }
    while (true) {
        Wait(1.0, c_timeGame);
        auto8AFB545B_g = libCOMI_gf_AffectedPlayers();
        lv_indexPlayer = -1;
        while (true) {
            lv_indexPlayer = PlayerGroupNextPlayer(auto8AFB545B_g, lv_indexPlayer);
            if (lv_indexPlayer < 0) { break; }
            if ((TimerGetRemaining(lv_sleepTimer[lv_indexPlayer]) <= 0.0)) {
                TimerStart(lv_sleepTimer[lv_indexPlayer], libCOMI_gf_DifficultyValueFixed2(libCOMI_gf_DifficultyLevelForPlayerCoop(lv_indexPlayer), 60.0, 45.0, 30.0, 20.0, 0.0, 0.0), false, c_timeGame);
                lv_workerGroup = UnitGroup(null, lv_indexPlayer, RegionEntireMap(), UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                auto70C29629_g = lv_workerGroup;
                auto70C29629_u = UnitGroupCount(auto70C29629_g, c_unitCountAll);
                for (;; auto70C29629_u -= 1) {
                    lv_indexWorker = UnitGroupUnitFromEnd(auto70C29629_g, auto70C29629_u);
                    if (lv_indexWorker == null) { break; }
                    if (((UnitHasBehavior2(lv_indexWorker, "MutatorWorkerSleep") == true) || (UnitGetType(lv_indexWorker) == "MULE"))) {
                        UnitGroupRemove(lv_workerGroup, lv_indexWorker);
                    }

                }
                lv_sleepyWorker = UnitGroupRandomUnit(lv_workerGroup, c_unitCountAlive);
                UnitBehaviorAdd(lv_sleepyWorker, "MutatorWorkerSleep", lv_sleepyWorker, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCOMU_gt_CT_WorkerSleep_Init () {
    libCOMU_gt_CT_WorkerSleep = TriggerCreate("libCOMU_gt_CT_WorkerSleep_Func");
    TriggerEnable(libCOMU_gt_CT_WorkerSleep, false);
}

void libCOMU_InitTriggers () {
    libCOMU_gt_MutatorsPlayerXInitialize_Init();
    libCOMU_gt_MM_PX_UnitDeathFix_Init();
    libCOMU_gt_MM_PX_UnitDeathFix2_Init();
    libCOMU_gt_MM_PX_UnitCreationFix_Init();
    libCOMU_gt_MM_PX_UnitDamageFix_Init();
    libCOMU_gt_MM_PX_UnitDamageFix2_Init();
    libCOMU_gt_CT_DebugDropPodSpawnNow_Init();
    libCOMU_gt_CT_DebugMakeVoidRift_Init();
    libCOMU_gt_CT_DebugMakePurifierBeam_Init();
    libCOMU_gt_CT_DebugRandomCycleNow_Init();
    libCOMU_gt_CT_DebugSpawnReanimator_Init();
    libCOMU_gt_CT_DebugAllCastersForceAbility_Init();
    libCOMU_gt_CT_DebugAllCastersSetEnergy_Init();
    libCOMU_gt_CT_DebugMissileMe_Init();
    libCOMU_gt_CT_DebugMissileGo_Init();
    libCOMU_gt_CT_DebugPathCost_Init();
    libCOMU_gt_CT_DebugCanPath_Init();
    libCOMU_gt_CT_DebugRiftSpawn_Init();
    libCOMU_gt_CT_DebugGiftSpawn_Init();
    libCOMU_gt_CT_DebugGiftSetPower_Init();
    libCOMU_gt_CT_DebugGiftPlayer_Init();
    libCOMU_gt_CT_DebugGiftEnemy_Init();
    libCOMU_gt_CT_DebugBoomBotSpawn_Init();
    libCOMU_gt_CT_DebugBrutal_Init();
    libCOMU_gt_CT_InitializeAfraidOfTheDark_Init();
    libCOMU_gt_CT_ShutdownAfraidOfTheDark_Init();
    libCOMU_gt_CT_UnitOrdered3_Init();
    libCOMU_gt_UT_AOTDFix_Init();
    libCOMU_gt_CT_InitializeAllCasters_Init();
    libCOMU_gt_CT_ShutdownAllCasters_Init();
    libCOMU_gt_CT_UnitCreation4_Init();
    libCOMU_gt_CT_OwnerChangesAllCasters_Init();
    libCOMU_gt_CT_AllCastersPeriodicCast_Init();
    libCOMU_gt_CT_InitializeAvenger_Init();
    libCOMU_gt_CT_ShutdownAvenger_Init();
    libCOMU_gt_CT_UnitDeath4_Init();
    libCOMU_gt_OwnerChangesAvenger_Init();
    libCOMU_gt_MM_AvengerFix_Init();
    libCOMU_gt_CT_InitializeBarrier_Init();
    libCOMU_gt_CT_ShutdownBarrier_Init();
    libCOMU_gt_CT_UnitDamage2_Init();
    libCOMU_gt_CT_InitializeBlackFog_Init();
    libCOMU_gt_CT_ShutdownBlackFog_Init();
    libCOMU_gt_CT_InitializeBlizzard_Init();
    libCOMU_gt_CT_ShutdownBlizzard_Init();
    libCOMU_gt_CT_BlizzardSpawn_Init();
    libCOMU_gt_CT_StatBlizzardFreeze_Init();
    libCOMU_gt_CT_BlizzardEntersSafetyZone_Init();
    libCOMU_gt_CT_BlizzardLeavesSafetyZone_Init();
    libCOMU_gt_MM_InitializeBloodlust_Init();
    libCOMU_gt_MM_ShutdownBloodlust_Init();
    libCOMU_gt_MM_UnitCreation4_Init();
    libCOMU_gt_MutatorUnitCreationEvent4_Init();
    libCOMU_gt_MM_BloodlustActivated_Init();
    libCOMU_gt_MM_UnitChangesOwner_Init();
    libCOMU_gt_CT_InitializeBoomBots_Init();
    libCOMU_gt_CT_ShutdownBoomBots_Init();
    libCOMU_gt_CT_UnitDeath16_Init();
    libCOMU_gt_CT_BoomBotsSpawn_Init();
    libCOMU_gt_CT_BoomBotsInput_Init();
    libCOMU_gt_CT_InitializeConcussiveAttacks_Init();
    libCOMU_gt_CT_ShutdownConcussiveAttacks_Init();
    libCOMU_gt_CT_UnitDamage1_Init();
    libCOMU_gt_MM_InitializeDarkMirror_Init();
    libCOMU_gt_MM_ShutdownDarkMirror_Init();
    libCOMU_gt_DarkMirrorAttackForce_Init();
    libCOMU_gt_DarkMirrorDropForce_Init();
    libCOMU_gt_CT_InitializeDamageBounce_Init();
    libCOMU_gt_CT_ShutdownDamageBounce_Init();
    libCOMU_gt_CT_UnitDamage7_Init();
    libCOMU_gt_CT_InitializeDeathAOE_Init();
    libCOMU_gt_CT_ShutdownDeathAOE_Init();
    libCOMU_gt_CT_UnitDeath3_Init();
    libCOMU_gt_CT_InitializeDeathFire_Init();
    libCOMU_gt_CT_ShutdownDeathFire_Init();
    libCOMU_gt_CT_UnitDeath5_Init();
    libCOMU_gt_CT_InitializeDeathPull_Init();
    libCOMU_gt_CT_ShutdownDeathPull_Init();
    libCOMU_gt_CT_UnitDeath13_Init();
    libCOMU_gt_CT_InitializeDropPods_Init();
    libCOMU_gt_CT_ShutdownDropPods_Init();
    libCOMU_gt_CT_DropPodSpawn_Init();
    libCOMU_gt_CT_InitializeEvolve_Init();
    libCOMU_gt_CT_ShutdownEvolve_Init();
    libCOMU_gt_CT_UnitDeath7_Init();
    libCOMU_gt_CT_UnitDamage10_Init();
    libCOMU_gt_CT_InitializeEntomb_Init();
    libCOMU_gt_CT_ShutdownEntomb_Init();
    libCOMU_gt_CT_EntombApply_Init();
    libCOMU_gt_MM_InitializeEndurance_Init();
    libCOMU_gt_MM_ShutdownEndurance_Init();
    libCOMU_gt_MM_UnitRevivedFix2_Init();
    libCOMU_gt_MM_UnitCreation2_Init();
    libCOMU_gt_MutatorUnitCreationEvent2_Init();
    libCOMU_gt_CT_InitializeFear_Init();
    libCOMU_gt_CT_ShutdownFear_Init();
    libCOMU_gt_CT_UnitDamage11_Init();
    libCOMU_gt_CT_InitializeFireworks_Init();
    libCOMU_gt_CT_ShutdownFireworks_Init();
    libCOMU_gt_CT_UnitDeath12_Init();
    libCOMU_gt_CT_InitializeFoodHunt_Init();
    libCOMU_gt_CT_ShutdownFoodHunt_Init();
    libCOMU_gt_CT_UnitDeath9_Init();
    libCOMU_gt_CT_UnitDamage6_Init();
    libCOMU_gt_CT_FoodHuntDepleteFood_Init();
    libCOMU_gt_CT_FoodHuntHungerDamage_Init();
    libCOMU_gt_CT_FoodHuntSpawn_Init();
    libCOMU_gt_CT_FoodHuntFear_Init();
    libCOMU_gt_MM_InitializeGreatWall_Init();
    libCOMU_gt_MM_ShutdownGreatWall_Init();
    libCOMU_gt_MM_GW_ConstructionStarted_Init();
    libCOMU_gt_MM_GW_AICreatesAttackWaveDropPod_Init();
    libCOMU_gt_MM_GW_AICreatesAttackWaveWarpIn_Init();
    libCOMU_gt_MM_GW_AICreatesAttackWaveAIEvent_Init();
    libCOMU_gt_CT_InitializeGiftFight_Init();
    libCOMU_gt_CT_ShutdownGiftFight_Init();
    libCOMU_gt_CT_UnitCreation9_Init();
    libCOMU_gt_CT_GiftFightSpawn_Init();
    libCOMU_gt_CT_GiftFightControl_Init();
    libCOMU_gt_CT_GiftKillBotBanelingCredit_Init();
    libCOMU_gt_CT_GiftShrunkEffectOn_Init();
    libCOMU_gt_CT_GiftShrunkEffectOff_Init();
    libCOMU_gt_MM_GiftShrunkEffectOnFix_Init();
    libCOMU_gt_MM_GiftShrunkEffectOffFix_Init();
    libCOMU_gt_TT_InitializeHeroesFromTheStormOld_Init();
    libCOMU_gt_TT_ShutdownHeroesFromTheStormOld_Init();
    libCOMU_gt_TT_HeroesFromTheStormOld_Init();
    libCOMU_gt_CT_InitializeHeroesFromTheStorm_Init();
    libCOMU_gt_CT_ShutdownHeroesFromTheStorm_Init();
    libCOMU_gt_WaveSent_Init();
    libCOMU_gt_CT_AmonHeroPool_Tracker_Init();
    libCOMU_gt_CT_InitializeHardenedWill_Init();
    libCOMU_gt_CT_ShutdownHardenedWill_Init();
    libCOMU_gt_CT_UnitCreation10_Init();
    libCOMU_gt_CT_InitializeHybridDeathNuke_Init();
    libCOMU_gt_CT_ShutdownHybridDeathNuke_Init();
    libCOMU_gt_CT_UnitDeath6_Init();
    libCOMU_gt_MM_InitializeIcollectIchange_Init();
    libCOMU_gt_MM_ShutdownICollectIChange_Init();
    libCOMU_gt_MM_UnitDeath4_Init();
    libCOMU_gt_MM_InitializeInfestationStation_Init();
    libCOMU_gt_MM_ShutdownInfestationStation_Init();
    libCOMU_gt_MM_InfestionStationStructureAttack_Init();
    libCOMU_gt_CT_InitializeInspiration_Init();
    libCOMU_gt_CT_ShutdownInspiration_Init();
    libCOMU_gt_CT_UnitCreation11_Init();
    libCOMU_gt_CT_InitializeInsubordination_Init();
    libCOMU_gt_CT_ShutdownInsubordination_Init();
    libCOMU_gt_CT_UnitOrdered2_Init();
    libCOMU_gt_CT_InitializeJustDie_Init();
    libCOMU_gt_CT_ShutdownJustDie_Init();
    libCOMU_gt_CT_UnitCreation3_Init();
    libCOMU_gt_CT_JustDieTrainHealth_Init();
    libCOMU_gt_CT_JustDiePolarityInteraction_Init();
    libCOMU_gt_CT_InitializeKillBots_Init();
    libCOMU_gt_CT_ShutdownKillBots_Init();
    libCOMU_gt_CT_KillBotsSpawn_Init();
    libCOMU_gt_CT_InitializeKillKarma_Init();
    libCOMU_gt_CT_ShutdownKillKarma_Init();
    libCOMU_gt_CT_UnitDeath11_Init();
    libCOMU_gt_CT_InitializeLavaBurst_Init();
    libCOMU_gt_CT_ShutdownLavaBurst_Init();
    libCOMU_gt_CT_LavaBurstSpawn_Init();
    libCOMU_gt_CT_InitializeLifeLeech_Init();
    libCOMU_gt_CT_ShutdownLifeLeech_Init();
    libCOMU_gt_CT_UnitDamage5_Init();
    libCOMU_gt_CT_InitializeLongRange_Init();
    libCOMU_gt_CT_ShutdownLongRange_Init();
    libCOMU_gt_MM_LongRangeFix_Init();
    libCOMU_gt_CT_InitializeLaserDrill_Init();
    libCOMU_gt_CT_ShutdownLaserDrill_Init();
    libCOMU_gt_MutatorLaserDrillBeamSoundRegionClear_Init();
    libCOMU_gt_MutatorLaserDrillBeamSoundFiring_Init();
    libCOMU_gt_MM_InitializeLevelPlayingField_Init();
    libCOMU_gt_MM_ShutdownLevelPlayingField_Init();
    libCOMU_gt_MM_UnitRevivedFix_Init();
    libCOMU_gt_MutatorUnitCreationEvent1_Init();
    libCOMU_gt_MM_UnitCreation1_Init();
    libCOMU_gt_CT_InitializeMagMines_Init();
    libCOMU_gt_CT_ShutdownMagMines_Init();
    libCOMU_gt_CT_MagMineSpawn_Init();
    libCOMU_gt_MM_InitializeMatryoshka_Init();
    libCOMU_gt_MM_ShutdownMatryoshka_Init();
    libCOMU_gt_MM_UnitDeath2_Init();
    libCOMU_gt_CT_InitializeMinedOut_Init();
    libCOMU_gt_CT_ShutdownMinedOut_Init();
    libCOMU_gt_CT_ResourceSpawns_Init();
    libCOMU_gt_CT_InitializeMineFields_Init();
    libCOMU_gt_CT_ShutdownMineFields_Init();
    libCOMU_gt_CT_InitializeMissileBarrage_Init();
    libCOMU_gt_CT_ShutdownMissileBarrage_Init();
    libCOMU_gt_CT_UnitCreation5_Init();
    libCOMU_gt_CT_MissileBarrage_Init();
    libCOMU_gt_CT_MissileDeath_Init();
    libCOMU_gt_CT_InitializeMomentOfSilence_Init();
    libCOMU_gt_CT_ShutdownMomentOfSilence_Init();
    libCOMU_gt_CT_UnitDeath15_Init();
    libCOMU_gt_MM_InitializeMothership_Init();
    libCOMU_gt_MM_ShutdownMothership_Init();
    libCOMU_gt_MM_MothershipController_Init();
    libCOMU_gt_MM_MissileDrop_Init();
    libCOMU_gt_MM_MothershipCritical_Init();
    libCOMU_gt_MM_PlanetCracker_Init();
    libCOMU_gt_CT_InitializeNukes_Init();
    libCOMU_gt_CT_ShutdownNukes_Init();
    libCOMU_gt_CT_NukeSpawn_Init();
    libCOMU_gt_MM_InitializeNecronomicon_Init();
    libCOMU_gt_MM_ShutdownNecronomicon_Init();
    libCOMU_gt_MM_UnitDeath1_Init();
    libCOMU_gt_MM_NecronomiconAttackWave_Init();
    libCOMU_gt_MM_NecronomiconAttackWaveDefend_Init();
    libCOMU_gt_MM_InitializeNuclearMines_Init();
    libCOMU_gt_MM_ShutdownNuclearMines_Init();
    libCOMU_gt_MM_UnitDeath3_Init();
    libCOMU_gt_MM_InitializeOldTimes_Init();
    libCOMU_gt_MM_ShutdownOldTimes_Init();
    libCOMU_gt_MM_OT_InitialWorkerautomineStop_Init();
    libCOMU_gt_MM_OT_SelectionLimitations_Init();
    libCOMU_gt_MM_OT_AntiSmartCast_Init();
    libCOMU_gt_MM_OT_WorkerCreated_Init();
    libCOMU_gt_MM_OT_NoBuildQueue_Init();
    libCOMU_gt_MM_OT_StructureHotkeyCheck_Init();
    libCOMU_gt_MM_OT_WorkerBuildCheck_Init();
    libCOMU_gt_MM_OT_RallyFix_Init();
    libCOMU_gt_CT_InitializeOrbitalStrike_Init();
    libCOMU_gt_CT_ShutdownOrbitalStrike_Init();
    libCOMU_gt_CT_OrbitalStrikes_Init();
    libCOMU_gt_CT_InitializeOrderCosts_Init();
    libCOMU_gt_CT_ShutdownOrderCosts_Init();
    libCOMU_gt_CT_UnitOrdered1_Init();
    libCOMU_gt_CT_OrderCostCopyUsed_Init();
    libCOMU_gt_CT_InitializeOutbreak_Init();
    libCOMU_gt_CT_ShutdownOutbreak_Init();
    libCOMU_gt_CT_OutbreakSpawn_Init();
    libCOMU_gt_CT_InitializePermaCloak_Init();
    libCOMU_gt_CT_ShutdownPermaCloak_Init();
    libCOMU_gt_CT_UnitCreation1_Init();
    libCOMU_gt_CT_InitializePlague_Init();
    libCOMU_gt_CT_ShutdownPlague_Init();
    libCOMU_gt_CT_UnitCreation7_Init();
    libCOMU_gt_CT_UnitDeath10_Init();
    libCOMU_gt_CT_PlagueDeath_Init();
    libCOMU_gt_CT_InitializePolarity_Init();
    libCOMU_gt_CT_ShutdownPolarity_Init();
    libCOMU_gt_CT_UnitCreation6_Init();
    libCOMU_gt_CT_UnitDamage9_Init();
    libCOMU_gt_PolarityTimer_Init();
    libCOMU_gt_CT_InitializePropagate_Init();
    libCOMU_gt_CT_UnitDeath14_Init();
    libCOMU_gt_CT_PropagateClone_Init();
    libCOMU_gt_CT_PropagatorSpawn_Init();
    libCOMU_gt_CT_InitializePurifierBeam_Init();
    libCOMU_gt_CT_ShutdownPurifierBeam_Init();
    libCOMU_gt_CT_PurifierBeamController_Init();
    libCOMU_gt_CT_InitializePhotonOverload_Init();
    libCOMU_gt_CT_ShutdownPhotonOverload_Init();
    libCOMU_gt_CT_UnitDamage4_Init();
    libCOMU_gt_MM_InitializeRepulsiveField_Init();
    libCOMU_gt_MM_ShutdownRepulsiveField_Init();
    libCOMU_gt_MM_UnitDamageFix1_Init();
    libCOMU_gt_MM_InitializeRipFieldGenerators_Init();
    libCOMU_gt_MM_ShutdownRipFieldGenerators_Init();
    libCOMU_gt_MM_RipFieldGeneratorDamage_Init();
    libCOMU_gt_CT_ShutdownReducedVision_Init();
    libCOMU_gt_CT_InitializeRedEnvelopes_Init();
    libCOMU_gt_CT_ShutdownRedEnvelopes_Init();
    libCOMU_gt_CT_RedEnvelopeSpawns_Init();
    libCOMU_gt_CT_InitializeReanimators_Init();
    libCOMU_gt_CT_ShutdownReanimators_Init();
    libCOMU_gt_CT_DeathTrigger_ReanimatorCorpse_Init();
    libCOMU_gt_CT_ReanimatorSpawn_Init();
    libCOMU_gt_CT_ReanimatorLogic_Init();
    libCOMU_gt_CT_ReanimateUsed_Init();
    libCOMU_gt_CT_InitializeSideStep_Init();
    libCOMU_gt_CT_ShutdownSideStep_Init();
    libCOMU_gt_CT_UnitDamage3_Init();
    libCOMU_gt_CT_InitializeSharedSupply_Init();
    libCOMU_gt_CT_ShutdownSharedSupply_Init();
    libCOMU_gt_CT_SharedSupplyUpdate_Init();
    libCOMU_gt_CT_InitializeShortSighted_Init();
    libCOMU_gt_CT_ShutdownShortSighted_Init();
    libCOMU_gt_MM_InitializeShapeshifters_Init();
    libCOMU_gt_MM_ShutdownShapeshifters_Init();
    libCOMU_gt_MM_UnitDeath7_Init();
    libCOMU_gt_MM_UnitRemovedFix7_Init();
    libCOMU_gt_MM_Shapeshifter_Spawn_Init();
    libCOMU_gt_MM_ShapeshiftersInWaves_Init();
    libCOMU_gt_MM_InitializeTheUsualSuspects_Init();
    libCOMU_gt_MM_ShutdownTheUsualSuspects_Init();
    libCOMU_gt_MM_AmonHeroPoolAdd_Init();
    libCOMU_gt_MM_AmonHeroWaveSent_Init();
    libCOMU_gt_MM_AmonHeroHookTriggered_Init();
    libCOMU_gt_MM_AmonHeroDuration_Init();
    libCOMU_gt_MM_AmonHeroDies_Init();
    libCOMU_gt_CT_InitializeSluggishness_Init();
    libCOMU_gt_CT_ShutdownSluggishness_Init();
    libCOMU_gt_CT_InitializeSpawnBroodling_Init();
    libCOMU_gt_CT_ShutdownSpawnBroodling_Init();
    libCOMU_gt_CT_UnitDeath1_Init();
    libCOMU_gt_CT_InitializeSpawnInfested_Init();
    libCOMU_gt_CT_ShutdownSpawnInfested_Init();
    libCOMU_gt_CT_UnitDeath2_Init();
    libCOMU_gt_CT_InitializeStructureSteal_Init();
    libCOMU_gt_CT_ShutdownStructureSteal_Init();
    libCOMU_gt_CT_UnitCreation8_Init();
    libCOMU_gt_CT_OwnerChangesStructureSteal_Init();
    libCOMU_gt_CT_StructureStealLogic_Init();
    libCOMU_gt_CT_StructureStealTrigger_Init();
    libCOMU_gt_CT_StructureStealUnitTrained_Init();
    libCOMU_gt_CT_InitializeStoneZealots_Init();
    libCOMU_gt_CT_ShutdownStoneZealots_Init();
    libCOMU_gt_CT_StoneZealotsSpawn_Init();
    libCOMU_gt_MM_InitializeSupremeCommander_Init();
    libCOMU_gt_MM_ShutdownSupremeCommander_Init();
    libCOMU_gt_MM_UnitCreation3_Init();
    libCOMU_gt_MM_UnitRevivedFix3_Init();
    libCOMU_gt_MutatorUnitCreationEvent3_Init();
    libCOMU_gt_MM_UltraliskSizeFix_Init();
    libCOMU_gt_CT_InitializeTornadoes_Init();
    libCOMU_gt_CT_ShutdownTornadoes_Init();
    libCOMU_gt_CT_TornadoMovement_Init();
    libCOMU_gt_CT_InitializeTempDamageReflect_Init();
    libCOMU_gt_CT_ShutdownTempDamageReflect_Init();
    libCOMU_gt_CT_UnitDamage8_Init();
    libCOMU_gt_CT_TempDamageReflectHealing_Init();
    libCOMU_gt_CT_InitializeTemporalField_Init();
    libCOMU_gt_CT_ShutdownTemporalField_Init();
    libCOMU_gt_CT_TemporalFieldSpawn_Init();
    libCOMU_gt_CT_InitializeTimeWarp_Init();
    libCOMU_gt_CT_ShutdownTimeWarp_Init();
    libCOMU_gt_CT_TimeWarpSpawn_Init();
    libCOMU_gt_MM_InitializeTheMist_Init();
    libCOMU_gt_MM_ShutdownMist_Init();
    libCOMU_gt_MM_UnitDeath5_Init();
    libCOMU_gt_MM_MistMovement_Init();
    libCOMU_gt_MM_TerrorSpawn_Init();
    libCOMU_gt_MM_ScannerSweepCounter_Init();
    libCOMU_gt_MM_MistTerrorDies_Init();
    libCOMU_gt_CT_InitializeTrickOrTreat_Init();
    libCOMU_gt_CT_ShutdownTrickOrTreat_Init();
    libCOMU_gt_MU_CandyBowlMassBuy_Init();
    libCOMU_gt_CT_TrickOrTreatSpawn_Init();
    libCOMU_gt_CT_CandyBowlTextUpdate_Init();
    libCOMU_gt_CT_InitializeUberDarkness_Init();
    libCOMU_gt_CT_ShutdownUberDarkness_Init();
    libCOMU_gt_CT_UpgradeChanged_Init();
    libCOMU_gt_CT_UberDarknessSpotlight_Init();
    libCOMU_gt_CT_InitializeUndyingEvil_Init();
    libCOMU_gt_CT_ShutdownUndyingEvil_Init();
    libCOMU_gt_CT_InitializeUnitSpeed_Init();
    libCOMU_gt_CT_ShutdownUnitSpeed_Init();
    libCOMU_gt_CT_UnitCreation2_Init();
    libCOMU_gt_CT_OwnerChangesUnitSpeed_Init();
    libCOMU_gt_CT_SpeedFreaksMorphCleanup_Init();
    libCOMU_gt_CT_InitializeVertigo_Init();
    libCOMU_gt_CT_ShutdownVertigo_Init();
    libCOMU_gt_CT_InitializeVoidRifts_Init();
    libCOMU_gt_CT_ShutdownVoidRifts_Init();
    libCOMU_gt_CT_VoidRiftUnitMade_Init();
    libCOMU_gt_CT_VoidRiftMakeUnits_Init();
    libCOMU_gt_CT_VoidRiftSpawn_Init();
    libCOMU_gt_CT_InitializeWorkerSleep_Init();
    libCOMU_gt_CT_ShutdownWorkerSleep_Init();
    libCOMU_gt_CT_WorkerSleep_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCOMU_InitLib_completed = false;

void libCOMU_InitLib () {
    if (libCOMU_InitLib_completed) {
        return;
    }

    libCOMU_InitLib_completed = true;

    libCOMU_InitLibraries();
    libCOMU_InitVariables();
    libCOMU_InitTriggers();
}

include "LibCOMI"

