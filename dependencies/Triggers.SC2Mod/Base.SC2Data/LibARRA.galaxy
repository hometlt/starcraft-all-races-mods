include "TriggerLibs/NativeLib"
include "LibVSAI_h"

include "LibARRA_h"

//--------------------------------------------------------------------------------------------------
// Library: Utilities - Triggers
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libARRA_InitLibraries () {
    libNtve_InitVariables();
    libVSAI_InitVariables();
}

// Variable Initialization
bool libARRA_InitVariables_completed = false;

void libARRA_InitVariables () {
    int init_i;
    int init_j;

    if (libARRA_InitVariables_completed) {
        return;
    }

    libARRA_InitVariables_completed = true;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        libARRA_gv_pingResetTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libARRA_gv_pingSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libARRA_gv_pingLockoutTimer[init_i] = TimerCreate();
    }
    libARRA_gv_pingValidPlayers = PlayerGroupEmpty();
    libARRA_gv_pingPanelMinimapButton = c_invalidDialogControlId;
    libARRA_gv_meleeSurrender_PlayersSurrendering = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        libARRA_gv_meleeSurrender_PlayersAnswered[init_i] = PlayerGroupEmpty();
    }
    libARRA_gv_meleeSurrender_PlayersTried = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libARRA_gv_meleeSurrender_Dialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libARRA_gv_meleeSurrender_BtnYes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libARRA_gv_meleeSurrender_BtnNo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        libARRA_gv_meleeSurrender_Title[init_i] = c_invalidDialogControlId;
    }
    libARRA_gv_cRequirementAnd = 7;
    libARRA_gv_cRequirementCountUnit = 24;
    libARRA_gv_cRequirementCountUpgrade = 25;
    libARRA_gv_byPassUnits = "ByPassUnitsList";
    libARRA_gv_sEARCHMODE = libARRA_ge_SearchMode_Agressive;
    libARRA_gv_cACHE_DANGER_UNITS = " ";
    libARRA_gv_cACHE_DANGER_ABILITIES = " ";
    libARRA_gv_cACHE_DANGER_BEHAVIOR = " ";
    libARRA_gv_cACHE_SAFE_UNITS = " ";
    libARRA_gv_cACHE_SAFE_ABILITIES = " ";
    libARRA_gv_cACHE_SAFE_BEHAVIOR = " ";
    libARRA_gv_startactiveplayers = PlayerGroupActive();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libARRA_gv_teams[init_i] = PlayerGroupEmpty();
    }
    libARRA_gv_uT_InfoDialog = c_invalidDialogId;
    libARRA_gv_uT_InfoButton = c_invalidDialogControlId;
    libARRA_gv_uT_UI_Hidden = PlayerGroupEmpty();
    libARRA_gv_uT_ButtonUsagePlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libARRA_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libARRA_gv_uT_HotkeyToStoreButton[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= libARRA_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libARRA_gv_uT_HotkeyToStoreValue[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= libARRA_gv_uT_MAXEMOTES; init_i += 1) {
        libARRA_gv_uT_SC_Emoticons[init_i] = "";
    }
    for (init_i = 0; init_i <= libARRA_gv_uT_MAXEMOTES; init_i += 1) {
        libARRA_gv_uT_CS_Emoticons[init_i] = "";
    }
    libARRA_gv_uT_Emote_Dialog = c_invalidDialogId;
    libARRA_gv_uT_Emote_CloseButton = c_invalidDialogControlId;
    libARRA_gv_uT_SoundEmoteTimer = TimerCreate();
    libARRA_gv_uT_MissileCreators = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libARRA_gv_uT_Camera_Rotation[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libARRA_gv_uT_Camera_AngleofAttack[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    }
    libARRA_gv_uT_Dummies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            libARRA_gv_uT_DummyTimer[init_i][init_j] = TimerCreate();
        }
    }
    libARRA_gv_uT_DPS_UG = UnitGroupEmpty();
    libARRA_gv_uT_DPS_UG_Summoned = UnitGroupEmpty();
    for (init_i = 0; init_i <= libARRA_gv_uT_DPS_MaxUnits; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libARRA_gv_uT_DPS_Timer[init_i][init_j] = TimerCreate();
        }
    }
    libARRA_gv_uT_PlayersWithNumbers = PlayerGroupEmpty();
    libARRA_gv_uT_DL_LoggingPlayers = PlayerGroupEmpty();
    libARRA_gv_uT_DL_LogDialog = c_invalidDialogId;
    libARRA_gv_uT_DL_LogDialogItem = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libARRA_gv_uT_DL_PlayerData[init_i] = 1;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        libARRA_gv_uT_DevCommands[init_i] = libARRA_ge_UT_DevCommandTypes_Gamealtering;
    }
    libARRA_gv_uT_Graph_ButtonDialog = c_invalidDialogId;
    libARRA_gv_uT_Graph_Button = c_invalidDialogControlId;
    libARRA_gv_graphsGeneral.lv_intervals = 6;
    libARRA_gv_graphsGeneral.lv_container = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libARRA_gv_maxGraphs; init_i += 1) {
        libARRA_gv_graphsData[init_i].lv_graph = c_invalidDialogControlId;
        libARRA_gv_graphsData[init_i].lv_highFrame = c_invalidDialogControlId;
        libARRA_gv_graphsData[init_i].lv_title = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            libARRA_gv_uT_Pie[init_i][init_j] = c_invalidDialogId;
        }
    }
    libARRA_gv_aF_SlimUI_PlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libARRA_gv_cU_MinimapAllyViewPing[init_i] = c_invalidPingId;
    }
    libARRA_gv_cU_MinimapAllyViewEnabled = true;
    for (init_i = 0; init_i <= libARRA_gv_pLAYERS; init_i += 1) {
        libARRA_gv_cACHE_DISARMED[init_i] = " ";
    }
    for (init_i = 0; init_i <= libARRA_gv_pLAYERS; init_i += 1) {
        libARRA_gv_cACHE_ARMED[init_i] = " ";
    }
    libARRA_gv_listTypes = "^ListTypesMap";
    libARRA_gv_emittedEvent = "";
    libARRA_gv_emittedMessage = "";
    libARRA_gv_pERIODICEVENTS = "PERIODIC EVENTS";
    libARRA_gv_tIMERTRACKERSLIST = "TRACKED TIMERS";
    libARRA_gv_pickedUnits = UnitGroupEmpty();
    libARRA_gv_tRACKERS = "UNIT TRACKERS";
    libARRA_gv_lOG = "";
}

// Presets
// Functions
playergroup libARRA_gf_HumanControllingPlayers (int lp_player) {
    // Variable Declarations
    int lv_p;
    playergroup lv_result;

    // Automatic Variable Declarations
    playergroup auto797056DA_g;

    // Variable Initialization
    lv_result = PlayerGroupEmpty();

    // Implementation
    auto797056DA_g = libARRA_gf_HumanPlayers();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto797056DA_g, lv_p);
        if (lv_p < 0) { break; }
        if (((lv_p == lp_player) || (PlayerGetAlliance(lp_player, c_allianceIdControl, lv_p) == true))) {
            PlayerGroupAdd(lv_result, lv_p);
        }
    }
    return lv_result;
}

playergroup libARRA_gf_HumanPlayers () {
    // Variable Declarations
    int lv_p;
    playergroup lv_result;

    // Automatic Variable Declarations
    playergroup auto740F0A03_g;

    // Variable Initialization
    lv_result = PlayerGroupEmpty();

    // Implementation
    auto740F0A03_g = PlayerGroupActive();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto740F0A03_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerType(lv_p) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_result, lv_p);
        }
    }
    return lv_result;
}

void libARRA_gf_PlayUnitTransmission (string lp_transmission, unit lp_unit) {
    // Variable Declarations
    int lv_variations;
    int lv_startindex;
    int lv_assetindex;
    string lv_unit;
    int lv_entries;
    int lv_index;
    int lv_reverbBalance;
    int lv_player;
    string lv_asset;
    string lv_readySoundVolume;
    string lv_readySoundPitch;
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoB88FA0FF_g;
    int autoB88FA0FF_var;
    int auto5D5A1038_ae;
    const int auto5D5A1038_ai = 1;

    // Variable Initialization
    lv_unit = (UnitGetType(lp_unit));
    lv_player = UnitGetOwner(lp_unit);
    lv_asset = UserDataGetString("UnitSounds", lv_unit, "ReadySound", 1);
    lv_readySoundVolume = "";
    lv_readySoundPitch = "";
    lv_players = PlayerGroupEmpty();

    // Implementation
    autoB88FA0FF_g = libARRA_gf_HumanPlayers();
    autoB88FA0FF_var = -1;
    while (true) {
        autoB88FA0FF_var = PlayerGroupNextPlayer(autoB88FA0FF_g, autoB88FA0FF_var);
        if (autoB88FA0FF_var < 0) { break; }
        if ((UnitGroupUnit(UnitSubgroupSelected(autoB88FA0FF_var), 1) == EventUnit()) && (libARRA_gv_unitTransmissionActive[autoB88FA0FF_var] == false)) {
            PlayerGroupAdd(lv_players, autoB88FA0FF_var);
            libARRA_gv_unitTransmissionActive[autoB88FA0FF_var] = true;
        }

    }
    if ((lv_asset == "")) {
        libARRA_gf_LOGString(lv_unit);
    }
    lv_readySoundVolume = UserDataGetString("UnitSounds", lv_unit, "ReadyVolume", 1);
    lv_readySoundPitch = UserDataGetString("UnitSounds", lv_unit, "ReadyPitch", 1);
    lv_reverbBalance = UserDataGetInt("UnitSounds", lv_unit, "ReadyReverbBalance", 1);
    auto5D5A1038_ae = UserDataFieldValueCount("UnitSounds", "ReadySound");
    lv_index = 1;
    for ( ; ( (auto5D5A1038_ai >= 0 && lv_index <= auto5D5A1038_ae) || (auto5D5A1038_ai < 0 && lv_index >= auto5D5A1038_ae) ) ; lv_index += auto5D5A1038_ai ) {
        if ((lv_asset == "")) {
            break;
        }
        lv_variations = lv_index;
    }
    lv_assetindex = RandomInt(0, (lv_variations - 1));
    lv_asset = UserDataGetString("UnitSounds", lv_unit, "ReadySound", lv_assetindex);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogSound, "TriggerSound", "ReverbBalance.Room", 0, lv_reverbBalance);
    CatalogFieldValueSet(c_gameCatalogSound, "TriggerSound", "AssetArray[" + IntToString(0) + "].File", 0, lv_asset);
    CatalogFieldValueSet(c_gameCatalogSound, "TriggerSound", "AssetArray[" + IntToString(0) + "].Volume", 0, lv_readySoundVolume);
    CatalogFieldValueSet(c_gameCatalogSound, "TriggerSound", "AssetArray[" + IntToString(0) + "].Pitch", 0, lv_readySoundPitch);
    SoundPlayOnUnitForPlayer(SoundLink("TriggerSound", 0), 0, lv_players, EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
}

int libARRA_gf_DifficultyValueInt2 (int lp_casual, int lp_normal, int lp_hard, int lp_brutal) {
    // Automatic Variable Declarations
    int auto79CC034A_val;

    // Implementation
    auto79CC034A_val = PlayerDifficulty(1);
    if (auto79CC034A_val == 1) {
        return lp_casual;
    }
    else if (auto79CC034A_val == 2) {
        return lp_normal;
    }
    else if (auto79CC034A_val == 3) {
        return lp_hard;
    }
    else if (auto79CC034A_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

fixed libARRA_gf_DifficultyValueFixed2 (fixed lp_casual, fixed lp_normal, fixed lp_hard, fixed lp_brutal) {
    // Automatic Variable Declarations
    int auto343CAE46_val;

    // Implementation
    auto343CAE46_val = PlayerDifficulty(1);
    if (auto343CAE46_val == 1) {
        return lp_casual;
    }
    else if (auto343CAE46_val == 2) {
        return lp_normal;
    }
    else if (auto343CAE46_val == 3) {
        return lp_hard;
    }
    else if (auto343CAE46_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

string libARRA_gf_DifficultyValueVoidUnitType (string lp_casual, string lp_normal, string lp_hard, string lp_brutal) {
    // Automatic Variable Declarations
    int auto1D24AB2B_val;

    // Implementation
    auto1D24AB2B_val = PlayerDifficulty(1);
    if (auto1D24AB2B_val == 1) {
        return lp_casual;
    }
    else if (auto1D24AB2B_val == 2) {
        return lp_normal;
    }
    else if (auto1D24AB2B_val == 3) {
        return lp_hard;
    }
    else if (auto1D24AB2B_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

bool libARRA_gf_DifficultyValueVoidBoolean (bool lp_casual, bool lp_normal, bool lp_hard, bool lp_brutal) {
    // Automatic Variable Declarations
    int autoB18695FD_val;

    // Implementation
    autoB18695FD_val = PlayerDifficulty(1);
    if (autoB18695FD_val == 1) {
        return lp_casual;
    }
    else if (autoB18695FD_val == 2) {
        return lp_normal;
    }
    else if (autoB18695FD_val == 3) {
        return lp_hard;
    }
    else if (autoB18695FD_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

int libARRA_gf_DifficultyValueInt3 (int lp_easy, int lp_normal, int lp_hard) {
    // Automatic Variable Declarations
    int autoF8B228A2_val;

    // Implementation
    autoF8B228A2_val = PlayerDifficulty(1);
    if (autoF8B228A2_val == 1) {
        return lp_easy;
    }
    else if (autoF8B228A2_val == 2) {
        return lp_normal;
    }
    else if (autoF8B228A2_val == 3) {
        return lp_hard;
    }
    else if (autoF8B228A2_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

fixed libARRA_gf_DifficultyValueFixed3 (fixed lp_easy, fixed lp_normal, fixed lp_hard) {
    // Automatic Variable Declarations
    int auto86E0A348_val;

    // Implementation
    auto86E0A348_val = PlayerDifficulty(1);
    if (auto86E0A348_val == 1) {
        return lp_easy;
    }
    else if (auto86E0A348_val == 2) {
        return lp_normal;
    }
    else if (auto86E0A348_val == 3) {
        return lp_hard;
    }
    else if (auto86E0A348_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

string libARRA_gf_DifficultyValueSwarmUnitType (string lp_easy, string lp_normal, string lp_hard) {
    // Automatic Variable Declarations
    int autoD90CFE4C_val;

    // Implementation
    autoD90CFE4C_val = PlayerDifficulty(1);
    if (autoD90CFE4C_val == 1) {
        return lp_easy;
    }
    else if (autoD90CFE4C_val == 2) {
        return lp_normal;
    }
    else if (autoD90CFE4C_val == 3) {
        return lp_hard;
    }
    else if (autoD90CFE4C_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

bool libARRA_gf_DifficultyValueSwarmBoolean (bool lp_easy, bool lp_normal, bool lp_hard) {
    // Automatic Variable Declarations
    int auto76D50012_val;

    // Implementation
    auto76D50012_val = PlayerDifficulty(1);
    if (auto76D50012_val == 1) {
        return lp_easy;
    }
    else if (auto76D50012_val == 2) {
        return lp_normal;
    }
    else if (auto76D50012_val == 3) {
        return lp_hard;
    }
    else if (auto76D50012_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

trigger auto_libARRA_gf_PlaySoundLinkasMusic_Trigger = null;
soundlink auto_libARRA_gf_PlaySoundLinkasMusic_lp_soundLink;
bool auto_libARRA_gf_PlaySoundLinkasMusic_lp_loopForever;
bool auto_libARRA_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

void libARRA_gf_PlaySoundLinkasMusic (soundlink lp_soundLink, bool lp_loopForever, bool lp_unpauseSountrackAfter) {
    auto_libARRA_gf_PlaySoundLinkasMusic_lp_soundLink = lp_soundLink;
    auto_libARRA_gf_PlaySoundLinkasMusic_lp_loopForever = lp_loopForever;
    auto_libARRA_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter = lp_unpauseSountrackAfter;

    if (auto_libARRA_gf_PlaySoundLinkasMusic_Trigger == null) {
        auto_libARRA_gf_PlaySoundLinkasMusic_Trigger = TriggerCreate("auto_libARRA_gf_PlaySoundLinkasMusic_TriggerFunc");
    }

    TriggerExecute(auto_libARRA_gf_PlaySoundLinkasMusic_Trigger, false, false);
}

bool auto_libARRA_gf_PlaySoundLinkasMusic_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_libARRA_gf_PlaySoundLinkasMusic_lp_soundLink;
    bool lp_loopForever = auto_libARRA_gf_PlaySoundLinkasMusic_lp_loopForever;
    bool lp_unpauseSountrackAfter = auto_libARRA_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_soundLinkAsMusicCurrentlyPlaying += 1;
    libARRA_gv_soundLinkAsMusicLoopForever = lp_loopForever;
    SoundStop(libARRA_gv_soundLinkAsMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundPlay(lp_soundLink, PlayerGroupAll(), 100.0, 0.0);
    libARRA_gv_soundLinkAsMusic = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libARRA_gv_soundLinkAsMusicCurrentlyPlaying -= 1;
    if ((libARRA_gv_soundLinkAsMusicCurrentlyPlaying == 0)) {
        if ((libARRA_gv_soundLinkAsMusicLoopForever == true)) {
            libARRA_gf_PlaySoundLinkasMusic(lp_soundLink, true, true);
        }
        else {
            if ((lp_unpauseSountrackAfter == true)) {
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
            }

        }
    }

    return true;
}

void libARRA_gf_StopSoundLinkCurrentlyPlayingasMusic () {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_soundLinkAsMusicLoopForever = false;
    SoundStop(libARRA_gv_soundLinkAsMusic, true);
}

string libARRA_gf__UnitDataName2 (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto40B8A5AA_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto40B8A5AA_val = lp_type;
    if (auto40B8A5AA_val == libARRA_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (auto40B8A5AA_val == libARRA_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (auto40B8A5AA_val == libARRA_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (auto40B8A5AA_val == libARRA_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libARRA_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor libARRA_gf_ActorForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void libARRA_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point libARRA_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libARRA_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libARRA_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void libARRA_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int libARRA_gf_TextTagForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, libARRA_gf__UnitDataName2(libARRA_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void libARRA_gf_PingPlay (int lp_pingType, int lp_player, point lp_pingLocation, int lp_gameUser, string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    unit lv_pingUnit;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;
    int lv_gameUserIndex;

    // Automatic Variable Declarations
    int auto4F8BADF5_val;

    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    lv_gameUserIndex = ((lp_gameUser)-999);
    if (((lv_gameUserIndex < 0) || (lv_gameUserIndex > 16))) {
        return ;
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_pingPlayers);
    PlayerGroupAdd(lv_pingPlayers, lp_player);
    if ((TimerGetRemaining(libARRA_gv_pingSuppressionTimer[lv_gameUserIndex]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libARRA_gv_pingLockoutTimer[lv_gameUserIndex]) > 0.0)) {
        GameUserDisplayMessage(lp_gameUser, c_messageAreaChat, StringExternal("Param/Value/lib_ARRA_F14E6B67"));
        return ;
    }

    libARRA_gv_pingRecentCount[lv_gameUserIndex] += 1;
    TimerStart(libARRA_gv_pingSuppressionTimer[lv_gameUserIndex], libARRA_gv_c_PINGSUPPRESSIONTIME, false, c_timeGame);
    TimerStart(libARRA_gv_pingResetTimer[lv_gameUserIndex], libARRA_gv_c_PINGRESETTIME, false, c_timeGame);
    if ((libARRA_gv_pingRecentCount[lv_gameUserIndex] >= libARRA_gv_c_PINGMAXCOUNT)) {
        TimerStart(libARRA_gv_pingLockoutTimer[lv_gameUserIndex], libARRA_gv_c_PINGLOCKOUTTIME, false, c_timeGame);
    }

    auto4F8BADF5_val = lp_pingType;
    if (auto4F8BADF5_val == 0) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_B57E93F2", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_ARRA_B57E93F2", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_B57E93F2"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_ARRA_44E0483B");
    }
    else if (auto4F8BADF5_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_E926F11B", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_ARRA_E926F11B", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_E926F11B"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_ARRA_6AFE93E5");
    }
    else if (auto4F8BADF5_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_A1446CEB", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_ARRA_A1446CEB", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_A1446CEB"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Retreat", -1);
        lv_pingMinimapModel = "PingPanelPingRetreat";
        lv_pingEffect = "PingPanelBeaconRetreat";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_ARRA_4708ED0B");
    }
    else if (auto4F8BADF5_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_2C69E16C", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_ARRA_2C69E16C", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_2C69E16C"));
        lv_pingSound = SoundLink("UI_PingAdvanced_OnMyWay", -1);
        lv_pingMinimapModel = "PingPanelPingOnMyWay";
        lv_pingEffect = "PingPanelBeaconOnMyWay";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_ARRA_E8E57166");
    }
    else {
        if ((lp_pingTargetType != null)) {
            libARRA_gf_PingPlayUnit(lp_pingTargetType, lp_pingTargetPosition, lp_pingTargetOwner, lp_player, lp_gameUser);
            return ;
        }

        lv_pingSound = SoundLink("UI_MiniMapPing", -1);
        lv_pingMinimapModel = "MinimapPing";
    }
    if ((lv_pingEffect != null)) {
        libARRA_gf_PingBeaconAdd(lv_pingEffect, lp_pingLocation, lp_player);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingLocation, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    if (((lv_tooltipLabel != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_591BE1B7", "A", PlayerName(lp_player));
        TextExpressionSetToken("Param/Expression/lib_ARRA_591BE1B7", "B", lv_tooltipLabel);
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_591BE1B7"));
    }
    else {
        PingSetTooltip(PingLastCreated(), PlayerName(lp_player));
    }
}

void libARRA_gf_PingPlayUnit (string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner, int lp_player, int lp_gameUser) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_pingPlayers);
    PlayerGroupAdd(lv_pingPlayers, lp_player);
    if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Enemy) == true)) {
        if ((EventPingUnitIsUnderConstruction() == true) && (VisIsVisibleForPlayer(lp_player, lp_pingTargetPosition) == false)) {
            TextExpressionSetToken("Param/Expression/lib_ARRA_92DA163C", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_ARRA_92DA163C", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_ARRA_92DA163C", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_ARRA_92DA163C", "ENEMY", PlayerName(lp_pingTargetOwner));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_92DA163C"));
            lv_tooltipLabel = StringExternal("Param/Value/lib_ARRA_0A105F2B");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_ARRA_96A9A9AA", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_ARRA_96A9A9AA", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_ARRA_96A9A9AA", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_ARRA_96A9A9AA", "ENEMY", UnitTypeGetName(lp_pingTargetType));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_96A9A9AA"));
            TextExpressionSetToken("Param/Expression/lib_ARRA_4614CD86", "A", UnitTypeGetName(lp_pingTargetType));
            lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_ARRA_4614CD86");
        }
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
    }
    else if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Ally) == true)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_9FBAA885", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_ARRA_9FBAA885", "PLAYER", GameUserName(lp_gameUser));
        TextExpressionSetToken("Param/Expression/lib_ARRA_9FBAA885", "ENEMYID", IntToText(lp_pingTargetOwner));
        TextExpressionSetToken("Param/Expression/lib_ARRA_9FBAA885", "ENEMY", UnitTypeGetName(lp_pingTargetType));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_9FBAA885"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        TextExpressionSetToken("Param/Expression/lib_ARRA_9CC454CD", "A", UnitTypeGetName(lp_pingTargetType));
        lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_ARRA_9CC454CD");
    }
    else if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_pingTargetType, "ResourceState", c_playerAny) != "Unknown")) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_F8CAEC64", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_ARRA_F8CAEC64", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_F8CAEC64"));
        lv_pingSound = SoundLink("UI_PingAdvanced_OnMyWay", -1);
        lv_pingMinimapModel = "PingPanelPingOnMyWay";
        lv_pingEffect = "PingPanelBeaconOnMyWay";
        lv_pingScale = 0.6;
        TextExpressionSetToken("Param/Expression/lib_ARRA_CFDEB11C", "A", UnitTypeGetName(lp_pingTargetType));
        lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_ARRA_CFDEB11C");
    }
    else if (true) {
        lv_pingSound = SoundLink("UI_MiniMapPing", -1);
        lv_pingMinimapModel = "MinimapPing";
    }
    if ((lv_pingEffect != null)) {
        libARRA_gf_PingBeaconAdd(lv_pingEffect, lp_pingTargetPosition, lp_player);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingTargetPosition, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/lib_ARRA_3C992974", "A", PlayerName(lp_player));
    TextExpressionSetToken("Param/Expression/lib_ARRA_3C992974", "B", lv_tooltipLabel);
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_3C992974"));
}

void libARRA_gf_PingBeaconAdd (string lp_beaconEffect, point lp_location, int lp_player) {
    // Variable Declarations
    int lv_beaconIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    PlayerCreateEffectPoint(lp_player, lp_beaconEffect, lp_location);
}

void libARRA_gf_PingMinimapButtonUpdate () {
    // Variable Declarations
    playergroup lv_standardPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_standardPlayers = PlayerGroupEmpty();

    // Implementation
    if ((libARRA_gv_pingPanelMinimapButton == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
        libARRA_gv_pingPanelMinimapButton = DialogControlLastCreated();
    }

    lv_standardPlayers = PlayerGroupAll();
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(libARRA_gv_pingValidPlayers, lv_standardPlayers);
    if ((PlayerGroupCount(lv_standardPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libARRA_gv_pingPanelMinimapButton, StringExternal("UI/PingTip"), PlayerGroupAll());
    }

    if ((PlayerGroupCount(libARRA_gv_pingValidPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(libARRA_gv_pingPanelMinimapButton, StringExternal("UI/AdvancedPingTip"), PlayerGroupAll());
    }

}

void libARRA_gf_EnableDisablePingPanel (bool lp_enableDisable, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, libARRA_gv_pingValidPlayers);
        PingSetPlayerPingsShown(lp_players, false);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, true);
        TriggerEnable(libARRA_gt_PingUsed, true);
    }
    else {
        PingSetPlayerPingsShown(lp_players, true);
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, libARRA_gv_pingValidPlayers);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, false);
        if ((PlayerGroupCount(libARRA_gv_pingValidPlayers) == 0)) {
            TriggerEnable(libARRA_gt_PingUsed, false);
        }

    }
    libARRA_gf_PingMinimapButtonUpdate();
}

void libARRA_gf_MeleeSurrender_AIWantToSurrender (int lp_player) {
    // Variable Declarations
    int lv_dialogPlayer;
    playergroup lv_dialogPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto4D0EFB03_g;

    // Variable Initialization
    lv_dialogPlayerGroup = PlayerGroupEmpty();

    // Implementation
    auto4D0EFB03_g = PlayerGroupAll();
    lv_dialogPlayer = -1;
    while (true) {
        lv_dialogPlayer = PlayerGroupNextPlayer(auto4D0EFB03_g, lv_dialogPlayer);
        if (lv_dialogPlayer < 0) { break; }
        if ((PlayerType(lv_dialogPlayer) == c_playerTypeUser) && (PlayerStatus(lv_dialogPlayer) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_dialogPlayerGroup, lv_dialogPlayer);
        }

    }
    PlayerGroupAdd(libARRA_gv_meleeSurrender_PlayersSurrendering, lp_player);
    DialogCreate(460, 200, c_anchorTopRight, 40, 80, false);
    libARRA_gv_meleeSurrender_Dialog[lp_player] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libARRA_gv_meleeSurrender_Title[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/lib_ARRA_66DA4EE5")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 360, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 45);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/lib_ARRA_3A1DBA51")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 360, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 85);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libARRA_gv_meleeSurrender_BtnYes[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_ARRA_DEFB227E"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 160, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, -85, 35);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    libARRA_gv_meleeSurrender_BtnNo[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_ARRA_7DFBCF21"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 160, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 85, 35);
    DialogSetVisible(DialogLastCreated(), lv_dialogPlayerGroup, true);
    libARRA_gf_MeleeSurrender_UpdateDialogs();
    libARRA_gv_meleeSurrender_FlashingPlayer = lp_player;
    TriggerExecute(libARRA_gt_MeleeSurrender_FlashDialog, true, false);
}

void libARRA_gf_MeleeSurrender_UpdateDialogs () {
    // Variable Declarations
    int lv_y;
    int lv_humanPlayer;
    int lv_computerPlayer;

    // Automatic Variable Declarations
    playergroup autoFB69C58C_g;
    playergroup auto532023C4_g;

    // Variable Initialization

    // Implementation
    autoFB69C58C_g = PlayerGroupAll();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(autoFB69C58C_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        lv_y = 40;
        auto532023C4_g = libARRA_gv_meleeSurrender_PlayersSurrendering;
        lv_computerPlayer = -1;
        while (true) {
            lv_computerPlayer = PlayerGroupNextPlayer(auto532023C4_g, lv_computerPlayer);
            if (lv_computerPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(libARRA_gv_meleeSurrender_PlayersAnswered[lv_humanPlayer], lv_computerPlayer) == false)) {
                DialogSetPosition(libARRA_gv_meleeSurrender_Dialog[lv_computerPlayer], c_anchorTopRight, 10, lv_y);
                lv_y += 200;
            }
            else {
                DialogSetVisible(libARRA_gv_meleeSurrender_Dialog[lv_computerPlayer], PlayerGroupSingle(lv_humanPlayer), false);
            }
        }
    }
}

point libARRA_gf_ValidatedPoint (point lp_point) {
    // Variable Declarations
    fixed lv_boundsWest;
    fixed lv_boundsEast;
    fixed lv_boundsNorth;
    fixed lv_boundsSouth;
    fixed lv_returnX;
    fixed lv_returnY;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boundsWest = (PointGetX(RegionGetCenter(RegionPlayableMap())) - (libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsEast = (PointGetX(RegionGetCenter(RegionPlayableMap())) + (libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsNorth = (PointGetY(RegionGetCenter(RegionPlayableMap())) + (libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsSouth = (PointGetY(RegionGetCenter(RegionPlayableMap())) - (libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 2.0));
    if ((PointGetX(lp_point) < lv_boundsWest)) {
        lv_returnX = lv_boundsWest;
    }
    else {
        if ((PointGetX(lp_point) > lv_boundsEast)) {
            lv_returnX = lv_boundsEast;
        }
        else {
            lv_returnX = PointGetX(lp_point);
        }
    }
    if ((PointGetY(lp_point) < lv_boundsSouth)) {
        lv_returnY = lv_boundsSouth;
    }
    else {
        if ((PointGetY(lp_point) > lv_boundsNorth)) {
            lv_returnY = lv_boundsNorth;
        }
        else {
            lv_returnY = PointGetY(lp_point);
        }
    }
    return Point(lv_returnX, lv_returnY);
}

void libARRA_gf_PlayAnnouncerNumberSound (int lp_number, playergroup lp_players, fixed lp_volume) {
    int init_i;

    // Variable Declarations
    soundlink[20] lv_soundReferenceArray119;
    soundlink[10] lv_soundReferenceArrayTens;
    int lv_i;
    string lv_soundIDString;
    int lv_numberLength;
    int lv_positionFromRight;
    int lv_placeValue;
    int lv_onesPlace;
    int lv_tensPlace;
    int lv_numberOfSoundsToPlay;
    soundlink[15] lv_soundsToPlay;

    // Automatic Variable Declarations
    const int auto739422B2_ae = 19;
    const int auto739422B2_ai = 1;
    const int autoE6BCAE70_ae = 9;
    const int autoE6BCAE70_ai = 1;
    int auto9CC0296D_ae;
    const int auto9CC0296D_ai = 1;
    int auto734EC742_ae;
    const int auto734EC742_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 19; init_i += 1) {
        lv_soundReferenceArray119[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_soundReferenceArrayTens[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    lv_soundIDString = "";
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_soundsToPlay[init_i] = SoundLink("EditorDefaultSound", -1);
    }

    // Implementation
    if (((lp_number < 0) || (lp_number > 999999999))) {
        return ;
    }

    lv_i = 1;
    for ( ; ( (auto739422B2_ai >= 0 && lv_i <= auto739422B2_ae) || (auto739422B2_ai < 0 && lv_i >= auto739422B2_ae) ) ; lv_i += auto739422B2_ai ) {
        lv_soundIDString = ("ModUtilityVoiceModUtilityVoice000" + IntToString((lv_i + 15)));
        lv_soundReferenceArray119[lv_i] = SoundLink(lv_soundIDString, 0);
    }
    lv_i = 2;
    for ( ; ( (autoE6BCAE70_ai >= 0 && lv_i <= autoE6BCAE70_ae) || (autoE6BCAE70_ai < 0 && lv_i >= autoE6BCAE70_ae) ) ; lv_i += autoE6BCAE70_ai ) {
        lv_soundIDString = ("ModUtilityVoiceModUtilityVoice000" + IntToString((lv_i + 33)));
        lv_soundReferenceArrayTens[lv_i] = SoundLink(lv_soundIDString, 0);
    }
    if ((lp_number == 0)) {
        SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00015", 0), lp_players, lp_volume, 0.0);
        return ;
    }

    if ((lp_number < 10)) {
        SoundPlay(lv_soundReferenceArray119[lp_number], lp_players, lp_volume, 0.0);
        return ;
    }

    lv_numberLength = StringLength(IntToString(lp_number));
    auto9CC0296D_ae = lv_numberLength;
    lv_i = 1;
    for ( ; ( (auto9CC0296D_ai >= 0 && lv_i <= auto9CC0296D_ae) || (auto9CC0296D_ai < 0 && lv_i >= auto9CC0296D_ae) ) ; lv_i += auto9CC0296D_ai ) {
        lv_positionFromRight = ((lv_numberLength + 1) - lv_i);
        if ((ModI(lv_positionFromRight, 3) == 0)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
            if ((lv_placeValue != 0)) {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00043", -1);
            }

        }

        if ((ModI((lv_positionFromRight + 1), 3) == 0)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, (lv_i + 1)));
            if ((lv_placeValue > 0)) {
                if ((lv_placeValue < 20)) {
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
                }
                else {
                    lv_tensPlace = StringToInt(StringSub(IntToString(lv_placeValue), 1, 1));
                    lv_onesPlace = StringToInt(StringSub(IntToString(lv_placeValue), 2, 2));
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArrayTens[lv_tensPlace];
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_onesPlace];
                }
            }

        }

        if ((lv_positionFromRight == 4)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
            if ((lv_numberLength == 4)) {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
            }

            if ((lv_numberLength == 7)) {
                lv_placeValue = StringToInt(StringSub(IntToString(lp_number), 2, 4));
                if ((lv_placeValue > 0)) {
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00044", -1);
                }

            }
            else {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00044", -1);
            }
        }

        if ((lv_positionFromRight == 7)) {
            if ((lv_numberLength == 7)) {
                lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
            }

            lv_numberOfSoundsToPlay += 1;
            lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00045", -1);
        }

    }
    auto734EC742_ae = lv_numberOfSoundsToPlay;
    lv_i = 1;
    for ( ; ( (auto734EC742_ai >= 0 && lv_i <= auto734EC742_ae) || (auto734EC742_ai < 0 && lv_i >= auto734EC742_ae) ) ; lv_i += auto734EC742_ai ) {
        SoundPlay(lv_soundsToPlay[lv_i], lp_players, lp_volume, 0.0);
        SoundWait(SoundLastPlayed(), 0.25, c_soundOffsetEnd);
    }
}

void libARRA_gf_PlayTransmissionCueSound (playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("Dialogue_TransmissionStart", 0), lp_playerGroup, 100.0, 0.0);
    Wait(0.25, c_timeReal);
}

void libARRA_gf_SetAllSoundChannelVolumesStandardTiming (int lp_mode, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 2.5);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 100.0, 0.5);
    }
    else {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 1.0);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 0.0, 0.25);
    }
}

void libARRA_gf_OrderWorkerstoGatherNearbyResources (region lp_region, int lp_player) {
    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;

    // Automatic Variable Declarations
    unitgroup autoE275E3DC_g;
    int autoE275E3DC_u;
    unitgroup auto0D96576D_g;
    int auto0D96576D_u;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();

    // Implementation
    autoE275E3DC_g = UnitGroup(null, lp_player, lp_region, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoE275E3DC_u = UnitGroupCount(autoE275E3DC_g, c_unitCountAll);
    for (;; autoE275E3DC_u -= 1) {
        lv_indexWorker = UnitGroupUnitFromEnd(autoE275E3DC_g, autoE275E3DC_u);
        if (lv_indexWorker == null) { break; }
        UnitGroupClear(lv_resourceGroup);
        auto0D96576D_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0D96576D_u = UnitGroupCount(auto0D96576D_g, c_unitCountAll);
        for (;; auto0D96576D_u -= 1) {
            lv_indexResource = UnitGroupUnitFromEnd(auto0D96576D_g, auto0D96576D_u);
            if (lv_indexResource == null) { break; }
            if ((true) && ((UnitGetOwner(lv_indexResource) == 0) || (UnitGetOwner(lv_indexResource) == lp_player))) {
                UnitGroupAdd(lv_resourceGroup, lv_indexResource);
            }

        }
        if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
        }

    }
}

void libARRA_gf_OrderTransporttoUnloadAllthenDespawn (unit lp_transport, point lp_targetPoint, point lp_despawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_transportUnit_Param = lp_transport;
    libARRA_gv_transportTargetPoint_Param = lp_targetPoint;
    libARRA_gv_transportDespawnPoint_Param = lp_despawnPoint;
    TriggerExecute(libARRA_gt_TransportController, true, false);
}

void libARRA_gf_AutoRevealRegion (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((libARRA_gv_autoRevealers.lv_count >= 64)) {
        return ;
    }

    VisRevealerCreate(lp_player, lp_visibilityRegion);
    libARRA_gv_autoRevealers.lv_revealers[libARRA_gv_autoRevealers.lv_count] = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), false);
    libARRA_gv_autoRevealers.lv_triggeringRegions[libARRA_gv_autoRevealers.lv_count] = lp_triggeringRegion;
    libARRA_gv_autoRevealers.lv_triggeringPlayers[libARRA_gv_autoRevealers.lv_count] = lp_player;
    libARRA_gv_autoRevealers.lv_count += 1;
    TriggerExecute(libARRA_gt_AutoRevealRegionController, true, false);
}

bool libARRA_gf_FilterEnemyisExcluded (string lp_filter) {
    // Variable Declarations
    string lv_excludedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_excludedString = "";

    // Implementation
    lv_excludedString = StringWord(StringReplaceWord(lp_filter, ";", " ", c_stringReplaceAll, c_stringCase), 2);
    if ((StringFind(lv_excludedString, "Enemy", c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ClearCache () {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    int autoA83F9A19_ae;
    const int autoA83F9A19_ai = 1;
    int auto20DE5E30_ae;
    const int auto20DE5E30_ai = 1;
    int auto1D52AD4D_ae;
    const int auto1D52AD4D_ai = 1;
    int auto1BAE9372_ae;
    const int auto1BAE9372_ai = 1;
    int autoB1EAE2CC_ae;
    const int autoB1EAE2CC_ai = 1;
    int auto4263514C_ae;
    const int auto4263514C_ai = 1;
    int auto31A6B64B_ae;
    const int auto31A6B64B_ai = 1;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListClear(libARRA_gv_byPassUnits);
    autoA83F9A19_ae = libARRA_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (autoA83F9A19_ai >= 0 && lv_i <= autoA83F9A19_ae) || (autoA83F9A19_ai < 0 && lv_i >= autoA83F9A19_ae) ) ; lv_i += autoA83F9A19_ai ) {
        libARRA_gv_cACHE_REQUIREMENT[lv_i] = null;
    }
    libARRA_gv_cACHESIZE_REQUIREMENT = 0;
    auto20DE5E30_ae = libARRA_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (auto20DE5E30_ai >= 0 && lv_i <= auto20DE5E30_ae) || (auto20DE5E30_ai < 0 && lv_i >= auto20DE5E30_ae) ) ; lv_i += auto20DE5E30_ai ) {
        libARRA_gv_cACHE_UPGRADES[lv_i] = null;
    }
    libARRA_gv_cACHESIZE_UPGRADES = 0;
    auto1D52AD4D_ae = libARRA_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (auto1D52AD4D_ai >= 0 && lv_i <= auto1D52AD4D_ae) || (auto1D52AD4D_ai < 0 && lv_i >= auto1D52AD4D_ae) ) ; lv_i += auto1D52AD4D_ai ) {
        libARRA_gv_cACHE_UNITS[lv_i] = null;
    }
    libARRA_gv_cACHESIZE_UNITS = 0;
    auto1BAE9372_ae = libARRA_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (auto1BAE9372_ai >= 0 && lv_i <= auto1BAE9372_ae) || (auto1BAE9372_ai < 0 && lv_i >= auto1BAE9372_ae) ) ; lv_i += auto1BAE9372_ai ) {
        libARRA_gv_cACHE_BEHAVIORS[lv_i] = null;
    }
    libARRA_gv_cACHESIZE_BEHAVIORS = 0;
    autoB1EAE2CC_ae = libARRA_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (autoB1EAE2CC_ai >= 0 && lv_i <= autoB1EAE2CC_ae) || (autoB1EAE2CC_ai < 0 && lv_i >= autoB1EAE2CC_ae) ) ; lv_i += autoB1EAE2CC_ai ) {
        libARRA_gv_cACHE_ABILITIES[lv_i] = null;
    }
    libARRA_gv_cACHESIZE_ABILITIES = 0;
    auto4263514C_ae = libARRA_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (auto4263514C_ai >= 0 && lv_i <= auto4263514C_ae) || (auto4263514C_ai < 0 && lv_i >= auto4263514C_ae) ) ; lv_i += auto4263514C_ai ) {
        libARRA_gv_cACHE_EFFECTS[lv_i] = null;
    }
    libARRA_gv_cACHESIZE_EFFECTS = 0;
    auto31A6B64B_ae = libARRA_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (auto31A6B64B_ai >= 0 && lv_i <= auto31A6B64B_ae) || (auto31A6B64B_ai < 0 && lv_i >= auto31A6B64B_ae) ) ; lv_i += auto31A6B64B_ai ) {
        libARRA_gv_cACHE_WEAPONS[lv_i] = null;
    }
    libARRA_gv_cACHESIZE_WEAPONS = 0;
}

void libARRA_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan) {
    // Variable Declarations
    string lv_aBILITY;
    string lv_bEHAVIOR;
    string lv_uNIT;
    string lv_requirement;
    int lv_unitsCount;
    int lv_i;
    string lv_upgradeEntry;
    int lv_affectedUnitIndex;
    bool lv_hasDangerAbilities;
    bool lv_isDangerAbility;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;
    string lv_xhfwaschkuachjyi;

    // Automatic Variable Declarations
    int auto9FD56787_ae;
    const int auto9FD56787_ai = 1;
    int autoEE9ED463_ae;
    const int autoEE9ED463_ai = 1;
    int autoA94591F7_ae;
    const int autoA94591F7_ai = 1;
    int auto0D935EE0_ae;
    const int auto0D935EE0_ai = 1;
    int autoC95B68C4_ae;
    const int autoC95B68C4_ai = 1;
    int autoAB07426F_ae;
    const int autoAB07426F_ai = 1;
    int autoBD08B882_catalog;
    int autoBD08B882_i;
    int auto7B311B6A_ae;
    const int auto7B311B6A_ai = 1;
    int auto2EAC663D_ae;
    const int auto2EAC663D_ai = 1;
    int autoF3F50695_ae;
    const int autoF3F50695_ai = 1;
    int auto389A8403_catalog;
    int auto389A8403_i;
    int auto85EA0999_ae;
    const int auto85EA0999_ai = 1;
    int autoD9141DA7_catalog;
    int autoD9141DA7_i;
    int autoB783C43B_ae;
    const int autoB783C43B_ai = 1;

    // Variable Initialization
    lv_hasDangerAbilities = libARRA_gf_UnitTypeisArmed(lp_player, lp_unit);
    lv_xhfwaschkuachjyi = ("Race:" + UserDataGetString("Rules", libARRA_gv_mBRules[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return ;
    }

    auto9FD56787_ae = libARRA_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (auto9FD56787_ai >= 0 && lv_i <= auto9FD56787_ae) || (auto9FD56787_ai < 0 && lv_i >= auto9FD56787_ae) ) ; lv_i += auto9FD56787_ai ) {
        if ((libARRA_gv_cACHE_UNITS[lv_i] == lp_unit)) {
            return ;
        }

    }
    libARRA_gv_cACHESIZE_UNITS += 1;
    libARRA_gv_cACHE_UNITS[libARRA_gv_cACHESIZE_UNITS] = lp_unit;
    TechTreeUnitAllow(lp_player, lp_unit, true);
    if ((libARRA_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        autoEE9ED463_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "EquipmentArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoEE9ED463_ai >= 0 && lv_i <= autoEE9ED463_ae) || (autoEE9ED463_ai < 0 && lv_i >= autoEE9ED463_ae) ) ; lv_i += autoEE9ED463_ai ) {
            libARRA_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Weapon", lp_player)));
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Effect", lp_player)));
        }
        autoA94591F7_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoA94591F7_ai >= 0 && lv_i <= autoA94591F7_ae) || (autoA94591F7_ai < 0 && lv_i >= autoA94591F7_ae) ) ; lv_i += autoA94591F7_ai ) {
            libARRA_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player)));
        }
    }
    else {
        libARRA_gf_Disarmunittype(lp_player, lp_unit);
    }
    auto0D935EE0_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto0D935EE0_ai >= 0 && lv_i <= auto0D935EE0_ae) || (auto0D935EE0_ai < 0 && lv_i >= auto0D935EE0_ae) ) ; lv_i += auto0D935EE0_ai ) {
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player)));
    }
    autoC95B68C4_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoC95B68C4_ai >= 0 && lv_i <= autoC95B68C4_ae) || (autoC95B68C4_ai < 0 && lv_i >= autoC95B68C4_ae) ) ; lv_i += autoC95B68C4_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_aBILITY) == false)) {
            continue;
        }
        else {
            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) && (libARRA_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
                lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                if ((lv_unitsCount > 0)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                    libARRA_gf_ArmUnitType(lp_player, lv_uNIT);
                }

            }

            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilArmMagazine, "") == true)) {
                if ((lv_hasDangerAbilities == true)) {
                    autoAB07426F_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (autoAB07426F_ai >= 0 && lv_i <= autoAB07426F_ae) || (autoAB07426F_ai < 0 && lv_i >= autoAB07426F_ae) ) ; lv_i += autoAB07426F_ai ) {
                        libARRA_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)));
                        libARRA_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
                    }
                }
                else {
                    continue;
                }
            }

            if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMergeable, "") == true))) {
                continue;
            }

            lv_isDangerAbility = libARRA_gf_AbilityIsDanger(lp_player, lv_aBILITY);
            if (((lv_hasDangerAbilities == true) || (lv_isDangerAbility == false))) {
                libARRA_gf_CacheAbility(lp_player, lv_aBILITY, false);
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectInstant, "") == true)) {
                    libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
            }

        }
    }
    if ((lp_scan == true)) {
        autoBD08B882_catalog = c_gameCatalogAbil;
        autoBD08B882_i = 1;
        for ( ; autoBD08B882_i <= CatalogEntryCount(c_gameCatalogAbil) ; autoBD08B882_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(autoBD08B882_catalog, autoBD08B882_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_xhfwaschkuachjyi, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true))) {
                    auto7B311B6A_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto7B311B6A_ai >= 0 && lv_i <= auto7B311B6A_ae) || (auto7B311B6A_ai < 0 && lv_i >= auto7B311B6A_ae) ) ; lv_i += auto7B311B6A_ai ) {
                        lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player);
                        if ((lv_unitsCount > 0)) {
                            lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit[" + IntToString(0) + "]", lp_player));
                            if ((lv_uNIT == lp_unit)) {
                                libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                                libARRA_gf_CacheAbility(lp_player, lv_aBILITY, true);
                                break;
                            }

                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true)) {
                    auto2EAC663D_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto2EAC663D_ai >= 0 && lv_i <= auto2EAC663D_ae) || (auto2EAC663D_ai < 0 && lv_i >= auto2EAC663D_ae) ) ; lv_i += auto2EAC663D_ai ) {
                        if ((lp_unit == (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)))) {
                            libARRA_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_i);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true)) {
                    autoF3F50695_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (autoF3F50695_ai >= 0 && lv_i <= autoF3F50695_ae) || (autoF3F50695_ai < 0 && lv_i >= autoF3F50695_ae) ) ; lv_i += autoF3F50695_ai ) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                            libARRA_gf_CacheAbility(lp_player, lv_aBILITY, true);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                            libARRA_gf_CacheAbility(lp_player, lv_aBILITY, true);
                        }

                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "Info.Unit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        libARRA_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "PlaceUnit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        libARRA_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
            }
        }
        auto389A8403_catalog = c_gameCatalogBehavior;
        auto389A8403_i = 1;
        for ( ; auto389A8403_i <= CatalogEntryCount(c_gameCatalogBehavior) ; auto389A8403_i += 1 ) {
            lv_bEHAVIOR = CatalogEntryGet(auto389A8403_catalog, auto389A8403_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "EditorCategories", lp_player), lv_xhfwaschkuachjyi, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((CatalogEntryClass(c_gameCatalogBehavior, lv_bEHAVIOR) == libARRA_gv_cBehaviorSpawn)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        auto85EA0999_ae = (lv_unitsCount - 1);
                        lv_i = 0;
                        for ( ; ( (auto85EA0999_ai >= 0 && lv_i <= auto85EA0999_ae) || (auto85EA0999_ai < 0 && lv_i >= auto85EA0999_ae) ) ; lv_i += auto85EA0999_ai ) {
                            if (((CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)) == lp_unit)) {
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "Requirements", lp_player));
                                libARRA_gf_CacheRequirement(lp_player, lv_requirement);
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Requirements", lp_player));
                                libARRA_gf_CacheRequirement(lp_player, lv_requirement);
                                libARRA_gf_CacheBehavior(lp_player, lv_bEHAVIOR);
                                autoD9141DA7_catalog = c_gameCatalogUnit;
                                autoD9141DA7_i = 1;
                                for ( ; autoD9141DA7_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoD9141DA7_i += 1 ) {
                                    lv_uNIT = CatalogEntryGet(autoD9141DA7_catalog, autoD9141DA7_i);
                                    if ((PlayerRace(lp_player) != "Neut") && (libARRA_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
                                        continue;
                                    }

                                    autoB783C43B_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                                    lv_k = 0;
                                    for ( ; ( (autoB783C43B_ai >= 0 && lv_k <= autoB783C43B_ae) || (autoB783C43B_ai < 0 && lv_k >= autoB783C43B_ae) ) ; lv_k += autoB783C43B_ai ) {
                                        if ((lv_bEHAVIOR == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_k) + "].Link", c_playerAny)))) {
                                            libARRA_gf_CacheUnit(lp_player, lv_uNIT, true);
                                        }

                                    }
                                }
                                break;
                            }

                        }
                    }

                }

            }
        }
    }

}

void libARRA_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command) {
    // Variable Declarations
    string lv_bEHAVIOR;
    string lv_uNIT;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;

    // Automatic Variable Declarations
    int auto00D00A70_catalog;
    int auto00D00A70_i;
    int auto410B5272_ae;
    const int auto410B5272_ai = 1;
    int auto9925F62D_ae;
    const int auto9925F62D_ai = 1;
    int auto7685907C_ae;
    const int auto7685907C_ai = 1;
    int auto5B5CB0E6_ae;
    const int auto5B5CB0E6_ai = 1;

    // Variable Initialization

    // Implementation
    libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lp_command) + "].Button.Requirements", lp_player)));
    libARRA_gf_CacheAbility(lp_player, lp_ability, false);
    auto00D00A70_catalog = c_gameCatalogUnit;
    auto00D00A70_i = 1;
    for ( ; auto00D00A70_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto00D00A70_i += 1 ) {
        lv_uNIT = CatalogEntryGet(auto00D00A70_catalog, auto00D00A70_i);
        if ((PlayerRace(lp_player) != "Neut") && (libARRA_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
            continue;
        }

        auto410B5272_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
        lv_k = 0;
        for ( ; ( (auto410B5272_ai >= 0 && lv_k <= auto410B5272_ae) || (auto410B5272_ai < 0 && lv_k >= auto410B5272_ae) ) ; lv_k += auto410B5272_ai ) {
            if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_k) + "].Link", lp_player)))) {
                auto9925F62D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                lv_b = 0;
                for ( ; ( (auto9925F62D_ai >= 0 && lv_b <= auto9925F62D_ae) || (auto9925F62D_ai < 0 && lv_b >= auto9925F62D_ae) ) ; lv_b += auto9925F62D_ai ) {
                    lv_bEHAVIOR = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_b) + "].Link", lp_player));
                    if ((libARRA_gf_BehaviorUsesAbilityCommand(lp_player, lv_bEHAVIOR, AbilityCommand(lp_ability, lp_command)) == true)) {
                        libARRA_gf_CacheUnit(lp_player, lv_uNIT, true);
                        break;
                    }

                }
                auto7685907C_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts", lp_player) - 1);
                lv_cl = 0;
                for ( ; ( (auto7685907C_ai >= 0 && lv_cl <= auto7685907C_ae) || (auto7685907C_ai < 0 && lv_cl >= auto7685907C_ae) ) ; lv_cl += auto7685907C_ai ) {
                    auto5B5CB0E6_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons", lp_player) - 1);
                    lv_lb = 0;
                    for ( ; ( (auto5B5CB0E6_ai >= 0 && lv_lb <= auto5B5CB0E6_ae) || (auto5B5CB0E6_ai < 0 && lv_lb >= auto5B5CB0E6_ae) ) ; lv_lb += auto5B5CB0E6_ai ) {
                        if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons[" + IntToString(lv_lb) + "].AbilCmd", lp_player)) == AbilityCommand(lp_ability, lp_command))) {
                            libARRA_gf_CacheUnit(lp_player, lv_uNIT, true);
                            break;
                        }

                    }
                }
            }

        }
    }
}

void libARRA_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan) {
    // Variable Declarations
    int lv_i;
    string lv_unitEntry;
    int lv_affectedUnitIndex;
    string lv_abilityIter;
    int lv_abilityIndex;
    string lv_aBILITY;
    string lv_uPGRADE;
    string lv_upgradeIter;
    int lv_abilityCommandIndex;
    int lv_effectArrayIndex;
    string lv_effeectArrayReference;
    string lv_mBRules;

    // Automatic Variable Declarations
    int autoCE14043B_ae;
    const int autoCE14043B_ai = 1;
    int autoF1811AFF_catalog;
    int autoF1811AFF_i;
    int auto2A3DA54E_ae;
    const int auto2A3DA54E_ai = 1;

    // Variable Initialization
    lv_effeectArrayReference = "";
    lv_mBRules = ("Race:" + UserDataGetString("Rules", libARRA_gv_mBRules[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lp_upgrade) == false)) {
        return ;
    }

    autoCE14043B_ae = libARRA_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (autoCE14043B_ai >= 0 && lv_i <= autoCE14043B_ae) || (autoCE14043B_ai < 0 && lv_i >= autoCE14043B_ae) ) ; lv_i += autoCE14043B_ai ) {
        if ((libARRA_gv_cACHE_UPGRADES[lv_i] == lp_upgrade)) {
            return ;
        }

    }
    libARRA_gv_cACHESIZE_UPGRADES += 1;
    libARRA_gv_cACHE_UPGRADES[libARRA_gv_cACHESIZE_UPGRADES] = lp_upgrade;
    TechTreeUpgradeAllow(lp_player, lp_upgrade, true);
    if ((lp_scan == true)) {
        autoF1811AFF_catalog = c_gameCatalogAbil;
        autoF1811AFF_i = 1;
        for ( ; autoF1811AFF_i <= CatalogEntryCount(c_gameCatalogAbil) ; autoF1811AFF_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(autoF1811AFF_catalog, autoF1811AFF_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_mBRules, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilResearch, "") == true)) {
                    auto2A3DA54E_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_abilityCommandIndex = 0;
                    for ( ; ( (auto2A3DA54E_ai >= 0 && lv_abilityCommandIndex <= auto2A3DA54E_ae) || (auto2A3DA54E_ai < 0 && lv_abilityCommandIndex >= auto2A3DA54E_ae) ) ; lv_abilityCommandIndex += auto2A3DA54E_ai ) {
                        lv_upgradeIter = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_abilityCommandIndex) + "].Upgrade", lp_player));
                        if ((lv_upgradeIter == lp_upgrade)) {
                            libARRA_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_abilityCommandIndex);
                            break;
                        }

                    }
                }

            }
        }
    }

}

void libARRA_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan) {
    // Variable Declarations
    string lv_uNIT;
    int lv_i;

    // Automatic Variable Declarations
    int autoD96C799A_ae;
    const int autoD96C799A_ai = 1;
    int auto351C9BC4_catalog;
    int auto351C9BC4_i;
    int autoCADC8072_ae;
    const int autoCADC8072_ai = 1;
    int autoE1AF8E7B_val;
    int auto6B72ADB1_ae;
    const int auto6B72ADB1_ai = 1;
    int auto1151359B_ae;
    const int auto1151359B_ai = 1;
    int autoC44AA048_ae;
    const int autoC44AA048_ai = 1;
    int autoF240B06D_ae;
    const int autoF240B06D_ai = 1;
    int auto46C9079E_ae;
    const int auto46C9079E_ai = 1;
    int auto36BA1ABF_ae;
    const int auto36BA1ABF_ai = 1;
    int autoA09D5534_ae;
    const int autoA09D5534_ai = 1;
    int auto35D20308_ae;
    const int auto35D20308_ai = 1;
    int auto02085BFB_ae;
    const int auto02085BFB_ai = 1;
    int auto2C3F7652_ae;
    const int auto2C3F7652_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return ;
    }

    autoD96C799A_ae = libARRA_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (autoD96C799A_ai >= 0 && lv_i <= autoD96C799A_ae) || (autoD96C799A_ai < 0 && lv_i >= autoD96C799A_ae) ) ; lv_i += autoD96C799A_ai ) {
        if ((libARRA_gv_cACHE_ABILITIES[lv_i] == lp_ability)) {
            return ;
        }

    }
    if (((libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilRally, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilBuildable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilStop, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilAttack, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilMove, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilQueue, "") == true))) {
        return ;
    }

    libARRA_gv_cACHESIZE_ABILITIES += 1;
    libARRA_gv_cACHE_ABILITIES[libARRA_gv_cACHESIZE_ABILITIES] = lp_ability;
    if ((lp_scan == true)) {
        auto351C9BC4_catalog = c_gameCatalogUnit;
        auto351C9BC4_i = 1;
        for ( ; auto351C9BC4_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto351C9BC4_i += 1 ) {
            lv_uNIT = CatalogEntryGet(auto351C9BC4_catalog, auto351C9BC4_i);
            if ((PlayerRace(lp_player) != "Neut") && (libARRA_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            autoCADC8072_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (autoCADC8072_ai >= 0 && lv_i <= autoCADC8072_ae) || (autoCADC8072_ai < 0 && lv_i >= autoCADC8072_ae) ) ; lv_i += autoCADC8072_ai ) {
                if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny)))) {
                    libARRA_gf_CacheUnit(lp_player, lv_uNIT, true);
                }

            }
        }
    }

    autoE1AF8E7B_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (autoE1AF8E7B_val == libARRA_gv_cAbilityAugment) {
        libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player)));
    }
    else if (autoE1AF8E7B_val == libARRA_gv_cAbilityArmMagazine) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        auto6B72ADB1_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto6B72ADB1_ai >= 0 && lv_i <= auto6B72ADB1_ae) || (auto6B72ADB1_ai < 0 && lv_i >= auto6B72ADB1_ae) ) ; lv_i += auto6B72ADB1_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto1151359B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "InfoArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto1151359B_ai >= 0 && lv_i <= auto1151359B_ae) || (auto1151359B_ai < 0 && lv_i >= auto1151359B_ae) ) ; lv_i += auto1151359B_ai ) {
            libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
            libARRA_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
        }
    }
    else if (autoE1AF8E7B_val == libARRA_gv_cAbilityBehavior) {
        libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        autoC44AA048_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoC44AA048_ai >= 0 && lv_i <= autoC44AA048_ae) || (autoC44AA048_ai < 0 && lv_i >= autoC44AA048_ae) ) ; lv_i += autoC44AA048_ai ) {
            libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (autoE1AF8E7B_val == libARRA_gv_cAbilityBuild) {
        libARRA_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BuildMorphAbil", lp_player)), false);
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
    }
    else if (autoE1AF8E7B_val == libARRA_gv_cAbilityEffectInstant) {
        libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        autoF240B06D_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoF240B06D_ai >= 0 && lv_i <= autoF240B06D_ae) || (autoF240B06D_ai < 0 && lv_i >= autoF240B06D_ae) ) ; lv_i += autoF240B06D_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto46C9079E_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto46C9079E_ai >= 0 && lv_i <= auto46C9079E_ae) || (auto46C9079E_ai < 0 && lv_i >= auto46C9079E_ae) ) ; lv_i += auto46C9079E_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto36BA1ABF_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto36BA1ABF_ai >= 0 && lv_i <= auto36BA1ABF_ae) || (auto36BA1ABF_ai < 0 && lv_i >= auto36BA1ABF_ae) ) ; lv_i += auto36BA1ABF_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (autoE1AF8E7B_val == libARRA_gv_cAbilityEffectTarget) {
        libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        autoA09D5534_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoA09D5534_ai >= 0 && lv_i <= autoA09D5534_ae) || (autoA09D5534_ai < 0 && lv_i >= autoA09D5534_ae) ) ; lv_i += autoA09D5534_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto35D20308_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto35D20308_ai >= 0 && lv_i <= auto35D20308_ae) || (auto35D20308_ai < 0 && lv_i >= auto35D20308_ae) ) ; lv_i += auto35D20308_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto02085BFB_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto02085BFB_ai >= 0 && lv_i <= auto02085BFB_ae) || (auto02085BFB_ai < 0 && lv_i >= auto02085BFB_ae) ) ; lv_i += auto02085BFB_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (autoE1AF8E7B_val == libARRA_gv_cAbilityMorph) {
        libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOn", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOff", lp_player)));
    }
    else if (autoE1AF8E7B_val == libARRA_gv_cAbilityTransport) {
        auto2C3F7652_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CmdButtonArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2C3F7652_ai >= 0 && lv_i <= auto2C3F7652_ae) || (auto2C3F7652_ai < 0 && lv_i >= auto2C3F7652_ae) ) ; lv_i += auto2C3F7652_ai ) {
            libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(lv_i) + "].Requirements", lp_player)));
        }
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportEffect", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoBehavior", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportBehavior", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadTransportBehavior", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadCargoBehavior", lp_player)));
    }
    else {
    }
}

void libARRA_gf_CacheWeapon (int lp_player, string lp_weapon) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoC8899E95_ae;
    const int autoC8899E95_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lp_weapon) == false)) {
        return ;
    }

    autoC8899E95_ae = libARRA_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (autoC8899E95_ai >= 0 && lv_i <= autoC8899E95_ae) || (autoC8899E95_ai < 0 && lv_i >= autoC8899E95_ae) ) ; lv_i += autoC8899E95_ai ) {
        if ((libARRA_gv_cACHE_WEAPONS[lv_i] == lp_weapon)) {
            return ;
        }

    }
    libARRA_gv_cACHESIZE_WEAPONS += 1;
    libARRA_gv_cACHE_WEAPONS[libARRA_gv_cACHESIZE_WEAPONS] = lp_weapon;
    libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PostEffectBehavior.Behavior", lp_player)));
    libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffectBehavior.Behavior", lp_player)));
    libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffect", lp_player)));
    libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "Effect", lp_player)));
    libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "DisplayEffect", lp_player)));
    libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
    libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
}

void libARRA_gf_CacheBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoF2801523_ae;
    const int autoF2801523_ai = 1;
    int autoA923F3FD_val;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return ;
    }

    autoF2801523_ae = libARRA_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (autoF2801523_ai >= 0 && lv_i <= autoF2801523_ae) || (autoF2801523_ai < 0 && lv_i >= autoF2801523_ae) ) ; lv_i += autoF2801523_ai ) {
        if ((libARRA_gv_cACHE_BEHAVIORS[lv_i] == lp_behavior)) {
            return ;
        }

    }
    libARRA_gv_cACHESIZE_BEHAVIORS += 1;
    libARRA_gv_cACHE_BEHAVIORS[libARRA_gv_cACHESIZE_BEHAVIORS] = lp_behavior;
    libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Requirements", lp_player)));
    autoA923F3FD_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (autoA923F3FD_val == libARRA_gv_cBehaviorBuff) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
    }
    else {
    }
}

void libARRA_gf_CacheEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoC62968AA_ae;
    const int autoC62968AA_ai = 1;
    int auto2D469C64_ae;
    const int auto2D469C64_ai = 1;
    int auto3260A0B2_val;
    int auto382E608E_ae;
    const int auto382E608E_ai = 1;
    int autoEA401686_ae;
    const int autoEA401686_ai = 1;
    int auto9B99D7AB_ae;
    const int auto9B99D7AB_ai = 1;
    int auto290760F4_ae;
    const int auto290760F4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return ;
    }

    autoC62968AA_ae = libARRA_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (autoC62968AA_ai >= 0 && lv_i <= autoC62968AA_ae) || (autoC62968AA_ai < 0 && lv_i >= autoC62968AA_ae) ) ; lv_i += autoC62968AA_ai ) {
        if ((libARRA_gv_cACHE_EFFECTS[lv_i] == lp_effect)) {
            return ;
        }

    }
    libARRA_gv_cACHESIZE_EFFECTS += 1;
    libARRA_gv_cACHE_EFFECTS[libARRA_gv_cACHESIZE_EFFECTS] = lp_effect;
    auto2D469C64_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "ValidatorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto2D469C64_ai >= 0 && lv_i <= auto2D469C64_ae) || (auto2D469C64_ai < 0 && lv_i >= auto2D469C64_ae) ) ; lv_i += auto2D469C64_ai ) {
        libARRA_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ValidatorArray[" + IntToString(lv_i) + "]", lp_player)));
    }
    auto3260A0B2_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (auto3260A0B2_val == libARRA_gv_cEffectIssueOrder) {
        libARRA_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player)), false);
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectApplyBehavior) {
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player)));
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectCreateHealer) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectCreatePersistent) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        auto382E608E_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto382E608E_ai >= 0 && lv_i <= auto382E608E_ae) || (auto382E608E_ai < 0 && lv_i >= auto382E608E_ae) ) ; lv_i += auto382E608E_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectCreateUnit) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player)));
        autoEA401686_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoEA401686_ai >= 0 && lv_i <= autoEA401686_ae) || (autoEA401686_ai < 0 && lv_i >= autoEA401686_ae) ) ; lv_i += autoEA401686_ai ) {
            libARRA_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)));
            libARRA_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)), false);
        }
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectDamage) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "DamageInheritEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactLocation.Effect", lp_player)));
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectLaunchMissile) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player)));
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player)));
        libARRA_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player)));
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectSet) {
        auto9B99D7AB_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto9B99D7AB_ai >= 0 && lv_i <= auto9B99D7AB_ae) || (auto9B99D7AB_ai < 0 && lv_i >= auto9B99D7AB_ae) ) ; lv_i += auto9B99D7AB_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectTeleport) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player)));
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectModifyUnit) {
        libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ModifyTurret.AimCompleteEffect", lp_player)));
    }
    else if (auto3260A0B2_val == libARRA_gv_cEffectSwitch) {
        auto290760F4_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "CaseArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto290760F4_ai >= 0 && lv_i <= auto290760F4_ae) || (auto290760F4_ai < 0 && lv_i >= auto290760F4_ae) ) ; lv_i += auto290760F4_ai ) {
            libARRA_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Effect", lp_player)));
            libARRA_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Validator", lp_player)));
        }
    }
    else {
    }
}

void libARRA_gf_CacheValidator (int lp_player, string lp_validator) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto70CE7CEA_val;
    int auto53CD7532_ae;
    const int auto53CD7532_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogValidator, lp_validator) == false)) {
        return ;
    }

    auto70CE7CEA_val = CatalogEntryClass(c_gameCatalogValidator, lp_validator);
    if (auto70CE7CEA_val == libARRA_gv_cValidatorCombine) {
        auto53CD7532_ae = (CatalogFieldValueCount(c_gameCatalogValidator, lp_validator, "CombineArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto53CD7532_ai >= 0 && lv_i <= auto53CD7532_ae) || (auto53CD7532_ai < 0 && lv_i >= auto53CD7532_ae) ) ; lv_i += auto53CD7532_ai ) {
            libARRA_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "CombineArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto70CE7CEA_val == libARRA_gv_cValidatorPlayerReqirement) {
        libARRA_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "Value", lp_player)));
    }
    else {
    }
}

void libARRA_gf_CacheRequirement (int lp_player, string lp_requirement) {
    // Variable Declarations
    int lv_i;
    string lv_requirementNode;

    // Automatic Variable Declarations
    int auto3BE5A61E_ae;
    const int auto3BE5A61E_ai = 1;
    int autoDBD83CC8_ae;
    const int autoDBD83CC8_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirement, lp_requirement) == false)) {
        return ;
    }

    auto3BE5A61E_ae = libARRA_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (auto3BE5A61E_ai >= 0 && lv_i <= auto3BE5A61E_ae) || (auto3BE5A61E_ai < 0 && lv_i >= auto3BE5A61E_ae) ) ; lv_i += auto3BE5A61E_ai ) {
        if ((libARRA_gv_cACHE_REQUIREMENT[lv_i] == lp_requirement)) {
            return ;
        }

    }
    libARRA_gv_cACHESIZE_REQUIREMENT += 1;
    libARRA_gv_cACHE_REQUIREMENT[libARRA_gv_cACHESIZE_REQUIREMENT] = lp_requirement;
    autoDBD83CC8_ae = (CatalogFieldValueCount(c_gameCatalogRequirement, lp_requirement, "NodeArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoDBD83CC8_ai >= 0 && lv_i <= autoDBD83CC8_ae) || (autoDBD83CC8_ai < 0 && lv_i >= autoDBD83CC8_ae) ) ; lv_i += autoDBD83CC8_ai ) {
        lv_requirementNode = (CatalogFieldValueGet(c_gameCatalogRequirement, lp_requirement, "NodeArray[" + IntToString(lv_i) + "].Link", lp_player));
        libARRA_gf_CacheRequirementNode(lp_player, lv_requirementNode);
    }
}

void libARRA_gf_CacheRequirementNode (int lp_player, string lp_requirementNode) {
    // Variable Declarations
    string lv_uNIT;
    string lv_uPGRADE;
    string lv_requirementNode;
    string lv_requirementNodeIter;
    string lv_aLIAS;
    string lv_aliasIter;
    int lv_i;

    // Automatic Variable Declarations
    int autoFFF1A5B9_ae;
    const int autoFFF1A5B9_ai = 1;
    int auto19FF52C7_catalog;
    int auto19FF52C7_i;
    int autoAE1197EF_ae;
    const int autoAE1197EF_ai = 1;
    int auto24B3BE43_catalog;
    int auto24B3BE43_i;
    int auto60A5D46A_ae;
    const int auto60A5D46A_ai = 1;

    // Variable Initialization
    lv_requirementNode = lp_requirementNode;
    lv_aLIAS = "";
    lv_aliasIter = "";

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirementNode, lp_requirementNode) == false)) {
        return ;
    }

    if (((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARRA_gv_cRequirementAnd) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARRA_gv_cRequirementOr) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARRA_gv_cRequirementEq) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARRA_gv_cRequirementGT) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARRA_gv_cRequirementGTE))) {
        autoFFF1A5B9_ae = (CatalogFieldValueCount(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoFFF1A5B9_ai >= 0 && lv_i <= autoFFF1A5B9_ae) || (autoFFF1A5B9_ai < 0 && lv_i >= autoFFF1A5B9_ae) ) ; lv_i += autoFFF1A5B9_ai ) {
            lv_requirementNodeIter = (CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray[" + IntToString(lv_i) + "]", lp_player));
            libARRA_gf_CacheRequirementNode(lp_player, lv_requirementNodeIter);
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARRA_gv_cRequirementCountUnit)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        auto19FF52C7_catalog = c_gameCatalogUnit;
        auto19FF52C7_i = 1;
        for ( ; auto19FF52C7_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto19FF52C7_i += 1 ) {
            lv_uNIT = CatalogEntryGet(auto19FF52C7_catalog, auto19FF52C7_i);
            if ((PlayerRace(lp_player) != "Neut") && (libARRA_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uNIT) == lv_aLIAS)) {
                libARRA_gf_CacheUnit(lp_player, lv_uNIT, true);
            }
            else {
                autoAE1197EF_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (autoAE1197EF_ai >= 0 && lv_i <= autoAE1197EF_ae) || (autoAE1197EF_ai < 0 && lv_i >= autoAE1197EF_ae) ) ; lv_i += autoAE1197EF_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        libARRA_gf_CacheUnit(lp_player, lv_uNIT, true);
                    }

                }
            }
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == libARRA_gv_cRequirementCountUpgrade)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        auto24B3BE43_catalog = c_gameCatalogUpgrade;
        auto24B3BE43_i = 1;
        for ( ; auto24B3BE43_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto24B3BE43_i += 1 ) {
            lv_uPGRADE = CatalogEntryGet(auto24B3BE43_catalog, auto24B3BE43_i);
            if ((PlayerRace(lp_player) != "Neut") && (libARRA_gf_GetUpgradeRace(lv_uPGRADE) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uPGRADE) == lv_aLIAS)) {
                libARRA_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
            }
            else {
                auto60A5D46A_ae = (CatalogFieldValueCount(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (auto60A5D46A_ai >= 0 && lv_i <= auto60A5D46A_ae) || (auto60A5D46A_ai < 0 && lv_i >= auto60A5D46A_ae) ) ; lv_i += auto60A5D46A_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        libARRA_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
                    }

                }
            }
        }
    }

}

bool libARRA_gf_ByPassBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto89F19F52_val;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return false;
    }

    auto89F19F52_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (auto89F19F52_val == libARRA_gv_cBehaviorBuff) {
        if ((libARRA_gv_sEARCHMODE == libARRA_ge_SearchMode_Detection)) {
            if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lp_behavior, "Modification.Detect", lp_player) > 0.0)) {
                return true;
            }

        }

        if (((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

bool libARRA_gf_ByPassEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_unitscount;
    int lv_i;

    // Automatic Variable Declarations
    int auto66B4DA76_ae;
    const int auto66B4DA76_ai = 1;
    int auto9EEAEEA9_val;
    int auto91B51296_ae;
    const int auto91B51296_ai = 1;
    int auto7A092D4E_ae;
    const int auto7A092D4E_ai = 1;
    int auto734B1755_ae;
    const int auto734B1755_ai = 1;
    int autoF87F7F5D_ae;
    const int autoF87F7F5D_ai = 1;
    int auto10AAF7DF_ae;
    const int auto10AAF7DF_ai = 1;
    int auto5A86DB30_ae;
    const int auto5A86DB30_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return false;
    }

    auto66B4DA76_ae = libARRA_gv_cACHE_TMPEFFECTS_SIZE;
    lv_i = 1;
    for ( ; ( (auto66B4DA76_ai >= 0 && lv_i <= auto66B4DA76_ae) || (auto66B4DA76_ai < 0 && lv_i >= auto66B4DA76_ae) ) ; lv_i += auto66B4DA76_ai ) {
        if ((libARRA_gv_cACHE_TMPEFFECTS[lv_i] == lp_effect)) {
            return false;
        }

    }
    libARRA_gv_cACHE_TMPEFFECTS_SIZE += 1;
    libARRA_gv_cACHE_TMPEFFECTS[libARRA_gv_cACHE_TMPEFFECTS_SIZE] = lp_effect;
    auto9EEAEEA9_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (auto9EEAEEA9_val == libARRA_gv_cEffectIssueOrder) {
        if ((libARRA_gf_ByPassAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectApplyBehavior) {
        if ((libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectCreateHealer) {
        if (((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectCreatePersistent) {
        auto91B51296_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto91B51296_ai >= 0 && lv_i <= auto91B51296_ae) || (auto91B51296_ai < 0 && lv_i >= auto91B51296_ae) ) ; lv_i += auto91B51296_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectLaunchMissile) {
        if (((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player))) == true) || (libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player))) == true) || (libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectSet) {
        auto7A092D4E_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto7A092D4E_ai >= 0 && lv_i <= auto7A092D4E_ae) || (auto7A092D4E_ai < 0 && lv_i >= auto7A092D4E_ae) ) ; lv_i += auto7A092D4E_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectTeleport) {
        if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectSearchArea) {
        auto734B1755_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "AreaArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto734B1755_ai >= 0 && lv_i <= auto734B1755_ae) || (auto734B1755_ai < 0 && lv_i >= auto734B1755_ae) ) ; lv_i += auto734B1755_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "AreaArray[" + IntToString(lv_i) + "].Effect", lp_player))) == true)) {
                return true;
            }

        }
        if ((libARRA_gv_sEARCHMODE == libARRA_ge_SearchMode_Agressive)) {
            if ((libARRA_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchFilters", lp_player)) == false)) {
                return true;
            }

        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectModifyUnit) {
        if ((libARRA_gv_sEARCHMODE == libARRA_ge_SearchMode_Ability)) {
            autoF87F7F5D_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "Cost", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (autoF87F7F5D_ai >= 0 && lv_i <= autoF87F7F5D_ae) || (autoF87F7F5D_ai < 0 && lv_i >= autoF87F7F5D_ae) ) ; lv_i += autoF87F7F5D_ai ) {
                if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Cost[" + IntToString(lv_i) + "].Abil", lp_player)) == libARRA_gv_bYPASS_SEARCH_ABILITY_COMMAND)) {
                    return true;
                }

            }
        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectDamage) {
        if ((libARRA_gv_sEARCHMODE == libARRA_ge_SearchMode_Agressive)) {
            if (((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Amount", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Random", lp_player) > 0.0))) {
                return true;
            }

        }

    }
    else if (auto9EEAEEA9_val == libARRA_gv_cEffectCreateUnit) {
        if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player))) == true)) {
            return true;
        }

        if ((libARRA_gv_sEARCHMODE == libARRA_ge_SearchMode_Agressive)) {
            auto10AAF7DF_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (auto10AAF7DF_ai >= 0 && lv_i <= auto10AAF7DF_ae) || (auto10AAF7DF_ai < 0 && lv_i >= auto10AAF7DF_ae) ) ; lv_i += auto10AAF7DF_ai ) {
                if ((libARRA_gf_UnitIsDanger(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                    return true;
                }

            }
        }

        if ((libARRA_gv_sEARCHMODE == libARRA_ge_SearchMode_Units)) {
            lv_unitscount = CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player);
            if ((lv_unitscount > 0)) {
                auto5A86DB30_ae = (lv_unitscount - 1);
                lv_i = 0;
                for ( ; ( (auto5A86DB30_ai >= 0 && lv_i <= auto5A86DB30_ae) || (auto5A86DB30_ai < 0 && lv_i >= auto5A86DB30_ae) ) ; lv_i += auto5A86DB30_ai ) {
                    libARRA_gf_ListStringInclude(libARRA_gv_byPassUnits, CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player));
                }
                return true;
            }

        }

    }
    else {
    }
    return false;
}

bool libARRA_gf_ByPassAbility (int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto26AB4DB4_val;
    int auto14BDEADD_ae;
    const int auto14BDEADD_ai = 1;
    int autoDD773812_ae;
    const int autoDD773812_ai = 1;
    int auto94084934_ae;
    const int auto94084934_ai = 1;
    int auto6AC022BC_ae;
    const int auto6AC022BC_ai = 1;
    int auto9C5744F1_ae;
    const int auto9C5744F1_ai = 1;
    int auto75ADA0D1_ae;
    const int auto75ADA0D1_ai = 1;
    int auto2A16DA9B_ae;
    const int auto2A16DA9B_ai = 1;
    int auto8346C95A_ae;
    const int auto8346C95A_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return false;
    }

    auto26AB4DB4_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (auto26AB4DB4_val == libARRA_gv_cAbilityAugment) {
        if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto26AB4DB4_val == libARRA_gv_cAbilityArmMagazine) {
        if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true) && (libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        auto14BDEADD_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto14BDEADD_ai >= 0 && lv_i <= auto14BDEADD_ae) || (auto14BDEADD_ai < 0 && lv_i >= auto14BDEADD_ae) ) ; lv_i += auto14BDEADD_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto26AB4DB4_val == libARRA_gv_cAbilityBehavior) {
        if ((libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        autoDD773812_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoDD773812_ai >= 0 && lv_i <= autoDD773812_ae) || (autoDD773812_ai < 0 && lv_i >= autoDD773812_ae) ) ; lv_i += autoDD773812_ai ) {
            if ((libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto26AB4DB4_val == libARRA_gv_cAbilityEffectInstant) {
        if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        auto94084934_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto94084934_ai >= 0 && lv_i <= auto94084934_ae) || (auto94084934_ai < 0 && lv_i >= auto94084934_ae) ) ; lv_i += auto94084934_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto6AC022BC_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto6AC022BC_ai >= 0 && lv_i <= auto6AC022BC_ae) || (auto6AC022BC_ai < 0 && lv_i >= auto6AC022BC_ae) ) ; lv_i += auto6AC022BC_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto9C5744F1_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto9C5744F1_ai >= 0 && lv_i <= auto9C5744F1_ae) || (auto9C5744F1_ai < 0 && lv_i >= auto9C5744F1_ae) ) ; lv_i += auto9C5744F1_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true) || (libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto26AB4DB4_val == libARRA_gv_cAbilityEffectTarget) {
        if ((libARRA_gv_sEARCHMODE == libARRA_ge_SearchMode_Agressive)) {
            if ((CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "TargetFilters", lp_player) > 0) && (libARRA_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "TargetFilters[" + IntToString(0) + "]", lp_player)) == false)) {
                return true;
            }

        }

        if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        auto75ADA0D1_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto75ADA0D1_ai >= 0 && lv_i <= auto75ADA0D1_ae) || (auto75ADA0D1_ai < 0 && lv_i >= auto75ADA0D1_ae) ) ; lv_i += auto75ADA0D1_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto2A16DA9B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2A16DA9B_ai >= 0 && lv_i <= auto2A16DA9B_ae) || (auto2A16DA9B_ai < 0 && lv_i >= auto2A16DA9B_ae) ) ; lv_i += auto2A16DA9B_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto8346C95A_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto8346C95A_ai >= 0 && lv_i <= auto8346C95A_ae) || (auto8346C95A_ai < 0 && lv_i >= auto8346C95A_ae) ) ; lv_i += auto8346C95A_ai ) {
            if ((libARRA_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (libARRA_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

bool libARRA_gf_UpgradeIsUsefulForPlayer (int lp_player, string lp_upgrade) {
    // Variable Declarations
    int lv_i;
    string lv_upgradeEntry;
    string lv_unitEntry;
    string lv_behavior;
    int lv_affectedUnitIndex;
    int lv_effectArrayIndex;
    string lv_effectArrayReference;
    string lv_effectArrayType;
    string lv_effectArrayLink;

    // Automatic Variable Declarations
    int autoC0A5C3C4_ae;
    const int autoC0A5C3C4_ai = 1;
    int autoB02A8668_ae;
    const int autoB02A8668_ai = 1;
    string auto3B6A055B_val;
    int auto4E31220C_ae;
    const int auto4E31220C_ai = 1;
    int autoD30E7FEC_ae;
    const int autoD30E7FEC_ai = 1;
    int auto7F51832E_ae;
    const int auto7F51832E_ai = 1;
    int autoACCADCC9_ae;
    const int autoACCADCC9_ai = 1;
    int autoD6E36BA7_ae;
    const int autoD6E36BA7_ai = 1;

    // Variable Initialization
    lv_upgradeEntry = lp_upgrade;
    lv_effectArrayReference = "";
    lv_effectArrayType = "";
    lv_effectArrayLink = "";

    // Implementation
    autoC0A5C3C4_ae = libARRA_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (autoC0A5C3C4_ai >= 0 && lv_i <= autoC0A5C3C4_ae) || (autoC0A5C3C4_ai < 0 && lv_i >= autoC0A5C3C4_ae) ) ; lv_i += autoC0A5C3C4_ai ) {
        if ((libARRA_gv_cACHE_UPGRADES[lv_i] == lv_upgradeEntry)) {
            return false;
        }

    }
    if ((PlayerRace(lp_player) != "Neut") && (libARRA_gf_GetUpgradeRace(lv_upgradeEntry) != PlayerRace(lp_player))) {
        return false;
    }

    autoB02A8668_ae = (CatalogFieldValueCount(c_gameCatalogUpgrade, lv_upgradeEntry, "EffectArray", lp_player) - 1);
    lv_effectArrayIndex = 0;
    for ( ; ( (autoB02A8668_ai >= 0 && lv_effectArrayIndex <= autoB02A8668_ae) || (autoB02A8668_ai < 0 && lv_effectArrayIndex >= autoB02A8668_ae) ) ; lv_effectArrayIndex += autoB02A8668_ai ) {
        lv_effectArrayReference = StringReplaceWord(CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgradeEntry, "EffectArray[" + IntToString(lv_effectArrayIndex) + "].Reference", lp_player), ",", " ", c_stringReplaceAll, c_stringCase);
        lv_effectArrayType = StringWord(lv_effectArrayReference, 1);
        lv_effectArrayLink = StringWord(lv_effectArrayReference, 2);
        auto3B6A055B_val = lv_effectArrayType;
        if (auto3B6A055B_val == "Behavior") {
            auto4E31220C_ae = libARRA_gv_cACHESIZE_BEHAVIORS;
            lv_i = 1;
            for ( ; ( (auto4E31220C_ai >= 0 && lv_i <= auto4E31220C_ae) || (auto4E31220C_ai < 0 && lv_i >= auto4E31220C_ae) ) ; lv_i += auto4E31220C_ai ) {
                if ((libARRA_gv_cACHE_BEHAVIORS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto3B6A055B_val == "Abil") {
            autoD30E7FEC_ae = libARRA_gv_cACHESIZE_ABILITIES;
            lv_i = 1;
            for ( ; ( (autoD30E7FEC_ai >= 0 && lv_i <= autoD30E7FEC_ae) || (autoD30E7FEC_ai < 0 && lv_i >= autoD30E7FEC_ae) ) ; lv_i += autoD30E7FEC_ai ) {
                if ((libARRA_gv_cACHE_ABILITIES[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto3B6A055B_val == "Effect") {
            auto7F51832E_ae = libARRA_gv_cACHESIZE_EFFECTS;
            lv_i = 1;
            for ( ; ( (auto7F51832E_ai >= 0 && lv_i <= auto7F51832E_ae) || (auto7F51832E_ai < 0 && lv_i >= auto7F51832E_ae) ) ; lv_i += auto7F51832E_ai ) {
                if ((libARRA_gv_cACHE_EFFECTS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto3B6A055B_val == "Weapon") {
            autoACCADCC9_ae = libARRA_gv_cACHESIZE_WEAPONS;
            lv_i = 1;
            for ( ; ( (autoACCADCC9_ai >= 0 && lv_i <= autoACCADCC9_ae) || (autoACCADCC9_ai < 0 && lv_i >= autoACCADCC9_ae) ) ; lv_i += autoACCADCC9_ai ) {
                if ((libARRA_gv_cACHE_WEAPONS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto3B6A055B_val == "Unit") {
            autoD6E36BA7_ae = libARRA_gv_cACHESIZE_UNITS;
            lv_i = 1;
            for ( ; ( (autoD6E36BA7_ai >= 0 && lv_i <= autoD6E36BA7_ae) || (autoD6E36BA7_ai < 0 && lv_i >= autoD6E36BA7_ae) ) ; lv_i += autoD6E36BA7_ai ) {
                if ((libARRA_gv_cACHE_UNITS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else {
        }
    }
    return false;
}

string libARRA_gf_GetUpgradeRace (string lp_upgrade) {
    // Variable Declarations
    string lv_editorCategories;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editorCategories = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny);

    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny));
}

bool libARRA_gf_UnitIsDanger (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_ability;
    string lv_behavior;
    bool lv_isDanger;

    // Automatic Variable Declarations
    int auto320EDB39_ae;
    const int auto320EDB39_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return false;
    }

    if ((StringFind(libARRA_gv_cACHE_DANGER_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(libARRA_gv_cACHE_SAFE_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return false;
    }

    if ((CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) > 0)) {
        libARRA_gv_cACHE_DANGER_UNITS = (libARRA_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
        return true;
    }

    auto320EDB39_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto320EDB39_ai >= 0 && lv_i <= auto320EDB39_ae) || (auto320EDB39_ai < 0 && lv_i >= auto320EDB39_ae) ) ; lv_i += auto320EDB39_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((libARRA_gf_AbilityIsDanger(lp_player, lv_ability) == true)) {
            libARRA_gv_cACHE_DANGER_UNITS = (libARRA_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
            return true;
        }

    }
    libARRA_gv_cACHE_SAFE_UNITS = (libARRA_gv_cACHE_SAFE_UNITS + (lp_unit) + " ");
    return false;
}

bool libARRA_gf_UnitisDetector (int lp_player, string lp_unitType) {
    // Variable Declarations
    string lv_ability;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto9CE1E6D2_ae;
    int auto9CE1E6D2_var;
    int auto4657E62F_ae;
    int auto4657E62F_var;

    // Variable Initialization

    // Implementation
    auto9CE1E6D2_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "AbilArray", lp_player) - 1);
    auto9CE1E6D2_var = 0;
    for ( ; auto9CE1E6D2_var <= auto9CE1E6D2_ae; auto9CE1E6D2_var += 1 ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "AbilArray[" + IntToString(auto9CE1E6D2_var) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == true) && (libARRA_gf_AbilityIsDetector(lp_player, lv_ability) == true)) {
            continue;
        }

    }
    auto4657E62F_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "BehaviorArray", lp_player) - 1);
    auto4657E62F_var = 0;
    for ( ; auto4657E62F_var <= auto4657E62F_ae; auto4657E62F_var += 1 ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "BehaviorArray[" + IntToString(auto4657E62F_var) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_behavior) == true) && (libARRA_gf_BehaviorisDetector(lp_player, lv_behavior) == true)) {
            return true;
        }

    }
    return false;
}

bool libARRA_gf_AbilityIsDanger (int lp_player, string lp_ability) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARRA_gv_cACHE_DANGER_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(libARRA_gv_cACHE_SAFE_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return false;
    }

    libARRA_gv_sEARCHMODE = libARRA_ge_SearchMode_Agressive;
    libARRA_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = libARRA_gf_ByPassAbility(lp_player, lp_ability);
    if ((lv_isDanger == true)) {
        libARRA_gv_cACHE_DANGER_ABILITIES = (libARRA_gv_cACHE_DANGER_ABILITIES + (lp_ability) + " ");
    }
    else {
        libARRA_gv_cACHE_SAFE_ABILITIES = (libARRA_gv_cACHE_SAFE_ABILITIES + (lp_ability) + " ");
    }
    return lv_isDanger;
}

bool libARRA_gf_AbilityIsDetector (int lp_player, string lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_sEARCHMODE = libARRA_ge_SearchMode_Detection;
    libARRA_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return libARRA_gf_ByPassAbility(lp_player, lp_ability);
}

bool libARRA_gf_BehaviorisDanger (int lp_player, string lp_behavior) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARRA_gv_cACHE_DANGER_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(libARRA_gv_cACHE_SAFE_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return false;
    }

    libARRA_gv_sEARCHMODE = libARRA_ge_SearchMode_Agressive;
    libARRA_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = libARRA_gf_ByPassBehavior(lp_player, lp_behavior);
    if ((lv_isDanger == true)) {
        libARRA_gv_cACHE_DANGER_BEHAVIOR = (libARRA_gv_cACHE_DANGER_BEHAVIOR + (lp_behavior) + " ");
    }
    else {
        libARRA_gv_cACHE_SAFE_BEHAVIOR = (libARRA_gv_cACHE_SAFE_BEHAVIOR + (lp_behavior) + " ");
    }
    return lv_isDanger;
}

bool libARRA_gf_BehaviorisDetector (int lp_player, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_sEARCHMODE = libARRA_ge_SearchMode_Detection;
    libARRA_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return libARRA_gf_ByPassBehavior(lp_player, lp_behavior);
}

bool libARRA_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil) {
    // Variable Declarations
    bool lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gv_sEARCHMODE = libARRA_ge_SearchMode_Ability;
    libARRA_gv_cACHE_TMPEFFECTS_SIZE = 0;
    libARRA_gv_bYPASS_SEARCH_ABILITY_COMMAND = lp_abil;
    lv_value = libARRA_gf_ByPassBehavior(lp_player, lp_behavior);
    libARRA_gv_bYPASS_SEARCH_ABILITY_COMMAND = null;
    return lv_value;
}

bool libARRA_gf_Canbebuilton (unit lp_unit, point lp_point) {
    int init_i;

    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_r;
    int[16] lv_enemyDefenseBuildingTickCount;

    // Automatic Variable Declarations
    int auto199C291E_ae;
    const fixed auto199C291E_ai = 0.5;
    int auto8E3ABD81_ae;
    const fixed auto8E3ABD81_ai = 0.5;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_enemyDefenseBuildingTickCount[init_i] = 2;
    }

    // Implementation
    if ((RegionContainsPoint(RegionPlayableMap(), lp_point) == false)) {
        return false;
    }

    auto199C291E_ae = CeilingI((PointGetX(lp_point) + lv_r));
    lv_x = FloorI((PointGetX(lp_point) - lv_r));
    for ( ; ( (auto199C291E_ai >= 0 && lv_x <= auto199C291E_ae) || (auto199C291E_ai < 0 && lv_x >= auto199C291E_ae) ) ; lv_x += auto199C291E_ai ) {
        auto8E3ABD81_ae = CeilingI((PointGetY(lp_point) + lv_r));
        lv_y = FloorI((PointGetY(lp_point) - lv_r));
        for ( ; ( (auto8E3ABD81_ai >= 0 && lv_y <= auto8E3ABD81_ae) || (auto8E3ABD81_ai < 0 && lv_y >= auto8E3ABD81_ae) ) ; lv_y += auto8E3ABD81_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (RegionContainsPoint(RegionCircle(lp_point, lv_r), Point(lv_x, lv_y)) == true) && (libARRA_gf_Canbebuiltonabranch(Point(lv_x, lv_y), lv_enemyDefenseBuildingTickCount[UnitGetOwner(lp_unit)]) == true)) {
                return true;
            }

        }
    }
    return false;
}

bool libARRA_gf_Canbebuiltonabranch (point lp_point, int lp_number) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    fixed auto2C6F45B0_ae;
    const fixed auto2C6F45B0_ai = 0.5;
    fixed autoB005924B_ae;
    const fixed autoB005924B_ai = 0.5;

    // Variable Initialization

    // Implementation
    auto2C6F45B0_ae = (PointGetX(lp_point) + (lp_number / 2.0));
    lv_x = (PointGetX(lp_point) - (lp_number / 2.0));
    for ( ; ( (auto2C6F45B0_ai >= 0 && lv_x <= auto2C6F45B0_ae) || (auto2C6F45B0_ai < 0 && lv_x >= auto2C6F45B0_ae) ) ; lv_x += auto2C6F45B0_ai ) {
        autoB005924B_ae = (PointGetY(lp_point) + (lp_number / 2.0));
        lv_y = (PointGetY(lp_point) - (lp_number / 2.0));
        for ( ; ( (autoB005924B_ai >= 0 && lv_y <= autoB005924B_ae) || (autoB005924B_ai < 0 && lv_y >= autoB005924B_ae) ) ; lv_y += autoB005924B_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (PathingType(Point(lv_x, lv_y)) != c_pathingUnpathable) && (PathingType(Point(lv_x, lv_y)) != c_pathingCliff)) {
            }
            else {
                return false;
            }
        }
    }
    return true;
}

void libARRA_gf_ResolveUnitAffectedUpgrades (int lp_player) {
    // Variable Declarations
    int lv_i;
    string lv_unitEntry;
    string lv_upgrade;
    string lv_behavior;
    int lv_affectedUnitIndex;
    int lv_effectArrayIndex;
    string lv_effectArrayReference;
    string lv_effectArrayType;
    string lv_effectArrayLink;

    // Automatic Variable Declarations
    int autoE972E0B3_catalog;
    int autoE972E0B3_i;

    // Variable Initialization
    lv_effectArrayReference = "";
    lv_effectArrayType = "";
    lv_effectArrayLink = "";

    // Implementation
    autoE972E0B3_catalog = c_gameCatalogUpgrade;
    autoE972E0B3_i = 1;
    for ( ; autoE972E0B3_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; autoE972E0B3_i += 1 ) {
        lv_upgrade = CatalogEntryGet(autoE972E0B3_catalog, autoE972E0B3_i);
        if ((libARRA_gf_UpgradeIsUsefulForPlayer(lp_player, lv_upgrade) == true)) {
            libARRA_gf_CacheUpgrade(lp_player, lv_upgrade, true);
        }

    }
}

bool libARRA_gf_AbilityIsIgnored (int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto4034020C_ae;
    const int auto4034020C_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return false;
    }

    auto4034020C_ae = UserDataInstanceCount("MonobattlesIgnore");
    lv_i = 1;
    for ( ; ( (auto4034020C_ai >= 0 && lv_i <= auto4034020C_ae) || (auto4034020C_ai < 0 && lv_i >= auto4034020C_ae) ) ; lv_i += auto4034020C_ai ) {
        if ((UserDataGetGameLink("MonobattlesIgnore", UserDataInstance("MonobattlesIgnore", lv_i), "Ability", 1) == lp_ability)) {
            return true;
        }

    }
    return false;
}

text libARRA_gf_UTC_NameOfUnitType (string lp_pUnitType) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vText = UnitTypeGetName(lp_pUnitType);
    if ((lp_pUnitType == "HHMagneticMineWeapon")) {
        lv_vText = UnitTypeGetName("HHMagneticMine");
    }
    else if ((lp_pUnitType == "HornerAirFleetStrafer")) {
        lv_vText = StringExternal("Button/Name/HornerAirFleet");
    }
    else if ((lp_pUnitType == "SILiberatorCloud")) {
        lv_vText = UnitTypeGetName("SILiberator");
    }
    else if ((lp_pUnitType == "SOAThermalLanceTargeter")) {
        lv_vText = StringExternal("Button/Name/SOAThermalLance");
    }
    else if ((lp_pUnitType == "BroodlingEscortStetmann")) {
        lv_vText = UnitTypeGetName("BroodLordStetmann");
    }
    else if ((lp_pUnitType == "BroodlingEscort")) {
        lv_vText = UnitTypeGetName("BroodLord");
    }
    return lv_vText;
}

string libARRA_gf_UT_StageToString (int lp_pStage) {
    // Variable Declarations
    string lv_vStage;

    // Automatic Variable Declarations
    int autoC3CACD3A_val;

    // Variable Initialization
    lv_vStage = "";

    // Implementation
    autoC3CACD3A_val = lp_pStage;
    if (autoC3CACD3A_val == c_unitAbilStageAll) {
        lv_vStage = "Any";
    }
    else if (autoC3CACD3A_val == c_unitAbilStageQueue) {
        lv_vStage = "Queue";
    }
    else if (autoC3CACD3A_val == c_unitAbilStageExecute) {
        lv_vStage = "Execute";
    }
    else if (autoC3CACD3A_val == c_unitAbilStageCancel) {
        lv_vStage = "Cancel";
    }
    else if (autoC3CACD3A_val == c_unitAbilStagePreempt) {
        lv_vStage = "Preempt";
    }
    else if (autoC3CACD3A_val == c_unitAbilStageComplete) {
        lv_vStage = "Complete";
    }
    else if (autoC3CACD3A_val == c_unitAbilStagePause) {
        lv_vStage = "Pause";
    }
    else if (autoC3CACD3A_val == c_unitAbilStageUnpause) {
        lv_vStage = "Unpause";
    }
    else {
        lv_vStage = "-";
    }
    return lv_vStage;
}

trigger auto_libARRA_gf_UT_Rise_Trigger = null;
unit auto_libARRA_gf_UT_Rise_lp_pUnit;

void libARRA_gf_UT_Rise (unit lp_pUnit) {
    auto_libARRA_gf_UT_Rise_lp_pUnit = lp_pUnit;

    if (auto_libARRA_gf_UT_Rise_Trigger == null) {
        auto_libARRA_gf_UT_Rise_Trigger = TriggerCreate("auto_libARRA_gf_UT_Rise_TriggerFunc");
    }

    TriggerExecute(auto_libARRA_gf_UT_Rise_Trigger, false, false);
}

bool auto_libARRA_gf_UT_Rise_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_libARRA_gf_UT_Rise_lp_pUnit;

    // Variable Declarations
    int lv_vB;

    // Automatic Variable Declarations
    const int auto841FEBA4_n = 10;
    int auto841FEBA4_i;

    // Variable Initialization
    lv_vB = 10;

    // Implementation
    for (auto841FEBA4_i = 1; auto841FEBA4_i <= auto841FEBA4_n; auto841FEBA4_i += 1) {
        lv_vB -= 1;
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetHeight -0." +IntToString(lv_vB));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

string libARRA_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator) {
    // Variable Declarations
    const string lv_vSEP = "SEP#";
    string lv_vString;
    int lv_vA;

    // Automatic Variable Declarations
    int auto88F16054_ae;
    const int auto88F16054_ai = 1;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    auto88F16054_ae = lp_pN;
    lv_vA = 1;
    for ( ; ( (auto88F16054_ai >= 0 && lv_vA <= auto88F16054_ae) || (auto88F16054_ai < 0 && lv_vA >= auto88F16054_ae) ) ; lv_vA += auto88F16054_ai ) {
        lv_vString = StringReplaceWord(lv_vString, lp_pSeparator, (lv_vSEP + IntToString(lv_vA)), 1, c_stringCase);
    }
    if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) > 0)) {
        return StringSub(lv_vString, 1, (StringFind(lv_vString, (lv_vSEP + "1"), c_stringCase)-1));
    }
    else if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return lv_vString;
    }
    else if ((StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), StringLength(lv_vString));
    }
    return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase)-1));
}

int libARRA_gf_UT_SingleHexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;

    // Automatic Variable Declarations
    string auto8659CB03_val;

    // Variable Initialization

    // Implementation
    auto8659CB03_val = lp_pString;
    if (auto8659CB03_val == "A") {
        lv_vOutput += 10;
    }
    else if (auto8659CB03_val == "a") {
        lv_vOutput += 10;
    }
    else if (auto8659CB03_val == "B") {
        lv_vOutput += 11;
    }
    else if (auto8659CB03_val == "b") {
        lv_vOutput += 11;
    }
    else if (auto8659CB03_val == "C") {
        lv_vOutput += 12;
    }
    else if (auto8659CB03_val == "c") {
        lv_vOutput += 12;
    }
    else if (auto8659CB03_val == "D") {
        lv_vOutput += 13;
    }
    else if (auto8659CB03_val == "d") {
        lv_vOutput += 13;
    }
    else if (auto8659CB03_val == "E") {
        lv_vOutput += 14;
    }
    else if (auto8659CB03_val == "e") {
        lv_vOutput += 14;
    }
    else if (auto8659CB03_val == "F") {
        lv_vOutput += 15;
    }
    else if (auto8659CB03_val == "f") {
        lv_vOutput += 15;
    }
    else {
        lv_vOutput += StringToInt(lp_pString);
    }
    return lv_vOutput;
}

void libARRA_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers) {
    // Variable Declarations
    const fixed lv_vTimeInterval = 0.125;
    int lv_vDiff;
    int lv_vCurrent;
    int lv_vSteps;
    int lv_vChange;

    // Automatic Variable Declarations
    int autoCA528236_n;
    int autoCA528236_i;

    // Variable Initialization
    lv_vDiff = AbsI((lp_pFrom - lp_pTo));
    lv_vCurrent = lp_pFrom;
    lv_vSteps = FixedToInt((lp_pTime / lv_vTimeInterval));
    lv_vChange = (lv_vDiff / lv_vSteps);

    // Implementation
    if ((lp_pTo == lp_pFrom)) {
        return ;
    }

    if ((lp_pTo < lp_pFrom)) {
        lv_vChange *= -1;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_ProgressionCounter_Loop1", -1), c_maxPlayers, lp_pPlayers, 100.0, 0.0);
    autoCA528236_n = lv_vSteps;
    for (autoCA528236_i = 1; autoCA528236_i <= autoCA528236_n; autoCA528236_i += 1) {
        Wait(lv_vTimeInterval, c_timeGame);
        lv_vCurrent += lv_vChange;
        TextExpressionSetToken("Param/Expression/lib_ARRA_319BE040", "A", lp_pTextBefore);
        TextExpressionSetToken("Param/Expression/lib_ARRA_319BE040", "B", IntToText(lv_vCurrent));
        TextExpressionSetToken("Param/Expression/lib_ARRA_319BE040", "C", lp_pTextAfter);
        libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_ARRA_319BE040"), PlayerGroupAll());
    }
    SoundStop(SoundLastPlayed(), false);
    TextExpressionSetToken("Param/Expression/lib_ARRA_D6E2BC8D", "A", lp_pTextBefore);
    TextExpressionSetToken("Param/Expression/lib_ARRA_D6E2BC8D", "B", IntToText(lp_pTo));
    TextExpressionSetToken("Param/Expression/lib_ARRA_D6E2BC8D", "C", lp_pTextAfter);
    libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_ARRA_D6E2BC8D"), PlayerGroupAll());
}

int libARRA_gf_UT_1StringToInteger (string lp_pLetter) {
    // Automatic Variable Declarations
    string auto5A8D1260_val;

    // Implementation
    auto5A8D1260_val = lp_pLetter;
    if (auto5A8D1260_val == "a") {
        return 10;
    }
    else if (auto5A8D1260_val == "b") {
        return 11;
    }
    else if (auto5A8D1260_val == "c") {
        return 12;
    }
    else if (auto5A8D1260_val == "d") {
        return 13;
    }
    else if (auto5A8D1260_val == "e") {
        return 14;
    }
    else if (auto5A8D1260_val == "f") {
        return 15;
    }
    else if (auto5A8D1260_val == "g") {
        return 16;
    }
    else if (auto5A8D1260_val == "h") {
        return 17;
    }
    else if (auto5A8D1260_val == "i") {
        return 18;
    }
    else if (auto5A8D1260_val == "j") {
        return 19;
    }
    else if (auto5A8D1260_val == "k") {
        return 20;
    }
    else if (auto5A8D1260_val == "l") {
        return 21;
    }
    else if (auto5A8D1260_val == "m") {
        return 22;
    }
    else if (auto5A8D1260_val == "n") {
        return 23;
    }
    else if (auto5A8D1260_val == "o") {
        return 24;
    }
    else if (auto5A8D1260_val == "p") {
        return 25;
    }
    else if (auto5A8D1260_val == "q") {
        return 26;
    }
    else if (auto5A8D1260_val == "r") {
        return 27;
    }
    else if (auto5A8D1260_val == "s") {
        return 28;
    }
    else if (auto5A8D1260_val == "t") {
        return 29;
    }
    else if (auto5A8D1260_val == "u") {
        return 30;
    }
    else if (auto5A8D1260_val == "v") {
        return 31;
    }
    else if (auto5A8D1260_val == "w") {
        return 32;
    }
    else if (auto5A8D1260_val == "x") {
        return 33;
    }
    else if (auto5A8D1260_val == "y") {
        return 34;
    }
    else if (auto5A8D1260_val == "z") {
        return 35;
    }
    else {
        return StringToInt(lp_pLetter);
    }
}

int libARRA_gf_UT_3StringsToInteger (string lp_pString) {
    // Variable Declarations
    string lv_v1;
    string lv_v2;
    string lv_v3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v1 = StringSub(lp_pString, 1, 1);
    lv_v2 = StringSub(lp_pString, 2, 2);
    lv_v3 = StringSub(lp_pString, 3, 3);

    // Implementation
    return (libARRA_gf_UT_1StringToInteger(lv_v1)*10000 + libARRA_gf_UT_1StringToInteger(lv_v2)*100 + libARRA_gf_UT_1StringToInteger(lv_v3));
}

string libARRA_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int auto27D1D1CC_n;
    int auto27D1D1CC_i;

    // Variable Initialization
    lv_vString = FixedToString(lp_pInputReal, lp_pPrecision);

    // Implementation
    auto27D1D1CC_n = (lp_pDigits - StringLength(lv_vString));
    for (auto27D1D1CC_i = 1; auto27D1D1CC_i <= auto27D1D1CC_n; auto27D1D1CC_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return lv_vString;
}

text libARRA_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int autoDAB59C49_n;
    int autoDAB59C49_i;

    // Variable Initialization
    lv_vString = IntToString(lp_pInputNumber);

    // Implementation
    autoDAB59C49_n = (lp_pDigits - StringLength(lv_vString));
    for (autoDAB59C49_i = 1; autoDAB59C49_i <= autoDAB59C49_n; autoDAB59C49_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return StringToText(lv_vString);
}

string libARRA_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol) {
    int init_i;

    // Variable Declarations
    int lv_vNumber;
    int[4] lv_vINT;
    string[4] lv_vSTRING;
    string lv_vSign;
    string lv_vDivingSymbol;
    int lv_vA;
    bool lv_vFirst;

    // Automatic Variable Declarations
    const int autoB7A87F62_ae = 3;
    const int autoB7A87F62_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_vSTRING[init_i] = "";
    }
    lv_vSign = "";
    lv_vDivingSymbol = "";
    lv_vFirst = true;

    // Implementation
    lv_vNumber = AbsI(lp_pNumber);
    if ((lp_pNumber != lv_vNumber)) {
        lv_vSign = "-";
    }

    lv_vINT[0] = (lv_vNumber / 1000000000);
    lv_vNumber -= (lv_vINT[0] * 1000000000);
    lv_vINT[1] = (lv_vNumber / 1000000);
    lv_vNumber -= (lv_vINT[1] * 1000000);
    lv_vINT[2] = (lv_vNumber / 1000);
    lv_vNumber -= (lv_vINT[2] * 1000);
    lv_vINT[3] = lv_vNumber;
    lv_vDivingSymbol = lp_pDividingSymbol;
    lv_vA = 0;
    for ( ; ( (autoB7A87F62_ai >= 0 && lv_vA <= autoB7A87F62_ae) || (autoB7A87F62_ai < 0 && lv_vA >= autoB7A87F62_ae) ) ; lv_vA += autoB7A87F62_ai ) {
        if ((lv_vA == 3)) {
            lv_vDivingSymbol = "";
        }

        if ((lv_vINT[lv_vA] != 0) && (lv_vFirst == true)) {
            lv_vFirst = false;
            lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
        }
        else {
            if ((lv_vINT[lv_vA] >= 100)) {
                lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
            }
            else {
                if ((lv_vINT[lv_vA] >= 10)) {
                    lv_vSTRING[lv_vA] = ("0" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                }
                else {
                    if ((lv_vINT[lv_vA] == 0) && (lv_vFirst == true)) {
                        lv_vSTRING[lv_vA] = "";
                    }
                    else {
                        lv_vSTRING[lv_vA] = ("00" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                    }
                }
            }
        }
    }
    return (lv_vSign + lv_vSTRING[0] + lv_vSTRING[1] + lv_vSTRING[2] + lv_vSTRING[3]);
}

text libARRA_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pTimeSeconds >= 3600.0)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_25556252", "C", IntToText(TruncI((lp_pTimeSeconds/3600))));
        TextExpressionSetToken("Param/Expression/lib_ARRA_25556252", "A", libARRA_gf_UT_AddStringsInfronttext(2, "0", TruncI((ModF(lp_pTimeSeconds, 3600.0)/60))));
        TextExpressionSetToken("Param/Expression/lib_ARRA_25556252", "B", libARRA_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_ARRA_25556252");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_ARRA_C569EC2F", "A", IntToText(TruncI((lp_pTimeSeconds/60))));
        TextExpressionSetToken("Param/Expression/lib_ARRA_C569EC2F", "B", libARRA_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_ARRA_C569EC2F");
    }
}

color libARRA_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps) {
    // Variable Declarations
    int lv_middle;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    int auto9E011743_val;

    // Variable Initialization

    // Implementation
    auto9E011743_val = lp_steps;
    if (auto9E011743_val == 1) {
        return lp_color1;
    }
    else if (auto9E011743_val == 2) {
        lv_r = (ColorGetComponent(lp_color1, c_colorComponentRed)+(ColorGetComponent(lp_color2, c_colorComponentRed)-ColorGetComponent(lp_color1, c_colorComponentRed))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_g = (ColorGetComponent(lp_color1, c_colorComponentGreen)+(ColorGetComponent(lp_color2, c_colorComponentGreen)-ColorGetComponent(lp_color1, c_colorComponentGreen))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_b = (ColorGetComponent(lp_color1, c_colorComponentBlue)+(ColorGetComponent(lp_color2, c_colorComponentBlue)-ColorGetComponent(lp_color1, c_colorComponentBlue))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        return Color(lv_r, lv_g, lv_b);
    }
    else if (auto9E011743_val == 3) {
        lv_middle = ((lp_minValue+lp_maxValue)/2);
        if ((lp_progress < lv_middle)) {
            return libARRA_gf_ProgressColor(lp_minValue, lv_middle, lp_progress, lp_color1, lp_color2, Color(0,0,0), 2);
        }
        else if ((lp_progress == lv_middle)) {
            return lp_color2;
        }
        else if ((lp_progress > lv_middle)) {
            return libARRA_gf_ProgressColor(lv_middle, lp_maxValue, lp_progress, lp_color2, lp_color3, Color(0,0,0), 2);
        }
    }
    else {
    }
    return lp_color1;
}

color libARRA_gf_UT_HexToColor (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    return Color((libARRA_gf_UT_HexToInt(StringSub(lp_pString, 2, 3))/2.55), (libARRA_gf_UT_HexToInt(StringSub(lp_pString, 4, 5))/2.55), (libARRA_gf_UT_HexToInt(StringSub(lp_pString, 6, 7))/2.55));
}

int libARRA_gf_UT_HexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;
    int lv_vMult;
    int lv_vIter;

    // Automatic Variable Declarations
    const int auto0D06F73F_ae = 1;
    const int auto0D06F73F_ai = -1;

    // Variable Initialization
    lv_vMult = 1;

    // Implementation
    lv_vIter = StringLength(lp_pString);
    for ( ; ( (auto0D06F73F_ai >= 0 && lv_vIter <= auto0D06F73F_ae) || (auto0D06F73F_ai < 0 && lv_vIter >= auto0D06F73F_ae) ) ; lv_vIter += auto0D06F73F_ai ) {
        lv_vOutput += (libARRA_gf_UT_SingleHexToInt(StringSub(lp_pString, lv_vIter, lv_vIter))*lv_vMult);
        lv_vMult *= 16;
    }
    return lv_vOutput;
}

color libARRA_gf_UT_NewColor (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[31] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 30; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 16);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#198100");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#4DC32C");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#BEF43D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#387E73");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#33C199");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#87FF9D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#2469BA");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#75CFFA");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#BD5DFD");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#891BB0");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#F16391");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#FEADC0");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#C6281C");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#F95A00");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#FF9E32");
    lv_vA += 1;
    lv_vColor[0] = libARRA_gf_UT_HexToColor("#FFE07A");
    return lv_vColor[lv_vINT];
}

playergroup libARRA_gf_GetTeamPlayers (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gv_teams[lp_team];
}

int libARRA_gf_GetPlayerTeam (int lp_player) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    const int auto83120577_ae = 15;
    int auto83120577_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    auto83120577_var = 0;
    for ( ; auto83120577_var <= auto83120577_ae; auto83120577_var += 1 ) {
        if ((PlayerGroupHasPlayer(libARRA_gv_teams[auto83120577_var], lp_player) == true)) {
            return auto83120577_var;
        }

    }
    return 16;
}

playergroup libARRA_gf_PlayersofRace (string lp_race) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto097B8426_g;
    int auto097B8426_var;
    unitgroup autoC80D43D4_g;
    int autoC80D43D4_u;
    unit autoC80D43D4_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    auto097B8426_g = PlayerGroupAll();
    auto097B8426_var = -1;
    while (true) {
        auto097B8426_var = PlayerGroupNextPlayer(auto097B8426_g, auto097B8426_var);
        if (auto097B8426_var < 0) { break; }
        if ((PlayerRace(auto097B8426_var) == lp_race)) {
            PlayerGroupAdd(lv_players, auto097B8426_var);
        }
        else {
            autoC80D43D4_g = UnitGroup(null, auto097B8426_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC80D43D4_u = UnitGroupCount(autoC80D43D4_g, c_unitCountAll);
            for (;; autoC80D43D4_u -= 1) {
                autoC80D43D4_var = UnitGroupUnitFromEnd(autoC80D43D4_g, autoC80D43D4_u);
                if (autoC80D43D4_var == null) { break; }
                if ((libARRA_gf_GetUnitRace(autoC80D43D4_var) == lp_race)) {
                    PlayerGroupAdd(lv_players, auto097B8426_var);
                    break;
                }
            }
        }
    }
    return lv_players;
}

void libARRA_gf_ShowUI (playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupRemove(libARRA_gv_uT_UI_Hidden, EventPlayer());
    Wait(1.0, c_timeReal);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    DialogControlSetPosition(DialogControlLastCreated(), lp_players, c_anchorTopLeft, 0, 0);
    UISetFrameVisible(lp_players, c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeSupply, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeObjectivePanel, true);
}

void libARRA_gf_HideUI (playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupAdd(libARRA_gv_uT_UI_Hidden, EventPlayer());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    DialogControlSetPosition(DialogControlLastCreated(), lp_players, c_anchorTopLeft, 0, -3000);
    UISetFrameVisible(lp_players, c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeSupply, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeObjectivePanel, false);
}

bool libARRA_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    int lv_vIdx;
    bool lv_vStored;

    // Automatic Variable Declarations
    const int auto8C6F0B90_ae = libARRA_gv_uT_HotkeyStoreLength;
    const int auto8C6F0B90_ai = 1;

    // Variable Initialization

    // Implementation
    lv_vIdx = 0;
    for ( ; ( (auto8C6F0B90_ai >= 0 && lv_vIdx <= auto8C6F0B90_ae) || (auto8C6F0B90_ai < 0 && lv_vIdx >= auto8C6F0B90_ae) ) ; lv_vIdx += auto8C6F0B90_ai ) {
        if ((libARRA_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] != "")) {
            BankValueSetFromString(lp_pBank, "ModifiedHotkeys", libARRA_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer], libARRA_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer]);
            libARRA_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] = "";
            libARRA_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer] = "";
            lv_vStored = true;
        }

    }
    return lv_vStored;
}

void libARRA_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    string lv_vButtonName;
    string lv_vHotkeyValue;

    // Automatic Variable Declarations
    int auto0D617280_ae;
    int auto0D617280_var;

    // Variable Initialization
    lv_vButtonName = "";
    lv_vHotkeyValue = "";

    // Implementation
    auto0D617280_ae = BankKeyCount(lp_pBank, "ModifiedHotkeys");
    auto0D617280_var = 1;
    for ( ; auto0D617280_var <= auto0D617280_ae; auto0D617280_var += 1 ) {
        lv_vButtonName = BankKeyName(lp_pBank, "ModifiedHotkeys", (auto0D617280_var-1));
        lv_vHotkeyValue = BankValueGetAsString(lp_pBank, "ModifiedHotkeys", lv_vButtonName);
        TextExpressionSetToken("Param/Expression/lib_ARRA_D4EDA2E5", "A", StringToText(lv_vButtonName));
        TextExpressionSetToken("Param/Expression/lib_ARRA_D4EDA2E5", "B", StringToText(lv_vHotkeyValue));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_D4EDA2E5"), false);
        CatalogFieldValueSet(c_gameCatalogButton, (lv_vButtonName), "Hotkey", lp_pPlayer, ("Letter/" + lv_vHotkeyValue));
    }
}

void libARRA_gf_UT_UpdateUnitInfo (unit lp_pUnit) {
    // Variable Declarations
    string lv_vBeh;
    text lv_vBehNumber;
    text lv_vText;
    int lv_vTextTagNormal;
    int lv_vTextTagHidden;
    text lv_vDuration;

    // Automatic Variable Declarations
    unit auto564CCB95_u;
    int auto564CCB95_i;

    // Variable Initialization
    lv_vTextTagNormal = libARRA_gf_TextTagForUnit(lp_pUnit, libARRA_gv_uT_TextTagPositionNormal);
    lv_vTextTagHidden = libARRA_gf_TextTagForUnit(lp_pUnit, libARRA_gv_uT_TextTagPositionHidden);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_ARRA_327A8C9A", "A", StringToText((UnitGetType(lp_pUnit))));
    TextExpressionSetToken("Param/Expression/lib_ARRA_327A8C9A", "B", IntToText(UnitGetOwner(lp_pUnit)));
    TextExpressionSetToken("Param/Expression/lib_ARRA_DAD1D961", "A", TextWithColor(TextExpressionAssemble("Param/Expression/lib_ARRA_327A8C9A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_pUnit), false))));
    TextExpressionSetToken("Param/Expression/lib_ARRA_DAD1D961", "B", FixedToText(PointGetX(UnitGetPosition(lp_pUnit)), 1));
    TextExpressionSetToken("Param/Expression/lib_ARRA_DAD1D961", "C", FixedToText(PointGetY(UnitGetPosition(lp_pUnit)), 1));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_ARRA_DAD1D961");
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == true)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_812FD9F3", "B", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_ARRA_812FD9F3");
    }

    auto564CCB95_u = lp_pUnit;
    auto564CCB95_i = 1;
    for ( ; auto564CCB95_i <= UnitBehaviorCountAll(auto564CCB95_u) ; auto564CCB95_i += BoolToInt(lv_vBeh == UnitBehaviorGet(auto564CCB95_u, auto564CCB95_i)) ) {
        lv_vBeh = UnitBehaviorGet(auto564CCB95_u, auto564CCB95_i);
        if ((UnitBehaviorCount(lp_pUnit, lv_vBeh) > 1)) {
            TextExpressionSetToken("Param/Expression/lib_ARRA_8E477209", "A", IntToText(UnitBehaviorCount(lp_pUnit, lv_vBeh)));
            lv_vBehNumber = TextExpressionAssemble("Param/Expression/lib_ARRA_8E477209");
        }
        else {
            lv_vBehNumber = StringToText("");
        }
        if ((UnitBehaviorDuration(lp_pUnit, lv_vBeh) > 0.0) && (UnitBehaviorDuration(lp_pUnit, lv_vBeh) < 32000.0)) {
            TextExpressionSetToken("Param/Expression/lib_ARRA_B640BFF6", "A", FixedToText(UnitBehaviorDuration(lp_pUnit, lv_vBeh), 0));
            lv_vDuration = TextExpressionAssemble("Param/Expression/lib_ARRA_B640BFF6");
        }
        else {
            lv_vDuration = StringToText("");
        }
        if ((UnitBehaviorEnabled(lp_pUnit, lv_vBeh) == false)) {
            TextExpressionSetToken("Param/Expression/lib_ARRA_B66095BD", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_ARRA_B66095BD", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_ARRA_B66095BD", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_ARRA_B66095BD", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_ARRA_B66095BD");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_ARRA_7E9788FE", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_ARRA_7E9788FE", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_ARRA_7E9788FE", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_ARRA_7E9788FE", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_ARRA_7E9788FE");
        }
    }
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == false)) {
        TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), false);
        if ((lv_vTextTagNormal == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libARRA_gf_StoreTextTagForUnit(lp_pUnit, libARRA_gv_uT_TextTagPositionNormal, TextTagLastCreated());
            TextTagAttachToUnit(TextTagLastCreated(), lp_pUnit, 2.0);
        }
        else {
            TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagNormal, lv_vText);
        }
    }
    else {
        TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), false);
        if ((lv_vTextTagHidden == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            libARRA_gf_StoreTextTagForUnit(lp_pUnit, libARRA_gv_uT_TextTagPositionHidden, TextTagLastCreated());
        }
        else {
            TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagHidden, lv_vText);
            TextTagSetPosition(lv_vTextTagHidden, UnitGetPosition(lp_pUnit), 2.0);
        }
    }
}

void libARRA_gf_UT_RemoveUnitInfo (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    TextTagShow(libARRA_gf_TextTagForUnit(lp_pUnit, libARRA_gv_uT_TextTagPositionHidden), PlayerGroupAll(), false);
    TextTagShow(libARRA_gf_TextTagForUnit(lp_pUnit, libARRA_gv_uT_TextTagPositionNormal), PlayerGroupAll(), false);
}

void libARRA_gf_EnableFastBuild (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_uT_FastBuildCheat = true;
    TechTreeUpgradeAddLevel(lp_player, "FastBuild", 1);
    TechTreeUpgradeAddLevel(lp_player, "FastRevive", 1);
    TriggerEnable(libARRA_gt_UT_FastArrm, true);
    TriggerEnable(libARRA_gt_UT_FastConstruction, true);
    TriggerEnable(libARRA_gt_UT_FastResearch, true);
    TriggerEnable(libARRA_gt_UT_FastRevive, true);
    TriggerEnable(libARRA_gt_UT_FastTrain, true);
}

void libARRA_gf_DisableFastBuild (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FastBuild", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FastRevive", 0);
}

trigger auto_libARRA_gf_UT_PostStringWithIcons_Trigger = null;
string auto_libARRA_gf_UT_PostStringWithIcons_lp_pString;

void libARRA_gf_UT_PostStringWithIcons (string lp_pString) {
    auto_libARRA_gf_UT_PostStringWithIcons_lp_pString = lp_pString;

    if (auto_libARRA_gf_UT_PostStringWithIcons_Trigger == null) {
        auto_libARRA_gf_UT_PostStringWithIcons_Trigger = TriggerCreate("auto_libARRA_gf_UT_PostStringWithIcons_TriggerFunc");
    }

    TriggerExecute(auto_libARRA_gf_UT_PostStringWithIcons_Trigger, false, false);
}

bool auto_libARRA_gf_UT_PostStringWithIcons_TriggerFunc (bool testConds, bool runActions) {
    string lp_pString = auto_libARRA_gf_UT_PostStringWithIcons_lp_pString;

    // Variable Declarations
    string lv_vString;
    string lv_vTempString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vString = libARRA_gf_UT_ReplaceEmotes(lp_pString);
    lv_vTempString = lv_vString;

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(lv_vString));
    while (true) {
        if ((StringContains(lv_vTempString, "*honk*", c_stringAnywhere, c_stringNoCase) == true)) {
            if ((TimerGetRemaining(libARRA_gv_uT_SoundEmoteTimer) > 0.0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_DDB2FED6"));
                break;
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
            SoundPlayForPlayer(SoundLink("Honk", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            lv_vTempString = StringReplaceWord(lv_vTempString, "*honk*", "", 1, c_stringNoCase);
            if ((libARRA_gv_uT_SoundEmoteCooldownLength > 0.0)) {
                TimerStart(libARRA_gv_uT_SoundEmoteTimer, libARRA_gv_uT_SoundEmoteCooldownLength, false, c_timeGame);
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

void libARRA_gf_UT_Init_Emoticons () {
    int init_i;

    // Variable Declarations
    string[101] lv_vEmoticons;
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 100; init_i += 1) {
        lv_vEmoticons[init_i] = "";
    }

    // Implementation
    lv_vIndex = 0;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "angry";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "baneling";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "brew";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "poo";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "cannon";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "cool";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "depot";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "drone";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "flex";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "gas";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "gg";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "glhf";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "gminerals";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "happy";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "infested";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "inlove";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "locust";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "minerals";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "mochi";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "nuke";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "overlord";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "pheart";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "bunker";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "probe";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "protoss";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "pylon";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "random";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "rofl";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "sad";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "sc2";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "scv";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "silly";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "skull";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "snipe";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "speechless";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "surprised";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "symbiote";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "terran";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "theart";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsdown";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsup";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "zerg";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "zheart";
    lv_vIndex += 1;
    libARRA_gv_uT_SC_Emoticons[lv_vIndex] = "zipped";
    lv_vIndex = 0;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "BabyRage";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "BibleThump";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "BlessRNG";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "coronaS";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "DansGame";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "FailFish";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsBadMan";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsGoodMan";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsOkayMan";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "FrankerZ";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "GivePLZ";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "HYPERS";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "Kappa";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "LUL";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "monkaGun";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "monkaS";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "MrDestructoid";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "NotLikeThis";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "OhMyDog";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "OMEGALUL";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "PepeHands";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "PogChamp";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "POGGERS";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "ResidentSleeper";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "SeemsGood";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "TakeNRG";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "TheThing";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "Thonk";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "weSmart";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "BrokeBack";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "4Head";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "Catalisk";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "Kreygasm";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "OpieOP";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "WutFace";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "Rfrogdurr";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "peepopotat";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "rip";
    lv_vIndex += 1;
    libARRA_gv_uT_CS_Emoticons[lv_vIndex] = "goose";
}

string libARRA_gf_UT_ReplaceEmotes (string lp_pString) {
    // Variable Declarations
    string lv_vString;
    const string lv_cSCSTART = "<img path=\"Assets\\Textures\\ui_emoticons_";
    const string lv_cTWSTART = "<img path=\"TwitchEmotes\\";
    const string lv_cEND = ".dds\" alignment=\"absolutemiddle\" />";

    // Automatic Variable Declarations
    const int autoD5C83E41_ae = libARRA_gv_uT_MAXEMOTES;
    int autoD5C83E41_var;
    const int autoF4E92656_ae = libARRA_gv_uT_MAXEMOTES;
    int autoF4E92656_var;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    autoD5C83E41_var = 0;
    for ( ; autoD5C83E41_var <= autoD5C83E41_ae; autoD5C83E41_var += 1 ) {
        if ((libARRA_gv_uT_SC_Emoticons[autoD5C83E41_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, ("(" + libARRA_gv_uT_SC_Emoticons[autoD5C83E41_var] + ")"), (lv_cSCSTART + libARRA_gv_uT_SC_Emoticons[autoD5C83E41_var] + lv_cEND), c_stringReplaceAll, c_stringNoCase);
        }

    }
    autoF4E92656_var = 0;
    for ( ; autoF4E92656_var <= autoF4E92656_ae; autoF4E92656_var += 1 ) {
        if ((libARRA_gv_uT_CS_Emoticons[autoF4E92656_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, (" " + libARRA_gv_uT_CS_Emoticons[autoF4E92656_var]), (" " + lv_cTWSTART + libARRA_gv_uT_CS_Emoticons[autoF4E92656_var] + lv_cEND), c_stringReplaceAll, c_stringCase);
        }

    }
    return lv_vString;
}

void libARRA_gf_UT_DL_DialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((libARRA_gv_uT_DL_LogDialog == c_invalidDialogId)) {
        DialogCreate(960, 1000, c_anchorTopLeft, 0, 250, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libARRA_gv_uT_DL_LogDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 960, 500, c_anchorTop, 20, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libARRA_gv_uT_DL_LogDialogItem = DialogControlLastCreated();
    }

}

void libARRA_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow) {
    // Variable Declarations
    text lv_vText;
    int lv_vTotalDamage;
    fixed lv_vTotalHeal;
    int lv_vLines;
    fixed lv_vPercent;

    // Automatic Variable Declarations
    const int auto7544AA5A_ae = libARRA_gv_uT_DL_MaxUnits;
    int auto7544AA5A_var;
    const int autoAE5FA7E8_ae = libARRA_gv_uT_DL_MaxUnits;
    int autoAE5FA7E8_var;
    const int auto5FFAACE7_ae = libARRA_gv_uT_DL_MaxUnits;
    int auto5FFAACE7_var;

    // Variable Initialization
    lv_vText = StringExternal("Param/Value/lib_ARRA_653513F0");
    lv_vTotalHeal = 1.0;
    lv_vLines = 1;

    // Implementation
    auto7544AA5A_var = 1;
    for ( ; auto7544AA5A_var <= auto7544AA5A_ae; auto7544AA5A_var += 1 ) {
        if ((libARRA_gv_uT_DL_Data[auto7544AA5A_var][0][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalDamage += libARRA_gf_UT_DL_SumHealingDamage(auto7544AA5A_var, 0, lp_pPlayerData);
        }

        if ((libARRA_gv_uT_DL_Data[auto7544AA5A_var][1][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalHeal += libARRA_gf_UT_DL_SumHealingDamage(auto7544AA5A_var, 1, lp_pPlayerData);
        }

    }
    lv_vText = (lv_vText + (StringToText(libARRA_gf_UT_FormatInteger(lv_vTotalDamage, " ")) + StringExternal("Param/Value/lib_ARRA_CBF8234E")));
    autoAE5FA7E8_var = 1;
    for ( ; autoAE5FA7E8_var <= autoAE5FA7E8_ae; autoAE5FA7E8_var += 1 ) {
        if ((libARRA_gv_uT_DL_Data[autoAE5FA7E8_var][0][lp_pPlayerData].lv_unitType != null)) {
            if ((libARRA_gf_UT_DL_SumHealingDamage(autoAE5FA7E8_var, 0, lp_pPlayerData) >= 524000)) {
                lv_vPercent = ((libARRA_gf_UT_DL_SumHealingDamage(autoAE5FA7E8_var, 0, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
            }
            else {
                lv_vPercent = (libARRA_gv_uT_DL_Data[autoAE5FA7E8_var][0][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            TextExpressionSetToken("Param/Expression/lib_ARRA_6AC947DF", "A", libARRA_gf_UTC_NameOfUnitType(libARRA_gv_uT_DL_Data[autoAE5FA7E8_var][0][lp_pPlayerData].lv_unitType));
            TextExpressionSetToken("Param/Expression/lib_ARRA_6AC947DF", "D", FixedToText(lv_vPercent, 1));
            TextExpressionSetToken("Param/Expression/lib_ARRA_6AC947DF", "C", StringToText(libARRA_gf_UT_FormatInteger(libARRA_gf_UT_DL_SumHealingDamage(autoAE5FA7E8_var, 0, lp_pPlayerData), " ")));
            lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_ARRA_6AC947DF"));
            lv_vLines += 1;
        }
        else {
            break;
        }
    }
    if ((libARRA_gv_uT_DL_Data[1][1][lp_pPlayerData].lv_unitType != null)) {
        lv_vText = (lv_vText + (StringExternal("Param/Value/lib_ARRA_043CEE9F") + (StringExternal("Param/Value/lib_ARRA_158F9CD8") + (FixedToText(lv_vTotalHeal, 0) + StringExternal("Param/Value/lib_ARRA_8A193C50")))));
        lv_vLines += 2;
        auto5FFAACE7_var = 1;
        for ( ; auto5FFAACE7_var <= auto5FFAACE7_ae; auto5FFAACE7_var += 1 ) {
            if ((libARRA_gv_uT_DL_Data[auto5FFAACE7_var][1][lp_pPlayerData].lv_unitType != null)) {
                if ((libARRA_gf_UT_DL_SumHealingDamage(auto5FFAACE7_var, 1, lp_pPlayerData) >= 524000)) {
                    lv_vPercent = ((libARRA_gf_UT_DL_SumHealingDamage(auto5FFAACE7_var, 1, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
                }
                else {
                    lv_vPercent = (libARRA_gv_uT_DL_Data[auto5FFAACE7_var][1][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
                }
                lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
                TextExpressionSetToken("Param/Expression/lib_ARRA_68E4C867", "A", UnitTypeGetName(libARRA_gv_uT_DL_Data[auto5FFAACE7_var][1][lp_pPlayerData].lv_unitType));
                TextExpressionSetToken("Param/Expression/lib_ARRA_68E4C867", "D", FixedToText(lv_vPercent, 1));
                TextExpressionSetToken("Param/Expression/lib_ARRA_68E4C867", "C", StringToText(libARRA_gf_UT_FormatInteger(libARRA_gf_UT_DL_SumHealingDamage(auto5FFAACE7_var, 1, lp_pPlayerData), " ")));
                lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_ARRA_68E4C867"));
                lv_vLines += 1;
            }
            else {
                break;
            }
        }
    }

    libNtve_gf_SetDialogItemText(libARRA_gv_uT_DL_LogDialogItem, lv_vText, PlayerGroupSingle(lp_pPlayerShow));
}

void libARRA_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount) {
    // Automatic Variable Declarations
    // Implementation
    if (((FixedToInt(libARRA_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real) + FixedToInt(lp_pAdd_Amount)) >= 500000)) {
        libARRA_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer += FixedToInt(libARRA_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real);
        libARRA_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real = lp_pAdd_Amount;
    }
    else {
        libARRA_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real += lp_pAdd_Amount;
    }
}

int libARRA_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return (libARRA_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer + FixedToInt(libARRA_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real));
}

void libARRA_gf_UT_DL_LogClear (int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int auto63642AA6_ae = libARRA_gv_uT_DL_MaxUnits;
    int auto63642AA6_var;

    // Variable Initialization

    // Implementation
    auto63642AA6_var = 1;
    for ( ; auto63642AA6_var <= auto63642AA6_ae; auto63642AA6_var += 1 ) {
        libARRA_gv_uT_DL_Data[auto63642AA6_var][0][lp_pPlayer].lv_integer = 0;
        libARRA_gv_uT_DL_Data[auto63642AA6_var][1][lp_pPlayer].lv_integer = 0;
        libARRA_gv_uT_DL_Data[auto63642AA6_var][0][lp_pPlayer].lv_real = 0;
        libARRA_gv_uT_DL_Data[auto63642AA6_var][1][lp_pPlayer].lv_real = 0;
        libARRA_gv_uT_DL_Data[auto63642AA6_var][0][lp_pPlayer].lv_unitType = null;
        libARRA_gv_uT_DL_Data[auto63642AA6_var][1][lp_pPlayer].lv_unitType = null;
    }
    UIDisplayMessage(PlayerGroupSingle(lp_pPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_1B113A01"));
    libARRA_gf_UT_DL_DialogUpdate(libARRA_gv_uT_DL_PlayerData[lp_pPlayer], lp_pPlayer);
}

bool libARRA_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer) {
    // Automatic Variable Declarations
    int auto0D8C5FAB_val;

    // Implementation
    auto0D8C5FAB_val = lp_pDevCommandType;
    if (auto0D8C5FAB_val == libARRA_ge_UT_DevCommandTypes_Gamealtering) {
        if ((libARRA_gv_uT_DevCommands[lp_pPlayer] == libARRA_ge_UT_DevCommandTypes_Gamealtering)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto0D8C5FAB_val == libARRA_ge_UT_DevCommandTypes_Visual) {
        if (((libARRA_gv_uT_DevCommands[lp_pPlayer] == libARRA_ge_UT_DevCommandTypes_Gamealtering) || (libARRA_gv_uT_DevCommands[lp_pPlayer] == libARRA_ge_UT_DevCommandTypes_Visual))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto0D8C5FAB_val == libARRA_ge_UT_DevCommandTypes_No) {
        if ((libARRA_gv_uT_DevCommands[lp_pPlayer] == libARRA_ge_UT_DevCommandTypes_No)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

void libARRA_gf_UT_Cheat () {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_uT_CheatUsed = true;
    TriggerSendEvent("UT_CheatUsed");
}

int libARRA_gf_HookUpDialogItemandshowforplayers (string lp_name, int lp_type, int lp_parent, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_parent, lp_type, lp_name);
    if ((lp_players == PlayerGroupEmpty())) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), lp_players, true);
    }
    return DialogControlLastCreated();
}

void libARRA_gf_HistogramHorizontalCreate (color lp_pColor, structref<libARRA_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pVertical, bool lp_pPercent, int lp_pTotal) {
    // Variable Declarations
    const int lv_vPadding = 50;
    const int lv_vInnerSizeX = 1400;
    const int lv_vInnerSizeY = 1000;
    const int lv_vBarPadding = 1;
    int lv_vEntries;
    int lv_vBarSize;
    int lv_vIter;
    int lv_vMaxDataValue;
    fixed lv_vBarYCoef;
    int lv_vX_OffsetIter;
    int lv_vA;
    int lv_vCycle;
    int lv_vSum;

    // Automatic Variable Declarations
    const int auto21DD8689_ae = libARRA_gv_maxHistogramEntries;
    const int auto21DD8689_ai = 1;
    const int auto52503F13_ae = libARRA_gv_maxHistogramEntries;
    const int auto52503F13_ai = 1;

    // Variable Initialization
    lv_vSum = 100;

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    if ((lp_pBackground == true)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    lv_vSum = 0;
    lv_vIter = 1;
    for ( ; ( (auto21DD8689_ai >= 0 && lv_vIter <= auto21DD8689_ae) || (auto21DD8689_ai < 0 && lv_vIter >= auto21DD8689_ae) ) ; lv_vIter += auto21DD8689_ai ) {
        if ((lp_pData.lv_labels[lv_vIter] != null) && (lp_pData.lv_data[lv_vIter] >= 0)) {
            lv_vEntries += 1;
            lv_vSum += lp_pData.lv_data[lv_vEntries];
            if ((lp_pData.lv_data[lv_vIter] > lv_vMaxDataValue)) {
                lv_vMaxDataValue = lp_pData.lv_data[lv_vIter];
            }

        }

    }
    if ((lp_pTotal >= 1)) {
        lv_vSum = lp_pTotal;
    }

    if ((lv_vEntries >= 50)) {
        lv_vBarSize = ((lv_vInnerSizeX/lv_vEntries) - lv_vBarPadding);
    }
    else {
        lv_vBarSize = 26;
    }
    lv_vBarYCoef = ((IntToFixed(lv_vInnerSizeY) - 400)/IntToFixed(lv_vMaxDataValue));
    if ((lv_vEntries <= 10)) {
        lv_vBarYCoef /= 1.5;
    }

    lv_vIter = 1;
    for ( ; ( (auto52503F13_ai >= 0 && lv_vIter <= auto52503F13_ae) || (auto52503F13_ai < 0 && lv_vIter >= auto52503F13_ae) ) ; lv_vIter += auto52503F13_ai ) {
        if ((lp_pData.lv_data[lv_vIter] >= 0) && (lp_pData.lv_labels[lv_vIter] != null)) {
            lv_vA += 1;
            lv_vX_OffsetIter = ((lv_vBarSize+lv_vBarPadding)*(lv_vA)-((lv_vBarSize+lv_vBarPadding)*lv_vEntries/2));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_vBarSize, FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarYCoef)), c_anchorBottom, (lv_vX_OffsetIter + lp_pCenter), (lv_vInnerSizeY/2 - 53 + lp_pVertical), StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, lp_pColor, c_triggerBlendModeNormal);
            TextExpressionSetToken("Param/Expression/lib_ARRA_3B866799", "A", lp_pData.lv_labels[lv_vIter]);
            TextExpressionSetToken("Param/Expression/lib_ARRA_3B866799", "B", IntToText(lp_pData.lv_data[lv_vIter]));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_3B866799"), PlayerGroupAll());
            if (lv_vCycle >= 2) {
                lv_vCycle = 1;
            }
            else {
                lv_vCycle = lv_vCycle + 1;
            }
            if ((lv_vCycle == 1)) {
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 15.0);
            }

            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HistogramTemplates/LabelPanelTemplate");
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, (lv_vX_OffsetIter + 125 + lp_pCenter), (lp_pVertical-320));
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "LabelTemplate");
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_pData.lv_labels[lv_vIter], PlayerGroupAll());
            if ((lp_pShowCounts == true)) {
                DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "HistogramTemplates/CountPanelTemplate");
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, (lv_vX_OffsetIter - 2 + lp_pCenter), FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarYCoef + 52 + IntToFixed(lp_pVertical))));
                DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeLabel, "CountTemplate");
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramCount", PlayerGroupAll());
                if ((lp_pPercent == true)) {
                    TextExpressionSetToken("Param/Expression/lib_ARRA_D631A575", "A", FixedToText((IntToFixed(lp_pData.lv_data[lv_vIter])/IntToFixed((lv_vSum / 100))), 2));
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_D631A575"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 78.43), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lp_pData.lv_data[lv_vIter]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(37.25, 37.25, 37.25), PlayerGroupAll());
                }
            }

        }

    }
}

void libARRA_gf_HistogramVerticalCreate (color lp_pColor, structref<libARRA_gs_HistogramData> lp_pData, bool lp_pShowCounts, bool lp_pBackground, int lp_pCenter, int lp_pTotal, bool lp_pPercent) {
    // Variable Declarations
    const int lv_vPadding = 50;
    const int lv_vInnerSizeY = 1000;
    const int lv_vInnerSizeX = 1200;
    const int lv_vBarPadding = 1;
    int lv_vEntries;
    int lv_vBarSize;
    int lv_vIter;
    int lv_vMaxDataValue;
    fixed lv_vBarXCoef;
    int lv_vY_OffsetIter;
    int lv_vA;
    int lv_vCycle;
    int lv_vSum;

    // Automatic Variable Declarations
    const int auto753A69A6_ae = libARRA_gv_maxHistogramEntries;
    const int auto753A69A6_ai = 1;
    const int autoB6540FC0_ae = libARRA_gv_maxHistogramEntries;
    const int autoB6540FC0_ai = 1;

    // Variable Initialization
    lv_vSum = 100;

    // Implementation
    DialogCreate(100, 100, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    if ((lp_pBackground == true)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    lv_vSum = 0;
    lv_vIter = 1;
    for ( ; ( (auto753A69A6_ai >= 0 && lv_vIter <= auto753A69A6_ae) || (auto753A69A6_ai < 0 && lv_vIter >= auto753A69A6_ae) ) ; lv_vIter += auto753A69A6_ai ) {
        if ((lp_pData.lv_labels[lv_vIter] != null) && (lp_pData.lv_data[lv_vIter] >= 0)) {
            lv_vEntries += 1;
            lv_vSum += lp_pData.lv_data[lv_vEntries];
            if ((lp_pData.lv_data[lv_vIter] > lv_vMaxDataValue)) {
                lv_vMaxDataValue = lp_pData.lv_data[lv_vIter];
            }

        }

    }
    if ((lp_pTotal >= 1)) {
        lv_vSum = lp_pTotal;
    }

    if ((lv_vEntries >= 50)) {
        lv_vBarSize = ((lv_vInnerSizeY/lv_vEntries) - lv_vBarPadding);
    }
    else {
        lv_vBarSize = 26;
    }
    lv_vBarXCoef = ((IntToFixed(lv_vInnerSizeX) - 400)/IntToFixed(lv_vMaxDataValue));
    if ((lv_vEntries <= 10)) {
        lv_vBarXCoef /= 1.5;
    }

    lv_vIter = 1;
    for ( ; ( (autoB6540FC0_ai >= 0 && lv_vIter <= autoB6540FC0_ae) || (autoB6540FC0_ai < 0 && lv_vIter >= autoB6540FC0_ae) ) ; lv_vIter += autoB6540FC0_ai ) {
        if ((lp_pData.lv_data[lv_vIter] >= 0) && (lp_pData.lv_labels[lv_vIter] != null)) {
            lv_vA += 1;
            lv_vY_OffsetIter = ((lv_vBarSize+lv_vBarPadding)*(lv_vA)-((lv_vBarSize+lv_vBarPadding)*lv_vEntries/2));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarXCoef)), (lv_vBarSize), c_anchorRight, (lv_vInnerSizeX/2 + lp_pCenter), lv_vY_OffsetIter, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, lp_pColor, c_triggerBlendModeNormal);
            TextExpressionSetToken("Param/Expression/lib_ARRA_A8DD0D85", "A", lp_pData.lv_labels[lv_vIter]);
            TextExpressionSetToken("Param/Expression/lib_ARRA_A8DD0D85", "B", IntToText(lp_pData.lv_data[lv_vIter]));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_A8DD0D85"), PlayerGroupAll());
            if (lv_vCycle >= 2) {
                lv_vCycle = 1;
            }
            else {
                lv_vCycle = lv_vCycle + 1;
            }
            if ((lv_vCycle == 1)) {
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
            }

            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorRight, (lv_vInnerSizeX/2 + lp_pCenter - 405), (lv_vY_OffsetIter), lp_pData.lv_labels[lv_vIter], ColorWithAlpha(0,0,0,0), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramLabel", PlayerGroupAll());
            if ((lp_pShowCounts == true)) {
                libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 50, c_anchorRight, FixedToInt((IntToFixed(lp_pData.lv_data[lv_vIter])*lv_vBarXCoef + IntToFixed(lv_vInnerSizeX)/2 + lp_pCenter + 2)), (lv_vY_OffsetIter), StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HistogramCount", PlayerGroupAll());
                if ((lp_pPercent == true)) {
                    TextExpressionSetToken("Param/Expression/lib_ARRA_A252A12F", "A", FixedToText((IntToFixed(lp_pData.lv_data[lv_vIter])/IntToFixed((lv_vSum / 100))), 2));
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_A252A12F"), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 78.43), PlayerGroupAll());
                }
                else {
                    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lp_pData.lv_data[lv_vIter]), PlayerGroupAll());
                    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(37.25, 37.25, 37.25), PlayerGroupAll());
                }
            }

        }

    }
}

void libARRA_gf_UT_Graph_DefineGraph (int lp_iD, text lp_title, string lp_string, string lp_scoreType, int lp_style, fixed lp_minimumValue, fixed lp_rangeBase, fixed lp_rangeIncrement) {
    // Variable Declarations
    int lv_graph;
    int lv_bar;
    int lv_timeLabel;
    int lv_valueLabel;
    int lv_count;
    text lv_vPlayer2Name;

    // Automatic Variable Declarations
    const int autoC5F18DD5_ae = 0;
    const int autoC5F18DD5_ai = 1;

    // Variable Initialization
    lv_graph = lp_iD;

    // Implementation
    libARRA_gv_graphsGeneral.lv_totalGraphs += 1;
    libARRA_gv_graphsData[lv_graph].lv_scoreType = lp_scoreType;
    libARRA_gv_graphsData[lv_graph].lv_style = lp_style;
    libARRA_gv_graphsData[lv_graph].lv_minimumValue = lp_minimumValue;
    libARRA_gv_graphsData[lv_graph].lv_rangeBase = lp_rangeBase;
    libARRA_gv_graphsData[lv_graph].lv_rangeIncrement = lp_rangeIncrement;
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string));
    libARRA_gv_graphsData[lv_graph].lv_highFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/GraphFrame"));
    libARRA_gv_graphsData[lv_graph].lv_graph = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Title"));
    libARRA_gv_graphsData[lv_graph].lv_title = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/PlayerColorLeft"));
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false)), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/GraphContainer/PlayerColorRight"));
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false)), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Player1Name"));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), PlayerName(1), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/" + lp_string + "/Graph/Player2Name"));
    if ((PlayerStatus(2) != c_playerStatusUnused)) {
        lv_vPlayer2Name = PlayerName(2);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_ARRA_0406827E", "A", IntToText(2));
        lv_vPlayer2Name = TextExpressionAssemble("Param/Expression/lib_ARRA_0406827E");
    }
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lv_vPlayer2Name, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libARRA_gv_graphsData[lv_graph].lv_title, lp_title, PlayerGroupAll());
    lv_count = (0 - libARRA_gv_graphsTotalNodes);
    for ( ; ( (autoC5F18DD5_ai >= 0 && lv_count <= autoC5F18DD5_ae) || (autoC5F18DD5_ai < 0 && lv_count >= autoC5F18DD5_ae) ) ; lv_count += autoC5F18DD5_ai ) {
        DialogControlAddDataPoint(libARRA_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 1);
        DialogControlAddDataPoint(libARRA_gv_graphsData[lv_graph].lv_graph, PlayerGroupAll(), lv_count, 0.0, 2);
    }
}

void libARRA_gf_UT_Graph_UpdateDataDifferential (int lp_graph) {
    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    int lv_maxValue;
    fixed lv_differential;

    // Automatic Variable Declarations
    int autoFD2E87DF_ae;
    const int autoFD2E87DF_ai = 1;

    // Variable Initialization

    // Implementation
    autoFD2E87DF_ae = libARRA_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (autoFD2E87DF_ai >= 0 && lv_count <= autoFD2E87DF_ae) || (autoFD2E87DF_ai < 0 && lv_count >= autoFD2E87DF_ae) ) ; lv_count += autoFD2E87DF_ai ) {
        lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamLeft]+libARRA_gv_graphsData[lp_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamRight]+libARRA_gv_graphsData[lp_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamLeft]/libARRA_gv_graphsGeneral.lv_intervals);
    lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamRight]/libARRA_gv_graphsGeneral.lv_intervals);
    lv_difference = ((lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamRight]));
    if ((lv_difference == 0)) {
        libARRA_gv_graphsData[lp_graph].lv_team = 0;
        libARRA_gv_graphsData[lp_graph].lv_value[0] = 0;
    }
    else if ((lv_difference > 0)) {
        libARRA_gv_graphsData[lp_graph].lv_team = libARRA_gv_graphsGeneral.lv_teamLeft;
        libARRA_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamLeft]-lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamRight]);
    }
    else if ((lv_difference < 0)) {
        libARRA_gv_graphsData[lp_graph].lv_team = libARRA_gv_graphsGeneral.lv_teamRight;
        libARRA_gv_graphsData[lp_graph].lv_value[0] = (lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamRight]-lv_teamAverage[libARRA_gv_graphsGeneral.lv_teamLeft]);
    }
    if ((libARRA_gv_graphsData[lp_graph].lv_team == libARRA_gv_graphsGeneral.lv_teamLeft)) {
        DialogControlAddDataPoint(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode, libARRA_gv_graphsData[lp_graph].lv_value[0], 1);
        DialogControlAddDataPoint(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode, (0 - libARRA_gv_graphsData[lp_graph].lv_value[0]), 2);
    }
    else {
        DialogControlAddDataPoint(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode, (0 - libARRA_gv_graphsData[lp_graph].lv_value[0]), 1);
        DialogControlAddDataPoint(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode, libARRA_gv_graphsData[lp_graph].lv_value[0], 2);
    }
    if ((DialogControlGetMinYValue(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= (0.0 - DialogControlGetMaxYValue(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll())))) {
        lv_differential = AbsF(DialogControlGetMinYValue(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()));
    }
    else {
        lv_differential = DialogControlGetMaxYValue(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll());
    }
    if ((lv_differential < libARRA_gv_graphsData[lp_graph].lv_minimumValue)) {
        lv_differential = libARRA_gv_graphsData[lp_graph].lv_rangeBase;
    }
    else {
        lv_differential = (lv_differential * 1.15);
        lv_differential = (Ceiling((lv_differential / libARRA_gv_graphsData[lp_graph].lv_rangeIncrement)) * libARRA_gv_graphsData[lp_graph].lv_rangeIncrement);
    }
    DialogControlSetMaxYVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_differential);
    DialogControlSetMinYVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (0.0 - lv_differential));
    DialogControlSetMinXVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libARRA_gv_graphsGeneral.lv_currentNode - libARRA_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode);
}

void libARRA_gf_UT_Graph_UpdateDataComparative (int lp_graph) {
    // Variable Declarations
    int lv_bar;
    int lv_difference;
    int lv_count;
    int[3] lv_teamTotal;
    int[3] lv_teamAverage;
    fixed lv_maxValue;

    // Automatic Variable Declarations
    int autoFDB6571D_ae;
    const int autoFDB6571D_ai = 1;

    // Variable Initialization

    // Implementation
    autoFDB6571D_ae = libARRA_gv_graphsGeneral.lv_intervals;
    lv_count = 1;
    for ( ; ( (autoFDB6571D_ai >= 0 && lv_count <= autoFDB6571D_ae) || (autoFDB6571D_ai < 0 && lv_count >= autoFDB6571D_ae) ) ; lv_count += autoFDB6571D_ai ) {
        lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamLeft] = ((lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamLeft]+libARRA_gv_graphsData[lp_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamLeft][lv_count]));
        lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamRight] = ((lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamRight]+libARRA_gv_graphsData[lp_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamRight][lv_count]));
    }
    libARRA_gv_graphsData[lp_graph].lv_value[libARRA_gv_graphsGeneral.lv_teamLeft] = (lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamLeft]/libARRA_gv_graphsGeneral.lv_intervals);
    libARRA_gv_graphsData[lp_graph].lv_value[libARRA_gv_graphsGeneral.lv_teamRight] = (lv_teamTotal[libARRA_gv_graphsGeneral.lv_teamRight]/libARRA_gv_graphsGeneral.lv_intervals);
    DialogControlAddDataPoint(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode, libARRA_gv_graphsData[lp_graph].lv_value[libARRA_gv_graphsGeneral.lv_teamLeft], 1);
    DialogControlAddDataPoint(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode, libARRA_gv_graphsData[lp_graph].lv_value[libARRA_gv_graphsGeneral.lv_teamRight], 2);
    DialogControlSetMinXVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), (libARRA_gv_graphsGeneral.lv_currentNode - libARRA_gv_graphsTotalNodes));
    DialogControlSetMaxXVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsGeneral.lv_currentNode);
    DialogControlSetMinYVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), 0.0);
    if ((DialogControlGetMaxYValue(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) <= libARRA_gv_graphsData[lp_graph].lv_minimumValue)) {
        DialogControlSetMaxYVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), libARRA_gv_graphsData[lp_graph].lv_rangeBase);
    }
    else {
        lv_maxValue = (DialogControlGetMaxYValue(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll()) * 1.15);
        lv_maxValue = (Ceiling((lv_maxValue / libARRA_gv_graphsData[lp_graph].lv_rangeIncrement)) * libARRA_gv_graphsData[lp_graph].lv_rangeIncrement);
        DialogControlSetMaxYVisible(libARRA_gv_graphsData[lp_graph].lv_graph, PlayerGroupAll(), lv_maxValue);
    }
}

void libARRA_gf_UT_Graph_HideAllGraphsExcept (int lp_pGraph, int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int auto34356F94_ae = libARRA_gv_maxGraphs;
    const int auto34356F94_ai = 1;

    // Variable Initialization

    // Implementation
    lv_a = 1;
    for ( ; ( (auto34356F94_ai >= 0 && lv_a <= auto34356F94_ae) || (auto34356F94_ai < 0 && lv_a >= auto34356F94_ae) ) ; lv_a += auto34356F94_ai ) {
        if ((lp_pGraph != lv_a)) {
            DialogControlSetVisible(libARRA_gv_graphsData[lv_a].lv_highFrame, PlayerGroupSingle(lp_pPlayer), false);
        }
        else {
            DialogControlSetVisible(libARRA_gv_graphsData[lv_a].lv_highFrame, PlayerGroupSingle(lp_pPlayer), true);
        }
    }
}

int libARRA_gf_UT_TotalDamageHeal (int lp_pPlayer, int lp_pDamageHeal) {
    // Variable Declarations
    int lv_vTotalDamageHeal;
    int lv_vDamageHeal;

    // Automatic Variable Declarations
    const int autoF9EA10E1_ae = libARRA_gv_uT_DL_MaxUnits;
    int autoF9EA10E1_var;

    // Variable Initialization

    // Implementation
    if ((lp_pDamageHeal == libARRA_ge_DamageHeal_Damage)) {
        lv_vDamageHeal = 0;
    }
    else {
        lv_vDamageHeal = 1;
    }
    autoF9EA10E1_var = 1;
    for ( ; autoF9EA10E1_var <= autoF9EA10E1_ae; autoF9EA10E1_var += 1 ) {
        if ((libARRA_gv_uT_DL_Data[autoF9EA10E1_var][lv_vDamageHeal][lp_pPlayer].lv_unitType != null)) {
            lv_vTotalDamageHeal += libARRA_gf_UT_DL_SumHealingDamage(autoF9EA10E1_var, lv_vDamageHeal, lp_pPlayer);
        }

    }
    return lv_vTotalDamageHeal;
}

void libARRA_gf_UT_CreatePieChartfromDamageLog (int lp_pPlayer, int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift) {
    // Variable Declarations
    const int lv_vMaxChartUnits = 15;
    const int lv_vMinimumPromile = 10;
    text lv_vTotalDamageName;
    int lv_vIndex;
    int lv_vTotalDamage;
    int[lv_vMaxChartUnits + 1] lv_vTempDamage;
    text[lv_vMaxChartUnits + 1] lv_vTempUnitTypeName;
    text lv_vTitle;

    // Automatic Variable Declarations
    const int autoDFBAF8DF_ae = libARRA_gv_uT_DL_MaxUnits;
    int autoDFBAF8DF_var;
    const int auto91762A7E_ae = libARRA_gv_uT_DL_MaxUnits;
    int auto91762A7E_var;

    // Variable Initialization
    lv_vTotalDamageName = StringExternal("Param/Value/lib_ARRA_29D34A95");
    lv_vTotalDamage = 1;

    // Implementation
    lv_vTotalDamage = 0;
    autoDFBAF8DF_var = 1;
    for ( ; autoDFBAF8DF_var <= autoDFBAF8DF_ae; autoDFBAF8DF_var += 1 ) {
        if ((libARRA_gv_uT_DL_Data[autoDFBAF8DF_var][0][lp_pPlayer].lv_unitType != null)) {
            lv_vTotalDamage += libARRA_gf_UT_DL_SumHealingDamage(autoDFBAF8DF_var, 0, lp_pPlayer);
        }

    }
    if ((lv_vTotalDamage <= 1)) {
        return ;
    }

    auto91762A7E_var = 1;
    for ( ; auto91762A7E_var <= auto91762A7E_ae; auto91762A7E_var += 1 ) {
        if ((libARRA_gv_uT_DL_Data[auto91762A7E_var][0][lp_pPlayer].lv_unitType != null) && (lv_vMinimumPromile <= (libARRA_gf_UT_DL_SumHealingDamage(auto91762A7E_var, 0, lp_pPlayer) / (lv_vTotalDamage/1000)))) {
            lv_vIndex += 1;
            lv_vTempDamage[lv_vIndex] = libARRA_gf_UT_DL_SumHealingDamage(auto91762A7E_var, 0, lp_pPlayer);
            lv_vTempUnitTypeName[lv_vIndex] = libARRA_gf_UTC_NameOfUnitType(libARRA_gv_uT_DL_Data[auto91762A7E_var][0][lp_pPlayer].lv_unitType);
            if ((lv_vIndex == lv_vMaxChartUnits)) {
                break;
            }

        }

    }
    if ((PlayerStatus(lp_pPlayer) != c_playerStatusUnused)) {
        lv_vTitle = PlayerName(lp_pPlayer);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_ARRA_5FBD469B", "A", IntToText(lp_pPlayer));
        lv_vTitle = TextExpressionAssemble("Param/Expression/lib_ARRA_5FBD469B");
    }
    TextExpressionSetToken("Param/Expression/lib_ARRA_F3794427", "B", lv_vTotalDamageName);
    TextExpressionSetToken("Param/Expression/lib_ARRA_F3794427", "A", StringToText(libARRA_gf_UT_FormatInteger(lv_vTotalDamage, " ")));
    libARRA_gf_UT_CreatePieChart(lp_pOffsetX, lp_pOffsetY, lp_pAnchor, lp_pColorShift, lv_vTitle, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_pPlayer, false)), TextExpressionAssemble("Param/Expression/lib_ARRA_F3794427"), lp_pPlayer, lv_vTempUnitTypeName[1], lv_vTempDamage[1], lv_vTempUnitTypeName[2], lv_vTempDamage[2], lv_vTempUnitTypeName[3], lv_vTempDamage[3], lv_vTempUnitTypeName[4], lv_vTempDamage[4], lv_vTempUnitTypeName[5], lv_vTempDamage[5], lv_vTempUnitTypeName[6], lv_vTempDamage[6], lv_vTempUnitTypeName[7], lv_vTempDamage[7], lv_vTempUnitTypeName[8], lv_vTempDamage[8], lv_vTempUnitTypeName[9], lv_vTempDamage[9], lv_vTempUnitTypeName[10], lv_vTempDamage[10], lv_vTempUnitTypeName[11], lv_vTempDamage[11], lv_vTempUnitTypeName[12], lv_vTempDamage[12], lv_vTempUnitTypeName[13], lv_vTempDamage[13], lv_vTempUnitTypeName[14], lv_vTempDamage[14], lv_vTempUnitTypeName[15], lv_vTempDamage[15]);
}

void libARRA_gf_UT_CreatePieChart (int lp_pOffsetX, int lp_pOffsetY, int lp_pAnchor, int lp_pColorShift, text lp_pTitle, color lp_pTitleColor, text lp_pSubTitle, int lp_pPlayer, text lp_pLabel1, int lp_pDamage1, text lp_pLabel2, int lp_pDamage2, text lp_pLabel3, int lp_pDamage3, text lp_pLabel4, int lp_pDamage4, text lp_pLabel5, int lp_pDamage5, text lp_pLabel6, int lp_pDamage6, text lp_pLabel7, int lp_pDamage7, text lp_pLabel8, int lp_pDamage8, text lp_pLabel9, int lp_pDamage9, text lp_pLabel10, int lp_pDamage10, text lp_pLabel11, int lp_pDamage11, text lp_pLabel12, int lp_pDamage12, text lp_pLabel13, int lp_pDamage13, text lp_pLabel14, int lp_pDamage14, text lp_pLabel15, int lp_pDamage15) {
    // Variable Declarations
    const int lv_cMAXUNITS = 15;
    const int lv_cPARTS = 360;
    const fixed lv_cHALF = 72.0;
    int[lv_cMAXUNITS + 1] lv_vDamage;
    text[lv_cMAXUNITS + 1] lv_vLabel;
    int lv_vSum;
    int lv_vActiveUnits;
    int lv_vCurrentUnit;
    int lv_vUnitPhase;
    int lv_vMin;
    int lv_vMax;
    color lv_vColor;
    int lv_vSlice;
    int lv_vAngle;
    const fixed lv_cPercentDistance = 1.5;
    const fixed lv_cNameDistance = 3.3;
    fixed lv_vPercent;
    int[lv_cMAXUNITS + 1] lv_vLabelX;
    int[lv_cMAXUNITS + 1] lv_vLabelY;
    int[lv_cMAXUNITS + 1] lv_vPercentX;
    int[lv_cMAXUNITS + 1] lv_vPercentY;
    fixed lv_vSpread;
    fixed lv_vPercentDistanceIter;
    text lv_vAdditionalScore;

    // Automatic Variable Declarations
    const int auto1CA7EF0C_ae = lv_cMAXUNITS;
    int auto1CA7EF0C_var;
    const int auto40E871B1_ae = lv_cMAXUNITS;
    const int auto40E871B1_ai = 1;
    int autoD16051A2_ae;
    const int autoD16051A2_ai = 1;
    const int auto2860F4BD_n = 200;
    int auto2860F4BD_i;
    int auto206FE6E5_ae;
    int auto206FE6E5_var;
    int autoAC36CB47_val;
    const int auto5F6B3B62_ae = 50;
    int auto5F6B3B62_var;
    const int autoA3A37C4C_n = 200;
    int autoA3A37C4C_i;
    int autoBF8A6DDC_ae;
    int autoBF8A6DDC_var;

    // Variable Initialization
    lv_vSum = 10;
    lv_vMax = -1;
    lv_vColor = Color(0,0,0);
    lv_vPercentDistanceIter = 1.5;

    // Implementation
    lv_vDamage[1] = lp_pDamage1;
    lv_vDamage[2] = lp_pDamage2;
    lv_vDamage[3] = lp_pDamage3;
    lv_vDamage[4] = lp_pDamage4;
    lv_vDamage[5] = lp_pDamage5;
    lv_vDamage[6] = lp_pDamage6;
    lv_vDamage[7] = lp_pDamage7;
    lv_vDamage[8] = lp_pDamage8;
    lv_vDamage[9] = lp_pDamage9;
    lv_vDamage[10] = lp_pDamage10;
    lv_vDamage[11] = lp_pDamage11;
    lv_vDamage[12] = lp_pDamage12;
    lv_vDamage[13] = lp_pDamage13;
    lv_vDamage[14] = lp_pDamage14;
    lv_vDamage[15] = lp_pDamage15;
    lv_vLabel[1] = lp_pLabel1;
    lv_vLabel[2] = lp_pLabel2;
    lv_vLabel[3] = lp_pLabel3;
    lv_vLabel[4] = lp_pLabel4;
    lv_vLabel[5] = lp_pLabel5;
    lv_vLabel[6] = lp_pLabel6;
    lv_vLabel[7] = lp_pLabel7;
    lv_vLabel[8] = lp_pLabel8;
    lv_vLabel[9] = lp_pLabel9;
    lv_vLabel[10] = lp_pLabel10;
    lv_vLabel[11] = lp_pLabel11;
    lv_vLabel[12] = lp_pLabel12;
    lv_vLabel[13] = lp_pLabel13;
    lv_vLabel[14] = lp_pLabel14;
    lv_vLabel[15] = lp_pLabel15;
    lv_vLabel[15] = lp_pLabel15;
    lv_vSum = 0;
    auto1CA7EF0C_var = 1;
    for ( ; auto1CA7EF0C_var <= auto1CA7EF0C_ae; auto1CA7EF0C_var += 1 ) {
        if ((lv_vDamage[auto1CA7EF0C_var] > 0)) {
            lv_vSum += lv_vDamage[auto1CA7EF0C_var];
            lv_vActiveUnits += 1;
        }

    }
    if ((lv_vSum <= 10)) {
        return ;
    }

    DialogCreate(800, 800, lp_pAnchor, lp_pOffsetX, lp_pOffsetY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 555);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 100, c_anchorTop, 0, 0, lp_pTitle, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lp_pTitleColor, PlayerGroupAll());
    TextExpressionSetToken("Param/Expression/lib_ARRA_A66FA1E0", "A", null);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 80, c_anchorTop, 0, 0, TextExpressionAssemble("Param/Expression/lib_ARRA_A66FA1E0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 600, 100, c_anchorTop, 0, 32, lp_pSubTitle, ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieSubtitle", PlayerGroupAll());
    lv_vUnitPhase = 1;
    for ( ; ( (auto40E871B1_ai >= 0 && lv_vUnitPhase <= auto40E871B1_ae) || (auto40E871B1_ai < 0 && lv_vUnitPhase >= auto40E871B1_ae) ) ; lv_vUnitPhase += auto40E871B1_ai ) {
        if ((lv_vDamage[lv_vUnitPhase] > 0)) {
            lv_vPercent = (IntToFixed((lv_vDamage[lv_vUnitPhase] / ((lv_vSum / 1000)))) / 10);
            lv_vColor = libARRA_gf_UT_NewColor((lp_pColorShift + lv_vUnitPhase));
            lv_vCurrentUnit += 1;
            lv_vMin = (lv_vMax + 1);
            if ((lv_vCurrentUnit == lv_vActiveUnits)) {
                lv_vMax = (lv_cPARTS - 2);
            }
            else {
                lv_vMax = (lv_vMin - 1 + (lv_cPARTS * (lv_vDamage[lv_vUnitPhase]  / ((lv_vSum / 1000)))) / 1000);
            }
            autoD16051A2_ae = lv_vMax;
            lv_vSlice = lv_vMin;
            for ( ; ( (autoD16051A2_ai >= 0 && lv_vSlice <= autoD16051A2_ae) || (autoD16051A2_ai < 0 && lv_vSlice >= autoD16051A2_ae) ) ; lv_vSlice += autoD16051A2_ai ) {
                lv_vAngle = RoundI((IntToFixed(lv_vSlice) * (360 / IntToFixed(lv_cPARTS))));
                libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 10, 144, c_anchorTopLeft, 0, 0, StringToText(""), "AF_slice.dds", c_triggerImageTypeNormal, false, lv_vColor, c_triggerBlendModeNormal);
                libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), lv_vAngle, PlayerGroupAll());
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, FixedToInt((lv_cHALF * Sin(IntToFixed(lv_vAngle)))), FixedToInt((- lv_cHALF * Cos(IntToFixed(lv_vAngle)))));
            }
            lv_vAngle = RoundI(((IntToFixed(((lv_vMin + lv_vMax ) /2)) + 0.5) * (360 / IntToFixed(lv_cPARTS))));
            lv_vLabelY[lv_vUnitPhase] = FixedToInt((-lv_cNameDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
            lv_vLabelX[lv_vUnitPhase] = FixedToInt((lv_cNameDistance * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
            lv_vSpread = 10.0;
            for (auto2860F4BD_i = 1; auto2860F4BD_i <= auto2860F4BD_n; auto2860F4BD_i += 1) {
                lv_vSpread += 0.3;
                auto206FE6E5_ae = (lv_vUnitPhase - 1);
                auto206FE6E5_var = 1;
                for ( ; auto206FE6E5_var <= auto206FE6E5_ae; auto206FE6E5_var += 1 ) {
                    if ((libARRA_gf_UT_LabelsTooClose(lv_vLabelX[auto206FE6E5_var], lv_vLabelY[auto206FE6E5_var], lv_vLabelX[lv_vUnitPhase], lv_vLabelY[lv_vUnitPhase]) == true)) {
                        lv_vLabelY[lv_vUnitPhase] = FixedToInt((-lv_cNameDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
                        autoAC36CB47_val = RandomInt(1, 2);
                        if (autoAC36CB47_val == 1) {
                            lv_vLabelY[lv_vUnitPhase] += FixedToInt((lv_vSpread * RandomFixed(0.5, 1.0)));
                        }
                        else {
                            lv_vLabelY[lv_vUnitPhase] -= FixedToInt((lv_vSpread * RandomFixed(0.5, 1.0)));
                        }
                        break;
                    }

                }
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 220, 30, c_anchorCenter, 0, 0, lv_vLabel[lv_vUnitPhase], ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vLabelX[lv_vUnitPhase], lv_vLabelY[lv_vUnitPhase]);
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PieName", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_vColor, PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_ARRA_74B56095", "A", lv_vLabel[lv_vUnitPhase]);
            TextExpressionSetToken("Param/Expression/lib_ARRA_74B56095", "B", FixedToText(lv_vPercent, 1));
            TextExpressionSetToken("Param/Expression/lib_ARRA_74B56095", "C", StringToText(libARRA_gf_UT_FormatInteger(lv_vDamage[lv_vUnitPhase], " ")));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_74B56095"), PlayerGroupAll());
            lv_vPercentX[lv_vUnitPhase] = FixedToInt((lv_cPercentDistance * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
            lv_vPercentY[lv_vUnitPhase] = FixedToInt((-lv_cPercentDistance* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
            lv_vSpread = 0.1;
            auto5F6B3B62_var = 1;
            for ( ; auto5F6B3B62_var <= auto5F6B3B62_ae; auto5F6B3B62_var += 1 ) {
            }
            for (autoA3A37C4C_i = 1; autoA3A37C4C_i <= autoA3A37C4C_n; autoA3A37C4C_i += 1) {
                autoBF8A6DDC_ae = (lv_vUnitPhase - 1);
                autoBF8A6DDC_var = 1;
                for ( ; autoBF8A6DDC_var <= autoBF8A6DDC_ae; autoBF8A6DDC_var += 1 ) {
                    if ((libARRA_gf_UT_PercentsTooClose(lv_vPercentX[autoBF8A6DDC_var], lv_vPercentY[autoBF8A6DDC_var], lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]) == false)) {
                    }
                    else {
                        lv_vSpread += 0.02;
                        if ((RandomInt(0, 1) == 1)) {
                            lv_vPercentDistanceIter = (lv_cPercentDistance + RandomFixed(0.1, lv_vSpread));
                        }
                        else {
                            lv_vPercentDistanceIter = (lv_cPercentDistance - RandomFixed(0.1, lv_vSpread));
                        }
                        lv_vPercentDistanceIter = libNtve_gf_ArithmeticRealClamp(lv_vPercentDistanceIter, 0.35, 1.8);
                        lv_vPercentX[lv_vUnitPhase] = FixedToInt((lv_vPercentDistanceIter * lv_cHALF * Sin(IntToFixed(lv_vAngle))));
                        lv_vPercentY[lv_vUnitPhase] = FixedToInt((-lv_vPercentDistanceIter* lv_cHALF * Cos(IntToFixed(lv_vAngle))));
                        break;
                    }
                }
            }
            TextExpressionSetToken("Param/Expression/lib_ARRA_F26335E5", "A", FixedToText(lv_vPercent, 1));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 30, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/lib_ARRA_F26335E5"), ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]);
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_vColor, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PiePercent", PlayerGroupAll());
            TextExpressionSetToken("Param/Expression/lib_ARRA_03ACF87D", "A", FixedToText(lv_vPercent, 1));
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 30, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/lib_ARRA_03ACF87D"), ColorWithAlpha(0,0,0,0), false, 2.0);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, lv_vPercentX[lv_vUnitPhase], lv_vPercentY[lv_vUnitPhase]);
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
            libNtve_gf_SetDialogItemBlendMode(DialogControlLastCreated(), c_triggerBlendModeLighten, PlayerGroupAll());
            libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 514, PlayerGroupAll());
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AF_PiePercent", PlayerGroupAll());
        }

    }
}

color libARRA_gf_UT_NewColorOld (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[21] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 13);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(0.39, 68.63, 27.84);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(34.12, 80.78, 0.00);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(84.71, 86.67, 0.00);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(93.33, 47.84, 6.67);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(82.35, 5.10, 5.10);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(65.88, 5.88, 32.94);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(77.25, 7.06, 65.10);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(51.76, 9.02, 65.88);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(58.04, 36.08, 87.06);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(12.16, 23.92, 79.61);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(14.12, 45.88, 77.65);
    lv_vA += 1;
    lv_vColor[lv_vA] = Color(11.37, 63.53, 80.39);
    lv_vA += 1;
    lv_vColor[0] = Color(20.39, 71.37, 50.98);
    return lv_vColor[lv_vINT];
}

color libARRA_gf_UT_NewColorMuted (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[23] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 22; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 22);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#B2B8AC");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#4D8D77");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#81C99D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#A8A47F");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#DEB267");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#EAD270");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#DF8D4D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#F19670");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#E16552");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#BF3A3A");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#C86E81");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#9A456E");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#C2568B");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#65387D");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#8944C4");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#714595");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#E485AB");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#E0598B");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#92AFBD");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#5698C4");
    lv_vA += 1;
    lv_vColor[lv_vA] = libARRA_gf_UT_HexToColor("#A7C798");
    return lv_vColor[lv_vINT];
}

bool libARRA_gf_UT_LabelsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pIterY - lp_pBaseY) >= -18) && ((lp_pIterY - lp_pBaseY) <= 18)) && (((lp_pBaseX - lp_pIterX) >= -150) && ((lp_pBaseX - lp_pIterX) <= 150))) {
        return true;
    }
    else {
        return false;
    }
}

bool libARRA_gf_UT_PercentsTooClose (int lp_pIterX, int lp_pIterY, int lp_pBaseX, int lp_pBaseY) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pIterY - lp_pBaseY) >= -15) && ((lp_pIterY - lp_pBaseY) <= 15)) && (((lp_pBaseX - lp_pIterX) >= -50) && ((lp_pBaseX - lp_pIterX) <= 50))) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_CU_MinimapAllyViewInit () {
    // Variable Declarations
    const fixed lv_baseScale = 0.5;
    const fixed lv_baseMapSize = 108.0;
    fixed lv_mapScale;
    int lv_player;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto9A5E0DA3_g;
    int auto9A5E0DA3_var;
    playergroup autoE55DF95A_g;
    int autoE55DF95A_var;

    // Variable Initialization
    lv_mapScale = 0.5;
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    if ((libARRA_gv_cU_MinimapAllyViewEnabled == false)) {
        return ;
    }

    lv_mapScale = (lv_baseMapSize / MaxF(libNtve_gf_WidthOfRegion(RegionPlayableMap()), libNtve_gf_HeightOfRegion(RegionPlayableMap())));
    lv_mapScale = (lv_mapScale * lv_baseScale);
    auto9A5E0DA3_g = PlayerGroupAll();
    auto9A5E0DA3_var = -1;
    while (true) {
        auto9A5E0DA3_var = PlayerGroupNextPlayer(auto9A5E0DA3_g, auto9A5E0DA3_var);
        if (auto9A5E0DA3_var < 0) { break; }
        lv_playerGroup = PlayerGroupEmpty();
        if ((PlayerType(auto9A5E0DA3_var) != c_playerTypeUser)) {
            continue;
        }

        autoE55DF95A_g = PlayerGroupAlliance(c_playerGroupAlly, autoE55DF95A_var);
        autoE55DF95A_var = -1;
        while (true) {
            autoE55DF95A_var = PlayerGroupNextPlayer(autoE55DF95A_g, autoE55DF95A_var);
            if (autoE55DF95A_var < 0) { break; }
            if ((PlayerType(autoE55DF95A_var) == c_playerTypeUser) && (PlayerStatus(autoE55DF95A_var) == c_playerStatusActive)) {
                PlayerGroupAdd(lv_playerGroup, autoE55DF95A_var);
            }

        }
        if ((PlayerGroupCount(lv_playerGroup) > 1)) {
            TriggerEnable(libARRA_gt_CU_MinimapAllyViewCamera, true);
            TriggerEnable(libARRA_gt_CU_MinimapAllyViewUpdate, true);
            TriggerEnable(libARRA_gt_CU_MinimapAllyPlayerLeaves, true);
        }

        libNtve_gf_CreatePingFacingAngle(lv_playerGroup, "PingViewArea", CameraGetTarget(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), 0.0, 270.0);
        PingSetScale(PingLastCreated(), lv_mapScale);
        libARRA_gv_cU_MinimapAllyViewPing[lv_player] = PingLastCreated();
    }
}

void libARRA_gf_ToggleAllyMinimapFrustrum (bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_cU_MinimapAllyViewEnabled = lp_enabled;
}

point libARRA_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales) {
    // Variable Declarations
    fixed lv_distancebetweentwopoints;
    point lv_nearestbuildablepoint;
    point lv_pointtowhichpointcoordinatesareroundedoff;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int auto36DACAA3_ae;
    int auto36DACAA3_var;
    fixed auto581C615A_ae;
    const fixed auto581C615A_ai = 1.0;
    fixed auto9B8329DC_ae;
    const fixed auto9B8329DC_ai = 1.0;
    fixed auto7F5251FC_ae;
    const fixed auto7F5251FC_ai = -1.0;
    fixed autoFBACB507_ae;
    const fixed autoFBACB507_ai = -1.0;

    // Variable Initialization
    lv_distancebetweentwopoints = 500.0;
    lv_pointtowhichpointcoordinatesareroundedoff = Point(Round(PointGetX(lp_point)), Round(PointGetY(lp_point)));

    // Implementation
    if ((ModI(lp_numberofscales, 2) == 0)) {
        if ((libARRA_gf_Canbebuiltonabranch(lv_pointtowhichpointcoordinatesareroundedoff, lp_numberofscales) == true)) {
            return lv_pointtowhichpointcoordinatesareroundedoff;
        }
        else {
            auto36DACAA3_ae = CeilingI(MaxF(libNtve_gf_HeightOfRegion(RegionEntireMap()), libNtve_gf_WidthOfRegion(RegionEntireMap())));
            auto36DACAA3_var = 1;
            for ( ; auto36DACAA3_var <= auto36DACAA3_ae; auto36DACAA3_var += 1 ) {
                auto581C615A_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var);
                for ( ; ( (auto581C615A_ai >= 0 && lv_x <= auto581C615A_ae) || (auto581C615A_ai < 0 && lv_x >= auto581C615A_ae) ) ; lv_x += auto581C615A_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var))) < lv_distancebetweentwopoints) && (libARRA_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var));
                    }

                }
                auto9B8329DC_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var);
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto36DACAA3_var - 1));
                for ( ; ( (auto9B8329DC_ai >= 0 && lv_y <= auto9B8329DC_ae) || (auto9B8329DC_ai < 0 && lv_y >= auto9B8329DC_ae) ) ; lv_y += auto9B8329DC_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var), lv_y)) < lv_distancebetweentwopoints) && (libARRA_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var), lv_y);
                    }

                }
                auto7F5251FC_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (auto36DACAA3_var - 1));
                for ( ; ( (auto7F5251FC_ai >= 0 && lv_x <= auto7F5251FC_ae) || (auto7F5251FC_ai < 0 && lv_x >= auto7F5251FC_ae) ) ; lv_x += auto7F5251FC_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var))) < lv_distancebetweentwopoints) && (libARRA_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto36DACAA3_var));
                    }

                }
                autoFBACB507_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto36DACAA3_var - 1));
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (auto36DACAA3_var - 1));
                for ( ; ( (autoFBACB507_ai >= 0 && lv_y <= autoFBACB507_ae) || (autoFBACB507_ai < 0 && lv_y >= autoFBACB507_ae) ) ; lv_y += autoFBACB507_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var), lv_y)) < lv_distancebetweentwopoints) && (libARRA_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto36DACAA3_var), lv_y);
                    }

                }
                if ((lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto36DACAA3_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (auto36DACAA3_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - (auto36DACAA3_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff)))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (auto36DACAA3_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff))))) {
                    return lv_nearestbuildablepoint;
                }

            }
        }
    }

    return lv_nearestbuildablepoint;
}

point libARRA_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint) {
    // Variable Declarations
    int lv_vRadius;
    int lv_vAngle;
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto16A0890C_ae = 200;
    const int auto16A0890C_ai = 3;
    const int autoFD0DA1F6_ae = 360;
    const int autoFD0DA1F6_ai = 30;

    // Variable Initialization

    // Implementation
    if ((PointPathingIsConnected(lp_vInitPoint, lp_vTargetPoint) == true)) {
        return lp_vInitPoint;
    }

    lv_vRadius = 1;
    for ( ; ( (auto16A0890C_ai >= 0 && lv_vRadius <= auto16A0890C_ae) || (auto16A0890C_ai < 0 && lv_vRadius >= auto16A0890C_ae) ) ; lv_vRadius += auto16A0890C_ai ) {
        lv_vAngle = 1;
        for ( ; ( (autoFD0DA1F6_ai >= 0 && lv_vAngle <= autoFD0DA1F6_ae) || (autoFD0DA1F6_ai < 0 && lv_vAngle >= autoFD0DA1F6_ae) ) ; lv_vAngle += autoFD0DA1F6_ai ) {
            lv_vPoint = PointWithOffsetPolar(lp_vInitPoint, lv_vRadius, lv_vAngle);
            if ((RegionContainsPoint(RegionPlayableMap(), lv_vPoint) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, lp_vTargetPoint) == true)) {
                return lv_vPoint;
            }

        }
    }
    return lp_vInitPoint;
}

string libARRA_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision) {
    // Automatic Variable Declarations
    // Implementation
    return (FixedToString(PointGetX(lp_pPoint), lp_pPrecision) + lp_pDelimiter + FixedToString(PointGetY(lp_pPoint), lp_pPrecision));
}

point libARRA_gf_GetPoint (string lp_suffix, int lp_route) {
    // Variable Declarations
    string lv_r;
    string lv_suffixending;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = IntToString(lp_route);
    lv_suffixending = StringSub(lp_suffix, (StringLength(lp_suffix) - 1), StringLength(lp_suffix));

    // Implementation
    if (((lv_suffixending == "-") || (lv_suffixending == " "))) {
        return libARRA_gf_IIF7(PointFromName((lp_suffix + lv_r)), libARRA_gf_IIF7(PointFromName((lp_suffix + "0" + lv_r)), null));
    }
    else {
        return libARRA_gf_IIF7(PointFromName((lp_suffix + " " + lv_r)), libARRA_gf_IIF7(PointFromName((lp_suffix + " 0" + lv_r)), libARRA_gf_IIF7(PointFromName((lp_suffix + lv_r)), libARRA_gf_IIF7(PointFromName((lp_suffix + "0" + lv_r)), null))));
    }
}

string libARRA_gf_PointsSingle (string lp_suffix, int lp_index1) {
    // Variable Declarations
    point lv_point;
    string lv_listName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";

    // Implementation
    libARRA_gv_pointsListsCreated += 1;
    lv_listName = ("*P" + IntToString(libARRA_gv_pointsListsCreated));
    lv_point = libARRA_gf_GetPoint(lp_suffix, lp_index1);
    if ((lv_point != null)) {
        libARRA_gf_ListPointPush(lv_listName, lv_point);
    }

    return lv_listName;
}

string libARRA_gf_PointsSinglePoint (point lp_point) {
    // Variable Declarations
    string lv_listName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";

    // Implementation
    libARRA_gv_pointsListsCreated += 1;
    lv_listName = ("*P" + IntToString(libARRA_gv_pointsListsCreated));
    if ((lp_point != null)) {
        libARRA_gf_ListPointPush(lv_listName, lp_point);
    }

    return lv_listName;
}

string libARRA_gf_PointsRange (string lp_suffix, int lp_index1, int lp_index2) {
    // Variable Declarations
    point lv_point;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";
    lv_iterator = lp_index1;

    // Implementation
    libARRA_gv_pointsListsCreated += 1;
    lv_listName = ("*P" + IntToString(libARRA_gv_pointsListsCreated));
    lv_point = libARRA_gf_GetPoint(lp_suffix, lv_iterator);
    while ((lv_point != null) && (lv_iterator <= lp_index2)) {
        libARRA_gf_ListPointPush(lv_listName, lv_point);
        lv_iterator += 1;
        lv_point = libARRA_gf_GetPoint(lp_suffix, lv_iterator);
    }
    return lv_listName;
}

string libARRA_gf_PointsAll (string lp_suffix) {
    // Variable Declarations
    point lv_point;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";
    lv_iterator = 1;

    // Implementation
    return libARRA_gf_PointsRange(lp_suffix, 1, 99);
}

string libARRA_gf_PointsString (string lp_suffix, string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, "-", c_stringAnywhere, c_stringCase) == true)) {
        lv_spawns = StringReplaceWord(lp_spawns, "-", " ", c_stringReplaceAll, c_stringCase);
        return libARRA_gf_PointsRange(lp_suffix, StringToInt(StringWord(lv_spawns, 1)), StringToInt(StringWord(lv_spawns, 2)));
    }
    else {
        return libARRA_gf_PointsSingle(lp_suffix, StringToInt(StringWord(lv_spawns, 1)));
    }
}

string libARRA_gf_Points (string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, " ", c_stringAnywhere, c_stringCase) == true)) {
        return libARRA_gf_PointsString(StringWord(lv_spawns, 1), StringWord(lv_spawns, 2));
    }
    else {
        return libARRA_gf_PointsAll(lp_spawns);
    }
}

string libARRA_gf_GetRoute (string lp_suffix, int lp_routeIndex) {
    // Variable Declarations
    point lv_point;
    string lv_listName;
    string lv_route;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = IntToString(lp_routeIndex);

    // Implementation
    lv_point = libARRA_gf_IIF7(PointFromName((lp_suffix + " " + lv_route)), PointFromName((lp_suffix + " 0" + lv_route)));
    if ((lv_point != null)) {
        lv_listName = libARRA_gf_PointsSinglePoint(lv_point);
    }
    else {
        lv_point = libARRA_gf_IIF7(PointFromName((lp_suffix + " " + lv_route + "-1")), PointFromName((lp_suffix + " " + lv_route + "-01")));
        if ((lv_point != null)) {
            lv_listName = libARRA_gf_PointsAll((lp_suffix + " " + lv_route + "-"));
        }
        else {
            lv_point = libARRA_gf_IIF7(PointFromName((lp_suffix + " 0" + lv_route + "-1")), PointFromName((lp_suffix + " 0" + lv_route + "-01")));
            if ((lv_point != null)) {
                lv_listName = libARRA_gf_PointsAll((lp_suffix + " 0" + lv_route + "-"));
            }

        }
    }
    return lv_listName;
}

string libARRA_gf_RoutesSingle (string lp_suffix, int lp_index) {
    // Variable Declarations
    string lv_route;
    string lv_listName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = "";
    lv_listName = "";

    // Implementation
    libARRA_gv_routesListsCreated += 1;
    lv_listName = ("**P" + IntToString(libARRA_gv_routesListsCreated));
    lv_route = libARRA_gf_GetRoute(lp_suffix, lp_index);
    if ((lv_route != null)) {
        libARRA_gf_ListStringPush(lv_listName, lv_route);
    }

    return lv_listName;
}

string libARRA_gf_RoutesRange (string lp_suffix, int lp_index1, int lp_index2) {
    // Variable Declarations
    string lv_route;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = "";
    lv_listName = "";
    lv_iterator = lp_index1;

    // Implementation
    libARRA_gv_routesListsCreated += 1;
    lv_listName = ("**P" + IntToString(libARRA_gv_routesListsCreated));
    lv_route = libARRA_gf_GetRoute(lp_suffix, lv_iterator);
    while ((lv_route != null) && (lv_iterator <= lp_index2)) {
        libARRA_gf_ListStringPush(lv_listName, lv_route);
        lv_iterator += 1;
        lv_route = libARRA_gf_GetRoute(lp_suffix, lv_iterator);
    }
    return lv_listName;
}

string libARRA_gf_RoutesAll (string lp_suffix) {
    // Variable Declarations
    string lv_route;
    point lv_point;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = "";
    lv_listName = "";
    lv_iterator = 1;

    // Implementation
    return libARRA_gf_RoutesRange(lp_suffix, 1, 99);
}

string libARRA_gf_RoutesString (string lp_suffix, string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, "-", c_stringAnywhere, c_stringCase) == true)) {
        lv_spawns = StringReplaceWord(lp_spawns, "-", " ", c_stringReplaceAll, c_stringCase);
        return libARRA_gf_RoutesRange(lp_suffix, StringToInt(StringWord(lv_spawns, 1)), StringToInt(StringWord(lv_spawns, 2)));
    }
    else {
        return libARRA_gf_RoutesSingle(lp_suffix, StringToInt(StringWord(lv_spawns, 1)));
    }
}

string libARRA_gf_Routes (string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, " ", c_stringAnywhere, c_stringCase) == true) && (StringWord(lp_spawns, 2) != "")) {
        return libARRA_gf_RoutesString(StringWord(lv_spawns, 1), StringWord(lv_spawns, 2));
    }
    else {
        return libARRA_gf_RoutesAll(StringWord(lv_spawns, 1));
    }
}

point libARRA_gf_GetPlayerStartPosition (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gv_playerStartPosition[lp_player];
}

void libARRA_gf_AddRegionByNameIfExists (region lp_sourceRegion, string lp_targetRegionName) {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionEmpty();

    // Implementation
    lv_region = RegionFromName(lp_targetRegionName);
    if ((lv_region != null)) {
        RegionAddRegion(lp_sourceRegion, lv_region);
    }

}

void libARRA_gf_AddRegionIfExists (region lp_sourceRegion, region lp_targetRegion) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_targetRegion != null)) {
        RegionAddRegion(lp_sourceRegion, lp_targetRegion);
    }

}

void libARRA_gf_ClearArmedCache (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = lp_player;

    // Implementation
    libARRA_gv_cACHE_ARMED[lv_p] = " ";
    libARRA_gv_cACHE_DISARMED[lv_p] = " ";
}

void libARRA_gf_Armunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_aBILITY;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto4DFE723F_ae;
    const int auto4DFE723F_ai = 1;
    int auto2166497D_ae;
    const int auto2166497D_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    UnitBehaviorRemove(lp_unit, "Monobattle", 1);
    auto4DFE723F_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto4DFE723F_ai >= 0 && lv_i <= auto4DFE723F_ae) || (auto4DFE723F_ai < 0 && lv_i >= auto4DFE723F_ae) ) ; lv_i += auto4DFE723F_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((libARRA_gf_AbilityIsDanger(lp_player, lv_aBILITY) == true))) {
            UnitAbilityAdd(lp_unit, lv_aBILITY);
        }

    }
    auto2166497D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto2166497D_ai >= 0 && lv_i <= auto2166497D_ae) || (auto2166497D_ai < 0 && lv_i >= auto2166497D_ae) ) ; lv_i += auto2166497D_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((libARRA_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorAdd(lp_unit, lv_behavior, lp_unit, 1);
        }

    }
}

void libARRA_gf_Disarmunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    int lv_cAbilityEffectAttack;
    string lv_behavior;

    // Automatic Variable Declarations
    int autoC4FD923B_ae;
    const int autoC4FD923B_ai = 1;
    int autoA833025E_ae;
    const int autoA833025E_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);
    lv_cAbilityEffectAttack = CatalogEntryClass(c_gameCatalogAbil, "attack");

    // Implementation
    UnitBehaviorAdd(lp_unit, "Monobattle", lp_unit, 1);
    autoC4FD923B_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoC4FD923B_ai >= 0 && lv_i <= autoC4FD923B_ae) || (autoC4FD923B_ai < 0 && lv_i >= autoC4FD923B_ae) ) ; lv_i += autoC4FD923B_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((libARRA_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            UnitAbilityRemove(lp_unit, lv_ability);
        }

    }
    autoA833025E_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoA833025E_ai >= 0 && lv_i <= autoA833025E_ae) || (autoA833025E_ai < 0 && lv_i >= autoA833025E_ae) ) ; lv_i += autoA833025E_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((libARRA_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorRemove(lp_unit, lv_behavior, 1);
        }

    }
}

void libARRA_gf_ArmUnitType (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto1B8D0EC0_ae;
    const int auto1B8D0EC0_ai = 1;
    int auto8C8FD1C9_ae;
    const int auto8C8FD1C9_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (libARRA_gf_UnitTypeisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((libARRA_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true)) {
        libARRA_gv_cACHE_DISARMED[lp_player] = StringReplaceWord(libARRA_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    auto1B8D0EC0_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto1B8D0EC0_ai >= 0 && lv_i <= auto1B8D0EC0_ae) || (auto1B8D0EC0_ai < 0 && lv_i >= auto1B8D0EC0_ae) ) ; lv_i += auto1B8D0EC0_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    auto8C8FD1C9_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto8C8FD1C9_ai >= 0 && lv_i <= auto8C8FD1C9_ae) || (auto8C8FD1C9_ai < 0 && lv_i >= auto8C8FD1C9_ae) ) ; lv_i += auto8C8FD1C9_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == libARRA_gv_cAbilityAttack) || (libARRA_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        libARRA_gv_cACHE_ARMED[lp_player] = (libARRA_gv_cACHE_ARMED[lp_player] + (lp_unit) + " ");
    }

}

void libARRA_gf_Disarmunittype (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto64A3CCD9_ae;
    const int auto64A3CCD9_ai = 1;
    int auto6BA8EC08_ae;
    const int auto6BA8EC08_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (libARRA_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((libARRA_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        libARRA_gv_cACHE_ARMED[lp_player] = StringReplaceWord(libARRA_gv_cACHE_ARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    auto64A3CCD9_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto64A3CCD9_ai >= 0 && lv_i <= auto64A3CCD9_ae) || (auto64A3CCD9_ai < 0 && lv_i >= auto64A3CCD9_ae) ) ; lv_i += auto64A3CCD9_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    auto6BA8EC08_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto6BA8EC08_ai >= 0 && lv_i <= auto6BA8EC08_ae) || (auto6BA8EC08_ai < 0 && lv_i >= auto6BA8EC08_ae) ) ; lv_i += auto6BA8EC08_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == libARRA_gv_cAbilityAttack) || (libARRA_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        libARRA_gv_cACHE_DISARMED[lp_player] = (libARRA_gv_cACHE_DISARMED[lp_player] + (lp_unit) + " ");
    }

}

bool libARRA_gf_UnitTypeisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARRA_gv_cACHE_ARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libARRA_gf_UnitTypeisDisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(libARRA_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup libARRA_gf_GetResourcesNearPoint (point lp_point, fixed lp_radius, int lp_type) {
    // Variable Declarations
    region lv_region;
    unitgroup lv_resources;
    unitgroup lv_units;
    unit lv_unit;

    // Automatic Variable Declarations
    int autoBBBC6A90_ae;
    int autoBBBC6A90_var;
    int auto6C66DB05_ae;
    int auto6C66DB05_var;

    // Variable Initialization
    lv_region = RegionCircle(lp_point, lp_radius);
    lv_resources = UnitGroupEmpty();
    lv_units = UnitGroupEmpty();

    // Implementation
    if (((lp_type == c_resourceTypeVespene) || (lp_type == c_resourceTypeCustom))) {
        lv_units = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_resources, UnitGroup(null, c_playerAny, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        autoBBBC6A90_ae = UserDataGetInt("MissionSettings", "CurrentMission", "ResourcesVespene", 1);
        autoBBBC6A90_var = 1;
        for ( ; autoBBBC6A90_var <= autoBBBC6A90_ae; autoBBBC6A90_var += 1 ) {
            lv_unit = UnitGroupClosestToPoint(lv_units, lp_point);
            UnitGroupAdd(lv_resources, lv_unit);
            UnitGroupRemove(lv_units, lv_unit);
        }
    }

    if (((lp_type == c_resourceTypeMinerals) || (lp_type == c_resourceTypeCustom))) {
        lv_units = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_resources, UnitGroup(null, c_playerAny, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto6C66DB05_ae = UserDataGetInt("MissionSettings", "CurrentMission", "ResorucesMinerals", 1);
        auto6C66DB05_var = 1;
        for ( ; auto6C66DB05_var <= auto6C66DB05_ae; auto6C66DB05_var += 1 ) {
            lv_unit = UnitGroupClosestToPoint(lv_units, lp_point);
            UnitGroupAdd(lv_resources, lv_unit);
            UnitGroupRemove(lv_units, lv_unit);
        }
    }

    return lv_resources;
}

bool libARRA_gf_CM_Resources_IsSaturated (unit lp_resourceNodeorTownHall) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCurrentWorkerCount(lp_resourceNodeorTownHall) >= UnitIdealWorkerCount(lp_resourceNodeorTownHall));
}

void libARRA_gf_CM_Resources_FindWork (unit lp_worker, unit lp_townHall, fixed lp_workRadius) {
    // Variable Declarations
    region lv_workregion;
    unitgroup lv_nearbyminerals;
    unitgroup lv_nearbygeysers;
    unit lv_resourcenode;

    // Automatic Variable Declarations
    unitgroup autoE1C3883A_g;
    int autoE1C3883A_u;

    // Variable Initialization
    lv_workregion = RegionCircle(UnitGetPosition(lp_townHall), lp_workRadius);
    lv_nearbyminerals = UnitGroup(null, 0, lv_workregion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_nearbygeysers = UnitGroup(null, UnitGetOwner(lp_worker), lv_workregion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    autoE1C3883A_g = lv_nearbygeysers;
    autoE1C3883A_u = UnitGroupCount(autoE1C3883A_g, c_unitCountAll);
    for (;; autoE1C3883A_u -= 1) {
        lv_resourcenode = UnitGroupUnitFromEnd(autoE1C3883A_g, autoE1C3883A_u);
        if (lv_resourcenode == null) { break; }
        if ((libARRA_gf_CM_Resources_IsSaturated(lv_resourcenode) == false)) {
            UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), lv_resourcenode), c_orderQueueReplace);
            return ;
        }

    }
    if ((UnitGroupCount(lv_nearbyminerals, c_unitCountAlive) > 0) && (libARRA_gf_CM_Resources_IsSaturated(lp_townHall) == false)) {
        UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupUnit(lv_nearbyminerals, RandomInt(1, UnitGroupCount(lv_nearbyminerals, c_unitCountAlive)))), c_orderQueueReplace);
    }

}

bool libARRA_gf_UnitIsAntiAir (string lp_unit, int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_weapons;
    string lv_weapon;
    bool lv_isAntiAir;

    // Automatic Variable Declarations
    int autoA61938BE_ae;
    const int autoA61938BE_ai = 1;

    // Variable Initialization
    lv_weapons = CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player);

    // Implementation
    if ((lv_weapons > 0)) {
        autoA61938BE_ae = (lv_weapons - 1);
        lv_i = 0;
        for ( ; ( (autoA61938BE_ai >= 0 && lv_i <= autoA61938BE_ae) || (autoA61938BE_ai < 0 && lv_i >= autoA61938BE_ae) ) ; lv_i += autoA61938BE_ai ) {
            lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
            if ((lv_weapon != null) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterGround) != c_unitFilterRequired) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterAir) != c_unitFilterExcluded)) {
                return true;
            }

        }
    }

    return false;
}

bool libARRA_gf_UnitIsAir (string lp_unit, int lp_player) {
    // Variable Declarations
    const int lv_pLANE_AIR = 0;
    int lv_plane;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plane = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unit, "PlaneArray[" + IntToString(0) + "]", lp_player);

    // Implementation
    if ((lv_plane == lv_pLANE_AIR)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup libARRA_gf_UnitsInRegionWithSpecifiedTypes (int lp_player, string lp_units, region lp_region) {
    // Variable Declarations
    string lv_compareUnitName;
    string lv_compareUnitType;
    unitgroup lv_resultGroup;

    // Automatic Variable Declarations
    int auto3F0101C7_ai;
    int auto3F0101C7_ae;

    // Variable Initialization
    lv_compareUnitName = "";
    lv_resultGroup = UnitGroupEmpty();

    // Implementation
    auto3F0101C7_ai = 1;
    auto3F0101C7_ae = libARRA_gf_ListSize(lp_units);
    while (auto3F0101C7_ai <= auto3F0101C7_ae) {
        lv_compareUnitName = libARRA_gf_ListStringGet(lp_units, auto3F0101C7_ai);
        auto3F0101C7_ai = auto3F0101C7_ai+1;
        lv_compareUnitType = UnitTypeFromString(lv_compareUnitName);
        UnitGroupAddUnitGroup(lv_resultGroup, UnitGroup(lv_compareUnitType, lp_player, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    return lv_resultGroup;
}

fixed libARRA_gf_CombinedPropertyofUnitGroup (unitgroup lp_unitGroup, int lp_unitProperty, bool lp_currentDefault) {
    // Variable Declarations
    unit lv_unititer;
    fixed lv_totalproperty;

    // Automatic Variable Declarations
    unitgroup autoA16A0B90_g;
    int autoA16A0B90_u;

    // Variable Initialization

    // Implementation
    autoA16A0B90_g = lp_unitGroup;
    autoA16A0B90_u = UnitGroupCount(autoA16A0B90_g, c_unitCountAll);
    for (;; autoA16A0B90_u -= 1) {
        lv_unititer = UnitGroupUnitFromEnd(autoA16A0B90_g, autoA16A0B90_u);
        if (lv_unititer == null) { break; }
        lv_totalproperty += UnitGetPropertyFixed(lv_unititer, lp_unitProperty, lp_currentDefault);
    }
    return lv_totalproperty;
}

void libARRA_gf_CopyBehaviorToMagazineAmmos (unit lp_unit, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "TriggerCopyBehaviorToTarget", "Behavior", UnitGetOwner(lp_unit), (lp_behavior));
    UnitCreateEffectUnit(lp_unit, "TriggerCopyBehaviorToMagazine", lp_unit);
}

bool libARRA_gf_UT_AreMorphUnits (string lp_pUnitTypeA, string lp_pUnitTypeB) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pUnitTypeA == "SiegeTankSieged") && (lp_pUnitTypeB == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged") && (lp_pUnitTypeA == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeA == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeB == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "InfestedSiegeBreaker") && (lp_pUnitTypeB == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeB == "InfestedSiegeBreaker") && (lp_pUnitTypeA == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeA == "ZeratulPhotonCannon") && (lp_pUnitTypeB == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulPhotonCannon") && (lp_pUnitTypeA == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeA == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeB == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "SILiberator") && (lp_pUnitTypeB == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SILiberator") && (lp_pUnitTypeA == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SIInfestedBunker") && (lp_pUnitTypeA == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "SIInfestedBunker") && (lp_pUnitTypeB == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "Liberator_BlackOps") && (lp_pUnitTypeB == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator_BlackOps") && (lp_pUnitTypeA == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator") && (lp_pUnitTypeA == "LiberatorAG")) || ((lp_pUnitTypeA == "Liberator") && (lp_pUnitTypeB == "LiberatorAG")) || ((lp_pUnitTypeB == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeA == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeB == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "GaryStetmann") && (lp_pUnitTypeB == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "GaryStetmann") && (lp_pUnitTypeA == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "BroodLordStetmann") && (lp_pUnitTypeA == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "BroodLordStetmann") && (lp_pUnitTypeB == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "FenixArbiter") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixArbiter") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixArbiter")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixArbiter")) || ((lp_pUnitTypeB == "HHReaper") && (lp_pUnitTypeA == "HHReaperFlying")) || ((lp_pUnitTypeA == "HHReaper") && (lp_pUnitTypeB == "HHReaperFlying")) || ((lp_pUnitTypeA == "Broodling") && (lp_pUnitTypeB == "KerriganInfestBroodling")) || ((lp_pUnitTypeA == "KerriganInfestBroodling") && (lp_pUnitTypeB == "Broodling")) || ((lp_pUnitTypeA == "BroodLord") && (lp_pUnitTypeB == "BroodlingEscort")) || ((lp_pUnitTypeA == "BroodlingEscort") && (lp_pUnitTypeB == "BroodLord")) || ((lp_pUnitTypeA == "SiegeTankMengskSieged") && (lp_pUnitTypeB == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "SiegeTankMengskSieged") && (lp_pUnitTypeA == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "VikingMengskAssault") && (lp_pUnitTypeA == "VikingMengskFighter")) || ((lp_pUnitTypeA == "VikingMengskAssault") && (lp_pUnitTypeB == "VikingMengskFighter")) || ((lp_pUnitTypeA == "ThorMengsk") && (lp_pUnitTypeB == "ThorMengskSieged")) || ((lp_pUnitTypeB == "ThorMengsk") && (lp_pUnitTypeA == "ThorMengskSieged")))) {
        return true;
    }
    else {
        return false;
    }
}

string libARRA_gf_GetUnitRace (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "Race", UnitGetOwner(lp_unit)));
}

string libARRA_gf_GetUnitRace2 (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Race", c_playerAny));
}

int libARRA_gf_GetUnitCargoSize (unit lp_unit) {
    // Variable Declarations
    string lv_ability;
    int lv_cargo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_ability = libNtve_gf_UnitAbilityByFilters(lp_unit, c_classIdCAbilTransport, "");
    lv_cargo = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "TotalCargoSpace", UnitGetOwner(lp_unit));
    return lv_cargo;
}

bool libARRA_gf_StructureIsFlying (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "CommandCenterFlying") || (UnitGetType(lp_unit) == "OrbitalCommandFlying") || (UnitGetType(lp_unit) == "BarracksFlying") || (UnitGetType(lp_unit) == "FactoryFlying") || (UnitGetType(lp_unit) == "StarportFlying"))) {
        return true;
    }
    else {
        return false;
    }
}

unit libARRA_gf_LowestVitalityUnitfromUnitGroup (unitgroup lp_canidates) {
    // Variable Declarations
    fixed lv_vitality_Test;
    fixed lv_vitality_Least;
    unit lv_vitality_LeastCanidate;
    unit lv_canidateIter;

    // Automatic Variable Declarations
    unitgroup auto6F713B7C_g;
    int auto6F713B7C_u;

    // Variable Initialization
    lv_vitality_Least = 524287.0;

    // Implementation
    auto6F713B7C_g = lp_canidates;
    auto6F713B7C_u = UnitGroupCount(auto6F713B7C_g, c_unitCountAll);
    for (;; auto6F713B7C_u -= 1) {
        lv_canidateIter = UnitGroupUnitFromEnd(auto6F713B7C_g, auto6F713B7C_u);
        if (lv_canidateIter == null) { break; }
        lv_vitality_Test = UnitGetPropertyFixed(lv_canidateIter, c_unitPropVitality, c_unitPropCurrent);
        if ((lv_vitality_Test < lv_vitality_Least)) {
            lv_vitality_Least = lv_vitality_Test;
            lv_vitality_LeastCanidate = lv_canidateIter;
        }

    }
    return lv_vitality_LeastCanidate;
}

bool libARRA_gf_AnyUnitOfPlayerGroupInRegion (playergroup lp_playergroup, region lp_region) {
    // Automatic Variable Declarations
    playergroup auto916CFD69_g;
    int auto916CFD69_var;

    // Implementation
    auto916CFD69_g = lp_playergroup;
    auto916CFD69_var = -1;
    while (true) {
        auto916CFD69_var = PlayerGroupNextPlayer(auto916CFD69_g, auto916CFD69_var);
        if (auto916CFD69_var < 0) { break; }
        if ((UnitGroupCount(UnitGroup(null, auto916CFD69_var, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 1), c_unitCountAlive) > 0)) {
            return true;
        }

    }
    return false;
}

bool libARRA_gf_AllUnitsFromUnitGroupInRegion (unitgroup lp_units, region lp_region) {
    // Automatic Variable Declarations
    unitgroup auto1EE66ABE_g;
    int auto1EE66ABE_u;
    unit auto1EE66ABE_var;

    // Implementation
    auto1EE66ABE_g = lp_units;
    auto1EE66ABE_u = UnitGroupCount(auto1EE66ABE_g, c_unitCountAll);
    for (;; auto1EE66ABE_u -= 1) {
        auto1EE66ABE_var = UnitGroupUnitFromEnd(auto1EE66ABE_g, auto1EE66ABE_u);
        if (auto1EE66ABE_var == null) { break; }
        if ((UnitIsAlive(auto1EE66ABE_var) == true) && (libNtve_gf_UnitInRegion(auto1EE66ABE_var, lp_region) == false)) {
            return false;
        }

    }
    return true;
}

string libARRA_gf_GetCardLayoutButtonForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout) {
    // Variable Declarations
    int lv_vIndex;
    int lv_vPlayer;
    string lv_vType;
    string lv_vButton;

    // Automatic Variable Declarations
    int auto37B89C13_ae;
    const int auto37B89C13_ai = 1;

    // Variable Initialization
    lv_vPlayer = UnitGetOwner(lp_unit);
    lv_vType = UnitGetType(lp_unit);

    // Implementation
    auto37B89C13_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons", lv_vPlayer) - 1);
    lv_vIndex = 0;
    for ( ; ( (auto37B89C13_ai >= 0 && lv_vIndex <= auto37B89C13_ae) || (auto37B89C13_ai < 0 && lv_vIndex >= auto37B89C13_ae) ) ; lv_vIndex += auto37B89C13_ai ) {
        if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Row", lv_vPlayer) == lp_row) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Column", lv_vPlayer) == lp_column)) {
            lv_vButton = (CatalogFieldValueGet(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Face", lv_vPlayer));
            if ((lv_vButton != null)) {
                return lv_vButton;
            }

        }
    }
    return null;
}

abilcmd libARRA_gf_GetCardLayoutAbilityCommandForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout) {
    // Variable Declarations
    int lv_vIndex;
    int lv_vPlayer;
    string lv_vType;
    abilcmd lv_vAbilCmd;

    // Automatic Variable Declarations
    int autoB1D358EF_ae;
    const int autoB1D358EF_ai = 1;

    // Variable Initialization
    lv_vPlayer = UnitGetOwner(lp_unit);
    lv_vType = UnitGetType(lp_unit);

    // Implementation
    autoB1D358EF_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons", lv_vPlayer) - 1);
    lv_vIndex = 0;
    for ( ; ( (autoB1D358EF_ai >= 0 && lv_vIndex <= autoB1D358EF_ae) || (autoB1D358EF_ai < 0 && lv_vIndex >= autoB1D358EF_ae) ) ; lv_vIndex += autoB1D358EF_ai ) {
        if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Row", lv_vPlayer) == lp_row) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Column", lv_vPlayer) == lp_column)) {
            lv_vAbilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].AbilCmd", lv_vPlayer));
            if ((lv_vAbilCmd != null)) {
                return lv_vAbilCmd;
            }

        }
    }
    return null;
}

bool libARRA_gf_IIF13 (int lp_condition) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition != 0)) {
        return true;
    }
    else {
        return false;
    }
}

point libARRA_gf_IIF7 (point lp_iF, point lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

region libARRA_gf_IIF11 (region lp_iF, region lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

int libARRA_gf_IIF8 (int lp_iF, int lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != 0)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string libARRA_gf_IIF4 (string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

unit libARRA_gf_IIF6 (unit lp_iF, unit lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string libARRA_gf_IIF5 (string lp_iF, string lp_iF2) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_iF2;
    }
}

string libARRA_gf_IIF12 (bool lp_condition, string lp_iF, string lp_iF2) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_iF2;
    }
}

string libARRA_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string libARRA_gf_IIF10 (int lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition != 0)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

int libARRA_gf_IIF2 (bool lp_condition, int lp_iF, int lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

int libARRA_gf_IIF9 (int lp_condition, int lp_iF, int lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition != 0)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string libARRA_gf_IIF3 (bool lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string libARRA_gf_ListGetType (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((libARRA_gf_ListIsExist(lp_list) == true)) {
        return DataTableGetString(true, ("__ListType__" + lp_list));
    }
    else {
        return "";
    }
}

void libARRA_gf_ListSetType (string lp_list, string lp_newType) {
    // Variable Declarations
    string lv_previousType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_previousType = libARRA_gf_ListGetType(lp_list);

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lv_previousType != "") && (lv_previousType != lp_newType)) {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_ARRA_A5B5486A"), SoundLink("UI_GenericError", 0));
    }

    DataTableSetString(true, ("__ListType__" + lp_list), lp_newType);
}

void libARRA_gf_ListDestroy (string lp_list) {
    // Automatic Variable Declarations
    int autoDF55B283_ae;
    int autoDF55B283_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    libARRA_gf_ListClear(lp_list);
    DataTableValueRemove(true, ("__ListType__" + lp_list));
    autoDF55B283_ae = (libARRA_gf_ListSize(lp_list) - 1);
    autoDF55B283_var = 0;
    for ( ; autoDF55B283_var <= autoDF55B283_ae; autoDF55B283_var += 1 ) {
        DataTableValueRemove(true, libARRA_gf_ListGetDatabaseName(lp_list, autoDF55B283_var));
    }
}

void libARRA_gf_ListSort (string lp_sortableList, string lp_prriorityList) {
    // Variable Declarations
    string lv_aString;
    int lv_aInt;
    int lv_i;
    int lv_j;
    int lv_n;

    // Automatic Variable Declarations
    int auto1686E02C_ae;
    const int auto1686E02C_ai = 1;
    int autoC9DE3270_ae;
    const int autoC9DE3270_ai = 1;
    string auto58781657_val;

    // Variable Initialization
    lv_aString = "";
    lv_n = libARRA_gf_ListSize(lp_sortableList);

    // Implementation
    auto1686E02C_ae = lv_n;
    lv_i = 1;
    for ( ; ( (auto1686E02C_ai >= 0 && lv_i <= auto1686E02C_ae) || (auto1686E02C_ai < 0 && lv_i >= auto1686E02C_ae) ) ; lv_i += auto1686E02C_ai ) {
        autoC9DE3270_ae = (lv_n - lv_i);
        lv_j = 1;
        for ( ; ( (autoC9DE3270_ai >= 0 && lv_j <= autoC9DE3270_ae) || (autoC9DE3270_ai < 0 && lv_j >= autoC9DE3270_ae) ) ; lv_j += autoC9DE3270_ai ) {
            if ((libARRA_gf_ListIntGet(lp_prriorityList, lv_j) > libARRA_gf_ListIntGet(lp_prriorityList, (lv_j + 1)))) {
                auto58781657_val = libARRA_gf_ListGetType(lp_sortableList);
                if (auto58781657_val == "int") {
                    lv_aInt = libARRA_gf_ListIntGet(lp_sortableList, lv_j);
                    libARRA_gf_ListIntSet(lp_sortableList, lv_j, libARRA_gf_ListIntGet(lp_sortableList, (lv_j + 1)));
                    libARRA_gf_ListIntSet(lp_sortableList, (lv_j + 1), lv_aInt);
                }
                else if (auto58781657_val == "string") {
                    lv_aString = libARRA_gf_ListStringGet(lp_sortableList, lv_j);
                    libARRA_gf_ListStringSet(lp_sortableList, lv_j, libARRA_gf_ListStringGet(lp_sortableList, (lv_j + 1)));
                    libARRA_gf_ListStringSet(lp_sortableList, (lv_j + 1), lv_aString);
                    libARRA_gf_LOGString("");
                }
                else {
                }
                lv_aInt = libARRA_gf_ListIntGet(lp_prriorityList, lv_j);
                libARRA_gf_ListIntSet(lp_prriorityList, lv_j, libARRA_gf_ListIntGet(lp_prriorityList, (lv_j + 1)));
                libARRA_gf_ListIntSet(lp_prriorityList, (lv_j + 1), lv_aInt);
            }
        }
    }
}

void libARRA_gf_ListCreate (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        DataTableSetInt(true, lp_list, 0);
    }

}

void libARRA_gf_ListClear (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    while ((libARRA_gf_ListSize(lp_list) > 0)) {
        libARRA_gf_ListPopBack(lp_list);
    }
}

void libARRA_gf_ListPopBack (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((DataTableGetInt(true, lp_list) > 0)) {
        DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) - 1));
        DataTableValueRemove(true, libARRA_gf_ListGetDatabaseName(lp_list, DataTableGetInt(true, lp_list)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_ARRA_78368912"), SoundLink("UI_GenericError", 0));
    }
}

int libARRA_gf_ListSize (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    return DataTableGetInt(true, lp_list);
}

bool libARRA_gf_ListIsEmpty (string lp_list) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListSize(lp_list) == 0)) {
        lv_result = true;
    }

    return lv_result;
}

string libARRA_gf_ListGetDatabaseName (string lp_arrayName, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_arrayName + "[" + IntToString(lp_index) + "]");
}

void libARRA_gf_ListCreateIfNotExists (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        DataTableSetInt(true, lp_list, 0);
    }

}

bool libARRA_gf_ListIsExist (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_list == "")) {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_ARRA_BB9020B1"), SoundLink("UI_GenericError", 0));
        return false;
    }
    return DataTableValueExists(true, lp_list);
}

region libARRA_gf_ListRegionGet (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        return DataTableGetRegion(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }

    return null;
}

int libARRA_gf_ListRegionIndexOf (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    int auto841BC37F_ae;
    int auto841BC37F_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListIsEmpty(lp_list) == false)) {
        auto841BC37F_ae = libARRA_gf_ListSize(lp_list);
        auto841BC37F_var = 1;
        for ( ; auto841BC37F_var <= auto841BC37F_ae; auto841BC37F_var += 1 ) {
            if ((libARRA_gf_ListRegionGet(lp_list, auto841BC37F_var) == lp_value)) {
                return auto841BC37F_var;
            }

        }
    }

    return -1;
}

bool libARRA_gf_ListRegionIncludes (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListRegionIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ListRegionPush (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    DataTableSetRegion(true, libARRA_gf_ListGetDatabaseName(lp_list, libARRA_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void libARRA_gf_ListRegionSet (string lp_list, int lp_index, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > libARRA_gf_ListSize(lp_list))) {
        libARRA_gf_ListRegionPush(lp_list, RegionEmpty());
    }
    if ((lp_index > 0)) {
        DataTableSetRegion(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }

}

void libARRA_gf_ListRegionInclude (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListRegionIncludes(lp_list, lp_value) == false)) {
        libARRA_gf_ListRegionPush(lp_list, lp_value);
    }

}

void libARRA_gf_ListRegionInsertAt (string lp_list, int lp_index, region lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int autoBABDEF33_ae;
    int autoBABDEF33_var;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        libARRA_gf_ListRegionPush(lp_list, libARRA_gf_ListRegionGet(lp_list, libARRA_gf_ListSize(lp_list)));
        lv_start = (libARRA_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        autoBABDEF33_ae = (lv_start - lv_end);
        autoBABDEF33_var = 0;
        for ( ; autoBABDEF33_var <= autoBABDEF33_ae; autoBABDEF33_var += 1 ) {
            DataTableSetRegion(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - autoBABDEF33_var)), DataTableGetRegion(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - autoBABDEF33_var - 1))));
        }
        libARRA_gf_ListRegionSet(lp_list, lp_index, lp_value);
    }

}

void libARRA_gf_ListRegionRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto58CCAB03_ae;
    int auto58CCAB03_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto58CCAB03_ae = (libARRA_gf_ListSize(lp_list) - 2);
        auto58CCAB03_var = (lp_index - 1);
        for ( ; auto58CCAB03_var <= auto58CCAB03_ae; auto58CCAB03_var += 1 ) {
            DataTableSetRegion(true, libARRA_gf_ListGetDatabaseName(lp_list, auto58CCAB03_var), DataTableGetRegion(true, libARRA_gf_ListGetDatabaseName(lp_list, (auto58CCAB03_var + 1))));
        }
        libARRA_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_F6ED52AF") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_362FE075") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListRegionExclude (string lp_list, region lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    lv_index = libARRA_gf_ListRegionIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        libARRA_gf_ListRegionRemoveAt(lp_list, lv_index);
        lv_index = libARRA_gf_ListRegionIndexOf(lp_list, lp_value);
    }
}

void libARRA_gf_MapRegionSet (string lp_unit, string lp_index, region lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRegion(true, ("$E" + lp_unit + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$E" + lp_unit), lp_index);
}

region libARRA_gf_MapRegionGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, ("$E" + lp_unit + "_" + lp_index));
}

string libARRA_gf_MapRegionIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$E" + lp_unit);
}

bool libARRA_gf_MapRegionIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapRegionIndexes(lp_unit), lp_index);
}

void libARRA_gf_MapRevealerSet (string lp_unit, string lp_index, revealer lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRevealer(true, ("$V" + lp_unit + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$V" + lp_unit), lp_index);
}

revealer libARRA_gf_MapRevealerGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRevealer(true, ("$V" + lp_unit + "_" + lp_index));
}

string libARRA_gf_MapRevealerIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$V" + lp_unit);
}

bool libARRA_gf_MapRevealerIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapRevealerIndexes(lp_unit), lp_index);
}

string libARRA_gf_MapPingIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$P" + lp_unit);
}

void libARRA_gf_MapPingSet (string lp_unit, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, ("$P" + lp_unit + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$P" + lp_unit), lp_index);
}

int libARRA_gf_MapPingGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, ("$P" + lp_unit + "_" + lp_index));
}

bool libARRA_gf_MapPingIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapPingIndexes(lp_unit), lp_index);
}

void libARRA_gf_MapActorSet (string lp_unit, string lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, ("$A" + lp_unit + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$A" + lp_unit), lp_index);
}

actor libARRA_gf_MapActorGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, ("$A" + lp_unit + "_" + lp_index));
}

string libARRA_gf_MapActorIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$A" + lp_unit);
}

bool libARRA_gf_MapActorIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapActorIndexes(lp_unit), lp_index);
}

void libARRA_gf_MapUnitSet (string lp_map, string lp_index, unit lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(true, ("$U" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$U" + lp_map), lp_index);
}

unit libARRA_gf_MapUnitGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, ("$U" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapUnitIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$U" + lp_unit);
}

bool libARRA_gf_MapUnitIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapUnitIndexes(lp_unit), lp_index);
}

unitgroup libARRA_gf_ListUnitGroupGet (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        return DataTableGetUnitGroup(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_EBEDA1A0") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_8DFFFC28") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return null;
}

int libARRA_gf_ListUnitGroupIndexOf (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    int autoF53BB4CB_ae;
    int autoF53BB4CB_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListIsEmpty(lp_list) == false)) {
        autoF53BB4CB_ae = libARRA_gf_ListSize(lp_list);
        autoF53BB4CB_var = 1;
        for ( ; autoF53BB4CB_var <= autoF53BB4CB_ae; autoF53BB4CB_var += 1 ) {
            if ((libARRA_gf_ListUnitGroupGet(lp_list, autoF53BB4CB_var) == lp_value)) {
                return autoF53BB4CB_var;
            }

        }
    }

    return -1;
}

bool libARRA_gf_ListUnitGroupIncludes (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListUnitGroupIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ListUnitGroupPush (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    DataTableSetUnitGroup(true, libARRA_gf_ListGetDatabaseName(lp_list, libARRA_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void libARRA_gf_ListUnitGroupSet (string lp_list, int lp_index, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > libARRA_gf_ListSize(lp_list))) {
        libARRA_gf_ListUnitGroupPush(lp_list, lp_value);
    }
    if ((lp_index > 0)) {
        DataTableSetUnitGroup(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }

}

void libARRA_gf_ListUnitGroupInclude (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListUnitGroupIncludes(lp_list, lp_value) == false)) {
        libARRA_gf_ListUnitGroupPush(lp_list, lp_value);
    }

}

void libARRA_gf_ListUnitGroupInsertAt (string lp_list, int lp_index, unitgroup lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto6D1125E9_ae;
    int auto6D1125E9_var;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        libARRA_gf_ListUnitGroupPush(lp_list, libARRA_gf_ListUnitGroupGet(lp_list, libARRA_gf_ListSize(lp_list)));
        lv_start = (libARRA_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto6D1125E9_ae = (lv_start - lv_end);
        auto6D1125E9_var = 0;
        for ( ; auto6D1125E9_var <= auto6D1125E9_ae; auto6D1125E9_var += 1 ) {
            DataTableSetUnitGroup(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto6D1125E9_var)), DataTableGetUnitGroup(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto6D1125E9_var - 1))));
        }
        libARRA_gf_ListUnitGroupSet(lp_list, lp_index, lp_value);
    }

}

void libARRA_gf_ListUnitGroupRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto19C29677_ae;
    int auto19C29677_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto19C29677_ae = (libARRA_gf_ListSize(lp_list) - 2);
        auto19C29677_var = (lp_index - 1);
        for ( ; auto19C29677_var <= auto19C29677_ae; auto19C29677_var += 1 ) {
            DataTableSetUnitGroup(true, libARRA_gf_ListGetDatabaseName(lp_list, auto19C29677_var), DataTableGetUnitGroup(true, libARRA_gf_ListGetDatabaseName(lp_list, (auto19C29677_var + 1))));
        }
        libARRA_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_D8AFC5D0") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_80ACCCBB") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListUnitGroupExclude (string lp_list, unitgroup lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    lv_index = libARRA_gf_ListUnitGroupIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        libARRA_gf_ListUnitGroupRemoveAt(lp_list, lv_index);
        lv_index = libARRA_gf_ListUnitGroupIndexOf(lp_list, lp_value);
    }
}

void libARRA_gf_MapUnitGroupSet (string lp_map, string lp_index, unitgroup lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnitGroup(true, ("$G" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$G" + lp_map), lp_index);
}

unitgroup libARRA_gf_MapUnitGroupGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, ("$G" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapUnitGroupIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$G" + lp_unit);
}

bool libARRA_gf_MapUnitGroupIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapUnitGroupIndexes(lp_unit), lp_index);
}

void libARRA_gf_MapTimerSet (string lp_map, string lp_index, timer lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTimer(true, ("$T" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$T" + lp_map), lp_index);
}

timer libARRA_gf_MapTimerGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTimer(true, ("$T" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapTimerIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$T" + lp_unit);
}

bool libARRA_gf_MapTimerIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapTimerIndexes(lp_unit), lp_index);
}

void libARRA_gf_MapTriggerSet (string lp_map, string lp_index, trigger lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTrigger(true, ("$R" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$R" + lp_map), lp_index);
}

trigger libARRA_gf_MapTriggerGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, ("$R" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapTriggerIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$R" + lp_unit);
}

bool libARRA_gf_MapTriggerIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapTriggerIndexes(lp_unit), lp_index);
}

void libARRA_gf_MapObjectiveSet (string lp_map, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetObjective(true, ("$O" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$O" + lp_map), lp_index);
}

int libARRA_gf_MapObjectiveGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, ("$O" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapObjectiveIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$O" + lp_unit);
}

bool libARRA_gf_MapObjectiveIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapObjectiveIndexes(lp_unit), lp_index);
}

void libARRA_gf_MapTextSet (string lp_map, string lp_index, text lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetText(true, ("$X" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$X" + lp_map), lp_index);
}

text libARRA_gf_MapTextGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetText(true, ("$X" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapTextIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$X" + lp_unit);
}

bool libARRA_gf_MapTextIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapTextIndexes(lp_unit), lp_index);
}

fixed libARRA_gf_ListRealGet (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        return DataTableGetFixed(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_73352807") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_F512E428") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return -1;
}

int libARRA_gf_ListRealIndexOf (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    int auto485ECF50_ae;
    int auto485ECF50_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListIsEmpty(lp_list) == false)) {
        auto485ECF50_ae = libARRA_gf_ListSize(lp_list);
        auto485ECF50_var = 1;
        for ( ; auto485ECF50_var <= auto485ECF50_ae; auto485ECF50_var += 1 ) {
            if ((libARRA_gf_ListRealGet(lp_list, auto485ECF50_var) == lp_value)) {
                return auto485ECF50_var;
            }

        }
    }

    return -1;
}

bool libARRA_gf_ListRealIncludes (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListRealIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ListRealSet (string lp_list, int lp_index, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > libARRA_gf_ListSize(lp_list))) {
        libARRA_gf_ListRealPush(lp_list, 0.0);
    }
    if ((lp_index > 0)) {
        DataTableSetFixed(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_B2F06617") + FixedToText(lp_value, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_ARRA_4BC5A61B") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_0FF48FAB") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListRealPush (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    DataTableSetFixed(true, libARRA_gf_ListGetDatabaseName(lp_list, libARRA_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void libARRA_gf_ListRealInclude (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListRealIncludes(lp_list, lp_value) == false)) {
        libARRA_gf_ListRealPush(lp_list, lp_value);
    }

}

void libARRA_gf_ListRealInsertAt (string lp_list, int lp_index, fixed lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto69EE7D00_ae;
    int auto69EE7D00_var;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        libARRA_gf_ListRealPush(lp_list, libARRA_gf_ListRealGet(lp_list, libARRA_gf_ListSize(lp_list)));
        lv_start = (libARRA_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto69EE7D00_ae = (lv_start - lv_end);
        auto69EE7D00_var = 0;
        for ( ; auto69EE7D00_var <= auto69EE7D00_ae; auto69EE7D00_var += 1 ) {
            DataTableSetFixed(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto69EE7D00_var)), DataTableGetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto69EE7D00_var - 1))));
        }
        libARRA_gf_ListRealSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_E655C260") + FixedToText(lp_value, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_ARRA_E5C0A96B") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_6084DCD5") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListRealRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto52CEFA62_ae;
    int auto52CEFA62_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto52CEFA62_ae = (libARRA_gf_ListSize(lp_list) - 2);
        auto52CEFA62_var = (lp_index - 1);
        for ( ; auto52CEFA62_var <= auto52CEFA62_ae; auto52CEFA62_var += 1 ) {
            DataTableSetFixed(true, libARRA_gf_ListGetDatabaseName(lp_list, auto52CEFA62_var), DataTableGetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, (auto52CEFA62_var + 1))));
        }
        libARRA_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_3E582092") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_F8D77AE0") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListRealExclude (string lp_list, fixed lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    lv_index = libARRA_gf_ListRealIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        libARRA_gf_ListRealRemoveAt(lp_list, lv_index);
        lv_index = libARRA_gf_ListRealIndexOf(lp_list, lp_value);
    }
}

void libARRA_gf_MapRealSet (string lp_map, string lp_index, fixed lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetFixed(true, ("$R" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$R" + lp_map), lp_index);
}

fixed libARRA_gf_MapRealGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(true, ("$R" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapRealIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$R" + lp_unit);
}

bool libARRA_gf_MapRealIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapRealIndexes(lp_unit), lp_index);
}

void libARRA_gf_ListIntCopy (string lp_source, string lp_target) {
    // Automatic Variable Declarations
    int auto1A8D5DB0_ae;
    int auto1A8D5DB0_var;

    // Implementation
    if ((libARRA_gf_ListSize(lp_source) == 0)) {
        return ;
    }

    libARRA_gf_ListClear(lp_target);
    auto1A8D5DB0_ae = libARRA_gf_ListSize(lp_source);
    auto1A8D5DB0_var = 1;
    for ( ; auto1A8D5DB0_var <= auto1A8D5DB0_ae; auto1A8D5DB0_var += 1 ) {
        libARRA_gf_ListIntPush(lp_target, libARRA_gf_ListIntGet(lp_source, auto1A8D5DB0_var));
    }
}

int libARRA_gf_ListIntGet (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnvalue = -1;

    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_4E66DCA4") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_09F3147F") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return lv_returnvalue;
}

int libARRA_gf_ListIntIndexOf (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    int autoE0A8D760_ae;
    int autoE0A8D760_var;

    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    if ((libARRA_gf_ListIsEmpty(lp_list) == false)) {
        autoE0A8D760_ae = libARRA_gf_ListSize(lp_list);
        autoE0A8D760_var = 1;
        for ( ; autoE0A8D760_var <= autoE0A8D760_ae; autoE0A8D760_var += 1 ) {
            if ((libARRA_gf_ListIntGet(lp_list, autoE0A8D760_var) == lp_value)) {
                return autoE0A8D760_var;
            }

        }
    }

    return -1;
}

bool libARRA_gf_ListIntIncludes (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    if ((libARRA_gf_ListIntIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ListIntSet (string lp_list, int lp_index, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    while ((lp_index > libARRA_gf_ListSize(lp_list))) {
        libARRA_gf_ListIntPush(lp_list, 0);
    }
    if ((lp_index > 0)) {
        DataTableSetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_0D5C8ADE") + IntToText(lp_value) + StringExternal("Param/Value/lib_ARRA_E96DE815") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_ED2C25F4") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListIntPush (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    DataTableSetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, libARRA_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void libARRA_gf_ListIntInclude (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    if ((libARRA_gf_ListIntIncludes(lp_list, lp_value) == false)) {
        libARRA_gf_ListIntPush(lp_list, lp_value);
    }

}

void libARRA_gf_ListIntInsertAt (string lp_list, int lp_index, int lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto712E3838_ae;
    int auto712E3838_var;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        libARRA_gf_ListIntPush(lp_list, libARRA_gf_ListIntGet(lp_list, libARRA_gf_ListSize(lp_list)));
        lv_start = (libARRA_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto712E3838_ae = (lv_start - lv_end);
        auto712E3838_var = 0;
        for ( ; auto712E3838_var <= auto712E3838_ae; auto712E3838_var += 1 ) {
            DataTableSetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto712E3838_var)), DataTableGetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto712E3838_var - 1))));
        }
        libARRA_gf_ListIntSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_ED8C56C7") + IntToText(lp_value) + StringExternal("Param/Value/lib_ARRA_467C97C3") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_6E0A9BA2") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListIntRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto477B3C43_ae;
    int auto477B3C43_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto477B3C43_ae = (libARRA_gf_ListSize(lp_list) - 2);
        auto477B3C43_var = (lp_index - 1);
        for ( ; auto477B3C43_var <= auto477B3C43_ae; auto477B3C43_var += 1 ) {
            DataTableSetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, auto477B3C43_var), DataTableGetInt(true, libARRA_gf_ListGetDatabaseName(lp_list, (auto477B3C43_var + 1))));
        }
        libARRA_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_72875DCA") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_851C0843") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListIntExclude (string lp_list, int lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListSetType(lp_list, "int");
    lv_index = libARRA_gf_ListIntIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        libARRA_gf_ListIntRemoveAt(lp_list, lv_index);
        lv_index = libARRA_gf_ListIntIndexOf(lp_list, lp_value);
    }
}

void libARRA_gf_MapIntSet (string lp_map, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, ("$I" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$I" + lp_map), lp_index);
}

int libARRA_gf_MapIntGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("$I" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapIntIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$I" + lp_unit);
}

bool libARRA_gf_MapIntIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapIntIndexes(lp_unit), lp_index);
}

text libARRA_gf_ListStringtoText (string lp_list) {
    // Variable Declarations
    string lv_log_string;

    // Automatic Variable Declarations
    int autoE7E0862C_ae;
    int autoE7E0862C_var;

    // Variable Initialization
    lv_log_string = "";

    // Implementation
    if ((lp_list == null) && (DataTableValueExists(true, lp_list) == false)) {
        return StringToText("-");
    }
    else {
        autoE7E0862C_ae = libARRA_gf_ListSize(lp_list);
        autoE7E0862C_var = 1;
        for ( ; autoE7E0862C_var <= autoE7E0862C_ae; autoE7E0862C_var += 1 ) {
            if ((autoE7E0862C_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_log_string = (lv_log_string + libARRA_gf_ListStringGet(lp_list, autoE7E0862C_var));
        }
        return StringToText(lv_log_string);
    }
}

void libARRA_gf_ListStringCopy (string lp_source, string lp_target) {
    // Automatic Variable Declarations
    int autoC8B85EA3_ae;
    int autoC8B85EA3_var;

    // Implementation
    if ((libARRA_gf_ListSize(lp_source) == 0)) {
        return ;
    }

    libARRA_gf_ListClear(lp_target);
    autoC8B85EA3_ae = libARRA_gf_ListSize(lp_source);
    autoC8B85EA3_var = 1;
    for ( ; autoC8B85EA3_var <= autoC8B85EA3_ae; autoC8B85EA3_var += 1 ) {
        libARRA_gf_ListStringPush(lp_target, libARRA_gf_ListStringGet(lp_source, autoC8B85EA3_var));
    }
}

string libARRA_gf_ListStringGet (string lp_list, int lp_index) {
    // Variable Declarations
    string lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnvalue = "";

    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetString(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_ARRA_CAA7D68D", "A", StringToText(lp_list));
        TextExpressionSetToken("Param/Expression/lib_ARRA_CAA7D68D", "C", IntToText(lp_index));
        TextExpressionSetToken("Param/Expression/lib_ARRA_CAA7D68D", "B", IntToText(libARRA_gf_ListSize(lp_list)));
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_ARRA_CAA7D68D"), SoundLink("UI_GenericError", 0));
    }
    return lv_returnvalue;
}

int libARRA_gf_ListStringIndexOf (string lp_list, string lp_value) {
    // Automatic Variable Declarations
    int auto3FD63E5F_ae;
    int auto3FD63E5F_var;

    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    if ((libARRA_gf_ListIsEmpty(lp_list) == false)) {
        auto3FD63E5F_ae = libARRA_gf_ListSize(lp_list);
        auto3FD63E5F_var = 1;
        for ( ; auto3FD63E5F_var <= auto3FD63E5F_ae; auto3FD63E5F_var += 1 ) {
            if ((libARRA_gf_ListStringGet(lp_list, auto3FD63E5F_var) == lp_value)) {
                return auto3FD63E5F_var;
            }

        }
    }

    return -1;
}

bool libARRA_gf_ListStringIncludes (string lp_list, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    if ((libARRA_gf_ListStringIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ListStringSet (string lp_list, int lp_index, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        DataTableSetString(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_D86EAB1E") + StringToText(lp_value) + StringExternal("Param/Value/lib_ARRA_CC549D16") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_1843B1D2") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListStringPush (string lp_list, string lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    DataTableSetString(true, libARRA_gf_ListGetDatabaseName(lp_list, libARRA_gf_ListSize(lp_list)), lp_addedValue);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void libARRA_gf_ListStringInclude (string lp_list, string lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    if ((libARRA_gf_ListStringIncludes(lp_list, lp_addedValue) == false)) {
        libARRA_gf_ListStringPush(lp_list, lp_addedValue);
    }

}

void libARRA_gf_ListStringInsertAt (string lp_list, int lp_index, string lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto8A1CD68B_ae;
    int auto8A1CD68B_var;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        libARRA_gf_ListStringPush(lp_list, libARRA_gf_ListStringGet(lp_list, libARRA_gf_ListSize(lp_list)));
        lv_start = (libARRA_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto8A1CD68B_ae = (lv_start - lv_end);
        auto8A1CD68B_var = 0;
        for ( ; auto8A1CD68B_var <= auto8A1CD68B_ae; auto8A1CD68B_var += 1 ) {
            DataTableSetString(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto8A1CD68B_var)), DataTableGetString(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto8A1CD68B_var - 1))));
        }
        libARRA_gf_ListStringSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_BB8573E8") + StringToText(lp_value) + StringExternal("Param/Value/lib_ARRA_5780FD89") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_4BFA7B9B") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListStringRemoveAt (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    int auto1C35D031_ae;
    int auto1C35D031_var;

    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto1C35D031_ae = (libARRA_gf_ListSize(lp_list) - 2);
        auto1C35D031_var = (lp_index - 1);
        for ( ; auto1C35D031_var <= auto1C35D031_ae; auto1C35D031_var += 1 ) {
            DataTableSetString(true, libARRA_gf_ListGetDatabaseName(lp_list, auto1C35D031_var), DataTableGetString(true, libARRA_gf_ListGetDatabaseName(lp_list, (auto1C35D031_var + 1))));
        }
        libARRA_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_6026870B") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_E0736642") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListStringExclude (string lp_list, string lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListSetType(lp_list, "string");
    lv_index = libARRA_gf_ListStringIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        libARRA_gf_ListStringRemoveAt(lp_list, lv_index);
        lv_index = libARRA_gf_ListStringIndexOf(lp_list, lp_value);
    }
}

void libARRA_gf_MapStringSet (string lp_map, string lp_index, string lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(true, ("$S" + lp_map + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$S" + lp_map), lp_index);
}

void libARRA_gf_MapStringUnset (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DataTableValueRemove(true, ("$S" + lp_map + "_" + lp_index));
    libARRA_gf_ListStringExclude(("$S" + lp_map), lp_index);
}

string libARRA_gf_MapStringGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(true, ("$S" + lp_map + "_" + lp_index));
}

string libARRA_gf_MapStringIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$S" + lp_unit);
}

bool libARRA_gf_MapStringIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapStringIndexes(lp_unit), lp_index);
}

abilcmd libARRA_gf_ListAbilCmdGet (string lp_list, int lp_index) {
    // Variable Declarations
    abilcmd lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetAbilCmd(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_371E33BA") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_5ECB4179") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return lv_returnvalue;
}

int libARRA_gf_ListAbilCmdIndexOf (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    int auto58E39CC4_ae;
    int auto58E39CC4_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListIsEmpty(lp_list) == false)) {
        auto58E39CC4_ae = libARRA_gf_ListSize(lp_list);
        auto58E39CC4_var = 1;
        for ( ; auto58E39CC4_var <= auto58E39CC4_ae; auto58E39CC4_var += 1 ) {
            if ((libARRA_gf_ListAbilCmdGet(lp_list, auto58E39CC4_var) == lp_value)) {
                return auto58E39CC4_var;
            }

        }
    }

    return -1;
}

bool libARRA_gf_ListAbilCmdIncludes (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListAbilCmdIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ListAbilCmdSet (string lp_list, int lp_index, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        DataTableSetAbilCmd(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_939C4604") + StringToText((AbilityCommandGetAbility(lp_value))) + StringExternal("Param/Value/lib_ARRA_94958194") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_4299E4F8") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListAbilCmdPush (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    DataTableSetAbilCmd(true, libARRA_gf_ListGetDatabaseName(lp_list, libARRA_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void libARRA_gf_ListAbilCmdInclude (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListAbilCmdIncludes(lp_list, lp_value) == false)) {
        libARRA_gf_ListAbilCmdPush(lp_list, lp_value);
    }

}

void libARRA_gf_ListAbilCmdInsertAt (string lp_list, int lp_index, abilcmd lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int autoE9F96D46_ae;
    int autoE9F96D46_var;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        libARRA_gf_ListAbilCmdPush(lp_list, libARRA_gf_ListAbilCmdGet(lp_list, libARRA_gf_ListSize(lp_list)));
        lv_start = (libARRA_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        autoE9F96D46_ae = (lv_start - lv_end);
        autoE9F96D46_var = 0;
        for ( ; autoE9F96D46_var <= autoE9F96D46_ae; autoE9F96D46_var += 1 ) {
            DataTableSetAbilCmd(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - autoE9F96D46_var)), DataTableGetAbilCmd(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - autoE9F96D46_var - 1))));
        }
        libARRA_gf_ListAbilCmdSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_2170CCF4") + StringToText((AbilityCommandGetAbility(lp_value))) + StringExternal("Param/Value/lib_ARRA_10B428F6") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_88401337") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListAbilCmdRemoveAt (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    int auto0D330D5C_ae;
    int auto0D330D5C_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto0D330D5C_ae = (libARRA_gf_ListSize(lp_list) - 2);
        auto0D330D5C_var = (lp_index - 1);
        for ( ; auto0D330D5C_var <= auto0D330D5C_ae; auto0D330D5C_var += 1 ) {
            DataTableSetAbilCmd(true, libARRA_gf_ListGetDatabaseName(lp_list, auto0D330D5C_var), DataTableGetAbilCmd(true, libARRA_gf_ListGetDatabaseName(lp_list, (auto0D330D5C_var + 1))));
        }
        libARRA_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_760DA2B3") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_40A3062F") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListAbilCmdExclude (string lp_list, abilcmd lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    lv_index = libARRA_gf_ListAbilCmdIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        libARRA_gf_ListAbilCmdRemoveAt(lp_list, lv_index);
        lv_index = libARRA_gf_ListAbilCmdIndexOf(lp_list, lp_value);
    }
}

point libARRA_gf_ListPointGet (string lp_list, int lp_index) {
    // Variable Declarations
    point lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetPoint(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_1F62FEC0") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_8DE2D371") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return lv_returnvalue;
}

int libARRA_gf_ListPointIndexOf (string lp_list, point lp_value) {
    // Automatic Variable Declarations
    int auto329EA2EE_ae;
    int auto329EA2EE_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListIsEmpty(lp_list) == false)) {
        auto329EA2EE_ae = libARRA_gf_ListSize(lp_list);
        auto329EA2EE_var = 1;
        for ( ; auto329EA2EE_var <= auto329EA2EE_ae; auto329EA2EE_var += 1 ) {
            if ((libARRA_gf_ListPointGet(lp_list, auto329EA2EE_var) == lp_value)) {
                return auto329EA2EE_var;
            }

        }
    }

    return -1;
}

bool libARRA_gf_ListPointIncludes (string lp_list, point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListPointIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_ListPointSet (string lp_list, int lp_index, point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > libARRA_gf_ListSize(lp_list))) {
        libARRA_gf_ListPointPush(lp_list, null);
    }
    if ((lp_index > 0)) {
        DataTableSetPoint(true, libARRA_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_D7A229D0") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_1B574511") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListPointPush (string lp_list, point lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    DataTableSetPoint(true, libARRA_gf_ListGetDatabaseName(lp_list, libARRA_gf_ListSize(lp_list)), lp_addedValue);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void libARRA_gf_ListPointInclude (string lp_list, point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((libARRA_gf_ListPointIncludes(lp_list, lp_value) == false)) {
        libARRA_gf_ListPointPush(lp_list, lp_value);
    }

}

void libARRA_gf_ListPointInsertAt (string lp_list, int lp_index, point lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto4C40B01B_ae;
    int auto4C40B01B_var;

    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        libARRA_gf_ListPointPush(lp_list, libARRA_gf_ListPointGet(lp_list, libARRA_gf_ListSize(lp_list)));
        lv_start = (libARRA_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto4C40B01B_ae = (lv_start - lv_end);
        auto4C40B01B_var = 0;
        for ( ; auto4C40B01B_var <= auto4C40B01B_ae; auto4C40B01B_var += 1 ) {
            DataTableSetPoint(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto4C40B01B_var)), DataTableGetPoint(true, libARRA_gf_ListGetDatabaseName(lp_list, (lv_start - auto4C40B01B_var - 1))));
        }
        libARRA_gf_ListPointSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_5349D4ED") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_669B8E17") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListPointRemoveAt (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    int auto519727D7_ae;
    int auto519727D7_var;

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= libARRA_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto519727D7_ae = (libARRA_gf_ListSize(lp_list) - 2);
        auto519727D7_var = (lp_index - 1);
        for ( ; auto519727D7_var <= auto519727D7_ae; auto519727D7_var += 1 ) {
            DataTableSetPoint(true, libARRA_gf_ListGetDatabaseName(lp_list, auto519727D7_var), DataTableGetPoint(true, libARRA_gf_ListGetDatabaseName(lp_list, (auto519727D7_var + 1))));
        }
        libARRA_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_ARRA_7318B37C") + IntToText(lp_index) + StringExternal("Param/Value/lib_ARRA_9A7EA85B") + IntToText(libARRA_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void libARRA_gf_ListPointExclude (string lp_list, point lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_ListCreateIfNotExists(lp_list);
    lv_index = libARRA_gf_ListPointIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        libARRA_gf_ListPointRemoveAt(lp_list, lv_index);
        lv_index = libARRA_gf_ListPointIndexOf(lp_list, lp_value);
    }
}

void libARRA_gf_MapPointSet (string lp_unit, string lp_index, point lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, ("$N" + lp_unit + "_" + lp_index), lp_actor);
    libARRA_gf_ListStringInclude(("$N" + lp_unit), lp_index);
}

point libARRA_gf_MapPointGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, ("$N" + lp_unit + "_" + lp_index));
}

string libARRA_gf_MapPointIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$N" + lp_unit);
}

bool libARRA_gf_MapPointIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_ListStringIncludes(libARRA_gf_MapPointIndexes(lp_unit), lp_index);
}

void libARRA_gf_LOGTask (int lp_task) {
    // Variable Declarations
    string lv_debug;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_debug = (libARRA_gf_StringForTask(lp_task, "Type") + "#" + IntToString(lp_task));

    // Implementation
    libARRA_gf_LOGString(lv_debug);
}

string libARRA_gf_TaskToString (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return (libARRA_gf_StringForTask(lp_task, "Type") + "#" + IntToString(lp_task));
}

void libARRA_gf_SetTriggeringTask (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_task = lp_task;
    libARRA_gv_parent = libARRA_gf_IntegerForTask(libARRA_gv_task, "Parent");
}

void libARRA_gf_CreateTask (string lp_id) {
    // Variable Declarations
    int lv_task;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gv_tasksCreated += 1;
    lv_task = libARRA_gv_tasksCreated;
    libARRA_gf_StoreStringForTask(lv_task, "Type", lp_id);
    libARRA_gf_StoreIntegerForTask(lv_task, "Parent", libARRA_gv_parent);
    libARRA_gf_StoreIntegerForTask(lv_task, "State", libARRA_gv_stateUndiscovered);
    libARRA_gf_SetTriggeringTask(lv_task);
}

void libARRA_gf_TaskFree (int lp_task) {
    // Variable Declarations
    string lv_taskCode;
    string lv_pings;
    string lv_revealers;
    string lv_timers;
    string lv_indexKey;

    // Automatic Variable Declarations
    int auto61A676AF_ai;
    int auto61A676AF_ae;
    int autoE38FC294_ai;
    int autoE38FC294_ae;
    int auto285896C2_ai;
    int auto285896C2_ae;

    // Variable Initialization
    lv_taskCode = ("TASK_" + IntToString(lp_task));
    lv_pings = libARRA_gf_MapPingIndexes(lv_taskCode);
    lv_revealers = libARRA_gf_MapRevealerIndexes(lv_taskCode);
    lv_timers = libARRA_gf_MapTimerIndexes(lv_taskCode);
    lv_indexKey = "";

    // Implementation
    auto61A676AF_ai = 1;
    auto61A676AF_ae = libARRA_gf_ListSize(lv_revealers);
    while (auto61A676AF_ai <= auto61A676AF_ae) {
        lv_indexKey = libARRA_gf_ListStringGet(lv_revealers, auto61A676AF_ai);
        auto61A676AF_ai = auto61A676AF_ai+1;
        VisRevealerDestroy(libARRA_gf_RevealerStoredForTask(lp_task, lv_indexKey));
    }
    autoE38FC294_ai = 1;
    autoE38FC294_ae = libARRA_gf_ListSize(lv_pings);
    while (autoE38FC294_ai <= autoE38FC294_ae) {
        lv_indexKey = libARRA_gf_ListStringGet(lv_pings, autoE38FC294_ai);
        autoE38FC294_ai = autoE38FC294_ai+1;
        PingDestroy(libARRA_gf_PingStoredForTask(lp_task, lv_indexKey));
    }
    libARRA_gf_ListClear(lv_revealers);
    libARRA_gf_ListClear(lv_pings);
    libARRA_gf_ListClear(libARRA_gf_MapIntIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapRealIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapPointIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapRegionIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapStringIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapUnitIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapUnitGroupIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapTriggerIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapTimerIndexes(lv_taskCode));
    auto285896C2_ai = 1;
    auto285896C2_ae = libARRA_gf_ListSize(lv_timers);
    while (auto285896C2_ai <= auto285896C2_ae) {
        lv_indexKey = libARRA_gf_ListStringGet(lv_timers, auto285896C2_ai);
        auto285896C2_ai = auto285896C2_ai+1;
        libNtve_gf_StopTimer(libARRA_gf_TimerStoredForTask(libARRA_gv_task, lv_indexKey));
    }
    libARRA_gf_ListClear(libARRA_gf_MapTextIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapObjectiveIndexes(lv_taskCode));
    libARRA_gf_ListClear(libARRA_gf_MapActorIndexes(lv_taskCode));
}

void libARRA_gf_TaskRun (int lp_task, trigger lp_trigger, bool lp_wait) {
    // Variable Declarations
    int lv_storedTask;
    int lv_storedParent;
    int lv_storedListener;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_storedTask = libARRA_gv_task;
    lv_storedParent = libARRA_gv_parent;
    lv_storedListener = libARRA_gv_listener;

    // Implementation
    if ((libARRA_gf_IntegerForTask(lp_task, "State") != libARRA_gv_stateActive) && (libARRA_gf_IntegerForTask(lp_task, "State") != libARRA_gv_stateUndiscovered)) {
        return ;
    }

    libARRA_gf_SetTriggeringTask(lp_task);
    if ((lp_wait == true)) {
        TriggerExecute(lp_trigger, true, true);
    }
    else {
        TriggerExecute(lp_trigger, true, false);
    }
    libARRA_gv_task = lv_storedTask;
    libARRA_gv_parent = lv_storedParent;
    libARRA_gv_listener = lv_storedListener;
}

void libARRA_gf_TaskIncrementValue (int lp_task, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_StoreIntegerForTask(lp_task, lp_index, (libARRA_gf_IntegerForTask(lp_task, lp_index) + 1));
}

void libARRA_gf_TaskIncreaseValueInt (int lp_task, string lp_index, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_StoreIntegerForTask(lp_task, lp_index, (libARRA_gf_IntegerForTask(lp_task, lp_index) + lp_value));
}

void libARRA_gf_TaskIncreaseValueReal (int lp_task, string lp_index, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_StoreRealForTask(lp_task, lp_index, (libARRA_gf_RealForTask(lp_task, lp_index) + lp_value));
}

string libARRA_gf_TaskType (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_StringForTask(lp_task, "Type");
}

int libARRA_gf_TaskParent (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_IntegerForTask(lp_task, "Parent");
}

int libARRA_gf_TaskTeam (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_IntegerForTask2(libARRA_gv_task, "Team");
}

int libARRA_gf_TaskState (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_IntegerForTask(lp_task, "State");
}

bool libARRA_gf_TaskActive (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    if (((libARRA_gf_IntegerForTask(lp_task, "State") == libARRA_gv_stateUndiscovered) || (libARRA_gf_IntegerForTask(lp_task, "State") == libARRA_gv_stateActive))) {
        return true;
    }
    else {
        return false;
    }
}

void libARRA_gf_TaskStart (int lp_task) {
    // Variable Declarations
    int lv_task;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_task = lp_task;

    // Implementation
    if ((libARRA_gf_IntegerForTask(lv_task, "State") != libARRA_gv_stateUndiscovered)) {
        return ;
    }

    libARRA_gf_StoreIntegerForTask(lv_task, "State", libARRA_gv_stateActive);
    libARRA_gf_TaskEmit(lv_task, "Start", "");
    if ((libARRA_gf_ObjectiveStoredForTask(lv_task, "Objective") != c_invalidObjectiveId)) {
        ObjectiveSetState(libARRA_gf_ObjectiveStoredForTask(lv_task, "Objective"), c_objectiveStateActive);
        ObjectiveSetName(libARRA_gf_ObjectiveStoredForTask(lv_task, "Objective"), libARRA_gf_TaskObjectiveText(lv_task));
        ObjectiveShow(libARRA_gf_ObjectiveStoredForTask(lv_task, "Objective"), libARRA_gf_GetTeamPlayers(libARRA_gf_IntegerForTask2(libARRA_gv_task, "Team")), true);
    }

}

void libARRA_gf_TaskComplete (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    if ((libARRA_gf_IntegerForTask(lp_task, "State") != libARRA_gv_stateActive)) {
        return ;
    }

    libARRA_gf_StoreIntegerForTask(lp_task, "State", libARRA_gv_stateCompleted);
    libARRA_gf_TaskEmit(lp_task, "Complete", "");
    libARRA_gf_TaskRun(lp_task, libARRA_gf_TriggerStoredForTask2(lp_task, "Complete"), true);
    libARRA_gf_TaskEmit(lp_task, "End", "");
    libARRA_gf_TaskRun(lp_task, libARRA_gf_TriggerStoredForTask2(lp_task, "End"), true);
    if ((libARRA_gf_ObjectiveStoredForTask(lp_task, "Objective") != c_invalidObjectiveId)) {
        ObjectiveSetState(libARRA_gf_ObjectiveStoredForTask(lp_task, "Objective"), c_objectiveStateCompleted);
        ObjectiveSetName(libARRA_gf_ObjectiveStoredForTask(lp_task, "Objective"), libARRA_gf_TaskObjectiveText(lp_task));
    }

    Wait(libARRA_gf_RealForTask2(libARRA_gv_task, "ObjectiveDelay"), c_timeReal);
    libARRA_gf_TaskFree(lp_task);
}

void libARRA_gf_TaskFail (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    if ((libARRA_gf_IntegerForTask(lp_task, "State") != libARRA_gv_stateActive)) {
        return ;
    }

    libARRA_gf_StoreIntegerForTask(lp_task, "State", libARRA_gv_stateFailed);
    libARRA_gf_TaskEmit(lp_task, "Fail", "");
    libARRA_gf_TaskRun(lp_task, libARRA_gf_TriggerStoredForTask2(lp_task, "Fail"), true);
    libARRA_gf_TaskEmit(lp_task, "End", "");
    libARRA_gf_TaskRun(lp_task, libARRA_gf_TriggerStoredForTask2(lp_task, "End"), true);
    if ((libARRA_gf_ObjectiveStoredForTask(lp_task, "Objective") != c_invalidObjectiveId)) {
        ObjectiveSetState(libARRA_gf_ObjectiveStoredForTask(lp_task, "Objective"), c_objectiveStateFailed);
        ObjectiveSetName(libARRA_gf_ObjectiveStoredForTask(lp_task, "Objective"), libARRA_gf_TaskObjectiveText(lp_task));
    }

    Wait(libARRA_gf_RealForTask2(libARRA_gv_task, "ObjectiveDelay"), c_timeReal);
    libARRA_gf_TaskFree(lp_task);
}

void libARRA_gf_TaskIncreaseProgress (int lp_task) {
    // Variable Declarations
    int lv_task;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_task = lp_task;

    // Implementation
    libARRA_gf_StoreIntegerForTask(lv_task, "Progress", (libARRA_gf_IntegerForTask(lv_task, "Progress") + 1));
    if ((libARRA_gf_IntegerForTask(lv_task, "Progress") >= libARRA_gf_IntegerForTask(lv_task, "Goal"))) {
        libARRA_gf_TaskComplete(lv_task);
    }
    else {
        libARRA_gf_TaskEmit(lv_task, "Progress", "");
    }
    libARRA_gf_TaskUpdateObjective(lp_task);
}

void libARRA_gf_TaskIncreaseFail (int lp_task) {
    // Variable Declarations
    int lv_task;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_task = lp_task;

    // Implementation
    libARRA_gf_StoreIntegerForTask(lv_task, "Fail", (libARRA_gf_IntegerForTask(lv_task, "Fail") + 1));
    libARRA_gf_TaskUpdateObjective(lp_task);
}

void libARRA_gf_TaskIncreaseGoal (int lp_task) {
    // Variable Declarations
    int lv_task;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_task = lp_task;

    // Implementation
    libARRA_gf_StoreIntegerForTask(lv_task, "Goal", (libARRA_gf_IntegerForTask(lv_task, "Goal") + 1));
    libARRA_gf_TaskUpdateObjective(lp_task);
}

int libARRA_gf_TaskGoal (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_IntegerForTask(lp_task, "Goal");
}

int libARRA_gf_TaskProgress (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_IntegerForTask(lp_task, "Progress");
}

int libARRA_gf_TaskFails (int lp_task) {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gf_IntegerForTask(lp_task, "Fails");
}

void libARRA_gf_TaskUpdateObjective (int lp_task) {
    // Variable Declarations
    int lv_objective;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objective = libARRA_gf_ObjectiveStoredForTask(lp_task, "Objective");

    // Implementation
    if ((lv_objective != c_invalidObjectiveId)) {
        ObjectiveSetName(lv_objective, libARRA_gf_TaskObjectiveText(lp_task));
    }

}

text libARRA_gf_TaskObjectiveText (int lp_objective2) {
    // Variable Declarations
    int lv_objectiveProgress;
    int lv_objectiveGoal;
    text lv_name;
    int lv_objectiveType;
    text lv_bonusText;
    int lv_bonusModifier;
    timer lv_expireTimer;
    fixed lv_timeRemaining;
    text lv_timeRemainingText;
    color lv_timeRemainingColor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_objectiveProgress = libARRA_gf_IntegerForTask(lp_objective2, "Progress");
    lv_objectiveGoal = libARRA_gf_IntegerForTask(lp_objective2, "Goal");
    lv_name = libARRA_gf_TextForTask(lp_objective2, "ObjectiveName");
    lv_objectiveType = libARRA_gf_IntegerForTask(lp_objective2, "ObjectiveType");
    lv_bonusText = StringToText("");
    lv_bonusModifier = UserDataGetInt("GameSettings", "GameValues", "ExperienceBonusObjectiveModifier", 1);
    lv_expireTimer = libARRA_gf_TimerStoredForTask(lp_objective2, "Expire");
    lv_timeRemainingColor = Color(0,0,0);

    // Implementation
    if ((libARRA_gf_IntegerForTask(lp_objective2, "State") == libARRA_gv_stateActive)) {
        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_ARRA_102CA277"), IntToText(lv_objectiveProgress), c_stringReplaceAll, c_stringCase);
        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_ARRA_87B9CACE"), IntToText(lv_objectiveGoal), c_stringReplaceAll, c_stringCase);
        if ((lv_expireTimer != null)) {
            lv_timeRemaining = TimerGetRemaining(lv_expireTimer);
            lv_timeRemainingText = TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(lv_timeRemaining));
            if ((lv_timeRemaining > 60.0)) {
                lv_timeRemainingColor = Color(0.00, 100.00, 25.10);
            }
            else {
                lv_timeRemainingColor = Color(100.00, 100.00, 0.00);
            }
            TextExpressionSetToken("Param/Expression/lib_ARRA_F69BD9A3", "coloredTime", TextWithColor(lv_timeRemainingText, lv_timeRemainingColor));
            lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_ARRA_EB60C632"), TextExpressionAssemble("Param/Expression/lib_ARRA_F69BD9A3"), c_stringReplaceAll, c_stringCase);
        }

    }
    else {
        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_ARRA_CB05D303"), StringExternal("Param/Value/lib_ARRA_2DC31FE4"), c_stringReplaceAll, c_stringCase);
        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_ARRA_1709FAB1"), StringExternal("Param/Value/lib_ARRA_645365C7"), c_stringReplaceAll, c_stringCase);
    }
    if ((libARRA_gf_IntegerForTask(lp_objective2, "State") == libARRA_gv_stateCompleted)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_8D2B47C1", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_ARRA_8D2B47C1");
    }

    if (((lv_bonusText != null) == false) && (lv_objectiveType == 2) && (lv_bonusModifier > 0)) {
        lv_bonusText = StringExternal("Param/Value/lib_ARRA_10E75E2B");
    }

    if (((lv_bonusText != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_21F0E63E", "A", lv_name);
        TextExpressionSetToken("Param/Expression/lib_ARRA_21F0E63E", "B", lv_bonusText);
        lv_name = TextExpressionAssemble("Param/Expression/lib_ARRA_21F0E63E");
    }

    if ((libARRA_gf_IntegerForTask(lp_objective2, "State") == libARRA_gv_stateCompleted)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_142C7EA6", "A", lv_name);
        lv_name = TextExpressionAssemble("Param/Expression/lib_ARRA_142C7EA6");
    }

    return lv_name;
}

void libARRA_gf_TaskObjective (int lp_task, string lp_objective, bool lp_objectiveType) {
    // Variable Declarations
    text lv_name;
    string lv_name3;
    text lv_name2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, lp_objective, "Name", c_playerAny));
    lv_name3 = CatalogFieldValueGet(c_gameCatalogObjective, lp_objective, "Name", c_playerAny);
    lv_name2 = StringExternal(CatalogFieldValueGet(c_gameCatalogObjective, lp_objective, "Description", c_playerAny));

    // Implementation
    if ((StringContains(lv_name3, "(", c_stringAnywhere, c_stringNoCase) == true) && (StringContains(lv_name3, ")", c_stringAnywhere, c_stringNoCase) == true)) {
        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_ARRA_E57CA99A"), StringExternal("Param/Value/lib_ARRA_B0B15CAE"), c_stringReplaceAll, c_stringCase);
        lv_name = TextReplaceWord(lv_name, StringExternal("Param/Value/lib_ARRA_D886738D"), StringExternal("Param/Value/lib_ARRA_6B8830F9"), c_stringReplaceAll, c_stringCase);
    }

    ObjectiveCreate(lv_name, lv_name2, c_objectiveStateHidden, lp_objectiveType);
    libARRA_gf_StoreObjectiveForTask(lp_task, "Objective", ObjectiveLastCreated());
    if ((lp_objectiveType == true)) {
        libARRA_gf_StoreIntegerForTask(lp_task, "ObjectiveType", 1);
    }
    else {
        libARRA_gf_StoreIntegerForTask(lp_task, "ObjectiveType", 2);
    }
    libARRA_gf_StoreTextForTask(lp_task, "ObjectiveName", lv_name);
}

void libARRA_gf_ListernerCreate (int lp_subscriber, int lp_observableType, int lp_observable, string lp_event, trigger lp_trigger) {
    // Variable Declarations
    string lv_eventString;
    string lv_eventType;

    // Automatic Variable Declarations
    int auto706023E7_val;

    // Variable Initialization
    lv_eventString = "";
    lv_eventType = "";

    // Implementation
    auto706023E7_val = lp_observableType;
    if (auto706023E7_val == libARRA_ge_ListenerType_Task) {
        lv_eventType = "#";
    }
    else if (auto706023E7_val == libARRA_ge_ListenerType_Tracker) {
        lv_eventType = "&";
    }
    else {
    }
    lv_eventString = (lv_eventType + IntToString(lp_observable) + "@" + lp_event);
    libARRA_gv_eventListenersCreated += 1;
    DataTableSetInt(true, ("@" + IntToString(libARRA_gv_eventListenersCreated) + "O"), lp_observable);
    DataTableSetInt(true, ("@" + IntToString(libARRA_gv_eventListenersCreated) + "T"), lp_subscriber);
    DataTableSetTrigger(true, ("@" + IntToString(libARRA_gv_eventListenersCreated) + "R"), lp_trigger);
    DataTableSetString(true, ("@" + IntToString(libARRA_gv_eventListenersCreated) + "E"), lp_event);
    DataTableSetString(true, ("@" + IntToString(libARRA_gv_eventListenersCreated) + "Y"), lv_eventType);
    libARRA_gf_ListIntPush(lv_eventString, libARRA_gv_eventListenersCreated);
}

void libARRA_gf_ListenerOff (int lp_listener) {
    // Variable Declarations
    string lv_eventString;
    int lv_listener;
    string lv_event;
    int lv_task;
    int lv_observable;
    string lv_observableType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eventString = "";
    lv_listener = lp_listener;
    lv_event = DataTableGetString(true, ("@" + IntToString(lp_listener) + "E"));
    lv_task = DataTableGetInt(true, ("@" + IntToString(lv_listener) + "T"));
    lv_observable = DataTableGetInt(true, ("@" + IntToString(lv_listener) + "O"));
    lv_observableType = DataTableGetString(true, ("@" + IntToString(lp_listener) + "Y"));

    // Implementation
    lv_eventString = (lv_observableType + IntToString(lv_observable) + "@" + lv_event);
    libARRA_gf_ListIntExclude(lv_eventString, lp_listener);
}

void libARRA_gf_ListenerOn (int lp_listener) {
    // Variable Declarations
    string lv_eventString;
    int lv_listener;
    string lv_event;
    int lv_task;
    int lv_observable;
    string lv_observableType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_eventString = "";
    lv_listener = lp_listener;
    lv_event = DataTableGetString(true, ("@" + IntToString(lp_listener) + "E"));
    lv_task = DataTableGetInt(true, ("@" + IntToString(lp_listener) + "T"));
    lv_observable = DataTableGetInt(true, ("@" + IntToString(lp_listener) + "O"));
    lv_observableType = DataTableGetString(true, ("@" + IntToString(lp_listener) + "Y"));

    // Implementation
    lv_eventString = (lv_observableType + IntToString(lv_observable) + "@" + lv_event);
    libARRA_gf_ListIntInclude(lv_eventString, lp_listener);
}

string libARRA_gf_EventListenerstoString (string lp_eventString) {
    // Variable Declarations
    string lv_eventString;
    int lv_listeners;
    trigger lv_trigger;
    int lv_listenerID;
    int lv_task;
    string lv_debug;
    string lv_func;

    // Automatic Variable Declarations
    int auto889FCAF3_ai;
    int auto889FCAF3_ae;

    // Variable Initialization
    lv_eventString = lp_eventString;
    lv_listeners = DataTableGetInt(true, lv_eventString);
    lv_func = "";

    // Implementation
    if ((libARRA_gf_ListIsEmpty(lv_eventString) == true)) {
        lv_debug = (lv_debug + ("-"));
    }
    else {
        auto889FCAF3_ai = 1;
        auto889FCAF3_ae = libARRA_gf_ListSize(lv_eventString);
        while (auto889FCAF3_ai <= auto889FCAF3_ae) {
            lv_listenerID = libARRA_gf_ListIntGet(lv_eventString, auto889FCAF3_ai);
            auto889FCAF3_ai = auto889FCAF3_ai+1;
            lv_task = DataTableGetInt(true, ("@" + IntToString(lv_listenerID) + "T"));
            lv_trigger = DataTableGetTrigger(true, ("@" + IntToString(lv_listenerID) + "R"));
            lv_func = TriggerGetFunction(lv_trigger);
            lv_func = StringReplaceWord(lv_func, "gt_", "", 1, c_stringCase);
            lv_func = StringReplaceWord(lv_func, "_Func", "", 1, c_stringCase);
            lv_debug = (lv_debug + (" " + libARRA_gf_StringForTask(lv_task, "Type") + "#" + IntToString(lv_listenerID) + "." + lv_func + " "));
        }
    }
    return lv_debug;
}

string libARRA_gf_GetMessageParameter (string lp_index) {
    // Variable Declarations
    int lv_word;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_word = 1;

    // Implementation
    while ((StringWord(libARRA_gv_emittedMessage, lv_word) != null)) {
        if ((StringWord(libARRA_gv_emittedMessage, lv_word) == lp_index) && (StringWord(libARRA_gv_emittedMessage, (lv_word + 1)) != null)) {
            return StringWord(libARRA_gv_emittedMessage, (lv_word + 1));
        }

        lv_word += 2;
    }
    return null;
}

void libARRA_gf_TrackerEmit (int lp_tracker, string lp_event, string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_emittedTracker = lp_tracker;
    libARRA_gf_Emit(lp_tracker, libARRA_ge_ListenerType_Tracker, lp_event, lp_message);
}

void libARRA_gf_TaskEmit (int lp_task, string lp_event, string lp_message) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_emittedTask = lp_task;
    libARRA_gf_Emit(lp_task, libARRA_ge_ListenerType_Task, lp_event, lp_message);
}

void libARRA_gf_Emit (int lp_task, int lp_type, string lp_event, string lp_message) {
    // Variable Declarations
    string lv_eventString;
    int lv_listeners;
    trigger lv_trigger;
    int lv_listener;
    int lv_eventTask;
    string lv_eventType;
    string lv_instanceName;
    int lv_storedListener;

    // Automatic Variable Declarations
    int autoD9970212_val;
    int auto78C6E46C_ai;
    int auto78C6E46C_ae;

    // Variable Initialization
    lv_eventString = "";
    lv_listeners = DataTableGetInt(true, lv_eventString);
    lv_trigger = libARRA_gf_MapTriggerGet("@", IntToString(lv_listener));
    lv_eventType = "";
    lv_instanceName = "";
    lv_storedListener = libARRA_gv_listener;

    // Implementation
    autoD9970212_val = lp_type;
    if (autoD9970212_val == libARRA_ge_ListenerType_Task) {
        lv_eventType = "#";
        lv_instanceName = libARRA_gf_StringForTask(lp_task, "Type");
    }
    else if (autoD9970212_val == libARRA_ge_ListenerType_Tracker) {
        lv_eventType = "&";
        lv_instanceName = DataTableGetString(true, ("&" + IntToString(lp_task) + "ID"));
    }
    else {
    }
    lv_eventString = (lv_eventType + IntToString(lp_task) + "@" + lp_event);
    if ((libARRA_gf_ListIsEmpty(lv_eventString) == true)) {
        return ;
    }

    auto78C6E46C_ai = 1;
    auto78C6E46C_ae = libARRA_gf_ListSize(lv_eventString);
    while (auto78C6E46C_ai <= auto78C6E46C_ae) {
        lv_listener = libARRA_gf_ListIntGet(lv_eventString, auto78C6E46C_ai);
        auto78C6E46C_ai = auto78C6E46C_ai+1;
        libARRA_gv_listener = lv_listener;
        libARRA_gv_emittedEvent = lp_event;
        libARRA_gv_emittedMessage = lp_message;
        lv_eventTask = DataTableGetInt(true, ("@" + IntToString(lv_listener) + "T"));
        lv_trigger = DataTableGetTrigger(true, ("@" + IntToString(lv_listener) + "R"));
        libARRA_gf_TaskRun(lv_eventTask, lv_trigger, false);
    }
    libARRA_gv_listener = lv_storedListener;
}

void libARRA_gf_TaskOnTask (int lp_thisTask, int lp_observableTask, string lp_event, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListernerCreate(lp_thisTask, libARRA_ge_ListenerType_Task, lp_observableTask, lp_event, lp_trigger);
}

void libARRA_gf_TaskOnTracker (int lp_thisTask, int lp_observableTracker, string lp_event, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListernerCreate(lp_thisTask, libARRA_ge_ListenerType_Tracker, lp_observableTracker, lp_event, lp_trigger);
}

void libARRA_gf_TaskOn (int lp_thisTask, string lp_event, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListernerCreate(lp_thisTask, libARRA_ge_ListenerType_Task, lp_thisTask, lp_event, lp_trigger);
}

void libARRA_gf_RunMissionVictorySequence4 (int lp_task, fixed lp_period, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_periodicEventsCreated += 1;
    libARRA_gf_ListIntPush(libARRA_gv_pERIODICEVENTS, libARRA_gv_periodicEventsCreated);
    DataTableSetFixed(true, ("PERIODIC_EVENT_PERIOD_" + IntToString(libARRA_gv_periodicEventsCreated)), lp_period);
    libARRA_gv_pickedPrecision = lp_period;
    libARRA_gv_pickedPeridocEventTrigger = lp_trigger;
    libARRA_gf_TaskRun(lp_task, libARRA_gt_CreatePeridocEvent, false);
}

void libARRA_gf_RunMissionVictorySequence5 (int lp_periodic) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_ListIntExclude(libARRA_gv_pERIODICEVENTS, lp_periodic);
    DataTableSetFixed(true, ("PERIODIC_EVENT_PERIOD_" + IntToString(lp_periodic)), 0.0);
}

int libARRA_gf_TriggeringPeriodic () {
    // Automatic Variable Declarations
    // Implementation
    return libARRA_gv_triggeringPeriodicEvent;
}

void libARRA_gf_RunMissionVictorySequence6 (int lp_task, fixed lp_delay, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gv_taskTimeoutDelay = lp_delay;
    libARRA_gv_taskTimeoutTrigger = lp_trigger;
    libARRA_gf_TaskRun(lp_task, libARRA_gt_TaskTimeoutTrigger, false);
}

trigger auto_libARRA_gf_RunMissionVictorySequence7_Trigger = null;
int auto_libARRA_gf_RunMissionVictorySequence7_lp_task;
fixed auto_libARRA_gf_RunMissionVictorySequence7_lp_delay;
trigger auto_libARRA_gf_RunMissionVictorySequence7_lp_completeTrigger;

void libARRA_gf_RunMissionVictorySequence7 (int lp_task, fixed lp_delay, trigger lp_completeTrigger) {
    auto_libARRA_gf_RunMissionVictorySequence7_lp_task = lp_task;
    auto_libARRA_gf_RunMissionVictorySequence7_lp_delay = lp_delay;
    auto_libARRA_gf_RunMissionVictorySequence7_lp_completeTrigger = lp_completeTrigger;

    if (auto_libARRA_gf_RunMissionVictorySequence7_Trigger == null) {
        auto_libARRA_gf_RunMissionVictorySequence7_Trigger = TriggerCreate("auto_libARRA_gf_RunMissionVictorySequence7_TriggerFunc");
    }

    TriggerExecute(auto_libARRA_gf_RunMissionVictorySequence7_Trigger, false, false);
}

bool auto_libARRA_gf_RunMissionVictorySequence7_TriggerFunc (bool testConds, bool runActions) {
    int lp_task = auto_libARRA_gf_RunMissionVictorySequence7_lp_task;
    fixed lp_delay = auto_libARRA_gf_RunMissionVictorySequence7_lp_delay;
    trigger lp_completeTrigger = auto_libARRA_gf_RunMissionVictorySequence7_lp_completeTrigger;

    // Variable Declarations
    int lv_task;

    // Automatic Variable Declarations
    int auto0005B87D_saved_task;
    int auto0005B87D_saved_parent;
    int auto0005B87D_saved_listener;

    // Variable Initialization
    lv_task = lp_task;

    // Implementation
    libARRA_gf_TaskTimer(lv_task, "Expire", lp_delay, lp_completeTrigger);
    TimerPause(libARRA_gf_TimerStoredForTask(lv_task, "Expire"), true);
    libARRA_gf_RunMissionVictorySequence4(lv_task, 1.0, libARRA_gt_UpdateObjective);
    auto0005B87D_saved_task   = libARRA_gv_task;
    auto0005B87D_saved_parent = libARRA_gv_parent;
    auto0005B87D_saved_listener = libARRA_gv_listener;
    Wait(6.0, c_timeReal ); //Async
    libARRA_gv_task   = auto0005B87D_saved_task;
    libARRA_gv_parent = auto0005B87D_saved_parent;
    libARRA_gv_listener = auto0005B87D_saved_listener;
    if(libARRA_gf_TaskActive(lv_task) == false){return true;}
    TimerPause(libARRA_gf_TimerStoredForTask(lv_task, "Expire"), false);
    return true;
}

void libARRA_gf_TaskTimer (int lp_task, string lp_index, fixed lp_delay, trigger lp_trigger) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    TimerStart(lv_timer, lp_delay, false, c_timeReal);
    libARRA_gv_timerTrackersCreated += 1;
    libARRA_gf_ListIntPush(libARRA_gv_tIMERTRACKERSLIST, libARRA_gv_timerTrackersCreated);
    DataTableSetInt(true, ("TIMER_TASK_" + IntToString(libARRA_gv_timerTrackersCreated)), lp_task);
    DataTableSetTrigger(true, ("TIMER_TRIGGER_" + IntToString(libARRA_gv_timerTrackersCreated)), lp_trigger);
    DataTableSetTimer(true, ("TIMER_" + IntToString(libARRA_gv_timerTrackersCreated)), lv_timer);
    libARRA_gf_StoreObjectiveForTask2(libARRA_gv_task, lp_index, TimerLastStarted());
}

void libARRA_gf_TrackerCreateUnit (unit lp_unit, string lp_id) {
    // Variable Declarations
    int lv_tracker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gf_TrackerCreate(libNtve_gf_ConvertUnitToUnitGroup(lp_unit), lp_id);
}

void libARRA_gf_TrackerCreate (unitgroup lp_units, string lp_id) {
    // Variable Declarations
    int lv_tracker;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libARRA_gv_unitTrackersCreated += 1;
    lv_tracker = libARRA_gv_unitTrackersCreated;
    libARRA_gf_ListIntPush(libARRA_gv_tRACKERS, lv_tracker);
    DataTableSetUnitGroup(true, ("&" + IntToString(lv_tracker)), lp_units);
    DataTableSetString(true, ("&" + IntToString(lv_tracker) + "ID"), lp_id);
    libARRA_gv_tracker = lv_tracker;
}

void libARRA_gf_TaskEmergency (int lp_task, region lp_region, trigger lp_trigger) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_StoreRegionForTask(lp_task, "EmergencyStartRegion", lp_region);
    libARRA_gf_StoreTriggerForTask(lp_task, "EmergencyStartTrigger", lp_trigger);
    libARRA_gf_RunMissionVictorySequence4(lp_task, 0.125, libARRA_gt_CheckEmergencyStartRegion);
}

string libARRA_gf_StringForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapStringGet(lv_map, lp_index);
}

fixed libARRA_gf_RealForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapRealGet(lv_map, lp_index);
}

int libARRA_gf_IntegerForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapIntGet(lv_map, lp_index);
}

region libARRA_gf_RegionForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapRegionGet(lv_map, lp_index);
}

text libARRA_gf_TextForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapTextGet(lv_map, lp_index);
}

unit libARRA_gf_UnitForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapUnitGet(lv_map, lp_index);
}

actor libARRA_gf_ActorForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapActorGet(lv_map, lp_index);
}

point libARRA_gf_PointStoredForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapPointGet(lv_map, lp_index);
}

int libARRA_gf_PingStoredForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapPingGet(lv_map, lp_index);
}

revealer libARRA_gf_RevealerStoredForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapRevealerGet(lv_map, lp_index);
}

unitgroup libARRA_gf_UnitGroupStoredForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapUnitGroupGet(lv_map, lp_index);
}

trigger libARRA_gf_TriggerStoredForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapTriggerGet(lv_map, lp_index);
}

int libARRA_gf_ObjectiveStoredForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapObjectiveGet(lv_map, lp_index);
}

timer libARRA_gf_TimerStoredForTask (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    return libARRA_gf_MapTimerGet(lv_map, lp_index);
}

string libARRA_gf_StringForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapStringIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_StringForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapStringGet(lv_map, lp_index);
    }
}

fixed libARRA_gf_RealForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapRealIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_RealForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapRealGet(lv_map, lp_index);
    }
}

int libARRA_gf_IntegerForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapIntIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_IntegerForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapIntGet(lv_map, lp_index);
    }
}

region libARRA_gf_RegionForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapRegionIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_RegionForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapRegionGet(lv_map, lp_index);
    }
}

text libARRA_gf_TextForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapTextIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_TextForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapTextGet(lv_map, lp_index);
    }
}

unit libARRA_gf_UnitForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapUnitIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_UnitForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapUnitGet(lv_map, lp_index);
    }
}

actor libARRA_gf_ActorForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapActorIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_ActorForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapActorGet(lv_map, lp_index);
    }
}

point libARRA_gf_PointStoredForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapPointIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_PointStoredForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapPointGet(lv_map, lp_index);
    }
}

int libARRA_gf_PingStoredForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapPingIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_PingStoredForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapPingGet(lv_map, lp_index);
    }
}

revealer libARRA_gf_RevealerStoredForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapRevealerIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_RevealerStoredForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapRevealerGet(lv_map, lp_index);
    }
}

unitgroup libARRA_gf_UnitGroupStoredForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapUnitGroupIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_UnitGroupStoredForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapUnitGroupGet(lv_map, lp_index);
    }
}

trigger libARRA_gf_TriggerStoredForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapTriggerIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_TriggerStoredForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapTriggerGet(lv_map, lp_index);
    }
}

int libARRA_gf_ObjectiveStoredForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapObjectiveIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_ObjectiveStoredForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapObjectiveGet(lv_map, lp_index);
    }
}

timer libARRA_gf_TimerStoredForTask2 (int lp_unit, string lp_index) {
    // Variable Declarations
    string lv_map;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_map = ("TASK_" + IntToString(lp_unit));

    // Implementation
    if ((libARRA_gf_MapTimerIncludes(lv_map, lp_index) == false) && (libARRA_gf_IntegerForTask(lp_unit, "Parent") != 0)) {
        return libARRA_gf_TimerStoredForTask2(libARRA_gf_IntegerForTask(lp_unit, "Parent"), lp_index);
    }
    else {
        return libARRA_gf_MapTimerGet(lv_map, lp_index);
    }
}

void libARRA_gf_StoreStringForTask (int lp_unit, string lp_index, string lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapStringSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_actor);
}

void libARRA_gf_StoreRealForTask (int lp_unit, string lp_index, fixed lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapRealSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_actor);
}

void libARRA_gf_StoreIntegerForTask (int lp_unit, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapIntSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_actor);
}

void libARRA_gf_StoreRegionForTask (int lp_unit, string lp_index, region lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapRegionSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_actor);
}

void libARRA_gf_StoreTextForTask (int lp_unit, string lp_index, text lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapTextSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_actor);
}

void libARRA_gf_StoreUnitForTask (int lp_task, string lp_index, unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapUnitSet(("TASK_" + IntToString(lp_task)), lp_index, lp_unit);
}

void libARRA_gf_StoreActorForTask (int lp_unit, string lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapActorSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_actor);
}

void libARRA_gf_StorePointForTask (int lp_unit, string lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapPointSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_point);
}

void libARRA_gf_StorePingForTask (int lp_unit, string lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapPingSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_ping);
}

void libARRA_gf_StoreRevealerForTask (int lp_unit, string lp_index, revealer lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapRevealerSet(("TASK_" + IntToString(lp_unit)), lp_index, lp_ping);
}

void libARRA_gf_StoreUnitGroupForTask (int lp_task, string lp_index, unitgroup lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapUnitGroupSet(("TASK_" + IntToString(lp_task)), lp_index, lp_actor);
}

void libARRA_gf_StoreTriggerForTask (int lp_task, string lp_index, trigger lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapTriggerSet(("TASK_" + IntToString(lp_task)), lp_index, lp_actor);
}

void libARRA_gf_StoreObjectiveForTask (int lp_task, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapObjectiveSet(("TASK_" + IntToString(lp_task)), lp_index, lp_actor);
}

void libARRA_gf_StoreObjectiveForTask2 (int lp_task, string lp_index, timer lp_timer) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_MapTimerSet(("TASK_" + IntToString(lp_task)), lp_index, lp_timer);
}

void libARRA_gf_LOGPoint (point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == null)) {
        libARRA_gf_LOGString("-");
    }
    else {
        libARRA_gf_LOGString(libNtve_gf_ConvertPointToString(lp_value));
    }
}

void libARRA_gf_LOGString (string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(4, StringToText(lp_value), true);
    libARRA_gv_lOG = (libARRA_gv_lOG + " " + lp_value);
}

void libARRA_gf_LOGAbilCmd (abilcmd lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_LOGString(((AbilityCommandGetAbility(lp_lOG)) + "," + IntToString(AbilityCommandGetCommand(lp_lOG))));
}

void libARRA_gf_LOGInteger (int lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_LOGString(IntToString(lp_lOG));
}

void libARRA_gf_LOGUpgrade (string lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_LOGString((lp_lOG));
}

void libARRA_gf_LOGUnit (string lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_LOGString((lp_lOG));
}

void libARRA_gf_LOGUnitGroup (unitgroup lp_lOG) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    unitgroup autoA0D75262_g;
    int autoA0D75262_u;
    unit autoA0D75262_var;

    // Variable Initialization
    lv_string = "[";

    // Implementation
    if ((lp_lOG == null)) {
        libARRA_gf_LOGString("-");
    }
    else {
        autoA0D75262_g = lp_lOG;
        autoA0D75262_u = UnitGroupCount(autoA0D75262_g, c_unitCountAll);
        for (;; autoA0D75262_u -= 1) {
            autoA0D75262_var = UnitGroupUnitFromEnd(autoA0D75262_g, autoA0D75262_u);
            if (autoA0D75262_var == null) { break; }
            lv_string = (lv_string + " " + (UnitGetType(autoA0D75262_var)));
        }
        lv_string = (lv_string + "]");
        libARRA_gf_LOGString(lv_string);
    }
}

void libARRA_gf_LOGReal (fixed lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_LOGString(FixedToString(lp_lOG, c_fixedPrecisionAny));
}

void libARRA_gf_LOGTrigger (trigger lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    libARRA_gf_LOGString(TriggerGetFunction(lp_lOG));
}

void libARRA_gf_LOGListInt (string lp_list) {
    // Variable Declarations
    string lv_log_string;

    // Automatic Variable Declarations
    int auto575E083B_ae;
    int auto575E083B_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        libARRA_gf_LOGString("-");
    }
    else {
        auto575E083B_ae = libARRA_gf_ListSize(lp_list);
        auto575E083B_var = 1;
        for ( ; auto575E083B_var <= auto575E083B_ae; auto575E083B_var += 1 ) {
            if ((auto575E083B_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_log_string = (lv_log_string + IntToString(libARRA_gf_ListIntGet(lp_list, auto575E083B_var)));
        }
        lv_log_string = (lv_log_string + "]");
        libARRA_gf_LOGString(lv_log_string);
    }
}

void libARRA_gf_LOGListString (string lp_list) {
    // Variable Declarations
    string lv_log_string;

    // Automatic Variable Declarations
    int auto63FC1DFA_ae;
    int auto63FC1DFA_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((lp_list == null) && (DataTableValueExists(true, lp_list) == false)) {
        libARRA_gf_LOGString("-");
    }
    else {
        auto63FC1DFA_ae = libARRA_gf_ListSize(lp_list);
        auto63FC1DFA_var = 1;
        for ( ; auto63FC1DFA_var <= auto63FC1DFA_ae; auto63FC1DFA_var += 1 ) {
            if ((auto63FC1DFA_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_log_string = (lv_log_string + libARRA_gf_ListStringGet(lp_list, auto63FC1DFA_var));
        }
        lv_log_string = (lv_log_string + "]");
        libARRA_gf_LOGString(lv_log_string);
    }
}

void libARRA_gf_LOGListAbilCmd (string lp_list) {
    // Variable Declarations
    abilcmd lv_abil;
    string lv_log_string;

    // Automatic Variable Declarations
    int auto66736740_ae;
    int auto66736740_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        libARRA_gf_LOGString("-");
    }
    else {
        auto66736740_ae = libARRA_gf_ListSize(lp_list);
        auto66736740_var = 1;
        for ( ; auto66736740_var <= auto66736740_ae; auto66736740_var += 1 ) {
            if ((auto66736740_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_abil = libARRA_gf_ListAbilCmdGet(lp_list, auto66736740_var);
            lv_log_string = (lv_log_string + ((AbilityCommandGetAbility(lv_abil)) + "," + IntToString(AbilityCommandGetCommand(lv_abil))));
        }
        lv_log_string = (lv_log_string + "]");
        libARRA_gf_LOGString(lv_log_string);
    }
}

void libARRA_gf_LOGListPoint (string lp_list) {
    // Variable Declarations
    point lv_point;
    string lv_log_string;

    // Automatic Variable Declarations
    int auto8B6885D3_ae;
    int auto8B6885D3_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        libARRA_gf_LOGString("-");
    }
    else {
        auto8B6885D3_ae = libARRA_gf_ListSize(lp_list);
        auto8B6885D3_var = 1;
        for ( ; auto8B6885D3_var <= auto8B6885D3_ae; auto8B6885D3_var += 1 ) {
            if ((auto8B6885D3_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_point = libARRA_gf_ListPointGet(lp_list, auto8B6885D3_var);
            lv_log_string = (lv_log_string + libNtve_gf_ConvertPointToString(lv_point));
        }
        lv_log_string = (lv_log_string + "]");
        libARRA_gf_LOGString(lv_log_string);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: PingUsed
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_PingUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pingUnit;
    int lv_pingType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libARRA_gv_pingValidPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = (EventPingOption());
    if ((lv_pingType != 4)) {
        libARRA_gf_PingPlay(lv_pingType, EventPlayer(), EventPingPoint(), EventGameUser(), EventPingUnitType(), EventPingUnitPosition(), EventPingUnitControlPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_PingUsed_Init () {
    libARRA_gt_PingUsed = TriggerCreate("libARRA_gt_PingUsed_Func");
    TriggerEnable(libARRA_gt_PingUsed, false);
    TriggerAddEventPing(libARRA_gt_PingUsed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingResetTimerExprires
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_PingResetTimerExprires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timerIndex;

    // Automatic Variable Declarations
    const int autoF3AEAB35_ae = 16;
    const int autoF3AEAB35_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timerIndex = 1;
    for ( ; ( (autoF3AEAB35_ai >= 0 && lv_timerIndex <= autoF3AEAB35_ae) || (autoF3AEAB35_ai < 0 && lv_timerIndex >= autoF3AEAB35_ae) ) ; lv_timerIndex += autoF3AEAB35_ai ) {
        if ((EventTimer() == libARRA_gv_pingResetTimer[lv_timerIndex])) {
            libARRA_gv_pingRecentCount[lv_timerIndex] = 0;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_PingResetTimerExprires_Init () {
    libARRA_gt_PingResetTimerExprires = TriggerCreate("libARRA_gt_PingResetTimerExprires_Func");
    TriggerAddEventTimer(libARRA_gt_PingResetTimerExprires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingPanelAutoDisable
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_PingPanelAutoDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(libARRA_gv_pingValidPlayers) == 0)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_PingPanelAutoDisable_Init () {
    libARRA_gt_PingPanelAutoDisable = TriggerCreate("libARRA_gt_PingPanelAutoDisable_Func");
    TriggerAddEventMapInit(libARRA_gt_PingPanelAutoDisable);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MeleeSurrender_Surrender
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_MeleeSurrender_Surrender_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    bool lv_meleeAIUsed;

    // Automatic Variable Declarations
    playergroup auto5456B628_g;
    playergroup auto2E5F38D0_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto5456B628_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto5456B628_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeComputer) && (AIIsCampaign(lv_player) == false)) {
            lv_meleeAIUsed = true;
            break;
        }

    }
    if ((lv_meleeAIUsed == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    auto2E5F38D0_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto2E5F38D0_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeComputer) && (AIIsCampaign(lv_player) == false)) {
            if ((AIGivingUp(lv_player) == true) && (PlayerGroupHasPlayer(libARRA_gv_meleeSurrender_PlayersSurrendering, lv_player) == false) && (PlayerGroupHasPlayer(libARRA_gv_meleeSurrender_PlayersTried, lv_player) == false)) {
                libARRA_gf_MeleeSurrender_AIWantToSurrender(lv_player);
            }

        }

        if ((PlayerGroupHasPlayer(libARRA_gv_meleeSurrender_PlayersSurrendering, lv_player) == true) && ((PlayerStatus(lv_player) != c_playerStatusActive) || (AIGivingUp(lv_player) == false))) {
            PlayerGroupRemove(libARRA_gv_meleeSurrender_PlayersSurrendering, lv_player);
            DialogDestroy(libARRA_gv_meleeSurrender_Dialog[lv_player]);
            libARRA_gv_meleeSurrender_Dialog[lv_player] = c_invalidDialogId;
            libARRA_gf_MeleeSurrender_UpdateDialogs();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_MeleeSurrender_Surrender_Init () {
    libARRA_gt_MeleeSurrender_Surrender = TriggerCreate("libARRA_gt_MeleeSurrender_Surrender_Func");
    TriggerAddEventTimePeriodic(libARRA_gt_MeleeSurrender_Surrender, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MeleeSurrender_SurrenderClickedButton
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_MeleeSurrender_SurrenderClickedButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto99E9B643_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto99E9B643_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto99E9B643_g, lv_player);
        if (lv_player < 0) { break; }
        if ((libARRA_gv_meleeSurrender_BtnYes[lv_player] == EventDialogControl())) {
            PlayerGroupRemove(libARRA_gv_meleeSurrender_PlayersSurrendering, lv_player);
            PlayerGroupAdd(libARRA_gv_meleeSurrender_PlayersTried, lv_player);
            DialogDestroy(libARRA_gv_meleeSurrender_Dialog[lv_player]);
            libARRA_gv_meleeSurrender_Dialog[lv_player] = c_invalidDialogId;
            TextExpressionSetToken("Param/Expression/lib_ARRA_363E18C6", "A", PlayerName(lv_player));
            TextExpressionSetToken("Param/Expression/lib_ARRA_363E18C6", "B", PlayerName(EventPlayer()));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_ARRA_363E18C6"));
            libARRA_gf_MeleeSurrender_UpdateDialogs();
            AIGoodGame(lv_player);
        }
        else {
            if ((libARRA_gv_meleeSurrender_BtnNo[lv_player] == EventDialogControl())) {
                PlayerGroupAdd(libARRA_gv_meleeSurrender_PlayersAnswered[EventPlayer()], lv_player);
                libARRA_gf_MeleeSurrender_UpdateDialogs();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_MeleeSurrender_SurrenderClickedButton_Init () {
    libARRA_gt_MeleeSurrender_SurrenderClickedButton = TriggerCreate("libARRA_gt_MeleeSurrender_SurrenderClickedButton_Func");
    TriggerAddEventDialogControl(libARRA_gt_MeleeSurrender_SurrenderClickedButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MeleeSurrender_FlashDialog
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_MeleeSurrender_FlashDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoF5B5AE38_n = 5;
    int autoF5B5AE38_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libARRA_gv_meleeSurrender_FlashingPlayer;
    for (autoF5B5AE38_i = 1; autoF5B5AE38_i <= autoF5B5AE38_n; autoF5B5AE38_i += 1) {
        if ((PlayerGroupHasPlayer(libARRA_gv_meleeSurrender_PlayersSurrendering, lv_player) == false)) {
            return true;
        }

        Wait(0.6, c_timeReal);
        if ((PlayerGroupHasPlayer(libARRA_gv_meleeSurrender_PlayersSurrendering, lv_player) == false)) {
            return true;
        }

        Wait(0.6, c_timeReal);
    }
    if ((PlayerGroupHasPlayer(libARRA_gv_meleeSurrender_PlayersSurrendering, lv_player) == true)) {
        libNtve_gf_SetDialogItemStyle(libARRA_gv_meleeSurrender_Title[lv_player], "AISurrenderTitle", PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_MeleeSurrender_FlashDialog_Init () {
    libARRA_gt_MeleeSurrender_FlashDialog = TriggerCreate("libARRA_gt_MeleeSurrender_FlashDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Events
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_StarCraftEvents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;
    datetime lv_itStart;
    datetime lv_itEnd;
    string lv_itDisabler;
    string lv_itSkin;
    string lv_itUpgrade;
    string lv_itMessage;
    unitfilter lv_itMessageFilter;
    datetime lv_curDateTime;
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    string auto6618BB6F_userType;
    int auto6618BB6F_i;
    playergroup auto2CA80E5A_g;
    playergroup auto8F95D9FB_g;
    unitgroup autoB638CFBA_g;
    int autoB638CFBA_u;

    // Variable Initialization
    lv_itMessageFilter = UnitFilter(0, 0, 0, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameMapIsBlizzard() == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    lv_curDateTime = CurrentDateTimeGet();
    auto6618BB6F_userType = libARRA_gv_starCraftEventsEventTable;
    auto6618BB6F_i = 1;
    for ( ; auto6618BB6F_i <= UserDataInstanceCount(auto6618BB6F_userType) ; auto6618BB6F_i += 1 ) {
        lv_itInstance = UserDataInstance(auto6618BB6F_userType, auto6618BB6F_i);
        lv_itStart = StringToDateTime(UserDataGetString(libARRA_gv_starCraftEventsEventTable, lv_itInstance, "Start", 1));
        lv_itEnd = StringToDateTime(UserDataGetString(libARRA_gv_starCraftEventsEventTable, lv_itInstance, "End", 1));
        lv_itDisabler = UserDataGetGameLink("SCEvent_Events", lv_itInstance, "Disabler", 1);
        lv_itSkin = UserDataGetGameLink("SCEvent_Events", lv_itInstance, "Skin", 1);
        lv_itUpgrade = UserDataGetGameLink(libARRA_gv_starCraftEventsEventTable, lv_itInstance, "Upgrade", 1);
        lv_itMessage = (UserDataGetString(libARRA_gv_starCraftEventsEventTable, lv_itInstance, "Message", 1));
        lv_itMessageFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(UserDataGetString(libARRA_gv_starCraftEventsEventTable, lv_itInstance, "MessageFilter", 1));
        if (((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_itDisabler) == true) || (libNtve_gf_DateTimeisBetween(lv_curDateTime, lv_itStart, lv_itEnd) == false))) {
            continue;
        }

        if ((CatalogEntryIsValid(c_gameCatalogSkin, lv_itSkin) == true)) {
            auto2CA80E5A_g = PlayerGroupActive();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto2CA80E5A_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                PlayerApplySkin(lv_itPlayer, lv_itSkin, true);
            }
        }

        if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_itUpgrade) == true)) {
            auto8F95D9FB_g = PlayerGroupActive();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto8F95D9FB_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                TechTreeUpgradeAddLevel(lv_itPlayer, lv_itUpgrade, 1);
            }
        }

        autoB638CFBA_g = UnitGroup(null, c_playerAny, RegionEntireMap(), lv_itMessageFilter, 0);
        autoB638CFBA_u = UnitGroupCount(autoB638CFBA_g, c_unitCountAll);
        for (;; autoB638CFBA_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoB638CFBA_g, autoB638CFBA_u);
            if (lv_itUnit == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(lv_itUnit), lv_itMessage);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_StarCraftEvents_Init () {
    libARRA_gt_StarCraftEvents = TriggerCreate("libARRA_gt_StarCraftEvents_Func");
    TriggerAddEventMapInit(libARRA_gt_StarCraftEvents);
    TriggerAddEventCheatUsed(libARRA_gt_StarCraftEvents, c_playerAny, c_gameCheatDateTime);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transport Controller
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TransportController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transportUnit;
    point lv_transportTargetPoint;
    point lv_transportDespawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_transportUnit = libARRA_gv_transportUnit_Param;
    lv_transportTargetPoint = libARRA_gf_ValidatedPoint(libARRA_gv_transportTargetPoint_Param);
    lv_transportDespawnPoint = libARRA_gf_ValidatedPoint(libARRA_gv_transportDespawnPoint_Param);
    if ((UnitCargoValue(lv_transportUnit, c_unitCargoSpaceTotal) == 0)) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_transportUnit) == false)) {
            return true;
        }

        if ((UnitCargoValue(lv_transportUnit, c_unitCargoUnitCount) > 0)) {
            UnitIssueOrder(lv_transportUnit, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_transportTargetPoint), c_orderQueueReplace);
        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_transportDespawnPoint, 1.0), UnitGetPosition(lv_transportUnit)) == true)) {
                UnitRemove(lv_transportUnit);
                return true;
            }
            else {
                UnitIssueOrder(lv_transportUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_transportDespawnPoint), c_orderQueueReplace);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TransportController_Init () {
    libARRA_gt_TransportController = TriggerCreate("libARRA_gt_TransportController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-Reveal Region Controller
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_AutoRevealRegionController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoC5377A17_ae;
    const int autoC5377A17_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        autoC5377A17_ae = (libARRA_gv_autoRevealers.lv_count - 1);
        lv_i = 0;
        for ( ; ( (autoC5377A17_ai >= 0 && lv_i <= autoC5377A17_ae) || (autoC5377A17_ai < 0 && lv_i >= autoC5377A17_ae) ) ; lv_i += autoC5377A17_ai ) {
            if ((UnitGroupCount(UnitGroup(null, libARRA_gv_autoRevealers.lv_triggeringPlayers[lv_i], libARRA_gv_autoRevealers.lv_triggeringRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                VisRevealerEnable(libARRA_gv_autoRevealers.lv_revealers[lv_i], true);
            }
            else {
                VisRevealerEnable(libARRA_gv_autoRevealers.lv_revealers[lv_i], false);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_AutoRevealRegionController_Init () {
    libARRA_gt_AutoRevealRegionController = TriggerCreate("libARRA_gt_AutoRevealRegionController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoSave
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_InfoSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "General commands");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-info");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides available commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pai");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses AI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cdr");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes cooldowns");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-fastbuild");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables fast build");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-money");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives resources");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-vision");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "reveals whole map");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-god");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "invulnerability");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-speed X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes game speed to X = \"slower/slow/normal/fast/faster\"");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ally");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-share");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units + spending");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pvp");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets player 01 and 02 as enemies (or disables that)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-caster");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "creates the caster of top bar abilities for player 2");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mastery X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes masteries for player X; might not work 100% during the game");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-light");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "cycles through game lighting with \"+\" and \"-\" keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables smartcasting for Bile Launchers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-randommut X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts X random mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-supply X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets supply limit to X for player Y (optional)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-nuketest");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Launches many nukes as in Going Nuclear mutator");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-techreset X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "resets tech (upgrades/research) for player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mutsel");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you add more mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bioreport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows info about biomass");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pause");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-resource X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets resouces to X minerals and Y vespene");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unitinfo");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "show/hides additional information for all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-voidrifts X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows where void rifts can spawn; if X=clear, clears; if X=time in minutes limits time spawning");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-replace X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "replaces unit type X seamlessly");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-sbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "saves units and upgrade into bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "restores units and upgrade from the bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearscreen X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes ALL units at the camera target location owned by player X (default=Any), 15 radius");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-soundlimit X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "limits sound emotes to one each X seconds");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Measuring and logging");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dummy X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns a dummy that calculates DPS; X= additional armored/light/structure attribute");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides log; shows other player if X=\"2\" ");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log clear");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "clears log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pie");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows pie charts for damage log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts and resets DPS counting for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dpsstop");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "stops DPS counting");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gincome");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of income rate");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-garmy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of army value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gapm");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of APM");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gkills");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of kills");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-glost");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of unit value lost");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pathcheck");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Checks pathing between selected unit and camera target");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-eco");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts economic testing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-val");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows economic value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Units");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-copypaste");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables copypasting of units with Ctrl+C; Ctrl+V");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-spawn X Y Z");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns units; X= unitID, Y= amount; Z= for player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-getid");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "get unitID for units onscreen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aw X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns attack wave; X= size, Y= tech");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-attack");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "orders spawned attack waves to attack");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remw");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes spawned attack waves");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aichoice");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "selects enemy unit comp");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-refill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills enemy pre-placed units; X=\"all\" to include rocks");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-horde X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiplies the amount of pre-placed and attack wave units by X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remhorde");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes units spawned by horde command");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-empower X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "increases health +X*100% and damage +Y*100% of all enemy units and structures");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cost X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "calculates resouce and supply cost of units on screen; X= optional distance");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-kill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "kills selected units; X= killing player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remove");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-give X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-switchowner X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X; unit keeps upgrades");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-restore");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills health, shields and energy");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-teleport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "teleports selected units to camera location");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-control X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you control all enemy units; alliance status is unaffected; if X=ally, control allies");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearenemy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes all enemy units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "User interface");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-toprefresh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes topbar; use if you encounter issues after resuming from replay");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-slim");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides custom user interface");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-look X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "makes all selected units look at X angle");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-topbar");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "hides/shows topbar notifications (right-click)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-numbers");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides damage and healing numbers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-meme");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides meme faces");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables full camera control with Q,W,E,A,S,D keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "X=\"reset\" resets camera position; X=\"top\" top view");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tychui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables reordering outlaws");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-terin");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides Terin's UI for basic commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unlock");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "unlocks camera from victory/defeat screen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trigdebug");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows debugging window");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trace");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides visual debug tracing of effects");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "actorinfodisplay");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides actor info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-allysupply");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides player 2 supply UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listdead");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all dead units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listhidden");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all hidden units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listmissile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all missiles (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listall");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all units and structures (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-encomps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of enemy AI comps");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-emotes");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of emotes available for twitch integration with !message");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-buttons");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables showing which buttons are you pressing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-hotkey X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes the hotkey for button X to Y. This is saved between games.");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Unit modifications");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ms X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets movement speed of selected units to X; -ms alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-acc X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets unit acceleration of selected unit types to X; -acc alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-range X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets weapon range for selected unit types to X; Y can specify weapon; -range alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-arange X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets ability range for selected unit types to X; Y can specify weapon; -arange alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-as X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiply attack speed for selected unit types by X; -as alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mm X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes projectile speed for a group of units by X; just \"-mm\" adds units to group; \"-mm clear\" clears");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-life X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets max life to X for selected units; shields if Y=2; -life alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-energy X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets selected units max energy to X. If Y == 'regen', set energy regen to Y. -energy alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-armor X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes armor to X for selected unit types; shield armor if Y=2; -armor alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tint X,Y,Z ");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets tint color to X,Y,Z in RGB for selected units; in decimal");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-scale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets actor scale to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-height X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets height offset to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-timescale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Changes timescale for selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-actorsend X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sends actor message X to selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cannon X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "SetsTesseract Cannon Projection damage to X%. E.g. -cannon 0.2 sets their damage to 20%");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-xp X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Adds X amount of experience for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rad X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets movement radius for unit types of all selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-airbeh/-groundbeh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Selected units will be a valid target as air or ground exclusively");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Dead of Night");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pick X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the first (X) and the second (Y) special infested -hunterling/spotter/kaboomer/choker");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bosspick X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the boss type (X) -stank/nydus");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Scythe of Amon");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetSliverAbility X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets a fixed order of abilities on Slivers. X =  first ability (deathgrip / shockwave / unstableenergy )");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Cradle of Death");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "cheats");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows cheat info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetBranch X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets branch for main objective; X=one/two; Y=right/left");
    lv_a += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_InfoSave_Init () {
    libARRA_gt_UT_InfoSave = TriggerCreate("libARRA_gt_UT_InfoSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Info_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libARRA_gt_UT_InfoCreate, true, true);
    TriggerEnable(libARRA_gt_UT_InfoButton, true);
    if ((DialogIsVisible(libARRA_gv_uT_InfoDialog, EventPlayer()) == false)) {
        DialogSetVisible(libARRA_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(libARRA_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Info_Init () {
    libARRA_gt_UT_Info = TriggerCreate("libARRA_gt_UT_Info_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Info, c_playerAny, "-info", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoButton
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_InfoButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libARRA_gv_uT_InfoButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libARRA_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_InfoButton_Init () {
    libARRA_gt_UT_InfoButton = TriggerCreate("libARRA_gt_UT_InfoButton_Func");
    TriggerEnable(libARRA_gt_UT_InfoButton, false);
    TriggerAddEventDialogControl(libARRA_gt_UT_InfoButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info Create
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_InfoCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vListBox;
    int lv_a;
    string lv_vString;
    string lv_vDesc;

    // Automatic Variable Declarations
    const int auto0303AB44_ae = 200;
    const int auto0303AB44_ai = 1;

    // Variable Initialization
    lv_vListBox = c_invalidDialogControlId;
    lv_vDesc = "";

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(960, 600, c_anchorCenter, 0, -500, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1050);
    DialogSetFullscreen(DialogLastCreated(), true);
    libARRA_gv_uT_InfoDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 964, 546, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    TextExpressionSetToken("Param/Expression/lib_ARRA_DF9BFC6D", "B", GameMapName());
    TextExpressionSetToken("Param/Expression/lib_ARRA_DF9BFC6D", "A", IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, -15, -205, TextExpressionAssemble("Param/Expression/lib_ARRA_DF9BFC6D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorCenter, 460, -210, StringToText(""), StringToText(""), "");
    libARRA_gv_uT_InfoButton = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 31, c_anchorCenter, 460, -210, StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_closebuttonhover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 60);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 960, 500);
    lv_vListBox = DialogControlLastCreated();
    lv_a = 1;
    for ( ; ( (auto0303AB44_ai >= 0 && lv_a <= auto0303AB44_ae) || (auto0303AB44_ai < 0 && lv_a >= auto0303AB44_ae) ) ; lv_a += auto0303AB44_ai ) {
        lv_vString = DataTableGetString(true, ("UT_command" + IntToString(lv_a)));
        if ((lv_vString != "")) {
            lv_vDesc = DataTableGetString(true, ("UT_desc" + IntToString(lv_a)));
            if ((lv_vDesc != "")) {
                TextExpressionSetToken("Param/Expression/lib_ARRA_B0D4663D", "A", StringToText(lv_vString));
                TextExpressionSetToken("Param/Expression/lib_ARRA_B0D4663D", "B", StringToText(lv_vDesc));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_ARRA_B0D4663D"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_ARRA_AD4EBFEF", "A", StringToText(lv_vString));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_ARRA_AD4EBFEF"));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_InfoCreate_Init () {
    libARRA_gt_UT_InfoCreate = TriggerCreate("libARRA_gt_UT_InfoCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libARRA_gt_UT_UI_CtrlH) == false)) {
        TriggerEnable(libARRA_gt_UT_UI_CtrlH, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_BF373B15"));
    }
    else {
        TriggerEnable(libARRA_gt_UT_UI_CtrlH, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_DD9B4D02"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_UI_Init () {
    libARRA_gt_UT_UI = TriggerCreate("libARRA_gt_UT_UI_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_UI, c_playerAny, "-ui", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI_Ctrl+H
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_UI_CtrlH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    bool auto9799D662_val;

    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9799D662_val = PlayerGroupHasPlayer(libARRA_gv_uT_UI_Hidden, EventPlayer());
    if (auto9799D662_val == false) {
        libARRA_gf_HideUI(lv_vPGroup);
    }
    else if (auto9799D662_val == true) {
        libARRA_gf_ShowUI(lv_vPGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_UI_CtrlH_Init () {
    libARRA_gt_UT_UI_CtrlH = TriggerCreate("libARRA_gt_UT_UI_CtrlH_Func");
    TriggerEnable(libARRA_gt_UT_UI_CtrlH, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_UI_CtrlH, c_playerAny, c_keyH, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonMonitor
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ButtonMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(libARRA_gv_uT_ButtonUsagePlayerGroup, EventPlayer()) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_A7231A90"));
        PlayerGroupRemove(libARRA_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        if ((PlayerGroupCount(libARRA_gv_uT_ButtonUsagePlayerGroup) == 0)) {
            TriggerEnable(libARRA_gt_UT_ButtonUsage, false);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_71B37BB4"));
        PlayerGroupAdd(libARRA_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        TriggerEnable(libARRA_gt_UT_ButtonUsage, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ButtonMonitor_Init () {
    libARRA_gt_UT_ButtonMonitor = TriggerCreate("libARRA_gt_UT_ButtonMonitor_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ButtonMonitor, c_playerAny, "-buttons", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonUsage
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ButtonUsage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vButton = EventButtonPressed();

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_BA26A7FB", "A", StringToText((lv_vButton)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_BA26A7FB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ButtonUsage_Init () {
    libARRA_gt_UT_ButtonUsage = TriggerCreate("libARRA_gt_UT_ButtonUsage_Func");
    TriggerEnable(libARRA_gt_UT_ButtonUsage, false);
    TriggerAddEventButtonPressed(libARRA_gt_UT_ButtonUsage, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_HotkeyChange
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_HotkeyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIdx;

    // Automatic Variable Declarations
    const int auto5B05C719_ae = libARRA_gv_uT_HotkeyStoreLength;
    const int auto5B05C719_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((StringContains(StringWord(EventChatMessage(false), 3), "Ctrl+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Alt+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Shift+", c_stringAnywhere, c_stringNoCase) == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_FF872FE2"));
        return true;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_ARRA_433B5AF5", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_ARRA_433B5AF5", "B", StringToText(StringWord(EventChatMessage(false), 3)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_433B5AF5"));
    }
    CatalogFieldValueSet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Hotkey", EventPlayer(), ("Letter/" + StringWord(EventChatMessage(false), 3)));
    lv_vIdx = 1;
    for ( ; ( (auto5B05C719_ai >= 0 && lv_vIdx <= auto5B05C719_ae) || (auto5B05C719_ai < 0 && lv_vIdx >= auto5B05C719_ae) ) ; lv_vIdx += auto5B05C719_ai ) {
        if ((libARRA_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] == "")) {
            libARRA_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 2);
            libARRA_gv_uT_HotkeyToStoreValue[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 3);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_HotkeyChange_Init () {
    libARRA_gt_UT_HotkeyChange = TriggerCreate("libARRA_gt_UT_HotkeyChange_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_HotkeyChange, c_playerAny, "-hotkey", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Godmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto89110E12_g;
    int auto89110E12_u;
    unit auto89110E12_var;
    unitgroup auto1498EB30_g;
    int auto1498EB30_u;
    unit auto1498EB30_var;
    unitgroup auto725684F3_g;
    int auto725684F3_u;
    unit auto725684F3_var;
    unitgroup autoDC2B5389_g;
    int autoDC2B5389_u;
    unit autoDC2B5389_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gv_uT_GodMode == false)) {
        libARRA_gv_uT_GodMode = true;
        TriggerEnable(libARRA_gt_UT_Godmode_unit_created, true);
        auto725684F3_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto725684F3_u = UnitGroupCount(auto725684F3_g, c_unitCountAll);
        for (;; auto725684F3_u -= 1) {
            auto725684F3_var = UnitGroupUnitFromEnd(auto725684F3_g, auto725684F3_u);
            if (auto725684F3_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto725684F3_var, true);
        }
        autoDC2B5389_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDC2B5389_u = UnitGroupCount(autoDC2B5389_g, c_unitCountAll);
        for (;; autoDC2B5389_u -= 1) {
            autoDC2B5389_var = UnitGroupUnitFromEnd(autoDC2B5389_g, autoDC2B5389_u);
            if (autoDC2B5389_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoDC2B5389_var, true);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_7B12459F"));
    }
    else {
        libARRA_gv_uT_GodMode = false;
        TriggerEnable(libARRA_gt_UT_Godmode_unit_created, false);
        auto89110E12_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto89110E12_u = UnitGroupCount(auto89110E12_g, c_unitCountAll);
        for (;; auto89110E12_u -= 1) {
            auto89110E12_var = UnitGroupUnitFromEnd(auto89110E12_g, auto89110E12_u);
            if (auto89110E12_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto89110E12_var, false);
        }
        auto1498EB30_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1498EB30_u = UnitGroupCount(auto1498EB30_g, c_unitCountAll);
        for (;; auto1498EB30_u -= 1) {
            auto1498EB30_var = UnitGroupUnitFromEnd(auto1498EB30_g, auto1498EB30_u);
            if (auto1498EB30_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto1498EB30_var, false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_40A0EE08"));
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Godmode_Init () {
    libARRA_gt_UT_Godmode = TriggerCreate("libARRA_gt_UT_Godmode_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Godmode, c_playerAny, "-god", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode_unit_created
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Godmode_unit_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_GodMode == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventUnitCreatedUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Godmode_unit_created_Init () {
    libARRA_gt_UT_Godmode_unit_created = TriggerCreate("libARRA_gt_UT_Godmode_unit_created_Func");
    TriggerEnable(libARRA_gt_UT_Godmode_unit_created, false);
    TriggerAddEventUnitCreated(libARRA_gt_UT_Godmode_unit_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfo
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_UnitInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto81324987_g;
    int auto81324987_u;
    unit auto81324987_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libARRA_gt_UT_UnitInfoUpdate) == true)) {
        TriggerEnable(libARRA_gt_UT_UnitInfoUpdate, false);
        auto81324987_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto81324987_u = UnitGroupCount(auto81324987_g, c_unitCountAll);
        for (;; auto81324987_u -= 1) {
            auto81324987_var = UnitGroupUnitFromEnd(auto81324987_g, auto81324987_u);
            if (auto81324987_var == null) { break; }
            libARRA_gf_UT_RemoveUnitInfo(auto81324987_var);
        }
    }
    else {
        TriggerEnable(libARRA_gt_UT_UnitInfoUpdate, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_UnitInfo_Init () {
    libARRA_gt_UT_UnitInfo = TriggerCreate("libARRA_gt_UT_UnitInfo_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_UnitInfo, c_playerAny, "-unitinfo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfoUpdate
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_UnitInfoUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD15F0DD2_g;
    int autoD15F0DD2_u;
    unit autoD15F0DD2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD15F0DD2_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoD15F0DD2_u = UnitGroupCount(autoD15F0DD2_g, c_unitCountAll);
    for (;; autoD15F0DD2_u -= 1) {
        autoD15F0DD2_var = UnitGroupUnitFromEnd(autoD15F0DD2_g, autoD15F0DD2_u);
        if (autoD15F0DD2_var == null) { break; }
        libARRA_gf_UT_UpdateUnitInfo(autoD15F0DD2_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_UnitInfoUpdate_Init () {
    libARRA_gt_UT_UnitInfoUpdate = TriggerCreate("libARRA_gt_UT_UnitInfoUpdate_Func");
    TriggerEnable(libARRA_gt_UT_UnitInfoUpdate, false);
    TriggerAddEventTimePeriodic(libARRA_gt_UT_UnitInfoUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastConstruction
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_FastConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_FastConstruction_Init () {
    libARRA_gt_UT_FastConstruction = TriggerCreate("libARRA_gt_UT_FastConstruction_Func");
    TriggerEnable(libARRA_gt_UT_FastConstruction, false);
    TriggerAddEventUnitConstructProgress(libARRA_gt_UT_FastConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastTrain
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_FastTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 2, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_FastTrain_Init () {
    libARRA_gt_UT_FastTrain = TriggerCreate("libARRA_gt_UT_FastTrain_Func");
    TriggerEnable(libARRA_gt_UT_FastTrain, false);
    TriggerAddEventUnitTrainProgress(libARRA_gt_UT_FastTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastResearch
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_FastResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_FastResearch_Init () {
    libARRA_gt_UT_FastResearch = TriggerCreate("libARRA_gt_UT_FastResearch_Func");
    TriggerEnable(libARRA_gt_UT_FastResearch, false);
    TriggerAddEventUnitResearchProgress(libARRA_gt_UT_FastResearch, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastArrm
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_FastArrm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_FastArrm_Init () {
    libARRA_gt_UT_FastArrm = TriggerCreate("libARRA_gt_UT_FastArrm_Func");
    TriggerEnable(libARRA_gt_UT_FastArrm, false);
    TriggerAddEventUnitArmMagazineProgress(libARRA_gt_UT_FastArrm, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastRevive
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_FastRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_FastRevive_Init () {
    libARRA_gt_UT_FastRevive = TriggerCreate("libARRA_gt_UT_FastRevive_Func");
    TriggerEnable(libARRA_gt_UT_FastRevive, false);
    TriggerAddEventUnitReviveProgress(libARRA_gt_UT_FastRevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastBuild
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_FastBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gv_uT_FastBuildCheat == false)) {
        libARRA_gv_uT_FastBuildCheat = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_E31434C8"));
        libARRA_gf_EnableFastBuild(EventPlayer());
    }
    else {
        libARRA_gv_uT_FastBuildCheat = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_D5C5A955"));
        libARRA_gf_DisableFastBuild(EventPlayer());
        TriggerEnable(libARRA_gt_UT_FastArrm, false);
        TriggerEnable(libARRA_gt_UT_FastConstruction, false);
        TriggerEnable(libARRA_gt_UT_FastResearch, false);
        TriggerEnable(libARRA_gt_UT_FastRevive, false);
        TriggerEnable(libARRA_gt_UT_FastTrain, false);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_FastBuild_Init () {
    libARRA_gt_UT_FastBuild = TriggerCreate("libARRA_gt_UT_FastBuild_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_FastBuild, c_playerAny, "-fastbuild", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Toggle Eco
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ToggleEco_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gv_uT_EconomyTest == false)) {
        libARRA_gv_uT_EconomyTest = true;
        TriggerEnable(libARRA_gt_UT_WorkerSaturation, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_1355D539"));
    }
    else {
        libARRA_gv_uT_EconomyTest = false;
        TriggerEnable(libARRA_gt_UT_WorkerSaturation, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_04D70902"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ToggleEco_Init () {
    libARRA_gt_UT_ToggleEco = TriggerCreate("libARRA_gt_UT_ToggleEco_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ToggleEco, c_playerAny, "-eco", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Economy Value
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_EconomyValue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mineral_count;
    fixed lv_gas_count;
    fixed lv_energy_count;

    // Automatic Variable Declarations
    unitgroup auto19E8B0CD_g;
    int auto19E8B0CD_u;
    unit auto19E8B0CD_var;
    string auto7AEB20E5_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto19E8B0CD_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto19E8B0CD_u = UnitGroupCount(auto19E8B0CD_g, c_unitCountAll);
    for (;; auto19E8B0CD_u -= 1) {
        auto19E8B0CD_var = UnitGroupUnitFromEnd(auto19E8B0CD_g, auto19E8B0CD_u);
        if (auto19E8B0CD_var == null) { break; }
        auto7AEB20E5_val = UnitGetType(auto19E8B0CD_var);
        if (auto7AEB20E5_val == "Zergling") {
            lv_mineral_count = (lv_mineral_count+14.6667);
        }
        else if (auto7AEB20E5_val == "Baneling") {
            lv_mineral_count = (lv_mineral_count+36.6667);
            lv_gas_count = (lv_gas_count+14.0);
        }
        else if (auto7AEB20E5_val == "Drone") {
            lv_mineral_count = (lv_mineral_count+37.5);
        }
        else if (auto7AEB20E5_val == "GhostAcademyNova") {
        }
        else if (auto7AEB20E5_val == "OrbitalCommand") {
            lv_mineral_count = (lv_mineral_count+550);
            lv_energy_count = (lv_energy_count+UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        }
        else {
            lv_mineral_count = (lv_mineral_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto19E8B0CD_var), "CostResource[" + IntToString(0) + "]", c_playerAny)));
            lv_gas_count = (lv_gas_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(auto19E8B0CD_var), "CostResource[" + IntToString(1) + "]", c_playerAny)));
        }
    }
    lv_mineral_count = (lv_mineral_count+lv_energy_count*4.43+PlayerGetPropertyFixed(1, c_playerPropMinerals));
    lv_gas_count = (lv_gas_count+PlayerGetPropertyFixed(1, c_playerPropVespene));
    TextExpressionSetToken("Param/Expression/lib_ARRA_CDEA67AA", "A", IntToText(FixedToInt(lv_mineral_count)));
    TextExpressionSetToken("Param/Expression/lib_ARRA_CDEA67AA", "B", IntToText(FixedToInt(lv_gas_count)));
    TextExpressionSetToken("Param/Expression/lib_ARRA_CDEA67AA", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_CDEA67AA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_EconomyValue_Init () {
    libARRA_gt_UT_EconomyValue = TriggerCreate("libARRA_gt_UT_EconomyValue_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_EconomyValue, c_playerAny, "-val", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Worker Saturation
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_WorkerSaturation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_worker_count;
    int lv_saturation_count;

    // Automatic Variable Declarations
    unitgroup auto5DD8D9D7_g;
    int auto5DD8D9D7_u;
    unit auto5DD8D9D7_var;
    unitgroup autoF6315DD1_g;
    int autoF6315DD1_u;
    unit autoF6315DD1_var;

    // Variable Initialization
    lv_saturation_count = 48;

    // Conditions
    if (testConds) {
        if (!((libARRA_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "SISCV") || (UnitGetType(EventUnitCreatedUnit()) == "DehakaDrone") || (UnitGetType(EventUnitCreatedUnit()) == "HHSCV")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto5DD8D9D7_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto5DD8D9D7_u = UnitGroupCount(auto5DD8D9D7_g, c_unitCountAll);
    for (;; auto5DD8D9D7_u -= 1) {
        auto5DD8D9D7_var = UnitGroupUnitFromEnd(auto5DD8D9D7_g, auto5DD8D9D7_u);
        if (auto5DD8D9D7_var == null) { break; }
        if (((UnitGetType(auto5DD8D9D7_var) == "AutomatedRefinery") || (UnitGetType(auto5DD8D9D7_var) == "AutomatedAssimilator"))) {
            lv_saturation_count = 36;
        }

    }
    autoF6315DD1_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoF6315DD1_u = UnitGroupCount(autoF6315DD1_g, c_unitCountAll);
    for (;; autoF6315DD1_u -= 1) {
        autoF6315DD1_var = UnitGroupUnitFromEnd(autoF6315DD1_g, autoF6315DD1_u);
        if (autoF6315DD1_var == null) { break; }
        if (((UnitGetType(autoF6315DD1_var) == "SCV") || (UnitGetType(autoF6315DD1_var) == "Probe") || (UnitGetType(autoF6315DD1_var) == "Drone") || (UnitGetType(autoF6315DD1_var) == "SISCV") || (UnitGetType(autoF6315DD1_var) == "DehakaDrone") || (UnitGetType(autoF6315DD1_var) == "HHSCV"))) {
            lv_worker_count = (lv_worker_count+1);
            if ((lv_worker_count >= lv_saturation_count)) {
                TextExpressionSetToken("Param/Expression/lib_ARRA_70F07922", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_70F07922"));
                TriggerExecute(libARRA_gt_UT_EconomyValue, true, false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_0179410E"));
                SoundPlayForPlayer(SoundLink("Alert_UniObjectiveCompleted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_WorkerSaturation_Init () {
    libARRA_gt_UT_WorkerSaturation = TriggerCreate("libARRA_gt_UT_WorkerSaturation_Func");
    TriggerEnable(libARRA_gt_UT_WorkerSaturation, false);
    TriggerAddEventUnitCreated(libARRA_gt_UT_WorkerSaturation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListEmotes
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ListEmotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vString;
    string lv_vStyle;

    // Automatic Variable Declarations
    const int auto97E54807_ae = 30;
    int auto97E54807_var;
    const int auto49CB7BF9_ae = libARRA_gv_uT_MAXEMOTES;
    int auto49CB7BF9_var;
    const int auto43AD53D1_ae = 30;
    int auto43AD53D1_var;
    const int autoB12BFDC7_ae = libARRA_gv_uT_MAXEMOTES;
    int autoB12BFDC7_var;

    // Variable Initialization
    lv_vString = "";
    lv_vStyle = "<s val=\"EmoteListNormal\">";

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libARRA_gv_uT_Emote_Dialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 5000);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, -350, 50, StringExternal("Param/Value/lib_ARRA_93D30F15"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    auto97E54807_var = 1;
    for ( ; auto97E54807_var <= auto97E54807_ae; auto97E54807_var += 1 ) {
        if ((libARRA_gv_uT_SC_Emoticons[auto97E54807_var] != "")) {
            lv_vString = (lv_vString + libARRA_gf_UT_ReplaceEmotes(("(" + libARRA_gv_uT_SC_Emoticons[auto97E54807_var] + ")")) + " " + lv_vStyle + "(" + libARRA_gv_uT_SC_Emoticons[auto97E54807_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -250, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vString = "</n>";
    auto49CB7BF9_var = 31;
    for ( ; auto49CB7BF9_var <= auto49CB7BF9_ae; auto49CB7BF9_var += 1 ) {
        if ((libARRA_gv_uT_SC_Emoticons[auto49CB7BF9_var] != "")) {
            lv_vString = (lv_vString + libARRA_gf_UT_ReplaceEmotes(("(" + libARRA_gv_uT_SC_Emoticons[auto49CB7BF9_var] + ")")) + " " + lv_vStyle + "(" + libARRA_gv_uT_SC_Emoticons[auto49CB7BF9_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -500, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, 250, 50, StringExternal("Param/Value/lib_ARRA_BA3BAECD"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    lv_vString = "";
    auto43AD53D1_var = 1;
    for ( ; auto43AD53D1_var <= auto43AD53D1_ae; auto43AD53D1_var += 1 ) {
        if ((libARRA_gv_uT_CS_Emoticons[auto43AD53D1_var] != "")) {
            lv_vString = (lv_vString + libARRA_gf_UT_ReplaceEmotes((" " + libARRA_gv_uT_CS_Emoticons[auto43AD53D1_var])) + "  " + lv_vStyle + libARRA_gv_uT_CS_Emoticons[auto43AD53D1_var] + "</s></n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 300, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    lv_vString = "";
    autoB12BFDC7_var = 31;
    for ( ; autoB12BFDC7_var <= autoB12BFDC7_ae; autoB12BFDC7_var += 1 ) {
        if ((libARRA_gv_uT_CS_Emoticons[autoB12BFDC7_var] != "")) {
            lv_vString = (lv_vString + libARRA_gf_UT_ReplaceEmotes((" " + libARRA_gv_uT_CS_Emoticons[autoB12BFDC7_var])) + "  " + lv_vStyle + libARRA_gv_uT_CS_Emoticons[autoB12BFDC7_var] + "</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 600, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/lib_ARRA_0C2692D7"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    libARRA_gv_uT_Emote_CloseButton = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ListEmotes_Init () {
    libARRA_gt_UT_ListEmotes = TriggerCreate("libARRA_gt_UT_ListEmotes_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ListEmotes, c_playerAny, "-emotes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Emote_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Emote_ButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libARRA_gv_uT_Emote_CloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libARRA_gv_uT_Emote_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Emote_ButtonClicked_Init () {
    libARRA_gt_UT_Emote_ButtonClicked = TriggerCreate("libARRA_gt_UT_Emote_ButtonClicked_Func");
    TriggerAddEventDialogControl(libARRA_gt_UT_Emote_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Changed
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UpgradeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_C3EDEFB4", "A", StringToText(IntToString(EventUpgradeLevelDelta())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_C3EDEFB4", "B", StringToText((EventUpgradeName())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_C3EDEFB4", "C", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_C3EDEFB4"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UpgradeChanged_Init () {
    libARRA_gt_UpgradeChanged = TriggerCreate("libARRA_gt_UpgradeChanged_Func");
    TriggerEnable(libARRA_gt_UpgradeChanged, false);
    TriggerAddEventUpgradeLevelChanged(libARRA_gt_UpgradeChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Debug
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "effect")) {
        TriggerEnable(libARRA_gt_EffectUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "behavior")) {
        TriggerEnable(libARRA_gt_BehaviorChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "upgrade")) {
        TriggerEnable(libARRA_gt_UpgradeChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "ability")) {
        TriggerEnable(libARRA_gt_AbilityUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "unit")) {
        TriggerEnable(libARRA_gt_UnitCreated, true);
        TriggerEnable(libARRA_gt_UnitDied, true);
        TriggerEnable(libARRA_gt_UnitRevived, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "stop")) {
        TriggerEnable(libARRA_gt_UnitCreated, false);
        TriggerEnable(libARRA_gt_UnitDied, false);
        TriggerEnable(libARRA_gt_UnitRevived, false);
        TriggerEnable(libARRA_gt_EffectUsed, false);
        TriggerEnable(libARRA_gt_BehaviorChanged, false);
        TriggerEnable(libARRA_gt_UpgradeChanged, false);
        TriggerEnable(libARRA_gt_AbilityUsed, false);
    }
    else if (true) {
        TriggerEnable(libARRA_gt_UnitCreated, true);
        TriggerEnable(libARRA_gt_UnitDied, true);
        TriggerEnable(libARRA_gt_UnitRevived, true);
        TriggerEnable(libARRA_gt_EffectUsed, true);
        TriggerEnable(libARRA_gt_BehaviorChanged, true);
        TriggerEnable(libARRA_gt_UpgradeChanged, true);
        TriggerEnable(libARRA_gt_AbilityUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Debug_Init () {
    libARRA_gt_UT_Debug = TriggerCreate("libARRA_gt_UT_Debug_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Debug, c_playerAny, "-debug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Used
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_AbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("attack", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("stop", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_6A2F8DFD", "A", StringToText((AbilityCommandGetAbility(EventUnitAbility()))));
    TextExpressionSetToken("Param/Expression/lib_ARRA_6A2F8DFD", "B", StringToText(libARRA_gf_UT_StageToString(EventUnitAbilityStage())));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_6A2F8DFD"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_AbilityUsed_Init () {
    libARRA_gt_AbilityUsed = TriggerCreate("libARRA_gt_AbilityUsed_Func");
    TriggerEnable(libARRA_gt_AbilityUsed, false);
    TriggerAddEventUnitAbility(libARRA_gt_AbilityUsed, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_E28E9C0A", "C", StringToText((UnitGetType(EventUnitCreatedUnit()))));
    TextExpressionSetToken("Param/Expression/lib_ARRA_E28E9C0A", "D", IntToText(UnitGetOwner(EventUnitCreatedUnit())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_E28E9C0A", "A", FixedToText(PointGetX(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_ARRA_E28E9C0A", "B", FixedToText(PointGetY(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_E28E9C0A"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UnitCreated_Init () {
    libARRA_gt_UnitCreated = TriggerCreate("libARRA_gt_UnitCreated_Func");
    TriggerEnable(libARRA_gt_UnitCreated, false);
    TriggerAddEventUnitCreated(libARRA_gt_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Died
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UnitDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_9A9DEA22", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_ARRA_9A9DEA22", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_9A9DEA22", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_ARRA_9A9DEA22", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_9A9DEA22"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UnitDied_Init () {
    libARRA_gt_UnitDied = TriggerCreate("libARRA_gt_UnitDied_Func");
    TriggerEnable(libARRA_gt_UnitDied, false);
    TriggerAddEventUnitDied(libARRA_gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Revived
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UnitRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_EC799B6C", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_ARRA_EC799B6C", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_EC799B6C", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_ARRA_EC799B6C", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_EC799B6C"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UnitRevived_Init () {
    libARRA_gt_UnitRevived = TriggerCreate("libARRA_gt_UnitRevived_Func");
    TriggerEnable(libARRA_gt_UnitRevived, false);
    TriggerAddEventUnitRevive(libARRA_gt_UnitRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Used
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_EffectUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_A1057F7E", "A", StringToText((EventPlayerEffectUsed())));
        TextExpressionSetToken("Param/Expression/lib_ARRA_A1057F7E", "B", FixedToText(EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false), 1));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_A1057F7E"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_ARRA_82B01B38", "A", StringToText((EventPlayerEffectUsed())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_82B01B38"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_EffectUsed_Init () {
    libARRA_gt_EffectUsed = TriggerCreate("libARRA_gt_EffectUsed_Func");
    TriggerEnable(libARRA_gt_EffectUsed, false);
    TriggerAddEventPlayerEffectUsed(libARRA_gt_EffectUsed, 1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Changed
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_BehaviorChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vChange;

    // Automatic Variable Declarations
    int auto40FF3800_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryMineralFieldMinerals"))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryHarvestableVespeneGeyserGas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto40FF3800_val = EventUnitBehaviorChange();
    if (auto40FF3800_val == c_unitBehaviorChangeRefresh) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_7D5866C5");
    }
    else if (auto40FF3800_val == c_unitBehaviorChangeIncrease) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_0C0ADC3C");
    }
    else if (auto40FF3800_val == c_unitBehaviorChangeDestroy) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_9ED904E6");
    }
    else if (auto40FF3800_val == c_unitBehaviorChangeDecrease) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_9C6341FA");
    }
    else if (auto40FF3800_val == c_unitBehaviorChangeDeactivate) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_CD8A7186");
    }
    else if (auto40FF3800_val == c_unitBehaviorChangeCreate) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_FB52E7DC");
    }
    else if (auto40FF3800_val == c_unitBehaviorChangeAny) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_25F8067F");
    }
    else if (auto40FF3800_val == c_unitBehaviorChangeActivate) {
        lv_vChange = StringExternal("Param/Value/lib_ARRA_C9B8CA25");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_ARRA_A547986D", "A", lv_vChange);
    TextExpressionSetToken("Param/Expression/lib_ARRA_A547986D", "B", StringToText((EventUnitBehavior())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_A547986D", "C", StringToText((UnitGetType(EventUnit()))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_A547986D"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_BehaviorChanged_Init () {
    libARRA_gt_BehaviorChanged = TriggerCreate("libARRA_gt_BehaviorChanged_Func");
    TriggerEnable(libARRA_gt_BehaviorChanged, false);
    TriggerAddEventUnitBehaviorChange(libARRA_gt_BehaviorChanged, null, null, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Dealing Damage
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_EffectDealingDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_29BC1C7C", "A", StringToText((EventUnitDamageEffect())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_29BC1C7C", "B", FixedToText(EventUnitDamageAttempted(), 1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_29BC1C7C"));
    TextExpressionSetToken("Param/Expression/lib_ARRA_3E8DBED9", "A", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsHidden(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_ARRA_3E8DBED9", "B", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsInvulnerable(EventUnit())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_3E8DBED9"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_EffectDealingDamage_Init () {
    libARRA_gt_EffectDealingDamage = TriggerCreate("libARRA_gt_EffectDealingDamage_Func");
    TriggerEnable(libARRA_gt_EffectDealingDamage, false);
    TriggerAddEventUnitDamaged(libARRA_gt_EffectDealingDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trace
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Trace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libARRA_gt_UT_Tracing) == true)) {
        TriggerEnable(libARRA_gt_UT_Tracing, false);
        TriggerEnable(libARRA_gt_UT_DeTracing, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_09BEE1F3"));
    }
    else {
        TriggerEnable(libARRA_gt_UT_Tracing, true);
        TriggerEnable(libARRA_gt_UT_DeTracing, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_237DA8F7"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Trace_Init () {
    libARRA_gt_UT_Trace = TriggerCreate("libARRA_gt_UT_Trace_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Trace, c_playerAny, "-trace", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Tracing
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Tracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Tracing_Init () {
    libARRA_gt_UT_Tracing = TriggerCreate("libARRA_gt_UT_Tracing_Func");
    TriggerEnable(libARRA_gt_UT_Tracing, false);
    TriggerAddEventPlayerEffectUsed(libARRA_gt_UT_Tracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DeTracing
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DeTracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DeTracing_Init () {
    libARRA_gt_UT_DeTracing = TriggerCreate("libARRA_gt_UT_DeTracing_Func");
    TriggerEnable(libARRA_gt_UT_DeTracing, false);
    TriggerAddEventPlayerEffectUsed(libARRA_gt_UT_DeTracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CopyPaste
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_CopyPaste_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libARRA_gt_UT_CTRLC) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_26EDA524"));
        TriggerEnable(libARRA_gt_UT_CTRLC, false);
        TriggerEnable(libARRA_gt_UT_CTRLV, false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_CAF0977B"));
        TriggerEnable(libARRA_gt_UT_CTRLC, true);
        TriggerEnable(libARRA_gt_UT_CTRLV, true);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_CopyPaste_Init () {
    libARRA_gt_UT_CopyPaste = TriggerCreate("libARRA_gt_UT_CopyPaste_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_CopyPaste, c_playerAny, "-copypaste", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+C
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_CTRLC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vSelectedUnits;
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    unitgroup autoF7355CDB_g;
    int autoF7355CDB_u;
    unit autoF7355CDB_var;
    int autoBC523D92_ae;
    const int autoBC523D92_ai = 1;
    int auto28227B4F_ae;
    const int auto28227B4F_ai = 1;
    int auto3CDF8959_ae;
    const int auto3CDF8959_ai = 1;

    // Variable Initialization
    lv_vSelectedUnits = UnitGroupSelected(EventPlayer());
    lv_vCenter = UnitGroupCenterOfGroup(UnitGroupSelected(1));

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7355CDB_g = lv_vSelectedUnits;
    autoF7355CDB_u = UnitGroupCount(autoF7355CDB_g, c_unitCountAll);
    for (;; autoF7355CDB_u -= 1) {
        autoF7355CDB_var = UnitGroupUnitFromEnd(autoF7355CDB_g, autoF7355CDB_u);
        if (autoF7355CDB_var == null) { break; }
        lv_vA += 1;
        DataTableSetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)), (UnitGetType(autoF7355CDB_var)));
        DataTableSetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA)), UnitGetOwner(autoF7355CDB_var));
        DataTableSetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA)), UnitGetFacing(autoF7355CDB_var));
        DataTableSetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)), AngleBetweenPoints(lv_vCenter, UnitGetPosition(autoF7355CDB_var)));
        DataTableSetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA)), DistanceBetweenPoints(UnitGetPosition(autoF7355CDB_var), lv_vCenter));
        DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF7355CDB_var, c_unitPropLife, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF7355CDB_var, c_unitPropLifeMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF7355CDB_var, c_unitPropEnergy, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF7355CDB_var, c_unitPropEnergyMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF7355CDB_var, c_unitPropShields, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA)), UnitGetPropertyFixed(autoF7355CDB_var, c_unitPropShieldsMax, c_unitPropCurrent));
        DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)), UnitBehaviorCountAll(autoF7355CDB_var));
        autoBC523D92_ae = UnitBehaviorCountAll(autoF7355CDB_var);
        lv_vB = 0;
        for ( ; ( (autoBC523D92_ai >= 0 && lv_vB <= autoBC523D92_ae) || (autoBC523D92_ai < 0 && lv_vB >= autoBC523D92_ae) ) ; lv_vB += autoBC523D92_ai ) {
            DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitBehaviorGet(autoF7355CDB_var, lv_vB)));
            DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s"), UnitBehaviorCount(autoF7355CDB_var, UnitBehaviorGet(autoF7355CDB_var, lv_vB)));
        }
        DataTableSetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)), UnitCargoValue(autoF7355CDB_var, c_unitCargoUnitCount));
        auto28227B4F_ae = UnitCargoValue(autoF7355CDB_var, c_unitCargoUnitCount);
        lv_vB = 0;
        for ( ; ( (auto28227B4F_ai >= 0 && lv_vB <= auto28227B4F_ae) || (auto28227B4F_ai < 0 && lv_vB >= auto28227B4F_ae) ) ; lv_vB += auto28227B4F_ai ) {
            DataTableSetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitGetType(UnitCargo(autoF7355CDB_var, lv_vB))));
            DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitBehaviorCountAll(UnitCargo(autoF7355CDB_var, lv_vB)));
            DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitGetPropertyFixed(UnitCargo(autoF7355CDB_var, lv_vB), c_unitPropLifePercent, c_unitPropCurrent));
            auto3CDF8959_ae = UnitBehaviorCountAll(UnitCargo(autoF7355CDB_var, lv_vB));
            lv_vC = 0;
            for ( ; ( (auto3CDF8959_ai >= 0 && lv_vC <= auto3CDF8959_ae) || (auto3CDF8959_ai < 0 && lv_vC >= auto3CDF8959_ae) ) ; lv_vC += auto3CDF8959_ai ) {
                DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)), (UnitBehaviorGet(UnitCargo(autoF7355CDB_var, lv_vB), lv_vC)));
                DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s"), UnitBehaviorCount(UnitCargo(autoF7355CDB_var, lv_vB), UnitBehaviorGet(UnitCargo(autoF7355CDB_var, lv_vB), lv_vC)));
            }
        }
    }
    DataTableSetInt(true, ("CopyPaste_UnitCount"), lv_vA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_CTRLC_Init () {
    libARRA_gt_UT_CTRLC = TriggerCreate("libARRA_gt_UT_CTRLC_Func");
    TriggerEnable(libARRA_gt_UT_CTRLC, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_CTRLC, c_playerAny, c_keyC, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+V
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_CTRLV_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    int auto00009814_ae;
    int auto00009814_var;
    int auto20E4698F_ae;
    const int auto20E4698F_ai = 1;
    int auto310F88E7_ae;
    const int auto310F88E7_ai = 1;
    int autoE022E1B6_ae;
    const int autoE022E1B6_ai = 1;

    // Variable Initialization
    lv_vCenter = CameraGetTarget(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    auto00009814_ae = DataTableGetInt(true, "CopyPaste_UnitCount");
    auto00009814_var = 1;
    for ( ; auto00009814_var <= auto00009814_ae; auto00009814_var += 1 ) {
        lv_vA += 1;
        UnitCreate(1, UnitTypeFromString(DataTableGetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)))), 0, DataTableGetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA))), PointWithOffsetPolar(lv_vCenter, DataTableGetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA))), DataTableGetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)))), DataTableGetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA))));
        auto20E4698F_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)));
        lv_vB = 0;
        for ( ; ( (auto20E4698F_ai >= 0 && lv_vB <= auto20E4698F_ae) || (auto20E4698F_ai < 0 && lv_vB >= auto20E4698F_ae) ) ; lv_vB += auto20E4698F_ai ) {
            UnitBehaviorAddPlayer(UnitLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), UnitGetOwner(UnitLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s")));
        }
        auto310F88E7_ae = DataTableGetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)));
        lv_vB = 1;
        for ( ; ( (auto310F88E7_ai >= 0 && lv_vB <= auto310F88E7_ae) || (auto310F88E7_ai < 0 && lv_vB >= auto310F88E7_ae) ) ; lv_vB += auto310F88E7_ai ) {
            UnitCargoCreate(UnitLastCreated(), UnitTypeFromString(DataTableGetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), 1);
            autoE022E1B6_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)));
            lv_vC = 0;
            for ( ; ( (autoE022E1B6_ai >= 0 && lv_vC <= autoE022E1B6_ae) || (autoE022E1B6_ai < 0 && lv_vC >= autoE022E1B6_ae) ) ; lv_vC += autoE022E1B6_ai ) {
                UnitBehaviorAddPlayer(UnitCargoLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)))), UnitGetOwner(UnitCargoLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s")));
            }
            UnitSetPropertyFixed(UnitCargoLastCreated(), c_unitPropLifePercent, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB))));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, DataTableGetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, DataTableGetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, DataTableGetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, DataTableGetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, DataTableGetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_CTRLV_Init () {
    libARRA_gt_UT_CTRLV = TriggerCreate("libARRA_gt_UT_CTRLV_Func");
    TriggerEnable(libARRA_gt_UT_CTRLV, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_CTRLV, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheck
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_PathCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libARRA_gt_UT_PathCheckTAB) == false)) {
        TriggerEnable(libARRA_gt_UT_PathCheckTAB, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_E3BF836D"));
    }
    else {
        TriggerEnable(libARRA_gt_UT_PathCheckTAB, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_BD9E6551"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_PathCheck_Init () {
    libARRA_gt_UT_PathCheck = TriggerCreate("libARRA_gt_UT_PathCheck_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_PathCheck, c_playerAny, "-pathcheck", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheckTAB
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_PathCheckTAB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;
    point lv_vPoint;
    bool lv_vPointsConnectedByPathing;
    int lv_vPathingCostBetweenPoints;
    bool lv_vUnitCanPathToPoint11000;
    bool lv_vPointIsPassable;
    fixed lv_vPathingCostBetweenPointsReal;
    fixed lv_vAIPathingCostUnit;
    int lv_vGround;
    text lv_vGroundType;

    // Automatic Variable Declarations
    int autoCCA71F48_val;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);
    lv_vPoint = CameraGetTarget(EventPlayer());
    lv_vPointsConnectedByPathing = PointPathingIsConnected(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vPathingCostBetweenPoints = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vUnitCanPathToPoint11000 = UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 1000.0);
    lv_vPointIsPassable = PointPathingPassable(lv_vPoint);
    lv_vPathingCostBetweenPointsReal = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vAIPathingCostUnit = AIPathingCostUnit(lv_vUnit, lv_vPoint, c_includeAllBuildings);
    lv_vGround = PathingType(lv_vPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    autoCCA71F48_val = lv_vGround;
    if (autoCCA71F48_val == c_pathingGround) {
        lv_vGroundType = StringExternal("Param/Value/lib_ARRA_D4B0A920");
    }
    else if (autoCCA71F48_val == c_pathingCliff) {
        lv_vGroundType = StringExternal("Param/Value/lib_ARRA_A965AC7E");
    }
    else if (autoCCA71F48_val == c_pathingBuilding) {
        lv_vGroundType = StringExternal("Param/Value/lib_ARRA_8FD0EB3B");
    }
    else if (autoCCA71F48_val == c_pathingUnpathable) {
        lv_vGroundType = StringExternal("Param/Value/lib_ARRA_056F5F8D");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_ARRA_B1A23BB9", "B", IntToText(lv_vPathingCostBetweenPoints));
    TextExpressionSetToken("Param/Expression/lib_ARRA_B1A23BB9", "C", libNtve_gf_ConvertBooleanToText(lv_vUnitCanPathToPoint11000));
    TextExpressionSetToken("Param/Expression/lib_ARRA_B1A23BB9", "G", FixedToText(lv_vAIPathingCostUnit, c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_ARRA_B1A23BB9", "A", libNtve_gf_ConvertBooleanToText(lv_vPointsConnectedByPathing));
    TextExpressionSetToken("Param/Expression/lib_ARRA_B1A23BB9", "E", libNtve_gf_ConvertBooleanToText(lv_vPointIsPassable));
    TextExpressionSetToken("Param/Expression/lib_ARRA_B1A23BB9", "D", lv_vGroundType);
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_B1A23BB9"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_PathCheckTAB_Init () {
    libARRA_gt_UT_PathCheckTAB = TriggerCreate("libARRA_gt_UT_PathCheckTAB_Func");
    TriggerEnable(libARRA_gt_UT_PathCheckTAB, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_PathCheckTAB, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Light
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Light_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libARRA_gt_UT_Plus) == false)) {
        TriggerEnable(libARRA_gt_UT_Plus, true);
        TriggerEnable(libARRA_gt_UT_Minus, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_BD0B8ED7"));
        GameSetSpeedLocked(true);
    }
    else {
        TriggerEnable(libARRA_gt_UT_Plus, false);
        TriggerEnable(libARRA_gt_UT_Minus, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_36E33633"));
        GameSetSpeedLocked(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Light_Init () {
    libARRA_gt_UT_Light = TriggerCreate("libARRA_gt_UT_Light_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Light, c_playerAny, "-light", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Plus
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Plus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gv_uT_LighIndex += 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, libARRA_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, libARRA_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Plus_Init () {
    libARRA_gt_UT_Plus = TriggerCreate("libARRA_gt_UT_Plus_Func");
    TriggerEnable(libARRA_gt_UT_Plus, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_Plus, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Minus
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Minus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gv_uT_LighIndex -= 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, libARRA_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, libARRA_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Minus_Init () {
    libARRA_gt_UT_Minus = TriggerCreate("libARRA_gt_UT_Minus_Func");
    TriggerEnable(libARRA_gt_UT_Minus, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_Minus, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileMovers
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_MissileMovers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gv_mIssilePlayer = EventPlayer();
    CatalogFieldValueSet(c_gameCatalogBehavior, "MissileCoef", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
    UnitGroupAddUnitGroup(libARRA_gv_uT_MissileCreators, UnitGroupSelected(EventPlayer()));
    TriggerEnable(libARRA_gt_UT_MissileCreated, true);
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        UnitGroupClear(libARRA_gv_uT_MissileCreators);
        TriggerEnable(libARRA_gt_UT_MissileCreated, false);
    }

    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_MissileMovers_Init () {
    libARRA_gt_UT_MissileMovers = TriggerCreate("libARRA_gt_UT_MissileMovers_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_MissileMovers, c_playerAny, "-mm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileCreated
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_MissileCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libARRA_gv_uT_MissileCreators, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "MissileCoef", libARRA_gv_mIssilePlayer, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_MissileCreated_Init () {
    libARRA_gt_UT_MissileCreated = TriggerCreate("libARRA_gt_UT_MissileCreated_Func");
    TriggerEnable(libARRA_gt_UT_MissileCreated, false);
    TriggerAddEventUnitCreated(libARRA_gt_UT_MissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Height
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Height_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB69DC90D_g;
    int autoB69DC90D_u;
    unit autoB69DC90D_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB69DC90D_g = UnitGroupSelected(EventPlayer());
    autoB69DC90D_u = UnitGroupCount(autoB69DC90D_g, c_unitCountAll);
    for (;; autoB69DC90D_u -= 1) {
        autoB69DC90D_var = UnitGroupUnitFromEnd(autoB69DC90D_g, autoB69DC90D_u);
        if (autoB69DC90D_var == null) { break; }
        UnitSetPropertyFixed(autoB69DC90D_var, c_unitPropHeight, StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Height_Init () {
    libARRA_gt_UT_Height = TriggerCreate("libARRA_gt_UT_Height_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Height, c_playerAny, "-height", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackSpeed
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_AttackSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    unitgroup autoB58A7CF8_g;
    int autoB58A7CF8_u;
    unit autoB58A7CF8_var;
    int autoDB99F534_ae;
    const int autoDB99F534_ai = 1;
    unitgroup autoE699347F_g;
    int autoE699347F_u;
    unit autoE699347F_var;
    int auto5F4E95B8_ae;
    const int auto5F4E95B8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoE699347F_g = UnitGroupSelected(EventPlayer());
        autoE699347F_u = UnitGroupCount(autoE699347F_g, c_unitCountAll);
        for (;; autoE699347F_u -= 1) {
            autoE699347F_var = UnitGroupUnitFromEnd(autoE699347F_g, autoE699347F_u);
            if (autoE699347F_var == null) { break; }
            auto5F4E95B8_ae = UnitWeaponCount(autoE699347F_var);
            lv_a = 1;
            for ( ; ( (auto5F4E95B8_ai >= 0 && lv_a <= auto5F4E95B8_ae) || (auto5F4E95B8_ai < 0 && lv_a >= auto5F4E95B8_ae) ) ; lv_a += auto5F4E95B8_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoE699347F_var, lv_a), "RateMultiplier", UnitGetOwner(autoE699347F_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        autoB58A7CF8_g = UnitGroupSelected(EventPlayer());
        autoB58A7CF8_u = UnitGroupCount(autoB58A7CF8_g, c_unitCountAll);
        for (;; autoB58A7CF8_u -= 1) {
            autoB58A7CF8_var = UnitGroupUnitFromEnd(autoB58A7CF8_g, autoB58A7CF8_u);
            if (autoB58A7CF8_var == null) { break; }
            autoDB99F534_ae = UnitWeaponCount(autoB58A7CF8_var);
            lv_a = 1;
            for ( ; ( (autoDB99F534_ai >= 0 && lv_a <= autoDB99F534_ae) || (autoDB99F534_ai < 0 && lv_a >= autoDB99F534_ae) ) ; lv_a += autoDB99F534_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoB58A7CF8_var, lv_a), "RateMultiplier", UnitGetOwner(autoB58A7CF8_var), "1", c_upgradeOperationSet);
            }
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_AttackSpeed_Init () {
    libARRA_gt_UT_AttackSpeed = TriggerCreate("libARRA_gt_UT_AttackSpeed_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_AttackSpeed, c_playerAny, "-as", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Life
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Life_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB642CCD8_g;
    int autoB642CCD8_u;
    unit autoB642CCD8_var;
    unitgroup autoB40A0088_g;
    int autoB40A0088_u;
    unit autoB40A0088_var;
    unitgroup auto102813DE_g;
    int auto102813DE_u;
    unit auto102813DE_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoB642CCD8_g = UnitGroupSelected(EventPlayer());
        autoB642CCD8_u = UnitGroupCount(autoB642CCD8_g, c_unitCountAll);
        for (;; autoB642CCD8_u -= 1) {
            autoB642CCD8_var = UnitGroupUnitFromEnd(autoB642CCD8_g, autoB642CCD8_u);
            if (autoB642CCD8_var == null) { break; }
            UnitSetPropertyFixed(autoB642CCD8_var, c_unitPropLifeMax, UnitTypeGetProperty(UnitGetType(autoB642CCD8_var), c_unitPropLifeMax));
            UnitSetPropertyFixed(autoB642CCD8_var, c_unitPropShieldsMax, UnitTypeGetProperty(UnitGetType(autoB642CCD8_var), c_unitPropShieldsMax));
            UnitSetPropertyFixed(autoB642CCD8_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(autoB642CCD8_var, c_unitPropShieldsPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "2")) {
            autoB40A0088_g = UnitGroupSelected(EventPlayer());
            autoB40A0088_u = UnitGroupCount(autoB40A0088_g, c_unitCountAll);
            for (;; autoB40A0088_u -= 1) {
                autoB40A0088_var = UnitGroupUnitFromEnd(autoB40A0088_g, autoB40A0088_u);
                if (autoB40A0088_var == null) { break; }
                UnitSetPropertyFixed(autoB40A0088_var, c_unitPropShieldsMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(autoB40A0088_var, c_unitPropShieldsPercent, 100.0);
            }
        }
        else {
            auto102813DE_g = UnitGroupSelected(EventPlayer());
            auto102813DE_u = UnitGroupCount(auto102813DE_g, c_unitCountAll);
            for (;; auto102813DE_u -= 1) {
                auto102813DE_var = UnitGroupUnitFromEnd(auto102813DE_g, auto102813DE_u);
                if (auto102813DE_var == null) { break; }
                UnitSetPropertyFixed(auto102813DE_var, c_unitPropLifeMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto102813DE_var, c_unitPropLifePercent, 100.0);
            }
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Life_Init () {
    libARRA_gt_UT_Life = TriggerCreate("libARRA_gt_UT_Life_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Life, c_playerAny, "-life", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Energy
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Energy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC8173A1A_g;
    int autoC8173A1A_u;
    unit autoC8173A1A_var;
    unitgroup autoB3512139_g;
    int autoB3512139_u;
    unit autoB3512139_var;
    unitgroup auto1B7A393C_g;
    int auto1B7A393C_u;
    unit auto1B7A393C_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoC8173A1A_g = UnitGroupSelected(EventPlayer());
        autoC8173A1A_u = UnitGroupCount(autoC8173A1A_g, c_unitCountAll);
        for (;; autoC8173A1A_u -= 1) {
            autoC8173A1A_var = UnitGroupUnitFromEnd(autoC8173A1A_g, autoC8173A1A_u);
            if (autoC8173A1A_var == null) { break; }
            UnitSetPropertyFixed(autoC8173A1A_var, c_unitPropEnergyMax, UnitTypeGetProperty(UnitGetType(autoC8173A1A_var), c_unitPropEnergyMax));
            UnitSetPropertyFixed(autoC8173A1A_var, c_unitPropLifeRegen, UnitTypeGetProperty(UnitGetType(autoC8173A1A_var), c_unitPropEnergyRegen));
            UnitSetPropertyFixed(autoC8173A1A_var, c_unitPropEnergyPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "regen")) {
            autoB3512139_g = UnitGroupSelected(EventPlayer());
            autoB3512139_u = UnitGroupCount(autoB3512139_g, c_unitCountAll);
            for (;; autoB3512139_u -= 1) {
                autoB3512139_var = UnitGroupUnitFromEnd(autoB3512139_g, autoB3512139_u);
                if (autoB3512139_var == null) { break; }
                UnitSetPropertyFixed(autoB3512139_var, c_unitPropEnergyRegen, StringToFixed(StringWord(EventChatMessage(false), 2)));
            }
        }
        else {
            auto1B7A393C_g = UnitGroupSelected(EventPlayer());
            auto1B7A393C_u = UnitGroupCount(auto1B7A393C_g, c_unitCountAll);
            for (;; auto1B7A393C_u -= 1) {
                auto1B7A393C_var = UnitGroupUnitFromEnd(auto1B7A393C_g, auto1B7A393C_u);
                if (auto1B7A393C_var == null) { break; }
                UnitSetPropertyFixed(auto1B7A393C_var, c_unitPropEnergyMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto1B7A393C_var, c_unitPropEnergyPercent, 100.0);
            }
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Energy_Init () {
    libARRA_gt_UT_Energy = TriggerCreate("libARRA_gt_UT_Energy_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Energy, c_playerAny, "-energy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Movement Speed
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_MovementSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8D883855_g;
    int auto8D883855_u;
    unit auto8D883855_var;
    unitgroup auto0F9CCC55_g;
    int auto0F9CCC55_u;
    unit auto0F9CCC55_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto8D883855_g = UnitGroupSelected(EventPlayer());
        auto8D883855_u = UnitGroupCount(auto8D883855_g, c_unitCountAll);
        for (;; auto8D883855_u -= 1) {
            auto8D883855_var = UnitGroupUnitFromEnd(auto8D883855_g, auto8D883855_u);
            if (auto8D883855_var == null) { break; }
            UnitSetPropertyFixed(auto8D883855_var, c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(auto8D883855_var), c_unitPropMovementSpeed));
        }
    }
    else {
        auto0F9CCC55_g = UnitGroupSelected(EventPlayer());
        auto0F9CCC55_u = UnitGroupCount(auto0F9CCC55_g, c_unitCountAll);
        for (;; auto0F9CCC55_u -= 1) {
            auto0F9CCC55_var = UnitGroupUnitFromEnd(auto0F9CCC55_g, auto0F9CCC55_u);
            if (auto0F9CCC55_var == null) { break; }
            UnitSetPropertyFixed(auto0F9CCC55_var, c_unitPropMovementSpeed, StringToFixed(StringWord(EventChatMessage(false), 2)));
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_MovementSpeed_Init () {
    libARRA_gt_UT_MovementSpeed = TriggerCreate("libARRA_gt_UT_MovementSpeed_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_MovementSpeed, c_playerAny, "-ms", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Acceleration
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Acceleration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE76BC6FD_g;
    int autoE76BC6FD_u;
    unit autoE76BC6FD_var;
    unitgroup auto1DEF8F27_g;
    int auto1DEF8F27_u;
    unit auto1DEF8F27_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoE76BC6FD_g = UnitGroupSelected(EventPlayer());
        autoE76BC6FD_u = UnitGroupCount(autoE76BC6FD_g, c_unitCountAll);
        for (;; autoE76BC6FD_u -= 1) {
            autoE76BC6FD_var = UnitGroupUnitFromEnd(autoE76BC6FD_g, autoE76BC6FD_u);
            if (autoE76BC6FD_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoE76BC6FD_var), "Acceleration", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoE76BC6FD_var), "Acceleration", 7), c_upgradeOperationSet);
            TextTagCreate(StringToText(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoE76BC6FD_var), "Acceleration", EventPlayer())), 24, UnitGetPosition(autoE76BC6FD_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), autoE76BC6FD_var, 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 15.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        }
    }
    else {
        auto1DEF8F27_g = UnitGroupSelected(EventPlayer());
        auto1DEF8F27_u = UnitGroupCount(auto1DEF8F27_g, c_unitCountAll);
        for (;; auto1DEF8F27_u -= 1) {
            auto1DEF8F27_var = UnitGroupUnitFromEnd(auto1DEF8F27_g, auto1DEF8F27_u);
            if (auto1DEF8F27_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto1DEF8F27_var), "Acceleration", EventPlayer(), StringWord(EventChatMessage(false), 2));
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Acceleration_Init () {
    libARRA_gt_UT_Acceleration = TriggerCreate("libARRA_gt_UT_Acceleration_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Acceleration, c_playerAny, "-acc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Range
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Range_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto6BBA0EAF_g;
    int auto6BBA0EAF_u;
    unit auto6BBA0EAF_var;
    int autoB6C2E1FC_ae;
    const int autoB6C2E1FC_ai = 1;
    unitgroup auto45256384_g;
    int auto45256384_u;
    unit auto45256384_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto45256384_g = UnitGroupSelected(EventPlayer());
        auto45256384_u = UnitGroupCount(auto45256384_g, c_unitCountAll);
        for (;; auto45256384_u -= 1) {
            auto45256384_var = UnitGroupUnitFromEnd(auto45256384_g, auto45256384_u);
            if (auto45256384_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto45256384_var, StringToInt(StringWord(EventChatMessage(false), 3))), "Range", UnitGetOwner(auto45256384_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto45256384_var, 1), "Range", UnitGetOwner(auto45256384_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto6BBA0EAF_g = UnitGroupSelected(EventPlayer());
        auto6BBA0EAF_u = UnitGroupCount(auto6BBA0EAF_g, c_unitCountAll);
        for (;; auto6BBA0EAF_u -= 1) {
            auto6BBA0EAF_var = UnitGroupUnitFromEnd(auto6BBA0EAF_g, auto6BBA0EAF_u);
            if (auto6BBA0EAF_var == null) { break; }
            autoB6C2E1FC_ae = UnitWeaponCount(auto6BBA0EAF_var);
            lv_i = 1;
            for ( ; ( (autoB6C2E1FC_ai >= 0 && lv_i <= autoB6C2E1FC_ae) || (autoB6C2E1FC_ai < 0 && lv_i >= autoB6C2E1FC_ae) ) ; lv_i += autoB6C2E1FC_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto6BBA0EAF_var, lv_i), "Range", UnitGetOwner(auto6BBA0EAF_var), CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(auto6BBA0EAF_var, lv_i), "Range", 7), c_upgradeOperationSet);
            }
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Range_Init () {
    libARRA_gt_UT_Range = TriggerCreate("libARRA_gt_UT_Range_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Range, c_playerAny, "-range", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ARange
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ARange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    string lv_vAbv;

    // Automatic Variable Declarations
    unitgroup auto02822897_g;
    int auto02822897_u;
    unit auto02822897_var;
    unit auto998B6B51_unit;
    int auto998B6B51_i;
    unitgroup autoC27CFF3A_g;
    int autoC27CFF3A_u;
    unit autoC27CFF3A_var;
    unit auto8CB6C100_unit;
    int auto8CB6C100_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto02822897_g = UnitGroupSelected(EventPlayer());
        auto02822897_u = UnitGroupCount(auto02822897_g, c_unitCountAll);
        for (;; auto02822897_u -= 1) {
            auto02822897_var = UnitGroupUnitFromEnd(auto02822897_g, auto02822897_u);
            if (auto02822897_var == null) { break; }
            auto998B6B51_unit = auto02822897_var;
            auto998B6B51_i = 1;
            for ( ; auto998B6B51_i <= UnitAbilityCount(auto998B6B51_unit) ; auto998B6B51_i += 1 ) {
                lv_vAbility = UnitAbilityGet(auto998B6B51_unit, auto998B6B51_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(auto02822897_var), StringWord(EventChatMessage(false), 2));
                    TextExpressionSetToken("Param/Expression/lib_ARRA_04E07A4D", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_ARRA_04E07A4D", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_04E07A4D"), true);
                }

            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_79DECA10"));
        autoC27CFF3A_g = UnitGroupSelected(EventPlayer());
        autoC27CFF3A_u = UnitGroupCount(autoC27CFF3A_g, c_unitCountAll);
        for (;; autoC27CFF3A_u -= 1) {
            autoC27CFF3A_var = UnitGroupUnitFromEnd(autoC27CFF3A_g, autoC27CFF3A_u);
            if (autoC27CFF3A_var == null) { break; }
            auto8CB6C100_unit = autoC27CFF3A_var;
            auto8CB6C100_i = 1;
            for ( ; auto8CB6C100_i <= UnitAbilityCount(auto8CB6C100_unit) ; auto8CB6C100_i += 1 ) {
                lv_vAbility = UnitAbilityGet(auto8CB6C100_unit, auto8CB6C100_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(autoC27CFF3A_var), CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", 0));
                    TextExpressionSetToken("Param/Expression/lib_ARRA_813A2E98", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_ARRA_813A2E98", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_813A2E98"), false);
                }

            }
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ARange_Init () {
    libARRA_gt_UT_ARange = TriggerCreate("libARRA_gt_UT_ARange_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ARange, c_playerAny, "-arange", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Armor
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Armor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3DCDE74B_g;
    int auto3DCDE74B_u;
    unit auto3DCDE74B_var;
    unitgroup autoEB55FA69_g;
    int autoEB55FA69_u;
    unit autoEB55FA69_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoEB55FA69_g = UnitGroupSelected(EventPlayer());
        autoEB55FA69_u = UnitGroupCount(autoEB55FA69_g, c_unitCountAll);
        for (;; autoEB55FA69_u -= 1) {
            autoEB55FA69_var = UnitGroupUnitFromEnd(autoEB55FA69_g, autoEB55FA69_u);
            if (autoEB55FA69_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoEB55FA69_var), "ShieldArmor", UnitGetOwner(autoEB55FA69_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoEB55FA69_var), "LifeArmor", UnitGetOwner(autoEB55FA69_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto3DCDE74B_g = UnitGroupSelected(EventPlayer());
        auto3DCDE74B_u = UnitGroupCount(auto3DCDE74B_g, c_unitCountAll);
        for (;; auto3DCDE74B_u -= 1) {
            auto3DCDE74B_var = UnitGroupUnitFromEnd(auto3DCDE74B_g, auto3DCDE74B_u);
            if (auto3DCDE74B_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto3DCDE74B_var), "LifeArmor", UnitGetOwner(auto3DCDE74B_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto3DCDE74B_var), "LifeArmor", 7), c_upgradeOperationSet);
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto3DCDE74B_var), "ShieldArmor", UnitGetOwner(auto3DCDE74B_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto3DCDE74B_var), "ShieldArmor", 7), c_upgradeOperationSet);
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Armor_Init () {
    libARRA_gt_UT_Armor = TriggerCreate("libARRA_gt_UT_Armor_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Armor, c_playerAny, "-armor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TintColor
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_TintColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE0948A3D_g;
    int autoE0948A3D_u;
    unit autoE0948A3D_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE0948A3D_g = UnitGroupSelected(EventPlayer());
    autoE0948A3D_u = UnitGroupCount(autoE0948A3D_g, c_unitCountAll);
    for (;; autoE0948A3D_u -= 1) {
        autoE0948A3D_var = UnitGroupUnitFromEnd(autoE0948A3D_g, autoE0948A3D_u);
        if (autoE0948A3D_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE0948A3D_var, (("SetTintColor " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_TintColor_Init () {
    libARRA_gt_UT_TintColor = TriggerCreate("libARRA_gt_UT_TintColor_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_TintColor, c_playerAny, "-tint", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Scale
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Scale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB6AAF1BA_g;
    int autoB6AAF1BA_u;
    unit autoB6AAF1BA_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB6AAF1BA_g = UnitGroupSelected(EventPlayer());
    autoB6AAF1BA_u = UnitGroupCount(autoB6AAF1BA_g, c_unitCountAll);
    for (;; autoB6AAF1BA_u -= 1) {
        autoB6AAF1BA_var = UnitGroupUnitFromEnd(autoB6AAF1BA_g, autoB6AAF1BA_u);
        if (autoB6AAF1BA_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoB6AAF1BA_var, (("SetScale " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Scale_Init () {
    libARRA_gt_UT_Scale = TriggerCreate("libARRA_gt_UT_Scale_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Scale, c_playerAny, "-scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TimeScale
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_TimeScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vAmount;

    // Automatic Variable Declarations
    unitgroup autoDBD68F7E_g;
    int autoDBD68F7E_u;
    unit autoDBD68F7E_var;

    // Variable Initialization
    lv_vAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount >= 0.01)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TimeScaleIncreased", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
        TextExpressionSetToken("Param/Expression/lib_ARRA_5424FB88", "A", FixedToText(lv_vAmount, 2));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_5424FB88"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_ARRA_221FAA86", "A", StringExternal("Param/Value/lib_ARRA_BA5D1A65"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_221FAA86"));
    }
    autoDBD68F7E_g = UnitGroupSelected(EventPlayer());
    autoDBD68F7E_u = UnitGroupCount(autoDBD68F7E_g, c_unitCountAll);
    for (;; autoDBD68F7E_u -= 1) {
        autoDBD68F7E_var = UnitGroupUnitFromEnd(autoDBD68F7E_g, autoDBD68F7E_u);
        if (autoDBD68F7E_var == null) { break; }
        UnitBehaviorAddPlayer(autoDBD68F7E_var, "TimeScaleIncreased", EventPlayer(), 1);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_TimeScale_Init () {
    libARRA_gt_UT_TimeScale = TriggerCreate("libARRA_gt_UT_TimeScale_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_TimeScale, c_playerAny, "-timescale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ActorMsg
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ActorMsg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB13C7D26_g;
    int autoB13C7D26_u;
    unit autoB13C7D26_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB13C7D26_g = UnitGroupSelected(EventPlayer());
    autoB13C7D26_u = UnitGroupCount(autoB13C7D26_g, c_unitCountAll);
    for (;; autoB13C7D26_u -= 1) {
        autoB13C7D26_var = UnitGroupUnitFromEnd(autoB13C7D26_g, autoB13C7D26_u);
        if (autoB13C7D26_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoB13C7D26_var, (StringSub(EventChatMessage(false), (StringLength(StringWord(EventChatMessage(false), 1))+1), StringLength(EventChatMessage(false)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ActorMsg_Init () {
    libARRA_gt_UT_ActorMsg = TriggerCreate("libARRA_gt_UT_ActorMsg_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ActorMsg, c_playerAny, "-actorsend", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Air & Ground
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_AirGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB7D40FF3_g;
    int autoB7D40FF3_u;
    unit autoB7D40FF3_var;
    unitgroup auto78C46CFB_g;
    int auto78C46CFB_u;
    unit auto78C46CFB_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-airbeh")) {
        auto78C46CFB_g = UnitGroupSelected(EventPlayer());
        auto78C46CFB_u = UnitGroupCount(auto78C46CFB_g, c_unitCountAll);
        for (;; auto78C46CFB_u -= 1) {
            auto78C46CFB_var = UnitGroupUnitFromEnd(auto78C46CFB_g, auto78C46CFB_u);
            if (auto78C46CFB_var == null) { break; }
            if ((UnitBehaviorCount(auto78C46CFB_var, "GroundBeh") > 0)) {
                UnitBehaviorRemovePlayer(auto78C46CFB_var, "GroundBeh", EventPlayer(), 1);
            }

            UnitBehaviorAddPlayer(auto78C46CFB_var, "AirBeh", EventPlayer(), 1);
        }
    }
    else {
        autoB7D40FF3_g = UnitGroupSelected(EventPlayer());
        autoB7D40FF3_u = UnitGroupCount(autoB7D40FF3_g, c_unitCountAll);
        for (;; autoB7D40FF3_u -= 1) {
            autoB7D40FF3_var = UnitGroupUnitFromEnd(autoB7D40FF3_g, autoB7D40FF3_u);
            if (autoB7D40FF3_var == null) { break; }
            if ((UnitBehaviorCount(autoB7D40FF3_var, "AirBeh") > 0)) {
                UnitBehaviorRemovePlayer(autoB7D40FF3_var, "AirBeh", EventPlayer(), 1);
            }

            UnitBehaviorAddPlayer(autoB7D40FF3_var, "GroundBeh", EventPlayer(), 1);
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_AirGround_Init () {
    libARRA_gt_UT_AirGround = TriggerCreate("libARRA_gt_UT_AirGround_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_AirGround, c_playerAny, "-airbeh", false);
    TriggerAddEventChatMessage(libARRA_gt_UT_AirGround, c_playerAny, "-groundbeh", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_TurnOnOff
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Camera_TurnOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gv_uT_Camera_CameraActive == false)) {
        libARRA_gv_uT_Camera_CameraActive = true;
        TriggerExecute(libARRA_gt_UT_Camera_PeriodicUpdate, true, false);
        TriggerEnable(libARRA_gt_UT_Camera_KeyDown, true);
        TriggerEnable(libARRA_gt_UT_Camera_KeyUp, true);
        UnitClearSelection(EventPlayer());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_2400D414"));
    }
    else {
        libARRA_gv_uT_Camera_CameraActive = false;
        TriggerEnable(libARRA_gt_UT_Camera_KeyDown, false);
        TriggerEnable(libARRA_gt_UT_Camera_KeyUp, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_CE86C76A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Camera_TurnOnOff_Init () {
    libARRA_gt_UT_Camera_TurnOnOff = TriggerCreate("libARRA_gt_UT_Camera_TurnOnOff_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Camera_TurnOnOff, c_playerAny, "-cam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Reset
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Camera_Reset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueYaw, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDepthOfField), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueRoll), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 1.0, -1, 10.0);
    libARRA_gv_uT_Camera_AngleofAttack[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    libARRA_gv_uT_Camera_Rotation[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_A1891536"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Camera_Reset_Init () {
    libARRA_gt_UT_Camera_Reset = TriggerCreate("libARRA_gt_UT_Camera_Reset_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Camera_Reset, c_playerAny, "-cam reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Top
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Camera_Top_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), RegionGetCenter(RegionPlayableMap()), 2.0, -1, 10.0, false);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, 45.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, (libNtve_gf_WidthOfRegion(RegionPlayableMap()) * 1.5), 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 90.0, 2.0, -1, 10.0);
    libARRA_gv_uT_Camera_AngleofAttack[EventPlayer()] = 90.0;
    CameraSetValue(EventPlayer(), c_cameraValueYaw, 90.0, 2.0, -1, 10.0);
    libARRA_gv_uT_Camera_Rotation[EventPlayer()] = 90.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Camera_Top_Init () {
    libARRA_gt_UT_Camera_Top = TriggerCreate("libARRA_gt_UT_Camera_Top_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Camera_Top, c_playerAny, "-cam top", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Up
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Camera_KeyUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto820482AE_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto820482AE_val = EventKeyPressed();
    if (auto820482AE_val == c_keyQ) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_Q)][EventPlayer()] = false;
    }
    else if (auto820482AE_val == c_keyE) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_E)][EventPlayer()] = false;
    }
    else if (auto820482AE_val == c_keyW) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_W)][EventPlayer()] = false;
    }
    else if (auto820482AE_val == c_keyS) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_S)][EventPlayer()] = false;
    }
    else if (auto820482AE_val == c_keyA) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_A)][EventPlayer()] = false;
    }
    else if (auto820482AE_val == c_keyD) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_D)][EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Camera_KeyUp_Init () {
    libARRA_gt_UT_Camera_KeyUp = TriggerCreate("libARRA_gt_UT_Camera_KeyUp_Func");
    TriggerEnable(libARRA_gt_UT_Camera_KeyUp, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_Camera_KeyUp, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Down
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Camera_KeyDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto538D0D90_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto538D0D90_val = EventKeyPressed();
    if (auto538D0D90_val == c_keyQ) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_Q)][EventPlayer()] = true;
    }
    else if (auto538D0D90_val == c_keyE) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_E)][EventPlayer()] = true;
    }
    else if (auto538D0D90_val == c_keyW) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_W)][EventPlayer()] = true;
    }
    else if (auto538D0D90_val == c_keyS) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_S)][EventPlayer()] = true;
    }
    else if (auto538D0D90_val == c_keyA) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_A)][EventPlayer()] = true;
    }
    else if (auto538D0D90_val == c_keyD) {
        libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_D)][EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Camera_KeyDown_Init () {
    libARRA_gt_UT_Camera_KeyDown = TriggerCreate("libARRA_gt_UT_Camera_KeyDown_Func");
    TriggerEnable(libARRA_gt_UT_Camera_KeyDown, false);
    TriggerAddEventKeyPressed(libARRA_gt_UT_Camera_KeyDown, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Camera_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vDuration;
    fixed lv_vDistanceStep;
    fixed lv_vBaseDistanceStep;
    fixed lv_vAngleStep;
    fixed lv_vRotationStep;
    int lv_vPlayer;

    // Automatic Variable Declarations
    const int auto9FC4A11B_ae = 2;
    const int auto9FC4A11B_ai = 1;

    // Variable Initialization
    lv_vDuration = 0.5;
    lv_vDistanceStep = 6.0;
    lv_vBaseDistanceStep = 8.0;
    lv_vAngleStep = 0.5;
    lv_vRotationStep = 1.5;
    lv_vPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libARRA_gv_uT_Camera_CameraActive == true)) {
        lv_vPlayer = 1;
        for ( ; ( (auto9FC4A11B_ai >= 0 && lv_vPlayer <= auto9FC4A11B_ae) || (auto9FC4A11B_ai < 0 && lv_vPlayer >= auto9FC4A11B_ae) ) ; lv_vPlayer += auto9FC4A11B_ai ) {
            if ((libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_Q)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) - lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_E)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) + lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_W)][lv_vPlayer] == true)) {
                libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer] += lv_vAngleStep;
                if ((libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer] > 90.0)) {
                    libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer] = 90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_S)][lv_vPlayer] == true)) {
                libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer] -= lv_vAngleStep;
                if ((libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer] < -90.0)) {
                    libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer] = -90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, libARRA_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_A)][lv_vPlayer] == true)) {
                libARRA_gv_uT_Camera_Rotation[lv_vPlayer] -= lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, libARRA_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((libARRA_gv_uT_Camera_ActiveKeys[(libARRA_ge_UT_Camera_Keys_D)][lv_vPlayer] == true)) {
                libARRA_gv_uT_Camera_Rotation[lv_vPlayer] += lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, libARRA_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Camera_PeriodicUpdate_Init () {
    libARRA_gt_UT_Camera_PeriodicUpdate = TriggerCreate("libARRA_gt_UT_Camera_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Dummy
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Dummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    string auto6B2472F3_val;
    const int autoC40755AB_ae = 20;
    int autoC40755AB_var;

    // Variable Initialization
    lv_vPlayer = 3;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6B2472F3_val = StringWord(EventChatMessage(false), 2);
    if (auto6B2472F3_val == "armored") {
        UnitCreate(1, "DummyArmored", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto6B2472F3_val == "light") {
        UnitCreate(1, "DummyLight", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto6B2472F3_val == "structure") {
        UnitCreate(1, "DummyStructure", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else {
        UnitCreate(1, "Dummy", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    TextTagCreate(StringExternal("Param/Value/lib_ARRA_FC60DEBD"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\void_pure_black_backgroundcolor_diff.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    libARRA_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
    autoC40755AB_var = 1;
    for ( ; autoC40755AB_var <= autoC40755AB_ae; autoC40755AB_var += 1 ) {
        if ((UnitIsAlive(libARRA_gv_uT_DummyUnits[autoC40755AB_var]) == false)) {
            libARRA_gv_uT_DummyUnits[autoC40755AB_var] = UnitLastCreated();
            UnitSetCustomValue(UnitLastCreated(), libARRA_gv_uT_DummyCustomValue, autoC40755AB_var);
            break;
        }

    }
    UnitGroupAdd(libARRA_gv_uT_Dummies, UnitLastCreated());
    TriggerEnable(libARRA_gt_UT_DummyTakesDamage, true);
    TriggerEnable(libARRA_gt_UT_DummyUpdate, true);
    TriggerEnable(libARRA_gt_UT_DummyDestroyed, true);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Dummy_Init () {
    libARRA_gt_UT_Dummy = TriggerCreate("libARRA_gt_UT_Dummy_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Dummy, c_playerAny, "-dummy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyTakesDamage
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DummyTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vIndex = FixedToInt(UnitGetCustomValue(EventUnit(), libARRA_gv_uT_DummyCustomValue));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libARRA_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gv_uT_DummyDamage[lv_vIndex][0] += EventUnitDamageAmount();
    libARRA_gv_uT_DummyDamage[lv_vIndex][1] += EventUnitDamageAmount();
    if ((TimerGetElapsed(libARRA_gv_uT_DummyTimer[lv_vIndex][0]) <= 0.0)) {
        TimerStart(libARRA_gv_uT_DummyTimer[lv_vIndex][0], 5.0, false, c_timeGame);
        if ((TimerGetElapsed(libARRA_gv_uT_DummyTimer[lv_vIndex][1]) <= 0.0)) {
            TimerStart(libARRA_gv_uT_DummyTimer[lv_vIndex][1], 524287.0, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DummyTakesDamage_Init () {
    libARRA_gt_UT_DummyTakesDamage = TriggerCreate("libARRA_gt_UT_DummyTakesDamage_Func");
    TriggerEnable(libARRA_gt_UT_DummyTakesDamage, false);
    TriggerAddEventUnitDamaged(libARRA_gt_UT_DummyTakesDamage, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyUpdate
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DummyUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoF1A63BAD_ae = 20;
    const int autoF1A63BAD_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (autoF1A63BAD_ai >= 0 && lv_index <= autoF1A63BAD_ae) || (autoF1A63BAD_ai < 0 && lv_index >= autoF1A63BAD_ae) ) ; lv_index += autoF1A63BAD_ai ) {
        if ((EventTimer() == libARRA_gv_uT_DummyTimer[lv_index][0])) {
            if ((libARRA_gv_uT_DummyDamage[lv_index][0] <= 0.5)) {
                TextExpressionSetToken("Param/Expression/lib_ARRA_2ABAD0B1", "A", FixedToText((libARRA_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_ARRA_2ABAD0B1", "B", FixedToText((TimerGetElapsed(libARRA_gv_uT_DummyTimer[lv_index][1]) - 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_ARRA_2ABAD0B1", "C", FixedToText((libARRA_gv_uT_DummyDamage[lv_index][1] / (TimerGetElapsed(libARRA_gv_uT_DummyTimer[lv_index][1]) - 5.0)), 1));
                TextTagSetText(libARRA_gf_TextTagForUnit(libARRA_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_ARRA_2ABAD0B1"));
                libARRA_gv_uT_DummyDamage[lv_index][0] = 0.0;
                libARRA_gv_uT_DummyDamage[lv_index][1] = 0.0;
                TimerStart(libARRA_gv_uT_DummyTimer[lv_index][1], 524287.0, false, c_timeGame);
                TimerPause(libARRA_gv_uT_DummyTimer[lv_index][1], true);
                TimerStart(libARRA_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                TimerPause(libARRA_gv_uT_DummyTimer[lv_index][0], true);
                break;
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_ARRA_9213A7BC", "A", FixedToText((libARRA_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_ARRA_9213A7BC", "B", FixedToText(TimerGetElapsed(libARRA_gv_uT_DummyTimer[lv_index][1]), 0));
                TextExpressionSetToken("Param/Expression/lib_ARRA_9213A7BC", "C", FixedToText((libARRA_gv_uT_DummyDamage[lv_index][1] / TimerGetElapsed(libARRA_gv_uT_DummyTimer[lv_index][1])), 1));
                TextTagSetText(libARRA_gf_TextTagForUnit(libARRA_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_ARRA_9213A7BC"));
                libARRA_gv_uT_DummyDamage[lv_index][0] = 0.0;
                TimerStart(libARRA_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DummyUpdate_Init () {
    libARRA_gt_UT_DummyUpdate = TriggerCreate("libARRA_gt_UT_DummyUpdate_Func");
    TriggerEnable(libARRA_gt_UT_DummyUpdate, false);
    TriggerAddEventTimer(libARRA_gt_UT_DummyUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyDestroyed
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DummyDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libARRA_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(libARRA_gf_TextTagForUnit(EventUnit(), 1), PlayerGroupAll(), false);
    TextTagDestroy(libARRA_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DummyDestroyed_Init () {
    libARRA_gt_UT_DummyDestroyed = TriggerCreate("libARRA_gt_UT_DummyDestroyed_Func");
    TriggerEnable(libARRA_gt_UT_DummyDestroyed, false);
    TriggerAddEventUnitDied(libARRA_gt_UT_DummyDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DPS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_vUnit;

    // Automatic Variable Declarations
    const int autoD70F9BF1_ae = libARRA_gv_uT_DPS_MaxUnits;
    const int autoD70F9BF1_ai = 1;
    unitgroup autoA71FD9AF_g;
    int autoA71FD9AF_u;
    unit autoA71FD9AF_var;
    const int auto0C883112_ae = libARRA_gv_uT_DPS_MaxUnits;
    const int auto0C883112_ai = 1;
    unitgroup autoA0FCD198_g;
    int autoA0FCD198_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(libARRA_gv_uT_DPS_UG, UnitGroupSelected(EventPlayer()));
    lv_i = 1;
    for ( ; ( (autoD70F9BF1_ai >= 0 && lv_i <= autoD70F9BF1_ae) || (autoD70F9BF1_ai < 0 && lv_i >= autoD70F9BF1_ae) ) ; lv_i += autoD70F9BF1_ai ) {
        libARRA_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        libARRA_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(libARRA_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(libARRA_gv_uT_DPS_Timer[lv_i][1]);
    }
    autoA71FD9AF_g = UnitGroupSelected(EventPlayer());
    autoA71FD9AF_u = UnitGroupCount(autoA71FD9AF_g, c_unitCountAll);
    for (;; autoA71FD9AF_u -= 1) {
        autoA71FD9AF_var = UnitGroupUnitFromEnd(autoA71FD9AF_g, autoA71FD9AF_u);
        if (autoA71FD9AF_var == null) { break; }
        if ((TextTagVisible(libARRA_gf_TextTagForUnit(EventUnit(), 1), EventPlayer()) == false)) {
            lv_i = 1;
            for ( ; ( (auto0C883112_ai >= 0 && lv_i <= auto0C883112_ae) || (auto0C883112_ai < 0 && lv_i >= auto0C883112_ae) ) ; lv_i += auto0C883112_ai ) {
                if ((libARRA_gv_uT_DPS_Units[lv_i] == null)) {
                    libARRA_gv_uT_DPS_Units[lv_i] = autoA71FD9AF_var;
                    UnitSetCustomValue(autoA71FD9AF_var, libARRA_gv_uT_DPS_CustomValueIndex, lv_i);
                    UnitBehaviorAddPlayer(autoA71FD9AF_var, "DPSTESTBEGH", EventPlayer(), 1);
                    libARRA_gf_CopyBehaviorToMagazineAmmos(autoA71FD9AF_var, "DPSTESTBEGH");
                    autoA0FCD198_g = UnitGroup(null, UnitGetOwner(autoA71FD9AF_var), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    autoA0FCD198_u = UnitGroupCount(autoA0FCD198_g, c_unitCountAll);
                    for (;; autoA0FCD198_u -= 1) {
                        lv_vUnit = UnitGroupUnitFromEnd(autoA0FCD198_g, autoA0FCD198_u);
                        if (lv_vUnit == null) { break; }
                        if ((UnitHasBehavior2(lv_vUnit, "DPSTESTBEGH") == true)) {
                            UnitSetCustomValue(lv_vUnit, libARRA_gv_uT_DPS_CustomValueIndex, lv_i);
                            UnitGroupAdd(libARRA_gv_uT_DPS_UG, lv_vUnit);
                            UnitBehaviorRemovePlayer(lv_vUnit, "DPSTESTBEGH", EventPlayer(), 1);
                        }

                    }
                    break;
                }

            }
            TextTagCreate(StringExternal("Param/Value/lib_ARRA_D45BE02D"), 24, UnitGetPosition(autoA71FD9AF_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), autoA71FD9AF_var, 1.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
            libARRA_gf_StoreTextTagForUnit(autoA71FD9AF_var, 1, TextTagLastCreated());
        }

    }
    TriggerEnable(libARRA_gt_UT_DPS_DealsDamage, true);
    TriggerEnable(libARRA_gt_UT_DPS_Summon, true);
    TriggerEnable(libARRA_gt_UT_DPS_Dies, true);
    TriggerEnable(libARRA_gt_UT_DPS_PauseGlobal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DPS_Init () {
    libARRA_gt_UT_DPS = TriggerCreate("libARRA_gt_UT_DPS_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_DPS, c_playerAny, "-dps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Stop
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DPS_Stop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoD644352C_g;
    int autoD644352C_u;
    unit autoD644352C_var;
    const int autoD54132B0_ae = libARRA_gv_uT_DPS_MaxUnits;
    const int autoD54132B0_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD644352C_g = libARRA_gv_uT_DPS_UG;
    autoD644352C_u = UnitGroupCount(autoD644352C_g, c_unitCountAll);
    for (;; autoD644352C_u -= 1) {
        autoD644352C_var = UnitGroupUnitFromEnd(autoD644352C_g, autoD644352C_u);
        if (autoD644352C_var == null) { break; }
        UnitGroupRemove(libARRA_gv_uT_DPS_UG, autoD644352C_var);
        TextTagDestroy(libARRA_gf_TextTagForUnit(autoD644352C_var, 1));
    }
    lv_i = 1;
    for ( ; ( (autoD54132B0_ai >= 0 && lv_i <= autoD54132B0_ae) || (autoD54132B0_ai < 0 && lv_i >= autoD54132B0_ae) ) ; lv_i += autoD54132B0_ai ) {
        libARRA_gv_uT_DPS_Units[lv_i] = null;
        libARRA_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        libARRA_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(libARRA_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(libARRA_gv_uT_DPS_Timer[lv_i][1]);
    }
    TriggerEnable(libARRA_gt_UT_DPS_DealsDamage, false);
    TriggerEnable(libARRA_gt_UT_DPS_Summon, false);
    TriggerEnable(libARRA_gt_UT_DPS_PauseGlobal, false);
    TriggerEnable(libARRA_gt_UT_DPS_Dies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DPS_Stop_Init () {
    libARRA_gt_UT_DPS_Stop = TriggerCreate("libARRA_gt_UT_DPS_Stop_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_DPS_Stop, c_playerAny, "-dpsstop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_DealsDamage
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DPS_DealsDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vCustomValue;
    fixed lv_vElapsedTime;
    fixed lv_vDPS_Now;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libARRA_gv_uT_DPS_UG, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vCustomValue = FixedToInt(UnitGetCustomValue(EventUnitDamageSourceUnit(), libARRA_gv_uT_DPS_CustomValueIndex));
    lv_vElapsedTime = TimerGetElapsed(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][0]);
    if ((TimerGetElapsed(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][1]) <= 0.0)) {
        TimerStart(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][1], 524287.0, false, c_timeGame);
        TimerStart(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][0], 5.0, false, c_timeGame);
    }
    else {
        if ((TimerIsPaused(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][1]) == true)) {
            TimerRestart(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][1]);
            libARRA_gv_uT_DPS_Damage[lv_vCustomValue][1] = 0.0;
        }
        else {
            libARRA_gv_uT_DPS_Damage[lv_vCustomValue][0] += EventUnitDamageAmount();
            libARRA_gv_uT_DPS_Damage[lv_vCustomValue][1] += EventUnitDamageAmount();
            if ((lv_vElapsedTime >= 2.0)) {
                lv_vDPS_Now = (libARRA_gv_uT_DPS_Damage[lv_vCustomValue][0] / lv_vElapsedTime);
                libARRA_gv_uT_DPS_Avg[lv_vCustomValue] = (libARRA_gv_uT_DPS_Damage[lv_vCustomValue][1] / TimerGetElapsed(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][1]));
                TextExpressionSetToken("Param/Expression/lib_ARRA_F5BC1320", "A", FixedToText(libARRA_gv_uT_DPS_Avg[lv_vCustomValue], 1));
                TextExpressionSetToken("Param/Expression/lib_ARRA_F5BC1320", "B", FixedToText(lv_vDPS_Now, 1));
                TextTagSetText(libARRA_gf_TextTagForUnit(libARRA_gv_uT_DPS_Units[lv_vCustomValue], 1), TextExpressionAssemble("Param/Expression/lib_ARRA_F5BC1320"));
                libARRA_gv_uT_DPS_Damage[lv_vCustomValue][0] = 0.0;
                TimerRestart(libARRA_gv_uT_DPS_Timer[lv_vCustomValue][0]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DPS_DealsDamage_Init () {
    libARRA_gt_UT_DPS_DealsDamage = TriggerCreate("libARRA_gt_UT_DPS_DealsDamage_Func");
    TriggerEnable(libARRA_gt_UT_DPS_DealsDamage, false);
    TriggerAddEventUnitDamaged(libARRA_gt_UT_DPS_DealsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Summon
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DPS_Summon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libARRA_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libARRA_gv_uT_DPS_UG, EventUnitCreatedUnit());
    UnitSetCustomValue(EventUnitCreatedUnit(), libARRA_gv_uT_DPS_CustomValueIndex, UnitGetCustomValue(EventUnit(), libARRA_gv_uT_DPS_CustomValueIndex));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DPS_Summon_Init () {
    libARRA_gt_UT_DPS_Summon = TriggerCreate("libARRA_gt_UT_DPS_Summon_Func");
    TriggerEnable(libARRA_gt_UT_DPS_Summon, false);
    TriggerAddEventUnitCreated(libARRA_gt_UT_DPS_Summon, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Dies
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DPS_Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libARRA_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libARRA_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DPS_Dies_Init () {
    libARRA_gt_UT_DPS_Dies = TriggerCreate("libARRA_gt_UT_DPS_Dies_Func");
    TriggerEnable(libARRA_gt_UT_DPS_Dies, false);
    TriggerAddEventUnitDied(libARRA_gt_UT_DPS_Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_PauseGlobal
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DPS_PauseGlobal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoAD5310F2_ae = libARRA_gv_uT_DPS_MaxUnits;
    int autoAD5310F2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAD5310F2_var = 1;
    for ( ; autoAD5310F2_var <= autoAD5310F2_ae; autoAD5310F2_var += 1 ) {
        if ((EventTimer() == libARRA_gv_uT_DPS_Timer[autoAD5310F2_var][0])) {
            TimerPause(libARRA_gv_uT_DPS_Timer[autoAD5310F2_var][1], true);
            TextExpressionSetToken("Param/Expression/lib_ARRA_CB2FC548", "A", FixedToText(libARRA_gv_uT_DPS_Avg[autoAD5310F2_var], 1));
            TextTagSetText(libARRA_gf_TextTagForUnit(libARRA_gv_uT_DPS_Units[autoAD5310F2_var], 1), TextExpressionAssemble("Param/Expression/lib_ARRA_CB2FC548"));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DPS_PauseGlobal_Init () {
    libARRA_gt_UT_DPS_PauseGlobal = TriggerCreate("libARRA_gt_UT_DPS_PauseGlobal_Func");
    TriggerEnable(libARRA_gt_UT_DPS_PauseGlobal, false);
    TriggerAddEventTimer(libARRA_gt_UT_DPS_PauseGlobal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Vision
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Vision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gv_uT_Revealed == false)) {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        libARRA_gv_uT_Revealer = VisRevealerLastCreated();
        libARRA_gv_uT_Revealed = true;
    }
    else {
        VisRevealerDestroy(libARRA_gv_uT_Revealer);
        libARRA_gv_uT_Revealed = false;
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Vision_Init () {
    libARRA_gt_UT_Vision = TriggerCreate("libARRA_gt_UT_Vision_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Vision, c_playerAny, "-vision", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers toggle
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Numberstoggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(libARRA_gv_uT_PlayersWithNumbers, EventPlayer()) == false) || (TriggerIsEnabled(libARRA_gt_UT_NumbersHeal) == false))) {
        PlayerGroupAdd(libARRA_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_E9741DB7"));
        TriggerEnable(libARRA_gt_UT_NumbersDamage, true);
        TriggerEnable(libARRA_gt_UT_NumbersHeal, true);
    }
    else {
        PlayerGroupRemove(libARRA_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_B123652C"));
        if ((PlayerGroupCount(libARRA_gv_uT_PlayersWithNumbers) == 0)) {
            TriggerEnable(libARRA_gt_UT_NumbersDamage, false);
            TriggerEnable(libARRA_gt_UT_NumbersHeal, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Numberstoggle_Init () {
    libARRA_gt_UT_Numberstoggle = TriggerCreate("libARRA_gt_UT_Numberstoggle_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Numberstoggle, c_playerAny, "-numbers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Damage
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_NumbersDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 0.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libARRA_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    if (((EventUnitDamageSourcePlayer() == 1) || (EventUnitDamageSourcePlayer() == 2))) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 59.22, 18.43));
    }
    else {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    if ((EventUnitDamageAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        if ((EventUnitDamageAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.5);
        }

    }
    else {
        if ((EventUnitDamageAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 14);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), libARRA_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_NumbersDamage_Init () {
    libARRA_gt_UT_NumbersDamage = TriggerCreate("libARRA_gt_UT_NumbersDamage_Func");
    TriggerEnable(libARRA_gt_UT_NumbersDamage, false);
    TriggerAddEventUnitDamaged(libARRA_gt_UT_NumbersDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Heal
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_NumbersHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitHealAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, libARRA_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    if ((EventUnitHealAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
        if ((EventUnitHealAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        }

    }
    else {
        if ((EventUnitHealAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 12);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), libARRA_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_NumbersHeal_Init () {
    libARRA_gt_UT_NumbersHeal = TriggerCreate("libARRA_gt_UT_NumbersHeal_Func");
    TriggerEnable(libARRA_gt_UT_NumbersHeal, false);
    TriggerAddEventUnitHealed(libARRA_gt_UT_NumbersHeal, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_LogDisplay
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DL_LogDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__todo_otherPlayer;
    bool lv_vChangeInDataPlayer;

    // Automatic Variable Declarations
    string auto5D78BBF5_val;

    // Variable Initialization
    lv__todo_otherPlayer = PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), 1);

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libARRA_gt_UT_DL_DamageLogging, true);
    TriggerEnable(libARRA_gt_UT_DL_HealLogging, true);
    auto5D78BBF5_val = StringWord(EventChatMessage(false), 2);
    if (auto5D78BBF5_val == "2") {
        if ((libARRA_gv_uT_DL_PlayerData[EventPlayer()] != lv__todo_otherPlayer)) {
            libARRA_gv_uT_DL_PlayerData[EventPlayer()] = lv__todo_otherPlayer;
            lv_vChangeInDataPlayer = true;
        }

    }
    else if (auto5D78BBF5_val == "clear") {
        libARRA_gf_UT_DL_LogClear(EventPlayer());
        return true;
    }
    else if (auto5D78BBF5_val == "stop") {
        PlayerGroupRemove(libARRA_gv_uT_DL_LoggingPlayers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_0FD73C86"));
        if (((PlayerGroupHasPlayer(libARRA_gv_uT_DL_LoggingPlayers, 1) == false) || (PlayerStatus(1) != c_playerStatusActive)) && ((PlayerGroupHasPlayer(libARRA_gv_uT_DL_LoggingPlayers, 2) == false) || (PlayerStatus(2) != c_playerStatusActive))) {
            TriggerEnable(libARRA_gt_UT_DL_DamageLogging, false);
            TriggerEnable(libARRA_gt_UT_DL_HealLogging, false);
        }

        return true;
    }
    else {
        if ((libARRA_gv_uT_DL_PlayerData[EventPlayer()] != EventPlayer())) {
            libARRA_gv_uT_DL_PlayerData[EventPlayer()] = EventPlayer();
            lv_vChangeInDataPlayer = true;
        }

    }
    if (((libARRA_gv_uT_DL_LogDialog == c_invalidDialogId) || (lv_vChangeInDataPlayer == true) || (DialogIsVisible(libARRA_gv_uT_DL_LogDialog, EventPlayer()) == false))) {
        libARRA_gf_UT_DL_DialogCreate();
        libARRA_gf_UT_DL_DialogUpdate(libARRA_gv_uT_DL_PlayerData[EventPlayer()], EventPlayer());
        DialogSetVisible(libARRA_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), true);
        TriggerExecute(libARRA_gt_UT_DL_PeriodicUpdate, true, false);
    }
    else {
        DialogSetVisible(libARRA_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DL_LogDisplay_Init () {
    libARRA_gt_UT_DL_LogDisplay = TriggerCreate("libARRA_gt_UT_DL_LogDisplay_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_DL_LogDisplay, c_playerAny, "-log", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DL_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while (((DialogIsVisible(libARRA_gv_uT_DL_LogDialog, 1) == true) || (DialogIsVisible(libARRA_gv_uT_DL_LogDialog, 2) == true))) {
        libARRA_gf_UT_DL_DialogUpdate(libARRA_gv_uT_DL_PlayerData[1], 1);
        libARRA_gf_UT_DL_DialogUpdate(libARRA_gv_uT_DL_PlayerData[2], 2);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DL_PeriodicUpdate_Init () {
    libARRA_gt_UT_DL_PeriodicUpdate = TriggerCreate("libARRA_gt_UT_DL_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Damage Logging
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DL_DamageLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC105AEBF_ae = libARRA_gv_uT_DL_MaxUnits;
    int autoC105AEBF_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libARRA_gv_uT_DL_LoggingPlayers, EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != EventUnit()))) {
            return false;
        }

        if (!((EventUnitDamageAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC105AEBF_var = 1;
    for ( ; autoC105AEBF_var <= autoC105AEBF_ae; autoC105AEBF_var += 1 ) {
        if (((UnitGetType(EventUnitDamageSourceUnit()) == libARRA_gv_uT_DL_Data[autoC105AEBF_var][0][EventUnitDamageSourcePlayer()].lv_unitType) || (libARRA_gf_UT_AreMorphUnits(UnitGetType(EventUnitDamageSourceUnit()), libARRA_gv_uT_DL_Data[autoC105AEBF_var][0][EventUnitDamageSourcePlayer()].lv_unitType) == true))) {
            libARRA_gf_UT_DL_AddHealingDamage(autoC105AEBF_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
            break;
        }
        else {
            if ((libARRA_gv_uT_DL_Data[autoC105AEBF_var][0][EventUnitDamageSourcePlayer()].lv_unitType == null)) {
                libARRA_gv_uT_DL_Data[autoC105AEBF_var][0][EventUnitDamageSourcePlayer()].lv_unitType = UnitGetType(EventUnitDamageSourceUnit());
                libARRA_gf_UT_DL_AddHealingDamage(autoC105AEBF_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
                break;
            }
            else {
                if ((autoC105AEBF_var == libARRA_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitDamageSourcePlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_6865776D"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DL_DamageLogging_Init () {
    libARRA_gt_UT_DL_DamageLogging = TriggerCreate("libARRA_gt_UT_DL_DamageLogging_Func");
    TriggerEnable(libARRA_gt_UT_DL_DamageLogging, false);
    TriggerAddEventUnitDamaged(libARRA_gt_UT_DL_DamageLogging, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Heal Logging
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DL_HealLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto39449817_ae = libARRA_gv_uT_DL_MaxUnits;
    int auto39449817_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(libARRA_gv_uT_DL_LoggingPlayers, EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitHealLaunchUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto39449817_var = 1;
    for ( ; auto39449817_var <= auto39449817_ae; auto39449817_var += 1 ) {
        if ((UnitGetType(EventUnitHealLaunchUnit()) == libARRA_gv_uT_DL_Data[auto39449817_var][1][EventUnitHealLaunchPlayer()].lv_unitType)) {
            libARRA_gf_UT_DL_AddHealingDamage(auto39449817_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
            break;
        }
        else {
            if ((libARRA_gv_uT_DL_Data[auto39449817_var][1][EventUnitHealLaunchPlayer()].lv_unitType == null)) {
                libARRA_gv_uT_DL_Data[auto39449817_var][1][EventUnitHealLaunchPlayer()].lv_unitType = UnitGetType(EventUnitHealLaunchUnit());
                libARRA_gf_UT_DL_AddHealingDamage(auto39449817_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
                break;
            }
            else {
                if ((auto39449817_var == libARRA_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitHealLaunchPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_4B9F64A5"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DL_HealLogging_Init () {
    libARRA_gt_UT_DL_HealLogging = TriggerCreate("libARRA_gt_UT_DL_HealLogging_Func");
    TriggerEnable(libARRA_gt_UT_DL_HealLogging, false);
    TriggerAddEventUnitHealed(libARRA_gt_UT_DL_HealLogging, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EnableDev Commands
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_EnableDevCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gv_uT_DevCommands[EventPlayer()] = libARRA_ge_UT_DevCommandTypes_Gamealtering;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_EnableDevCommands_Init () {
    libARRA_gt_UT_EnableDevCommands = TriggerCreate("libARRA_gt_UT_EnableDevCommands_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_EnableDevCommands, c_playerAny, "-dc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DisableDev Commands for ally
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DisableDevCommandsforally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gv_uT_DevCommands[2] = libARRA_ge_UT_DevCommandTypes_No;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DisableDevCommandsforally_Init () {
    libARRA_gt_UT_DisableDevCommandsforally = TriggerCreate("libARRA_gt_UT_DisableDevCommandsforally_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_DisableDevCommandsforally, c_playerAny, "-jail", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Rad
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Rad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vRadius;

    // Automatic Variable Declarations
    unitgroup auto3123C8E1_g;
    int auto3123C8E1_u;
    unit auto3123C8E1_var;
    unitgroup autoFE04C626_g;
    int autoFE04C626_u;
    unit autoFE04C626_var;

    // Variable Initialization
    lv_vRadius = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vRadius >= 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_ARRA_E5BA991A", "A", FixedToText(lv_vRadius, c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_E5BA991A"));
        autoFE04C626_g = UnitGroupSelected(EventPlayer());
        autoFE04C626_u = UnitGroupCount(autoFE04C626_g, c_unitCountAll);
        for (;; autoFE04C626_u -= 1) {
            autoFE04C626_var = UnitGroupUnitFromEnd(autoFE04C626_g, autoFE04C626_u);
            if (autoFE04C626_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(autoFE04C626_var), "Radius", 1, FixedToString(lv_vRadius, 2));
        }
        libARRA_gf_UT_Cheat();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_680E2899"));
        auto3123C8E1_g = UnitGroupSelected(EventPlayer());
        auto3123C8E1_u = UnitGroupCount(auto3123C8E1_g, c_unitCountAll);
        for (;; auto3123C8E1_u -= 1) {
            auto3123C8E1_var = UnitGroupUnitFromEnd(auto3123C8E1_g, auto3123C8E1_u);
            if (auto3123C8E1_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto3123C8E1_var), "Radius", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto3123C8E1_var), "Radius", 0));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Rad_Init () {
    libARRA_gt_UT_Rad = TriggerCreate("libARRA_gt_UT_Rad_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Rad, c_playerAny, "-rad", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_XP
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_XP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vXPAmount;

    // Automatic Variable Declarations
    unitgroup auto38AFEABC_g;
    int auto38AFEABC_u;
    unit auto38AFEABC_var;

    // Variable Initialization
    lv_vXPAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto38AFEABC_g = UnitGroupSelected(EventPlayer());
    auto38AFEABC_u = UnitGroupCount(auto38AFEABC_g, c_unitCountAll);
    for (;; auto38AFEABC_u -= 1) {
        auto38AFEABC_var = UnitGroupUnitFromEnd(auto38AFEABC_g, auto38AFEABC_u);
        if (auto38AFEABC_var == null) { break; }
        UnitXPAddXP(auto38AFEABC_var, null, lv_vXPAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_XP_Init () {
    libARRA_gt_UT_XP = TriggerCreate("libARRA_gt_UT_XP_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_XP, c_playerAny, "-xp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListDead
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ListDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoDF010FA9_ae = 15;
    int autoDF010FA9_var;
    unitgroup auto924F7A52_g;
    int auto924F7A52_u;
    unit auto924F7A52_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_ARRA_A1AE2173"), true);
    autoDF010FA9_var = 0;
    for ( ; autoDF010FA9_var <= autoDF010FA9_ae; autoDF010FA9_var += 1 ) {
        auto924F7A52_g = UnitGroup(null, autoDF010FA9_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto924F7A52_u = UnitGroupCount(auto924F7A52_g, c_unitCountAll);
        for (;; auto924F7A52_u -= 1) {
            auto924F7A52_var = UnitGroupUnitFromEnd(auto924F7A52_g, auto924F7A52_u);
            if (auto924F7A52_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_ARRA_A39E199E", "A", UnitGetName(auto924F7A52_var));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A39E199E", "B", IntToText(UnitGetOwner(auto924F7A52_var)));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A39E199E", "C", FixedToText(PointGetX(UnitGetPosition(auto924F7A52_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A39E199E", "D", FixedToText(PointGetY(UnitGetPosition(auto924F7A52_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_A39E199E"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ListDead_Init () {
    libARRA_gt_UT_ListDead = TriggerCreate("libARRA_gt_UT_ListDead_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ListDead, c_playerAny, "-listdead", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListHidden
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ListHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto9065EC1A_ae = 15;
    int auto9065EC1A_var;
    unitgroup auto75FBFF57_g;
    int auto75FBFF57_u;
    unit auto75FBFF57_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_ARRA_2A21EDF8"), true);
    auto9065EC1A_var = 0;
    for ( ; auto9065EC1A_var <= auto9065EC1A_ae; auto9065EC1A_var += 1 ) {
        auto75FBFF57_g = UnitGroup(null, auto9065EC1A_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto75FBFF57_u = UnitGroupCount(auto75FBFF57_g, c_unitCountAll);
        for (;; auto75FBFF57_u -= 1) {
            auto75FBFF57_var = UnitGroupUnitFromEnd(auto75FBFF57_g, auto75FBFF57_u);
            if (auto75FBFF57_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(auto75FBFF57_var) == true)) {
                TextExpressionSetToken("Param/Expression/lib_ARRA_F6541CD4", "A", UnitGetName(auto75FBFF57_var));
                TextExpressionSetToken("Param/Expression/lib_ARRA_F6541CD4", "B", IntToText(UnitGetOwner(auto75FBFF57_var)));
                TextExpressionSetToken("Param/Expression/lib_ARRA_F6541CD4", "C", FixedToText(PointGetX(UnitGetPosition(auto75FBFF57_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_ARRA_F6541CD4", "D", FixedToText(PointGetY(UnitGetPosition(auto75FBFF57_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_F6541CD4"), true);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_ARRA_70A07C57", "A", UnitGetName(auto75FBFF57_var));
                TextExpressionSetToken("Param/Expression/lib_ARRA_70A07C57", "B", IntToText(UnitGetOwner(auto75FBFF57_var)));
                TextExpressionSetToken("Param/Expression/lib_ARRA_70A07C57", "C", FixedToText(PointGetX(UnitGetPosition(auto75FBFF57_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_ARRA_70A07C57", "D", FixedToText(PointGetY(UnitGetPosition(auto75FBFF57_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_70A07C57"), true);
            }
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ListHidden_Init () {
    libARRA_gt_UT_ListHidden = TriggerCreate("libARRA_gt_UT_ListHidden_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ListHidden, c_playerAny, "-listhidden", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListMissile
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ListMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8341504D_ae = 15;
    int auto8341504D_var;
    unitgroup auto097A13A8_g;
    int auto097A13A8_u;
    unit auto097A13A8_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_ARRA_B2010DD3"), true);
    auto8341504D_var = 0;
    for ( ; auto8341504D_var <= auto8341504D_ae; auto8341504D_var += 1 ) {
        auto097A13A8_g = UnitGroup(null, auto8341504D_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
        auto097A13A8_u = UnitGroupCount(auto097A13A8_g, c_unitCountAll);
        for (;; auto097A13A8_u -= 1) {
            auto097A13A8_var = UnitGroupUnitFromEnd(auto097A13A8_g, auto097A13A8_u);
            if (auto097A13A8_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_ARRA_AA1B8D78", "A", UnitGetName(auto097A13A8_var));
            TextExpressionSetToken("Param/Expression/lib_ARRA_AA1B8D78", "B", IntToText(UnitGetOwner(auto097A13A8_var)));
            TextExpressionSetToken("Param/Expression/lib_ARRA_AA1B8D78", "C", FixedToText(PointGetX(UnitGetPosition(auto097A13A8_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_ARRA_AA1B8D78", "D", FixedToText(PointGetY(UnitGetPosition(auto097A13A8_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_AA1B8D78"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ListMissile_Init () {
    libARRA_gt_UT_ListMissile = TriggerCreate("libARRA_gt_UT_ListMissile_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ListMissile, c_playerAny, "-listmissile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListAll
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ListAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    int lv_vB;
    playergroup lv_vPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoC9238CA9_g;
    int autoC9238CA9_var;
    unitgroup auto1280A441_g;
    int auto1280A441_u;
    unit auto1280A441_var;
    playergroup auto90D733F2_g;
    int auto90D733F2_var;
    unitgroup auto2C4A1F7C_g;
    int auto2C4A1F7C_u;
    unit auto2C4A1F7C_var;

    // Variable Initialization
    lv_vB = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_7261A7AE", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_7261A7AE"));
    if ((StringWord(EventChatMessage(false), 2) != "") && (lv_vB >= 0)) {
        PlayerGroupAdd(lv_vPlayerGroup, lv_vB);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAll(), lv_vPlayerGroup);
    }
    autoC9238CA9_g = lv_vPlayerGroup;
    autoC9238CA9_var = -1;
    while (true) {
        autoC9238CA9_var = PlayerGroupNextPlayer(autoC9238CA9_g, autoC9238CA9_var);
        if (autoC9238CA9_var < 0) { break; }
        auto1280A441_g = UnitGroup(null, autoC9238CA9_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto1280A441_u = UnitGroupCount(auto1280A441_g, c_unitCountAll);
        for (;; auto1280A441_u -= 1) {
            auto1280A441_var = UnitGroupUnitFromEnd(auto1280A441_g, auto1280A441_u);
            if (auto1280A441_var == null) { break; }
            lv_vA += 1;
        }
    }
    TextExpressionSetToken("Param/Expression/lib_ARRA_7A5BB9B8", "A", IntToText(lv_vA));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_7A5BB9B8"), true);
    Wait(0.5, c_timeGame);
    auto90D733F2_g = lv_vPlayerGroup;
    auto90D733F2_var = -1;
    while (true) {
        auto90D733F2_var = PlayerGroupNextPlayer(auto90D733F2_g, auto90D733F2_var);
        if (auto90D733F2_var < 0) { break; }
        auto2C4A1F7C_g = UnitGroup(null, auto90D733F2_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto2C4A1F7C_u = UnitGroupCount(auto2C4A1F7C_g, c_unitCountAll);
        for (;; auto2C4A1F7C_u -= 1) {
            auto2C4A1F7C_var = UnitGroupUnitFromEnd(auto2C4A1F7C_g, auto2C4A1F7C_u);
            if (auto2C4A1F7C_var == null) { break; }
            Wait(0.001, c_timeGame);
            lv_vText = StringToText("");
            if ((libNtve_gf_UnitIsHidden(auto2C4A1F7C_var) == true)) {
                lv_vText = StringExternal("Param/Value/lib_ARRA_641D1D75");
            }

            if ((UnitIsAlive(auto2C4A1F7C_var) == false)) {
                TextExpressionSetToken("Param/Expression/lib_ARRA_C9CB3659", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_ARRA_C9CB3659");
            }

            if ((UnitTypeTestFlag(UnitGetType(auto2C4A1F7C_var), c_unitFlagMissile) == true)) {
                TextExpressionSetToken("Param/Expression/lib_ARRA_3AD59AA9", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_ARRA_3AD59AA9");
            }

            TextExpressionSetToken("Param/Expression/lib_ARRA_A555E9DC", "A", UnitGetName(auto2C4A1F7C_var));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A555E9DC", "B", IntToText(auto90D733F2_var));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A555E9DC", "C", FixedToText(PointGetX(UnitGetPosition(auto2C4A1F7C_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A555E9DC", "D", FixedToText(PointGetY(UnitGetPosition(auto2C4A1F7C_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A555E9DC", "E", lv_vText);
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_ARRA_A555E9DC"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ListAll_Init () {
    libARRA_gt_UT_ListAll = TriggerCreate("libARRA_gt_UT_ListAll_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ListAll, c_playerAny, "-listall", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Teleport
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Teleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF1675E73_g;
    int autoF1675E73_u;
    unit autoF1675E73_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF1675E73_g = UnitGroupSelected(EventPlayer());
    autoF1675E73_u = UnitGroupCount(autoF1675E73_g, c_unitCountAll);
    for (;; autoF1675E73_u -= 1) {
        autoF1675E73_var = UnitGroupUnitFromEnd(autoF1675E73_g, autoF1675E73_u);
        if (autoF1675E73_var == null) { break; }
        UnitSetPosition(autoF1675E73_var, CameraGetTarget(EventPlayer()), true);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Teleport_Init () {
    libARRA_gt_UT_Teleport = TriggerCreate("libARRA_gt_UT_Teleport_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Teleport, c_playerAny, "-teleport", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restart
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Restart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RestartGame(PlayerGroupAll());
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Restart_Init () {
    libARRA_gt_UT_Restart = TriggerCreate("libARRA_gt_UT_Restart_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Restart, c_playerAny, "-restart", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_GetID
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_GetID_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0B878607_g;
    int auto0B878607_u;
    unit auto0B878607_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0B878607_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto0B878607_u = UnitGroupCount(auto0B878607_g, c_unitCountAll);
    for (;; auto0B878607_u -= 1) {
        auto0B878607_var = UnitGroupUnitFromEnd(auto0B878607_g, auto0B878607_u);
        if (auto0B878607_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto0B878607_var) == true)) {
            TextExpressionSetToken("Param/Expression/lib_ARRA_8591E38D", "A", StringToText((UnitGetType(auto0B878607_var))));
            TextExpressionSetToken("Param/Expression/lib_ARRA_8591E38D", "B", IntToText(UnitGetOwner(auto0B878607_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_ARRA_8591E38D"), 24, UnitGetPosition(auto0B878607_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_ARRA_A40A211B", "A", StringToText((UnitGetType(auto0B878607_var))));
            TextExpressionSetToken("Param/Expression/lib_ARRA_A40A211B", "B", IntToText(UnitGetOwner(auto0B878607_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_ARRA_A40A211B"), 24, UnitGetPosition(auto0B878607_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
            TextTagAttachToUnit(TextTagLastCreated(), auto0B878607_var, 1.5);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_GetID_Init () {
    libARRA_gt_UT_GetID = TriggerCreate("libARRA_gt_UT_GetID_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_GetID, c_playerAny, "-getid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restore
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Restore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB02E089A_g;
    int autoB02E089A_u;
    unit autoB02E089A_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB02E089A_g = UnitGroupSelected(EventPlayer());
    autoB02E089A_u = UnitGroupCount(autoB02E089A_g, c_unitCountAll);
    for (;; autoB02E089A_u -= 1) {
        autoB02E089A_var = UnitGroupUnitFromEnd(autoB02E089A_g, autoB02E089A_u);
        if (autoB02E089A_var == null) { break; }
        UnitSetPropertyFixed(autoB02E089A_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoB02E089A_var, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(autoB02E089A_var, c_unitPropShieldsPercent, 100.0);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Restore_Init () {
    libARRA_gt_UT_Restore = TriggerCreate("libARRA_gt_UT_Restore_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Restore, c_playerAny, "-restore", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Pause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitIsPaused(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_68ED542D"));
        UnitPauseAll(false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_196E6D32"));
        UnitPauseAll(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Pause_Init () {
    libARRA_gt_UT_Pause = TriggerCreate("libARRA_gt_UT_Pause_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Pause, c_playerAny, "-pause", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Money
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Money_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 50000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Money_Init () {
    libARRA_gt_UT_Money = TriggerCreate("libARRA_gt_UT_Money_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Money, c_playerAny, "-money", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Look
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Look_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto756FC6CA_g;
    int auto756FC6CA_u;
    unit auto756FC6CA_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto756FC6CA_g = UnitGroupSelected(EventPlayer());
    auto756FC6CA_u = UnitGroupCount(auto756FC6CA_g, c_unitCountAll);
    for (;; auto756FC6CA_u -= 1) {
        auto756FC6CA_var = UnitGroupUnitFromEnd(auto756FC6CA_g, auto756FC6CA_u);
        if (auto756FC6CA_var == null) { break; }
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_MainActorofUnit(auto756FC6CA_var), StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Look_Init () {
    libARRA_gt_UT_Look = TriggerCreate("libARRA_gt_UT_Look_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Look, c_playerAny, "-look", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_sight
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_sight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD74FA580_g;
    int autoD74FA580_u;
    unit autoD74FA580_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_58DA532D", "A", StringToText(StringWord(EventChatMessage(false), 1)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_58DA532D"));
    autoD74FA580_g = UnitGroupSelected(EventPlayer());
    autoD74FA580_u = UnitGroupCount(autoD74FA580_g, c_unitCountAll);
    for (;; autoD74FA580_u -= 1) {
        autoD74FA580_var = UnitGroupUnitFromEnd(autoD74FA580_g, autoD74FA580_u);
        if (autoD74FA580_var == null) { break; }
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(autoD74FA580_var), "Sight", EventPlayer(), StringWord(EventChatMessage(false), 2));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_sight_Init () {
    libARRA_gt_UT_sight = TriggerCreate("libARRA_gt_UT_sight_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_sight, c_playerAny, "-sight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Kill
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Kill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup autoBFF1428D_g;
    int autoBFF1428D_u;
    unit autoBFF1428D_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    autoBFF1428D_g = UnitGroupSelected(EventPlayer());
    autoBFF1428D_u = UnitGroupCount(autoBFF1428D_g, c_unitCountAll);
    for (;; autoBFF1428D_u -= 1) {
        autoBFF1428D_var = UnitGroupUnitFromEnd(autoBFF1428D_g, autoBFF1428D_u);
        if (autoBFF1428D_var == null) { break; }
        PlayerCreateEffectUnit(lv_vPlayer, "Damage", autoBFF1428D_var);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Kill_Init () {
    libARRA_gt_UT_Kill = TriggerCreate("libARRA_gt_UT_Kill_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Kill, c_playerAny, "-kill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup autoE9EA8C80_g;
    int autoE9EA8C80_u;
    unit autoE9EA8C80_var;
    const int autoE752DC5B_ae = 10;
    int autoE752DC5B_var;
    unitgroup auto89BFAA77_g;
    int auto89BFAA77_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE9EA8C80_g = UnitGroupSelected(EventPlayer());
    autoE9EA8C80_u = UnitGroupCount(autoE9EA8C80_g, c_unitCountAll);
    for (;; autoE9EA8C80_u -= 1) {
        autoE9EA8C80_var = UnitGroupUnitFromEnd(autoE9EA8C80_g, autoE9EA8C80_u);
        if (autoE9EA8C80_var == null) { break; }
        autoE752DC5B_var = 0;
        for ( ; autoE752DC5B_var <= autoE752DC5B_ae; autoE752DC5B_var += 1 ) {
            if ((libARRA_gf_TextTagForUnit(autoE9EA8C80_var, autoE752DC5B_var) != c_textTagNone)) {
                TextTagDestroy(libARRA_gf_TextTagForUnit(autoE9EA8C80_var, autoE752DC5B_var));
            }

        }
        auto89BFAA77_g = UnitCargoGroup(autoE9EA8C80_var);
        auto89BFAA77_u = UnitGroupCount(auto89BFAA77_g, c_unitCountAll);
        for (;; auto89BFAA77_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(auto89BFAA77_g, auto89BFAA77_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(autoE9EA8C80_var);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Remove_Init () {
    libARRA_gt_UT_Remove = TriggerCreate("libARRA_gt_UT_Remove_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Remove, c_playerAny, "-remove", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause AI
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_PauseAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == false)) {
        AITimePause(true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_EA5941C8"));
    }
    else {
        AITimePause(false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_4DA4D46B"));
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_PauseAI_Init () {
    libARRA_gt_UT_PauseAI = TriggerCreate("libARRA_gt_UT_PauseAI_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_PauseAI, c_playerAny, "-pai", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Speed
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Speed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoDCB8EE7B_val;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDCB8EE7B_val = StringWord(EventChatMessage(false), 2);
    if (autoDCB8EE7B_val == "slower") {
        GameSetSpeedValue(c_gameSpeedSlower);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_246C88D7"));
    }
    else if (autoDCB8EE7B_val == "slow") {
        GameSetSpeedValue(c_gameSpeedSlow);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_0C94CCF4"));
    }
    else if (autoDCB8EE7B_val == "normal") {
        GameSetSpeedValue(c_gameSpeedNormal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_83F92F6E"));
    }
    else if (autoDCB8EE7B_val == "fast") {
        GameSetSpeedValue(c_gameSpeedFast);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_D441178E"));
    }
    else if (autoDCB8EE7B_val == "faster") {
        GameSetSpeedValue(c_gameSpeedFaster);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_6EDCDB76"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Speed_Init () {
    libARRA_gt_UT_Speed = TriggerCreate("libARRA_gt_UT_Speed_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Speed, c_playerAny, "-speed", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Supply
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Supply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSupply;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vSupply = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(EventChatMessage(false), 3)) >= 2)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 3));
    }

    PlayerModifyPropertyInt(lv_vPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vSupply);
    TextExpressionSetToken("Param/Expression/lib_ARRA_6EFE34E2", "A", IntToText(lv_vSupply));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_6EFE34E2"));
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Supply_Init () {
    libARRA_gt_UT_Supply = TriggerCreate("libARRA_gt_UT_Supply_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Supply, c_playerAny, "-supply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Give
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Give_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Give_Init () {
    libARRA_gt_UT_Give = TriggerCreate("libARRA_gt_UT_Give_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Give, c_playerAny, "-give", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SwitchOwner
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_SwitchOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto7BCF27E6_g;
    int auto7BCF27E6_u;
    unit auto7BCF27E6_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    auto7BCF27E6_g = UnitGroupSelected(EventPlayer());
    auto7BCF27E6_u = UnitGroupCount(auto7BCF27E6_g, c_unitCountAll);
    for (;; auto7BCF27E6_u -= 1) {
        auto7BCF27E6_var = UnitGroupUnitFromEnd(auto7BCF27E6_g, auto7BCF27E6_u);
        if (auto7BCF27E6_var == null) { break; }
        UnitBehaviorAddPlayer(auto7BCF27E6_var, "PXOwnership", lv_vPlayer, 1);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_SwitchOwner_Init () {
    libARRA_gt_UT_SwitchOwner = TriggerCreate("libARRA_gt_UT_SwitchOwner_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_SwitchOwner, c_playerAny, "-switchowner", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cost
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Cost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[21] lv_vSupply;
    fixed[21] lv_vCost;
    fixed lv_vDistance;
    string lv_vRace;

    // Automatic Variable Declarations
    unitgroup auto8F292B8F_g;
    int auto8F292B8F_u;
    unit auto8F292B8F_var;
    const int autoC13406CF_ae = 19;
    int autoC13406CF_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vDistance = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((lv_vDistance >= 1)) {
    }
    else {
        lv_vDistance = 12.0;
    }
    auto8F292B8F_g = UnitGroup(null, c_playerAny, RegionCircle(CameraGetTarget(EventPlayer()), lv_vDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto8F292B8F_u = UnitGroupCount(auto8F292B8F_g, c_unitCountAll);
    for (;; auto8F292B8F_u -= 1) {
        auto8F292B8F_var = UnitGroupUnitFromEnd(auto8F292B8F_g, auto8F292B8F_u);
        if (auto8F292B8F_var == null) { break; }
        lv_vSupply[UnitGetOwner(auto8F292B8F_var)] += UnitGetPropertyFixed(auto8F292B8F_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vCost[UnitGetOwner(auto8F292B8F_var)] += UnitTypeGetCost(UnitGetType(auto8F292B8F_var), c_unitCostSumMineralsVespene);
        TextExpressionSetToken("Param/Expression/lib_ARRA_A74C226F", "A", FixedToText(UnitGetPropertyFixed(auto8F292B8F_var, c_unitPropSuppliesUsed, c_unitPropCurrent), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_ARRA_A74C226F", "B", FixedToText(UnitTypeGetCost(UnitGetType(auto8F292B8F_var), c_unitCostSumMineralsVespene), c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_ARRA_A74C226F"), 24, UnitGetPosition(auto8F292B8F_var), 1.0, true, false, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
        lv_vRace = libARRA_gf_GetUnitRace(auto8F292B8F_var);
    }
    autoC13406CF_var = 1;
    for ( ; autoC13406CF_var <= autoC13406CF_ae; autoC13406CF_var += 1 ) {
        if ((lv_vSupply[autoC13406CF_var] != 0.0) && (lv_vCost[autoC13406CF_var] != 0.0)) {
            TextExpressionSetToken("Param/Expression/lib_ARRA_7C4132E6", "A", IntToText(autoC13406CF_var));
            TextExpressionSetToken("Param/Expression/lib_ARRA_7C4132E6", "D", StringToText((lv_vRace)));
            TextExpressionSetToken("Param/Expression/lib_ARRA_7C4132E6", "B", FixedToText(lv_vSupply[autoC13406CF_var], c_fixedPrecisionAny));
            TextExpressionSetToken("Param/Expression/lib_ARRA_7C4132E6", "C", FixedToText(lv_vCost[autoC13406CF_var], c_fixedPrecisionAny));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_7C4132E6"));
            lv_vCost[20] += lv_vCost[autoC13406CF_var];
            lv_vSupply[20] += lv_vSupply[autoC13406CF_var];
        }

    }
    TextExpressionSetToken("Param/Expression/lib_ARRA_EDA40BF3", "B", FixedToText(lv_vSupply[20], c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_ARRA_EDA40BF3", "C", FixedToText(lv_vCost[20], c_fixedPrecisionAny));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_EDA40BF3"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Cost_Init () {
    libARRA_gt_UT_Cost = TriggerCreate("libARRA_gt_UT_Cost_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Cost, c_playerAny, "-cost", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_clearscreen
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_clearscreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup autoF9A51D68_g;
    int autoF9A51D68_u;
    unit autoF9A51D68_var;
    const int auto0C71524F_ae = 10;
    int auto0C71524F_var;
    unitgroup autoDA5DCCCB_g;
    int autoDA5DCCCB_u;
    unitgroup auto272915E7_g;
    int auto272915E7_u;
    unit auto272915E7_var;
    const int auto81D7099D_ae = 10;
    int auto81D7099D_var;
    unitgroup autoCAA7911A_g;
    int autoCAA7911A_u;

    // Variable Initialization
    lv_vPlayer = c_playerAny;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "unsel")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_53A8E02B"));
        autoF9A51D68_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
        autoF9A51D68_u = UnitGroupCount(autoF9A51D68_g, c_unitCountAll);
        for (;; autoF9A51D68_u -= 1) {
            autoF9A51D68_var = UnitGroupUnitFromEnd(autoF9A51D68_g, autoF9A51D68_u);
            if (autoF9A51D68_var == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(autoF9A51D68_var), c_unitFlagUnselectable) == true)) {
                auto0C71524F_var = 0;
                for ( ; auto0C71524F_var <= auto0C71524F_ae; auto0C71524F_var += 1 ) {
                    if ((libARRA_gf_TextTagForUnit(autoF9A51D68_var, auto0C71524F_var) != c_textTagNone)) {
                        TextTagDestroy(libARRA_gf_TextTagForUnit(autoF9A51D68_var, auto0C71524F_var));
                    }

                }
                autoDA5DCCCB_g = UnitCargoGroup(autoF9A51D68_var);
                autoDA5DCCCB_u = UnitGroupCount(autoDA5DCCCB_g, c_unitCountAll);
                for (;; autoDA5DCCCB_u -= 1) {
                    lv_vInnerUnit = UnitGroupUnitFromEnd(autoDA5DCCCB_g, autoDA5DCCCB_u);
                    if (lv_vInnerUnit == null) { break; }
                    UnitRemove(lv_vInnerUnit);
                }
                UnitRemove(autoF9A51D68_var);
            }

        }
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    TextExpressionSetToken("Param/Expression/lib_ARRA_A82CEFDF", "A", IntToText(lv_vPlayer));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_ARRA_A82CEFDF"));
    auto272915E7_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
    auto272915E7_u = UnitGroupCount(auto272915E7_g, c_unitCountAll);
    for (;; auto272915E7_u -= 1) {
        auto272915E7_var = UnitGroupUnitFromEnd(auto272915E7_g, auto272915E7_u);
        if (auto272915E7_var == null) { break; }
        auto81D7099D_var = 0;
        for ( ; auto81D7099D_var <= auto81D7099D_ae; auto81D7099D_var += 1 ) {
            if ((libARRA_gf_TextTagForUnit(auto272915E7_var, auto81D7099D_var) != c_textTagNone)) {
                TextTagDestroy(libARRA_gf_TextTagForUnit(auto272915E7_var, auto81D7099D_var));
            }

        }
        autoCAA7911A_g = UnitCargoGroup(auto272915E7_var);
        autoCAA7911A_u = UnitGroupCount(autoCAA7911A_g, c_unitCountAll);
        for (;; autoCAA7911A_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(autoCAA7911A_g, autoCAA7911A_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(auto272915E7_var);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_clearscreen_Init () {
    libARRA_gt_UT_clearscreen = TriggerCreate("libARRA_gt_UT_clearscreen_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_clearscreen, c_playerAny, "-clearscreen", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clear Enemy
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_ClearEnemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoFFAA9CCC_g;
    int autoFFAA9CCC_u;
    unit autoFFAA9CCC_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFFAA9CCC_g = UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoFFAA9CCC_u = UnitGroupCount(autoFFAA9CCC_g, c_unitCountAll);
    for (;; autoFFAA9CCC_u -= 1) {
        autoFFAA9CCC_var = UnitGroupUnitFromEnd(autoFFAA9CCC_g, autoFFAA9CCC_u);
        if (autoFFAA9CCC_var == null) { break; }
        UnitRemove(autoFFAA9CCC_var);
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_ClearEnemy_Init () {
    libARRA_gt_UT_ClearEnemy = TriggerCreate("libARRA_gt_UT_ClearEnemy_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_ClearEnemy, c_playerAny, "-clearenemy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Units
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_SpawnUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 2) != ""))) {
            return false;
        }

        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vAmount = 1;
    }
    else {
        lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
    }
    if ((StringWord(EventChatMessage(false), 4) == "")) {
        lv_vPlayer = EventPlayer();
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_vAmount, UnitTypeFromString(StringWord(EventChatMessage(false), 2)), 0, lv_vPlayer, CameraGetTarget(EventPlayer()));
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_SpawnUnits_Init () {
    libARRA_gt_UT_SpawnUnits = TriggerCreate("libARRA_gt_UT_SpawnUnits_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_SpawnUnits, c_playerAny, "-spawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Control
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Control_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoED515C42_g;
    int autoED515C42_var;
    playergroup auto587227D1_g;
    int auto587227D1_var;
    playergroup auto7827D103_g;
    int auto7827D103_var;

    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "other")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_A020D0F8"));
        autoED515C42_g = PlayerGroupAll();
        autoED515C42_var = -1;
        while (true) {
            autoED515C42_var = PlayerGroupNextPlayer(autoED515C42_g, autoED515C42_var);
            if (autoED515C42_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(autoED515C42_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false)) {
                PlayerSetAlliance(autoED515C42_var, c_allianceIdControl, EventPlayer(), true);
            }

        }
    }
    else {
        if ((PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_4CFDCB07"));
            auto7827D103_g = PlayerGroupAll();
            auto7827D103_var = -1;
            while (true) {
                auto7827D103_var = PlayerGroupNextPlayer(auto7827D103_g, auto7827D103_var);
                if (auto7827D103_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto7827D103_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto7827D103_var, c_allianceIdControl, EventPlayer(), true);
                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_8F439B80"));
            auto587227D1_g = PlayerGroupAll();
            auto587227D1_var = -1;
            while (true) {
                auto587227D1_var = PlayerGroupNextPlayer(auto587227D1_g, auto587227D1_var);
                if (auto587227D1_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto587227D1_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto587227D1_var, c_allianceIdControl, EventPlayer(), false);
                }

            }
        }
    }
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Control_Init () {
    libARRA_gt_UT_Control = TriggerCreate("libARRA_gt_UT_Control_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Control, c_playerAny, "-control", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Resource
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Resource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 2)));
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 3)));
    libARRA_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Resource_Init () {
    libARRA_gt_UT_Resource = TriggerCreate("libARRA_gt_UT_Resource_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Resource, c_playerAny, "-resource", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DebugApplySkin
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DebugApplySkin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(StringWord(EventChatMessage(false), 3)) >= 1)) {
        PlayerApplySkin(StringToInt(StringWord(EventChatMessage(false), 3)), (StringWord(EventChatMessage(false), 2)), true);
    }
    else {
        PlayerApplySkin(EventPlayer(), (StringWord(EventChatMessage(false), 2)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DebugApplySkin_Init () {
    libARRA_gt_UT_DebugApplySkin = TriggerCreate("libARRA_gt_UT_DebugApplySkin_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_DebugApplySkin, c_playerAny, "-skin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Debug Mode
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_DebugMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libARRA_gt_UT_FastBuild, true, false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 50000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    VisRevealerCreate(EventPlayer(), RegionEntireMap());
    libARRA_gv_uT_Revealer = VisRevealerLastCreated();
    libARRA_gv_uT_Revealed = true;
    libARRA_gf_UT_Cheat();
    TriggerEnable(libARRA_gt_UT_CTRLC, true);
    TriggerEnable(libARRA_gt_UT_CTRLV, true);
    PlayerGroupAdd(libARRA_gv_uT_PlayersWithNumbers, EventPlayer());
    TriggerEnable(libARRA_gt_UT_NumbersDamage, true);
    TriggerEnable(libARRA_gt_UT_NumbersHeal, true);
    TriggerEnable(libARRA_gt_UT_UI_CtrlH, true);
    TriggerEnable(libARRA_gt_UpgradeChanged, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_DebugMode_Init () {
    libARRA_gt_UT_DebugMode = TriggerCreate("libARRA_gt_UT_DebugMode_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_DebugMode, c_playerAny, "Debug Mode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Button Create
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_ButtonCreate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(50, 50, c_anchorCenter, 530, -400, true);
    libARRA_gv_uT_Graph_ButtonDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 2000);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 50, 50, c_anchorTopLeft, 0, 0, StringToText(""), StringToText(""), "");
    libARRA_gv_uT_Graph_Button = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_ButtonCreate_Init () {
    libARRA_gt_UT_Graph_ButtonCreate = TriggerCreate("libARRA_gt_UT_Graph_ButtonCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clicked
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Clicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libARRA_gv_uT_Graph_Button))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Graph_HideAllGraphsExcept(0, EventPlayer());
    DialogSetVisible(libARRA_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Clicked_Init () {
    libARRA_gt_UT_Clicked = TriggerCreate("libARRA_gt_UT_Clicked_Func");
    TriggerAddEventDialogControl(libARRA_gt_UT_Clicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Initialization
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    libARRA_gv_graphsGeneral.lv_active = true;
    libARRA_gv_graphsGeneral.lv_playerLeft = 1;
    libARRA_gv_graphsGeneral.lv_teamLeft = 1;
    libARRA_gv_graphsGeneral.lv_playerRight = 2;
    libARRA_gv_graphsGeneral.lv_teamRight = 2;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GraphContainer");
    libARRA_gv_graphsGeneral.lv_container = DialogControlLastCreated();
    libARRA_gf_UT_Graph_DefineGraph(1, StringExternal("Param/Value/lib_ARRA_8A683B6B"), "IncomeGraph", "ResourceCollectionRate", libARRA_ge_GraphStyle_Comparative, 350.0, 400.0, 200.0);
    libARRA_gf_UT_Graph_DefineGraph(2, StringExternal("Param/Value/lib_ARRA_6BBCB380"), "ArmySizeGraph", "ResourceValueArmySampled", libARRA_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libARRA_gf_UT_Graph_DefineGraph(3, StringExternal("Param/Value/lib_ARRA_9BA28D67"), "ApmGraph", "APM", libARRA_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libARRA_gf_UT_Graph_DefineGraph(4, StringExternal("Param/Value/lib_ARRA_383B805A"), "KillsGraph", "UnitsKilledCount", libARRA_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    libARRA_gf_UT_Graph_DefineGraph(5, StringExternal("Param/Value/lib_ARRA_37D9F867"), "ValueLostGraph", "ResourceLostArmy", libARRA_ge_GraphStyle_Comparative, 40.0, 50.0, 50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_Initialization_Init () {
    libARRA_gt_UT_Graph_Initialization = TriggerCreate("libARRA_gt_UT_Graph_Initialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_Timer
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_Timer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bar;
    int lv_graph;
    int lv_count;
    int lv_count2;

    // Automatic Variable Declarations
    int auto64199A2F_ae;
    const int auto64199A2F_ai = 1;
    int autoB638ED5C_val;
    int auto773D499C_ae;
    const int auto773D499C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/GraphContainer/KillsGraph/Graph/AdditionalGraphInfo"));
    TextExpressionSetToken("Param/Expression/lib_ARRA_64AD2B5F", "A", IntToText(PlayerScoreValueGetAsInt(1, "UnitsKilledCount")));
    TextExpressionSetToken("Param/Expression/lib_ARRA_64AD2B5F", "B", IntToText(PlayerScoreValueGetAsInt(2, "UnitsKilledCount")));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_ARRA_64AD2B5F"), PlayerGroupAll());
    libARRA_gv_graphsGeneral.lv_currentInterval += 1;
    if ((libARRA_gv_graphsGeneral.lv_currentInterval == libARRA_gv_graphsGeneral.lv_intervals)) {
        libARRA_gv_graphsGeneral.lv_currentNode += 1;
    }

    auto64199A2F_ae = libARRA_gv_graphsGeneral.lv_totalGraphs;
    lv_graph = 1;
    for ( ; ( (auto64199A2F_ai >= 0 && lv_graph <= auto64199A2F_ae) || (auto64199A2F_ai < 0 && lv_graph >= auto64199A2F_ae) ) ; lv_graph += auto64199A2F_ai ) {
        libARRA_gv_graphsData[lv_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamLeft][libARRA_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libARRA_gv_graphsGeneral.lv_playerLeft, libARRA_gv_graphsData[lv_graph].lv_scoreType);
        libARRA_gv_graphsData[lv_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamRight][libARRA_gv_graphsGeneral.lv_currentInterval] = PlayerScoreValueGetAsInt(libARRA_gv_graphsGeneral.lv_playerRight, libARRA_gv_graphsData[lv_graph].lv_scoreType);
        if ((libARRA_gv_graphsGeneral.lv_currentInterval == libARRA_gv_graphsGeneral.lv_intervals)) {
            autoB638ED5C_val = libARRA_gv_graphsData[lv_graph].lv_style;
            if (autoB638ED5C_val == libARRA_ge_GraphStyle_Comparative) {
                libARRA_gf_UT_Graph_UpdateDataComparative(lv_graph);
            }
            else if (autoB638ED5C_val == libARRA_ge_GraphStyle_Differential) {
                libARRA_gf_UT_Graph_UpdateDataDifferential(lv_graph);
            }
            else {
            }
            auto773D499C_ae = libARRA_gv_graphsGeneral.lv_intervals;
            lv_count = 1;
            for ( ; ( (auto773D499C_ai >= 0 && lv_count <= auto773D499C_ae) || (auto773D499C_ai < 0 && lv_count >= auto773D499C_ae) ) ; lv_count += auto773D499C_ai ) {
                libARRA_gv_graphsData[lv_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamLeft][lv_count] = 0;
                libARRA_gv_graphsData[lv_graph].lv_tempValues[libARRA_gv_graphsGeneral.lv_teamRight][lv_count] = 0;
            }
        }

    }
    if ((libARRA_gv_graphsGeneral.lv_currentInterval == libARRA_gv_graphsGeneral.lv_intervals)) {
        libARRA_gv_graphsGeneral.lv_currentInterval = 0;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_Timer_Init () {
    libARRA_gt_UT_Graph_Timer = TriggerCreate("libARRA_gt_UT_Graph_Timer_Func");
    TriggerAddEventTimePeriodic(libARRA_gt_UT_Graph_Timer, 2.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowIncome
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_ShowIncome_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Graph_HideAllGraphsExcept(1, EventPlayer());
    TriggerExecute(libARRA_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libARRA_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_ShowIncome_Init () {
    libARRA_gt_UT_Graph_ShowIncome = TriggerCreate("libARRA_gt_UT_Graph_ShowIncome_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Graph_ShowIncome, c_playerAny, "-gincome", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowArmyValue
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_ShowArmyValue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Graph_HideAllGraphsExcept(2, EventPlayer());
    TriggerExecute(libARRA_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libARRA_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_ShowArmyValue_Init () {
    libARRA_gt_UT_Graph_ShowArmyValue = TriggerCreate("libARRA_gt_UT_Graph_ShowArmyValue_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Graph_ShowArmyValue, c_playerAny, "-garmy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowAPM
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_ShowAPM_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Graph_HideAllGraphsExcept(3, EventPlayer());
    TriggerExecute(libARRA_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libARRA_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_ShowAPM_Init () {
    libARRA_gt_UT_Graph_ShowAPM = TriggerCreate("libARRA_gt_UT_Graph_ShowAPM_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Graph_ShowAPM, c_playerAny, "-gapm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowKills
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_ShowKills_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Graph_HideAllGraphsExcept(4, EventPlayer());
    TriggerExecute(libARRA_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libARRA_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_ShowKills_Init () {
    libARRA_gt_UT_Graph_ShowKills = TriggerCreate("libARRA_gt_UT_Graph_ShowKills_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Graph_ShowKills, c_playerAny, "-gkills", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Graph_ShowValueLost
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Graph_ShowValueLost_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_UT_Graph_HideAllGraphsExcept(5, EventPlayer());
    TriggerExecute(libARRA_gt_UT_Graph_ButtonCreate, true, true);
    DialogSetVisible(libARRA_gv_uT_Graph_ButtonDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Graph_ShowValueLost_Init () {
    libARRA_gt_UT_Graph_ShowValueLost = TriggerCreate("libARRA_gt_UT_Graph_ShowValueLost_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Graph_ShowValueLost, c_playerAny, "-glost", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pie
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UT_Pie_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gv_uT_Pie[1][EventPlayer()] == c_invalidDialogId) && (libARRA_gv_uT_Pie[2][EventPlayer()] == c_invalidDialogId)) {
        libARRA_gf_UT_Graph_HideAllGraphsExcept(0, EventPlayer());
        libARRA_gf_UT_CreatePieChartfromDamageLog(1, -350, 50, c_anchorCenter, 0);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libARRA_gv_uT_Pie[1][EventPlayer()] = DialogLastCreated();
        libARRA_gf_UT_CreatePieChartfromDamageLog(2, 350, 50, c_anchorCenter, 8);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libARRA_gv_uT_Pie[2][EventPlayer()] = DialogLastCreated();
    }
    else {
        DialogDestroy(libARRA_gv_uT_Pie[1][EventPlayer()]);
        libARRA_gv_uT_Pie[1][EventPlayer()] = c_invalidDialogId;
        DialogDestroy(libARRA_gv_uT_Pie[2][EventPlayer()]);
        libARRA_gv_uT_Pie[2][EventPlayer()] = c_invalidDialogId;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UT_Pie_Init () {
    libARRA_gt_UT_Pie = TriggerCreate("libARRA_gt_UT_Pie_Func");
    TriggerAddEventChatMessage(libARRA_gt_UT_Pie, c_playerAny, "-pie", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AF_SlimUI
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_AF_SlimUI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libARRA_gf_UT_DevCommandsActive(libARRA_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameIsMissionTimePaused() == true)) {
        if ((PlayerGroupHasPlayer(libARRA_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
            PlayerGroupAdd(libARRA_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_C9EC4DD6"));
        }
        else {
            PlayerGroupRemove(libARRA_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_E74401AF"));
        }
    }
    else {
        if ((GameGetMissionTime() < 5.0)) {
            PlayerGroupAdd(libARRA_gv_aF_SlimUI_PlayerGroup, EventPlayer());
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_ARRA_F70C3E99"));
        }
        else {
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
            if ((PlayerGroupHasPlayer(libARRA_gv_aF_SlimUI_PlayerGroup, EventPlayer()) == false)) {
                PlayerGroupAdd(libARRA_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, false);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_On");
            }
            else {
                PlayerGroupRemove(libARRA_gv_aF_SlimUI_PlayerGroup, EventPlayer());
                UISetFrameVisible(PlayerGroupSingle(EventPlayer()), c_syncFrameTypeConsolePanel, true);
                DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), "SlimUI_Off");
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_AF_SlimUI_Init () {
    libARRA_gt_AF_SlimUI = TriggerCreate("libARRA_gt_AF_SlimUI_Func");
    TriggerAddEventChatMessage(libARRA_gt_AF_SlimUI, c_playerAny, "-slim", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyViewUpdate
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_CU_MinimapAllyViewUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingSetPosition(libARRA_gv_cU_MinimapAllyViewPing[EventPlayer()], CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_CU_MinimapAllyViewUpdate_Init () {
    libARRA_gt_CU_MinimapAllyViewUpdate = TriggerCreate("libARRA_gt_CU_MinimapAllyViewUpdate_Func");
    TriggerEnable(libARRA_gt_CU_MinimapAllyViewUpdate, false);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 0, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 1, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 2, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 3, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 4, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 5, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 6, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 7, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 8, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 9, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 10, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 11, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 12, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 13, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 14, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libARRA_gt_CU_MinimapAllyViewUpdate, 15, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyPlayerLeaves
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_CU_MinimapAllyPlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libARRA_gv_cU_MinimapAllyViewPing[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_CU_MinimapAllyPlayerLeaves_Init () {
    libARRA_gt_CU_MinimapAllyPlayerLeaves = TriggerCreate("libARRA_gt_CU_MinimapAllyPlayerLeaves_Func");
    TriggerEnable(libARRA_gt_CU_MinimapAllyPlayerLeaves, false);
    TriggerAddEventPlayerLeft(libARRA_gt_CU_MinimapAllyPlayerLeaves, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyViewCamera
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_CU_MinimapAllyViewCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allyPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto13AA6955_g;
    int auto13AA6955_var;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto13AA6955_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    auto13AA6955_var = -1;
    while (true) {
        auto13AA6955_var = PlayerGroupNextPlayer(auto13AA6955_g, auto13AA6955_var);
        if (auto13AA6955_var < 0) { break; }
        if ((PlayerType(auto13AA6955_var) == c_playerTypeUser) && (PlayerStatus(auto13AA6955_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_playerGroup, auto13AA6955_var);
        }

    }
    if ((EventKeyShift() == true) && (PlayerGroupCount(lv_playerGroup) > 1)) {
        lv_allyPlayer = PlayerGroupPlayer(lv_playerGroup, 2);
    }
    else {
        lv_allyPlayer = PlayerGroupPlayer(lv_playerGroup, 1);
    }
    CameraPan(EventPlayer(), CameraGetTarget(lv_allyPlayer), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_CU_MinimapAllyViewCamera_Init () {
    libARRA_gt_CU_MinimapAllyViewCamera = TriggerCreate("libARRA_gt_CU_MinimapAllyViewCamera_Func");
    TriggerEnable(libARRA_gt_CU_MinimapAllyViewCamera, false);
    TriggerAddEventKeyPressed(libARRA_gt_CU_MinimapAllyViewCamera, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task.Fail
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TaskFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_TaskFail(libARRA_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TaskFail_Init () {
    libARRA_gt_TaskFail = TriggerCreate("libARRA_gt_TaskFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task.Complete
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TaskComplete_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_TaskComplete(libARRA_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TaskComplete_Init () {
    libARRA_gt_TaskComplete = TriggerCreate("libARRA_gt_TaskComplete_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task.Start
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TaskStart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_TaskStart(libARRA_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TaskStart_Init () {
    libARRA_gt_TaskStart = TriggerCreate("libARRA_gt_TaskStart_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task.IncreaseProgress
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TaskIncreaseProgress_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_TaskIncreaseProgress(libARRA_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TaskIncreaseProgress_Init () {
    libARRA_gt_TaskIncreaseProgress = TriggerCreate("libARRA_gt_TaskIncreaseProgress_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task.IncreaseFail
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TaskIncreaseFail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libARRA_gf_TaskIncreaseFail(libARRA_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TaskIncreaseFail_Init () {
    libARRA_gt_TaskIncreaseFail = TriggerCreate("libARRA_gt_TaskIncreaseFail_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Objective
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_UpdateObjective_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetName(libARRA_gf_ObjectiveStoredForTask(libARRA_gv_task, "Objective"), libARRA_gf_TaskObjectiveText(libARRA_gv_task));
    libARRA_gf_TaskUpdateObjective(libARRA_gv_task);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_UpdateObjective_Init () {
    libARRA_gt_UpdateObjective = TriggerCreate("libARRA_gt_UpdateObjective_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Peridoc Event
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_CreatePeridocEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_periodicTrigger;
    int lv_task;
    int lv_eventindex;

    // Automatic Variable Declarations
    int auto3BF4465E_saved_task;
    int auto3BF4465E_saved_parent;
    int auto3BF4465E_saved_listener;

    // Variable Initialization
    lv_periodicTrigger = libARRA_gv_pickedPeridocEventTrigger;
    lv_task = libARRA_gv_task;
    lv_eventindex = libARRA_gv_periodicEventsCreated;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((DataTableGetFixed(true, ("PERIODIC_EVENT_PERIOD_" + IntToString(lv_eventindex))) > 0.0)) {
        auto3BF4465E_saved_task   = libARRA_gv_task;
        auto3BF4465E_saved_parent = libARRA_gv_parent;
        auto3BF4465E_saved_listener = libARRA_gv_listener;
        Wait(DataTableGetFixed(true, ("PERIODIC_EVENT_PERIOD_" + IntToString(lv_eventindex))), c_timeReal ); //Async
        libARRA_gv_task   = auto3BF4465E_saved_task;
        libARRA_gv_parent = auto3BF4465E_saved_parent;
        libARRA_gv_listener = auto3BF4465E_saved_listener;
        if(libARRA_gf_TaskActive(lv_task) == false){return true;}
        libARRA_gv_triggeringPeriodicEvent = lv_eventindex;
        libARRA_gf_TaskRun(lv_task, lv_periodicTrigger, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_CreatePeridocEvent_Init () {
    libARRA_gt_CreatePeridocEvent = TriggerCreate("libARRA_gt_CreatePeridocEvent_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: TaskTimeoutTrigger
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TaskTimeoutTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    trigger lv_responseTrigger;
    fixed lv_delay;

    // Automatic Variable Declarations
    int autoD5AAD178_saved_task;
    int autoD5AAD178_saved_parent;
    int autoD5AAD178_saved_listener;

    // Variable Initialization
    lv_responseTrigger = libARRA_gv_taskTimeoutTrigger;
    lv_delay = libARRA_gv_taskTimeoutDelay;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD5AAD178_saved_task   = libARRA_gv_task;
    autoD5AAD178_saved_parent = libARRA_gv_parent;
    autoD5AAD178_saved_listener = libARRA_gv_listener;
    Wait(lv_delay, c_timeReal ); //Async
    libARRA_gv_task   = autoD5AAD178_saved_task;
    libARRA_gv_parent = autoD5AAD178_saved_parent;
    libARRA_gv_listener = autoD5AAD178_saved_listener;
    if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
    libARRA_gf_TaskRun(libARRA_gv_task, lv_responseTrigger, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TaskTimeoutTrigger_Init () {
    libARRA_gt_TaskTimeoutTrigger = TriggerCreate("libARRA_gt_TaskTimeoutTrigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tracker - Timer Expired
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TrackerTimerExpired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tracker;
    int lv_task;
    trigger lv_responseTrigger;

    // Automatic Variable Declarations
    int auto2BCC3BF2_ae;
    int auto2BCC3BF2_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2BCC3BF2_ae = libARRA_gf_ListSize(libARRA_gv_tIMERTRACKERSLIST);
    auto2BCC3BF2_var = 1;
    for ( ; auto2BCC3BF2_var <= auto2BCC3BF2_ae; auto2BCC3BF2_var += 1 ) {
        lv_tracker = libARRA_gf_ListIntGet(libARRA_gv_tIMERTRACKERSLIST, auto2BCC3BF2_var);
        if ((EventTimer() == DataTableGetTimer(true, ("TIMER_" + IntToString(lv_tracker))))) {
            lv_responseTrigger = DataTableGetTrigger(true, ("TIMER_TRIGGER_" + IntToString(lv_tracker)));
            lv_task = DataTableGetInt(true, ("TIMER_TASK_" + IntToString(lv_tracker)));
            libARRA_gv_tracker = lv_tracker;
            libARRA_gf_TaskRun(lv_task, lv_responseTrigger, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TrackerTimerExpired_Init () {
    libARRA_gt_TrackerTimerExpired = TriggerCreate("libARRA_gt_TrackerTimerExpired_Func");
    TriggerAddEventTimer(libARRA_gt_TrackerTimerExpired, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Units To Point
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_SendUnitsToPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    region lv_region;
    unitgroup lv_units;
    fixed lv_precision;

    // Automatic Variable Declarations
    int auto67125EC9_saved_task;
    int auto67125EC9_saved_parent;
    int auto67125EC9_saved_listener;

    // Variable Initialization
    lv_point = libARRA_gv_pickedPoint;
    lv_region = RegionCircle(lv_point, libARRA_gv_pickedPrecision);
    lv_units = UnitGroupFilter(null, c_playerAny, libARRA_gv_pickedUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_precision = libARRA_gv_pickedPrecision;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(lv_units, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
    auto67125EC9_saved_task     = libARRA_gv_task;
    auto67125EC9_saved_parent   = libARRA_gv_parent;
    auto67125EC9_saved_listener = libARRA_gv_listener;
    do {
        if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
        libARRA_gf_SetTriggeringTask(libARRA_gv_task);
        UnitGroupIssueOrder(lv_units, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
        Wait(0.25, c_timeReal); //Async
    }
    while ((UnitGroupCount(lv_units, c_unitCountAlive) > 0) && (!(libARRA_gf_AllUnitsFromUnitGroupInRegion(lv_units, lv_region))));
    libARRA_gv_task   = auto67125EC9_saved_task;
    libARRA_gv_parent = auto67125EC9_saved_parent;
    libARRA_gv_listener = auto67125EC9_saved_listener;
    if(libARRA_gf_TaskActive(libARRA_gv_task) == false){return true;}
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_SendUnitsToPoint_Init () {
    libARRA_gt_SendUnitsToPoint = TriggerCreate("libARRA_gt_SendUnitsToPoint_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tracker - Unit Dies
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TrackerUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_task;
    int lv_tracker;
    unitgroup lv_trackedUnits;
    trigger lv_responseTrigger;

    // Automatic Variable Declarations
    int auto77640B70_ae;
    int auto77640B70_var;

    // Variable Initialization
    lv_trackedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto77640B70_ae = libARRA_gf_ListSize(libARRA_gv_tRACKERS);
    auto77640B70_var = 1;
    for ( ; auto77640B70_var <= auto77640B70_ae; auto77640B70_var += 1 ) {
        lv_tracker = libARRA_gf_ListIntGet(libARRA_gv_tRACKERS, auto77640B70_var);
        lv_trackedUnits = DataTableGetUnitGroup(true, ("&" + IntToString(lv_tracker)));
        if ((UnitGroupHasUnit(lv_trackedUnits, EventUnit()) == false)) {
            continue;
        }

        libARRA_gf_TrackerEmit(lv_tracker, "Dead", "");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TrackerUnitDies_Init () {
    libARRA_gt_TrackerUnitDies = TriggerCreate("libARRA_gt_TrackerUnitDies_Func");
    TriggerAddEventUnitDied(libARRA_gt_TrackerUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tracker - Unit Damaged
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_TrackerUnitDamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tracker;
    int lv_task;
    unitgroup lv_trackedUnits;
    trigger lv_responseTrigger;

    // Automatic Variable Declarations
    int autoAC131C5F_ae;
    int autoAC131C5F_var;

    // Variable Initialization
    lv_trackedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC131C5F_ae = libARRA_gf_ListSize(libARRA_gv_tRACKERS);
    autoAC131C5F_var = 1;
    for ( ; autoAC131C5F_var <= autoAC131C5F_ae; autoAC131C5F_var += 1 ) {
        lv_tracker = libARRA_gf_ListIntGet(libARRA_gv_tRACKERS, autoAC131C5F_var);
        lv_trackedUnits = DataTableGetUnitGroup(true, ("&" + IntToString(lv_tracker)));
        if ((UnitGroupHasUnit(lv_trackedUnits, EventUnit()) == false)) {
            continue;
        }

        libARRA_gf_TrackerEmit(lv_tracker, "Damage", "");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_TrackerUnitDamaged_Init () {
    libARRA_gt_TrackerUnitDamaged = TriggerCreate("libARRA_gt_TrackerUnitDamaged_Func");
    TriggerAddEventUnitDamaged(libARRA_gt_TrackerUnitDamaged, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Emergency Start Region
//--------------------------------------------------------------------------------------------------
bool libARRA_gt_CheckEmergencyStartRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;
    region lv_region;
    trigger lv_trigger;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = libARRA_gf_GetTeamPlayers(libARRA_gf_IntegerForTask2(libARRA_gv_task, "Team"));
    lv_region = libARRA_gf_RegionForTask(libARRA_gv_task, "EmergencyStartRegion");
    lv_trigger = libARRA_gf_TriggerStoredForTask(libARRA_gv_task, "EmergencyStartTrigger");

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libARRA_gf_IntegerForTask(libARRA_gv_task, "State") == libARRA_gv_stateUndiscovered)) {
        if (libARRA_gf_AnyUnitOfPlayerGroupInRegion(lv_players, lv_region)) {
            libARRA_gf_RunMissionVictorySequence5(libARRA_gf_TriggeringPeriodic());
            libARRA_gf_TaskRun(libARRA_gv_task, lv_trigger, false);
        }

    }
    else {
        libARRA_gf_RunMissionVictorySequence5(libARRA_gf_TriggeringPeriodic());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARRA_gt_CheckEmergencyStartRegion_Init () {
    libARRA_gt_CheckEmergencyStartRegion = TriggerCreate("libARRA_gt_CheckEmergencyStartRegion_Func");
}

void libARRA_InitTriggers () {
    libARRA_gt_PingUsed_Init();
    libARRA_gt_PingResetTimerExprires_Init();
    libARRA_gt_PingPanelAutoDisable_Init();
    libARRA_gt_MeleeSurrender_Surrender_Init();
    libARRA_gt_MeleeSurrender_SurrenderClickedButton_Init();
    libARRA_gt_MeleeSurrender_FlashDialog_Init();
    libARRA_gt_StarCraftEvents_Init();
    libARRA_gt_TransportController_Init();
    libARRA_gt_AutoRevealRegionController_Init();
    libARRA_gt_UT_InfoSave_Init();
    libARRA_gt_UT_Info_Init();
    libARRA_gt_UT_InfoButton_Init();
    libARRA_gt_UT_InfoCreate_Init();
    libARRA_gt_UT_UI_Init();
    libARRA_gt_UT_UI_CtrlH_Init();
    libARRA_gt_UT_ButtonMonitor_Init();
    libARRA_gt_UT_ButtonUsage_Init();
    libARRA_gt_UT_HotkeyChange_Init();
    libARRA_gt_UT_Godmode_Init();
    libARRA_gt_UT_Godmode_unit_created_Init();
    libARRA_gt_UT_UnitInfo_Init();
    libARRA_gt_UT_UnitInfoUpdate_Init();
    libARRA_gt_UT_FastConstruction_Init();
    libARRA_gt_UT_FastTrain_Init();
    libARRA_gt_UT_FastResearch_Init();
    libARRA_gt_UT_FastArrm_Init();
    libARRA_gt_UT_FastRevive_Init();
    libARRA_gt_UT_FastBuild_Init();
    libARRA_gt_UT_ToggleEco_Init();
    libARRA_gt_UT_EconomyValue_Init();
    libARRA_gt_UT_WorkerSaturation_Init();
    libARRA_gt_UT_ListEmotes_Init();
    libARRA_gt_UT_Emote_ButtonClicked_Init();
    libARRA_gt_UpgradeChanged_Init();
    libARRA_gt_UT_Debug_Init();
    libARRA_gt_AbilityUsed_Init();
    libARRA_gt_UnitCreated_Init();
    libARRA_gt_UnitDied_Init();
    libARRA_gt_UnitRevived_Init();
    libARRA_gt_EffectUsed_Init();
    libARRA_gt_BehaviorChanged_Init();
    libARRA_gt_EffectDealingDamage_Init();
    libARRA_gt_UT_Trace_Init();
    libARRA_gt_UT_Tracing_Init();
    libARRA_gt_UT_DeTracing_Init();
    libARRA_gt_UT_CopyPaste_Init();
    libARRA_gt_UT_CTRLC_Init();
    libARRA_gt_UT_CTRLV_Init();
    libARRA_gt_UT_PathCheck_Init();
    libARRA_gt_UT_PathCheckTAB_Init();
    libARRA_gt_UT_Light_Init();
    libARRA_gt_UT_Plus_Init();
    libARRA_gt_UT_Minus_Init();
    libARRA_gt_UT_MissileMovers_Init();
    libARRA_gt_UT_MissileCreated_Init();
    libARRA_gt_UT_Height_Init();
    libARRA_gt_UT_AttackSpeed_Init();
    libARRA_gt_UT_Life_Init();
    libARRA_gt_UT_Energy_Init();
    libARRA_gt_UT_MovementSpeed_Init();
    libARRA_gt_UT_Acceleration_Init();
    libARRA_gt_UT_Range_Init();
    libARRA_gt_UT_ARange_Init();
    libARRA_gt_UT_Armor_Init();
    libARRA_gt_UT_TintColor_Init();
    libARRA_gt_UT_Scale_Init();
    libARRA_gt_UT_TimeScale_Init();
    libARRA_gt_UT_ActorMsg_Init();
    libARRA_gt_UT_AirGround_Init();
    libARRA_gt_UT_Camera_TurnOnOff_Init();
    libARRA_gt_UT_Camera_Reset_Init();
    libARRA_gt_UT_Camera_Top_Init();
    libARRA_gt_UT_Camera_KeyUp_Init();
    libARRA_gt_UT_Camera_KeyDown_Init();
    libARRA_gt_UT_Camera_PeriodicUpdate_Init();
    libARRA_gt_UT_Dummy_Init();
    libARRA_gt_UT_DummyTakesDamage_Init();
    libARRA_gt_UT_DummyUpdate_Init();
    libARRA_gt_UT_DummyDestroyed_Init();
    libARRA_gt_UT_DPS_Init();
    libARRA_gt_UT_DPS_Stop_Init();
    libARRA_gt_UT_DPS_DealsDamage_Init();
    libARRA_gt_UT_DPS_Summon_Init();
    libARRA_gt_UT_DPS_Dies_Init();
    libARRA_gt_UT_DPS_PauseGlobal_Init();
    libARRA_gt_UT_Vision_Init();
    libARRA_gt_UT_Numberstoggle_Init();
    libARRA_gt_UT_NumbersDamage_Init();
    libARRA_gt_UT_NumbersHeal_Init();
    libARRA_gt_UT_DL_LogDisplay_Init();
    libARRA_gt_UT_DL_PeriodicUpdate_Init();
    libARRA_gt_UT_DL_DamageLogging_Init();
    libARRA_gt_UT_DL_HealLogging_Init();
    libARRA_gt_UT_EnableDevCommands_Init();
    libARRA_gt_UT_DisableDevCommandsforally_Init();
    libARRA_gt_UT_Rad_Init();
    libARRA_gt_UT_XP_Init();
    libARRA_gt_UT_ListDead_Init();
    libARRA_gt_UT_ListHidden_Init();
    libARRA_gt_UT_ListMissile_Init();
    libARRA_gt_UT_ListAll_Init();
    libARRA_gt_UT_Teleport_Init();
    libARRA_gt_UT_Restart_Init();
    libARRA_gt_UT_GetID_Init();
    libARRA_gt_UT_Restore_Init();
    libARRA_gt_UT_Pause_Init();
    libARRA_gt_UT_Money_Init();
    libARRA_gt_UT_Look_Init();
    libARRA_gt_UT_sight_Init();
    libARRA_gt_UT_Kill_Init();
    libARRA_gt_UT_Remove_Init();
    libARRA_gt_UT_PauseAI_Init();
    libARRA_gt_UT_Speed_Init();
    libARRA_gt_UT_Supply_Init();
    libARRA_gt_UT_Give_Init();
    libARRA_gt_UT_SwitchOwner_Init();
    libARRA_gt_UT_Cost_Init();
    libARRA_gt_UT_clearscreen_Init();
    libARRA_gt_UT_ClearEnemy_Init();
    libARRA_gt_UT_SpawnUnits_Init();
    libARRA_gt_UT_Control_Init();
    libARRA_gt_UT_Resource_Init();
    libARRA_gt_UT_DebugApplySkin_Init();
    libARRA_gt_UT_DebugMode_Init();
    libARRA_gt_UT_Graph_ButtonCreate_Init();
    libARRA_gt_UT_Clicked_Init();
    libARRA_gt_UT_Graph_Initialization_Init();
    libARRA_gt_UT_Graph_Timer_Init();
    libARRA_gt_UT_Graph_ShowIncome_Init();
    libARRA_gt_UT_Graph_ShowArmyValue_Init();
    libARRA_gt_UT_Graph_ShowAPM_Init();
    libARRA_gt_UT_Graph_ShowKills_Init();
    libARRA_gt_UT_Graph_ShowValueLost_Init();
    libARRA_gt_UT_Pie_Init();
    libARRA_gt_AF_SlimUI_Init();
    libARRA_gt_CU_MinimapAllyViewUpdate_Init();
    libARRA_gt_CU_MinimapAllyPlayerLeaves_Init();
    libARRA_gt_CU_MinimapAllyViewCamera_Init();
    libARRA_gt_TaskFail_Init();
    libARRA_gt_TaskComplete_Init();
    libARRA_gt_TaskStart_Init();
    libARRA_gt_TaskIncreaseProgress_Init();
    libARRA_gt_TaskIncreaseFail_Init();
    libARRA_gt_UpdateObjective_Init();
    libARRA_gt_CreatePeridocEvent_Init();
    libARRA_gt_TaskTimeoutTrigger_Init();
    libARRA_gt_TrackerTimerExpired_Init();
    libARRA_gt_SendUnitsToPoint_Init();
    libARRA_gt_TrackerUnitDies_Init();
    libARRA_gt_TrackerUnitDamaged_Init();
    libARRA_gt_CheckEmergencyStartRegion_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libARRA_InitLib_completed = false;

void libARRA_InitLib () {
    if (libARRA_InitLib_completed) {
        return;
    }

    libARRA_InitLib_completed = true;

    libARRA_InitLibraries();
    libARRA_InitVariables();
    libARRA_InitTriggers();
}

include "LibVSAI"

