include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: COOP
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libCOMI_ge_UnitCategory_StructureMain = 0;
const int libCOMI_ge_UnitCategory_StructureSupply = 1;
const int libCOMI_ge_UnitCategory_StructureRefinery = 2;
const int libCOMI_ge_UnitCategory_StructureProductionLight = 3;
const int libCOMI_ge_UnitCategory_StructureProductionHeavy = 4;
const int libCOMI_ge_UnitCategory_StructureProductionAir = 5;
const int libCOMI_ge_UnitCategory_StructureUpgradesLight = 6;
const int libCOMI_ge_UnitCategory_StructureUpgradesHeavy = 7;
const int libCOMI_ge_UnitCategory_StructureUpgradesAir = 8;
const int libCOMI_ge_UnitCategory_StructureTechLight = 9;
const int libCOMI_ge_UnitCategory_StructureTechHeavy = 10;
const int libCOMI_ge_UnitCategory_StructureTechAir = 11;
const int libCOMI_ge_UnitCategory_StructureDefense = 12;
const int libCOMI_ge_UnitCategory_Worker = 13;
const int libCOMI_ge_UnitCategory_Detector = 14;
const int libCOMI_ge_UnitCategory_Transport = 15;
const int libCOMI_ge_UnitCategory_Combat = 16;
const int libCOMI_ge_UnitCategory_CombatDetector = 17;
const int libCOMI_ge_UnitCategory_CombatSupport = 18;
const int libCOMI_ge_UnitCategory_CombatGroundLightA = 19;
const int libCOMI_ge_UnitCategory_CombatGroundLightB = 20;
const int libCOMI_ge_UnitCategory_CombatGroundLightC = 21;
const int libCOMI_ge_UnitCategory_CombatGroundLightD = 22;
const int libCOMI_ge_UnitCategory_CombatGroundCaster = 23;
const int libCOMI_ge_UnitCategory_CombatGroundHeavyA = 24;
const int libCOMI_ge_UnitCategory_CombatGroundHeavyB = 25;
const int libCOMI_ge_UnitCategory_CombatGroundHeavyC = 26;
const int libCOMI_ge_UnitCategory_CombatGroundHeavyD = 27;
const int libCOMI_ge_UnitCategory_CombatGroundUltimate = 28;
const int libCOMI_ge_UnitCategory_CombatAirLightA = 29;
const int libCOMI_ge_UnitCategory_CombatAirLightB = 30;
const int libCOMI_ge_UnitCategory_CombatAirHeavyA = 31;
const int libCOMI_ge_UnitCategory_CombatAirHeavyB = 32;
const int libCOMI_ge_UnitCategory_CombatAiirCaster = 33;
const int libCOMI_ge_UnitCategory_CombatAirUltimate = 34;
const int libCOMI_ge_ExpansionRockType_TownHallRock = 0;
const int libCOMI_ge_ExpansionRockType_GeyserRock = 1;
const int libCOMI_ge_UnitBuffMultiplierMethod_Exponential = 0;
const int libCOMI_ge_UnitBuffMultiplierMethod_Linear = 1;
const int libCOMI_ge_SleepWakeUpExcludeOption_Always = 0;
const int libCOMI_ge_SleepWakeUpExcludeOption_RespectExclusions = 1;
const int libCOMI_ge_SingularBossBarStyle_BossEnemy = 0;
const int libCOMI_ge_SingularBossBarStyle_Objective = 1;
const int libCOMI_ge_CM_SoATargetingPhaseType_None = 0;
const int libCOMI_ge_CM_SoATargetingPhaseType_Location = 1;
const int libCOMI_ge_CM_SoATargetingPhaseType_Direction = 2;
const int libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Dialog = 0;
const int libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Panel = 1;
const int libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Label = 2;
const int libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_Value = 3;
const int libCOMI_ge_CU_ProgressBarUnit_DialogTypesOld_ProgressBar_ProgressBar = 4;
const int libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MinValue = 0;
const int libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_CurValue = 1;
const int libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_MaxValue = 2;
const int libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetX = 3;
const int libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_OffsetY = 4;
const int libCOMI_ge_CU_ProgressBarUnitStoredValuesOld_Attachment = 5;
const int libCOMI_ge_CU_UnitProgressBarDataName_MinValue = 0;
const int libCOMI_ge_CU_UnitProgressBarDataName_CurValue = 1;
const int libCOMI_ge_CU_UnitProgressBarDataName_MaxValue = 2;
const int libCOMI_ge_CU_UnitProgressBarDataName_DisplayValue = 3;
const int libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Label = 0;
const int libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Value = 1;
const int libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Bar = 2;
const int libCOMI_ge_CU_UnitProgressBar_DialogTypes_ProgressBar_Broder = 3;
const int libCOMI_ge_CM_ChatBarMode_CM_ChatBarNormal = 0;
const int libCOMI_ge_CM_ChatBarMode_CM_ChatBarMutator = 1;
const int libCOMI_ge_ObjectiveMessageType_ObjectiveDiscovered = 0;
const int libCOMI_ge_ObjectiveMessageType_ObjectiveUpdate = 1;
const int libCOMI_ge_ObjectiveMessageType_ObjectiveCompleted = 2;
const int libCOMI_ge_ObjectiveMessageType_ObjectiveFailed = 3;
const int libCOMI_ge_CampaignMessageType_MissionVictory = 0;
const int libCOMI_ge_CampaignMessageType_MissionFailed = 1;
const int libCOMI_ge_CampaignMessageType_Hint = 2;
const int libCOMI_ge_CampaignMessageType_SimpleHint = 3;
const int libCOMI_ge_CampaignMessageType_Secret = 4;
const int libCOMI_ge_CampaignMessageType_Warning = 5;
const int libCOMI_ge_CampaignMessageType_NewUnitAcquired = 6;
const int libCOMI_ge_CampaignMessageType_NewUnitAvailable = 7;
const int libCOMI_ge_CampaignMessageType_NewTechAvailable = 8;
const int libCOMI_ge_CampaignMessageType_NewUnitAvailable2 = 9;
const int libCOMI_ge_CampaignMessageFormatNotFormat_FormatMessage = 0;
const int libCOMI_ge_CampaignMessageFormatNotFormat_NotFormatMessage = 1;
const int libCOMI_ge_CampaginReticleType_ZergMainObjective = 0;
const int libCOMI_ge_CampaginReticleType_ZergBonusObjective = 1;
const int libCOMI_ge_CampaginReticleType_ZergEnemy = 2;
const int libCOMI_ge_CampaginReticleType_TerranMainObjective = 3;
const int libCOMI_ge_CampaginReticleType_TerranBonusObjective = 4;
const int libCOMI_ge_CampaginReticleType_TerranEnemy = 5;
const int libCOMI_ge_CampaginReticleType_ProtossMainObjective = 6;
const int libCOMI_ge_CampaginReticleType_ProtossBonusObjective = 7;
const int libCOMI_ge_CampaginReticleType_ProtossEnemy = 8;
const int libCOMI_ge_CampaginReticleSize_Large = 0;
const int libCOMI_ge_CampaginReticleSize_Medium = 1;
const int libCOMI_ge_CampaginReticleSize_Small = 2;
const int libCOMI_ge_Priority_AVOID = 0;
const int libCOMI_ge_Priority_LOW = 1;
const int libCOMI_ge_Priority_MEDIUM = 2;
const int libCOMI_ge_Priority_HIGH = 3;
const int libCOMI_ge_Priority_CRITICAL = 4;
const int libCOMI_ge_CoopAITechLevelBuckets__1Early = 0;
const int libCOMI_ge_CoopAITechLevelBuckets__2EarlyMid = 1;
const int libCOMI_ge_CoopAITechLevelBuckets__3Mid = 2;
const int libCOMI_ge_CoopAITechLevelBuckets__4LateMid = 3;
const int libCOMI_ge_CoopAITechLevelBuckets__5Late = 4;
const int libCOMI_ge_CoopAITechLevelBuckets_TechLevel06 = 5;
const int libCOMI_ge_CoopAITechLevelBuckets_TechLevel07 = 6;
const int libCOMI_ge_CoopAITechLevelBuckets_TechLevel10 = 7;
const int libCOMI_ge_CoopAIAttackWaveBuckets__1Smallest = 0;
const int libCOMI_ge_CoopAIAttackWaveBuckets__2Smaller = 1;
const int libCOMI_ge_CoopAIAttackWaveBuckets__3Small = 2;
const int libCOMI_ge_CoopAIAttackWaveBuckets__4Medium = 3;
const int libCOMI_ge_CoopAIAttackWaveBuckets__5Large = 4;
const int libCOMI_ge_CoopAIAttackWaveBuckets__6Larger = 5;
const int libCOMI_ge_CoopAIAttackWaveBuckets__7Largest = 6;
const int libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Relative = 0;
const int libCOMI_ge_CM_CoopAI_AttackForce_SetUnitType_Type_Absolute = 1;
const int libCOMI_ge_DropPodRace_Terran = 0;
const int libCOMI_ge_DropPodRace_Zerg = 1;
const int libCOMI_ge_CM_CoopAI_WaveAttackTargetType_PlayerBase = 0;
const int libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Objective = 1;
const int libCOMI_ge_CM_CoopAI_WaveAttackTargetType_BonusObjective = 2;
const int libCOMI_ge_CM_CoopAI_WaveAttackTargetType_Special = 3;
const int libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleMainRamp = 4;
const int libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleSideRamp = 5;
const int libCOMI_ge_CM_CoopAI_WaveAttackTargetType_ShakurasTempleAirRamp = 6;
const int libCOMI_ge_CC_CommanderVOLines_None = 0;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOResourcesSent = 1;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOResourcesRequested = 2;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOMineralsSent = 3;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOMineralsRequested = 4;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOVespeneSent = 5;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOVespeneRequested = 6;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOThankyou = 7;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsProtoss = 8;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsTerran = 9;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsZerg = 10;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOEnemyIsCloaked = 11;
const int libCOMI_ge_CC_CommanderVOLines_CC_CommanderVOArmyLost = 12;
const int libCOMI_ge_VolumeChannelModeCampaign_Cinematic = 0;
const int libCOMI_ge_VolumeChannelModeCampaign_Speech = 1;
const int libCOMI_ge_VolumeChannelModeCampaign_Game = 2;
const int libCOMI_ge_VolumeChannelModeCampaign_Victory = 3;
const int libCOMI_ge_VolumeChannelModeCampaign_Speech2 = 4;
const int libCOMI_ge_VolumeChannelModeCampaign_Speech3 = 5;
const int libCOMI_ge_VolumeChannelModeCampaign_SpeechAndMusicNoEffects = 6;
const int libCOMI_ge_VolumeChannelModeCampaign_LowHealthBegin = 7;
const int libCOMI_ge_VolumeChannelModeCampaign_LowHealthEnd = 8;
const int libCOMI_ge_VolumeChannelModeCampaign_Game2 = 9;
const int libCOMI_ge_VolumeChannelModeCampaign_Game3 = 10;
const int libCOMI_ge_VolumeChannelModeCampaign_MissionLaunchUI = 11;
const int libCOMI_ge_VolumeChannelModeCampaign_EvolutionUI = 12;
const int libCOMI_ge_MissionTransmissionPortraitOptioins_LeavePortraitVisibleAfter = 0;
const int libCOMI_ge_MissionTransmissionPortraitOptioins_HidePortraitAfter = 1;
const int libCOMI_ge_MissionTransmissionPortraitOptioins_DontShowPortrait = 2;
const int libCOMI_ge_MissionTransmissionCueSoundOptions_DefaultCueSoundBehavior = 0;
const int libCOMI_ge_MissionTransmissionCueSoundOptions_PlayCueSound = 1;
const int libCOMI_ge_MissionTransmissionCueSoundOptions_DontPlayCueSound = 2;
const int libCOMI_ge_MissionTransmissionOptions_ChatBubble = 0;
const int libCOMI_ge_ObjectivePingType_Primary = 0;
const int libCOMI_ge_ObjectivePingType_Secondary = 1;
const int libCOMI_ge_ObjectivePingType_POI = 2;
const int libCOMI_ge_MissionObjectiveState_Undiscovered = 0;
const int libCOMI_ge_MissionObjectiveState_Available = 1;
const int libCOMI_ge_MissionObjectiveState_Completed = 2;
const int libCOMI_ge_MissionObjectiveState_Failed = 3;
const int libCOMI_ge_ObjectiveTimerThresholds_Yellow = 0;
const int libCOMI_ge_ObjectiveTimerThresholds_Red = 1;
string libCOMI_ge_ObjectiveTimerThresholds_Ident (int lp_val);
const int libCOMI_ge_CampaignMissionGameResultType_None = 0;
const int libCOMI_ge_CampaignMissionGameResultType_Victory = 1;
const int libCOMI_ge_CampaignMissionGameResultType_Defeat = 2;
const int libCOMI_ge_CacheResourceType_CustomResource = 0;
const int libCOMI_ge_CacheResourceType_Mineral = 1;
const int libCOMI_ge_CacheResourceType_Vespene = 2;

// Constants
const int libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK = 5;
const int libCOMI_gv_cCC_MASTERY_CATEGORIES = 3;
const int libCOMI_gv_cCC_MASTERY_UPGRADE_MAX_LEVEL = 30;
const int libCOMI_gv_cCC_MASTERY_MAX_LEVEL = 90;
const int libCOMI_gv_cCC_MASTERIES_PER_COMMANDER = 6;
const int libCOMI_gv_cMC_CoopAI_MaxNumUpgrades = 500;
const int libCOMI_gv_cCC_DISREGARDPLAYER = 1;
const int libCOMI_gv_cCC_MAXPLAYERS = 15;
const int libCOMI_gv_mAX_TEAM_PLAYERS = 8;
const int libCOMI_gv_mAX_TEAMS = 2;
const string libCOMI_gv_cM_CargoDeathNotifyEffect = "CoopCargoDeathDummy";
const string libCOMI_gv_cM_CargoDeathKillEffect = "CoopCargoDeathKill";
const int libCOMI_gv_mAX_HERO_UNITS = 36;
const fixed libCOMI_gv_cUC_HeroUpdateFrequency = 0.25;
const int libCOMI_gv_cUC_HEROUILIFEBARHEIGHT = 20;
const int libCOMI_gv_cUC_HEROUISHIELDBARHEIGHT = 8;
const int libCOMI_gv_cUC_HEROUIENERGYBARHEIGHT = 8;
const int libCOMI_gv_cUC_HEROUIBARWIDTH = 200;
const int libCOMI_gv_oBSOLETE_CUC_HeroMaxCount = 2;
const fixed libCOMI_gv_cURRENT_VERSION = 0.0711;
const int libCOMI_gv_mAX_FACTIONS = 56;
const string libCOMI_gv_cUC_CommChoiceEventClosed = "CU_CommChoiceEventClosed";
const int libCOMI_gv_mAX_COMMANDERCOUNT = 56;
const int libCOMI_gv_mAX_PLAYERLEVEL = 15;
const int libCOMI_gv_vU_MAXMUTATORSSELECTED = 24;
const int libCOMI_gv_vU_MAXMAPOPTIONS = 10;
const int libCOMI_gv_cUC_ABILITIESMAXCOUNT = 8;
const int libCOMI_gv_cUC_UNITSMAXCOUNT = 24;
const fixed libCOMI_gv_cUC_BB_HPBarWidth = 289.0;
const int libCOMI_gv_cUC_BB_HPBarHeight = 30;
const fixed libCOMI_gv_pUC_HealthWatchThreshold = 0.4;
const int libCOMI_gv_cMC_SOATARGETCOUNTMAX = 5;
const string libCOMI_gv_cUC_TargetingEventCancel = "PU_TargetingEventCancel";
const string libCOMI_gv_cUC_TargetingParamPlayer = "PU_TargetingParamPlayer";
const int libCOMI_gv_cUC_WAVETIMERWINDOWMAX = 3;
const int libCOMI_gv_cUC_WAVETIMERUNITMAX = 3;
const string libCOMI_gv_cUC_ScoreEventClosed = "CU_ScoreEventClosed";
const string libCOMI_gv_cUC_ScoreParameterPlayer = "CU_ScoreParamPlayer";
const int libCOMI_gv_mAPS_MAX = 70;
const int libCOMI_gv_lOWEST_VITALITY = -2;
const int libCOMI_gv_rANDOM_OBJECTIVE = -1;
const int libCOMI_gv_pLAYERS_BASE = 0;
const int libCOMI_gv_cMC_CoopAI_HighestPlayerIndex = 16;
const int libCOMI_gv_cMC_CoopAI_MaxWaveCount = 100;
const int libCOMI_gv_mAX_UNITTYPES_PERWAVE = 15;
const int libCOMI_gv_mAX_UNITS_PERWAVE = 200;
const bool libCOMI_gv_cMC_CoopAI_AttackForce_DataTableScope = false;
const int libCOMI_gv_cMC_CoopAI_AttackForce_NotInDataTable = -1;
const int libCOMI_gv_cMC_CoopAI_MaxPingCount = 25;
const fixed libCOMI_gv_cM_CoopAI_PingCombineDist = 20.0;
const int libCOMI_gv_pCC_StatVersion = 1;
const int libCOMI_gv_cCC_MAXMISSIONSCORETYPES = 3;
const int libCOMI_gv_cC_BankVersion = 8;
const int libCOMI_gv_cCC_OBJECTIVESMAX = 20;
const string libCOMI_gv_mISSIONPREPARED = "INIT_COOP_MISSION_STAGE1";
const string libCOMI_gv_mISSIONINITIALIZED = "INIT_COOP_MISSION_STAGE2";
const string libCOMI_gv_mISSIONREADY = "INIT_COOP_MISSION_STAGE3";
const string libCOMI_gv_COOP_MISSION_STARTED_EVENT = "Coop Mission Started";
const string libCOMI_gv_COOP_MISSION_STARTED_EVENT2 = "Coop Mission Ended";
const string libCOMI_gv_pMC_SoundDataTableIdentifier = "CM_SoundDataTable_";
const fixed libCOMI_gv_campaignObjectiveDelay = 2.0;
const fixed libCOMI_gv_campaignSecretDelay = 5.0;
const fixed libCOMI_gv_campaignAchievementDelay = 2.0;
const fixed libCOMI_gv_campaignVictoryDelay = 1.0;
const int libCOMI_gv_uT_Bank_MaxPlayers = 15;
const string libCOMI_gv_uT_Bank_DefaultBankName = "MS";
const string libCOMI_gv_uT_Bank_RefillSectionName = "RefillSec";
const int libCOMI_gv_cUC_MUTATORMAXCOUNT = 150;
const int libCOMI_gv_cUC_CustomMutatorCountdownTime = 5;
const int libCOMI_gv_cUC_CustomMutatorItemsPerPage = 15;
const int libCOMI_gv_cUC_CustomMutatorItemsActiveMax = 10;
const string libCOMI_gv_cUC_CustomMutatorEventStart = "CU_CustomMutatorEventStart";
const int libCOMI_gv_mM_MUTATORMINCOUNT = 1;
const int libCOMI_gv_mM_MUTATORMAXCOUNT = 95;
const int libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL = 5;
const int libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE = 10;
const int libCOMI_gv_cT_MAbomination_MutatorPointCeiling = 10;
const int libCOMI_gv_mM_UnitScale_CustomValue = 22;
const int libCOMI_gv_mM_HeroReviveScale_CustomValue = 23;
const int libCOMI_gv_mM_Shapeshifter_CustomValue = 24;
const int libCOMI_gv_mM_Matryoshka_CustomValue = 60;

// Structures
struct libCOMI_gs_CM_CoopAI_CachedUpgradeRecord {
    bool lv_initialized;
    int lv_cachedDifficulty;
    int lv_numUpgrades;
    string[libCOMI_gv_cMC_CoopAI_MaxNumUpgrades + 1] lv_upgrade;
    fixed[libCOMI_gv_cMC_CoopAI_MaxNumUpgrades + 1] lv_time;
};

struct libCOMI_gs_PreplacedUnit {
    int lv_player;
    bool[libCOMI_gv_mAX_TEAMS + 1][9] lv_add;
    bool[5] lv_rebuild;
    string lv_replacement;
    string lv_type;
    point lv_position;
    bool lv_hidden;
    bool lv_bully;
    bool lv_optional;
    fixed lv_facing;
};

struct libCOMI_gs_HeroUnitData {
    unit lv_heroUnit;
    unit lv_reviverUnit;
    fixed lv_reviveTimer;
    string lv_userData;
    point lv_reviveTargetLocation;
    int lv_deathCount;
};

struct libCOMI_gs_CommanderOption {
    int lv_button;
    int lv_portrait;
    int lv_title;
    int lv_selection;
    int lv_lock;
    int lv_ready;
};

struct libCOMI_gs_UnitIcon {
    int lv_button;
    int lv_icon;
    int lv_title;
    int lv_description;
};

struct libCOMI_gs_CoopAIAttackForce {
    string lv_unitTypesForWave;
    fixed lv_base;
    fixed lv_random;
    int lv_limit;
    int lv_count;
    int lv_cost;
};

// Variable Declarations
trigger libCOMI_gv_cM_CampaignMissionStartTrigger;
int libCOMI_gv_gameMode;
bool libCOMI_gv_gameHasBegun;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cCX_PlayerPrestigeIndex;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cCX_PlayerMasteryLevel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1][libCOMI_gv_mAX_COMMANDERCOUNT + 1][libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOMI_gv_cCX_PlayerMasteryPointsSpent;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cC_PlayerMasteryEnabled;
libCOMI_gs_CM_CoopAI_CachedUpgradeRecord[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAI_CachedUpgradeData;
timer libCOMI_gv_cM_CombatTimer;
playergroup libCOMI_gv_cC_NondefeatedPlayerGroup;
int[libCOMI_gv_cCC_MAXPLAYERS + 1][libCOMI_gv_mAX_COMMANDERCOUNT + 1] libCOMI_gv_cC_PlayerLevel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1][libCOMI_gv_mAX_COMMANDERCOUNT + 1] libCOMI_gv_cCX_PlayerExperience;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cCX_PlayerCommander;
int libCOMI_gv_maxAlliesPlayersOnMap;
int libCOMI_gv_maxAmonPlayersOnMap;
int libCOMI_gv_totalPlayersOnMap;
playergroup libCOMI_gv_vU_Enemies;
playergroup libCOMI_gv_vU_Allies;
playergroup libCOMI_gv_vU_EnemyPlayers;
playergroup libCOMI_gv_vU_EnemyAI;
playergroup libCOMI_gv_vU_AlliedCommanders;
playergroup libCOMI_gv_vU_HumanPlayers;
playergroup libCOMI_gv_vU_SlotsPlayers;
playergroup libCOMI_gv_vU_SlotsEnemy;
playergroup libCOMI_gv_vU_AllyNPC;
playergroup libCOMI_gv_vU_BonusNPC;
playergroup libCOMI_gv_vU_EnemyNPC;
playergroup libCOMI_gv_vU_NeutralNPC;
playergroup libCOMI_gv_vU_HostileNPC;
playergroup libCOMI_gv_all;
int libCOMI_gv_vU_PLAYER_NEUTRAL;
int libCOMI_gv_vU_PLAYER_HOSTILE;
point[16] libCOMI_gv_playerStartPoint;
int libCOMI_gv_observer;
playergroup libCOMI_gv_observerGroup;
playergroup[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SharedVisionPlayers;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_playerColor;
string libCOMI_gv_selectedEnemyFaction;
string libCOMI_gv_selectedEnemyComposition;
int libCOMI_gv_voidIncomeMinerals;
int libCOMI_gv_voidIncomeVespene;
int libCOMI_gv_storedUnitsCount;
libCOMI_gs_PreplacedUnit[5001] libCOMI_gv_storedUnits;
unitgroup[17][9] libCOMI_gv_optionalUnitsConditional;
unitgroup[libCOMI_gv_mAX_TEAMS + 1] libCOMI_gv_optionalUnitsPerTeam;
unitgroup libCOMI_gv_optionalUnitsTotal;
unitgroup libCOMI_gv_optionalResources;
unitgroup[libCOMI_gv_mAX_TEAMS + 1][9] libCOMI_gv_clearUnits;
unitgroup[libCOMI_gv_mAX_TEAMS + 1] libCOMI_gv_clearUnitsPerTeam;
unitgroup libCOMI_gv_clearUnitsTotal;
unitgroup[9] libCOMI_gv_rebuildUnits;
unitgroup libCOMI_gv_bulliesUnits;
unitgroup libCOMI_gv_ignoredUnits;
string libCOMI_gv_aLLSTARTPOINTS;
string libCOMI_gv_aCTIVESTARTPOINTS;
unitgroup[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_VisionShareUnits;
bool libCOMI_gv_cM_VisionShareEnabled;
unit[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_PrimaryTownHall;
unitgroup libCOMI_gv_heroUnits;
libCOMI_gs_HeroUnitData[libCOMI_gv_mAX_HERO_UNITS + 1] libCOMI_gv_heroUnitsData;
fixed libCOMI_gv_cU_HeroCooldownTime;
unit[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_HeroUnit;
string[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_HeroIcon;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_HeroPositionX;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_HeroPositionY;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1][libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroExists;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroPanel;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogBorderImage;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogBorderImageNoEnergy;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogBorderImageAll;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogIconImage;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogCooldownImage;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogDamageTakenImage;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogDamageTakenLabel;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogNameLabel;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogLevelLabel;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogHealthBarImage;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogHealthBarBackground;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogShieldBarImage;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogShieldBarBackground;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogEnergyBarImage;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogEnergyBarBackground;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogHealthLabel;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogEnergyLabel;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogShieldLabel;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogButton;
int[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1] libCOMI_gv_cU_HeroDialogLevelBox;
fixed[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_VoidHeroUIDamageTimer;
bool[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_VoidHeroUIRevivable;
int libCOMI_gv_cU_HeroAutomaticIndex;
unit libCOMI_gv_diedHeroUnit;
fixed[libCOMI_gv_oBSOLETE_CUC_HeroMaxCount + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_oBSOLETE_CU_HeroReviveTimer;
unit[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_oBSOLETE_CM_HeroUnit;
unit[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_yY_GPCasterUnit;
unitgroup[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_yY_GPCasterGroup;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCmdButtonBackgroundImage;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCmdButtonActiveImage;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCmdButtonArrows;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCmdButtons;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCutscene;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCmdPanel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCmdPanelUnitStatus;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPVisible;
int libCOMI_gv_cU_GPPanelHolder;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPPanel;
bool[5][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPButtonHighlighted;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPInitialized;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPCutsceneFilter;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GlobalCast2D;
int[5][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPUnitEnergyLinks;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPEnergyLabel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPEnergyGlassScene;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPEnergyBarScene;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPEnergyTooltip;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPEnergyBar;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPEnergyHighlighting;
fixed[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_GPLastEnergyUpdate;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_GPRemindersOn;
int[5][3] libCOMI_gv_topbarButton;
int libCOMI_gv__FadeDialog;
int libCOMI_gv__FadeImage;
text libCOMI_gv_wEBSITE;
bool libCOMI_gv_nEWCOMER;
int libCOMI_gv_enemyFactionsCount;
int libCOMI_gv_enemyPersonalitiesCount;
int libCOMI_gv_vU_CommanderEnemyFactionPulldown;
string[libCOMI_gv_mAX_FACTIONS + 1] libCOMI_gv_vU_EnemyFactionsList;
int libCOMI_gv_amonFactionsDialog;
int libCOMI_gv_totalFactions;
int[libCOMI_gv_mAX_FACTIONS + 1] libCOMI_gv_raceButton;
string[libCOMI_gv_mAX_FACTIONS + 1] libCOMI_gv_raceFaction;
int libCOMI_gv_aF_CS_PatchDialog;
text libCOMI_gv_aF_CS_News;
int libCOMI_gv_aF_CS_NewsDialog;
int libCOMI_gv_aF_CS_NewsControlButton;
bool libCOMI_gv_aF_CS_NewsControlButtonClicked;
int libCOMI_gv_aF_CS_NewsDialogPanel;
int libCOMI_gv_cC_WorldCoverDlg;
int[2] libCOMI_gv_aF_CS_CutsceneDialog;
int libCOMI_gv_aF_CS_CommanderMiraDialog;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_aF_CS_CommanderCutscenes;
int libCOMI_gv_uT_CommandsButton;
int libCOMI_gv_playAmonButton;
int libCOMI_gv_playRandomButton;
int libCOMI_gv_amonPlayersCount;
int[9] libCOMI_gv_amonPlayers;
int libCOMI_gv_randomPlayersCount;
int[9] libCOMI_gv_randomPlayers;
int[16] libCOMI_gv_chosenTeam;
libCOMI_gs_CommanderOption[libCOMI_gv_mAX_COMMANDERCOUNT + 1] libCOMI_gv_commanderOption;
libCOMI_gs_CommanderOption[9] libCOMI_gv_amonOption;
libCOMI_gs_CommanderOption[9] libCOMI_gv_randomOption;
int libCOMI_gv_cU_CommanderSelectionPanel;
string[libCOMI_gv_mAX_COMMANDERCOUNT + 1] libCOMI_gv_cU_CommanderList;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cutsceneLastActiveCommander;
int libCOMI_gv_uT_PrestigeIndex;
int libCOMI_gv_uT_AllyMasteryButton;
int libCOMI_gv_vU_DetailsContainer;
int libCOMI_gv_vU_DetailsTabControl;
int libCOMI_gv_vU_DetailsTabInfoButton;
int libCOMI_gv_vU_DetailsTabUnitsButton;
int libCOMI_gv_vU_DetailsTabResearchButton;
int libCOMI_gv_vU_DetailsBackground;
int libCOMI_gv_vU_DetailsInfoContainer;
int libCOMI_gv_vU_DetailsUnitsContainer;
int libCOMI_gv_vU_DetailsResearchContainer;
int libCOMI_gv_cU_CommanderDialog;
int libCOMI_gv_cU_CommanderPanel;
int libCOMI_gv_cU_CommanderReadyButton;
int libCOMI_gv_cU_CommanderReadyCheckMark;
int libCOMI_gv_cU_CommanderReadyLabelSelf;
int libCOMI_gv_cU_CommanderSelect_RefCount;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CommanderSelect_PlayerReady;
int libCOMI_gv_cU_CommanderInfoPanel;
int libCOMI_gv_cU_CommanderSelectedNameSelf;
int libCOMI_gv_cU_CommanderAccountNameSelf;
int libCOMI_gv_cU_CommanderSelectedPrestigeSelf;
int libCOMI_gv_cU_CommanderLevelLabelSelf;
int libCOMI_gv_cU_CommanderMasteryLabelSelf;
libCOMI_gs_UnitIcon[libCOMI_gv_cUC_UNITSMAXCOUNT + 1] libCOMI_gv_cU_CommanderAbilitiesButtons;
libCOMI_gs_UnitIcon[libCOMI_gv_cUC_UNITSMAXCOUNT + 1] libCOMI_gv_cU_CommanderUnitsButtons;
libCOMI_gs_UnitIcon[libCOMI_gv_cUC_UNITSMAXCOUNT + 1] libCOMI_gv_cU_CommanderUpgradesButtons;
int libCOMI_gv_cU_CommanderLevelUpButton;
int libCOMI_gv_cU_CommanderLevelDownButton;
int libCOMI_gv_cU_CommanderPanelUpgrade;
int libCOMI_gv_cU_CommanderMasteryButton;
int libCOMI_gv_cU_CommanderMasteryCheckbox;
libCOMI_gs_UnitIcon[libCOMI_gv_cCC_PLAYERPRESTIGEMAXRANK + 1] libCOMI_gv_cU_CommanderPrestigesButtons;
int libCOMI_gv_aF_CS_AllyPrestigeButton;
int libCOMI_gv_cU_MasteryDialog;
int libCOMI_gv_cU_MasteryPanel;
int[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOMI_gv_cU_MasteryItemPanels;
int[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOMI_gv_cU_MasteryNameLabels;
int[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOMI_gv_cU_MasteryPointLabels;
int[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOMI_gv_cU_MasteryValueLabels;
int[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOMI_gv_cU_MasteryPlusButtons;
int[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1] libCOMI_gv_cU_MasteryMinusButtons;
int[libCOMI_gv_cCC_MASTERY_CATEGORIES + 1] libCOMI_gv_cU_MasteryCategoryPoints;
int libCOMI_gv_cU_MasteryAcceptButton;
int libCOMI_gv_cU_MasteryResetButton;
int libCOMI_gv_cU_MasteryLevelUpButton;
int libCOMI_gv_cU_MasteryLevelDownButton;
int libCOMI_gv_cU_MasteryLevelLabel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_MasteryLevelCurrent;
int[libCOMI_gv_cCC_MASTERY_CATEGORIES + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_MasteryCategoryPointsLeft;
int[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_MasteryUpgradePointsSpent;
string[libCOMI_gv_cCC_MASTERIES_PER_COMMANDER + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_MasteryUpgrades;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_MasteryShiftPressed;
int libCOMI_gv_cU_MasteryRefCount;
int libCOMI_gv_vU_GameModePulldown;
int libCOMI_gv_vU_CommanderDifficultyPulldown;
int libCOMI_gv_vU_CommanderPanelSettings;
int libCOMI_gv_cU_CommanderMutatorButton;
int libCOMI_gv_cU_CommanderMutatorCountLabel;
int libCOMI_gv_cU_CommanderMutatorChallengePulldown;
string[51] libCOMI_gv_cU_CommanderMutatorChallengeList;
int[9] libCOMI_gv_cU_PlayerPrestigeBrief;
int[9] libCOMI_gv_cU_PlayerPrestigeBriefImage;
int libCOMI_gv_cU_EnemyBrief;
int libCOMI_gv_cU_ArmyButton;
int libCOMI_gv_cU_ArmyButtonTipPanel;
bool libCOMI_gv_cU_ArmyButtonTipReady;
text libCOMI_gv_cU_BB_Title;
unit libCOMI_gv_cU_BB_Boss;
fixed libCOMI_gv_cU_BB_MaxValue;
fixed libCOMI_gv_cU_BB_CurrentValue;
int libCOMI_gv_cU_BB_HPOldWidth;
int libCOMI_gv_cU_BB_Style;
int libCOMI_gv_cU_BB_Panel;
int libCOMI_gv_cU_BB_TitleLabel;
int libCOMI_gv_cU_BB_HpLabel;
int libCOMI_gv_cU_BB_HpFullImage;
int libCOMI_gv_cU_BB_HpCurrentImage;
int libCOMI_gv_cU_BB_HpBackground;
int libCOMI_gv_cU_BB_HpBackground2;
int libCOMI_gv_cU_BB_BossBG;
int libCOMI_gv_cU_BB_ObjectiveBG;
bool libCOMI_gv_cU_HealthWatchFlashing;
int libCOMI_gv_cU_HealthWatchDialog;
int libCOMI_gv_cU_HealthWatchImage;
fixed libCOMI_gv_cU_HealthWatchLastHP;
sound libCOMI_gv_cU_HealthWatchSoundStart;
sound libCOMI_gv_cU_HealthWatchSoundHeartbeat;
sound libCOMI_gv_cU_HealthWatchSoundBreath;
unit libCOMI_gv_cU_HealthWatchUnit;
int libCOMI_gv_cU_MissionUIContainer;
int libCOMI_gv_cU_ObjectivePanel;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_targetingTemplate;
int libCOMI_gv_targetingPlayer;
bool libCOMI_gv_cM_SoAExitInstantly;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingChargesSpent;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingChargesTotal;
int libCOMI_gv_cM_SoATargetingUsageCount;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingPhase;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingTransitioning;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnrefundableStageEntered;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingAlreadyCanceled;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingModel;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnitType;
unit[libCOMI_gv_cMC_SOATARGETCOUNTMAX + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingUnit;
actor[libCOMI_gv_cMC_SOATARGETCOUNTMAX + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingActors;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingBehavior;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingActivateAbility;
abilcmd[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingExecuteCommand;
text[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingInstructionsPrimary;
text[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingInstructionsSecondary;
string[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingCooldown;
order[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingOrder;
unitgroup[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingDirectionGroup;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_SoATargetingCycling;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingCurrentCharges;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingOverlayDialog;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingOverlayPortrait;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingAbilityDialog;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingPanel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingCancelButton;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingChargesPanel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingInstructionsLabel;
int[6][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_TargetingChargeSinglePanel;
int libCOMI_gv_cU_ProgressBarPanel;
int libCOMI_gv_cU_ProgressBarLabelTitle;
int libCOMI_gv_cU_ProgressBarLabelBarLeft;
int libCOMI_gv_cU_ProgressBarImageBar;
int libCOMI_gv_cU_ProgressBarMax;
int libCOMI_gv_cU_ProgressBarMin;
int libCOMI_gv_cU_ProgressBarProgress;
bool libCOMI_gv_cU_ProgressBarShowing;
int libCOMI_gv_pUC_ProgressBarWidth;
int libCOMI_gv_pUC_ProgressBarHeight;
int libCOMI_gv_cU_TimerWindowHighlightFrame;
fixed libCOMI_gv_cU_TimerWindowHighlightDuration;
fixed libCOMI_gv_cU_TimerWindowDangerThreshold;
bool libCOMI_gv_cU_TimerWindowInDanger;
timer libCOMI_gv_cU_TimerWindowTimer;
int libCOMI_gv_cU_TimerWindow;
int[libCOMI_gv_cUC_WAVETIMERWINDOWMAX + 1] libCOMI_gv_cU_WaveTimerWindows;
timer[libCOMI_gv_cUC_WAVETIMERWINDOWMAX + 1] libCOMI_gv_cU_WaveTimerWindowTimers;
int[libCOMI_gv_cUC_WAVETIMERWINDOWMAX + 1] libCOMI_gv_cU_WaveTimerWindowTitle;
int[libCOMI_gv_cUC_WAVETIMERWINDOWMAX + 1] libCOMI_gv_cU_WaveTimerWindowTime;
int[libCOMI_gv_cUC_WAVETIMERWINDOWMAX + 1][libCOMI_gv_cUC_WAVETIMERUNITMAX + 1] libCOMI_gv_cU_WaveTimerWindowIcon;
string[libCOMI_gv_cUC_WAVETIMERWINDOWMAX + 1][libCOMI_gv_cUC_WAVETIMERUNITMAX + 1] libCOMI_gv_cU_WaveTimerWindowImage;
int libCOMI_gv_cU_WaveTimerActiveCount;
int libCOMI_gv_cU_WaveTimerWindowLast;
int libCOMI_gv_cU_FanfareFlash;
int libCOMI_gv_cU_FanfareCloseButton;
int libCOMI_gv_cU_FanfareConvertToReplayButton;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_FanfareResult;
bool[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_FanfareShown;
int libCOMI_gv_cU_FanfarePanel;
int libCOMI_gv_cU_FanfareDialog;
bool libCOMI_gv_cU_FanfareTransmissionPlayed;
int libCOMI_gv_cU_ScoreDialog;
int libCOMI_gv_cU_ScorePanel;
int libCOMI_gv_cU_ScoreTitleLabel;
int libCOMI_gv_cU_ScoreContinueButton;
int[4] libCOMI_gv_cU_ScoreCategoryTitleLabel;
int[4] libCOMI_gv_cU_ScoreCategoryValueLabel;
int libCOMI_gv_cU_ScoreTotalValueLabel;
int libCOMI_gv_cM_FullScreenUpperContainer;
int libCOMI_gv_dialog;
int libCOMI_gv_startMissionDialogButton;
int libCOMI_gv_selectMissionDialog;
int libCOMI_gv_selectMissionDialogBig;
int libCOMI_gv_selectMissionPulldownDialog;
int libCOMI_gv_totalMaps;
int[libCOMI_gv_mAPS_MAX + 1] libCOMI_gv_mapSlots;
string[libCOMI_gv_mAPS_MAX + 1] libCOMI_gv_mapFiles;
text[libCOMI_gv_mAPS_MAX + 1] libCOMI_gv_mapNames;
int[libCOMI_gv_mAPS_MAX + 1] libCOMI_gv_missionButton;
int[libCOMI_gv_mAPS_MAX + 1] libCOMI_gv_missionImage;
int[libCOMI_gv_mAPS_MAX + 1] libCOMI_gv_missionText;
int[libCOMI_gv_mAPS_MAX + 1] libCOMI_gv_mapBorder;
int[16] libCOMI_gv_selected;
int libCOMI_gv_missionsButton;
int libCOMI_gv_cM_RevealerCount;
bool libCOMI_gv_cM_RevealersEnabled;
region libCOMI_gv_cC_NoSpawnRegion;
region libCOMI_gv_inactiveZone;
playergroup libCOMI_gv_cM_CoopAI_Players;
int libCOMI_gv_cM_CoopAI_LastAIThinker;
int libCOMI_gv_cM_CoopAI_NextAIAttacker;
int[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_Enemy;
fixed[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_NextStockUpdate;
string[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_Commander;
string libCOMI_gv_cM_CoopAIPlayer_CommanderShared;
bool[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_IsAlive;
fixed[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_WaveResourceDeficit;
unit[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cMC_CoopAI_PrimaryNydusNetwork;
bool libCOMI_gv_cM_CoopAI_AIDetection_Build;
bool libCOMI_gv_cM_CoopAI_AIDetection_AttackWaveAddDetection;
unitgroup libCOMI_gv_cM_CoopAI_AIDetection_AttackWave;
unitgroup[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_AttackGroup;
point[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_InstantAttackGroupSpawn;
bool libCOMI_gv_cM_CoopAI_PauseAttackWaves;
bool[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAI_SendAttackWave;
timer libCOMI_gv_cM_CoopAIPlayer_NextAttackWave;
int libCOMI_gv_cM_CoopAIPlayer_AttackWaveHighWaterMark;
wave[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1][libCOMI_gv_cMC_CoopAI_MaxWaveCount + 1] libCOMI_gv_cM_CoopAIPlayer_AttackWaves;
int[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1][libCOMI_gv_cMC_CoopAI_MaxWaveCount + 1] libCOMI_gv_cM_CoopAIPlayer_WaveProps_Retreat;
int[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_WaveProps_Count;
wavetarget[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1] libCOMI_gv_cM_CoopAIPlayer_TargetOfAttackWaves;
string[libCOMI_gv_mAX_UNITTYPES_PERWAVE + 1] libCOMI_gv_attackForceUnitsType;
int[libCOMI_gv_mAX_UNITS_PERWAVE + 1] libCOMI_gv_attackForceUnitsCount;
trigger libCOMI_gv_dropForceOverride;
trigger libCOMI_gv_attackForceOverride;
int libCOMI_gv_attackForceOverridePlayerA;
int libCOMI_gv_attackForceOverridePlayerB;
int libCOMI_gv_attackForceOverrideResourceSize;
int libCOMI_gv_attackForceOverrideTechLevel;
point libCOMI_gv_attackForceOverrideSpawnLocation;
string libCOMI_gv_attackForceOverrideTransportType;
bool libCOMI_gv_attackForceOverrideDropWarpIn;
unitgroup libCOMI_gv_cM_CoopAI_AttackForce_Transports;
point libCOMI_gv_cM_DropPod_TP_Location;
unitgroup libCOMI_gv_cM_DropPod_TP_Units;
int libCOMI_gv_cM_DropPod_TP_Player;
unit libCOMI_gv_cM_DropPod_TP_ZergBuilding;
string libCOMI_gv_defferedTransmissionLink;
fixed libCOMI_gv_defferedTransmissionDelay;
fixed libCOMI_gv_defferedTransmissionDefer;
int libCOMI_gv_defferedTask;
int libCOMI_gv_cM_VOGroupGender;
bool libCOMI_gv_cC_VolumeChannelModeInSpeech;
bool libCOMI_gv_cC_VolumeChannelModeInLowHP;
bool libCOMI_gv_cM_HeroReviveQueue_ActiveListeners;
int libCOMI_gv_cM_VOResourceReqSendButton;
string libCOMI_gv_cM_TransmissionCurrentType;
int libCOMI_gv_cM_TransmissionSource;
int libCOMI_gv_cM_TransmissionCount;
playergroup libCOMI_gv_cM_TransmissionPrimaryPlayers;
playergroup libCOMI_gv_cM_TransmissionSecondaryPlayers;
int libCOMI_gv_cM_SendTransmissionCampaignIndex;
int libCOMI_gv_cM_SendTransmissionCampaignPortrait;
unit libCOMI_gv_cM_SendTransmissionCampaignSpeaker;
trigger libCOMI_gv_cM_SendTransmissionCampaignTrigger;
int libCOMI_gv_cM_SendTransmissionCampaignPlayingTick;
bool libCOMI_gv_cM_SendTransmissionCampaignChatBubbleOn;
bool libCOMI_gv_cM_CoopAI_WavePingShowAll;
bool[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1][libCOMI_gv_cMC_CoopAI_MaxWaveCount + 1] libCOMI_gv_cM_CoopAI_WaveShowPing;
bool[libCOMI_gv_cMC_CoopAI_HighestPlayerIndex + 1][libCOMI_gv_cMC_CoopAI_MaxWaveCount + 1] libCOMI_gv_cM_CoopAI_DontPingWaves;
unitgroup libCOMI_gv_cM_CoopAI_DontPingUnits;
int[libCOMI_gv_cMC_CoopAI_MaxPingCount + 1] libCOMI_gv_cM_CoopAI_CombinedPing;
int[libCOMI_gv_cMC_CoopAI_MaxPingCount + 1] libCOMI_gv_cM_CoopAI_CombinedPing_APlayer;
int[libCOMI_gv_cMC_CoopAI_MaxPingCount + 1] libCOMI_gv_cM_CoopAI_CombinedPing_AWave;
int[libCOMI_gv_cMC_CoopAI_MaxPingCount + 1] libCOMI_gv_cM_CoopAI_CombinedPing_BPlayer;
int[libCOMI_gv_cMC_CoopAI_MaxPingCount + 1] libCOMI_gv_cM_CoopAI_CombinedPing_BWave;
unitgroup[libCOMI_gv_cMC_CoopAI_MaxPingCount + 1] libCOMI_gv_cM_CoopAI_PingGroups;
int[libCOMI_gv_cMC_CoopAI_MaxPingCount + 1] libCOMI_gv_cM_CoopAI_PingGroupPing;
playergroup libCOMI_gv_cM_CoopAI_DontPingPlayers;
fixed libCOMI_gv_cC_PlayerExperienceEffortPct;
int libCOMI_gv_pC_StatEventLastCampaign;
int libCOMI_gv_aF_ScoreButton;
int libCOMI_gv_aF_Score_KillGraph;
int[3] libCOMI_gv_aF_Score_PieCharts;
bool[3] libCOMI_gv_aF_Score_GraphVisible;
int[3] libCOMI_gv_aF_Score_FinalButton;
int[3] libCOMI_gv_aF_Score_FinalButtonLabel;
int libCOMI_gv_aF_KillNumbers;
fixed libCOMI_gv_aF_MissionTime;
int libCOMI_gv_cC_ScoreTrackedDmgTakenCount;
int libCOMI_gv_cCC_MAXMISSIONSCORE;
string[libCOMI_gv_cCC_MAXMISSIONSCORETYPES + 1] libCOMI_gv_cC_MissionScoreTypes;
int[libCOMI_gv_cCC_MAXMISSIONSCORETYPES + 1][libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cC_MissionScoreValues;
int libCOMI_gv_leaderboardBonusScoreFinal2;
int libCOMI_gv_leaderboardBonusScoreFinal;
int libCOMI_gv_leaderboardTimeScore;
string[libCOMI_gv_cCC_MAXPLAYERS + 1][libCOMI_gv_mAX_COMMANDERCOUNT + 1] libCOMI_gv_commanderScores;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cCX_PlayerBankVersion;
string libCOMI_gv_cC_CoopBankName;
bank[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cC_CoopBank;
string[libCOMI_gv_cCC_OBJECTIVESMAX + 1] libCOMI_gv_cC_RegisteredObjectives;
int[libCOMI_gv_cCC_OBJECTIVESMAX + 1] libCOMI_gv_createdObjectives;
timer libCOMI_gv_fanfareMaxWaitTimer;
point libCOMI_gv_lastEventPoint;
int libCOMI_gv_lastKilledUnitOwner;
point libCOMI_gv_lastKilledUnitPosition;
int libCOMI_gv_cM_GameOverResult;
bool libCOMI_gv_cM_MissionVictoryActionQueyeEmpty;
int libCOMI_gv_cM_MissionCompleteTime;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_EndMissionResult;
string libCOMI_gv_cC_CurrentMap;
bool libCOMI_gv_cM_InCinematic;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cM_ScreenMode;
int libCOMI_gv_cM_SoundDataTableIndex;
int libCOMI_gv_selectedDifficulty;
bool libCOMI_gv_cC_TimeMissionPaused;
bool libCOMI_gv_cC_TimeAIPaused;
int libCOMI_gv_cM_CybCoreTextTag;
bool libCOMI_gv_pCX_UpgradesTaught;
unit libCOMI_gv_teachingUnit;
int libCOMI_gv_cM_MissionAutoSaveIndex;
bool libCOMI_gv_cM_MissionAutoSaveDone;
unitgroup libCOMI_gv_uT_Horde_UG_Wave;
unitgroup libCOMI_gv_uT_Horde_UG;
fixed libCOMI_gv_uT_Horde_Chance;
int libCOMI_gv_horde_Owner_Player;
int libCOMI_gv_horde_Target_Player;
int libCOMI_gv_uT_encompsDialogs;
int[7] libCOMI_gv_uT_MasteryBoxes;
int[7] libCOMI_gv_uT_MasteryLabels;
int libCOMI_gv_uT_MasteryButton;
int libCOMI_gv_uT_MasteryDialog;
int libCOMI_gv_uT_MasteryTargetPlayer;
unitgroup libCOMI_gv_uT_LastAttackWave;
string[101] libCOMI_gv_uT_GL_ScoresUsed;
bool libCOMI_gv_showAIDebugging;
bool libCOMI_gv_cU_DebugMovieCaptureMode;
bool libCOMI_gv_cM_DebugAITargetSpawners;
unitfilter libCOMI_gv_uT_Bank_UnitFilter;
region libCOMI_gv_cT_MutatorSafetyZone;
int libCOMI_gv_cU_RandomMutationSelectDialog;
int libCOMI_gv_cU_RandomMutationSelectOKButton;
int libCOMI_gv_cU_RandomMutationSelectMinSlider;
int libCOMI_gv_cU_RandomMutationSelectMaxSlider;
int libCOMI_gv_cU_RandomMutationSelectMinMutSlider;
int libCOMI_gv_cU_RandomMutationSelectMaxMutSlider;
int libCOMI_gv_cU_RandomMutationSelectLabel;
int libCOMI_gv_cU_MutatorDialog;
int libCOMI_gv_cU_MutatorPanel;
int[libCOMI_gv_cUC_MUTATORMAXCOUNT + 1] libCOMI_gv_cU_MutatorItemPanels;
int[libCOMI_gv_cUC_MUTATORMAXCOUNT + 1] libCOMI_gv_cU_MutatorNameLabels;
int[libCOMI_gv_cUC_MUTATORMAXCOUNT + 1] libCOMI_gv_cU_MutatorDescriptionLabels;
int[libCOMI_gv_cUC_MUTATORMAXCOUNT + 1] libCOMI_gv_cU_MutatorCheckboxes;
int libCOMI_gv_cU_MutatorAcceptButton;
int libCOMI_gv_cU_MutatorCancelButton;
string[libCOMI_gv_cUC_MUTATORMAXCOUNT + 1] libCOMI_gv_cU_MutatorItems;
int libCOMI_gv_cU_CustomMutatorDialog;
int libCOMI_gv_cU_CustomMutatorPanel;
int libCOMI_gv_cU_CustomMutatorChatDisplayStandard;
int libCOMI_gv_cU_CustomMutatorStartButton;
int libCOMI_gv_cU_CustomMutatorMenuButton;
int libCOMI_gv_cU_CustomMutatorPageCountLabel;
int libCOMI_gv_cU_CustomMutatorPageNextButton;
int libCOMI_gv_cU_CustomMutatorPagePrevButton;
int libCOMI_gv_cU_CustomMutatorMapNameLabel;
int libCOMI_gv_cU_CustomMutatorSpeedDropDown;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CustomMutatorCommanderNameLabel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CustomMutatorCommanderImage;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CustomMutatorPlayerNameLabel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CustomMutatorPlayerCard;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CustomMutatorLevelLabel;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CustomMutatorMasteryLevelLabel;
int[libCOMI_gv_cUC_CustomMutatorItemsPerPage + 1] libCOMI_gv_cU_CustomMutatorItemButtons;
int[libCOMI_gv_cUC_CustomMutatorItemsPerPage + 1] libCOMI_gv_cU_CustomMutatorItemLabels;
int[libCOMI_gv_cUC_CustomMutatorItemsPerPage + 1] libCOMI_gv_cU_CustomMutatorItemIcons;
int[libCOMI_gv_cUC_CustomMutatorItemsActiveMax + 1] libCOMI_gv_cU_CustomMutatorActiveItemLabels;
int[libCOMI_gv_cUC_CustomMutatorItemsActiveMax + 1] libCOMI_gv_cU_CustomMutatorActiveItemButtons;
int libCOMI_gv_cU_CustomMutatorLeaderExitPanel;
int libCOMI_gv_cU_CustomMutatorLeaderExitButton;
int libCOMI_gv_cU_CustomMutatorLeaderExitTitleLabel;
int libCOMI_gv_cU_CustomMutatorLeaderExitMessageLabel;
string[libCOMI_gv_cUC_MUTATORMAXCOUNT + 1] libCOMI_gv_cU_CustomMutatorItems;
bool[libCOMI_gv_cUC_MUTATORMAXCOUNT + 1] libCOMI_gv_cU_CustomMutatorItemStates;
int[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cU_CustomMutatorPageSelection;
int libCOMI_gv_cU_CustomMutatorItemCount;
int[libCOMI_gv_cUC_CustomMutatorItemsActiveMax + 1] libCOMI_gv_cU_CustomMutatorActiveItems;
int libCOMI_gv_cU_CustomMutatorActiveItemCount;
int libCOMI_gv_cU_CustomMutatorPageCount;
bool libCOMI_gv_cU_CustomMutatorStartingUp;
int libCOMI_gv_mM_MutatorDialog;
int libCOMI_gv_mM_MutatorPanel;
string[libCOMI_gv_mM_MUTATORMAXCOUNT + 1] libCOMI_gv_mM_MutatorItems;
int[libCOMI_gv_mM_MUTATORMAXCOUNT + 1] libCOMI_gv_mM_MutatorItemPanels;
int[libCOMI_gv_mM_MUTATORMAXCOUNT + 1] libCOMI_gv_mM_MutatorNameLabels;
int[libCOMI_gv_mM_MUTATORMAXCOUNT + 1] libCOMI_gv_mM_MutatorDescriptionLabels;
int[libCOMI_gv_mM_MUTATORMAXCOUNT + 1] libCOMI_gv_mM_MutatorCheckboxes;
int libCOMI_gv_mM_MutatorAcceptButton;
int libCOMI_gv_mM_MutatorCancelButton;
int libCOMI_gv_cU_MutatorListSmallPanel;
int libCOMI_gv_cU_MutatorListLargePanel;
int libCOMI_gv_cU_MutatorListNotificationLabel;
timer libCOMI_gv_cU_MutatorListNotificationTimer;
int[libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL + 1] libCOMI_gv_cU_MutatorListSmallIcon;
int[libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_SMALL + 1] libCOMI_gv_cU_MutatorListSmallItems;
int[libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE + 1] libCOMI_gv_cU_MutatorListLargeIcon;
int[libCOMI_gv_cUC_MUTATOR_MAX_DISPLAY_LARGE + 1] libCOMI_gv_cU_MutatorListLargeItems;
int libCOMI_gv_mM_PlayerX;
int libCOMI_gv_mM_PX_PlayerX;
int libCOMI_gv_attackingPlayer;
unitgroup libCOMI_gv_attackingUnitGroup;
point libCOMI_gv_attackOrigin;
int libCOMI_gv_attackTargetType;
unitgroup libCOMI_gv_cT_OnDeathSpawns;
unitgroup libCOMI_gv_cT_SpawnedUnits;
int libCOMI_gv_cT_MutatorEnabledCount;
bool libCOMI_gv_cT_MutatorIsWeeklyChallenge;
int[12] libCOMI_gv_cT_TriggerRefCount;
bool libCOMI_gv_cT_MutatorCustomMode;
playergroup[libCOMI_gv_cCC_MAXPLAYERS + 1] libCOMI_gv_cT_MutatorVisionPlayers;
int[libCOMI_gv_cT_MAbomination_MutatorPointCeiling + 1] libCOMI_gv_cT_MAbomination_MutatorPointPossibilities;
int[libCOMI_gv_cT_MAbomination_MutatorPointCeiling + 1] libCOMI_gv_cT_MAbomination_MutatorPointTemplate;
int[libCOMI_gv_cT_MAbomination_MutatorPointCeiling + 1] libCOMI_gv_cT_MAbomination_ConsideredMutatorPointTemplate;
int libCOMI_gv_cT_MAbomination_CountSnapshot;
int libCOMI_gv_cT_MAbomination_PointsSnapshot;
string[11] libCOMI_gv_cT_MAbomination_ConsideredMutators;
int libCOMI_gv_cT_MAbomination_ConsideredMutatorsCount;
int libCOMI_gv_cT_MAbomination_CombosCounted;
string[11] libCOMI_gv_cT_MAbomination_Mutators;
int libCOMI_gv_cT_MAbomination_MutatorsCount;
int libCOMI_gv_cT_MAbomination_MinMutators;
int libCOMI_gv_cT_MAbomination_MaxMutators;
int libCOMI_gv_cT_MAbomination_MinPoints;
int libCOMI_gv_cT_MAbomination_MaxPoints;
string libCOMI_gv_cT_MAbomination_DifficultyLevel;
int libCOMI_gv_mM_RandomMutatorCount;
string[4] libCOMI_gv_cT_RandomMutators;
timer libCOMI_gv_cT_RandomCycleTimer;
unit libCOMI_gv_mutatorHero;
int libCOMI_gv_mutatorPlayer;
point libCOMI_gv_amon1Outpost1;
point libCOMI_gv_amon1Squad1;
point libCOMI_gv_amon1Squad4LargestAir;
int libCOMI_gv_wave1;
int libCOMI_gv_wave2;
int libCOMI_gv_evil11;
int libCOMI_gv_evil12;
point libCOMI_gv_amon1Start;
point libCOMI_gv_amon1Start2;
point libCOMI_gv_amon1Start21;
point libCOMI_gv_amon2Start;
point libCOMI_gv_amon2Start2;
point libCOMI_gv_ally1Start;
point libCOMI_gv_ally1Start1;
point libCOMI_gv_ally1Expansion;
point libCOMI_gv_ally1Expansion21;
point libCOMI_gv_ally2Start;
point libCOMI_gv_ally2Expansion;
point libCOMI_gv_ally3Start;
point libCOMI_gv_ally3Expansion;
point libCOMI_gv_ally4Start;
point libCOMI_gv_ally4Expansion;
point libCOMI_gv_ally5Start;
point libCOMI_gv_ally5Expansion;
region libCOMI_gv_amon1Base1;
region libCOMI_gv_amon2Base1;
region libCOMI_gv_allyBase;
region libCOMI_gv_allyReveal;
region libCOMI_gv_ally2Base;
region libCOMI_gv_ally2Reveal;
region libCOMI_gv_allyClear1;
region libCOMI_gv_allyClear2;
region libCOMI_gv_allyClear3;
region libCOMI_gv_allyClear4;
region libCOMI_gv_allyClear5;
region libCOMI_gv_amonClear1;
region libCOMI_gv_amonClear2;

// Function Declarations
void libCOMI_gf_LoadCoopMission (string lp_map, trigger lp_startTrigger);
void libCOMI_gf_ApplyMissionTime ();
void libCOMI_gf_AllowToBuildOnCreep (int lp_player, bool lp_allow);
bool libCOMI_gf_TechUnitAvailable (int lp_player, string lp_unit);
void libCOMI_gf_CC_ApplyTechNew (int lp_player, int lp_player2, string lp_commander, string lp_prestige);
void libCOMI_gf_CC_PlayerResponseEnable (int lp_player, string lp_response, bool lp_enforceMinLvl);
string libCOMI_gf_CC_CommanderPrestigeIndexFace (string lp_commander, int lp_index);
int libCOMI_gf_CC_PlayerActivePrestigeIndex (int lp_player);
string libCOMI_gf_CC_PlayerActivePrestigeInstance (int lp_player);
string libCOMI_gf_CC_PrestigeCommanderTableKey (string lp_commander, int lp_player);
void libCOMI_gf_CC_SetPlayerPrestigeIndex (int lp_player, int lp_index);
int libCOMI_gf_CC_PlayerMasteryLevel (int lp_player);
int libCOMI_gf_CC_PlayerMasteryCategory (string lp_masteryUpgrade);
int libCOMI_gf_CC_PlayerMasteryCategoryPointsAtLevel (int lp_player, int lp_categoryIndex, int lp_level);
int libCOMI_gf_CC_PlayerMasteryCategoryPointsSpent (int lp_player, int lp_categoryIndex);
int libCOMI_gf_CC_PlayerMasteryCategoryPointsAvailable (int lp_player, int lp_categoryIndex);
int libCOMI_gf_CC_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade);
string libCOMI_gf_CC_PlayerMasteryCommander (string lp_masteryUpgrade);
string libCOMI_gf_CC_PlayerMasteryUpgradeData (string lp_masteryUpgrade);
string libCOMI_gf_CC_PlayerMasteryTalent (string lp_masteryUpgrade);
int libCOMI_gf_CC_PlayerMasteryInternalIndex (string lp_masteryUpgrade);
text libCOMI_gf_CC_PlayerMasteryName (string lp_masteryUpgrade);
text libCOMI_gf_CC_PlayerMasteryTooltip (string lp_masteryUpgrade);
text libCOMI_gf_CC_PlayerMasteryValueFormat (string lp_masteryUpgrade);
fixed libCOMI_gf_CC_PlayerMasteryValueIncrement (string lp_masteryUpgrade, int lp_index);
bool libCOMI_gf_CC_PlayerMasteryEnabled (int lp_player);
void libCOMI_gf_CC_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level);
void libCOMI_gf_CC_PlayerMasteryLevelSet (int lp_player, int lp_level);
void libCOMI_gf_CC_PlayerMasteryEnabledSet (int lp_player, bool lp_enabled);
void libCOMI_gf_CC_ApplyMasteryTech (int lp_player);
void libCOMI_gf_CC_SharedUpgradesEnable ();
void libCOMI_gf_CC_SharedUpgradesCheckAndApply (string lp_checkUpgrade);
void libCOMI_gf_CC_ApplyUpgradeSupplemental (int lp_player, string lp_upgradeSupplemental);
void libCOMI_gf_CM_CoopAI_CacheUpgradeData (int lp_player, int lp_difficulty);
void libCOMI_gf_CM_CoopAI_Upgrades (int lp_player);
void libCOMI_gf_CM_MasteryResearchCostReduction (int lp_player, string lp_masteryUpgrade, fixed lp_percentReductionPerPoint);
void libCOMI_gf_PlayersandAllienceSettings ();
void libCOMI_gf_ShareVisionAmongPlayers (playergroup lp_players);
void libCOMI_gf_SetAllianceCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance);
void libCOMI_gf_SetAllianceOneWayCoop (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance);
void libCOMI_gf_SetAllianceAspectCoop (int lp_inSourcePlayer, int lp_inAllianceId, int lp_inTargetPlayer, bool lp_ally);
void libCOMI_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance);
void libCOMI_gf_CM_RestorePlayerVision ();
void libCOMI_gf_SetPlayerColors ();
int libCOMI_gf_EnemyPlayerColor ();
int libCOMI_gf_AllyPlayerColor ();
int libCOMI_gf_CC_CommanderLevel (int lp_player, string lp_commander);
string libCOMI_gf_CC_PlayerLevelCommander (string lp_playerLevel);
int libCOMI_gf_CC_PlayerLevelValue (string lp_playerLevel);
int libCOMI_gf_CC_PlayerExperience (int lp_player, string lp_commander);
fixed libCOMI_gf_CC_PlayerExperienceResultModifier (int lp_result);
fixed libCOMI_gf_CC_PlayerExperienceInLevelPct (int lp_player, string lp_commander);
int libCOMI_gf_CC_PlayerExperienceToNextLevel (int lp_player, string lp_commander);
int libCOMI_gf_CC_PlayerLevelExperienceNeededDelta (int lp_level);
int libCOMI_gf_CC_PlayerLevelExperienceNeededTotal (int lp_level);
int libCOMI_gf_CC_PlayerLevelFromExperience (int lp_experience);
void libCOMI_gf_CC_PlayerAwardMissionXP (int lp_result, int lp_player);
void libCOMI_gf_CC_PlayerSetXPScores (int lp_result, int lp_player);
void libCOMI_gf_CC_PlayerExperienceSet (int lp_player, int lp_experience, string lp_commander);
void libCOMI_gf_CC_PlayerCommanderSet (int lp_player, string lp_commander);
void libCOMI_gf_CC_UpdatePlayerLevel (int lp_player);
void libCOMI_gf_CC_PlayerLevelSet (int lp_player, int lp_level, string lp_commander);
void libCOMI_gf_CC_PlayerExperienceAdd (int lp_player, int lp_experience);
void libCOMI_gf_CC_PlayerExperienceSetToLevel (int lp_player, int lp_level, string lp_commander);
void libCOMI_gf_CC_ResetCurrency (int lp_player);
playergroup libCOMI_gf_CC_PlayersOfCommander (string lp_commander);
void libCOMI_gf_InitEnemies ();
void libCOMI_gf_ApplyCAIPersonality (int lp_playerAI);
void libCOMI_gf_SpecifyEnemyFactionAndComposition ();
string libCOMI_gf_RandomCoopAIFaction ();
string libCOMI_gf_RandomCoopAIPersonality (string lp_factionParameter);
string libCOMI_gf_GetCoopAIPersonality (int lp_player);
string libCOMI_gf_GetEnemyFaction ();
void libCOMI_gf_RegisterAvailableFactions ();
void libCOMI_gf_SetCAIPersonality (string lp_personality);
void libCOMI_gf_SetCoopAIPersonality (string lp_personalityUserData);
void libCOMI_gf_StartCoopAIwithSpecificPersonality (int lp_player, int lp_aIEnemy, string lp_personalityUserData);
void libCOMI_gf_InitAmon ();
playergroup libCOMI_gf_GetAlliedCommandersPlayers ();
int libCOMI_gf_GetRolePlayer (int lp_slot);
playergroup libCOMI_gf_GetAlliedCommandersPlayersCopy ();
playergroup libCOMI_gf_HumanPlayers ();
int libCOMI_gf_CC_PlayerAlly (int lp_player);
int libCOMI_gf_CC_PlayerAllyNew (int lp_player);
int libCOMI_gf_CC_PlayerAllyNew2 (int lp_player);
playergroup libCOMI_gf_MutualAlliedCommandersofPlayerCoutInactiveAndSelf (int lp_player);
bool libCOMI_gf_PlayerIsCommander (int lp_player);
string libCOMI_gf_ActiveCommanderForPlayer (int lp_player);
string libCOMI_gf_GetPlayerCommanderGameLink (int lp_player);
string libCOMI_gf_GetCommanderRace (string lp_commander);
string libCOMI_gf_GetPlayerRaceVO (int lp_player);
playergroup libCOMI_gf_GetEnemyPlayers ();
playergroup libCOMI_gf_GetAlliesPlayers ();
playergroup libCOMI_gf_GetEnemyHumanPlayers ();
playergroup libCOMI_gf_GetEnemyAIPlayers ();
void libCOMI_gf_AddAlliedCommanderPlayer (int lp_player);
playergroup libCOMI_gf_GetHumanPlayers ();
void libCOMI_gf_RegisterPlayers ();
int libCOMI_gf_GetAlliedPlayer (int lp_slot);
playergroup libCOMI_gf_GetNonDefeatedPlayers ();
void libCOMI_gf_CC_InitNonDefeatedPlayers ();
void libCOMI_gf_SetPlayerDefeated (int lp_player);
void libCOMI_gf_TurnPlayerFlagOnOffForGroup (playergroup lp_players, int lp_playerFlag, bool lp_onOff);
playergroup libCOMI_gf_GetTeammates (int lp_player);
playergroup libCOMI_gf_PlayersOfCommander (string lp_commander);
playergroup libCOMI_gf_PlayersOfCommanderInaTeam (string lp_commander, int lp_team);
int libCOMI_gf_GetNearestCommanderPlayerInATeam (string lp_commander, int lp_player, point lp_point);
bool libCOMI_gf_PlayerIsInCombat (int lp_player);
void libCOMI_gf_CreateExpansionUnitsForPlayer (int lp_player, point lp_location);
void libCOMI_gf_AddOptionalUnits (int lp_team, int lp_players, unitgroup lp_units);
void libCOMI_gf_AddClearUnits (int lp_team, int lp_players, unitgroup lp_units);
void libCOMI_gf_AddRebuildUnits (int lp_players, unitgroup lp_units);
void libCOMI_gf_AddIgnoredUnits (int lp_players, unitgroup lp_units);
void libCOMI_gf_AddUnitsFromRegionByNameToUnitGroup (string lp_region, unitgroup lp_units);
void libCOMI_gf_StorePreplacedUnits ();
void libCOMI_gf_StoreUnitData (unit lp_unit);
void libCOMI_gf_RestorePreplacedUnits (string lp_faction);
void libCOMI_gf_CreateAmonRefineries ();
void libCOMI_gf_DoodadsReplacement (string lp_race, string lp_raceObjects, region lp_region);
void libCOMI_gf_CreateSplatAtPoint (point lp_location, string lp_actorData);
void libCOMI_gf_AddDefaultOptionalResources ();
string libCOMI_gf_CoopAIUnitCategory (int lp_category, int lp_player);
unitgroup libCOMI_gf_CoopAiUnitsbyCategory (int lp_category, int lp_player);
unitgroup libCOMI_gf_FactionUnitsbyCategory (int lp_category, int lp_player, string lp_faction);
bool libCOMI_gf_IsCoopUnitfromCategory (int lp_category, string lp_unitType, int lp_player);
bool libCOMI_gf_IsUnitfromFactionCategory (int lp_category, string lp_unitType, string lp_faction);
void libCOMI_gf_RemoveUnitAndCreep (unit lp_unit);
void libCOMI_gf_CreateUnitAndCreep (int lp_pLAYER, string lp_tYPE, point lp_pOSITION, fixed lp_fACING, bool lp_hIDDEN, int lp_bULLY);
void libCOMI_gf_ShareVisionofUnitCoop (unit lp_unit, bool lp_shareUnshare, int lp_player);
void libCOMI_gf_ShareVisionofUnitWithHumansCoop (unit lp_unit, bool lp_shareUnshare);
void libCOMI_gf_CM_VisionShareEnable (bool lp_enable);
void libCOMI_gf_InheritDmgandAttackSpeedFromParenttoChild (unit lp_parent, unit lp_child);
bool libCOMI_gf_CC_UnitTypeIsTownHall (string lp_unitType);
unitgroup libCOMI_gf_CC_TownHallsForPlayer (int lp_player);
unit libCOMI_gf_CM_PrimaryTownHall (int lp_player);
fixed libCOMI_gf_ExpansionRockLife (int lp_rockType);
void libCOMI_gf_SpawnLarvaForHatchery (unit lp_hatchery, int lp_larvaCount);
void libCOMI_gf_CreateStartingUnitsForPlayer (int lp_player, point lp_location);
string libCOMI_gf_UnitUserData (string lp_unit);
bool libCOMI_gf_UnitMoverExists (string lp_unitType, string lp_mover);
string libCOMI_gf_TraingingUnitTypeInAbilCommand (abilcmd lp_abilityCommand, int lp_p, int lp_unitIndex);
bool libCOMI_gf_HeroCanSpendSkillPoint (unit lp_hero, string lp_learnAbility);
void libCOMI_gf_SetUnitBuffMultiplier (unit lp_unit, fixed lp_multiplierAmount, string lp_behavior, fixed lp_baseValue, int lp_method);
void libCOMI_gf_SetUnitAttributePoints (string lp_attribute, unit lp_unit, int lp_points);
void libCOMI_gf_PlayerApplySkinSignal (int lp_player, string lp_skin, bool lp_activateDeactivate, string lp_extraMessage);
void libCOMI_gf_ButtonReplacement (int lp_player, string lp_button, string lp_buttonReplacement);
unitgroup libCOMI_gf_ConjoinedTrainsofTrainCar (unit lp_trainCar);
void libCOMI_gf_SynchronizeConjoinedTrainHealth (unitgroup lp_trainCars, fixed lp_maxHealth);
void libCOMI_gf_FindandAttackNearestEnemy (unit lp_attacker, fixed lp_searchRadius, fixed lp_satisfiedPathingDistance, fixed lp_thinkPeriod, unitfilter lp_targetFilter, unitfilter lp_fallbackTargetFilter);
void libCOMI_gf_InitializePathDisplay (int lp_path);
void libCOMI_gf_SleepWakeUpUnitCoop (unit lp_unit, bool lp_sleepWakeUp, int lp_alwaysExclusions);
void libCOMI_gf_SetHeroPanelUnit (int lp_index, unit lp_heroUnit, int lp_player);
void libCOMI_gf_SetHeroPanelUnitOverride (int lp_index, unit lp_heroUnit, int lp_player);
void libCOMI_gf_CU_ShowHideHeroPanel (bool lp_showHide, int lp_index);
void libCOMI_gf_CU_CreateHeroPanel (int lp_index);
void libCOMI_gf_CU_UpdateHeroPanel (int lp_index, int lp_player);
void libCOMI_gf_CreateHeroes ();
void libCOMI_gf_HeroHandleDeath (unit lp_heroUnit);
unit libCOMI_gf_OBSOLETE_AF_GetHeroUnit (int lp_pPlayer);
unit libCOMI_gf_GetHeroUnitBad (int lp_player, string lp_unit);
unit libCOMI_gf_GetHeroUnit (int lp_player, string lp_hero);
int libCOMI_gf_GetHeroUnitIndex (unit lp_unit);
string libCOMI_gf_GetHeroUserDataInstance (unit lp_unit);
unit libCOMI_gf_GetHeroReviverUnit (unit lp_unit);
string libCOMI_gf_GetHeroReviveLink (unit lp_unit);
string libCOMI_gf_GetHeroUserDataInstanceByUnitType (string lp_unit);
abilcmd libCOMI_gf_HeroReviveAbilityCommand (string lp_heroUnit);
string libCOMI_gf_HeroUnitType (string lp_heroUnit);
string libCOMI_gf_HeroUnitSpawner (string lp_heroUnit);
string libCOMI_gf_HeroUnitReviver (string lp_heroUnit);
string libCOMI_gf_HeroReviveLink (string lp_heroUnit);
string libCOMI_gf_HeroFirstReviveBehavior (string lp_heroUnit);
string libCOMI_gf_HeroNormalReviveBehavior (string lp_heroUnit);
void libCOMI_gf_CreateACStructure (int lp_player, string lp_heroUnit);
void libCOMI_gf_CreateACCaster (int lp_player, string lp_heroUnit);
unit libCOMI_gf_CM_PlayerGetGlobalCaster2 (int lp_player);
void libCOMI_gf_CU_GPShowHide (bool lp_showHide, int lp_player, fixed lp_duration);
void libCOMI_gf_CU_GPVisibilityAutoUpdate (bool lp_showHide, int lp_player, fixed lp_duration);
void libCOMI_gf_CU_GPVisibilitySet (bool lp_showHide, int lp_player, fixed lp_duration);
abilcmd libCOMI_gf_CU_GPActiveAbilityCommand (int lp_slot, int lp_player);
void libCOMI_gf_CU_GPHighlightButton (int lp_slot, bool lp_on, int lp_player);
void libCOMI_gf_CU_GPInitCommonCaster (int lp_player, string lp_heroUnit, string lp_holderTemplate, string lp_template, int lp_buttons, string lp_cutscene, string lp_cutsceneFilter);
void libCOMI_gf_LinkUnitEnergyToGlobalCasterButton (unit lp_unit, int lp_player, int lp_index);
void libCOMI_gf_CU_GPInitEnergyCaster (int lp_player, string lp_heroUnit);
void libCOMI_gf_CU_GPCheckForEnergyHighlight (int lp_player);
void libCOMI_gf_CU_GPEnergyHighlight (bool lp_enable, int lp_player);
void libCOMI_gf_CU_GPSoAUpdateVitals (int lp_player);
void libCOMI_gf_CM_GPReminderDisable (int lp_player);
string libCOMI_gf_GetCasterDataForUnit (string lp_caster);
void libCOMI_gf_TopBarNotificationsInitialization (int lp_player);
int libCOMI_gf_GetClickedTopBarButtonIndex (int lp_button, int lp_player);
text libCOMI_gf_TooltipTextofButton (int lp_player, string lp_button);
void libCOMI_gf_CinematicFade (bool lp_fadeIn, fixed lp_duration, color lp_color, bool lp_waitUntilDone);
void libCOMI_gf_CinematicFade3 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libCOMI_gf_CinematicFade4 (bool lp_fadeIn, fixed lp_duration, color lp_color);
void libCOMI_gf__FadeCreateDialog ();
void libCOMI_gf_VU_UpdateEnemyFactionsList ();
void libCOMI_gf_VU_SetEnemyFaction (string lp_faction);
void libCOMI_gf_CreateFactionsDialog ();
void libCOMI_gf_CreateGameBriefingRoom ();
void libCOMI_gf_CreateCommandersList ();
void libCOMI_gf_AF_CS_NewsCreate ();
void libCOMI_gf_ShowHideWorldCover (bool lp_showHide, fixed lp_transparency, int lp_player);
void libCOMI_gf_AF_CS_CommanderCutscenes ();
void libCOMI_gf_AF_CS_MiraDialogCreate ();
void libCOMI_gf_SetFreeCommander (int lp_player, string lp_commander);
playergroup libCOMI_gf_GetPlayingPlayers ();
void libCOMI_gf_UpdateCommandersList ();
void libCOMI_gf_CU_CommanderSelect (int lp_player, string lp_chosenCommander);
void libCOMI_gf_UpdatePlayerCommander (int lp_player);
void libCOMI_gf_PreparingMapProgress (text lp_text);
void libCOMI_gf_CU_CommanderClosed (trigger t);
void libCOMI_gf_CU_CommanderPlayerReadySet (int lp_player, bool lp_ready);
void libCOMI_gf_VU_Ready ();
void libCOMI_gf_UT_ChangeAllyPrestige ();
string libCOMI_gf_CC_CommanderPrestigeIndexFace3 (string lp_commander, int lp_index);
text libCOMI_gf_CC_CommanderPrestigeIndexFace2 (string lp_commander, int lp_index);
void libCOMI_gf_CU_PrestigeUpdate2 (int lp_player);
void libCOMI_gf_CU_PrestigeUpdate3 (int lp_player);
string libCOMI_gf_RandomCommander ();
void libCOMI_gf_CU_MasteryDisplay (int lp_player);
void libCOMI_gf_CU_MasteryCreate ();
void libCOMI_gf_CU_MasteryUpdateData (int lp_player);
void libCOMI_gf_CU_MasteryInitFromData (int lp_player);
void libCOMI_gf_CU_MasteryClose (int lp_player);
void libCOMI_gf_CU_MasteryUpdate (int lp_player);
void libCOMI_gf_CU_MasteryUpdatePoints (int lp_player);
void libCOMI_gf_CU_CommanderUpdatePrestigeLabels (int lp_player);
text libCOMI_gf_GetPlayerPrestigeName (int lp_player);
void libCOMI_gf_CU_PrestigeUpdate (int lp_player);
void libCOMI_gf_CU_PrestigeSelect (int lp_player, int lp_index);
string libCOMI_gf_CC_CommanderPrestigeIndexFace5 (string lp_commander, int lp_index);
string libCOMI_gf_CC_CommanderPrestigeIndexFace4 (string lp_commander, int lp_index);
void libCOMI_gf_SetGameMode (int lp_gamemode);
void libCOMI_gf_UpdateGameModeList ();
void libCOMI_gf_SetDifficulty (int lp_difficulty);
void libCOMI_gf_UpdateDifficultiesList ();
string libCOMI_gf_HybridMajor ();
string libCOMI_gf_HybridMinor ();
text libCOMI_gf_CU_PrestigeBriefFormatTooltip (int lp_player);
void libCOMI_gf_CU_PrestigeBriefInit ();
void libCOMI_gf_CU_PrestigeBriefReveal ();
void libCOMI_gf_CU_EnemyBriefInit (string lp_aIPersonality);
void libCOMI_gf_CU_EnemyBriefShowHide (bool lp_showHide);
void libCOMI_gf_DisplayArmyButton (bool lp_doDoNot);
int libCOMI_gf_CU_BB_HPBarCurrentWidth ();
text libCOMI_gf_CU_BB_HPBarFormatLabel ();
void libCOMI_gf_CU_BB_HPBarChange ();
void libCOMI_gf_DisplaySingularBossBarVoidCampaign (string lp_portrait, text lp_title, int lp_max);
void libCOMI_gf_SetSingularBossBarMaximumValueVoidCampaign (int lp_max, bool lp_refresh);
void libCOMI_gf_SetSingularBossBarCurrentValueVoidCampaign (int lp_current, bool lp_refresh);
void libCOMI_gf_SetSingularBossBarBossVoidCampaign (unit lp_boss, bool lp_refresh);
void libCOMI_gf_ShowHideSingularBossBarVoidCampaign (bool lp_showHide);
void libCOMI_gf_RefreshSingularBossBarVoidCampaign ();
void libCOMI_gf_SetSingularBossBarColor (color lp_color);
void libCOMI_gf_SetSingularBossBarTitleColor (color lp_color);
void libCOMI_gf_SetSingularBossBarStyle (int lp_style);
void libCOMI_gf_EnableLowHealthWarning (unit lp_watchedUnit);
void libCOMI_gf_CU_HealthWatchCreate ();
void libCOMI_gf_CM_StopHeroLowHPSound ();
void libCOMI_gf_CU_UpdateObjectivePanel ();
void libCOMI_gf_CU_TargetingCancel (trigger t);
int libCOMI_gf_CU_TargetingTriggeringPlayer ();
void libCOMI_gf_PU_TargetingUI_EnterTargetingMode (bool lp_showHide, bool lp_instant, int lp_player);
void libCOMI_gf_CU_TargetingCreate (int lp_player);
void libCOMI_gf_CU_TargetingSetCharges (int lp_current, int lp_max, int lp_player);
void libCOMI_gf_CU_TargetingSetInstructionText (text lp_instructions, int lp_player);
void libCOMI_gf_CM_SoATargetingModeEnter (int lp_player);
void libCOMI_gf_CM_SoATargetingModeExit (int lp_player);
void libCOMI_gf_CM_SoATargetingCleanupActorsAndUnits (int lp_player);
void libCOMI_gf_CM_SetFogAlphaOverTime (fixed lp_targetAlpha, fixed lp_duration, int lp_player);
void libCOMI_gf_CM_ResetFogAlphaOverTime (fixed lp_duration, int lp_player);
void libCOMI_gf_CM_SoATargetingCancel (int lp_player);
void libCOMI_gf_DisplayProgressBar (text lp_title, int lp_min, int lp_max);
void libCOMI_gf_SetProgressBarTitle (text lp_title);
void libCOMI_gf_SetProgressBarValueRange (int lp_min, int lp_max);
void libCOMI_gf_SetProgressBarLabel (text lp_label);
void libCOMI_gf_SetProgressBarProgress (int lp_progress);
void libCOMI_gf_SetProgressBarColor (color lp_color);
void libCOMI_gf_ShowHideProgressBar (bool lp_showHide);
void libCOMI_gf_CU_UpdateProgressBar ();
color libCOMI_gf_GetProgressBarColorCampaign ();
void libCOMI_gf_DisplayProgressBarUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue, text lp_labelText, int lp_offsetX, int lp_offsetY, string lp_attachment);
void libCOMI_gf_DestroyProgressBarUnitOld (unit lp_unit);
void libCOMI_gf_SetProgressBarProgressUnitOld (unit lp_unit, int lp_value);
void libCOMI_gf_MoveProgressBarUnitOld (unit lp_unit, int lp_offsetX, int lp_offsetY);
void libCOMI_gf_SetProgresBarTitleUnitOld (unit lp_unit, text lp_titleText);
void libCOMI_gf_SetProgressBarValueRangeUnitOld (unit lp_unit, int lp_minValue, int lp_maxValue);
void libCOMI_gf_ShowHideProgressBarUnitOld (unit lp_unit, bool lp_showHide);
void libCOMI_gf_CU_UpdateProgressBarUnitOld (unit lp_unit);
string libCOMI_gf_CU_ProgressBarUnit_DataNameOld (unit lp_unit, int lp_type);
string libCOMI_gf_CU_ProgressBarUnit_DialogNameOld (unit lp_unit, int lp_type);
void libCOMI_gf_DisplayUnitProgressBar (unit lp_unit, text lp_title, int lp_minValue, int lp_maxValue);
void libCOMI_gf_SetUnitProgressBarIsWideBar (unit lp_unit, bool lp_isWideBar);
void libCOMI_gf_SetUnitProgressBarProgress (unit lp_unit, int lp_value);
void libCOMI_gf_SetUnitProgresBarTitle (unit lp_unit, text lp_titleText);
void libCOMI_gf_SetUnitProgressBarProgress2 (unit lp_unit, int lp_value);
void libCOMI_gf_SetUnitProgressBarValueRange (unit lp_unit, int lp_minValue, int lp_maxValue);
void libCOMI_gf_ShowHideUnitProgressBar (unit lp_unit, bool lp_showHide);
void libCOMI_gf_ShowHideUnitProgressBar2 (unit lp_unit, bool lp_showHide);
void libCOMI_gf_CU_UpdateUnitProgressBar (unit lp_unit);
string libCOMI_gf_CU_UnitProgressBar_Data (unit lp_unit, int lp_type);
string libCOMI_gf_CU_UnitProgressBar_Data2 (unit lp_unit);
string libCOMI_gf_CU_UnitProgressBar_IsWideBarString (unit lp_unit);
string libCOMI_gf_CU_UnitProgressBar_Dialog (unit lp_unit, int lp_type);
void libCOMI_gf_TimerWindowCreate (timer lp_timer, text lp_title, bool lp_visible, bool lp_elapsed);
void libCOMI_gf_SetTimerForTimerWindowCampaign (int lp_window, timer lp_timer);
void libCOMI_gf_RepositionTimerWindow (int lp_timerWindow);
void libCOMI_gf_FlashTimerWindow (fixed lp_duration, bool lp_waitOption);
void libCOMI_gf_SetTimerWindowDangerThreshold (fixed lp_thresholdTime);
void libCOMI_gf_CU_AddTip (text lp_tipName, int lp_tipType, text lp_tipDescription, text lp_tipAlertText, string lp_tipIcon, playergroup lp_players);
void libCOMI_gf_CreateWaveTimerWindow (timer lp_timer, text lp_title, string lp_icon);
void libCOMI_gf_DestroyWaveTimerWindow (int lp_window);
void libCOMI_gf_SetWaveTimerWindowIcon (int lp_window, string lp_icon, int lp_slot);
void libCOMI_gf_SetWaveTimerWindowIconTooltip (int lp_window, text lp_tooltip, int lp_slot);
void libCOMI_gf_CU_WaveTimerWindowCreateAll ();
int libCOMI_gf_LastCreatedWaveTimerWindow ();
int libCOMI_gf_CU_WaveTimerWindowIndexFromID (int lp_waveID);
string libCOMI_gf_CU_WaveTimerWindowIndexKey (int lp_waveID);
void libCOMI_gf_CU_FanfareCreate ();
void libCOMI_gf_CU_FanfareDisplay (int lp_result, int lp_player);
void libCOMI_gf_CU_FanfareTransmission ();
void libCOMI_gf_CU_ScoreCreate ();
void libCOMI_gf_CU_ScoreDisplay (int lp_player, int lp_result);
void libCOMI_gf_CU_ScoreUpdate (int lp_player, int lp_result);
void libCOMI_gf_CU_ScoreClose (int lp_player);
int libCOMI_gf_CU_ScoreTriggeringPlayer ();
void libCOMI_gf_CU_ScoreClosed (trigger t);
void libCOMI_gf_CU_HelpInit ();
void libCOMI_gf_CU_HelpSetupGeneralTips ();
void libCOMI_gf_CU_HelpSetupMutatorTips ();
void libCOMI_gf_CM_ChatBarSetMode (int lp_mode, playergroup lp_players);
void libCOMI_gf_DisplayCampaignMessage (playergroup lp_toPlayerGroup, int lp_messageType, text lp_message, int lp_formatOrNot);
string libCOMI_gf_CM_ReticleModelOfStyle (int lp_type, int lp_size);
string libCOMI_gf_CM_ReticleTextFontOfStyle (int lp_type);
void libCOMI_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location);
void libCOMI_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint);
void libCOMI_gf_UpdateMapSelection (int lp_player, int lp_mapIndex);
point libCOMI_gf_GetAllyStartPosition (int lp_player, int lp_index, int lp_mode);
point libCOMI_gf_GetAllyExpansionPosition (int lp_player, int lp_index, int lp_mode);
point libCOMI_gf_GetAmonStartPosition (int lp_player, int lp_index, int lp_mode);
point libCOMI_gf_GetAmonExpansionPosition (int lp_player, int lp_index, int lp_mode);
point libCOMI_gf_GetAllyHeroPosition (int lp_slot);
void libCOMI_gf_CreateRevealerCoop (int lp_player, region lp_area);
void libCOMI_gf_EnableDisableRevealerCoop (revealer lp_r, bool lp_enable);
void libCOMI_gf_DestroyRevealerCoop (revealer lp_r);
int libCOMI_gf_CM_RevealerIndex (revealer lp_revealer);
revealer libCOMI_gf_CM_RevealerFromIndex (int lp_revealerIndex);
void libCOMI_gf_CM_RevealersEnableDisable (bool lp_enabled);
void libCOMI_gf_AutoRevealRegionCoop (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player);
void libCOMI_gf_PreventSpawningInRegion (region lp_region);
bool libCOMI_gf_CC_SpawnAllowedAtPoint (point lp_spawnPoint);
region libCOMI_gf_GetExpansionZone ();
region libCOMI_gf_GetRevealZone (int lp_team);
region libCOMI_gf_GetIgnoreZone ();
region libCOMI_gf_GetSafetyZone ();
region libCOMI_gf_GetSleepZone ();
void libCOMI_gf_TaskCreateRevealersCoop (int lp_task, playergroup lp_players, region lp_region);
void libCOMI_gf_TaskDestroyRevealersCoop (int lp_task);
void libCOMI_gf_TaskAttackWaves (int lp_task, fixed lp_delayMinutes, string lp_routes);
void libCOMI_gf_TaskAttackWave (int lp_task, unit lp_tARGET, string lp_rOUTES, int lp_sIZE, int lp_tECH, int lp_tYPE);
unit libCOMI_gf_RandomPriorityTarget ();
string libCOMI_gf_BestAttackWaveRoute (string lp_spawns);
void libCOMI_gf_Harass (int lp_target, fixed lp_delay, int lp_size, int lp_tech, string lp_routes);
void libCOMI_gf_TaskSetPriorityTarget (int lp_task, unit lp_unit, int lp_priority);
void libCOMI_gf_TaskSetPriorityTargets (int lp_task, unitgroup lp_units, int lp_priority);
unit libCOMI_gf_TaskGetPriorityTarget (int lp_task, int lp_target);
void libCOMI_gf_CM_AIThinkCoop2 (int lp_player);
bool libCOMI_gf_AISuspectDetectionDanger (int lp_player);
void libCOMI_gf_CM_CoopAI_AIDetection_AddDetectionDanger (int lp_player);
void libCOMI_gf_AIDiamondback (int lp_owner, unit lp_diamondback, unitgroup lp_nearbyUnits);
void libCOMI_gf_AIHavoc (int lp_player, unit lp_havoc, unitgroup lp_scan_group);
void libCOMI_gf_AIAscendant (int lp_player, unit lp_ascendant, unitgroup lp_scan_group);
void libCOMI_gf_CM_AIThinkCoop (int lp_player);
void libCOMI_gf_TacticalAIFilterSortByLife (aifilter lp_filter, fixed lp_damage, fixed lp_distance);
string libCOMI_gf_CC_AIPersonalityRace (string lp_personality);
string libCOMI_gf_CM_CoopAIPersonality ();
void libCOMI_gf_CM_CoopAI_Set_EnemyPlayer (int lp_aIPlayer, int lp_targetPlayer);
int libCOMI_gf_CM_CoopAI_Get_EnemyPlayer (int lp_aIPlayer);
int libCOMI_gf_CM_CoopAI_WaveProp_Get_Retreat (int lp_player, wave lp_wave);
void libCOMI_gf_CM_CoopAI_Set_TargetOfAttackWaves (int lp_aIPlayer, wavetarget lp_waveTarget);
wavetarget libCOMI_gf_CM_CoopAI_Get_TargetOfAttackWaves (int lp_aIPlayer);
int libCOMI_gf_CM_CoopAIPersonalityUniqueIndex (string lp_personality);
bool libCOMI_gf_CM_CoopAI_RandomMapInitAllowed (string lp_aIPersonality, string lp_aIRace);
void libCOMI_gf_StartCoopAI (int lp_player, int lp_aIPlayerEnemy);
void libCOMI_gf_CM_StartCoopMissionMechanic (int lp_player, string lp_aICommander);
void libCOMI_gf_StartCoopMissionMechanicAI (int lp_player, string lp_aICommander);
void libCOMI_gf_SetCoopAIEnemy (int lp_coopAIPlayer, int lp_humanTargetPlayer);
void libCOMI_gf_CM_CoopAI_SetupStartingTech (int lp_player);
void libCOMI_gf_SetCoopAIAttackGroupSpawnPoint (int lp_player, point lp_spawnPoint);
void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn (int lp_player, string lp_unitType, point lp_warpInPoint);
int libCOMI_gf_IntegerAsTechBucket (int lp_tech);
int libCOMI_gf_IntegerAsResourceBucket (int lp_reesourcesSize);
int libCOMI_gf_TechAsInteger (int lp_techLevel);
unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Terran (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation);
unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Zerg (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation);
unitgroup libCOMI_gf_CM_CoopAI_CreateDropAttack_Protoss (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation);
void libCOMI_gf_CM_CoopAIPlayer_FakeWarpIn2 (unit lp_unit);
void libCOMI_gf_CM_CoopAI_CreateDropAttack_ProtossCleanup (unit lp_pylon, unit lp_superWarpGate);
void libCOMI_gf_DropPodWarpInUnitGroup (unitgroup lp_dropPodUnits, point lp_dropLocation);
void libCOMI_gf_CM_CoopAI_AttackForce_DropTerran (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation);
void libCOMI_gf_CM_CoopAI_AttackForce_DropZerg (int lp_player, unitgroup lp_dropGroup, point lp_dropLocation);
void libCOMI_gf_CM_CoopAI_AttackForce_DropProtoss (unitgroup lp_dropGroup, point lp_dropLocation);
string libCOMI_gf_CM_CoopAI_AttackForce_ForceName ();
string libCOMI_gf_CM_CoopAI_AttackForce_GatherPointName ();
unitgroup libCOMI_gf_LastCreatedCoopAttackForce ();
point libCOMI_gf_LastCreatedCoopAttackForceGatherPoint ();
unitgroup libCOMI_gf_LastCreatedCoopAttackForceTransports ();
void libCOMI_gf_SendAttackWaveusingCoopAttackForce (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait);
void libCOMI_gf_SendAttackWaveusingCoopAttackForceWaveAttackTargetType (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait, int lp_attackTargetType);
void libCOMI_gf_SendAttackWaveusingCoopAttackForceForceSetSpawnLocationHook (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait, int lp_attackTargetType, point lp_spawnLocation);
void libCOMI_gf_SendAttackWaveusingCoopAttackForceInternal (unitgroup lp_attackForce, int lp_time, bool lp_waitDontWait);
void libCOMI_gf_CM_CoopAI_AttackForce_SendPlayerAttack (int lp_player, unitgroup lp_attackingUnits, int lp_time, bool lp_waitDontWait);
void libCOMI_gf_AddAttackForceWaypoint (point lp_waypoint, bool lp_useTransport);
void libCOMI_gf_CM_CoopAI_AttackForce_ClearWaypointList ();
point libCOMI_gf_CM_CoopAI_AttackForce_GetWaypoint (int lp_pARAM_AAAAAAAAAA);
void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypoint (point lp_waypoint, int lp_index);
string libCOMI_gf_CM_CoopAI_AttackForce_WaypointName (int lp_index);
string libCOMI_gf_CM_CoopAI_AttackForce_UseTransportName (int lp_waypointIndex);
bool libCOMI_gf_CM_CoopAI_AttackForce_GetUseTransport (int lp_waypointIndex);
string libCOMI_gf_CM_CoopAI_AttackForce_WaypointTotalName ();
int libCOMI_gf_CM_CoopAI_AttackForce_GetWaypointTotal ();
void libCOMI_gf_CM_CoopAI_AttackForce_SetWaypointTotal (int lp_waypointIndex);
string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Unit (int lp_index);
string libCOMI_gf_CM_CoopAI_AttackForce_GetDataTableName_Count (int lp_index);
string libCOMI_gf_CM_CoopAI_AttackForce_ExcludedPlayers_Name (int lp_unitTypeIndex);
string libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeTotal_Name ();
string libCOMI_gf_CM_CoopAI_AttackForce_GetUnitType (int lp_unitTypeIndex);
int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeIndex (string lp_unitType);
void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeIndex (string lp_unitType, int lp_index);
int libCOMI_gf_CM_CoopAI_AttackForce_GetUnitTypeCount (int lp_index);
void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeCount (int lp_index, int lp_count, int lp_relativeAbsolute);
void libCOMI_gf_CM_CoopAI_AttackForce_SetExcludedPlayers (playergroup lp_excludePlayers, string lp_unitType);
playergroup libCOMI_gf_CM_CoopAI_AttackForce_GetExcludedPlayers (int lp_unitTypeIndex);
void libCOMI_gf_CM_CoopAI_AttackForce_AddUnitType (string lp_unitType, int lp_count);
int libCOMI_gf_CM_CoopAI_AttackForce_UnitTypeCount ();
void libCOMI_gf_CM_CoopAI_AttackForce_SetUnitTypeTotal (int lp_unitTypeTotal);
void libCOMI_gf_CM_CoopAI_AttackForce_ClearTable ();
void libCOMI_gf_CM_DropPod_Zerg_Wait (point lp_location, unitgroup lp_units, int lp_player);
void libCOMI_gf_CM_DropPod_Terran_Wait (point lp_location, unitgroup lp_units, int lp_player);
void libCOMI_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_player);
void libCOMI_gf_CreateDropPodForZergBuilding (string lp_buildingType, point lp_landingPoint, int lp_player, bool lp_waitDontWait);
void libCOMI_gf_CM_DropPodCreateZergBuilding_DontWait (string lp_buildingType, point lp_landingPoint, int lp_player);
void libCOMI_gf_CM_DropPodCreateZergBuilding_Wait (string lp_buildingType, point lp_landingPoint, int lp_player);
string libCOMI_gf_CM_DropPod_LastDroppedUnitsDataTableName ();
unitgroup libCOMI_gf_LastDroppedUnits ();
void libCOMI_gf_AmonPlayersWave (unitgroup lp_units);
int libCOMI_gf_PopulateAttackForceUnits (int lp_player, int lp_techLevel, fixed lp_resources);
fixed libCOMI_gf_CM_CoopAI_GetResourceAmount (int lp_resourceSize, int lp_difficulty);
string libCOMI_gf_CM_CoopAI_GetTechLevel (int lp_player, int lp_techLevel);
void libCOMI_gf_AddCommanderUnitstoAttackWavePresetBucketTechLevel (int lp_player, bool lp_instantAttackGroup, int lp_resourceSize, int lp_techLevel);
unitgroup libCOMI_gf_CreateCoopAIAttackGroup2 (int lp_player, int lp_resourceSize, int lp_techLevel);
unitgroup libCOMI_gf_CreateCommanderAttackGroupatPoint (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation);
void libCOMI_gf_CM_CoopAI_CreateAttackWave3 (int lp_player, bool lp_instantAttackGroup, fixed lp_resourceAllocation, int lp_techLevel);
void libCOMI_gf_SetupCoopAttackForceDataTable (int lp_player, fixed lp_resourceAllocation, int lp_techLevel);
void libCOMI_gf_CreateCommanderDropAttack (int lp_player, int lp_resourceSize, int lp_techLevel, point lp_dropPoint, point lp_attackPoint);
unitgroup libCOMI_gf_CreateDropAttack (int lp_player, unitgroup lp_attackGroup, point lp_dropLocation);
void libCOMI_gf_SetupAttackForce (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation);
void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation);
void libCOMI_gf_CreateCoopAttackForceatLocationandWaitforthemtospawn2 (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, bool lp_dropWarpin);
void libCOMI_gf_CreateCoopDropForceinTransportsatLocationandWaitforthemtospawn (int lp_playerA, int lp_playerB, int lp_resourceSize, int lp_techLevel, point lp_spawnLocation, string lp_transportType);
bool libCOMI_gf_AttackWaveContainsPingworthyUnits (unitgroup lp_attackWave);
void libCOMI_gf_AddAttackWaveUnitType (int lp_count, string lp_unitType);
timer libCOMI_gf_CM_CoopAI_Get_NextAttackWaveTimer (int lp_player);
bool libCOMI_gf_CM_CoopAI_IsSpikeWave (int lp_player);
void libCOMI_gf_SetCoopAIWaveTarget (int lp_aI, wavetarget lp_waveTarget);
void libCOMI_gf_SetCoopAIGatherPoint (int lp_player, point lp_gatherPoint);
void libCOMI_gf_TaskTransmission (int lp_task, string lp_transmission, fixed lp_delay, fixed lp_defer);
void libCOMI_gf_DefferedTransmission (string lp_transmission, fixed lp_defer);
void libCOMI_gf_ThankYou (int lp_caster, int lp_target);
void libCOMI_gf_TeamThankYou (int lp_caster);
void libCOMI_gf_CM_CommanderVOSend (int lp_listenerPlayer, soundlink lp_vOSound, playergroup lp_targetPlayers);
void libCOMI_gf_CM_CommanderVOAbilityWatch (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, abilcmd lp_abilityCommand);
void libCOMI_gf_CM_CommanderVOAbilityWatchUnit (int lp_player, soundlink lp_vOSound, string lp_cooldownLink, unit lp_unit, string lp_ability);
soundlink libCOMI_gf_CC_CommanderVOLine (string lp_commander, int lp_line);
void libCOMI_gf_CM_CommanderVOInit ();
void libCOMI_gf_CC_MuteUnmuteExclusive (bool lp_muteUnmute, int lp_muteChannel, int lp_ignoredChannel, playergroup lp_players);
void libCOMI_gf_SetAllSoundChannelVolumesCampaign (int lp_mode);
void libCOMI_gf_SetAllSoundChannelVolumesForPlayerGroupCampaign (int lp_mode, playergroup lp_playerGroup);
void libCOMI_gf_MuteUnmuteAllSoundChannelsExcept (bool lp_muteUnmute, int lp_ignoredChannel, playergroup lp_players);
bool libCOMI_gf_ValidAntiAirUnitIsNearUnit (int lp_player, unit lp_unit);
void libCOMI_gf_RemindPlayertoCreateAntiAirUnits ();
void libCOMI_gf_CM_HeroReviveQueue_PlaySound (soundlink lp_soundLink, fixed lp_soundDelay, playergroup lp_listeningPlayers);
void libCOMI_gf_CM_VOResourceInit ();
void libCOMI_gf_SendMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_sourcePlayer);
void libCOMI_gf_SendVictoryTransmission (string lp_mapVictoryTransmission);
void libCOMI_gf_SendSplitMissionTransmission (string lp_transmissionType, bool lp_waitUntilDone, int lp_primaryPlayer, int lp_sourcePlayer);
void libCOMI_gf_WaitForMissionTransmission ();
void libCOMI_gf_CM_TransmissionUpdateConvoPlayers (string lp_conversation);
bool libCOMI_gf_CM_PlayerHasTransmission (int lp_player);
void libCOMI_gf_CM_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor);
void libCOMI_gf_CM_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, int lp_ping, int lp_localIndex);
void libCOMI_gf_HideCampaignTransmissionPortrait ();
void libCOMI_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff);
fixed libCOMI_gf_ConvesationLineDuration (string lp_conversationLine);
void libCOMI_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libCOMI_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption);
void libCOMI_gf_EnableDisableCoopAIWavePings (bool lp_enableDisable);
void libCOMI_gf_EnableDisableCoopAIWavePing (wave lp_attackWave, bool lp_enableDisable);
void libCOMI_gf_EnableDisableCoopAIPlayerAttackPings (playergroup lp_players, bool lp_enableDisable);
bool libCOMI_gf_CM_CoopAI_PingWorthyUnit (unit lp_pingableUnit);
bool libCOMI_gf_VU_isPingException (string lp_unit);
bool libCOMI_gf_UnitisValidforanAttackWavePing (unit lp_pingableUnit);
int libCOMI_gf_PingTypeFromObjectiveType (bool lp_objectiveType);
void libCOMI_gf_AttentionGrabbingObjectivePing (point lp_pingLocation);
void libCOMI_gf_CreateObjectivePing (bool lp_objectiveType, point lp_position, text lp_tooltip);
void libCOMI_gf_CreateObjectivePingAC (int lp_objectiveType, point lp_position, text lp_tooltip);
void libCOMI_gf_PingMinimapCampaign (playergroup lp_players, point lp_pos, fixed lp_dur, color lp_color);
void libCOMI_gf_DestroyPingCoop (int lp_ping);
void libCOMI_gf_CreatePingFacingAngleCoop (playergroup lp_players, point lp_position, fixed lp_angle, string lp_model, color lp_color, fixed lp_duration);
void libCOMI_gf_CreatePingWithPointFacingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, int lp_playerId);
void libCOMI_gf_CreatePingCoop (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration);
void libCOMI_gf_ShowHidePingCoop (int lp_ping, bool lp_visible);
void libCOMI_gf_CreateAlertAtPointCampaign (string lp_alertType, text lp_text, string lp_icon, point lp_point);
void libCOMI_gf_CreateAlertAtUnitCampaign (string lp_alertType, text lp_text, string lp_icon, unit lp_unit);
void libCOMI_gf_UT_CreatePieChart (int lp_pPlayer);
void libCOMI_gf_CC_ScoreInit ();
void libCOMI_gf_SetMissionEffort (fixed lp_percentEffort);
void libCOMI_gf_CC_ScoreValueSet (int lp_player, string lp_scoreType, int lp_value);
int libCOMI_gf_CC_StatEventLast ();
void libCOMI_gf_CC_StatEventCreate (string lp_name);
void libCOMI_gf_CC_StatEventAddStr (string lp_key, string lp_value, int lp_event);
void libCOMI_gf_CC_StatEventAddInt (string lp_key, int lp_value, int lp_event);
void libCOMI_gf_CC_StatEventAddReal (string lp_key, fixed lp_value, int lp_event);
void libCOMI_gf_CC_StatEventDone (int lp_statEvent);
void libCOMI_gf_CC_StatRecordMapStart ();
text libCOMI_gf_CU_PrestigeBriefFormatTooltip2 (int lp_player);
void libCOMI_gf_AF_MutatorIconsCreate (int lp_pDialog);
void libCOMI_gf_AF_MasteryInfoCreate (int lp_pDialog, int lp_pPlayer);
void libCOMI_gf_TrackUnitDamageTakenForScoreScreen (bool lp_enableDisable, unit lp_trackedUnit, string lp_scoreType);
void libCOMI_gf_SetMissionScore (string lp_scoreType, int lp_score, int lp_player);
string libCOMI_gf_CC_MissionScoreType (int lp_index, int lp_player);
int libCOMI_gf_CC_MissionScoreValue (int lp_index, int lp_player);
int libCOMI_gf_ObjectiveFinalScoreChecker (int lp_scoreValue, string lp_objectiive, int lp_index, bool lp_checkCompletion);
int libCOMI_gf_LeaderboardFinalScoreChecker (int lp_scoreValue, int lp_objective, bool lp_checkCompletion);
int libCOMI_gf_LeaderboardTimeScore (int lp_maxScore, int lp_parTimeMinutes);
int libCOMI_gf_LeaderboardObjectiveHealthScore (unit lp_objectiveUnit, int lp_maxScore);
fixed libCOMI_gf_LeaderboardObjectDurationModifierValue (int lp_maxScore, int lp_maxDurationMinutes);
int libCOMI_gf_CC_MissionExperienceReward ();
fixed libCOMI_gf_CC_MissionExperienceDifficultyBonus (int lp_difficulty);
void libCOMI_gf_AddTeamScoreValue (int lp_player, string lp_score);
string libCOMI_gf_UT_MapScoreStatistic (string lp_map);
void libCOMI_gf_CC_SaveAllTransitionData ();
void libCOMI_gf_CC_LoadAllTransitionData ();
void libCOMI_gf_ResetCampaignData (int lp_player);
void libCOMI_gf_CC_OpenCoopBank (int lp_player);
bool libCOMI_gf_CC_CoopBankExists (int lp_player);
void libCOMI_gf_CC_SaveCoopBank (int lp_player);
int libCOMI_gf_CC_LoadTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_default);
bool libCOMI_gf_CC_LoadTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_default);
string libCOMI_gf_CC_LoadTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_default);
void libCOMI_gf_CC_SaveTransitionVarInteger (bank lp_bank, string lp_section, string lp_key, int lp_value, int lp_default);
void libCOMI_gf_CC_SaveTransitionVarBoolean (bank lp_bank, string lp_section, string lp_key, bool lp_value, bool lp_default);
void libCOMI_gf_CC_SaveTransitionVarString (bank lp_bank, string lp_section, string lp_key, string lp_value, string lp_default);
void libCOMI_gf_CC_SaveTransitionVars (int lp_player, bank lp_targetBank);
void libCOMI_gf_CC_LoadTransitionVars (int lp_player, bank lp_sourceBank);
void libCOMI_gf_ObjectiveUpdate (string lp_objective, int lp_index, text lp_text);
int libCOMI_gf_MissionObjectiveItemCountCoop (string lp_objectiveData);
string libCOMI_gf_CM_ObjectiveRequiredCount (string lp_objectiveData);
string libCOMI_gf_CM_ObjectiveTimer (string lp_objective);
void libCOMI_gf_CC_ObjectiveRegister (string lp_objective);
void libCOMI_gf_CreateObjectiveCampaign (string lp_objectiveData);
void libCOMI_gf_SetMissionObjectiveProgress (string lp_objective, int lp_current);
void libCOMI_gf_ZS_SetMissionObjectiveState (string lp_objective, int lp_state);
void libCOMI_gf_SetObjectiveRequiredCountCampaign (string lp_objective, int lp_requiredCount);
void libCOMI_gf_SetObjectiveTimerCampaign (string lp_objective, timer lp_timer);
void libCOMI_gf_SetObjectiveTimerColorThresholdCampaign (string lp_objective, int lp_color, int lp_remainingTime);
void libCOMI_gf_SetMissionObjectiveCustomText (string lp_objective, text lp_customText);
void libCOMI_gf_CM_UpdateObjectiveTextCampaign (string lp_objective);
void libCOMI_gf_CM_UpdateObjectiveTimerCampaign (string lp_objective);
void libCOMI_gf_ObjectiveFailed (string lp_objective, int lp_index, bool lp_wait);
void libCOMI_gf_ObjectiveComplete (string lp_objective, int lp_index, bool lp_wait);
void libCOMI_gf_ObjectiveCreate (string lp_objective, int lp_index, bool lp_wait);
bool libCOMI_gf_IsObjectiveCreated (string lp_objective, int lp_index);
int libCOMI_gf_MissionObjectiveStateCheck3 (string lp_objective, int lp_index);
int libCOMI_gf_MissionObjectiveStateCheck2 (string lp_objective, int lp_index);
void libCOMI_gf_ZS_SetObjectiveProgressData (string lp_objective, int lp_progress);
text libCOMI_gf_MissionObjectiveDescription (string lp_objective);
bool libCOMI_gf_MissionObjectiveStateCheck (string lp_objective, int lp_state);
bool libCOMI_gf_MissionObjectiveIsPrimary (string lp_objective);
text libCOMI_gf_MissionObjectiveName (string lp_objective);
int libCOMI_gf_MissionObjectiveItemCount (string lp_objective);
int libCOMI_gf_MissionObjectiveProgress (string lp_objective);
int libCOMI_gf_MissionRewardTotalEarned2 (string lp_type);
int libCOMI_gf_MissionObjectiveRewardsEarned (string lp_objective, string lp_type);
int libCOMI_gf_MissionObjectiveRewardsAvailable2 (string lp_objective, string lp_type);
int libCOMI_gf_MissionRewardTotalEarned3 (string lp_mission, string lp_type);
int libCOMI_gf_MissionObjectiveRewards (string lp_objective, string lp_type);
int libCOMI_gf_MissionObjectiveRewards2 (string lp_objective, string lp_type);
text libCOMI_gf_CS_CampaignObjectiveBonusText (string lp_objective);
int libCOMI_gf_CS_GetObjectiveForData (string lp_objectiveData);
string libCOMI_gf_CS_ObjectiveUserDataInstance (string lp_objective);
int libCOMI_gf_CS_MissionObjectivePreviousProgress (string lp_objective);
int libCOMI_gf_CS_MissionObjectiveArchiveProgress (string lp_objective);
int libCOMI_gf_CS_GetObjectiveTypeInteger (string lp_objective);
bool libCOMI_gf_CS_GetObjectiveTypeBoolean (string lp_objective);
string libCOMI_gf_CS_ObjectiveTableString (string lp_objective);
bool libCOMI_gf_CS_ObjectiveCountsDown (string lp_objective);
void libCOMI_gf_GameOver (int lp_gameOverType);
void libCOMI_gf_RunMissionVictorySequence (trigger lp_victoryCinematic);
void libCOMI_gf_RunMissionVictorySequence2 (trigger lp_victoryCinematic, int lp_type);
void libCOMI_gf_EndCampaignMission (int lp_type);
bool libCOMI_gf_GameIsOver ();
void libCOMI_gf_BeforeFanfare (int lp_type);
void libCOMI_gf_AfterFanfare (int lp_type);
void libCOMI_gf_ApplyCameraForAllPlayers (camerainfo lp_camera, fixed lp_time);
fixed libCOMI_gf_ResourcesRadius ();
fixed libCOMI_gf_SafetyRadius ();
string libCOMI_gf_CC_CurrentMap ();
void libCOMI_gf_SetCurrentMap (string lp_map);
string libCOMI_gf_CC_MapAchievementTerm (string lp_map, int lp_difficulty);
string libCOMI_gf_CC_CampaignMapFile (string lp_map);
text libCOMI_gf_CC_CampaignMapName (string lp_map, int lp_player);
string libCOMI_gf_CC_MapScoreStatistic (string lp_map);
string libCOMI_gf_CC_MapUserDataInstance (string lp_map);
bool libCOMI_gf_PlayerInCinematicModeCampaign ();
void libCOMI_gf_SetScreenModeCoop (int lp_mode, fixed lp_duration, int lp_player);
void libCOMI_gf_CinematicModeCampaign (bool lp_onOff, fixed lp_duration, bool lp_waitOptions);
void libCOMI_gf_CM_CinematicModeNoWait (bool lp_onOff, fixed lp_duration);
void libCOMI_gf_CM_CinematicModeInternal (bool lp_onOff, fixed lp_duration);
void libCOMI_gf_CM_CinematicModeActivate ();
string libCOMI_gf_CM_SoundDataTableName ();
void libCOMI_gf_PlaySoundCinematic (soundlink lp_soundLink, playergroup lp_players, fixed lp_volume, fixed lp_offset);
void libCOMI_gf_StopCinematicSounds ();
void libCOMI_gf_MoveCameraForAllPlayers (point lp_point, fixed lp_time);
int libCOMI_gf_CC_DifficultyIndex (int lp_difficulty);
int libCOMI_gf_CC_DifficultyFromIndex (int lp_index);
void libCOMI_gf_InitDifficulty ();
void libCOMI_gf_CM_DifficultyApplySettings (int lp_player);
int libCOMI_gf_GetMissionDifficulty ();
int libCOMI_gf_DifficultyLevelForPlayerCoop (int lp_player);
int libCOMI_gf_GetDifficulty ();
int libCOMI_gf_DifficultyAsInteger (int lp_player);
int libCOMI_gf_IntegerToDifficulty (int lp_difficulty);
int libCOMI_gf_DifficultyValueInt2 (int lp_difficulty, int lp_beginner, int lp_normal, int lp_advanced, int lp_expert, int lp_virtuoso, int lp_master);
fixed libCOMI_gf_DifficultyValueFixed2 (int lp_difficulty, fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master);
string libCOMI_gf_DifficultyValueFixed3 (int lp_difficulty, string lp_beginner, string lp_normal, string lp_advanced, string lp_expert, string lp_virtuoso, string lp_master);
bool libCOMI_gf_DifficultyValueFixed4 (int lp_difficulty, bool lp_beginner, bool lp_normal, bool lp_advanced, bool lp_expert, bool lp_virtuoso, bool lp_master);
int libCOMI_gf_MinimumDifficultyValueCoopInteger (int lp_casual, int lp_normal, int lp_hard, int lp_brutal, int lp_extreme, int lp_unlikely);
fixed libCOMI_gf_MinimumDifficultyValueCoopReal (fixed lp_beginner, fixed lp_normal, fixed lp_advanced, fixed lp_expert, fixed lp_virtuoso, fixed lp_master);
string libCOMI_gf_CC_CommanderUserInstance (string lp_commander);
string libCOMI_gf_CC_CommanderData (string lp_commander);
string libCOMI_gf_CC_CommanderRace (string lp_commander);
int libCOMI_gf_CC_CommanderInternalIndex (string lp_commander);
string libCOMI_gf_CC_CommanderConversationLink (string lp_characterInstance);
string libCOMI_gf_CC_CommanderPortraitModel (string lp_commander);
string libCOMI_gf_CC_CommanderPortraitActor (string lp_commander);
string libCOMI_gf_CC_CommanderCustomImage (string lp_commander);
text libCOMI_gf_CC_CommanderName (string lp_commander);
int libCOMI_gf_CC_CommanderGender (string lp_commander);
text libCOMI_gf_CC_CommanderDescription (string lp_commander);
string libCOMI_gf_CC_CommanderSelectCutscene (string lp_commander);
string libCOMI_gf_CC_CommanderConvoTag (string lp_commander);
bool libCOMI_gf_CC_CommanderInGame (string lp_commander);
text libCOMI_gf_CC_CommanderGeneralTipTitle (string lp_tipID);
text libCOMI_gf_CC_CommanderGeneralTipDetails (string lp_tipID);
string libCOMI_gf_CC_CommanderGeneralTipIcon (string lp_tipID);
void libCOMI_gf_CreateExplosionatPointAdvanced (point lp_point, string lp_actor, soundlink lp_sound);
void libCOMI_gf_ResourcePickupAlly (int lp_player, int lp_minerals, int lp_vespene);
void libCOMI_gf_SendActorMessageToDoodadsInRegion (string lp_message, string lp_doodadType, region lp_target);
void libCOMI_gf_DestroyCacheAndGivePlayerResources (unit lp_cacheUnit, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void libCOMI_gf_GivePlayerResources (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
void libCOMI_gf_DisplayRewardFloatingText (point lp_location, int lp_resourceType, int lp_resourceAmount, string lp_resourceIcon, text lp_resourceText, int lp_player);
text libCOMI_gf_FormatTimeCampaign (int lp_second);
void libCOMI_gf_PauseAITimeCampaign (bool lp_pauseUnpause);
void libCOMI_gf_CC_TimeAITemporarySet (bool lp_pauseUnpause);
void libCOMI_gf_CC_TimeAITemporaryRestore ();
void libCOMI_gf_PauseMissionTimeCampaign (bool lp_pauseUnpause);
void libCOMI_gf_CC_TimeMissionTemporarySet (bool lp_pauseUnpause);
void libCOMI_gf_CC_TimeMissionTemporaryRestore ();
void libCOMI_gf_Unpause ();
void libCOMI_gf_Pause ();
void libCOMI_gf_CM_UseUnitNameAsUnitTip (unit lp_unit);
void libCOMI_gf_CM_ApplyCampaignTeachingToUnit (unit lp_teachUnit);
void libCOMI_gf_SetUnitInfoTextCampaign (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libCOMI_gf_SetUnitInfoTextCampaignDetailed (unit lp_unit, text lp_info, text lp_tip, text lp_subTip);
void libCOMI_gf_CM_MissionAutoSave (text lp_description);
void libCOMI_gf_CreateMissionAutosavePoint (text lp_description);
void libCOMI_gf_CreateWarpInEffect (unit lp_unit);
void libCOMI_gf_RunTriggeratMissionTime (fixed lp_time, trigger lp_trigger);
point libCOMI_gf_CM_NearbyGroundPathablePoint (point lp_initialDropPoint, fixed lp_distanceOffsetMin, fixed lp_distanceOffsetMax);
void libCOMI_gf_CM_DetectionUpgradesApply ();
fixed libCOMI_gf_Lerp (fixed lp_valueZero, fixed lp_valueOne, fixed lp_amount);
string libCOMI_gf_CC_CatalogGetFieldArrayValue (int lp_catalog, string lp_entry, string lp_field, int lp_index, int lp_player);
string libCOMI_gf_CC_AICommanderByUniqueIndex (int lp_uniqueIndex);
void libCOMI_gf_UT_Cooldown (int lp_pPlayer);
void libCOMI_gf_UT_Horde_Multiply (unit lp_pUnit, fixed lp_pCoef);
void libCOMI_gf_UT_MasteryPointsUpdate (int lp_pTargetPlayer);
void libCOMI_gf_UT_MasteryChoiceCreateUpdate (int lp_vTargetPlayer);
void libCOMI_gf_UT_ApplyMasteryTech (int lp_player);
void libCOMI_gf_UT_PlayerMasteryUpgradeLevelSet (int lp_player, string lp_masteryUpgrade, int lp_level);
int libCOMI_gf_UT_PlayerMasteryUpgradeLevel (int lp_player, string lp_masteryUpgrade);
text libCOMI_gf_UT_PlayerMasteryName (string lp_masteryUpgrade);
bool libCOMI_gf_UT_GL_ScoreUsed (string lp_pScore);
string libCOMI_gf_UT_GL_PlayerMasteryTalent (string lp_masteryUpgrade);
text libCOMI_gf_UT_GL_MasteryButtonName (string lp_masteryUpgrade);
text libCOMI_gf_UT_GL_AddScoreValueToText (text lp_pText, string lp_pScore, int lp_pIndex);
text libCOMI_gf_UT_GL_AddVariableValueToText (text lp_pText, text lp_pVariable, text lp_pVariableDescription, int lp_pIndex);
bool libCOMI_gf_UT_GL_IsSharedMissionScore (string lp_pScore);
void libCOMI_gf_UT_GL_GenerateNewLayout ();
string libCOMI_gf_ActiveCommanderForPlayer3 (int lp_player);
playergroup libCOMI_gf_UT_ActiveCommanderPlayers ();
string libCOMI_gf_UT_CommanderLoadingImage (string lp_pCommander);
string libCOMI_gf_ActiveCommanderForPlayer2 (string lp_pUserDataInstance);
int libCOMI_gf_UT_OtherPlayer (int lp_pPlayer);
unit libCOMI_gf_CM_PlayerGetGlobalCaster3 (int lp_player);
void libCOMI_gf_UT_CommanderHide (int lp_pCommanderMax);
bool libCOMI_gf_UT_Bank_UnitExcluded (unit lp_pUnit);
void libCOMI_gf_UT_Bank_SaveBank (int lp_pPlayer, string lp_pSaveName, string lp_pBankName);
void libCOMI_gf_UT_Bank_RestoreBank (int lp_pPlayer, string lp_pSaveName, playergroup lp_pPlayerGroup, string lp_pBankName);
point libCOMI_gf_PointWithPathingNearBase (playergroup lp_players);
point libCOMI_gf_GetPlayersBaseMiddlePoint (playergroup lp_players);
region libCOMI_gf_CT_MutatorSafetyZone ();
void libCOMI_gf_UT_SignalMutators ();
void libCOMI_gf_CU_RandomMutationSelectDisplay (int lp_player);
void libCOMI_gf_CU_RandomMutationSelectCreate ();
void libCOMI_gf_CU_RandomMutationSelectClose (int lp_player);
void libCOMI_gf_CU_MutatorDisplay (int lp_player);
void libCOMI_gf_CU_MutatorCreate ();
void libCOMI_gf_CU_MutatorInitFromData (int lp_player);
void libCOMI_gf_CU_MutatorClose (int lp_player);
void libCOMI_gf_CU_MutatorUpdateData ();
void libCOMI_gf_CU_MutatorUpdate (int lp_player);
void libCOMI_gf_CU_CustomMutatorStartGame (trigger t);
void libCOMI_gf_CU_CustomMutatorCreate ();
void libCOMI_gf_CU_CustomMutatorClose ();
void libCOMI_gf_CU_CustomMutatorInitFromData ();
void libCOMI_gf_CU_CustomMutatorUpdateData ();
void libCOMI_gf_CU_CustomMutatorUpdate (int lp_player);
void libCOMI_gf_CU_CustomMutatorDisplay ();
text libCOMI_gf_CU_CustomMutatorTooltip (string lp_mutator);
void libCOMI_gf_MM_MutatorDisplay (int lp_player);
void libCOMI_gf_MM_MutatorCreate ();
void libCOMI_gf_MM_MutatorInitFromData (int lp_player);
void libCOMI_gf_MM_MutatorClose (int lp_player);
void libCOMI_gf_MM_MutatorUpdateData ();
void libCOMI_gf_MM_MutatorUpdate (int lp_player);
void libCOMI_gf_CU_MutatorListCreate ();
void libCOMI_gf_CU_MutatorListInit ();
void libCOMI_gf_CU_MutatorListInitSmall ();
void libCOMI_gf_CU_MutatorListInitLarge ();
void libCOMI_gf_CU_MutatorListSetItem (int lp_index, string lp_mutator);
void libCOMI_gf_CU_MutatorListHideItem (int lp_index);
void libCOMI_gf_CU_MutatorListShowNotification (text lp_message);
void libCOMI_gf_CU_MutatorListShowNotificationToPlayer (text lp_message, int lp_player);
int libCOMI_gf_AffectedPlayer (int lp_index);
int libCOMI_gf_MutatorPlayer ();
playergroup libCOMI_gf_MutatorPlayers ();
playergroup libCOMI_gf_AffectedPlayers ();
bool libCOMI_gf_ConnectedByGroundPath (point lp_point);
bool libCOMI_gf_UnitIsAffectedByMutators (string lp_unit);
bool libCOMI_gf_UnitIsMutatorMissile (string lp_unit);
bool libCOMI_gf_IsDistantFromAlliedCommandersStartPositions (point lp_point, fixed lp_distance, playergroup lp_players);
bool libCOMI_gf_CT_ResourceSpawnLocationValid (point lp_spawnPoint);
bool libCOMI_gf_CT_UnitSpawnedByMutator (unit lp_unit);
void libCOMI_gf_CT_RegisterSpawnedUnit (unit lp_spawnedUnit);
void libCOMI_gf_CT_RegisterSpawnedUnitGroup (unitgroup lp_spawnedUnits);
void libCOMI_gf_CT_Mutator_AttackWaveHook_WaveCreated (int lp_attackingPlayer, unitgroup lp_attackingUnitGroup, point lp_attackOrigin, int lp_attackTargetType);
void libCOMI_gf_CT_Mutator_AttackWaveHook_WaveSent (int lp_attackingPlayer, unitgroup lp_attackingUnitGroup, point lp_attackOrigin, int lp_attackTargetType);
bool libCOMI_gf_MutatorIsEnabled (string lp_mutator);
void libCOMI_gf_EnableDisableMutator (bool lp_enableDisable, string lp_mutator);
void libCOMI_gf_SetMutatorWeeklyChallengeOn (int lp_challengeIndex);
void libCOMI_gf_EnableMutatorCustomMode ();
unit libCOMI_gf_MM_EnemyStructureWithPathing ();
point libCOMI_gf_MM_PositionEnemyStructureWithPathing ();
bool libCOMI_gf_MM_IsTrain (unit lp_pUnit);
void libCOMI_gf_MM_WaitForUnload (unitgroup lp_pTriggeringUG);
void libCOMI_gf_MM_AddToAttackWave_Check (unit lp_pUnit, unitgroup lp_pUG);
text libCOMI_gf_CT_MutatorName (string lp_mutator);
text libCOMI_gf_CT_MutatorDescription (string lp_mutator);
string libCOMI_gf_CT_MutatorIcon (string lp_mutator);
int libCOMI_gf_CT_MutatorEnabledCount ();
bool libCOMI_gf_CT_MutatorInWeeklyChallenge ();
bool libCOMI_gf_CT_MutatorInCustom ();
bool libCOMI_gf_CT_NearbyCliffs (point lp_testPoint, fixed lp_testDistance);
bool libCOMI_gf_CT_LineCrossesRegion (point lp_pointA, point lp_pointB, region lp_testRegion);
bool libCOMI_gf_CT_MutatorRandomAllowed (string lp_mutator);
bool libCOMI_gf_CT_MutatorRandomFirstAllowed (string lp_mutator);
bool libCOMI_gf_CT_MutatorCustomAllowed (string lp_mutator);
bool libCOMI_gf_CT_MutatorCustomMultipleAllowed (string lp_mutator);
string libCOMI_gf_CT_RandomUnusedCustomMutator ();
bool libCOMI_gf_CT_MutatorUnitIsMapObjective (unit lp_unit);
void libCOMI_gf_CreateMutationAbominationProbabilities (int lp_minMutators, int lp_maxMutators, int lp_minPointValue, int lp_maxPointValue);
void libCOMI_gf_TraverseMutationAbominationPointIndex (int lp_pointIndex, int lp_pointTotal, int lp_mutatorTotal, bool lp_setaTemplate);
void libCOMI_gf_ConsiderMutationAbominationPointTemplate (int lp_currentPointIndex, bool lp_setaTemplate);
void libCOMI_gf_CreateMutationAbomination (int lp_minMutators, int lp_maxMutators, int lp_minPointValue, int lp_maxPointValue);
void libCOMI_gf_IterateNextMutationAbomination (int lp_depthLevel, int lp_mutationAbominationIndex, int lp_currentPoints);
string libCOMI_gf_CT_GetMutationDifficultyLevel ();
void libCOMI_gf_CT_SetMutationDifficultyLevel (string lp_difficultyLevel);
fixed libCOMI_gf_CT_GetMutatorCountTargetPercentageAtDifficultyLevel (int lp_count, string lp_difficultyLevel);
int libCOMI_gf_CT_GetMutatorCountPossibilities (int lp_mutatorCount, int lp_minPoints, int lp_maxPoints);
fixed libCOMI_gf_CT_GetMutatorCountWeightModifier (int lp_mutatorCount);
int libCOMI_gf_CT_GetRandomMutatorCount ();
fixed libCOMI_gf_CT_GetRandomMutatorXPModifier ();
string libCOMI_gf_CT_MutatorCountTableName (string lp_prefixType, int lp_mutatorCount);
string libCOMI_gf_CT_GetAbomFromMutator (string lp_mutator);
void libCOMI_gf_CT_StoreMutatorForPlayer (int lp_player, string lp_mutatorScoreValue, int lp_mutatorIndex);
void libCOMI_gf_CT_StoreMutatorScoreValues ();
string libCOMI_gf_MM_RandomUnusedCustomMutator ();
void libCOMI_gf_MM_WarpIn (unit lp_pUnit);
void libCOMI_gf_MM_CopyBeneficialBehaviors (unit lp_pBehUnit, unit lp_pTargetUnit);
void libCOMI_gf_MM_EnableMutator (string lp_pMutator, bool lp_pNotification, bool lp_pEnable, int lp_pTimer);
void libCOMI_gf_MM_UpdateMutators ();
void libCOMI_gf_MM_UnitScaleController (unit lp_pUnit, fixed lp_pModifier);
void libCOMI_gf_MM_UnitCreationManual (unit lp_pUnit);
string libCOMI_gf_CT_RandomUnusedCycleMutator ();

// Trigger Declarations
trigger libCOMI_gt_DefaultMapInitializeTrigger;
trigger libCOMI_gt_DefaultGameStartTrigger;
trigger libCOMI_gt_InitialExploration;
trigger libCOMI_gt_CM_CampaignMissionInitialize;
trigger libCOMI_gt_CM_CampaignMissionInitialize2;
trigger libCOMI_gt_CheckStartingResources;
trigger libCOMI_gt_CheckStartingSupplies;
trigger libCOMI_gt_SuppliesMaxUpgrades;
trigger libCOMI_gt_SuppliesMadeUpgrades;
trigger libCOMI_gt_CC_SharedUpgradesRecheck;
trigger libCOMI_gt_CC_PrestigeUpgradeSupplement;
trigger libCOMI_gt_SkinUpgrades;
trigger libCOMI_gt_Autocasting;
trigger libCOMI_gt_VoidIncome;
trigger libCOMI_gt_VoidIncomeIncrease;
trigger libCOMI_gt_AmonGameplay;
trigger libCOMI_gt_AmonChangeOwner;
trigger libCOMI_gt_setobserver;
trigger libCOMI_gt_ReplaceDoodads;
trigger libCOMI_gt_AttackFastBuffHack;
trigger libCOMI_gt_DmgandAttackSpeedInheritNew;
trigger libCOMI_gt_DmgandAttackSpeedInheritExisting;
trigger libCOMI_gt_CM_CargoDeath;
trigger libCOMI_gt_UnitBehaviors;
trigger libCOMI_gt_BehaviorPermanentlyChangesOwner;
trigger libCOMI_gt_DeathPreventGrantKillCredit;
trigger libCOMI_gt_CU_HeroPanelUpdate;
trigger libCOMI_gt_CU_HeroUnitDamaged;
trigger libCOMI_gt_CU_HeroUnitVitalChange;
trigger libCOMI_gt_CU_HeroMouseHoverText;
trigger libCOMI_gt_HeroDied;
trigger libCOMI_gt_SamePlaceRevive;
trigger libCOMI_gt_CM_InstantRevive;
trigger libCOMI_gt_CU_GPBirthFinished;
trigger libCOMI_gt_CU_GPDeathRemove2D;
trigger libCOMI_gt_CU_GPVitalChanges;
trigger libCOMI_gt_TopBarNotificationsEnableDisable;
trigger libCOMI_gt_AF_TopBarClicked;
trigger libCOMI_gt_AF_MouseEntersTopBar;
trigger libCOMI_gt_AF_MouseExitsTopBar;
trigger libCOMI_gt_VU_EnemyFactionChanged;
trigger libCOMI_gt_FactionButtonClicked;
trigger libCOMI_gt_AF_CS_NewsControlButtonClicked;
trigger libCOMI_gt_UT_CommandsButtonClicked;
trigger libCOMI_gt_CU_PlayerLeftInLobby;
trigger libCOMI_gt_CommanderButtonClicked;
trigger libCOMI_gt_UT_PrestigeAlly;
trigger libCOMI_gt_UT_CommanderClicked;
trigger libCOMI_gt_CU_CommanderLevelUpClicked;
trigger libCOMI_gt_CU_CommanderLevelDownClicked;
trigger libCOMI_gt_CU_CommanderMutatorChallengeSelected;
trigger libCOMI_gt_AF_CS_AllyPrestigeChanged;
trigger libCOMI_gt_UT_AllyMasteryButtonClicked;
trigger libCOMI_gt_CU_CommanderMasteryClicked;
trigger libCOMI_gt_CU_CommanderMasteryCheckboxToggle;
trigger libCOMI_gt_ReadyButtonClicked;
trigger libCOMI_gt_CU_CommandeAllyLeft;
trigger libCOMI_gt_CU_MasteryShiftTrackDown;
trigger libCOMI_gt_CU_MasteryShiftTrackUp;
trigger libCOMI_gt_CU_MasteryLevelUpPressed;
trigger libCOMI_gt_CU_MasteryLevelDownPressed;
trigger libCOMI_gt_CU_MasteryItemPlusPressed;
trigger libCOMI_gt_CU_MasteryItemMinusPressed;
trigger libCOMI_gt_CU_MasteryResetPressed;
trigger libCOMI_gt_CU_MasteryAcceptPressed;
trigger libCOMI_gt_CU_PrestigeButtonClicked;
trigger libCOMI_gt_GameModePulldownUsed;
trigger libCOMI_gt_DifficultyPulldownUsed;
trigger libCOMI_gt_AF_SlimUI_Delayed;
trigger libCOMI_gt_CU_FlashArmyButtonHelpTip;
trigger libCOMI_gt_CU_ArmyButtonUsed;
trigger libCOMI_gt_CS_ArmyButtonMissionInit;
trigger libCOMI_gt_CU_BB_BossHPChanged;
trigger libCOMI_gt_CU_HealthWatchLifeCheck;
trigger libCOMI_gt_CU_HealthWatchUnitDies;
trigger libCOMI_gt_CU_HealthWatchFlash;
trigger libCOMI_gt_CU_HealthWatchStartSound;
trigger libCOMI_gt_CU_HealthWatchHeartLoop;
trigger libCOMI_gt_CU_HealthWatchBreathLoop;
trigger libCOMI_gt_CU_TargetingCancelButtonUsed;
trigger libCOMI_gt_CM_SoATargetingForceOff;
trigger libCOMI_gt_CM_SoATargetingCancelFromUI;
trigger libCOMI_gt_CU_TimerWindowFlash;
trigger libCOMI_gt_CU_TimerWindowMoveForBossBar;
trigger libCOMI_gt_CU_TimerWindowThresholdCrossed;
trigger libCOMI_gt_CU_WaveTimerWindowUpdateTime;
trigger libCOMI_gt_CU_ScoreClosed;
trigger libCOMI_gt_CU_FanfareDismissed;
trigger libCOMI_gt_MapListslectionChanged;
trigger libCOMI_gt_MapButtonClicked;
trigger libCOMI_gt_MissionsButtonClicked;
trigger libCOMI_gt_StartMission;
trigger libCOMI_gt_CreateMissionsDialog;
trigger libCOMI_gt_CM_AutoRevealRegionController;
trigger libCOMI_gt_PerformanceSleepArea;
trigger libCOMI_gt_TasksInitialization;
trigger libCOMI_gt_TaskCleanUpCoop;
trigger libCOMI_gt_AttacksController;
trigger libCOMI_gt_BaseTargetAttack;
trigger libCOMI_gt_AttackDefaultVOResponse;
trigger libCOMI_gt_DefaultMissionWavesTechProgression;
trigger libCOMI_gt_DefaultMissionWavesSizeProgression;
trigger libCOMI_gt_PriorityTargetAttack;
trigger libCOMI_gt_CM_CoopAI_AIDetectionManager;
trigger libCOMI_gt_CM_CoopAI_AIManager;
trigger libCOMI_gt_CM_CoopAI_AttackWaveSetup;
trigger libCOMI_gt_CM_DropPod_Zerg_DontWait;
trigger libCOMI_gt_CM_DropPod_Terran_DontWait;
trigger libCOMI_gt_DefferedTransmission;
trigger libCOMI_gt_CM_HeroReviveQueue_HeroRevived;
trigger libCOMI_gt_CM_VOResourceSent;
trigger libCOMI_gt_CM_VOResourceRequest;
trigger libCOMI_gt_CM_VOUnitsLostCheck;
trigger libCOMI_gt_CM_VOEnemySpotted;
trigger libCOMI_gt_CM_VOEnemyCloakedSpotted;
trigger libCOMI_gt_CM_TransmissionSend;
trigger libCOMI_gt_CM_SendTransmissionCampaignTick;
trigger libCOMI_gt_CM_CoopAI_AttackWavePingManager;
trigger libCOMI_gt_VoidPingSound;
trigger libCOMI_gt_AF_Score;
trigger libCOMI_gt_AF_Score_GraphsandCharts;
trigger libCOMI_gt_AF_Score_SwitchButtonCreate;
trigger libCOMI_gt_AF_Score_MissionsButtonCreate;
trigger libCOMI_gt_AF_Score_QuitButtonCreate;
trigger libCOMI_gt_AF_Score_FinalButtonClicked;
trigger libCOMI_gt_CC_ScoreDebugDisplay;
trigger libCOMI_gt_CC_ScoreEnemiesKilled;
trigger libCOMI_gt_CC_ScoreDynDmgTaken;
trigger libCOMI_gt_CheatBaseDead;
trigger libCOMI_gt_DefeatFanfareBaseDead;
trigger libCOMI_gt_DefeatBaseDead;
trigger libCOMI_gt_VictoryCheat;
trigger libCOMI_gt_DefeatCheat;
trigger libCOMI_gt_CM_AbortMission;
trigger libCOMI_gt_CM_MissionHandlePlayerQuitNydusTricks;
trigger libCOMI_gt_CM_MissionHandlePlayerQuitGameEnd;
trigger libCOMI_gt_CM_MissionScoreScreenExited;
trigger libCOMI_gt_CM_MissionVictoryCheatEndMission;
trigger libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueueOneMinute;
trigger libCOMI_gt_CM_MissionVictoryCallbackBlockActionQueue;
trigger libCOMI_gt_AF_MissionEnds;
trigger libCOMI_gt_CM_CinematicModeOn;
trigger libCOMI_gt_CM_CinematicModeOff;
trigger libCOMI_gt_CM_CampaignMissionIntroZoomIn;
trigger libCOMI_gt_ResourcePickupAllyNew;
trigger libCOMI_gt_CM_CampaignUnitTeaching;
trigger libCOMI_gt_CM_CampaignUnitCreated;
trigger libCOMI_gt_CM_CampaignUnitChangeOwner;
trigger libCOMI_gt_CM_CampaignUnitInfoUnitMorphes;
trigger libCOMI_gt_UT_Cooldown;
trigger libCOMI_gt_UT_Horde_Init;
trigger libCOMI_gt_UT_Horde_Remove;
trigger libCOMI_gt_UT_Horde_UnitCreated;
trigger libCOMI_gt_UT_Horde_SendWave;
trigger libCOMI_gt_UT_encomps;
trigger libCOMI_gt_UT_Mastery;
trigger libCOMI_gt_UT_MasteryButtonClicked;
trigger libCOMI_gt_UT_CommanderSwitched;
trigger libCOMI_gt_UT_SpawnAttackWave;
trigger libCOMI_gt_UT_AttackWaveAttack;
trigger libCOMI_gt_UT_RemoveWave;
trigger libCOMI_gt_UT_NukeTest;
trigger libCOMI_gt_AF_BileLauncherBombardment;
trigger libCOMI_gt_ToggleAIDebugMessages;
trigger libCOMI_gt_CM_CoopAI_InitAIDebugging;
trigger libCOMI_gt_CU_DebugMovieCaptureModeToggle;
trigger libCOMI_gt_CU_DebugMutatorSelect;
trigger libCOMI_gt_CU_DebugRandomMutationSelect;
trigger libCOMI_gt_CU_DebugCinMode;
trigger libCOMI_gt_CU_DebugScreenmode;
trigger libCOMI_gt_CU_DebugTogSoA;
trigger libCOMI_gt_CM_DebugTargetSpawnersSet;
trigger libCOMI_gt_CT_DebugSelectCommanders;
trigger libCOMI_gt_SimpleDropAttackExample2;
trigger libCOMI_gt_CM_DebugVictoryS;
trigger libCOMI_gt_CM_CampaignMissionPerfLog;
trigger libCOMI_gt_UT_DebugMutatorSelect;
trigger libCOMI_gt_UT_ShareControl;
trigger libCOMI_gt_UT_AllySupply;
trigger libCOMI_gt_UT_Unlock;
trigger libCOMI_gt_UT_Trigdebug;
trigger libCOMI_gt_UT_Ally;
trigger libCOMI_gt_UT_PvP;
trigger libCOMI_gt_CU_DebugMovieCaptureModeSuppressCC;
trigger libCOMI_gt_CU_DebugMovieCaptureModeSupressUnits;
trigger libCOMI_gt_UT_StartTrigger;
trigger libCOMI_gt_UT_sbank;
trigger libCOMI_gt_UT_rbank;
trigger libCOMI_gt_UT_RefillInit;
trigger libCOMI_gt_UT_Refill;
trigger libCOMI_gt_UT_UI;
trigger libCOMI_gt_UT_UI_CtrlH;
trigger libCOMI_gt_MM_UnitDeath8;
trigger libCOMI_gt_MM_UnitRemovedFix2;
trigger libCOMI_gt_CU_RandomMutationSelectOK;
trigger libCOMI_gt_CU_RandomMutationSelectSliderChange;
trigger libCOMI_gt_CU_MutatorAcceptClicked;
trigger libCOMI_gt_CU_MutatorCancelClicked;
trigger libCOMI_gt_UT_EmpowerInit;
trigger libCOMI_gt_UT_EmpowerUnitCreated;
trigger libCOMI_gt_CU_CustomMutatorChangePage;
trigger libCOMI_gt_CU_CustomMutatorToggleItem;
trigger libCOMI_gt_CU_CustomMutatorSuggestItem;
trigger libCOMI_gt_CU_CustomMutatorRemoveActiveItem;
trigger libCOMI_gt_CU_CustomMutatorStartGame;
trigger libCOMI_gt_CU_CustomMutatorOpenMenu;
trigger libCOMI_gt_CU_CustomMutatorLeaderLeaves;
trigger libCOMI_gt_CU_CustomMutatorLeaderLeavesDismiss;
trigger libCOMI_gt_CU_CustomMutatorSpeedChange;
trigger libCOMI_gt_MM_MutatorAcceptClicked;
trigger libCOMI_gt_MM_MutatorCancelClicked;
trigger libCOMI_gt_MM_CommanderMutatorsClicked;
trigger libCOMI_gt_CU_MutatorListNotificationExpired;
trigger libCOMI_gt_MM_PX_InitPlayerX;
trigger libCOMI_gt_MM_PX_UpgradeParityPlayerX;
trigger libCOMI_gt_InitializeMutators;
trigger libCOMI_gt_CT_EvilSoACast;
trigger libCOMI_gt_MM_RandomMutatorFix;
trigger libCOMI_gt_MM_RandomMutator;
trigger libCOMI_gt_CT_InitializeCycleRandom;
trigger libCOMI_gt_CT_ShutdownCycleRandom;
trigger libCOMI_gt_CT_CycleRandomMutators;

// Library Initialization
void libCOMI_InitVariables ();

