const string c_UEDU_WORKER            = "Salvager";
const string c_UEDU_TRANSPORT         = "TransportShuttle";
const string c_UEDU_DETECTOR          = "SupportShuttle";
const string c_UEDU_COMBAT_1          = "StrikeTrooper";
const string c_UEDU_COMBAT_2          = "Garmr";
const string c_UEDU_COMBAT_3          = "Lazarus";
const string c_UEDU_COMBAT_4          = "PoliticalAdvisor";
const string c_UEDU_COMBAT_5          = "Taranis";
const string c_UEDU_COMBAT_6          = "Typhoon";
const string c_UEDU_COMBAT_7          = "Napoleon";
const string c_UEDU_COMBAT_8          = "Huracan";
const string c_UEDU_COMBAT_9          = "DrakkarAPC";
const string c_UEDU_COMBAT_10         = "CitadelAAT";
const string c_UEDU_COMBAT_AIR_1      = "Valkyrie";
const string c_UEDU_COMBAT_AIR_2      = "CrimsonEye";
const string c_UEDU_COMBAT_AIR_3      = "Strikefighter";
const string c_UEDU_COMBAT_AIR_4      = "HonorguardCruiser";
const string c_UEDU_COMBAT_AIR_5      = "PeenemundeMRLS";

//--------------------------------------------------------------------------------------------------
//  UED Buildings
//--------------------------------------------------------------------------------------------------
const string c_UEDB_REFINERY         = "";
const string c_UEDB_PROD_1           = "TeleportationNode";
const string c_UEDB_PROD_2           = "TacticsAcademy";
const string c_UEDB_PROD_3           = "TeleportationNode";
const string c_UEDB_MAIN             = "OperationHeadquarters";
const string c_UEDB_SUPPLY           = "Arsenal";
const string c_UEDB_TECH_1           = "FieldBureau";
const string c_UEDB_TECH_2           = "MunitionsFactory";
const string c_UEDB_TECH_3           = "TachyonRelay";
const string c_UEDB_ADDON            = "EnrichmentTower";
const string c_UEDB_DEFENSE_1        = "SuppressionTower";
const string c_UEDB_DEFENSE_2        = "HeavyTower";

//--------------------------------------------------------------------------------------------------
//  UED Research Upgrades
//--------------------------------------------------------------------------------------------------
const string c_UEDR_AirArmor1        = "UEDArmorLevel1";
const string c_UEDR_AirArmor2        = "UEDArmorLevel2";
const string c_UEDR_AirArmor3        = "UEDArmorLevel3";
const string c_UEDR_AirWeapons1      = "UEDWeaponsLevel1";
const string c_UEDR_AirWeapons2      = "UEDWeaponsLevel2";
const string c_UEDR_AirWeapons3      = "UEDWeaponsLevel3";
const string c_UEDR_GroundArmor1     = "UEDArmorLevel1";
const string c_UEDR_GroundArmor2     = "UEDArmorLevel2";
const string c_UEDR_GroundArmor3     = "UEDArmorLevel3";
const string c_UEDR_HeavyWeapons1    = "UEDVehicalsLevel1";
const string c_UEDR_HeavyWeapons2    = "UEDVehicalsLevel2";
const string c_UEDR_HeavyWeapons3    = "UEDVehicalsLevel3";
const string c_UEDR_LightWeapons1    = "UEDWeaponsLevel1";
const string c_UEDR_LightWeapons2    = "UEDWeaponsLevel2";
const string c_UEDR_LightWeapons3    = "UEDWeaponsLevel3";

const string c_UEDR_UPGRADE_1        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_2        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_3        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_4        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_5        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_6        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_7        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_8        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_9        = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_10       = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_11       = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_12       = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_13       = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_14       = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_15       = "UEDArmorLevel1";
const string c_UEDR_UPGRADE_16       = "UEDArmorLevel1";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// MELEEAI  //////////////////////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------------------------------
//  UEDBasicDefenseStock
//--------------------------------------------------------------------------------------------------
void UEDBasicDefenseStock (int player) {
    if (!AINeedsDefending(player)) {
        return;
    }

    AISetStockFarms( player, c_UEDB_SUPPLY, c_stockNormalFarms);
    AIAddEmergencyDefenseStock(player, 4, c_UEDU_COMBAT_1, false);
    AISetStock( player, 1, c_UEDB_REFINERY );
    AIAddEmergencyDefenseStock(player, 4, c_UEDU_COMBAT_AIR_2, true);
    AIAddEmergencyDefenseStock(player, 2, c_UEDU_COMBAT_7, true);
    AIAddEmergencyDefenseStock(player, 4, c_UEDU_COMBAT_2, true);
    AIAddEmergencyDefenseStock(player, 20, c_UEDU_WORKER, true);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// LOWAI  //////////////////////////////////////////////////////////////////////////////////////////////////


//--------------------------------------------------------------------------------------------------
//  UEDBasicEconomy
//--------------------------------------------------------------------------------------------------
void UEDBasicEconomy (int player, int tier, int minWorkers) {
    int econMin = AIGetMinPeonCount(player, c_townMax);
    if (minWorkers > econMin) {
        minWorkers = econMin;
    }

    AIDefaultEconomy(player, c_UEDB_MAIN, c_UEDB_REFINERY, c_UEDB_SUPPLY, c_UEDU_WORKER, minWorkers, c_stockAlways);
}

//--------------------------------------------------------------------------------------------------
//  UEDBasicExpansion
//--------------------------------------------------------------------------------------------------
void UEDBasicExpansion (int player, int tier, int minerals, int gas) {
    AIDefaultExpansion(player, c_UEDB_MAIN, minerals, gas, c_expandDefault);
}

//--------------------------------------------------------------------------------------------------
//  UEDGeneralBuild
//--------------------------------------------------------------------------------------------------
void UEDGeneralBuild (int player, int tier) {
    if (tier >= c_ldPhaseMid) {
        if (PlayerBeaconIsSet(player, c_beaconDetect)) {
            AISetStock( player, 1, c_UEDU_DETECTOR );
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  UEDMacroExpand
//--------------------------------------------------------------------------------------------------
bool UEDMacroExpand (int player) {
    fixed defenseEval = 0;

    if (AITechCount(player, c_UEDU_WORKER, c_techCountQueuedOrBetter) < 14) {
        return false;
    }
    if (AITechCount(player, c_UEDB_MAIN, c_techCountQueuedOrBetter) >= 2) {
        return false;
    }

    defenseEval = AISelfDefenseThreatEval(c_dtRealSelfThreat, player);
    if (defenseEval >= 120) {
        // don't expand if currently under attack
        return false;
    }

    if (!AIIsExpandingOrHasExpanded(player)) {
        if (!AIHasNearbyOpenExpansion(player)) {
            return false;
        }
        if (!AIHasRes(player,300,0)) {
            AIEnableStock(player);
            return true;
        }

        // we should try to expand
        AIExpand(player, AIGetTownLocation(player, c_townMain), c_UEDB_MAIN);
    }

    // currently expanding see if we need to save minerals
    if (!AIHasRes(player,500,0)) {
        AIEnableStock(player);
        return true;
    }
    return false; // already saved enough, we're allowed to continure the stock
}

//--------------------------------------------------------------------------------------------------
//  UEDAtEachTown
//--------------------------------------------------------------------------------------------------
void UEDAtEachTown (int player, int tier) {
    int i = 0;
    int town;

    while (i < c_townMax) {
        town = i;
        i = i + 1;

        if (AIGetTownState(player, town) != c_townStateEstablished) {
            continue;
        }

        if (AIGetBuildingCountInTown(player, town, c_UEDB_MAIN, c_techCountCompleteOnly) < 1) {
            continue;
        }

        if (AIGetBuildingCountInTown(player, town, c_UEDB_DEFENSE_2, c_techCountCompleteOnly) < 2) {
            AISetStockEx(player, town, 2, c_UEDB_DEFENSE_2, c_makeResourceDefense | c_nearDropoff, 0);
            continue;
        }
        if (AIGetBuildingCountInTown(player, town, c_UEDB_DEFENSE_1, c_techCountCompleteOnly) < 1) {
            AISetStockEx(player, town, 1, c_UEDB_DEFENSE_1, c_makeResourceDefense | c_nearDropoff, 0);
            continue;
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  UEDTechUp
//--------------------------------------------------------------------------------------------------
void UEDTechUp (int player, int tier) {
    int diff = AIPlayerDifficulty(player);

    if (diff < c_skirMedium) {
        // don't build extra buildings below medium
        return;
    }

    AISetStock( player, 2, c_UEDB_REFINERY );
    AISetStock( player, 1, c_UEDB_PROD_1 );
    AISetStock( player, 2, c_UEDB_ADDON );
    AISetStock( player, 1, c_UEDB_TECH_1 );

    if (tier >= c_ldPhaseMid) {
        UEDAtEachTown(player, tier);
        AISetStock( player, 1, c_UEDB_PROD_2 );
        AISetStock( player, 1, c_UEDB_TECH_2 );
        AISetStock( player, 1, c_UEDB_PROD_3 );
        AISetStock( player, 3, c_UEDB_PROD_1 );
        AISetStock( player, 12, c_UEDB_ADDON );

        if (tier >= c_ldPhaseLate) {
            AISetStock( player, 1, c_UEDB_TECH_3 );
            AISetStock( player, 2, c_UEDB_TECH_1 );
            AISetStock( player, 2, c_UEDB_TECH_2 );
            AISetStock( player, 2, c_UEDB_PROD_3 );
            AISetStock( player, 18, c_UEDB_ADDON );
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//// HIGHAI  //////////////////////////////////////////////////////////////////////////////////////////////////


//--------------------------------------------------------------------------------------------------
//  UEDHDFastExpand
//--------------------------------------------------------------------------------------------------
bool UEDHDFastExpand (int player) {
    fixed defenseEval = 0;

    if (AITechCount(player, c_UEDB_MAIN, c_techCountQueuedOrBetter) >= 2) {
        return false;
    }

    defenseEval = AISelfDefenseThreatEval(c_dtRealSelfThreat, player);
    if (defenseEval >= 120) {
        // don't expand if currently under attack
        return false;
    }

    if (!AIIsExpandingOrHasExpanded(player)) {
        if (!AIHasNearbyOpenExpansion(player)) {
            return false;
        }
        if (!AIHasRes(player,300,0)) {
            AIEnableStock(player);
            return true;
        }

        // we should try to expand
        AIExpand(player, AIGetTownLocation(player, c_townMain), c_UEDB_MAIN);
    }

    // currently expanding see if we need to save minerals
    if (!AIHasRes(player,500,0)) {
        AIEnableStock(player);
        return true;
    }
    return false; // already saved enough, we're allowed to continure the stock
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------------------------------
//  UEDUpgradesHard
//--------------------------------------------------------------------------------------------------
void UEDUpgradesHard (int player, int phase) {
    int buildType;

    if (phase < c_ldPhaseLate) {
        buildType = AIGetUserInt(player, c_openingBuildType);
    } else {
        buildType = AIGetUserInt(player, c_lateGameBuildType);
    }
    if (buildType != e_buildType_Air) {
        if (phase >= c_ldPhaseMid) {

            if (AITechCount(player, c_UEDU_COMBAT_1, c_techCountInProgressOrBetter) >= 6) {
                AISetStock( player, 1, c_UEDR_UPGRADE_1 );
            }
            if (AITechCount(player, c_UEDU_COMBAT_2, c_techCountInProgressOrBetter) >= 6) {
                AISetStock( player, 1, c_UEDR_UPGRADE_15 );
            }

            AISetStock( player, 1, c_UEDR_LightWeapons1 );
            AISetStock( player, 1, c_UEDR_GroundArmor1 );

            if (phase >= c_ldPhaseLate) {

                AISetStock( player, 1, c_UEDR_LightWeapons2 );
                AISetStock( player, 1, c_UEDR_GroundArmor2 );
                AISetStock( player, 1, c_UEDR_HeavyWeapons1 );

                if (AITechCount(player, c_UEDU_COMBAT_3, c_techCountInProgressOrBetter) >= 5) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_4 );
                    AISetStock( player, 1, c_UEDR_UPGRADE_7 );
                }
                if (AITechCount(player, c_UEDU_COMBAT_7, c_techCountInProgressOrBetter) >= 3) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_6 );
                }
                if (AITechCount(player, c_UEDU_COMBAT_AIR_2, c_techCountInProgressOrBetter) >= 4) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_14 );
                }
                if (AITechCount(player, c_UEDU_TRANSPORT, c_techCountInProgressOrBetter) >= 2) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_13 );
                }

                AISetStock( player, 1, c_UEDR_UPGRADE_2 );
                AISetStock( player, 1, c_UEDR_UPGRADE_3 );
                AISetStock( player, 1, c_UEDR_UPGRADE_12 );

                AISetStock( player, 1, c_UEDR_AirWeapons1 );
                AISetStock( player, 1, c_UEDR_AirArmor1 );

                if (phase >= c_ldPhaseFinal) {

                    if (AITechCount(player, c_UEDU_COMBAT_4, c_techCountInProgressOrBetter) >= 3) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_5 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_6, c_techCountInProgressOrBetter) >= 4) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_10 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_8, c_techCountInProgressOrBetter) >= 2) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_8 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_AIR_1, c_techCountInProgressOrBetter) >= 4) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_11 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_AIR_3, c_techCountInProgressOrBetter) >= 3) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_9 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_AIR_5, c_techCountInProgressOrBetter) >= 2) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_16 );
                    }

                    AISetStock( player, 1, c_UEDR_LightWeapons3 );
                    AISetStock( player, 1, c_UEDR_GroundArmor3 );
                    AISetStock( player, 1, c_UEDR_HeavyWeapons3 );
                    AISetStock( player, 1, c_UEDR_AirWeapons3 );
                    AISetStock( player, 1, c_UEDR_AirArmor3 );
                }
            }
        }
    }
    else {  // (buildType == e_buildType_Air)
        if (phase >= c_ldPhaseMid) {

            if (AITechCount(player, c_UEDU_COMBAT_1, c_techCountInProgressOrBetter) >= 6) {
                AISetStock( player, 1, c_UEDR_UPGRADE_1 );
            }
            if (AITechCount(player, c_UEDU_COMBAT_2, c_techCountInProgressOrBetter) >= 6) {
                AISetStock( player, 1, c_UEDR_UPGRADE_15 );
            }

            AISetStock( player, 1, c_UEDR_AirWeapons1 );
            AISetStock( player, 1, c_UEDR_AirArmor1 );

            if (phase >= c_ldPhaseLate) {

                if (AITechCount(player, c_UEDU_COMBAT_AIR_2, c_techCountInProgressOrBetter) >= 4) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_14 );
                }
                if (AITechCount(player, c_UEDU_TRANSPORT, c_techCountInProgressOrBetter) >= 2) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_13 );
                }

                AISetStock( player, 1, c_UEDR_UPGRADE_3 );
                AISetStock( player, 1, c_UEDR_UPGRADE_12 );

                AISetStock( player, 1, c_UEDR_AirWeapons2 );
                AISetStock( player, 1, c_UEDR_AirArmor2 );
                AISetStock( player, 1, c_UEDR_LightWeapons1 );
                AISetStock( player, 1, c_UEDR_GroundArmor1 );
                AISetStock( player, 1, c_UEDR_HeavyWeapons1 );

                if (AITechCount(player, c_UEDU_COMBAT_3, c_techCountInProgressOrBetter) >= 5) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_4 );
                    AISetStock( player, 1, c_UEDR_UPGRADE_7 );
                }
                if (AITechCount(player, c_UEDU_COMBAT_7, c_techCountInProgressOrBetter) >= 3) {
                    AISetStock( player, 1, c_UEDR_UPGRADE_6 );
                }

                AISetStock( player, 1, c_UEDR_UPGRADE_2 );

                if (phase >= c_ldPhaseFinal) {

                    if (AITechCount(player, c_UEDU_COMBAT_AIR_1, c_techCountInProgressOrBetter) >= 4) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_11 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_AIR_3, c_techCountInProgressOrBetter) >= 3) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_9 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_AIR_5, c_techCountInProgressOrBetter) >= 2) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_16 );
                    }

                    AISetStock( player, 1, c_UEDR_AirWeapons3 );
                    AISetStock( player, 1, c_UEDR_AirArmor3 );
                    AISetStock( player, 1, c_UEDR_LightWeapons3 );
                    AISetStock( player, 1, c_UEDR_GroundArmor3 );
                    AISetStock( player, 1, c_UEDR_HeavyWeapons3 );

                    if (AITechCount(player, c_UEDU_COMBAT_4, c_techCountInProgressOrBetter) >= 3) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_5 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_6, c_techCountInProgressOrBetter) >= 4) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_10 );
                    }
                    if (AITechCount(player, c_UEDU_COMBAT_8, c_techCountInProgressOrBetter) >= 2) {
                        AISetStock( player, 1, c_UEDR_UPGRADE_8 );
                    }
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  UEDOpenArmyInitHard
//--------------------------------------------------------------------------------------------------
int UEDOpenArmyInitHard (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        armyRoll = RandomInt(0,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 3);
            // validation: 675 resources
            duration = 320 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 7);
            // validation: 700 resources
            duration = 330 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Timing) {
        armyRoll = RandomInt(0,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 3);
            AIAddToStockArmy(player, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2), 4);
            // validation: 1000 resources
            duration = 380 + RandomInt(-15, 15);
        } else if (armyRoll <= 2){
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 2);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 5, c_UEDU_COMBAT_3, 4);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 3, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2), 2);
            // validation: 1025 resources
            duration = 400 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Power) {
        armyRoll = RandomInt(0,2);
        if (armyRoll < 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 3);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 3, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2), 2);
            // validation: 1400 resources
            duration = 500 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 5);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 3, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2), 2);
            // validation: 1425 resources
            duration = 520 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Macro) {
        armyRoll = RandomInt(1,4);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 3);
            // validation: 725 resources
            duration = 220 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 2);
            // validation: 750 resources
            duration = 220 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Air) {
        AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 2);
        AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 6);
        // validation: 1525 resources
        duration = 540 + RandomInt(-20, 20);
    } else {
        return UEDOpenArmyInitHard(player, e_buildType_Macro);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  UEDOpenInitHard
//--------------------------------------------------------------------------------------------------
void UEDOpenInitHard (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseOpen, UEDOpenArmyInitHard);

    AISetMainState(player, e_mainState_Open, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  UEDOpenBuildHard
//--------------------------------------------------------------------------------------------------
void UEDOpenBuildHard (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Open, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    if (buildType == e_buildType_Rush) {
        AISetStock( player, 1, c_UEDB_MAIN );
        AISetStock( player, 15, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_SUPPLY );
        AISetStock( player, 16, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_PROD_1 );
        AISetStock( player, 1, c_UEDB_REFINERY );
        AISetStock( player, 1, c_UEDU_COMBAT_1 );
        AISetStock( player, 1, c_UEDB_ADDON );
        AISetStock( player, 2, c_UEDU_COMBAT_1 );
        AISetStock( player, 2, c_UEDB_SUPPLY );
        AISetStock( player, 19, c_UEDU_WORKER );
        AISetStockUnitNext( player, 20, c_TU_SCV, c_stockIdle );
        AISetStockFarms( player, c_UEDB_SUPPLY, c_stockNormalFarms);
    }
    else if (buildType == e_buildType_Timing) {
        AISetStock( player, 1, c_UEDB_MAIN );
        AISetStock( player, 15, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_SUPPLY );
        AISetStock( player, 16, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_PROD_1 );
        AISetStock( player, 1, c_UEDB_REFINERY );
        AISetStock( player, 1, c_UEDU_COMBAT_1 );
        AISetStock( player, 1, c_UEDB_ADDON );
        AISetStock( player, 2, c_UEDU_COMBAT_1 );
        AISetStock( player, 2, c_UEDB_SUPPLY );
        AISetStock( player, 19, c_UEDU_WORKER );
        AISetStockUnitNext( player, 20, c_TU_SCV, c_stockIdle );
        AISetStockFarms( player, c_UEDB_SUPPLY, c_stockNormalFarms);
        AISetStock( player, 2, c_UEDB_REFINERY );
        AISetStock( player, 2, c_UEDB_PROD_1 );
    }
    else if (buildType == e_buildType_Power) {
        AISetStock( player, 1, c_UEDB_MAIN );
        AISetStock( player, 15, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_SUPPLY );
        AISetStock( player, 16, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_PROD_1 );
        AISetStock( player, 1, c_UEDB_REFINERY );
        AISetStock( player, 1, c_UEDU_COMBAT_1 );
        AISetStock( player, 1, c_UEDB_ADDON );
        AISetStock( player, 2, c_UEDB_SUPPLY );
        AISetStock( player, 19, c_UEDU_WORKER );
        AISetStockUnitNext( player, 20, c_TU_SCV, c_stockIdle );
        AISetStockFarms( player, c_UEDB_SUPPLY, c_stockNormalFarms);
        AISetStock( player, 2, c_UEDB_REFINERY );
        AISetStock( player, 2, c_UEDB_ADDON );
    }
    else if (buildType == e_buildType_Macro) {
        AISetStock( player, 1, c_UEDB_MAIN );
        AISetStock( player, 15, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_SUPPLY );
        AISetStock( player, 16, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_PROD_1 );
        if (UEDMacroExpand(player)) { return; }
        AISetStock( player, 1, c_UEDU_COMBAT_1 );
        AISetStock( player, 3, c_UEDB_ADDON );
        AISetStock( player, 2, c_UEDU_COMBAT_1 );
        AISetStock( player, 19, c_UEDU_WORKER );
        AISetStock( player, 2, c_UEDB_SUPPLY );
        AISetStock( player, 1, c_UEDB_PROD_2 );
        AISetStock( player, 1, c_UEDB_REFINERY );
        AISetStockUnitNext( player, 30, c_UEDU_WORKER, c_stockIdle );
        AISetStockFarms( player, c_UEDB_SUPPLY, c_stockNormalFarms);
        AISetStock( player, 2, c_UEDB_REFINERY );
    }
    else if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_UEDB_MAIN );
        AISetStock( player, 15, c_UEDU_WORKER );
        AISetStock( player, 1, c_UEDB_SUPPLY );
        AISetStock( player, 16, c_UEDU_WORKER );
        if (UEDMacroExpand(player)) { return; }
        AISetStock( player, 1, c_UEDB_REFINERY );
        AISetStock( player, 1, c_UEDB_PROD_1 );
        AISetStock( player, 2, c_UEDB_REFINERY );
        AISetStock( player, 19, c_UEDU_WORKER );
        AISetStock( player, 2, c_UEDB_SUPPLY );
        AISetStock( player, 1, c_UEDB_PROD_2 );
        AISetStockUnitNext( player, 30, c_UEDU_WORKER, c_stockIdle );
        AISetStockFarms( player, c_UEDB_SUPPLY, c_stockNormalFarms);
        AISetStock( player, 1, c_UEDB_PROD_3 );
        AISetStock( player, 9, c_UEDB_ADDON );
    }

    UEDBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    UEDGeneralBuild(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 0.70);

    UEDUpgradesHard(player, c_ldPhaseOpen);

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 30, c_UEDU_WORKER);

    UEDTechUp(player, c_ldPhaseOpen);

    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_UEDU_TRANSPORT );
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Mid, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  UEDMidArmyInitHard
//--------------------------------------------------------------------------------------------------
int UEDMidArmyInitHard (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Rush) {
        AIAddToStockArmy(player, c_UEDU_COMBAT_1, 3);
        AIAddToStockArmy(player, c_UEDU_COMBAT_2, 3);
        AIAddToStockArmy(player, c_UEDU_COMBAT_6, 2);
        AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_1, c_UEDU_COMBAT_3), 2);
        // validation: 1500 resources
        duration = 300 + RandomInt(-15, 15);
    }
    else if (buildType == e_buildType_Timing) {
        AIAddToStockArmy(player, c_UEDU_COMBAT_1, 3);
        AIAddToStockArmy(player, c_UEDU_COMBAT_2, 5);
        AIAddToStockArmy(player, c_UEDU_COMBAT_6, 1);
        AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_1, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2)), 2);
        AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_6, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2)), 1);
        // validation: 1925 resources
        duration = 370 + RandomInt(-15, 15);
    }
    else if (buildType == e_buildType_Power) {
        armyRoll = RandomInt(0, 2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 1);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 3, c_UEDU_COMBAT_2, 2);
            AIAddToStockArmy(player, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2), 2);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_6, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2)), 1);
            // validation: 1950 resources
            duration = 340 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 2);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_10, 3, c_UEDU_COMBAT_8, 2);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_3, 3, c_UEDU_COMBAT_2, 2);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_3, 3, c_UEDU_COMBAT_2, 2);
            // validation: 2220 resources
            duration = 360 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Macro) {
        armyRoll = RandomInt(1,6);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 7);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 1);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 4, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2), 2);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_6, 2, AIPickFrom3(c_UEDU_COMBAT_2, c_UEDU_COMBAT_5, c_UEDU_COMBAT_AIR_2), 3);
            // validation: 2915 resources
            duration = 520 + RandomInt(-25, 25);
        }
        else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 1);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_6, 2, c_UEDU_COMBAT_2, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_10, 4);
            // validation: 2990 resources
            duration = 520 + RandomInt(-25, 25);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 1);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_6, 1, c_UEDU_COMBAT_2, 2);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_8, c_UEDU_COMBAT_AIR_4), 2);
            // validation: 2925 resources
            duration = 500 + RandomInt(-25, 25);
        }
    }
    else if (buildType == e_buildType_Air) {
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 7);
            // validation: 2050 resources
            duration = 320 + RandomInt(-15, 15);
        }
        else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 5);
            // validation: 2075 resources
            duration = 340 + RandomInt(-15, 15);
        }
    }
    else {
        return UEDMidArmyInitHard(player, e_buildType_Macro);
    }


    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  UEDMidInitHard
//--------------------------------------------------------------------------------------------------
void UEDMidInitHard (int player) {
    int buildType = 0;

    AIChooseNextOpeningBuild(player);
    buildType = AIGetUserInt(player, c_openingBuildType);
    AISetupNextArmy (player, buildType, c_ldPhaseMid, UEDMidArmyInitHard);

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Mid, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  UEDMidBuildHard
//--------------------------------------------------------------------------------------------------
void UEDMidBuildHard (int player) {
    int buildType = AIGetUserInt(player, c_openingBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentOpening(player)) {
        AISetMainState(player, e_mainState_Mid, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    UEDBasicEconomy(player, c_ldPhaseMid, 20);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_UEDU_TRANSPORT );
    }
    UEDBasicExpansion(player, c_ldPhaseMid, 5500, 1500);

    UEDBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    UEDGeneralBuild(player, c_ldPhaseMid);

    AILDStockWorkers( player, 30, c_UEDU_WORKER);

    if (buildType == e_buildType_Rush) {
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStockUnitNext( player, 6, c_UEDB_ADDON, c_stockIdle );
    }
    else if (buildType == e_buildType_Timing) {
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStock( player, 1, c_UEDB_PROD_2);
        AISetStock( player, 9, c_UEDB_ADDON);
    }
    else if (buildType == e_buildType_Power) {
        if (UEDMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStock( player, 1, c_UEDB_PROD_2);
        AISetStock( player, 9, c_UEDB_ADDON);
    }
    else if (buildType == e_buildType_Macro) {
        if (UEDMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStock( player, 1, c_UEDB_PROD_2);
        AISetStock( player, 9, c_UEDB_ADDON);
    }
    else if (buildType == e_buildType_Air) {
        if (UEDMacroExpand(player)) { return; }
        AISetStock( player, 2, c_UEDB_PROD_3 );
        AISetStock( player, 9, c_UEDB_ADDON );
    }

    if (AINeedsDetection(player)) {
        AISetStock( player, 1, c_UEDU_DETECTOR );
        AISetStock( player, 2, c_UEDB_DEFENSE_2 );
    }

    AISetStockArmyScale(player, 0.70);

    AILDStockWorkers( player, 60, c_UEDU_WORKER);

    UEDUpgradesHard(player, c_ldPhaseMid);

    AISetStockArmyScale(player, 1.00);

    AISetStock( player, 3, c_UEDU_DETECTOR );

    UEDTechUp(player, c_ldPhaseMid);

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
}

//--------------------------------------------------------------------------------------------------
//  UEDLateArmyInitHard
//--------------------------------------------------------------------------------------------------
int UEDLateArmyInitHard (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        armyRoll = RandomInt(0,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 12);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 5);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 3, c_UEDU_COMBAT_3, 3);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_2, 3, c_UEDU_COMBAT_3, 3);
            // validation: 2850 resources
            duration = 280 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 8, c_UEDU_COMBAT_3, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 5);
            // validation: 2950 resources
            duration = 280 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_HighTech) {
        armyRoll = RandomInt(1,6);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 8);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_10, 1);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_6, 1, c_UEDU_COMBAT_10, 1);
            // validation: 3450 resources
            duration = 300 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_8, 3);
            // validation: 3425 resources
            duration = 310 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 8);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 5);
            // validation: 3475  resources
            duration = 290 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Special) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 12);
            AIAddToStockArmy(player, c_UEDU_COMBAT_4, 6);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_3, 4, c_UEDU_COMBAT_2, 3);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_3, 4, c_UEDU_COMBAT_2, 3);
            // validation: 3650 resources
            duration = 320 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 12);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 3);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_9, c_UEDU_COMBAT_AIR_4), 3);
            // validation: 3975 resources
            duration = 340 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_4, 4);
            // validation: 3925 resources
            duration = 340 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_7, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_10, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 2);
            // validation: 3875 resources
            duration = 360 + RandomInt(-15, 15);
        } else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 9);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_AIR_3, c_UEDU_COMBAT_AIR_4), 3);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_AIR_5, c_UEDU_COMBAT_8), 3);
            // validation: 3975 resources
            duration = 370 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Air) {
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 6);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_AIR_1, c_UEDU_COMBAT_AIR_2), 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_4, 2);
            // validation: 3700 resources
            duration = 290 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_3, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_5, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_4, 2);
            // validation: 3800 resources
            duration = 300 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_3, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_4, 2);
            // validation: 3700 resources
            duration = 310 + RandomInt(-15, 15);
        }
    } else {
        return UEDLateArmyInitHard(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  UEDFinalArmyInitHard
//--------------------------------------------------------------------------------------------------
int UEDFinalArmyInitHard (int player, int buildType) {
    int armyRoll = 0;
    int duration = 0;

    if (buildType == e_buildType_Core) {
        armyRoll = RandomInt(0,3);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 12);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 8);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_1, 4, c_UEDU_COMBAT_3, 4);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_2, 3, c_UEDU_COMBAT_3, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_4, 3);
            // validation: 4425 resources
            duration = 250 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 12);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 8);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_4, 3);
            // validation: 4325 resources
            duration = 250 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 11);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 10);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 2);
            // validation: 4375 resources
            duration = 270 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_HighTech) {
        armyRoll = RandomInt(1,6);
        if (armyRoll <= 3) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_10, 2);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_6, 2, c_UEDU_COMBAT_10, 2);
            // validation: 3700 resources
            duration = 260 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 3);
            AIAddToStockArmy(player, c_UEDU_COMBAT_7, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_8, 4);
            // validation: 4475 resources
            duration = 280 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_3, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_4, 2);
            // validation: 4350  resources
            duration = 290 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Special) {
        armyRoll = RandomInt(1,2);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 12);
            AIAddToStockArmy(player, c_UEDU_COMBAT_4, 10);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_3, 4, c_UEDU_COMBAT_2, 3);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_3, 4, c_UEDU_COMBAT_2, 3);
            // validation: 5000 resources
            duration = 320 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 8);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 4);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_9, c_UEDU_COMBAT_AIR_4), 5);
            // validation: 4500 resources
            duration = 290 + RandomInt(-15, 15);
        }
    }
    else if (buildType == e_buildType_Mixed) {
        armyRoll = RandomInt(1,5);
        if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_3, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_4, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_9, 3);
            // validation: 5075 resources
            duration = 330 + RandomInt(-15, 15);
        } else if (armyRoll <= 4) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_1, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_5, 6);
            AIAddToStockArmy(player, c_UEDU_COMBAT_7, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_10, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_6, 4);
            // validation: 5050 resources
            duration = 320 + RandomInt(-15, 15);
        } else if (armyRoll <= 5) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_2, 8);
            AIAddToStockArmyPickFrom2Count(player, c_UEDU_COMBAT_3, 7, c_UEDU_COMBAT_5, 5);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_AIR_3, c_UEDU_COMBAT_AIR_4), 3);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_AIR_5, c_UEDU_COMBAT_8), 5);
            // validation: 5575 resources
            duration = 340 + RandomInt(-15, 15);
        }
    } else if (buildType == e_buildType_Air) {
        armyRoll = RandomInt(1,3);
        if (armyRoll <= 1) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_7, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 7);
            AIAddToStockArmy(player, AIPickFrom2(c_UEDU_COMBAT_AIR_1, c_UEDU_COMBAT_AIR_2), 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_4, 2);
            // validation: 4750 resources
            duration = 290 + RandomInt(-15, 15);
        } else if (armyRoll <= 2) {
            AIAddToStockArmy(player, c_UEDU_COMBAT_7, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 2);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_3, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_5, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_4, 2);
            // validation: 5250 resources
            duration = 300 + RandomInt(-15, 15);
        } else {
            AIAddToStockArmy(player, c_UEDU_COMBAT_7, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_2, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_1, 4);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_3, 5);
            AIAddToStockArmy(player, c_UEDU_COMBAT_AIR_4, 2);
            // validation: 4850 resources
            duration = 310 + RandomInt(-15, 15);
        }
    } else {
        return UEDFinalArmyInitHard(player, e_buildType_Core);
    }

    AISetUserInt(player, c_ldNextArmyRoll, armyRoll);
    return duration;
}

//--------------------------------------------------------------------------------------------------
//  UEDLateInitHard
//--------------------------------------------------------------------------------------------------
void UEDLateInitHard (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int curPhase = c_ldPhaseLate;
    int buildType = 0;

    AIChooseNextLateGameBuild(player);
    buildType = AIGetUserInt(player, c_lateGameBuildType);

    if (lateLoop <= 0) { // First Late Loop
        AISetupNextArmy (player, buildType, curPhase, UEDLateArmyInitHard);
    } else {
        curPhase = c_ldPhaseFinal + lateLoop;
        AISetupNextArmy (player, buildType, curPhase, UEDFinalArmyInitHard);
    }

    AISetFlag(player, e_flagsScouting, true);
    AISetFlag(player, e_flagsClearObs, true);
    AISetFlag(player, e_flagsLateScout, true);
    AISetFlag(player, e_flagsDetect, true);

    AISetMainState(player, e_mainState_Late, e_mainSubState_Build);
}

//--------------------------------------------------------------------------------------------------
//  UEDLateBuildHard
//--------------------------------------------------------------------------------------------------
void UEDLateBuildHard (int player) {
    int lateLoop = AIGetUserInt(player, c_ldNumLateLoops);
    int buildType = AIGetUserInt(player, c_lateGameBuildType);
    int armyRoll = AIGetUserInt(player, c_ldNextArmyRoll);
    int timeOut = AIGetUserInt(player, c_nextArmyTime);
    bool nextState = false;

    if (AIHasPlayerChangedCurrentLateGame(player)) {
        AISetMainState(player, e_mainState_Late, e_mainSubState_Init);
        return;
    }

    AIClearStock(player);

    UEDBasicEconomy(player, c_ldPhaseLate, 20);
    if (buildType == e_buildType_Air) {
        AISetStock( player, 1, c_UEDU_TRANSPORT );
    }
    UEDBasicExpansion(player, c_ldPhaseLate, 14000, 4500);

    UEDBasicDefenseStock(player);

    AISetStockArmyScale(player, 0.35);

    UEDGeneralBuild(player, c_ldPhaseLate);

    AILDStockWorkers( player, 30, c_UEDU_WORKER);

    if (buildType == e_buildType_Core) {
        if (UEDMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStockUnitNext( player, 2, c_UEDB_PROD_2, c_stockIdle );
        AISetStockUnitNext( player, 1, c_UEDB_PROD_3, c_stockIdle );
        AISetStockUnitNext( player, 15, c_UEDB_ADDON, c_stockIdle );
    }
    else if (buildType == e_buildType_HighTech) {
        if (UEDMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStockUnitNext( player, 2, c_UEDB_PROD_2, c_stockIdle );
        AISetStockUnitNext( player, 1, c_UEDB_PROD_3, c_stockIdle );
        AISetStockUnitNext( player, 15, c_UEDB_ADDON, c_stockIdle );
    }
    else if (buildType == e_buildType_Special) {
        if (UEDMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStockUnitNext( player, 2, c_UEDB_PROD_2, c_stockIdle );
        AISetStockUnitNext( player, 1, c_UEDB_PROD_3, c_stockIdle );
        AISetStockUnitNext( player, 15, c_UEDB_ADDON, c_stockIdle );
    }
    else if (buildType == e_buildType_Mixed) {
        if (UEDMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 2, c_UEDB_PROD_1, c_stockIdle );
        AISetStockUnitNext( player, 2, c_UEDB_PROD_2, c_stockIdle );
        AISetStockUnitNext( player, 1, c_UEDB_PROD_3, c_stockIdle );
        AISetStockUnitNext( player, 15, c_UEDB_ADDON, c_stockIdle );
    }
    else if (buildType == e_buildType_Air) {
        if (UEDMacroExpand(player)) { return; }
        AISetStockUnitNext( player, 1, c_UEDB_PROD_1, c_stockIdle );
        AISetStockUnitNext( player, 2, c_UEDB_PROD_2, c_stockIdle );
        AISetStockUnitNext( player, 2, c_UEDB_PROD_3, c_stockIdle );
        AISetStockUnitNext( player, 15, c_UEDB_ADDON, c_stockIdle );
    }

    AISetStock( player, 2, c_UEDU_DETECTOR );

    AISetStockArmyScale(player, 0.70);

    AISetStock( player, 2, c_UEDU_TRANSPORT );
    AISetStock( player, 3, c_UEDU_DETECTOR );
    AISetStock( player, 2, c_UEDB_DEFENSE_2 );

    AISetStockArmyScale(player, 1.00);

    AILDStockWorkers( player, 60, c_UEDU_WORKER);

    if (lateLoop <= 0) { // First Late Loop
        UEDUpgradesHard(player, c_ldPhaseLate);
        UEDTechUp(player, c_ldPhaseLate);
    } else { // Remaining Loops
        UEDUpgradesHard(player, c_ldPhaseFinal);
        UEDTechUp(player, c_ldPhaseFinal);
    }

    AIEnableStock(player);

    AILDGeneralSharedLogic(player);

    nextState = AITestTimeout(player, timeOut, e_mainState_Late, e_mainSubState_Init);
    if (nextState) {
        lateLoop += 1;
        AISetUserInt(player, c_ldNumLateLoops, lateLoop);
    }
}

//--------------------------------------------------------------------------------------------------
//  UEDOpenHard
//--------------------------------------------------------------------------------------------------
void UEDOpenHard (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        UEDOpenInitHard(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { UEDOpenBuildHard(player); }
    else { ErrorMeleeScript(player, "Invalid Open MainSubState UEDHard"); }
}

//--------------------------------------------------------------------------------------------------
//  UEDMidHard
//--------------------------------------------------------------------------------------------------
void UEDMidHard (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        UEDMidInitHard(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { UEDMidBuildHard(player);  }
    else { ErrorMeleeScript(player, "Invalid Mid MainSubState UEDHard"); }
}

//--------------------------------------------------------------------------------------------------
//  UEDLateHard
//--------------------------------------------------------------------------------------------------
void UEDLateHard (int player) {
    int mainSubState = AIState(player, e_mainSubState);

    if (mainSubState != e_mainSubState_Build) {
        UEDLateInitHard(player);
        mainSubState = AIState(player, e_mainSubState);
    }

    if (mainSubState == e_mainSubState_Build) { UEDLateBuildHard(player);  }
    else { ErrorMeleeScript(player, "Invalid Late MainSubState UEDHard"); }
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//--------------------------------------------------------------------------------------------------
//  Counter-Attack Units
//--------------------------------------------------------------------------------------------------
static void InitCounters (int player) {
    // versus Protoss

    //AICounterUnitSetup(player, c_PU_Zealot,             1.00, c_UEDU_COMBAT_3,       1.00, c_UEDU_COMBAT_3);
    //AICounterUnitSetup(player, c_PU_Stalker,            1.00, c_UEDU_COMBAT_5,   1.00, c_UEDU_COMBAT_5);
    //AICounterUnitSetup(player, c_PU_Sentry,             1.00, c_UEDU_COMBAT_2,     1.00, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_PU_HighTemplar,        1.00, c_UEDU_COMBAT_2,     1.00, c_UEDU_COMBAT_9);
    //AICounterUnitSetup(player, c_PU_DarkTemplar,        1.50, c_UEDU_COMBAT_2,     1.50, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_PU_Archon,             1.00, c_UEDU_COMBAT_8,      1.00, c_UEDU_COMBAT_8);
    //AICounterUnitSetup(player, c_PU_Immortal,           4.00, c_UEDU_COMBAT_1,    4.00, c_UEDU_COMBAT_1);
    //AICounterUnitSetup(player, c_PU_Colossus,           2.00, c_UEDU_COMBAT_6,  1.00, c_UEDU_COMBAT_8);
    //AICounterUnitSetup(player, c_PU_Phoenix,            2.00, c_UEDU_COMBAT_2,     0.50, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_PU_VoidRay,            3.00, c_UEDU_COMBAT_2,     0.50, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_PU_Carrier,            3.00, c_UEDU_COMBAT_7,     3.00, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_PB_PhotonCannon,       3.00, c_UEDU_COMBAT_5,   1.00, c_UEDU_COMBAT_AIR_4);
    //AICounterUnitSetup(player, c_PU_Mothership,         5.00, c_UEDU_COMBAT_7,     5.00, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_PU_MothershipCore,     1.00, c_UEDU_COMBAT_7,     1.00, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_PU_Oracle,             1.00, c_UEDU_COMBAT_7,     1.00, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_PU_Tempest,            3.00, c_UEDU_COMBAT_7,     3.00, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_PU_Adept,              1.00, c_UEDU_COMBAT_2,     1.00, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_PU_Disruptor,          0.75, c_UEDU_COMBAT_8,      0.75, c_UEDU_COMBAT_8);

    // versus Terran
    //AICounterUnitSetup(player, c_TU_Marine,             1.00, c_UEDU_COMBAT_1,    0.50, c_UEDU_COMBAT_3);
    //AICounterUnitSetup(player, c_TU_Marauder,           1.00, c_UEDU_COMBAT_1,    0.50, c_UEDU_COMBAT_5);
    //AICounterUnitSetup(player, c_TU_Reaper,             0.60, c_UEDU_COMBAT_1,    0.60, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_TU_Ghost,              0.50, c_UEDU_COMBAT_2,     0.50, c_UEDU_COMBAT_9);
    //AICounterUnitSetup(player, c_TU_Hellion,            0.60, c_UEDU_COMBAT_2,     0.60, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_TU_SiegeTank_Alias,    1.00, c_UEDU_COMBAT_6,  0.50, c_UEDU_COMBAT_AIR_4);
    //AICounterUnitSetup(player, c_TU_Thor,               4.00, c_UEDU_COMBAT_5,   1.00, c_UEDU_COMBAT_6);
    //AICounterUnitSetup(player, c_TU_Viking_Alias,       2.00, c_UEDU_COMBAT_2,     0.50, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_TU_Medivac,            0.60, c_UEDU_COMBAT_AIR_1,     0.60, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_TU_Raven,              0.50, c_UEDU_COMBAT_AIR_1,     0.50, c_UEDU_COMBAT_9);
    //AICounterUnitSetup(player, c_TU_Banshee,            0.60, c_UEDU_COMBAT_AIR_1,     0.60, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_TU_Battlecruiser,      2.50, c_UEDU_COMBAT_AIR_1,     2.50, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_TB_Bunker,             3.00, c_UEDU_COMBAT_5,   1.00, c_UEDU_COMBAT_AIR_4);
    //AICounterUnitSetup(player, c_TU_WidowMine,          0.75, c_UEDU_COMBAT_2,     0.75, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_TU_Cyclone,            1.00, c_UEDU_COMBAT_1,    1.00, c_UEDU_COMBAT_5);
    //AICounterUnitSetup(player, c_TU_Liberator_Alias,    1.00, c_UEDU_COMBAT_7,     0.50, c_UEDU_COMBAT_AIR_1);

    // versus Zerg
    //AICounterUnitSetup(player, c_ZU_Zergling,           0.60, c_UEDU_COMBAT_1,    0.30, c_UEDU_COMBAT_3);
    //AICounterUnitSetup(player, c_ZU_Baneling,           0.50, c_UEDU_COMBAT_2,     0.50, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_ZU_Roach,              0.80, c_UEDU_COMBAT_5,   0.80, c_UEDU_COMBAT_5);
    //AICounterUnitSetup(player, c_ZU_Hydralisk,          2.00, c_UEDU_COMBAT_1,    0.50, c_UEDU_COMBAT_10);
    //AICounterUnitSetup(player, c_ZU_Infestor,           1.50, c_UEDU_COMBAT_2,     1.50, c_UEDU_COMBAT_9);
    //AICounterUnitSetup(player, c_ZU_Mutalisk,           1.50, c_UEDU_COMBAT_2,     0.75, c_UEDU_COMBAT_AIR_3);
    //AICounterUnitSetup(player, c_ZU_Corruptor,          1.00, c_UEDU_COMBAT_2,     0.40, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_ZU_Ultralisk,          2.00, c_UEDU_COMBAT_5,   1.00, c_UEDU_COMBAT_8);
    //AICounterUnitSetup(player, c_ZU_BroodLord,          2.00, c_UEDU_COMBAT_AIR_1,     2.00, c_UEDU_COMBAT_AIR_1);
    //AICounterUnitSetup(player, c_ZB_SpineCrawler,       3.00, c_UEDU_COMBAT_5,   1.00, c_UEDU_COMBAT_AIR_4);
    //AICounterUnitSetup(player, c_ZU_SwarmHost,          2.00, c_UEDU_COMBAT_3,       1.00, c_UEDU_COMBAT_10);
    //AICounterUnitSetup(player, c_ZU_Viper,              1.00, c_UEDU_COMBAT_AIR_1,     1.00, c_UEDU_COMBAT_7);
    //AICounterUnitSetup(player, c_ZU_Ravager,            1.00, c_UEDU_COMBAT_2,     1.00, c_UEDU_COMBAT_2);
    //AICounterUnitSetup(player, c_ZU_Lurker,             2.00, c_UEDU_COMBAT_5,   1.00, c_UEDU_COMBAT_6);
}

//--------------------------------------------------------------------------------------------------
//  UEDSubStateName
//--------------------------------------------------------------------------------------------------
string UEDSubStateName (int state) {
    // TODO Call the individual difficulties to return a real substate name
    return "-" + IntToString(state) + "-";
}

//--------------------------------------------------------------------------------------------------
//  DebugCallbackUED
//--------------------------------------------------------------------------------------------------
void DebugCallbackUED (int player) {
    DebugAI("=====UED=====\n");
    DebugMelee(player);
    DebugAI("e_mainState = "        + MainStateName(AIState(player, e_mainState))           +
            ", e_mainSubState = "   + UEDSubStateName(AIState(player, e_mainSubState)) +
            ", e_attackState = "    + AttackStateName(AIState(player, e_attackState))
    );
}

//--------------------------------------------------------------------------------------------------
//  AINewUnitUED
//--------------------------------------------------------------------------------------------------
void AINewUnitUED (int player, unit u) {
    wave w;
    string type = UnitGetType(u);

    // ignored units
    //
    if (UnitTypeTestAttribute(type, c_unitAttributeStructure)) {
        return;
    }
    if (UnitTypeTestFlag(type, c_unitFlagWorker)) {
        return;
    }

    // units that stay near home
    //
    if (type == c_UEDU_TRANSPORT) {
        AIWaveAddUnitPriority(AIWaveGet(player, c_waveHome), u, c_prioWavePeon);
        return;
    }

    // clear obstacle units
    //
    if (AIWaveNeedClearObsUnits(player)) {
        if (type == c_UEDU_COMBAT_1 || type == c_UEDU_COMBAT_2 || type == c_UEDU_COMBAT_5) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveClearObs));
            return;
        }
    }

    // diversion units
    if (AIGetFlag(player, e_flagsDiversion)) {
        if (type == c_UEDU_COMBAT_10) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveDivert1));
            return;
        }
        if (type == c_UEDU_COMBAT_AIR_2) {
            AIMergeUnit(player, u, AIWaveGet(player, c_waveDivert2));
            return;
        }
    }

    // Processor
    //
    if (type == c_UEDU_DETECTOR) {

        AINewDetector(player, u, false);

        if (AINumEnemyBuildings(player) == 0) {
            if (AIOfferNewScout(player, u)) {
                return;
            }
        }

        AIWaveAddUnitPriority(AIWaveGet(player, c_waveMain), u, c_prioWavePeon);
        return;
    }

    // main wave units
    //
    AINewUnitDefault(player, u);
}

//--------------------------------------------------------------------------------------------------
//  AIGetScoutUED
//--------------------------------------------------------------------------------------------------
unit AIGetScoutUED (int player, int index, unit prev, bool allowWorkers) {
    unit Processor;
    string prevType = UnitGetType(prev);

    if (!PlayerBeaconIsSet(player, c_beaconScout) &&
        !AIGetFlag(player, e_flagsScouting)) {
        // if no scouting beacons are set and we're not ready to scout, don't return a unit
        return c_nullUnit;
    }

    if (index == 1 && PlayerBeaconIsSet(player, c_beaconScout)) {
        AISetFlag(player, e_flagsScouting, true);
        if (allowWorkers) {
            // only return a worker, we want to claim a tower
            if (prevType == c_UEDU_WORKER) {
                return prev;
            }
            return AIGrabUnit(player, c_UEDU_WORKER, c_prioScout, null);
        }
    }

    if (AINumEnemyBuildings(player) == 0) {
        // only use medivac scouts if we don't know of any enemy buildings
        //   (ie we need a flying scout to check other islands etc).
        if (prevType == c_UEDU_DETECTOR) {
            return prev;
        }
        Processor = AIGrabUnit(player, c_UEDU_DETECTOR, c_prioScout, null);
        if (Processor) {
            return Processor;
        }
    }

    if (prev) {
        return prev;
    }

    // back to allowing workers as late scouts
    //if (AIGetFlag(player, e_flagsLateScout)) {
    //    return c_nullUnit;
    //}
    if (!allowWorkers) {
        return c_nullUnit;
    }
    return AIGrabUnit(player, c_UEDU_WORKER, c_prioScout, null);
}

//--------------------------------------------------------------------------------------------------
//  AIEarlyDefScoutUED
//--------------------------------------------------------------------------------------------------
unit AIEarlyDefScoutUED (int player, unit prev, bool allowWorkers) {
    unit obs;
    string prevType;

    if (!AIGetFlag(player, e_flagsEarlyDefScout)) {
        return c_nullUnit;
    }
    prevType = UnitGetType(prev);
    if (prevType == c_UEDU_DETECTOR) {
        return prev;
    }
    obs = AIGrabUnit(player, c_UEDU_DETECTOR, c_prioScout, null);
    if (obs) {
        return obs;
    }
    if (prevType == c_UEDU_COMBAT_1) {
        return prev;
    }
    obs = AIGrabUnit(player, c_UEDU_COMBAT_1, c_prioScout, null);
    if (obs) {
        return obs;
    }
    if (prev) {
        return prev;
    }
    if (!allowWorkers) {
        return c_nullUnit;
    }
    return AIGrabUnit(player, c_UEDU_WORKER, c_prioScout, null);
}

//--------------------------------------------------------------------------------------------------
//  AIWaveThinkUED
//--------------------------------------------------------------------------------------------------
void AIWaveThinkUED (int player, wave w, int type) {
    AIWaveThinkDefault(player, w, type);
}

//--------------------------------------------------------------------------------------------------
//  UED Init
//--------------------------------------------------------------------------------------------------
static void UEDInit (int player) {
    InitCounters(player);
    AIMeleeSharedInit(player);
    AISetFlag(player, e_flagsScouting, false);
    AISetFlag(player, e_flagsEarlyDefScout, false);
    AISetDefaultArmyUnit(player, c_UEDU_COMBAT_1);
    AISetDefaultTownHall(player, c_UEDB_MAIN);
    AISetMainState(player, e_mainState_Open, e_mainSubState_Init);

    if (AIPlayerDifficulty(player) > c_skirHard) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringToText("UED AI: Difficulties above Harder are not supported at this time, please use at most Harder difficulty for this AI"));
    }
}

//--------------------------------------------------------------------------------------------------
void UEDOpen (int player) {
    int diff = AIPlayerDifficulty(player);
    UEDOpenHard(player);

}

void UEDMid (int player) {
    int diff = AIPlayerDifficulty(player);
    UEDMidHard(player);
}

void UEDLate (int player) {
    int diff = AIPlayerDifficulty(player);
    UEDLateHard(player);
}

//--------------------------------------------------------------------------------------------------
//  AIMeleeUED
//--------------------------------------------------------------------------------------------------
void AIMeleeUED (int player) {
    int mainState = AIState(player, e_mainState);

    if (AIPlayerDifficulty(player) >= c_skirChMoney) {
        AIMeleeCheatResources(player);
    }

    if (mainState == e_mainState_Init)      { UEDInit(player); }
    else if (mainState == e_mainState_Open) { UEDOpen(player); }
    else if (mainState == e_mainState_Mid ) { UEDMid (player); }
    else if (mainState == e_mainState_Late) { UEDLate(player); }
    else { ErrorMeleeScript(player, "Invalid mainState"); }
}